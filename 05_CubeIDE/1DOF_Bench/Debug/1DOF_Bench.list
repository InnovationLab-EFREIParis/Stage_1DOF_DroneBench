
1DOF_Bench.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005578  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08005700  08005700  00015700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057a4  080057a4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080057a4  080057a4  000157a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057ac  080057ac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057ac  080057ac  000157ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057b0  080057b0  000157b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080057b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  2000000c  080057c0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  080057c0  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018757  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026ce  00000000  00000000  00038793  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001270  00000000  00000000  0003ae68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001188  00000000  00000000  0003c0d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002f22  00000000  00000000  0003d260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001511f  00000000  00000000  00040182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107841  00000000  00000000  000552a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015cae2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f14  00000000  00000000  0015cb38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080056e8 	.word	0x080056e8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080056e8 	.word	0x080056e8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004c0:	b590      	push	{r4, r7, lr}
 80004c2:	b089      	sub	sp, #36	; 0x24
 80004c4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
		enum states etat;
		etat = init_motor;
 80004c6:	2302      	movs	r3, #2
 80004c8:	76fb      	strb	r3, [r7, #27]
		char r_buffer[2];
		int size=25;
 80004ca:	2319      	movs	r3, #25
 80004cc:	617b      	str	r3, [r7, #20]
		char buffer [size];
 80004ce:	697c      	ldr	r4, [r7, #20]
 80004d0:	1e63      	subs	r3, r4, #1
 80004d2:	613b      	str	r3, [r7, #16]
 80004d4:	4623      	mov	r3, r4
 80004d6:	4618      	mov	r0, r3
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	f04f 0200 	mov.w	r2, #0
 80004e0:	f04f 0300 	mov.w	r3, #0
 80004e4:	00cb      	lsls	r3, r1, #3
 80004e6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80004ea:	00c2      	lsls	r2, r0, #3
 80004ec:	4623      	mov	r3, r4
 80004ee:	4618      	mov	r0, r3
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	f04f 0200 	mov.w	r2, #0
 80004f8:	f04f 0300 	mov.w	r3, #0
 80004fc:	00cb      	lsls	r3, r1, #3
 80004fe:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000502:	00c2      	lsls	r2, r0, #3
 8000504:	4623      	mov	r3, r4
 8000506:	3307      	adds	r3, #7
 8000508:	08db      	lsrs	r3, r3, #3
 800050a:	00db      	lsls	r3, r3, #3
 800050c:	ebad 0d03 	sub.w	sp, sp, r3
 8000510:	466b      	mov	r3, sp
 8000512:	3300      	adds	r3, #0
 8000514:	60fb      	str	r3, [r7, #12]
		int counter = 0;
 8000516:	2300      	movs	r3, #0
 8000518:	60bb      	str	r3, [r7, #8]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800051a:	f000 fc61 	bl	8000de0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800051e:	f000 f857 	bl	80005d0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000522:	f000 f9c5 	bl	80008b0 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000526:	f000 f993 	bl	8000850 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 800052a:	f000 f8a3 	bl	8000674 <MX_ADC1_Init>
	MX_TIM3_Init();
 800052e:	f000 f917 	bl	8000760 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	// Light up green led
	setGreenLed();
 8000532:	f000 fa28 	bl	8000986 <setGreenLed>
	// blink green led
	blinkGreenLed(10, 100);
 8000536:	2164      	movs	r1, #100	; 0x64
 8000538:	200a      	movs	r0, #10
 800053a:	f000 fa2e 	bl	800099a <blinkGreenLed>
	// Welcome message on UART
	sendWelcomeMsgRS232(&huart2);
 800053e:	4821      	ldr	r0, [pc, #132]	; (80005c4 <main+0x104>)
 8000540:	f000 fa48 	bl	80009d4 <sendWelcomeMsgRS232>
	//la fonction au dessus pose des soucis
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000544:	2104      	movs	r1, #4
 8000546:	4820      	ldr	r0, [pc, #128]	; (80005c8 <main+0x108>)
 8000548:	f003 fb18 	bl	8003b7c <HAL_TIM_PWM_Start>
	TIM3->CCR2 = 1512;
 800054c:	4b1f      	ldr	r3, [pc, #124]	; (80005cc <main+0x10c>)
 800054e:	f44f 62bd 	mov.w	r2, #1512	; 0x5e8
 8000552:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(5000);
 8000554:	f241 3088 	movw	r0, #5000	; 0x1388
 8000558:	f000 fcbe 	bl	8000ed8 <HAL_Delay>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		__HAL_UART_CLEAR_OREFLAG(&huart2);
 800055c:	4b19      	ldr	r3, [pc, #100]	; (80005c4 <main+0x104>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	2208      	movs	r2, #8
 8000562:	621a      	str	r2, [r3, #32]

					//differents etats qu'on peut avoir
				//idle_mode,init_uc,init_motor,motor_ready,manual_mode,auto_mode,info_mode

		//---------changement d'etat-------
				changing(etat, &huart2);//fonction qui change l'etat dans Yann.c
 8000564:	7efb      	ldrb	r3, [r7, #27]
 8000566:	4917      	ldr	r1, [pc, #92]	; (80005c4 <main+0x104>)
 8000568:	4618      	mov	r0, r3
 800056a:	f000 fbc3 	bl	8000cf4 <changing>

				//use a buffer for receiving data
				//can't or don't know if the data is received correctly, hard to handlelarge datas and string
				//might consider using interrupts or DMA

					for (int i = 0; (i <size) && (buffer[i]!='/'); ++i) {
 800056e:	2300      	movs	r3, #0
 8000570:	61fb      	str	r3, [r7, #28]
 8000572:	e01b      	b.n	80005ac <main+0xec>
						buffer[i]=HAL_UART_Receive(&huart2,(uint8_t*) r_buffer, 2, 10);
 8000574:	1d39      	adds	r1, r7, #4
 8000576:	230a      	movs	r3, #10
 8000578:	2202      	movs	r2, #2
 800057a:	4812      	ldr	r0, [pc, #72]	; (80005c4 <main+0x104>)
 800057c:	f004 fb7c 	bl	8004c78 <HAL_UART_Receive>
 8000580:	4603      	mov	r3, r0
 8000582:	4619      	mov	r1, r3
 8000584:	68fa      	ldr	r2, [r7, #12]
 8000586:	69fb      	ldr	r3, [r7, #28]
 8000588:	4413      	add	r3, r2
 800058a:	460a      	mov	r2, r1
 800058c:	701a      	strb	r2, [r3, #0]
						HAL_Delay(50);
 800058e:	2032      	movs	r0, #50	; 0x32
 8000590:	f000 fca2 	bl	8000ed8 <HAL_Delay>
						HAL_UART_Transmit(&huart2,(uint8_t*) r_buffer, 2, 10);
 8000594:	1d39      	adds	r1, r7, #4
 8000596:	230a      	movs	r3, #10
 8000598:	2202      	movs	r2, #2
 800059a:	480a      	ldr	r0, [pc, #40]	; (80005c4 <main+0x104>)
 800059c:	f004 fad8 	bl	8004b50 <HAL_UART_Transmit>
						HAL_Delay(50);
 80005a0:	2032      	movs	r0, #50	; 0x32
 80005a2:	f000 fc99 	bl	8000ed8 <HAL_Delay>
					for (int i = 0; (i <size) && (buffer[i]!='/'); ++i) {
 80005a6:	69fb      	ldr	r3, [r7, #28]
 80005a8:	3301      	adds	r3, #1
 80005aa:	61fb      	str	r3, [r7, #28]
 80005ac:	69fa      	ldr	r2, [r7, #28]
 80005ae:	697b      	ldr	r3, [r7, #20]
 80005b0:	429a      	cmp	r2, r3
 80005b2:	dad3      	bge.n	800055c <main+0x9c>
 80005b4:	68fa      	ldr	r2, [r7, #12]
 80005b6:	69fb      	ldr	r3, [r7, #28]
 80005b8:	4413      	add	r3, r2
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b2f      	cmp	r3, #47	; 0x2f
 80005be:	d1d9      	bne.n	8000574 <main+0xb4>
		__HAL_UART_CLEAR_OREFLAG(&huart2);
 80005c0:	e7cc      	b.n	800055c <main+0x9c>
 80005c2:	bf00      	nop
 80005c4:	200000e0 	.word	0x200000e0
 80005c8:	20000028 	.word	0x20000028
 80005cc:	40000400 	.word	0x40000400

080005d0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b096      	sub	sp, #88	; 0x58
 80005d4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80005d6:	f107 0314 	add.w	r3, r7, #20
 80005da:	2244      	movs	r2, #68	; 0x44
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f005 f87a 	bl	80056d8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80005e4:	463b      	mov	r3, r7
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
 80005f0:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 80005f2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005f6:	f001 ff0b 	bl	8002410 <HAL_PWREx_ControlVoltageScaling>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 8000600:	f000 f9bc 	bl	800097c <Error_Handler>
	}
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000604:	2302      	movs	r3, #2
 8000606:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000608:	f44f 7380 	mov.w	r3, #256	; 0x100
 800060c:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800060e:	2310      	movs	r3, #16
 8000610:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000612:	2302      	movs	r3, #2
 8000614:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000616:	2302      	movs	r3, #2
 8000618:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 800061a:	2301      	movs	r3, #1
 800061c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 800061e:	230a      	movs	r3, #10
 8000620:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000622:	2307      	movs	r3, #7
 8000624:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000626:	2302      	movs	r3, #2
 8000628:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800062a:	2302      	movs	r3, #2
 800062c:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800062e:	f107 0314 	add.w	r3, r7, #20
 8000632:	4618      	mov	r0, r3
 8000634:	f001 ff42 	bl	80024bc <HAL_RCC_OscConfig>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <SystemClock_Config+0x72>
		Error_Handler();
 800063e:	f000 f99d 	bl	800097c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000642:	230f      	movs	r3, #15
 8000644:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000646:	2303      	movs	r3, #3
 8000648:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064a:	2300      	movs	r3, #0
 800064c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000652:	2300      	movs	r3, #0
 8000654:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8000656:	463b      	mov	r3, r7
 8000658:	2104      	movs	r1, #4
 800065a:	4618      	mov	r0, r3
 800065c:	f002 fb14 	bl	8002c88 <HAL_RCC_ClockConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0x9a>
		Error_Handler();
 8000666:	f000 f989 	bl	800097c <Error_Handler>
	}
}
 800066a:	bf00      	nop
 800066c:	3758      	adds	r7, #88	; 0x58
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
	...

08000674 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b08a      	sub	sp, #40	; 0x28
 8000678:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 800067a:	f107 031c 	add.w	r3, r7, #28
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]
 8000694:	615a      	str	r2, [r3, #20]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000696:	4b2f      	ldr	r3, [pc, #188]	; (8000754 <MX_ADC1_Init+0xe0>)
 8000698:	4a2f      	ldr	r2, [pc, #188]	; (8000758 <MX_ADC1_Init+0xe4>)
 800069a:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800069c:	4b2d      	ldr	r3, [pc, #180]	; (8000754 <MX_ADC1_Init+0xe0>)
 800069e:	2200      	movs	r2, #0
 80006a0:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006a2:	4b2c      	ldr	r3, [pc, #176]	; (8000754 <MX_ADC1_Init+0xe0>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006a8:	4b2a      	ldr	r3, [pc, #168]	; (8000754 <MX_ADC1_Init+0xe0>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006ae:	4b29      	ldr	r3, [pc, #164]	; (8000754 <MX_ADC1_Init+0xe0>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006b4:	4b27      	ldr	r3, [pc, #156]	; (8000754 <MX_ADC1_Init+0xe0>)
 80006b6:	2204      	movs	r2, #4
 80006b8:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 80006ba:	4b26      	ldr	r3, [pc, #152]	; (8000754 <MX_ADC1_Init+0xe0>)
 80006bc:	2200      	movs	r2, #0
 80006be:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80006c0:	4b24      	ldr	r3, [pc, #144]	; (8000754 <MX_ADC1_Init+0xe0>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 80006c6:	4b23      	ldr	r3, [pc, #140]	; (8000754 <MX_ADC1_Init+0xe0>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006cc:	4b21      	ldr	r3, [pc, #132]	; (8000754 <MX_ADC1_Init+0xe0>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006d4:	4b1f      	ldr	r3, [pc, #124]	; (8000754 <MX_ADC1_Init+0xe0>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006da:	4b1e      	ldr	r3, [pc, #120]	; (8000754 <MX_ADC1_Init+0xe0>)
 80006dc:	2200      	movs	r2, #0
 80006de:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80006e0:	4b1c      	ldr	r3, [pc, #112]	; (8000754 <MX_ADC1_Init+0xe0>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006e8:	4b1a      	ldr	r3, [pc, #104]	; (8000754 <MX_ADC1_Init+0xe0>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 80006ee:	4b19      	ldr	r3, [pc, #100]	; (8000754 <MX_ADC1_Init+0xe0>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80006f6:	4817      	ldr	r0, [pc, #92]	; (8000754 <MX_ADC1_Init+0xe0>)
 80006f8:	f000 fd9e 	bl	8001238 <HAL_ADC_Init>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_ADC1_Init+0x92>
		Error_Handler();
 8000702:	f000 f93b 	bl	800097c <Error_Handler>
	}
	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8000706:	2300      	movs	r3, #0
 8000708:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 800070a:	f107 031c 	add.w	r3, r7, #28
 800070e:	4619      	mov	r1, r3
 8000710:	4810      	ldr	r0, [pc, #64]	; (8000754 <MX_ADC1_Init+0xe0>)
 8000712:	f001 fafd 	bl	8001d10 <HAL_ADCEx_MultiModeConfigChannel>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_ADC1_Init+0xac>
		Error_Handler();
 800071c:	f000 f92e 	bl	800097c <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 8000720:	4b0e      	ldr	r3, [pc, #56]	; (800075c <MX_ADC1_Init+0xe8>)
 8000722:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000724:	2306      	movs	r3, #6
 8000726:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000728:	2300      	movs	r3, #0
 800072a:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800072c:	237f      	movs	r3, #127	; 0x7f
 800072e:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000730:	2304      	movs	r3, #4
 8000732:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000738:	1d3b      	adds	r3, r7, #4
 800073a:	4619      	mov	r1, r3
 800073c:	4805      	ldr	r0, [pc, #20]	; (8000754 <MX_ADC1_Init+0xe0>)
 800073e:	f000 fed1 	bl	80014e4 <HAL_ADC_ConfigChannel>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_ADC1_Init+0xd8>
		Error_Handler();
 8000748:	f000 f918 	bl	800097c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 800074c:	bf00      	nop
 800074e:	3728      	adds	r7, #40	; 0x28
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	20000078 	.word	0x20000078
 8000758:	50040000 	.word	0x50040000
 800075c:	14f00020 	.word	0x14f00020

08000760 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000760:	b580      	push	{r7, lr}
 8000762:	b08e      	sub	sp, #56	; 0x38
 8000764:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000766:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000774:	f107 031c 	add.w	r3, r7, #28
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000780:	463b      	mov	r3, r7
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
 800078c:	611a      	str	r2, [r3, #16]
 800078e:	615a      	str	r2, [r3, #20]
 8000790:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000792:	4b2d      	ldr	r3, [pc, #180]	; (8000848 <MX_TIM3_Init+0xe8>)
 8000794:	4a2d      	ldr	r2, [pc, #180]	; (800084c <MX_TIM3_Init+0xec>)
 8000796:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 38;	  		//38
 8000798:	4b2b      	ldr	r3, [pc, #172]	; (8000848 <MX_TIM3_Init+0xe8>)
 800079a:	2226      	movs	r2, #38	; 0x26
 800079c:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800079e:	4b2a      	ldr	r3, [pc, #168]	; (8000848 <MX_TIM3_Init+0xe8>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 4096;
 80007a4:	4b28      	ldr	r3, [pc, #160]	; (8000848 <MX_TIM3_Init+0xe8>)
 80007a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007aa:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ac:	4b26      	ldr	r3, [pc, #152]	; (8000848 <MX_TIM3_Init+0xe8>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b2:	4b25      	ldr	r3, [pc, #148]	; (8000848 <MX_TIM3_Init+0xe8>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 80007b8:	4823      	ldr	r0, [pc, #140]	; (8000848 <MX_TIM3_Init+0xe8>)
 80007ba:	f003 f927 	bl	8003a0c <HAL_TIM_Base_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_TIM3_Init+0x68>
		Error_Handler();
 80007c4:	f000 f8da 	bl	800097c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007cc:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80007ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007d2:	4619      	mov	r1, r3
 80007d4:	481c      	ldr	r0, [pc, #112]	; (8000848 <MX_TIM3_Init+0xe8>)
 80007d6:	f003 fbeb 	bl	8003fb0 <HAL_TIM_ConfigClockSource>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_TIM3_Init+0x84>
		Error_Handler();
 80007e0:	f000 f8cc 	bl	800097c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 80007e4:	4818      	ldr	r0, [pc, #96]	; (8000848 <MX_TIM3_Init+0xe8>)
 80007e6:	f003 f968 	bl	8003aba <HAL_TIM_PWM_Init>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_TIM3_Init+0x94>
		Error_Handler();
 80007f0:	f000 f8c4 	bl	800097c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007f4:	2300      	movs	r3, #0
 80007f6:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007f8:	2300      	movs	r3, #0
 80007fa:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80007fc:	f107 031c 	add.w	r3, r7, #28
 8000800:	4619      	mov	r1, r3
 8000802:	4811      	ldr	r0, [pc, #68]	; (8000848 <MX_TIM3_Init+0xe8>)
 8000804:	f004 f8ce 	bl	80049a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_TIM3_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 800080e:	f000 f8b5 	bl	800097c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000812:	2360      	movs	r3, #96	; 0x60
 8000814:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8000816:	2300      	movs	r3, #0
 8000818:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800081a:	2300      	movs	r3, #0
 800081c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800081e:	2300      	movs	r3, #0
 8000820:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 8000822:	463b      	mov	r3, r7
 8000824:	2204      	movs	r2, #4
 8000826:	4619      	mov	r1, r3
 8000828:	4807      	ldr	r0, [pc, #28]	; (8000848 <MX_TIM3_Init+0xe8>)
 800082a:	f003 faad 	bl	8003d88 <HAL_TIM_PWM_ConfigChannel>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_TIM3_Init+0xd8>
			!= HAL_OK) {
		Error_Handler();
 8000834:	f000 f8a2 	bl	800097c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8000838:	4803      	ldr	r0, [pc, #12]	; (8000848 <MX_TIM3_Init+0xe8>)
 800083a:	f000 f98d 	bl	8000b58 <HAL_TIM_MspPostInit>

}
 800083e:	bf00      	nop
 8000840:	3738      	adds	r7, #56	; 0x38
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000028 	.word	0x20000028
 800084c:	40000400 	.word	0x40000400

08000850 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000854:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <MX_USART2_UART_Init+0x58>)
 8000856:	4a15      	ldr	r2, [pc, #84]	; (80008ac <MX_USART2_UART_Init+0x5c>)
 8000858:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800085a:	4b13      	ldr	r3, [pc, #76]	; (80008a8 <MX_USART2_UART_Init+0x58>)
 800085c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000860:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000862:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <MX_USART2_UART_Init+0x58>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000868:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <MX_USART2_UART_Init+0x58>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800086e:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <MX_USART2_UART_Init+0x58>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000874:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <MX_USART2_UART_Init+0x58>)
 8000876:	220c      	movs	r2, #12
 8000878:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087a:	4b0b      	ldr	r3, [pc, #44]	; (80008a8 <MX_USART2_UART_Init+0x58>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000880:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <MX_USART2_UART_Init+0x58>)
 8000882:	2200      	movs	r2, #0
 8000884:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000886:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <MX_USART2_UART_Init+0x58>)
 8000888:	2200      	movs	r2, #0
 800088a:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800088c:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <MX_USART2_UART_Init+0x58>)
 800088e:	2200      	movs	r2, #0
 8000890:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000892:	4805      	ldr	r0, [pc, #20]	; (80008a8 <MX_USART2_UART_Init+0x58>)
 8000894:	f004 f90e 	bl	8004ab4 <HAL_UART_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 800089e:	f000 f86d 	bl	800097c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	200000e0 	.word	0x200000e0
 80008ac:	40004400 	.word	0x40004400

080008b0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08a      	sub	sp, #40	; 0x28
 80008b4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80008b6:	f107 0314 	add.w	r3, r7, #20
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
 80008c4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80008c6:	4b2b      	ldr	r3, [pc, #172]	; (8000974 <MX_GPIO_Init+0xc4>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ca:	4a2a      	ldr	r2, [pc, #168]	; (8000974 <MX_GPIO_Init+0xc4>)
 80008cc:	f043 0304 	orr.w	r3, r3, #4
 80008d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008d2:	4b28      	ldr	r3, [pc, #160]	; (8000974 <MX_GPIO_Init+0xc4>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d6:	f003 0304 	and.w	r3, r3, #4
 80008da:	613b      	str	r3, [r7, #16]
 80008dc:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80008de:	4b25      	ldr	r3, [pc, #148]	; (8000974 <MX_GPIO_Init+0xc4>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e2:	4a24      	ldr	r2, [pc, #144]	; (8000974 <MX_GPIO_Init+0xc4>)
 80008e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ea:	4b22      	ldr	r3, [pc, #136]	; (8000974 <MX_GPIO_Init+0xc4>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008f6:	4b1f      	ldr	r3, [pc, #124]	; (8000974 <MX_GPIO_Init+0xc4>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fa:	4a1e      	ldr	r2, [pc, #120]	; (8000974 <MX_GPIO_Init+0xc4>)
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000902:	4b1c      	ldr	r3, [pc, #112]	; (8000974 <MX_GPIO_Init+0xc4>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	60bb      	str	r3, [r7, #8]
 800090c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800090e:	4b19      	ldr	r3, [pc, #100]	; (8000974 <MX_GPIO_Init+0xc4>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000912:	4a18      	ldr	r2, [pc, #96]	; (8000974 <MX_GPIO_Init+0xc4>)
 8000914:	f043 0302 	orr.w	r3, r3, #2
 8000918:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091a:	4b16      	ldr	r3, [pc, #88]	; (8000974 <MX_GPIO_Init+0xc4>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091e:	f003 0302 	and.w	r3, r3, #2
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000926:	2200      	movs	r2, #0
 8000928:	2120      	movs	r1, #32
 800092a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800092e:	f001 fd2f 	bl	8002390 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000932:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000936:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000938:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800093c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000942:	f107 0314 	add.w	r3, r7, #20
 8000946:	4619      	mov	r1, r3
 8000948:	480b      	ldr	r0, [pc, #44]	; (8000978 <MX_GPIO_Init+0xc8>)
 800094a:	f001 fb77 	bl	800203c <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 800094e:	2320      	movs	r3, #32
 8000950:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000952:	2301      	movs	r3, #1
 8000954:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	2300      	movs	r3, #0
 800095c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800095e:	f107 0314 	add.w	r3, r7, #20
 8000962:	4619      	mov	r1, r3
 8000964:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000968:	f001 fb68 	bl	800203c <HAL_GPIO_Init>

}
 800096c:	bf00      	nop
 800096e:	3728      	adds	r7, #40	; 0x28
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40021000 	.word	0x40021000
 8000978:	48000800 	.word	0x48000800

0800097c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000980:	b672      	cpsid	i
}
 8000982:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000984:	e7fe      	b.n	8000984 <Error_Handler+0x8>

08000986 <setGreenLed>:
 */

#include "remi.h"

// On board green LED On
void setGreenLed() {
 8000986:	b580      	push	{r7, lr}
 8000988:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 800098a:	2201      	movs	r2, #1
 800098c:	2120      	movs	r1, #32
 800098e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000992:	f001 fcfd 	bl	8002390 <HAL_GPIO_WritePin>
}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}

0800099a <blinkGreenLed>:

// On board green LED blink
void blinkGreenLed(int nb, int delay) {
 800099a:	b580      	push	{r7, lr}
 800099c:	b084      	sub	sp, #16
 800099e:	af00      	add	r7, sp, #0
 80009a0:	6078      	str	r0, [r7, #4]
 80009a2:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < nb; i++) {
 80009a4:	2300      	movs	r3, #0
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	e00b      	b.n	80009c2 <blinkGreenLed+0x28>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80009aa:	2120      	movs	r1, #32
 80009ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009b0:	f001 fd06 	bl	80023c0 <HAL_GPIO_TogglePin>
		HAL_Delay(delay);
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	4618      	mov	r0, r3
 80009b8:	f000 fa8e 	bl	8000ed8 <HAL_Delay>
	for (int i = 0; i < nb; i++) {
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	3301      	adds	r3, #1
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	68fa      	ldr	r2, [r7, #12]
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	429a      	cmp	r2, r3
 80009c8:	dbef      	blt.n	80009aa <blinkGreenLed+0x10>
	}
}
 80009ca:	bf00      	nop
 80009cc:	bf00      	nop
 80009ce:	3710      	adds	r7, #16
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <sendWelcomeMsgRS232>:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);

}

// Welcome Message On RS232
void sendWelcomeMsgRS232(UART_HandleTypeDef *huart) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
	//printf("Hello from remi\n\r");
	//pointer targets in passing argument 2 of 'HAL_UART_Transmit' differ in signedness [-Wpointer-sign]
	//if (HAL_UART_Transmit(huart, "Nucleo L476RG connected\n\r", 25, 100)
	//modification au niveau du formatage du message
	if (HAL_UART_Transmit(huart, (uint8_t*)"Nucleo L476RG connected\n\r", 25, 100)
 80009dc:	2364      	movs	r3, #100	; 0x64
 80009de:	2219      	movs	r2, #25
 80009e0:	4906      	ldr	r1, [pc, #24]	; (80009fc <sendWelcomeMsgRS232+0x28>)
 80009e2:	6878      	ldr	r0, [r7, #4]
 80009e4:	f004 f8b4 	bl	8004b50 <HAL_UART_Transmit>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <sendWelcomeMsgRS232+0x1e>
			!= HAL_OK)
		Error_Handler();
 80009ee:	f7ff ffc5 	bl	800097c <Error_Handler>
}
 80009f2:	bf00      	nop
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	08005700 	.word	0x08005700

08000a00 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a06:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <HAL_MspInit+0x44>)
 8000a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a0a:	4a0e      	ldr	r2, [pc, #56]	; (8000a44 <HAL_MspInit+0x44>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	6613      	str	r3, [r2, #96]	; 0x60
 8000a12:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <HAL_MspInit+0x44>)
 8000a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1e:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <HAL_MspInit+0x44>)
 8000a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a22:	4a08      	ldr	r2, [pc, #32]	; (8000a44 <HAL_MspInit+0x44>)
 8000a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a28:	6593      	str	r3, [r2, #88]	; 0x58
 8000a2a:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <HAL_MspInit+0x44>)
 8000a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a32:	603b      	str	r3, [r7, #0]
 8000a34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a36:	bf00      	nop
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	40021000 	.word	0x40021000

08000a48 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b0ac      	sub	sp, #176	; 0xb0
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a50:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	2288      	movs	r2, #136	; 0x88
 8000a66:	2100      	movs	r1, #0
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f004 fe35 	bl	80056d8 <memset>
  if(hadc->Instance==ADC1)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4a27      	ldr	r2, [pc, #156]	; (8000b10 <HAL_ADC_MspInit+0xc8>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d147      	bne.n	8000b08 <HAL_ADC_MspInit+0xc0>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a78:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a7c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000a7e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000a86:	2302      	movs	r3, #2
 8000a88:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000a8e:	2308      	movs	r3, #8
 8000a90:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000a92:	2307      	movs	r3, #7
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000a96:	2302      	movs	r3, #2
 8000a98:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000a9e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000aa2:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f002 faf3 	bl	8003094 <HAL_RCCEx_PeriphCLKConfig>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000ab4:	f7ff ff62 	bl	800097c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000ab8:	4b16      	ldr	r3, [pc, #88]	; (8000b14 <HAL_ADC_MspInit+0xcc>)
 8000aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000abc:	4a15      	ldr	r2, [pc, #84]	; (8000b14 <HAL_ADC_MspInit+0xcc>)
 8000abe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ac2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ac4:	4b13      	ldr	r3, [pc, #76]	; (8000b14 <HAL_ADC_MspInit+0xcc>)
 8000ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000acc:	613b      	str	r3, [r7, #16]
 8000ace:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad0:	4b10      	ldr	r3, [pc, #64]	; (8000b14 <HAL_ADC_MspInit+0xcc>)
 8000ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad4:	4a0f      	ldr	r2, [pc, #60]	; (8000b14 <HAL_ADC_MspInit+0xcc>)
 8000ad6:	f043 0301 	orr.w	r3, r3, #1
 8000ada:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000adc:	4b0d      	ldr	r3, [pc, #52]	; (8000b14 <HAL_ADC_MspInit+0xcc>)
 8000ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae0:	f003 0301 	and.w	r3, r3, #1
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000aee:	230b      	movs	r3, #11
 8000af0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000afe:	4619      	mov	r1, r3
 8000b00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b04:	f001 fa9a 	bl	800203c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b08:	bf00      	nop
 8000b0a:	37b0      	adds	r7, #176	; 0xb0
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	50040000 	.word	0x50040000
 8000b14:	40021000 	.word	0x40021000

08000b18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b085      	sub	sp, #20
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a0a      	ldr	r2, [pc, #40]	; (8000b50 <HAL_TIM_Base_MspInit+0x38>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d10b      	bne.n	8000b42 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b2a:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <HAL_TIM_Base_MspInit+0x3c>)
 8000b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b2e:	4a09      	ldr	r2, [pc, #36]	; (8000b54 <HAL_TIM_Base_MspInit+0x3c>)
 8000b30:	f043 0302 	orr.w	r3, r3, #2
 8000b34:	6593      	str	r3, [r2, #88]	; 0x58
 8000b36:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <HAL_TIM_Base_MspInit+0x3c>)
 8000b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b3a:	f003 0302 	and.w	r3, r3, #2
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000b42:	bf00      	nop
 8000b44:	3714      	adds	r7, #20
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	40000400 	.word	0x40000400
 8000b54:	40021000 	.word	0x40021000

08000b58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b088      	sub	sp, #32
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	f107 030c 	add.w	r3, r7, #12
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a11      	ldr	r2, [pc, #68]	; (8000bbc <HAL_TIM_MspPostInit+0x64>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d11c      	bne.n	8000bb4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7a:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <HAL_TIM_MspPostInit+0x68>)
 8000b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7e:	4a10      	ldr	r2, [pc, #64]	; (8000bc0 <HAL_TIM_MspPostInit+0x68>)
 8000b80:	f043 0301 	orr.w	r3, r3, #1
 8000b84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b86:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <HAL_TIM_MspPostInit+0x68>)
 8000b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	60bb      	str	r3, [r7, #8]
 8000b90:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b92:	2380      	movs	r3, #128	; 0x80
 8000b94:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b96:	2302      	movs	r3, #2
 8000b98:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba6:	f107 030c 	add.w	r3, r7, #12
 8000baa:	4619      	mov	r1, r3
 8000bac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb0:	f001 fa44 	bl	800203c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000bb4:	bf00      	nop
 8000bb6:	3720      	adds	r7, #32
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40000400 	.word	0x40000400
 8000bc0:	40021000 	.word	0x40021000

08000bc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b0ac      	sub	sp, #176	; 0xb0
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bcc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	2288      	movs	r2, #136	; 0x88
 8000be2:	2100      	movs	r1, #0
 8000be4:	4618      	mov	r0, r3
 8000be6:	f004 fd77 	bl	80056d8 <memset>
  if(huart->Instance==USART2)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a21      	ldr	r2, [pc, #132]	; (8000c74 <HAL_UART_MspInit+0xb0>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d13b      	bne.n	8000c6c <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	4618      	mov	r0, r3
 8000c02:	f002 fa47 	bl	8003094 <HAL_RCCEx_PeriphCLKConfig>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c0c:	f7ff feb6 	bl	800097c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c10:	4b19      	ldr	r3, [pc, #100]	; (8000c78 <HAL_UART_MspInit+0xb4>)
 8000c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c14:	4a18      	ldr	r2, [pc, #96]	; (8000c78 <HAL_UART_MspInit+0xb4>)
 8000c16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c1a:	6593      	str	r3, [r2, #88]	; 0x58
 8000c1c:	4b16      	ldr	r3, [pc, #88]	; (8000c78 <HAL_UART_MspInit+0xb4>)
 8000c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c24:	613b      	str	r3, [r7, #16]
 8000c26:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c28:	4b13      	ldr	r3, [pc, #76]	; (8000c78 <HAL_UART_MspInit+0xb4>)
 8000c2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2c:	4a12      	ldr	r2, [pc, #72]	; (8000c78 <HAL_UART_MspInit+0xb4>)
 8000c2e:	f043 0301 	orr.w	r3, r3, #1
 8000c32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c34:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <HAL_UART_MspInit+0xb4>)
 8000c36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c38:	f003 0301 	and.w	r3, r3, #1
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c40:	230c      	movs	r3, #12
 8000c42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c46:	2302      	movs	r3, #2
 8000c48:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c52:	2303      	movs	r3, #3
 8000c54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c58:	2307      	movs	r3, #7
 8000c5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c62:	4619      	mov	r1, r3
 8000c64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c68:	f001 f9e8 	bl	800203c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c6c:	bf00      	nop
 8000c6e:	37b0      	adds	r7, #176	; 0xb0
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40004400 	.word	0x40004400
 8000c78:	40021000 	.word	0x40021000

08000c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <NMI_Handler+0x4>

08000c82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c86:	e7fe      	b.n	8000c86 <HardFault_Handler+0x4>

08000c88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <MemManage_Handler+0x4>

08000c8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c92:	e7fe      	b.n	8000c92 <BusFault_Handler+0x4>

08000c94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <UsageFault_Handler+0x4>

08000c9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cc8:	f000 f8e6 	bl	8000e98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ccc:	bf00      	nop
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <SystemInit+0x20>)
 8000cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cda:	4a05      	ldr	r2, [pc, #20]	; (8000cf0 <SystemInit+0x20>)
 8000cdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ce0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <changing>:
	if (HAL_UART_Transmit(huart, (uint8_t*) mess, 25, 100)
			!= HAL_OK)
		Error_Handler();
}

void changing(enum states etat,UART_HandleTypeDef *huart){
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	6039      	str	r1, [r7, #0]
 8000cfe:	71fb      	strb	r3, [r7, #7]
	switch (etat) {
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	2b02      	cmp	r3, #2
 8000d04:	d026      	beq.n	8000d54 <changing+0x60>
 8000d06:	2b02      	cmp	r3, #2
 8000d08:	dc34      	bgt.n	8000d74 <changing+0x80>
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d002      	beq.n	8000d14 <changing+0x20>
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d010      	beq.n	8000d34 <changing+0x40>
						(uint8_t*) "Motor Initialization \n\r", 27, 100) != HAL_OK)
					Error_Handler();
				HAL_Delay(5000);
				break;
			default:
				break;
 8000d12:	e02f      	b.n	8000d74 <changing+0x80>
				if (HAL_UART_Transmit(huart, (uint8_t*) "Idle mode \n\r", 15, 100)
 8000d14:	2364      	movs	r3, #100	; 0x64
 8000d16:	220f      	movs	r2, #15
 8000d18:	4919      	ldr	r1, [pc, #100]	; (8000d80 <changing+0x8c>)
 8000d1a:	6838      	ldr	r0, [r7, #0]
 8000d1c:	f003 ff18 	bl	8004b50 <HAL_UART_Transmit>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <changing+0x36>
					Error_Handler();
 8000d26:	f7ff fe29 	bl	800097c <Error_Handler>
				HAL_Delay(1000);
 8000d2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d2e:	f000 f8d3 	bl	8000ed8 <HAL_Delay>
				break;
 8000d32:	e020      	b.n	8000d76 <changing+0x82>
				if (HAL_UART_Transmit(huart, (uint8_t*) "UC Initialization \n\r",
 8000d34:	2364      	movs	r3, #100	; 0x64
 8000d36:	2219      	movs	r2, #25
 8000d38:	4912      	ldr	r1, [pc, #72]	; (8000d84 <changing+0x90>)
 8000d3a:	6838      	ldr	r0, [r7, #0]
 8000d3c:	f003 ff08 	bl	8004b50 <HAL_UART_Transmit>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <changing+0x56>
					Error_Handler();
 8000d46:	f7ff fe19 	bl	800097c <Error_Handler>
				HAL_Delay(5000);
 8000d4a:	f241 3088 	movw	r0, #5000	; 0x1388
 8000d4e:	f000 f8c3 	bl	8000ed8 <HAL_Delay>
				break;
 8000d52:	e010      	b.n	8000d76 <changing+0x82>
				if (HAL_UART_Transmit(huart,
 8000d54:	2364      	movs	r3, #100	; 0x64
 8000d56:	221b      	movs	r2, #27
 8000d58:	490b      	ldr	r1, [pc, #44]	; (8000d88 <changing+0x94>)
 8000d5a:	6838      	ldr	r0, [r7, #0]
 8000d5c:	f003 fef8 	bl	8004b50 <HAL_UART_Transmit>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <changing+0x76>
					Error_Handler();
 8000d66:	f7ff fe09 	bl	800097c <Error_Handler>
				HAL_Delay(5000);
 8000d6a:	f241 3088 	movw	r0, #5000	; 0x1388
 8000d6e:	f000 f8b3 	bl	8000ed8 <HAL_Delay>
				break;
 8000d72:	e000      	b.n	8000d76 <changing+0x82>
				break;
 8000d74:	bf00      	nop


			}

}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	0800571c 	.word	0x0800571c
 8000d84:	0800572c 	.word	0x0800572c
 8000d88:	08005744 	.word	0x08005744

08000d8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dc4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d90:	f7ff ff9e 	bl	8000cd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d94:	480c      	ldr	r0, [pc, #48]	; (8000dc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d96:	490d      	ldr	r1, [pc, #52]	; (8000dcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d98:	4a0d      	ldr	r2, [pc, #52]	; (8000dd0 <LoopForever+0xe>)
  movs r3, #0
 8000d9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d9c:	e002      	b.n	8000da4 <LoopCopyDataInit>

08000d9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000da2:	3304      	adds	r3, #4

08000da4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000da6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da8:	d3f9      	bcc.n	8000d9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000daa:	4a0a      	ldr	r2, [pc, #40]	; (8000dd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dac:	4c0a      	ldr	r4, [pc, #40]	; (8000dd8 <LoopForever+0x16>)
  movs r3, #0
 8000dae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db0:	e001      	b.n	8000db6 <LoopFillZerobss>

08000db2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000db2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db4:	3204      	adds	r2, #4

08000db6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000db6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db8:	d3fb      	bcc.n	8000db2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dba:	f004 fc69 	bl	8005690 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dbe:	f7ff fb7f 	bl	80004c0 <main>

08000dc2 <LoopForever>:

LoopForever:
    b LoopForever
 8000dc2:	e7fe      	b.n	8000dc2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000dc4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000dc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dcc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000dd0:	080057b4 	.word	0x080057b4
  ldr r2, =_sbss
 8000dd4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000dd8:	20000168 	.word	0x20000168

08000ddc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ddc:	e7fe      	b.n	8000ddc <ADC1_2_IRQHandler>
	...

08000de0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000de6:	2300      	movs	r3, #0
 8000de8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dea:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <HAL_Init+0x3c>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a0b      	ldr	r2, [pc, #44]	; (8000e1c <HAL_Init+0x3c>)
 8000df0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000df4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df6:	2003      	movs	r0, #3
 8000df8:	f001 f8ec 	bl	8001fd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	f000 f80f 	bl	8000e20 <HAL_InitTick>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d002      	beq.n	8000e0e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	71fb      	strb	r3, [r7, #7]
 8000e0c:	e001      	b.n	8000e12 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e0e:	f7ff fdf7 	bl	8000a00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e12:	79fb      	ldrb	r3, [r7, #7]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40022000 	.word	0x40022000

08000e20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e2c:	4b17      	ldr	r3, [pc, #92]	; (8000e8c <HAL_InitTick+0x6c>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d023      	beq.n	8000e7c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e34:	4b16      	ldr	r3, [pc, #88]	; (8000e90 <HAL_InitTick+0x70>)
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	4b14      	ldr	r3, [pc, #80]	; (8000e8c <HAL_InitTick+0x6c>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f001 f8e9 	bl	8002022 <HAL_SYSTICK_Config>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d10f      	bne.n	8000e76 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2b0f      	cmp	r3, #15
 8000e5a:	d809      	bhi.n	8000e70 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	6879      	ldr	r1, [r7, #4]
 8000e60:	f04f 30ff 	mov.w	r0, #4294967295
 8000e64:	f001 f8c1 	bl	8001fea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e68:	4a0a      	ldr	r2, [pc, #40]	; (8000e94 <HAL_InitTick+0x74>)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6013      	str	r3, [r2, #0]
 8000e6e:	e007      	b.n	8000e80 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e70:	2301      	movs	r3, #1
 8000e72:	73fb      	strb	r3, [r7, #15]
 8000e74:	e004      	b.n	8000e80 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	73fb      	strb	r3, [r7, #15]
 8000e7a:	e001      	b.n	8000e80 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3710      	adds	r7, #16
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20000008 	.word	0x20000008
 8000e90:	20000000 	.word	0x20000000
 8000e94:	20000004 	.word	0x20000004

08000e98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <HAL_IncTick+0x20>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <HAL_IncTick+0x24>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	4a04      	ldr	r2, [pc, #16]	; (8000ebc <HAL_IncTick+0x24>)
 8000eaa:	6013      	str	r3, [r2, #0]
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	20000008 	.word	0x20000008
 8000ebc:	20000164 	.word	0x20000164

08000ec0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec4:	4b03      	ldr	r3, [pc, #12]	; (8000ed4 <HAL_GetTick+0x14>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	20000164 	.word	0x20000164

08000ed8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ee0:	f7ff ffee 	bl	8000ec0 <HAL_GetTick>
 8000ee4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ef0:	d005      	beq.n	8000efe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000ef2:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <HAL_Delay+0x44>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	4413      	add	r3, r2
 8000efc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000efe:	bf00      	nop
 8000f00:	f7ff ffde 	bl	8000ec0 <HAL_GetTick>
 8000f04:	4602      	mov	r2, r0
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	68fa      	ldr	r2, [r7, #12]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d8f7      	bhi.n	8000f00 <HAL_Delay+0x28>
  {
  }
}
 8000f10:	bf00      	nop
 8000f12:	bf00      	nop
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000008 	.word	0x20000008

08000f20 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	431a      	orrs	r2, r3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	609a      	str	r2, [r3, #8]
}
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000f46:	b480      	push	{r7}
 8000f48:	b083      	sub	sp, #12
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
 8000f4e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	431a      	orrs	r2, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b087      	sub	sp, #28
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
 8000f94:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	3360      	adds	r3, #96	; 0x60
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	4413      	add	r3, r2
 8000fa2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <LL_ADC_SetOffset+0x44>)
 8000faa:	4013      	ands	r3, r2
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000fb2:	683a      	ldr	r2, [r7, #0]
 8000fb4:	430a      	orrs	r2, r1
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000fc0:	bf00      	nop
 8000fc2:	371c      	adds	r7, #28
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	03fff000 	.word	0x03fff000

08000fd0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	3360      	adds	r3, #96	; 0x60
 8000fde:	461a      	mov	r2, r3
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	4413      	add	r3, r2
 8000fe6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b087      	sub	sp, #28
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	3360      	adds	r3, #96	; 0x60
 800100c:	461a      	mov	r2, r3
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	4413      	add	r3, r2
 8001014:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	431a      	orrs	r2, r3
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001026:	bf00      	nop
 8001028:	371c      	adds	r7, #28
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001032:	b480      	push	{r7}
 8001034:	b087      	sub	sp, #28
 8001036:	af00      	add	r7, sp, #0
 8001038:	60f8      	str	r0, [r7, #12]
 800103a:	60b9      	str	r1, [r7, #8]
 800103c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	3330      	adds	r3, #48	; 0x30
 8001042:	461a      	mov	r2, r3
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	0a1b      	lsrs	r3, r3, #8
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	f003 030c 	and.w	r3, r3, #12
 800104e:	4413      	add	r3, r2
 8001050:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	f003 031f 	and.w	r3, r3, #31
 800105c:	211f      	movs	r1, #31
 800105e:	fa01 f303 	lsl.w	r3, r1, r3
 8001062:	43db      	mvns	r3, r3
 8001064:	401a      	ands	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	0e9b      	lsrs	r3, r3, #26
 800106a:	f003 011f 	and.w	r1, r3, #31
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	f003 031f 	and.w	r3, r3, #31
 8001074:	fa01 f303 	lsl.w	r3, r1, r3
 8001078:	431a      	orrs	r2, r3
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800107e:	bf00      	nop
 8001080:	371c      	adds	r7, #28
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800108a:	b480      	push	{r7}
 800108c:	b087      	sub	sp, #28
 800108e:	af00      	add	r7, sp, #0
 8001090:	60f8      	str	r0, [r7, #12]
 8001092:	60b9      	str	r1, [r7, #8]
 8001094:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	3314      	adds	r3, #20
 800109a:	461a      	mov	r2, r3
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	0e5b      	lsrs	r3, r3, #25
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	f003 0304 	and.w	r3, r3, #4
 80010a6:	4413      	add	r3, r2
 80010a8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	0d1b      	lsrs	r3, r3, #20
 80010b2:	f003 031f 	and.w	r3, r3, #31
 80010b6:	2107      	movs	r1, #7
 80010b8:	fa01 f303 	lsl.w	r3, r1, r3
 80010bc:	43db      	mvns	r3, r3
 80010be:	401a      	ands	r2, r3
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	0d1b      	lsrs	r3, r3, #20
 80010c4:	f003 031f 	and.w	r3, r3, #31
 80010c8:	6879      	ldr	r1, [r7, #4]
 80010ca:	fa01 f303 	lsl.w	r3, r1, r3
 80010ce:	431a      	orrs	r2, r3
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80010d4:	bf00      	nop
 80010d6:	371c      	adds	r7, #28
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010f8:	43db      	mvns	r3, r3
 80010fa:	401a      	ands	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f003 0318 	and.w	r3, r3, #24
 8001102:	4908      	ldr	r1, [pc, #32]	; (8001124 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001104:	40d9      	lsrs	r1, r3
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	400b      	ands	r3, r1
 800110a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800110e:	431a      	orrs	r2, r3
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001116:	bf00      	nop
 8001118:	3714      	adds	r7, #20
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	0007ffff 	.word	0x0007ffff

08001128 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001138:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	6093      	str	r3, [r2, #8]
}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800115c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001160:	d101      	bne.n	8001166 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001162:	2301      	movs	r3, #1
 8001164:	e000      	b.n	8001168 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001166:	2300      	movs	r3, #0
}
 8001168:	4618      	mov	r0, r3
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001184:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001188:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80011b0:	d101      	bne.n	80011b6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80011b2:	2301      	movs	r3, #1
 80011b4:	e000      	b.n	80011b8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80011b6:	2300      	movs	r3, #0
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	f003 0301 	and.w	r3, r3, #1
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d101      	bne.n	80011dc <LL_ADC_IsEnabled+0x18>
 80011d8:	2301      	movs	r3, #1
 80011da:	e000      	b.n	80011de <LL_ADC_IsEnabled+0x1a>
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr

080011ea <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80011ea:	b480      	push	{r7}
 80011ec:	b083      	sub	sp, #12
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	f003 0304 	and.w	r3, r3, #4
 80011fa:	2b04      	cmp	r3, #4
 80011fc:	d101      	bne.n	8001202 <LL_ADC_REG_IsConversionOngoing+0x18>
 80011fe:	2301      	movs	r3, #1
 8001200:	e000      	b.n	8001204 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001202:	2300      	movs	r3, #0
}
 8001204:	4618      	mov	r0, r3
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	f003 0308 	and.w	r3, r3, #8
 8001220:	2b08      	cmp	r3, #8
 8001222:	d101      	bne.n	8001228 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001224:	2301      	movs	r3, #1
 8001226:	e000      	b.n	800122a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
	...

08001238 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001238:	b590      	push	{r4, r7, lr}
 800123a:	b089      	sub	sp, #36	; 0x24
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001240:	2300      	movs	r3, #0
 8001242:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001244:	2300      	movs	r3, #0
 8001246:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d101      	bne.n	8001252 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e136      	b.n	80014c0 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	691b      	ldr	r3, [r3, #16]
 8001256:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800125c:	2b00      	cmp	r3, #0
 800125e:	d109      	bne.n	8001274 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff fbf1 	bl	8000a48 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2200      	movs	r2, #0
 800126a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2200      	movs	r2, #0
 8001270:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff ff67 	bl	800114c <LL_ADC_IsDeepPowerDownEnabled>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d004      	beq.n	800128e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff ff4d 	bl	8001128 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff ff82 	bl	800119c <LL_ADC_IsInternalRegulatorEnabled>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d115      	bne.n	80012ca <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff ff66 	bl	8001174 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80012a8:	4b87      	ldr	r3, [pc, #540]	; (80014c8 <HAL_ADC_Init+0x290>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	099b      	lsrs	r3, r3, #6
 80012ae:	4a87      	ldr	r2, [pc, #540]	; (80014cc <HAL_ADC_Init+0x294>)
 80012b0:	fba2 2303 	umull	r2, r3, r2, r3
 80012b4:	099b      	lsrs	r3, r3, #6
 80012b6:	3301      	adds	r3, #1
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80012bc:	e002      	b.n	80012c4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	3b01      	subs	r3, #1
 80012c2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d1f9      	bne.n	80012be <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff ff64 	bl	800119c <LL_ADC_IsInternalRegulatorEnabled>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d10d      	bne.n	80012f6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012de:	f043 0210 	orr.w	r2, r3, #16
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ea:	f043 0201 	orr.w	r2, r3, #1
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff ff75 	bl	80011ea <LL_ADC_REG_IsConversionOngoing>
 8001300:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001306:	f003 0310 	and.w	r3, r3, #16
 800130a:	2b00      	cmp	r3, #0
 800130c:	f040 80cf 	bne.w	80014ae <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	2b00      	cmp	r3, #0
 8001314:	f040 80cb 	bne.w	80014ae <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800131c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001320:	f043 0202 	orr.w	r2, r3, #2
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff ff49 	bl	80011c4 <LL_ADC_IsEnabled>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d115      	bne.n	8001364 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001338:	4865      	ldr	r0, [pc, #404]	; (80014d0 <HAL_ADC_Init+0x298>)
 800133a:	f7ff ff43 	bl	80011c4 <LL_ADC_IsEnabled>
 800133e:	4604      	mov	r4, r0
 8001340:	4864      	ldr	r0, [pc, #400]	; (80014d4 <HAL_ADC_Init+0x29c>)
 8001342:	f7ff ff3f 	bl	80011c4 <LL_ADC_IsEnabled>
 8001346:	4603      	mov	r3, r0
 8001348:	431c      	orrs	r4, r3
 800134a:	4863      	ldr	r0, [pc, #396]	; (80014d8 <HAL_ADC_Init+0x2a0>)
 800134c:	f7ff ff3a 	bl	80011c4 <LL_ADC_IsEnabled>
 8001350:	4603      	mov	r3, r0
 8001352:	4323      	orrs	r3, r4
 8001354:	2b00      	cmp	r3, #0
 8001356:	d105      	bne.n	8001364 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	4619      	mov	r1, r3
 800135e:	485f      	ldr	r0, [pc, #380]	; (80014dc <HAL_ADC_Init+0x2a4>)
 8001360:	f7ff fdde 	bl	8000f20 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	7e5b      	ldrb	r3, [r3, #25]
 8001368:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800136e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001374:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800137a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001382:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001384:	4313      	orrs	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d106      	bne.n	80013a0 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001396:	3b01      	subs	r3, #1
 8001398:	045b      	lsls	r3, r3, #17
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4313      	orrs	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d009      	beq.n	80013bc <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ac:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	68da      	ldr	r2, [r3, #12]
 80013c2:	4b47      	ldr	r3, [pc, #284]	; (80014e0 <HAL_ADC_Init+0x2a8>)
 80013c4:	4013      	ands	r3, r2
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	6812      	ldr	r2, [r2, #0]
 80013ca:	69b9      	ldr	r1, [r7, #24]
 80013cc:	430b      	orrs	r3, r1
 80013ce:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff ff08 	bl	80011ea <LL_ADC_REG_IsConversionOngoing>
 80013da:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff ff15 	bl	8001210 <LL_ADC_INJ_IsConversionOngoing>
 80013e6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d13d      	bne.n	800146a <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d13a      	bne.n	800146a <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80013f8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001400:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001402:	4313      	orrs	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001410:	f023 0302 	bic.w	r3, r3, #2
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	6812      	ldr	r2, [r2, #0]
 8001418:	69b9      	ldr	r1, [r7, #24]
 800141a:	430b      	orrs	r3, r1
 800141c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001424:	2b01      	cmp	r3, #1
 8001426:	d118      	bne.n	800145a <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	691b      	ldr	r3, [r3, #16]
 800142e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001432:	f023 0304 	bic.w	r3, r3, #4
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800143e:	4311      	orrs	r1, r2
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001444:	4311      	orrs	r1, r2
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800144a:	430a      	orrs	r2, r1
 800144c:	431a      	orrs	r2, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f042 0201 	orr.w	r2, r2, #1
 8001456:	611a      	str	r2, [r3, #16]
 8001458:	e007      	b.n	800146a <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	691a      	ldr	r2, [r3, #16]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f022 0201 	bic.w	r2, r2, #1
 8001468:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	691b      	ldr	r3, [r3, #16]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d10c      	bne.n	800148c <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001478:	f023 010f 	bic.w	r1, r3, #15
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	69db      	ldr	r3, [r3, #28]
 8001480:	1e5a      	subs	r2, r3, #1
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	430a      	orrs	r2, r1
 8001488:	631a      	str	r2, [r3, #48]	; 0x30
 800148a:	e007      	b.n	800149c <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f022 020f 	bic.w	r2, r2, #15
 800149a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014a0:	f023 0303 	bic.w	r3, r3, #3
 80014a4:	f043 0201 	orr.w	r2, r3, #1
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	655a      	str	r2, [r3, #84]	; 0x54
 80014ac:	e007      	b.n	80014be <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014b2:	f043 0210 	orr.w	r2, r3, #16
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80014be:	7ffb      	ldrb	r3, [r7, #31]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3724      	adds	r7, #36	; 0x24
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd90      	pop	{r4, r7, pc}
 80014c8:	20000000 	.word	0x20000000
 80014cc:	053e2d63 	.word	0x053e2d63
 80014d0:	50040000 	.word	0x50040000
 80014d4:	50040100 	.word	0x50040100
 80014d8:	50040200 	.word	0x50040200
 80014dc:	50040300 	.word	0x50040300
 80014e0:	fff0c007 	.word	0xfff0c007

080014e4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b0b6      	sub	sp, #216	; 0xd8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014ee:	2300      	movs	r3, #0
 80014f0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d101      	bne.n	8001506 <HAL_ADC_ConfigChannel+0x22>
 8001502:	2302      	movs	r3, #2
 8001504:	e3c7      	b.n	8001c96 <HAL_ADC_ConfigChannel+0x7b2>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2201      	movs	r2, #1
 800150a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff fe69 	bl	80011ea <LL_ADC_REG_IsConversionOngoing>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	f040 83a8 	bne.w	8001c70 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	2b05      	cmp	r3, #5
 8001526:	d824      	bhi.n	8001572 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	3b02      	subs	r3, #2
 800152e:	2b03      	cmp	r3, #3
 8001530:	d81b      	bhi.n	800156a <HAL_ADC_ConfigChannel+0x86>
 8001532:	a201      	add	r2, pc, #4	; (adr r2, 8001538 <HAL_ADC_ConfigChannel+0x54>)
 8001534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001538:	08001549 	.word	0x08001549
 800153c:	08001551 	.word	0x08001551
 8001540:	08001559 	.word	0x08001559
 8001544:	08001561 	.word	0x08001561
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	220c      	movs	r2, #12
 800154c:	605a      	str	r2, [r3, #4]
          break;
 800154e:	e011      	b.n	8001574 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	2212      	movs	r2, #18
 8001554:	605a      	str	r2, [r3, #4]
          break;
 8001556:	e00d      	b.n	8001574 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	2218      	movs	r2, #24
 800155c:	605a      	str	r2, [r3, #4]
          break;
 800155e:	e009      	b.n	8001574 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001566:	605a      	str	r2, [r3, #4]
          break;
 8001568:	e004      	b.n	8001574 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	2206      	movs	r2, #6
 800156e:	605a      	str	r2, [r3, #4]
          break;
 8001570:	e000      	b.n	8001574 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001572:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6818      	ldr	r0, [r3, #0]
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	6859      	ldr	r1, [r3, #4]
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	461a      	mov	r2, r3
 8001582:	f7ff fd56 	bl	8001032 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff fe2d 	bl	80011ea <LL_ADC_REG_IsConversionOngoing>
 8001590:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff fe39 	bl	8001210 <LL_ADC_INJ_IsConversionOngoing>
 800159e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80015a2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	f040 81a6 	bne.w	80018f8 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80015ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	f040 81a1 	bne.w	80018f8 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6818      	ldr	r0, [r3, #0]
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	6819      	ldr	r1, [r3, #0]
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	461a      	mov	r2, r3
 80015c4:	f7ff fd61 	bl	800108a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	695a      	ldr	r2, [r3, #20]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	08db      	lsrs	r3, r3, #3
 80015d4:	f003 0303 	and.w	r3, r3, #3
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	691b      	ldr	r3, [r3, #16]
 80015e6:	2b04      	cmp	r3, #4
 80015e8:	d00a      	beq.n	8001600 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6818      	ldr	r0, [r3, #0]
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	6919      	ldr	r1, [r3, #16]
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80015fa:	f7ff fcc5 	bl	8000f88 <LL_ADC_SetOffset>
 80015fe:	e17b      	b.n	80018f8 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2100      	movs	r1, #0
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff fce2 	bl	8000fd0 <LL_ADC_GetOffsetChannel>
 800160c:	4603      	mov	r3, r0
 800160e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001612:	2b00      	cmp	r3, #0
 8001614:	d10a      	bne.n	800162c <HAL_ADC_ConfigChannel+0x148>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2100      	movs	r1, #0
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff fcd7 	bl	8000fd0 <LL_ADC_GetOffsetChannel>
 8001622:	4603      	mov	r3, r0
 8001624:	0e9b      	lsrs	r3, r3, #26
 8001626:	f003 021f 	and.w	r2, r3, #31
 800162a:	e01e      	b.n	800166a <HAL_ADC_ConfigChannel+0x186>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2100      	movs	r1, #0
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff fccc 	bl	8000fd0 <LL_ADC_GetOffsetChannel>
 8001638:	4603      	mov	r3, r0
 800163a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800163e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001642:	fa93 f3a3 	rbit	r3, r3
 8001646:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800164a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800164e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001652:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d101      	bne.n	800165e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800165a:	2320      	movs	r3, #32
 800165c:	e004      	b.n	8001668 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800165e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001662:	fab3 f383 	clz	r3, r3
 8001666:	b2db      	uxtb	r3, r3
 8001668:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001672:	2b00      	cmp	r3, #0
 8001674:	d105      	bne.n	8001682 <HAL_ADC_ConfigChannel+0x19e>
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	0e9b      	lsrs	r3, r3, #26
 800167c:	f003 031f 	and.w	r3, r3, #31
 8001680:	e018      	b.n	80016b4 <HAL_ADC_ConfigChannel+0x1d0>
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800168a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800168e:	fa93 f3a3 	rbit	r3, r3
 8001692:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001696:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800169a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800169e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d101      	bne.n	80016aa <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80016a6:	2320      	movs	r3, #32
 80016a8:	e004      	b.n	80016b4 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80016aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80016ae:	fab3 f383 	clz	r3, r3
 80016b2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d106      	bne.n	80016c6 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2200      	movs	r2, #0
 80016be:	2100      	movs	r1, #0
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff fc9b 	bl	8000ffc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2101      	movs	r1, #1
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff fc7f 	bl	8000fd0 <LL_ADC_GetOffsetChannel>
 80016d2:	4603      	mov	r3, r0
 80016d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d10a      	bne.n	80016f2 <HAL_ADC_ConfigChannel+0x20e>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2101      	movs	r1, #1
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff fc74 	bl	8000fd0 <LL_ADC_GetOffsetChannel>
 80016e8:	4603      	mov	r3, r0
 80016ea:	0e9b      	lsrs	r3, r3, #26
 80016ec:	f003 021f 	and.w	r2, r3, #31
 80016f0:	e01e      	b.n	8001730 <HAL_ADC_ConfigChannel+0x24c>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2101      	movs	r1, #1
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff fc69 	bl	8000fd0 <LL_ADC_GetOffsetChannel>
 80016fe:	4603      	mov	r3, r0
 8001700:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001704:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001708:	fa93 f3a3 	rbit	r3, r3
 800170c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001710:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001714:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001718:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800171c:	2b00      	cmp	r3, #0
 800171e:	d101      	bne.n	8001724 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001720:	2320      	movs	r3, #32
 8001722:	e004      	b.n	800172e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001724:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001728:	fab3 f383 	clz	r3, r3
 800172c:	b2db      	uxtb	r3, r3
 800172e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001738:	2b00      	cmp	r3, #0
 800173a:	d105      	bne.n	8001748 <HAL_ADC_ConfigChannel+0x264>
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	0e9b      	lsrs	r3, r3, #26
 8001742:	f003 031f 	and.w	r3, r3, #31
 8001746:	e018      	b.n	800177a <HAL_ADC_ConfigChannel+0x296>
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001750:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001754:	fa93 f3a3 	rbit	r3, r3
 8001758:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800175c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001760:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001764:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001768:	2b00      	cmp	r3, #0
 800176a:	d101      	bne.n	8001770 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 800176c:	2320      	movs	r3, #32
 800176e:	e004      	b.n	800177a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001770:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001774:	fab3 f383 	clz	r3, r3
 8001778:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800177a:	429a      	cmp	r2, r3
 800177c:	d106      	bne.n	800178c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2200      	movs	r2, #0
 8001784:	2101      	movs	r1, #1
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff fc38 	bl	8000ffc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2102      	movs	r1, #2
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff fc1c 	bl	8000fd0 <LL_ADC_GetOffsetChannel>
 8001798:	4603      	mov	r3, r0
 800179a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d10a      	bne.n	80017b8 <HAL_ADC_ConfigChannel+0x2d4>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2102      	movs	r1, #2
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff fc11 	bl	8000fd0 <LL_ADC_GetOffsetChannel>
 80017ae:	4603      	mov	r3, r0
 80017b0:	0e9b      	lsrs	r3, r3, #26
 80017b2:	f003 021f 	and.w	r2, r3, #31
 80017b6:	e01e      	b.n	80017f6 <HAL_ADC_ConfigChannel+0x312>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2102      	movs	r1, #2
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff fc06 	bl	8000fd0 <LL_ADC_GetOffsetChannel>
 80017c4:	4603      	mov	r3, r0
 80017c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80017ce:	fa93 f3a3 	rbit	r3, r3
 80017d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80017d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80017da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80017de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d101      	bne.n	80017ea <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80017e6:	2320      	movs	r3, #32
 80017e8:	e004      	b.n	80017f4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80017ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80017ee:	fab3 f383 	clz	r3, r3
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d105      	bne.n	800180e <HAL_ADC_ConfigChannel+0x32a>
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	0e9b      	lsrs	r3, r3, #26
 8001808:	f003 031f 	and.w	r3, r3, #31
 800180c:	e016      	b.n	800183c <HAL_ADC_ConfigChannel+0x358>
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001816:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800181a:	fa93 f3a3 	rbit	r3, r3
 800181e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001820:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001822:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001826:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800182a:	2b00      	cmp	r3, #0
 800182c:	d101      	bne.n	8001832 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800182e:	2320      	movs	r3, #32
 8001830:	e004      	b.n	800183c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001832:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001836:	fab3 f383 	clz	r3, r3
 800183a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800183c:	429a      	cmp	r2, r3
 800183e:	d106      	bne.n	800184e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2200      	movs	r2, #0
 8001846:	2102      	movs	r1, #2
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff fbd7 	bl	8000ffc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2103      	movs	r1, #3
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff fbbb 	bl	8000fd0 <LL_ADC_GetOffsetChannel>
 800185a:	4603      	mov	r3, r0
 800185c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001860:	2b00      	cmp	r3, #0
 8001862:	d10a      	bne.n	800187a <HAL_ADC_ConfigChannel+0x396>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2103      	movs	r1, #3
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff fbb0 	bl	8000fd0 <LL_ADC_GetOffsetChannel>
 8001870:	4603      	mov	r3, r0
 8001872:	0e9b      	lsrs	r3, r3, #26
 8001874:	f003 021f 	and.w	r2, r3, #31
 8001878:	e017      	b.n	80018aa <HAL_ADC_ConfigChannel+0x3c6>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2103      	movs	r1, #3
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff fba5 	bl	8000fd0 <LL_ADC_GetOffsetChannel>
 8001886:	4603      	mov	r3, r0
 8001888:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800188a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800188c:	fa93 f3a3 	rbit	r3, r3
 8001890:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001892:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001894:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001896:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001898:	2b00      	cmp	r3, #0
 800189a:	d101      	bne.n	80018a0 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 800189c:	2320      	movs	r3, #32
 800189e:	e003      	b.n	80018a8 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80018a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80018a2:	fab3 f383 	clz	r3, r3
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d105      	bne.n	80018c2 <HAL_ADC_ConfigChannel+0x3de>
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	0e9b      	lsrs	r3, r3, #26
 80018bc:	f003 031f 	and.w	r3, r3, #31
 80018c0:	e011      	b.n	80018e6 <HAL_ADC_ConfigChannel+0x402>
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80018ca:	fa93 f3a3 	rbit	r3, r3
 80018ce:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80018d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80018d2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80018d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d101      	bne.n	80018de <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80018da:	2320      	movs	r3, #32
 80018dc:	e003      	b.n	80018e6 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80018de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018e0:	fab3 f383 	clz	r3, r3
 80018e4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d106      	bne.n	80018f8 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2200      	movs	r2, #0
 80018f0:	2103      	movs	r1, #3
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff fb82 	bl	8000ffc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff fc61 	bl	80011c4 <LL_ADC_IsEnabled>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	f040 813f 	bne.w	8001b88 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6818      	ldr	r0, [r3, #0]
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	6819      	ldr	r1, [r3, #0]
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	461a      	mov	r2, r3
 8001918:	f7ff fbe2 	bl	80010e0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	4a8e      	ldr	r2, [pc, #568]	; (8001b5c <HAL_ADC_ConfigChannel+0x678>)
 8001922:	4293      	cmp	r3, r2
 8001924:	f040 8130 	bne.w	8001b88 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001934:	2b00      	cmp	r3, #0
 8001936:	d10b      	bne.n	8001950 <HAL_ADC_ConfigChannel+0x46c>
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	0e9b      	lsrs	r3, r3, #26
 800193e:	3301      	adds	r3, #1
 8001940:	f003 031f 	and.w	r3, r3, #31
 8001944:	2b09      	cmp	r3, #9
 8001946:	bf94      	ite	ls
 8001948:	2301      	movls	r3, #1
 800194a:	2300      	movhi	r3, #0
 800194c:	b2db      	uxtb	r3, r3
 800194e:	e019      	b.n	8001984 <HAL_ADC_ConfigChannel+0x4a0>
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001956:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001958:	fa93 f3a3 	rbit	r3, r3
 800195c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800195e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001960:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001962:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001964:	2b00      	cmp	r3, #0
 8001966:	d101      	bne.n	800196c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001968:	2320      	movs	r3, #32
 800196a:	e003      	b.n	8001974 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 800196c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800196e:	fab3 f383 	clz	r3, r3
 8001972:	b2db      	uxtb	r3, r3
 8001974:	3301      	adds	r3, #1
 8001976:	f003 031f 	and.w	r3, r3, #31
 800197a:	2b09      	cmp	r3, #9
 800197c:	bf94      	ite	ls
 800197e:	2301      	movls	r3, #1
 8001980:	2300      	movhi	r3, #0
 8001982:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001984:	2b00      	cmp	r3, #0
 8001986:	d079      	beq.n	8001a7c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001990:	2b00      	cmp	r3, #0
 8001992:	d107      	bne.n	80019a4 <HAL_ADC_ConfigChannel+0x4c0>
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	0e9b      	lsrs	r3, r3, #26
 800199a:	3301      	adds	r3, #1
 800199c:	069b      	lsls	r3, r3, #26
 800199e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019a2:	e015      	b.n	80019d0 <HAL_ADC_ConfigChannel+0x4ec>
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80019ac:	fa93 f3a3 	rbit	r3, r3
 80019b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80019b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019b4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80019b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d101      	bne.n	80019c0 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80019bc:	2320      	movs	r3, #32
 80019be:	e003      	b.n	80019c8 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80019c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019c2:	fab3 f383 	clz	r3, r3
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	3301      	adds	r3, #1
 80019ca:	069b      	lsls	r3, r3, #26
 80019cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d109      	bne.n	80019f0 <HAL_ADC_ConfigChannel+0x50c>
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	0e9b      	lsrs	r3, r3, #26
 80019e2:	3301      	adds	r3, #1
 80019e4:	f003 031f 	and.w	r3, r3, #31
 80019e8:	2101      	movs	r1, #1
 80019ea:	fa01 f303 	lsl.w	r3, r1, r3
 80019ee:	e017      	b.n	8001a20 <HAL_ADC_ConfigChannel+0x53c>
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019f8:	fa93 f3a3 	rbit	r3, r3
 80019fc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80019fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a00:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001a02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d101      	bne.n	8001a0c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001a08:	2320      	movs	r3, #32
 8001a0a:	e003      	b.n	8001a14 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001a0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a0e:	fab3 f383 	clz	r3, r3
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	3301      	adds	r3, #1
 8001a16:	f003 031f 	and.w	r3, r3, #31
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a20:	ea42 0103 	orr.w	r1, r2, r3
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d10a      	bne.n	8001a46 <HAL_ADC_ConfigChannel+0x562>
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	0e9b      	lsrs	r3, r3, #26
 8001a36:	3301      	adds	r3, #1
 8001a38:	f003 021f 	and.w	r2, r3, #31
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	4413      	add	r3, r2
 8001a42:	051b      	lsls	r3, r3, #20
 8001a44:	e018      	b.n	8001a78 <HAL_ADC_ConfigChannel+0x594>
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a4e:	fa93 f3a3 	rbit	r3, r3
 8001a52:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a56:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d101      	bne.n	8001a62 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001a5e:	2320      	movs	r3, #32
 8001a60:	e003      	b.n	8001a6a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a64:	fab3 f383 	clz	r3, r3
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	f003 021f 	and.w	r2, r3, #31
 8001a70:	4613      	mov	r3, r2
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	4413      	add	r3, r2
 8001a76:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a78:	430b      	orrs	r3, r1
 8001a7a:	e080      	b.n	8001b7e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d107      	bne.n	8001a98 <HAL_ADC_ConfigChannel+0x5b4>
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	0e9b      	lsrs	r3, r3, #26
 8001a8e:	3301      	adds	r3, #1
 8001a90:	069b      	lsls	r3, r3, #26
 8001a92:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a96:	e015      	b.n	8001ac4 <HAL_ADC_ConfigChannel+0x5e0>
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aa0:	fa93 f3a3 	rbit	r3, r3
 8001aa4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aa8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d101      	bne.n	8001ab4 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001ab0:	2320      	movs	r3, #32
 8001ab2:	e003      	b.n	8001abc <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ab6:	fab3 f383 	clz	r3, r3
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	3301      	adds	r3, #1
 8001abe:	069b      	lsls	r3, r3, #26
 8001ac0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d109      	bne.n	8001ae4 <HAL_ADC_ConfigChannel+0x600>
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	0e9b      	lsrs	r3, r3, #26
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	f003 031f 	and.w	r3, r3, #31
 8001adc:	2101      	movs	r1, #1
 8001ade:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae2:	e017      	b.n	8001b14 <HAL_ADC_ConfigChannel+0x630>
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aea:	6a3b      	ldr	r3, [r7, #32]
 8001aec:	fa93 f3a3 	rbit	r3, r3
 8001af0:	61fb      	str	r3, [r7, #28]
  return result;
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d101      	bne.n	8001b00 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001afc:	2320      	movs	r3, #32
 8001afe:	e003      	b.n	8001b08 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b02:	fab3 f383 	clz	r3, r3
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	3301      	adds	r3, #1
 8001b0a:	f003 031f 	and.w	r3, r3, #31
 8001b0e:	2101      	movs	r1, #1
 8001b10:	fa01 f303 	lsl.w	r3, r1, r3
 8001b14:	ea42 0103 	orr.w	r1, r2, r3
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d10d      	bne.n	8001b40 <HAL_ADC_ConfigChannel+0x65c>
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	0e9b      	lsrs	r3, r3, #26
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	f003 021f 	and.w	r2, r3, #31
 8001b30:	4613      	mov	r3, r2
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	4413      	add	r3, r2
 8001b36:	3b1e      	subs	r3, #30
 8001b38:	051b      	lsls	r3, r3, #20
 8001b3a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b3e:	e01d      	b.n	8001b7c <HAL_ADC_ConfigChannel+0x698>
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	fa93 f3a3 	rbit	r3, r3
 8001b4c:	613b      	str	r3, [r7, #16]
  return result;
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d103      	bne.n	8001b60 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001b58:	2320      	movs	r3, #32
 8001b5a:	e005      	b.n	8001b68 <HAL_ADC_ConfigChannel+0x684>
 8001b5c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	fab3 f383 	clz	r3, r3
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	3301      	adds	r3, #1
 8001b6a:	f003 021f 	and.w	r2, r3, #31
 8001b6e:	4613      	mov	r3, r2
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	4413      	add	r3, r2
 8001b74:	3b1e      	subs	r3, #30
 8001b76:	051b      	lsls	r3, r3, #20
 8001b78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b7c:	430b      	orrs	r3, r1
 8001b7e:	683a      	ldr	r2, [r7, #0]
 8001b80:	6892      	ldr	r2, [r2, #8]
 8001b82:	4619      	mov	r1, r3
 8001b84:	f7ff fa81 	bl	800108a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	4b44      	ldr	r3, [pc, #272]	; (8001ca0 <HAL_ADC_ConfigChannel+0x7bc>)
 8001b8e:	4013      	ands	r3, r2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d07a      	beq.n	8001c8a <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b94:	4843      	ldr	r0, [pc, #268]	; (8001ca4 <HAL_ADC_ConfigChannel+0x7c0>)
 8001b96:	f7ff f9e9 	bl	8000f6c <LL_ADC_GetCommonPathInternalCh>
 8001b9a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a41      	ldr	r2, [pc, #260]	; (8001ca8 <HAL_ADC_ConfigChannel+0x7c4>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d12c      	bne.n	8001c02 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001ba8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001bac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d126      	bne.n	8001c02 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a3c      	ldr	r2, [pc, #240]	; (8001cac <HAL_ADC_ConfigChannel+0x7c8>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d004      	beq.n	8001bc8 <HAL_ADC_ConfigChannel+0x6e4>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a3b      	ldr	r2, [pc, #236]	; (8001cb0 <HAL_ADC_ConfigChannel+0x7cc>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d15d      	bne.n	8001c84 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001bc8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001bcc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4834      	ldr	r0, [pc, #208]	; (8001ca4 <HAL_ADC_ConfigChannel+0x7c0>)
 8001bd4:	f7ff f9b7 	bl	8000f46 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001bd8:	4b36      	ldr	r3, [pc, #216]	; (8001cb4 <HAL_ADC_ConfigChannel+0x7d0>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	099b      	lsrs	r3, r3, #6
 8001bde:	4a36      	ldr	r2, [pc, #216]	; (8001cb8 <HAL_ADC_ConfigChannel+0x7d4>)
 8001be0:	fba2 2303 	umull	r2, r3, r2, r3
 8001be4:	099b      	lsrs	r3, r3, #6
 8001be6:	1c5a      	adds	r2, r3, #1
 8001be8:	4613      	mov	r3, r2
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	4413      	add	r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001bf2:	e002      	b.n	8001bfa <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1f9      	bne.n	8001bf4 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c00:	e040      	b.n	8001c84 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a2d      	ldr	r2, [pc, #180]	; (8001cbc <HAL_ADC_ConfigChannel+0x7d8>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d118      	bne.n	8001c3e <HAL_ADC_ConfigChannel+0x75a>
 8001c0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d112      	bne.n	8001c3e <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a23      	ldr	r2, [pc, #140]	; (8001cac <HAL_ADC_ConfigChannel+0x7c8>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d004      	beq.n	8001c2c <HAL_ADC_ConfigChannel+0x748>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a22      	ldr	r2, [pc, #136]	; (8001cb0 <HAL_ADC_ConfigChannel+0x7cc>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d12d      	bne.n	8001c88 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c34:	4619      	mov	r1, r3
 8001c36:	481b      	ldr	r0, [pc, #108]	; (8001ca4 <HAL_ADC_ConfigChannel+0x7c0>)
 8001c38:	f7ff f985 	bl	8000f46 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001c3c:	e024      	b.n	8001c88 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a1f      	ldr	r2, [pc, #124]	; (8001cc0 <HAL_ADC_ConfigChannel+0x7dc>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d120      	bne.n	8001c8a <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001c48:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d11a      	bne.n	8001c8a <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a14      	ldr	r2, [pc, #80]	; (8001cac <HAL_ADC_ConfigChannel+0x7c8>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d115      	bne.n	8001c8a <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c5e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c62:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c66:	4619      	mov	r1, r3
 8001c68:	480e      	ldr	r0, [pc, #56]	; (8001ca4 <HAL_ADC_ConfigChannel+0x7c0>)
 8001c6a:	f7ff f96c 	bl	8000f46 <LL_ADC_SetCommonPathInternalCh>
 8001c6e:	e00c      	b.n	8001c8a <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c74:	f043 0220 	orr.w	r2, r3, #32
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001c82:	e002      	b.n	8001c8a <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c84:	bf00      	nop
 8001c86:	e000      	b.n	8001c8a <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001c88:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001c92:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	37d8      	adds	r7, #216	; 0xd8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	80080000 	.word	0x80080000
 8001ca4:	50040300 	.word	0x50040300
 8001ca8:	c7520000 	.word	0xc7520000
 8001cac:	50040000 	.word	0x50040000
 8001cb0:	50040200 	.word	0x50040200
 8001cb4:	20000000 	.word	0x20000000
 8001cb8:	053e2d63 	.word	0x053e2d63
 8001cbc:	cb840000 	.word	0xcb840000
 8001cc0:	80000001 	.word	0x80000001

08001cc4 <LL_ADC_IsEnabled>:
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d101      	bne.n	8001cdc <LL_ADC_IsEnabled+0x18>
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e000      	b.n	8001cde <LL_ADC_IsEnabled+0x1a>
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <LL_ADC_REG_IsConversionOngoing>:
{
 8001cea:	b480      	push	{r7}
 8001cec:	b083      	sub	sp, #12
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f003 0304 	and.w	r3, r3, #4
 8001cfa:	2b04      	cmp	r3, #4
 8001cfc:	d101      	bne.n	8001d02 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e000      	b.n	8001d04 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d02:	2300      	movs	r3, #0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001d10:	b590      	push	{r4, r7, lr}
 8001d12:	b09f      	sub	sp, #124	; 0x7c
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d101      	bne.n	8001d2e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	e093      	b.n	8001e56 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2201      	movs	r2, #1
 8001d32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8001d36:	2300      	movs	r3, #0
 8001d38:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a47      	ldr	r2, [pc, #284]	; (8001e60 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d102      	bne.n	8001d4e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001d48:	4b46      	ldr	r3, [pc, #280]	; (8001e64 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001d4a:	60bb      	str	r3, [r7, #8]
 8001d4c:	e001      	b.n	8001d52 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d10b      	bne.n	8001d70 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d5c:	f043 0220 	orr.w	r2, r3, #32
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e072      	b.n	8001e56 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff ffb9 	bl	8001cea <LL_ADC_REG_IsConversionOngoing>
 8001d78:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff ffb3 	bl	8001cea <LL_ADC_REG_IsConversionOngoing>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d154      	bne.n	8001e34 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001d8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d151      	bne.n	8001e34 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001d90:	4b35      	ldr	r3, [pc, #212]	; (8001e68 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8001d92:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d02c      	beq.n	8001df6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001d9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	6859      	ldr	r1, [r3, #4]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001dae:	035b      	lsls	r3, r3, #13
 8001db0:	430b      	orrs	r3, r1
 8001db2:	431a      	orrs	r2, r3
 8001db4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001db6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001db8:	4829      	ldr	r0, [pc, #164]	; (8001e60 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001dba:	f7ff ff83 	bl	8001cc4 <LL_ADC_IsEnabled>
 8001dbe:	4604      	mov	r4, r0
 8001dc0:	4828      	ldr	r0, [pc, #160]	; (8001e64 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001dc2:	f7ff ff7f 	bl	8001cc4 <LL_ADC_IsEnabled>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	431c      	orrs	r4, r3
 8001dca:	4828      	ldr	r0, [pc, #160]	; (8001e6c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001dcc:	f7ff ff7a 	bl	8001cc4 <LL_ADC_IsEnabled>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	4323      	orrs	r3, r4
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d137      	bne.n	8001e48 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001dd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001de0:	f023 030f 	bic.w	r3, r3, #15
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	6811      	ldr	r1, [r2, #0]
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	6892      	ldr	r2, [r2, #8]
 8001dec:	430a      	orrs	r2, r1
 8001dee:	431a      	orrs	r2, r3
 8001df0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001df2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001df4:	e028      	b.n	8001e48 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001df6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001dfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e00:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e02:	4817      	ldr	r0, [pc, #92]	; (8001e60 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001e04:	f7ff ff5e 	bl	8001cc4 <LL_ADC_IsEnabled>
 8001e08:	4604      	mov	r4, r0
 8001e0a:	4816      	ldr	r0, [pc, #88]	; (8001e64 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001e0c:	f7ff ff5a 	bl	8001cc4 <LL_ADC_IsEnabled>
 8001e10:	4603      	mov	r3, r0
 8001e12:	431c      	orrs	r4, r3
 8001e14:	4815      	ldr	r0, [pc, #84]	; (8001e6c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001e16:	f7ff ff55 	bl	8001cc4 <LL_ADC_IsEnabled>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	4323      	orrs	r3, r4
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d112      	bne.n	8001e48 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001e22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001e2a:	f023 030f 	bic.w	r3, r3, #15
 8001e2e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001e30:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e32:	e009      	b.n	8001e48 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e38:	f043 0220 	orr.w	r2, r3, #32
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001e46:	e000      	b.n	8001e4a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e48:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001e52:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	377c      	adds	r7, #124	; 0x7c
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd90      	pop	{r4, r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	50040000 	.word	0x50040000
 8001e64:	50040100 	.word	0x50040100
 8001e68:	50040300 	.word	0x50040300
 8001e6c:	50040200 	.word	0x50040200

08001e70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e80:	4b0c      	ldr	r3, [pc, #48]	; (8001eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e86:	68ba      	ldr	r2, [r7, #8]
 8001e88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ea0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ea2:	4a04      	ldr	r2, [pc, #16]	; (8001eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	60d3      	str	r3, [r2, #12]
}
 8001ea8:	bf00      	nop
 8001eaa:	3714      	adds	r7, #20
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	e000ed00 	.word	0xe000ed00

08001eb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ebc:	4b04      	ldr	r3, [pc, #16]	; (8001ed0 <__NVIC_GetPriorityGrouping+0x18>)
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	0a1b      	lsrs	r3, r3, #8
 8001ec2:	f003 0307 	and.w	r3, r3, #7
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr
 8001ed0:	e000ed00 	.word	0xe000ed00

08001ed4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	4603      	mov	r3, r0
 8001edc:	6039      	str	r1, [r7, #0]
 8001ede:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	db0a      	blt.n	8001efe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	b2da      	uxtb	r2, r3
 8001eec:	490c      	ldr	r1, [pc, #48]	; (8001f20 <__NVIC_SetPriority+0x4c>)
 8001eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef2:	0112      	lsls	r2, r2, #4
 8001ef4:	b2d2      	uxtb	r2, r2
 8001ef6:	440b      	add	r3, r1
 8001ef8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001efc:	e00a      	b.n	8001f14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	4908      	ldr	r1, [pc, #32]	; (8001f24 <__NVIC_SetPriority+0x50>)
 8001f04:	79fb      	ldrb	r3, [r7, #7]
 8001f06:	f003 030f 	and.w	r3, r3, #15
 8001f0a:	3b04      	subs	r3, #4
 8001f0c:	0112      	lsls	r2, r2, #4
 8001f0e:	b2d2      	uxtb	r2, r2
 8001f10:	440b      	add	r3, r1
 8001f12:	761a      	strb	r2, [r3, #24]
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	e000e100 	.word	0xe000e100
 8001f24:	e000ed00 	.word	0xe000ed00

08001f28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b089      	sub	sp, #36	; 0x24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	f1c3 0307 	rsb	r3, r3, #7
 8001f42:	2b04      	cmp	r3, #4
 8001f44:	bf28      	it	cs
 8001f46:	2304      	movcs	r3, #4
 8001f48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	3304      	adds	r3, #4
 8001f4e:	2b06      	cmp	r3, #6
 8001f50:	d902      	bls.n	8001f58 <NVIC_EncodePriority+0x30>
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	3b03      	subs	r3, #3
 8001f56:	e000      	b.n	8001f5a <NVIC_EncodePriority+0x32>
 8001f58:	2300      	movs	r3, #0
 8001f5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	43da      	mvns	r2, r3
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	401a      	ands	r2, r3
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f70:	f04f 31ff 	mov.w	r1, #4294967295
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7a:	43d9      	mvns	r1, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f80:	4313      	orrs	r3, r2
         );
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3724      	adds	r7, #36	; 0x24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
	...

08001f90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fa0:	d301      	bcc.n	8001fa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e00f      	b.n	8001fc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fa6:	4a0a      	ldr	r2, [pc, #40]	; (8001fd0 <SysTick_Config+0x40>)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	3b01      	subs	r3, #1
 8001fac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fae:	210f      	movs	r1, #15
 8001fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb4:	f7ff ff8e 	bl	8001ed4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fb8:	4b05      	ldr	r3, [pc, #20]	; (8001fd0 <SysTick_Config+0x40>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fbe:	4b04      	ldr	r3, [pc, #16]	; (8001fd0 <SysTick_Config+0x40>)
 8001fc0:	2207      	movs	r2, #7
 8001fc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	e000e010 	.word	0xe000e010

08001fd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f7ff ff47 	bl	8001e70 <__NVIC_SetPriorityGrouping>
}
 8001fe2:	bf00      	nop
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b086      	sub	sp, #24
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	60b9      	str	r1, [r7, #8]
 8001ff4:	607a      	str	r2, [r7, #4]
 8001ff6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ffc:	f7ff ff5c 	bl	8001eb8 <__NVIC_GetPriorityGrouping>
 8002000:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	68b9      	ldr	r1, [r7, #8]
 8002006:	6978      	ldr	r0, [r7, #20]
 8002008:	f7ff ff8e 	bl	8001f28 <NVIC_EncodePriority>
 800200c:	4602      	mov	r2, r0
 800200e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002012:	4611      	mov	r1, r2
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff ff5d 	bl	8001ed4 <__NVIC_SetPriority>
}
 800201a:	bf00      	nop
 800201c:	3718      	adds	r7, #24
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b082      	sub	sp, #8
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7ff ffb0 	bl	8001f90 <SysTick_Config>
 8002030:	4603      	mov	r3, r0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
	...

0800203c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800203c:	b480      	push	{r7}
 800203e:	b087      	sub	sp, #28
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002046:	2300      	movs	r3, #0
 8002048:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800204a:	e17f      	b.n	800234c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	2101      	movs	r1, #1
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	fa01 f303 	lsl.w	r3, r1, r3
 8002058:	4013      	ands	r3, r2
 800205a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2b00      	cmp	r3, #0
 8002060:	f000 8171 	beq.w	8002346 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f003 0303 	and.w	r3, r3, #3
 800206c:	2b01      	cmp	r3, #1
 800206e:	d005      	beq.n	800207c <HAL_GPIO_Init+0x40>
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f003 0303 	and.w	r3, r3, #3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d130      	bne.n	80020de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	2203      	movs	r2, #3
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	43db      	mvns	r3, r3
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	4013      	ands	r3, r2
 8002092:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	68da      	ldr	r2, [r3, #12]
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020b2:	2201      	movs	r2, #1
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	43db      	mvns	r3, r3
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	4013      	ands	r3, r2
 80020c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	091b      	lsrs	r3, r3, #4
 80020c8:	f003 0201 	and.w	r2, r3, #1
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f003 0303 	and.w	r3, r3, #3
 80020e6:	2b03      	cmp	r3, #3
 80020e8:	d118      	bne.n	800211c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80020f0:	2201      	movs	r2, #1
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	43db      	mvns	r3, r3
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	4013      	ands	r3, r2
 80020fe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	08db      	lsrs	r3, r3, #3
 8002106:	f003 0201 	and.w	r2, r3, #1
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	4313      	orrs	r3, r2
 8002114:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	693a      	ldr	r2, [r7, #16]
 800211a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f003 0303 	and.w	r3, r3, #3
 8002124:	2b03      	cmp	r3, #3
 8002126:	d017      	beq.n	8002158 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	2203      	movs	r2, #3
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	43db      	mvns	r3, r3
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	4013      	ands	r3, r2
 800213e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	4313      	orrs	r3, r2
 8002150:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	693a      	ldr	r2, [r7, #16]
 8002156:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f003 0303 	and.w	r3, r3, #3
 8002160:	2b02      	cmp	r3, #2
 8002162:	d123      	bne.n	80021ac <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	08da      	lsrs	r2, r3, #3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	3208      	adds	r2, #8
 800216c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002170:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	f003 0307 	and.w	r3, r3, #7
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	220f      	movs	r2, #15
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	43db      	mvns	r3, r3
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	4013      	ands	r3, r2
 8002186:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	691a      	ldr	r2, [r3, #16]
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	4313      	orrs	r3, r2
 800219c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	08da      	lsrs	r2, r3, #3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	3208      	adds	r2, #8
 80021a6:	6939      	ldr	r1, [r7, #16]
 80021a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	2203      	movs	r2, #3
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	43db      	mvns	r3, r3
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	4013      	ands	r3, r2
 80021c2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f003 0203 	and.w	r2, r3, #3
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	693a      	ldr	r2, [r7, #16]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f000 80ac 	beq.w	8002346 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ee:	4b5f      	ldr	r3, [pc, #380]	; (800236c <HAL_GPIO_Init+0x330>)
 80021f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021f2:	4a5e      	ldr	r2, [pc, #376]	; (800236c <HAL_GPIO_Init+0x330>)
 80021f4:	f043 0301 	orr.w	r3, r3, #1
 80021f8:	6613      	str	r3, [r2, #96]	; 0x60
 80021fa:	4b5c      	ldr	r3, [pc, #368]	; (800236c <HAL_GPIO_Init+0x330>)
 80021fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	60bb      	str	r3, [r7, #8]
 8002204:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002206:	4a5a      	ldr	r2, [pc, #360]	; (8002370 <HAL_GPIO_Init+0x334>)
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	089b      	lsrs	r3, r3, #2
 800220c:	3302      	adds	r3, #2
 800220e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002212:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	f003 0303 	and.w	r3, r3, #3
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	220f      	movs	r2, #15
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	43db      	mvns	r3, r3
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	4013      	ands	r3, r2
 8002228:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002230:	d025      	beq.n	800227e <HAL_GPIO_Init+0x242>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a4f      	ldr	r2, [pc, #316]	; (8002374 <HAL_GPIO_Init+0x338>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d01f      	beq.n	800227a <HAL_GPIO_Init+0x23e>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a4e      	ldr	r2, [pc, #312]	; (8002378 <HAL_GPIO_Init+0x33c>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d019      	beq.n	8002276 <HAL_GPIO_Init+0x23a>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a4d      	ldr	r2, [pc, #308]	; (800237c <HAL_GPIO_Init+0x340>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d013      	beq.n	8002272 <HAL_GPIO_Init+0x236>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a4c      	ldr	r2, [pc, #304]	; (8002380 <HAL_GPIO_Init+0x344>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d00d      	beq.n	800226e <HAL_GPIO_Init+0x232>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a4b      	ldr	r2, [pc, #300]	; (8002384 <HAL_GPIO_Init+0x348>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d007      	beq.n	800226a <HAL_GPIO_Init+0x22e>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a4a      	ldr	r2, [pc, #296]	; (8002388 <HAL_GPIO_Init+0x34c>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d101      	bne.n	8002266 <HAL_GPIO_Init+0x22a>
 8002262:	2306      	movs	r3, #6
 8002264:	e00c      	b.n	8002280 <HAL_GPIO_Init+0x244>
 8002266:	2307      	movs	r3, #7
 8002268:	e00a      	b.n	8002280 <HAL_GPIO_Init+0x244>
 800226a:	2305      	movs	r3, #5
 800226c:	e008      	b.n	8002280 <HAL_GPIO_Init+0x244>
 800226e:	2304      	movs	r3, #4
 8002270:	e006      	b.n	8002280 <HAL_GPIO_Init+0x244>
 8002272:	2303      	movs	r3, #3
 8002274:	e004      	b.n	8002280 <HAL_GPIO_Init+0x244>
 8002276:	2302      	movs	r3, #2
 8002278:	e002      	b.n	8002280 <HAL_GPIO_Init+0x244>
 800227a:	2301      	movs	r3, #1
 800227c:	e000      	b.n	8002280 <HAL_GPIO_Init+0x244>
 800227e:	2300      	movs	r3, #0
 8002280:	697a      	ldr	r2, [r7, #20]
 8002282:	f002 0203 	and.w	r2, r2, #3
 8002286:	0092      	lsls	r2, r2, #2
 8002288:	4093      	lsls	r3, r2
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	4313      	orrs	r3, r2
 800228e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002290:	4937      	ldr	r1, [pc, #220]	; (8002370 <HAL_GPIO_Init+0x334>)
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	089b      	lsrs	r3, r3, #2
 8002296:	3302      	adds	r3, #2
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800229e:	4b3b      	ldr	r3, [pc, #236]	; (800238c <HAL_GPIO_Init+0x350>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	43db      	mvns	r3, r3
 80022a8:	693a      	ldr	r2, [r7, #16]
 80022aa:	4013      	ands	r3, r2
 80022ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d003      	beq.n	80022c2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	4313      	orrs	r3, r2
 80022c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80022c2:	4a32      	ldr	r2, [pc, #200]	; (800238c <HAL_GPIO_Init+0x350>)
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80022c8:	4b30      	ldr	r3, [pc, #192]	; (800238c <HAL_GPIO_Init+0x350>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	43db      	mvns	r3, r3
 80022d2:	693a      	ldr	r2, [r7, #16]
 80022d4:	4013      	ands	r3, r2
 80022d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d003      	beq.n	80022ec <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80022e4:	693a      	ldr	r2, [r7, #16]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80022ec:	4a27      	ldr	r2, [pc, #156]	; (800238c <HAL_GPIO_Init+0x350>)
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80022f2:	4b26      	ldr	r3, [pc, #152]	; (800238c <HAL_GPIO_Init+0x350>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	43db      	mvns	r3, r3
 80022fc:	693a      	ldr	r2, [r7, #16]
 80022fe:	4013      	ands	r3, r2
 8002300:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d003      	beq.n	8002316 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800230e:	693a      	ldr	r2, [r7, #16]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	4313      	orrs	r3, r2
 8002314:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002316:	4a1d      	ldr	r2, [pc, #116]	; (800238c <HAL_GPIO_Init+0x350>)
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800231c:	4b1b      	ldr	r3, [pc, #108]	; (800238c <HAL_GPIO_Init+0x350>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	43db      	mvns	r3, r3
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	4013      	ands	r3, r2
 800232a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d003      	beq.n	8002340 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	4313      	orrs	r3, r2
 800233e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002340:	4a12      	ldr	r2, [pc, #72]	; (800238c <HAL_GPIO_Init+0x350>)
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	3301      	adds	r3, #1
 800234a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	fa22 f303 	lsr.w	r3, r2, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	f47f ae78 	bne.w	800204c <HAL_GPIO_Init+0x10>
  }
}
 800235c:	bf00      	nop
 800235e:	bf00      	nop
 8002360:	371c      	adds	r7, #28
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	40021000 	.word	0x40021000
 8002370:	40010000 	.word	0x40010000
 8002374:	48000400 	.word	0x48000400
 8002378:	48000800 	.word	0x48000800
 800237c:	48000c00 	.word	0x48000c00
 8002380:	48001000 	.word	0x48001000
 8002384:	48001400 	.word	0x48001400
 8002388:	48001800 	.word	0x48001800
 800238c:	40010400 	.word	0x40010400

08002390 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	460b      	mov	r3, r1
 800239a:	807b      	strh	r3, [r7, #2]
 800239c:	4613      	mov	r3, r2
 800239e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023a0:	787b      	ldrb	r3, [r7, #1]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d003      	beq.n	80023ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023a6:	887a      	ldrh	r2, [r7, #2]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023ac:	e002      	b.n	80023b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023ae:	887a      	ldrh	r2, [r7, #2]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	460b      	mov	r3, r1
 80023ca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	695b      	ldr	r3, [r3, #20]
 80023d0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023d2:	887a      	ldrh	r2, [r7, #2]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	4013      	ands	r3, r2
 80023d8:	041a      	lsls	r2, r3, #16
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	43d9      	mvns	r1, r3
 80023de:	887b      	ldrh	r3, [r7, #2]
 80023e0:	400b      	ands	r3, r1
 80023e2:	431a      	orrs	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	619a      	str	r2, [r3, #24]
}
 80023e8:	bf00      	nop
 80023ea:	3714      	adds	r7, #20
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80023f8:	4b04      	ldr	r3, [pc, #16]	; (800240c <HAL_PWREx_GetVoltageRange+0x18>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002400:	4618      	mov	r0, r3
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	40007000 	.word	0x40007000

08002410 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800241e:	d130      	bne.n	8002482 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002420:	4b23      	ldr	r3, [pc, #140]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002428:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800242c:	d038      	beq.n	80024a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800242e:	4b20      	ldr	r3, [pc, #128]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002436:	4a1e      	ldr	r2, [pc, #120]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002438:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800243c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800243e:	4b1d      	ldr	r3, [pc, #116]	; (80024b4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2232      	movs	r2, #50	; 0x32
 8002444:	fb02 f303 	mul.w	r3, r2, r3
 8002448:	4a1b      	ldr	r2, [pc, #108]	; (80024b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800244a:	fba2 2303 	umull	r2, r3, r2, r3
 800244e:	0c9b      	lsrs	r3, r3, #18
 8002450:	3301      	adds	r3, #1
 8002452:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002454:	e002      	b.n	800245c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	3b01      	subs	r3, #1
 800245a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800245c:	4b14      	ldr	r3, [pc, #80]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800245e:	695b      	ldr	r3, [r3, #20]
 8002460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002464:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002468:	d102      	bne.n	8002470 <HAL_PWREx_ControlVoltageScaling+0x60>
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1f2      	bne.n	8002456 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002470:	4b0f      	ldr	r3, [pc, #60]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002472:	695b      	ldr	r3, [r3, #20]
 8002474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002478:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800247c:	d110      	bne.n	80024a0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e00f      	b.n	80024a2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002482:	4b0b      	ldr	r3, [pc, #44]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800248a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800248e:	d007      	beq.n	80024a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002490:	4b07      	ldr	r3, [pc, #28]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002498:	4a05      	ldr	r2, [pc, #20]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800249a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800249e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3714      	adds	r7, #20
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	40007000 	.word	0x40007000
 80024b4:	20000000 	.word	0x20000000
 80024b8:	431bde83 	.word	0x431bde83

080024bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b088      	sub	sp, #32
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e3d4      	b.n	8002c78 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024ce:	4ba1      	ldr	r3, [pc, #644]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f003 030c 	and.w	r3, r3, #12
 80024d6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024d8:	4b9e      	ldr	r3, [pc, #632]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	f003 0303 	and.w	r3, r3, #3
 80024e0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0310 	and.w	r3, r3, #16
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f000 80e4 	beq.w	80026b8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d007      	beq.n	8002506 <HAL_RCC_OscConfig+0x4a>
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	2b0c      	cmp	r3, #12
 80024fa:	f040 808b 	bne.w	8002614 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	2b01      	cmp	r3, #1
 8002502:	f040 8087 	bne.w	8002614 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002506:	4b93      	ldr	r3, [pc, #588]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d005      	beq.n	800251e <HAL_RCC_OscConfig+0x62>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e3ac      	b.n	8002c78 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a1a      	ldr	r2, [r3, #32]
 8002522:	4b8c      	ldr	r3, [pc, #560]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0308 	and.w	r3, r3, #8
 800252a:	2b00      	cmp	r3, #0
 800252c:	d004      	beq.n	8002538 <HAL_RCC_OscConfig+0x7c>
 800252e:	4b89      	ldr	r3, [pc, #548]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002536:	e005      	b.n	8002544 <HAL_RCC_OscConfig+0x88>
 8002538:	4b86      	ldr	r3, [pc, #536]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 800253a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800253e:	091b      	lsrs	r3, r3, #4
 8002540:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002544:	4293      	cmp	r3, r2
 8002546:	d223      	bcs.n	8002590 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a1b      	ldr	r3, [r3, #32]
 800254c:	4618      	mov	r0, r3
 800254e:	f000 fd41 	bl	8002fd4 <RCC_SetFlashLatencyFromMSIRange>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e38d      	b.n	8002c78 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800255c:	4b7d      	ldr	r3, [pc, #500]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a7c      	ldr	r2, [pc, #496]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 8002562:	f043 0308 	orr.w	r3, r3, #8
 8002566:	6013      	str	r3, [r2, #0]
 8002568:	4b7a      	ldr	r3, [pc, #488]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	4977      	ldr	r1, [pc, #476]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 8002576:	4313      	orrs	r3, r2
 8002578:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800257a:	4b76      	ldr	r3, [pc, #472]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	021b      	lsls	r3, r3, #8
 8002588:	4972      	ldr	r1, [pc, #456]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 800258a:	4313      	orrs	r3, r2
 800258c:	604b      	str	r3, [r1, #4]
 800258e:	e025      	b.n	80025dc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002590:	4b70      	ldr	r3, [pc, #448]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a6f      	ldr	r2, [pc, #444]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 8002596:	f043 0308 	orr.w	r3, r3, #8
 800259a:	6013      	str	r3, [r2, #0]
 800259c:	4b6d      	ldr	r3, [pc, #436]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a1b      	ldr	r3, [r3, #32]
 80025a8:	496a      	ldr	r1, [pc, #424]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025ae:	4b69      	ldr	r3, [pc, #420]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	021b      	lsls	r3, r3, #8
 80025bc:	4965      	ldr	r1, [pc, #404]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d109      	bne.n	80025dc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f000 fd01 	bl	8002fd4 <RCC_SetFlashLatencyFromMSIRange>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e34d      	b.n	8002c78 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025dc:	f000 fc36 	bl	8002e4c <HAL_RCC_GetSysClockFreq>
 80025e0:	4602      	mov	r2, r0
 80025e2:	4b5c      	ldr	r3, [pc, #368]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	091b      	lsrs	r3, r3, #4
 80025e8:	f003 030f 	and.w	r3, r3, #15
 80025ec:	495a      	ldr	r1, [pc, #360]	; (8002758 <HAL_RCC_OscConfig+0x29c>)
 80025ee:	5ccb      	ldrb	r3, [r1, r3]
 80025f0:	f003 031f 	and.w	r3, r3, #31
 80025f4:	fa22 f303 	lsr.w	r3, r2, r3
 80025f8:	4a58      	ldr	r2, [pc, #352]	; (800275c <HAL_RCC_OscConfig+0x2a0>)
 80025fa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80025fc:	4b58      	ldr	r3, [pc, #352]	; (8002760 <HAL_RCC_OscConfig+0x2a4>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4618      	mov	r0, r3
 8002602:	f7fe fc0d 	bl	8000e20 <HAL_InitTick>
 8002606:	4603      	mov	r3, r0
 8002608:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800260a:	7bfb      	ldrb	r3, [r7, #15]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d052      	beq.n	80026b6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002610:	7bfb      	ldrb	r3, [r7, #15]
 8002612:	e331      	b.n	8002c78 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d032      	beq.n	8002682 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800261c:	4b4d      	ldr	r3, [pc, #308]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a4c      	ldr	r2, [pc, #304]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 8002622:	f043 0301 	orr.w	r3, r3, #1
 8002626:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002628:	f7fe fc4a 	bl	8000ec0 <HAL_GetTick>
 800262c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800262e:	e008      	b.n	8002642 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002630:	f7fe fc46 	bl	8000ec0 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e31a      	b.n	8002c78 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002642:	4b44      	ldr	r3, [pc, #272]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d0f0      	beq.n	8002630 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800264e:	4b41      	ldr	r3, [pc, #260]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a40      	ldr	r2, [pc, #256]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 8002654:	f043 0308 	orr.w	r3, r3, #8
 8002658:	6013      	str	r3, [r2, #0]
 800265a:	4b3e      	ldr	r3, [pc, #248]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	493b      	ldr	r1, [pc, #236]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 8002668:	4313      	orrs	r3, r2
 800266a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800266c:	4b39      	ldr	r3, [pc, #228]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	69db      	ldr	r3, [r3, #28]
 8002678:	021b      	lsls	r3, r3, #8
 800267a:	4936      	ldr	r1, [pc, #216]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 800267c:	4313      	orrs	r3, r2
 800267e:	604b      	str	r3, [r1, #4]
 8002680:	e01a      	b.n	80026b8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002682:	4b34      	ldr	r3, [pc, #208]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a33      	ldr	r2, [pc, #204]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 8002688:	f023 0301 	bic.w	r3, r3, #1
 800268c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800268e:	f7fe fc17 	bl	8000ec0 <HAL_GetTick>
 8002692:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002694:	e008      	b.n	80026a8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002696:	f7fe fc13 	bl	8000ec0 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e2e7      	b.n	8002c78 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026a8:	4b2a      	ldr	r3, [pc, #168]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1f0      	bne.n	8002696 <HAL_RCC_OscConfig+0x1da>
 80026b4:	e000      	b.n	80026b8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026b6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d074      	beq.n	80027ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	2b08      	cmp	r3, #8
 80026c8:	d005      	beq.n	80026d6 <HAL_RCC_OscConfig+0x21a>
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	2b0c      	cmp	r3, #12
 80026ce:	d10e      	bne.n	80026ee <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	2b03      	cmp	r3, #3
 80026d4:	d10b      	bne.n	80026ee <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d6:	4b1f      	ldr	r3, [pc, #124]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d064      	beq.n	80027ac <HAL_RCC_OscConfig+0x2f0>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d160      	bne.n	80027ac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e2c4      	b.n	8002c78 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026f6:	d106      	bne.n	8002706 <HAL_RCC_OscConfig+0x24a>
 80026f8:	4b16      	ldr	r3, [pc, #88]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a15      	ldr	r2, [pc, #84]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 80026fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002702:	6013      	str	r3, [r2, #0]
 8002704:	e01d      	b.n	8002742 <HAL_RCC_OscConfig+0x286>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800270e:	d10c      	bne.n	800272a <HAL_RCC_OscConfig+0x26e>
 8002710:	4b10      	ldr	r3, [pc, #64]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a0f      	ldr	r2, [pc, #60]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 8002716:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800271a:	6013      	str	r3, [r2, #0]
 800271c:	4b0d      	ldr	r3, [pc, #52]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a0c      	ldr	r2, [pc, #48]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 8002722:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002726:	6013      	str	r3, [r2, #0]
 8002728:	e00b      	b.n	8002742 <HAL_RCC_OscConfig+0x286>
 800272a:	4b0a      	ldr	r3, [pc, #40]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a09      	ldr	r2, [pc, #36]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 8002730:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002734:	6013      	str	r3, [r2, #0]
 8002736:	4b07      	ldr	r3, [pc, #28]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a06      	ldr	r2, [pc, #24]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 800273c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002740:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d01c      	beq.n	8002784 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800274a:	f7fe fbb9 	bl	8000ec0 <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002750:	e011      	b.n	8002776 <HAL_RCC_OscConfig+0x2ba>
 8002752:	bf00      	nop
 8002754:	40021000 	.word	0x40021000
 8002758:	0800575c 	.word	0x0800575c
 800275c:	20000000 	.word	0x20000000
 8002760:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002764:	f7fe fbac 	bl	8000ec0 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b64      	cmp	r3, #100	; 0x64
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e280      	b.n	8002c78 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002776:	4baf      	ldr	r3, [pc, #700]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d0f0      	beq.n	8002764 <HAL_RCC_OscConfig+0x2a8>
 8002782:	e014      	b.n	80027ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002784:	f7fe fb9c 	bl	8000ec0 <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800278c:	f7fe fb98 	bl	8000ec0 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b64      	cmp	r3, #100	; 0x64
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e26c      	b.n	8002c78 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800279e:	4ba5      	ldr	r3, [pc, #660]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1f0      	bne.n	800278c <HAL_RCC_OscConfig+0x2d0>
 80027aa:	e000      	b.n	80027ae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d060      	beq.n	800287c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	2b04      	cmp	r3, #4
 80027be:	d005      	beq.n	80027cc <HAL_RCC_OscConfig+0x310>
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	2b0c      	cmp	r3, #12
 80027c4:	d119      	bne.n	80027fa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d116      	bne.n	80027fa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027cc:	4b99      	ldr	r3, [pc, #612]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d005      	beq.n	80027e4 <HAL_RCC_OscConfig+0x328>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d101      	bne.n	80027e4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e249      	b.n	8002c78 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027e4:	4b93      	ldr	r3, [pc, #588]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	061b      	lsls	r3, r3, #24
 80027f2:	4990      	ldr	r1, [pc, #576]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027f8:	e040      	b.n	800287c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d023      	beq.n	800284a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002802:	4b8c      	ldr	r3, [pc, #560]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a8b      	ldr	r2, [pc, #556]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 8002808:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800280c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800280e:	f7fe fb57 	bl	8000ec0 <HAL_GetTick>
 8002812:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002814:	e008      	b.n	8002828 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002816:	f7fe fb53 	bl	8000ec0 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d901      	bls.n	8002828 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e227      	b.n	8002c78 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002828:	4b82      	ldr	r3, [pc, #520]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002830:	2b00      	cmp	r3, #0
 8002832:	d0f0      	beq.n	8002816 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002834:	4b7f      	ldr	r3, [pc, #508]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	061b      	lsls	r3, r3, #24
 8002842:	497c      	ldr	r1, [pc, #496]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 8002844:	4313      	orrs	r3, r2
 8002846:	604b      	str	r3, [r1, #4]
 8002848:	e018      	b.n	800287c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800284a:	4b7a      	ldr	r3, [pc, #488]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a79      	ldr	r2, [pc, #484]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 8002850:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002854:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002856:	f7fe fb33 	bl	8000ec0 <HAL_GetTick>
 800285a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800285c:	e008      	b.n	8002870 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800285e:	f7fe fb2f 	bl	8000ec0 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d901      	bls.n	8002870 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e203      	b.n	8002c78 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002870:	4b70      	ldr	r3, [pc, #448]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002878:	2b00      	cmp	r3, #0
 800287a:	d1f0      	bne.n	800285e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0308 	and.w	r3, r3, #8
 8002884:	2b00      	cmp	r3, #0
 8002886:	d03c      	beq.n	8002902 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	695b      	ldr	r3, [r3, #20]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d01c      	beq.n	80028ca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002890:	4b68      	ldr	r3, [pc, #416]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 8002892:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002896:	4a67      	ldr	r2, [pc, #412]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 8002898:	f043 0301 	orr.w	r3, r3, #1
 800289c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a0:	f7fe fb0e 	bl	8000ec0 <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028a8:	f7fe fb0a 	bl	8000ec0 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e1de      	b.n	8002c78 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028ba:	4b5e      	ldr	r3, [pc, #376]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 80028bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d0ef      	beq.n	80028a8 <HAL_RCC_OscConfig+0x3ec>
 80028c8:	e01b      	b.n	8002902 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028ca:	4b5a      	ldr	r3, [pc, #360]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 80028cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028d0:	4a58      	ldr	r2, [pc, #352]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 80028d2:	f023 0301 	bic.w	r3, r3, #1
 80028d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028da:	f7fe faf1 	bl	8000ec0 <HAL_GetTick>
 80028de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028e0:	e008      	b.n	80028f4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028e2:	f7fe faed 	bl	8000ec0 <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d901      	bls.n	80028f4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e1c1      	b.n	8002c78 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028f4:	4b4f      	ldr	r3, [pc, #316]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 80028f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1ef      	bne.n	80028e2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0304 	and.w	r3, r3, #4
 800290a:	2b00      	cmp	r3, #0
 800290c:	f000 80a6 	beq.w	8002a5c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002910:	2300      	movs	r3, #0
 8002912:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002914:	4b47      	ldr	r3, [pc, #284]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 8002916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d10d      	bne.n	800293c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002920:	4b44      	ldr	r3, [pc, #272]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 8002922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002924:	4a43      	ldr	r2, [pc, #268]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 8002926:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800292a:	6593      	str	r3, [r2, #88]	; 0x58
 800292c:	4b41      	ldr	r3, [pc, #260]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 800292e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002934:	60bb      	str	r3, [r7, #8]
 8002936:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002938:	2301      	movs	r3, #1
 800293a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800293c:	4b3e      	ldr	r3, [pc, #248]	; (8002a38 <HAL_RCC_OscConfig+0x57c>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002944:	2b00      	cmp	r3, #0
 8002946:	d118      	bne.n	800297a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002948:	4b3b      	ldr	r3, [pc, #236]	; (8002a38 <HAL_RCC_OscConfig+0x57c>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a3a      	ldr	r2, [pc, #232]	; (8002a38 <HAL_RCC_OscConfig+0x57c>)
 800294e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002952:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002954:	f7fe fab4 	bl	8000ec0 <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800295a:	e008      	b.n	800296e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800295c:	f7fe fab0 	bl	8000ec0 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e184      	b.n	8002c78 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800296e:	4b32      	ldr	r3, [pc, #200]	; (8002a38 <HAL_RCC_OscConfig+0x57c>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002976:	2b00      	cmp	r3, #0
 8002978:	d0f0      	beq.n	800295c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d108      	bne.n	8002994 <HAL_RCC_OscConfig+0x4d8>
 8002982:	4b2c      	ldr	r3, [pc, #176]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 8002984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002988:	4a2a      	ldr	r2, [pc, #168]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 800298a:	f043 0301 	orr.w	r3, r3, #1
 800298e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002992:	e024      	b.n	80029de <HAL_RCC_OscConfig+0x522>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	2b05      	cmp	r3, #5
 800299a:	d110      	bne.n	80029be <HAL_RCC_OscConfig+0x502>
 800299c:	4b25      	ldr	r3, [pc, #148]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 800299e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a2:	4a24      	ldr	r2, [pc, #144]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 80029a4:	f043 0304 	orr.w	r3, r3, #4
 80029a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029ac:	4b21      	ldr	r3, [pc, #132]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 80029ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b2:	4a20      	ldr	r2, [pc, #128]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 80029b4:	f043 0301 	orr.w	r3, r3, #1
 80029b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029bc:	e00f      	b.n	80029de <HAL_RCC_OscConfig+0x522>
 80029be:	4b1d      	ldr	r3, [pc, #116]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 80029c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c4:	4a1b      	ldr	r2, [pc, #108]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 80029c6:	f023 0301 	bic.w	r3, r3, #1
 80029ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029ce:	4b19      	ldr	r3, [pc, #100]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 80029d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d4:	4a17      	ldr	r2, [pc, #92]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 80029d6:	f023 0304 	bic.w	r3, r3, #4
 80029da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d016      	beq.n	8002a14 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e6:	f7fe fa6b 	bl	8000ec0 <HAL_GetTick>
 80029ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029ec:	e00a      	b.n	8002a04 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ee:	f7fe fa67 	bl	8000ec0 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d901      	bls.n	8002a04 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e139      	b.n	8002c78 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a04:	4b0b      	ldr	r3, [pc, #44]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 8002a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d0ed      	beq.n	80029ee <HAL_RCC_OscConfig+0x532>
 8002a12:	e01a      	b.n	8002a4a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a14:	f7fe fa54 	bl	8000ec0 <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a1a:	e00f      	b.n	8002a3c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a1c:	f7fe fa50 	bl	8000ec0 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d906      	bls.n	8002a3c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e122      	b.n	8002c78 <HAL_RCC_OscConfig+0x7bc>
 8002a32:	bf00      	nop
 8002a34:	40021000 	.word	0x40021000
 8002a38:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a3c:	4b90      	ldr	r3, [pc, #576]	; (8002c80 <HAL_RCC_OscConfig+0x7c4>)
 8002a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1e8      	bne.n	8002a1c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a4a:	7ffb      	ldrb	r3, [r7, #31]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d105      	bne.n	8002a5c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a50:	4b8b      	ldr	r3, [pc, #556]	; (8002c80 <HAL_RCC_OscConfig+0x7c4>)
 8002a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a54:	4a8a      	ldr	r2, [pc, #552]	; (8002c80 <HAL_RCC_OscConfig+0x7c4>)
 8002a56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a5a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f000 8108 	beq.w	8002c76 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	f040 80d0 	bne.w	8002c10 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002a70:	4b83      	ldr	r3, [pc, #524]	; (8002c80 <HAL_RCC_OscConfig+0x7c4>)
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	f003 0203 	and.w	r2, r3, #3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d130      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d127      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aa0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d11f      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ab0:	2a07      	cmp	r2, #7
 8002ab2:	bf14      	ite	ne
 8002ab4:	2201      	movne	r2, #1
 8002ab6:	2200      	moveq	r2, #0
 8002ab8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d113      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ac8:	085b      	lsrs	r3, r3, #1
 8002aca:	3b01      	subs	r3, #1
 8002acc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d109      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002adc:	085b      	lsrs	r3, r3, #1
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d06e      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	2b0c      	cmp	r3, #12
 8002aea:	d069      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002aec:	4b64      	ldr	r3, [pc, #400]	; (8002c80 <HAL_RCC_OscConfig+0x7c4>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d105      	bne.n	8002b04 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002af8:	4b61      	ldr	r3, [pc, #388]	; (8002c80 <HAL_RCC_OscConfig+0x7c4>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e0b7      	b.n	8002c78 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b08:	4b5d      	ldr	r3, [pc, #372]	; (8002c80 <HAL_RCC_OscConfig+0x7c4>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a5c      	ldr	r2, [pc, #368]	; (8002c80 <HAL_RCC_OscConfig+0x7c4>)
 8002b0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b12:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b14:	f7fe f9d4 	bl	8000ec0 <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b1c:	f7fe f9d0 	bl	8000ec0 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e0a4      	b.n	8002c78 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b2e:	4b54      	ldr	r3, [pc, #336]	; (8002c80 <HAL_RCC_OscConfig+0x7c4>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1f0      	bne.n	8002b1c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b3a:	4b51      	ldr	r3, [pc, #324]	; (8002c80 <HAL_RCC_OscConfig+0x7c4>)
 8002b3c:	68da      	ldr	r2, [r3, #12]
 8002b3e:	4b51      	ldr	r3, [pc, #324]	; (8002c84 <HAL_RCC_OscConfig+0x7c8>)
 8002b40:	4013      	ands	r3, r2
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002b4a:	3a01      	subs	r2, #1
 8002b4c:	0112      	lsls	r2, r2, #4
 8002b4e:	4311      	orrs	r1, r2
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b54:	0212      	lsls	r2, r2, #8
 8002b56:	4311      	orrs	r1, r2
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b5c:	0852      	lsrs	r2, r2, #1
 8002b5e:	3a01      	subs	r2, #1
 8002b60:	0552      	lsls	r2, r2, #21
 8002b62:	4311      	orrs	r1, r2
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b68:	0852      	lsrs	r2, r2, #1
 8002b6a:	3a01      	subs	r2, #1
 8002b6c:	0652      	lsls	r2, r2, #25
 8002b6e:	4311      	orrs	r1, r2
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b74:	0912      	lsrs	r2, r2, #4
 8002b76:	0452      	lsls	r2, r2, #17
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	4941      	ldr	r1, [pc, #260]	; (8002c80 <HAL_RCC_OscConfig+0x7c4>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b80:	4b3f      	ldr	r3, [pc, #252]	; (8002c80 <HAL_RCC_OscConfig+0x7c4>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a3e      	ldr	r2, [pc, #248]	; (8002c80 <HAL_RCC_OscConfig+0x7c4>)
 8002b86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b8a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b8c:	4b3c      	ldr	r3, [pc, #240]	; (8002c80 <HAL_RCC_OscConfig+0x7c4>)
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	4a3b      	ldr	r2, [pc, #236]	; (8002c80 <HAL_RCC_OscConfig+0x7c4>)
 8002b92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b96:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b98:	f7fe f992 	bl	8000ec0 <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ba0:	f7fe f98e 	bl	8000ec0 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e062      	b.n	8002c78 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bb2:	4b33      	ldr	r3, [pc, #204]	; (8002c80 <HAL_RCC_OscConfig+0x7c4>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d0f0      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bbe:	e05a      	b.n	8002c76 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e059      	b.n	8002c78 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bc4:	4b2e      	ldr	r3, [pc, #184]	; (8002c80 <HAL_RCC_OscConfig+0x7c4>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d152      	bne.n	8002c76 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002bd0:	4b2b      	ldr	r3, [pc, #172]	; (8002c80 <HAL_RCC_OscConfig+0x7c4>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a2a      	ldr	r2, [pc, #168]	; (8002c80 <HAL_RCC_OscConfig+0x7c4>)
 8002bd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bda:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bdc:	4b28      	ldr	r3, [pc, #160]	; (8002c80 <HAL_RCC_OscConfig+0x7c4>)
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	4a27      	ldr	r2, [pc, #156]	; (8002c80 <HAL_RCC_OscConfig+0x7c4>)
 8002be2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002be6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002be8:	f7fe f96a 	bl	8000ec0 <HAL_GetTick>
 8002bec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bf0:	f7fe f966 	bl	8000ec0 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e03a      	b.n	8002c78 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c02:	4b1f      	ldr	r3, [pc, #124]	; (8002c80 <HAL_RCC_OscConfig+0x7c4>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d0f0      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x734>
 8002c0e:	e032      	b.n	8002c76 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	2b0c      	cmp	r3, #12
 8002c14:	d02d      	beq.n	8002c72 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c16:	4b1a      	ldr	r3, [pc, #104]	; (8002c80 <HAL_RCC_OscConfig+0x7c4>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a19      	ldr	r2, [pc, #100]	; (8002c80 <HAL_RCC_OscConfig+0x7c4>)
 8002c1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c20:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002c22:	4b17      	ldr	r3, [pc, #92]	; (8002c80 <HAL_RCC_OscConfig+0x7c4>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d105      	bne.n	8002c3a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002c2e:	4b14      	ldr	r3, [pc, #80]	; (8002c80 <HAL_RCC_OscConfig+0x7c4>)
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	4a13      	ldr	r2, [pc, #76]	; (8002c80 <HAL_RCC_OscConfig+0x7c4>)
 8002c34:	f023 0303 	bic.w	r3, r3, #3
 8002c38:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002c3a:	4b11      	ldr	r3, [pc, #68]	; (8002c80 <HAL_RCC_OscConfig+0x7c4>)
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	4a10      	ldr	r2, [pc, #64]	; (8002c80 <HAL_RCC_OscConfig+0x7c4>)
 8002c40:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002c44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c48:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c4a:	f7fe f939 	bl	8000ec0 <HAL_GetTick>
 8002c4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c50:	e008      	b.n	8002c64 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c52:	f7fe f935 	bl	8000ec0 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e009      	b.n	8002c78 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c64:	4b06      	ldr	r3, [pc, #24]	; (8002c80 <HAL_RCC_OscConfig+0x7c4>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d1f0      	bne.n	8002c52 <HAL_RCC_OscConfig+0x796>
 8002c70:	e001      	b.n	8002c76 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e000      	b.n	8002c78 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3720      	adds	r7, #32
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	40021000 	.word	0x40021000
 8002c84:	f99d808c 	.word	0xf99d808c

08002c88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d101      	bne.n	8002c9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e0c8      	b.n	8002e2e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c9c:	4b66      	ldr	r3, [pc, #408]	; (8002e38 <HAL_RCC_ClockConfig+0x1b0>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0307 	and.w	r3, r3, #7
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d910      	bls.n	8002ccc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002caa:	4b63      	ldr	r3, [pc, #396]	; (8002e38 <HAL_RCC_ClockConfig+0x1b0>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f023 0207 	bic.w	r2, r3, #7
 8002cb2:	4961      	ldr	r1, [pc, #388]	; (8002e38 <HAL_RCC_ClockConfig+0x1b0>)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cba:	4b5f      	ldr	r3, [pc, #380]	; (8002e38 <HAL_RCC_ClockConfig+0x1b0>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0307 	and.w	r3, r3, #7
 8002cc2:	683a      	ldr	r2, [r7, #0]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d001      	beq.n	8002ccc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e0b0      	b.n	8002e2e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0301 	and.w	r3, r3, #1
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d04c      	beq.n	8002d72 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	2b03      	cmp	r3, #3
 8002cde:	d107      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ce0:	4b56      	ldr	r3, [pc, #344]	; (8002e3c <HAL_RCC_ClockConfig+0x1b4>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d121      	bne.n	8002d30 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e09e      	b.n	8002e2e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d107      	bne.n	8002d08 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cf8:	4b50      	ldr	r3, [pc, #320]	; (8002e3c <HAL_RCC_ClockConfig+0x1b4>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d115      	bne.n	8002d30 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e092      	b.n	8002e2e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d107      	bne.n	8002d20 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d10:	4b4a      	ldr	r3, [pc, #296]	; (8002e3c <HAL_RCC_ClockConfig+0x1b4>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d109      	bne.n	8002d30 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e086      	b.n	8002e2e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d20:	4b46      	ldr	r3, [pc, #280]	; (8002e3c <HAL_RCC_ClockConfig+0x1b4>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d101      	bne.n	8002d30 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e07e      	b.n	8002e2e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d30:	4b42      	ldr	r3, [pc, #264]	; (8002e3c <HAL_RCC_ClockConfig+0x1b4>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f023 0203 	bic.w	r2, r3, #3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	493f      	ldr	r1, [pc, #252]	; (8002e3c <HAL_RCC_ClockConfig+0x1b4>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d42:	f7fe f8bd 	bl	8000ec0 <HAL_GetTick>
 8002d46:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d48:	e00a      	b.n	8002d60 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d4a:	f7fe f8b9 	bl	8000ec0 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e066      	b.n	8002e2e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d60:	4b36      	ldr	r3, [pc, #216]	; (8002e3c <HAL_RCC_ClockConfig+0x1b4>)
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f003 020c 	and.w	r2, r3, #12
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d1eb      	bne.n	8002d4a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d008      	beq.n	8002d90 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d7e:	4b2f      	ldr	r3, [pc, #188]	; (8002e3c <HAL_RCC_ClockConfig+0x1b4>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	492c      	ldr	r1, [pc, #176]	; (8002e3c <HAL_RCC_ClockConfig+0x1b4>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d90:	4b29      	ldr	r3, [pc, #164]	; (8002e38 <HAL_RCC_ClockConfig+0x1b0>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0307 	and.w	r3, r3, #7
 8002d98:	683a      	ldr	r2, [r7, #0]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d210      	bcs.n	8002dc0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d9e:	4b26      	ldr	r3, [pc, #152]	; (8002e38 <HAL_RCC_ClockConfig+0x1b0>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f023 0207 	bic.w	r2, r3, #7
 8002da6:	4924      	ldr	r1, [pc, #144]	; (8002e38 <HAL_RCC_ClockConfig+0x1b0>)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dae:	4b22      	ldr	r3, [pc, #136]	; (8002e38 <HAL_RCC_ClockConfig+0x1b0>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0307 	and.w	r3, r3, #7
 8002db6:	683a      	ldr	r2, [r7, #0]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d001      	beq.n	8002dc0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e036      	b.n	8002e2e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0304 	and.w	r3, r3, #4
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d008      	beq.n	8002dde <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dcc:	4b1b      	ldr	r3, [pc, #108]	; (8002e3c <HAL_RCC_ClockConfig+0x1b4>)
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	4918      	ldr	r1, [pc, #96]	; (8002e3c <HAL_RCC_ClockConfig+0x1b4>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0308 	and.w	r3, r3, #8
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d009      	beq.n	8002dfe <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dea:	4b14      	ldr	r3, [pc, #80]	; (8002e3c <HAL_RCC_ClockConfig+0x1b4>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	4910      	ldr	r1, [pc, #64]	; (8002e3c <HAL_RCC_ClockConfig+0x1b4>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002dfe:	f000 f825 	bl	8002e4c <HAL_RCC_GetSysClockFreq>
 8002e02:	4602      	mov	r2, r0
 8002e04:	4b0d      	ldr	r3, [pc, #52]	; (8002e3c <HAL_RCC_ClockConfig+0x1b4>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	091b      	lsrs	r3, r3, #4
 8002e0a:	f003 030f 	and.w	r3, r3, #15
 8002e0e:	490c      	ldr	r1, [pc, #48]	; (8002e40 <HAL_RCC_ClockConfig+0x1b8>)
 8002e10:	5ccb      	ldrb	r3, [r1, r3]
 8002e12:	f003 031f 	and.w	r3, r3, #31
 8002e16:	fa22 f303 	lsr.w	r3, r2, r3
 8002e1a:	4a0a      	ldr	r2, [pc, #40]	; (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e1e:	4b0a      	ldr	r3, [pc, #40]	; (8002e48 <HAL_RCC_ClockConfig+0x1c0>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7fd fffc 	bl	8000e20 <HAL_InitTick>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	72fb      	strb	r3, [r7, #11]

  return status;
 8002e2c:	7afb      	ldrb	r3, [r7, #11]
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3710      	adds	r7, #16
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	40022000 	.word	0x40022000
 8002e3c:	40021000 	.word	0x40021000
 8002e40:	0800575c 	.word	0x0800575c
 8002e44:	20000000 	.word	0x20000000
 8002e48:	20000004 	.word	0x20000004

08002e4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b089      	sub	sp, #36	; 0x24
 8002e50:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e52:	2300      	movs	r3, #0
 8002e54:	61fb      	str	r3, [r7, #28]
 8002e56:	2300      	movs	r3, #0
 8002e58:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e5a:	4b3e      	ldr	r3, [pc, #248]	; (8002f54 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f003 030c 	and.w	r3, r3, #12
 8002e62:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e64:	4b3b      	ldr	r3, [pc, #236]	; (8002f54 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	f003 0303 	and.w	r3, r3, #3
 8002e6c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d005      	beq.n	8002e80 <HAL_RCC_GetSysClockFreq+0x34>
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	2b0c      	cmp	r3, #12
 8002e78:	d121      	bne.n	8002ebe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d11e      	bne.n	8002ebe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e80:	4b34      	ldr	r3, [pc, #208]	; (8002f54 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0308 	and.w	r3, r3, #8
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d107      	bne.n	8002e9c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e8c:	4b31      	ldr	r3, [pc, #196]	; (8002f54 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e92:	0a1b      	lsrs	r3, r3, #8
 8002e94:	f003 030f 	and.w	r3, r3, #15
 8002e98:	61fb      	str	r3, [r7, #28]
 8002e9a:	e005      	b.n	8002ea8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e9c:	4b2d      	ldr	r3, [pc, #180]	; (8002f54 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	091b      	lsrs	r3, r3, #4
 8002ea2:	f003 030f 	and.w	r3, r3, #15
 8002ea6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ea8:	4a2b      	ldr	r2, [pc, #172]	; (8002f58 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eb0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d10d      	bne.n	8002ed4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ebc:	e00a      	b.n	8002ed4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	2b04      	cmp	r3, #4
 8002ec2:	d102      	bne.n	8002eca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ec4:	4b25      	ldr	r3, [pc, #148]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x110>)
 8002ec6:	61bb      	str	r3, [r7, #24]
 8002ec8:	e004      	b.n	8002ed4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	2b08      	cmp	r3, #8
 8002ece:	d101      	bne.n	8002ed4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ed0:	4b23      	ldr	r3, [pc, #140]	; (8002f60 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ed2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	2b0c      	cmp	r3, #12
 8002ed8:	d134      	bne.n	8002f44 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002eda:	4b1e      	ldr	r3, [pc, #120]	; (8002f54 <HAL_RCC_GetSysClockFreq+0x108>)
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	f003 0303 	and.w	r3, r3, #3
 8002ee2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d003      	beq.n	8002ef2 <HAL_RCC_GetSysClockFreq+0xa6>
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	2b03      	cmp	r3, #3
 8002eee:	d003      	beq.n	8002ef8 <HAL_RCC_GetSysClockFreq+0xac>
 8002ef0:	e005      	b.n	8002efe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002ef2:	4b1a      	ldr	r3, [pc, #104]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x110>)
 8002ef4:	617b      	str	r3, [r7, #20]
      break;
 8002ef6:	e005      	b.n	8002f04 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ef8:	4b19      	ldr	r3, [pc, #100]	; (8002f60 <HAL_RCC_GetSysClockFreq+0x114>)
 8002efa:	617b      	str	r3, [r7, #20]
      break;
 8002efc:	e002      	b.n	8002f04 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	617b      	str	r3, [r7, #20]
      break;
 8002f02:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f04:	4b13      	ldr	r3, [pc, #76]	; (8002f54 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	091b      	lsrs	r3, r3, #4
 8002f0a:	f003 0307 	and.w	r3, r3, #7
 8002f0e:	3301      	adds	r3, #1
 8002f10:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f12:	4b10      	ldr	r3, [pc, #64]	; (8002f54 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	0a1b      	lsrs	r3, r3, #8
 8002f18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f1c:	697a      	ldr	r2, [r7, #20]
 8002f1e:	fb02 f203 	mul.w	r2, r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f28:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f2a:	4b0a      	ldr	r3, [pc, #40]	; (8002f54 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	0e5b      	lsrs	r3, r3, #25
 8002f30:	f003 0303 	and.w	r3, r3, #3
 8002f34:	3301      	adds	r3, #1
 8002f36:	005b      	lsls	r3, r3, #1
 8002f38:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002f3a:	697a      	ldr	r2, [r7, #20]
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f42:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002f44:	69bb      	ldr	r3, [r7, #24]
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3724      	adds	r7, #36	; 0x24
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	40021000 	.word	0x40021000
 8002f58:	08005774 	.word	0x08005774
 8002f5c:	00f42400 	.word	0x00f42400
 8002f60:	007a1200 	.word	0x007a1200

08002f64 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f68:	4b03      	ldr	r3, [pc, #12]	; (8002f78 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	20000000 	.word	0x20000000

08002f7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002f80:	f7ff fff0 	bl	8002f64 <HAL_RCC_GetHCLKFreq>
 8002f84:	4602      	mov	r2, r0
 8002f86:	4b06      	ldr	r3, [pc, #24]	; (8002fa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	0a1b      	lsrs	r3, r3, #8
 8002f8c:	f003 0307 	and.w	r3, r3, #7
 8002f90:	4904      	ldr	r1, [pc, #16]	; (8002fa4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f92:	5ccb      	ldrb	r3, [r1, r3]
 8002f94:	f003 031f 	and.w	r3, r3, #31
 8002f98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	0800576c 	.word	0x0800576c

08002fa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002fac:	f7ff ffda 	bl	8002f64 <HAL_RCC_GetHCLKFreq>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	4b06      	ldr	r3, [pc, #24]	; (8002fcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	0adb      	lsrs	r3, r3, #11
 8002fb8:	f003 0307 	and.w	r3, r3, #7
 8002fbc:	4904      	ldr	r1, [pc, #16]	; (8002fd0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002fbe:	5ccb      	ldrb	r3, [r1, r3]
 8002fc0:	f003 031f 	and.w	r3, r3, #31
 8002fc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	40021000 	.word	0x40021000
 8002fd0:	0800576c 	.word	0x0800576c

08002fd4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b086      	sub	sp, #24
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002fdc:	2300      	movs	r3, #0
 8002fde:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002fe0:	4b2a      	ldr	r3, [pc, #168]	; (800308c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d003      	beq.n	8002ff4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002fec:	f7ff fa02 	bl	80023f4 <HAL_PWREx_GetVoltageRange>
 8002ff0:	6178      	str	r0, [r7, #20]
 8002ff2:	e014      	b.n	800301e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ff4:	4b25      	ldr	r3, [pc, #148]	; (800308c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff8:	4a24      	ldr	r2, [pc, #144]	; (800308c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ffa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ffe:	6593      	str	r3, [r2, #88]	; 0x58
 8003000:	4b22      	ldr	r3, [pc, #136]	; (800308c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003008:	60fb      	str	r3, [r7, #12]
 800300a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800300c:	f7ff f9f2 	bl	80023f4 <HAL_PWREx_GetVoltageRange>
 8003010:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003012:	4b1e      	ldr	r3, [pc, #120]	; (800308c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003016:	4a1d      	ldr	r2, [pc, #116]	; (800308c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003018:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800301c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003024:	d10b      	bne.n	800303e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2b80      	cmp	r3, #128	; 0x80
 800302a:	d919      	bls.n	8003060 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2ba0      	cmp	r3, #160	; 0xa0
 8003030:	d902      	bls.n	8003038 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003032:	2302      	movs	r3, #2
 8003034:	613b      	str	r3, [r7, #16]
 8003036:	e013      	b.n	8003060 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003038:	2301      	movs	r3, #1
 800303a:	613b      	str	r3, [r7, #16]
 800303c:	e010      	b.n	8003060 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2b80      	cmp	r3, #128	; 0x80
 8003042:	d902      	bls.n	800304a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003044:	2303      	movs	r3, #3
 8003046:	613b      	str	r3, [r7, #16]
 8003048:	e00a      	b.n	8003060 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2b80      	cmp	r3, #128	; 0x80
 800304e:	d102      	bne.n	8003056 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003050:	2302      	movs	r3, #2
 8003052:	613b      	str	r3, [r7, #16]
 8003054:	e004      	b.n	8003060 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2b70      	cmp	r3, #112	; 0x70
 800305a:	d101      	bne.n	8003060 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800305c:	2301      	movs	r3, #1
 800305e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003060:	4b0b      	ldr	r3, [pc, #44]	; (8003090 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f023 0207 	bic.w	r2, r3, #7
 8003068:	4909      	ldr	r1, [pc, #36]	; (8003090 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	4313      	orrs	r3, r2
 800306e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003070:	4b07      	ldr	r3, [pc, #28]	; (8003090 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0307 	and.w	r3, r3, #7
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	429a      	cmp	r2, r3
 800307c:	d001      	beq.n	8003082 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e000      	b.n	8003084 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	3718      	adds	r7, #24
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	40021000 	.word	0x40021000
 8003090:	40022000 	.word	0x40022000

08003094 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b086      	sub	sp, #24
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800309c:	2300      	movs	r3, #0
 800309e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030a0:	2300      	movs	r3, #0
 80030a2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d041      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030b4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80030b8:	d02a      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80030ba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80030be:	d824      	bhi.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80030c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030c4:	d008      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80030c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030ca:	d81e      	bhi.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d00a      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80030d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030d4:	d010      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80030d6:	e018      	b.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80030d8:	4b86      	ldr	r3, [pc, #536]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	4a85      	ldr	r2, [pc, #532]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030e2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030e4:	e015      	b.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	3304      	adds	r3, #4
 80030ea:	2100      	movs	r1, #0
 80030ec:	4618      	mov	r0, r3
 80030ee:	f000 fabb 	bl	8003668 <RCCEx_PLLSAI1_Config>
 80030f2:	4603      	mov	r3, r0
 80030f4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030f6:	e00c      	b.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	3320      	adds	r3, #32
 80030fc:	2100      	movs	r1, #0
 80030fe:	4618      	mov	r0, r3
 8003100:	f000 fba6 	bl	8003850 <RCCEx_PLLSAI2_Config>
 8003104:	4603      	mov	r3, r0
 8003106:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003108:	e003      	b.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	74fb      	strb	r3, [r7, #19]
      break;
 800310e:	e000      	b.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003110:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003112:	7cfb      	ldrb	r3, [r7, #19]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d10b      	bne.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003118:	4b76      	ldr	r3, [pc, #472]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800311a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800311e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003126:	4973      	ldr	r1, [pc, #460]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003128:	4313      	orrs	r3, r2
 800312a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800312e:	e001      	b.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003130:	7cfb      	ldrb	r3, [r7, #19]
 8003132:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d041      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003144:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003148:	d02a      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800314a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800314e:	d824      	bhi.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003150:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003154:	d008      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003156:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800315a:	d81e      	bhi.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800315c:	2b00      	cmp	r3, #0
 800315e:	d00a      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003160:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003164:	d010      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003166:	e018      	b.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003168:	4b62      	ldr	r3, [pc, #392]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	4a61      	ldr	r2, [pc, #388]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800316e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003172:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003174:	e015      	b.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	3304      	adds	r3, #4
 800317a:	2100      	movs	r1, #0
 800317c:	4618      	mov	r0, r3
 800317e:	f000 fa73 	bl	8003668 <RCCEx_PLLSAI1_Config>
 8003182:	4603      	mov	r3, r0
 8003184:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003186:	e00c      	b.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	3320      	adds	r3, #32
 800318c:	2100      	movs	r1, #0
 800318e:	4618      	mov	r0, r3
 8003190:	f000 fb5e 	bl	8003850 <RCCEx_PLLSAI2_Config>
 8003194:	4603      	mov	r3, r0
 8003196:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003198:	e003      	b.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	74fb      	strb	r3, [r7, #19]
      break;
 800319e:	e000      	b.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80031a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031a2:	7cfb      	ldrb	r3, [r7, #19]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d10b      	bne.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80031a8:	4b52      	ldr	r3, [pc, #328]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ae:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031b6:	494f      	ldr	r1, [pc, #316]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80031be:	e001      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031c0:	7cfb      	ldrb	r3, [r7, #19]
 80031c2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f000 80a0 	beq.w	8003312 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031d2:	2300      	movs	r3, #0
 80031d4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80031d6:	4b47      	ldr	r3, [pc, #284]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80031e2:	2301      	movs	r3, #1
 80031e4:	e000      	b.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80031e6:	2300      	movs	r3, #0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d00d      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031ec:	4b41      	ldr	r3, [pc, #260]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f0:	4a40      	ldr	r2, [pc, #256]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031f6:	6593      	str	r3, [r2, #88]	; 0x58
 80031f8:	4b3e      	ldr	r3, [pc, #248]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003200:	60bb      	str	r3, [r7, #8]
 8003202:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003204:	2301      	movs	r3, #1
 8003206:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003208:	4b3b      	ldr	r3, [pc, #236]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a3a      	ldr	r2, [pc, #232]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800320e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003212:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003214:	f7fd fe54 	bl	8000ec0 <HAL_GetTick>
 8003218:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800321a:	e009      	b.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800321c:	f7fd fe50 	bl	8000ec0 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d902      	bls.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	74fb      	strb	r3, [r7, #19]
        break;
 800322e:	e005      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003230:	4b31      	ldr	r3, [pc, #196]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003238:	2b00      	cmp	r3, #0
 800323a:	d0ef      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800323c:	7cfb      	ldrb	r3, [r7, #19]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d15c      	bne.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003242:	4b2c      	ldr	r3, [pc, #176]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003248:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800324c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d01f      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800325a:	697a      	ldr	r2, [r7, #20]
 800325c:	429a      	cmp	r2, r3
 800325e:	d019      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003260:	4b24      	ldr	r3, [pc, #144]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003266:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800326a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800326c:	4b21      	ldr	r3, [pc, #132]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800326e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003272:	4a20      	ldr	r2, [pc, #128]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003278:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800327c:	4b1d      	ldr	r3, [pc, #116]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800327e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003282:	4a1c      	ldr	r2, [pc, #112]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003284:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003288:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800328c:	4a19      	ldr	r2, [pc, #100]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	2b00      	cmp	r3, #0
 800329c:	d016      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800329e:	f7fd fe0f 	bl	8000ec0 <HAL_GetTick>
 80032a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032a4:	e00b      	b.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032a6:	f7fd fe0b 	bl	8000ec0 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d902      	bls.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	74fb      	strb	r3, [r7, #19]
            break;
 80032bc:	e006      	b.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032be:	4b0d      	ldr	r3, [pc, #52]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d0ec      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80032cc:	7cfb      	ldrb	r3, [r7, #19]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d10c      	bne.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032d2:	4b08      	ldr	r3, [pc, #32]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032e2:	4904      	ldr	r1, [pc, #16]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80032ea:	e009      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80032ec:	7cfb      	ldrb	r3, [r7, #19]
 80032ee:	74bb      	strb	r3, [r7, #18]
 80032f0:	e006      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80032f2:	bf00      	nop
 80032f4:	40021000 	.word	0x40021000
 80032f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032fc:	7cfb      	ldrb	r3, [r7, #19]
 80032fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003300:	7c7b      	ldrb	r3, [r7, #17]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d105      	bne.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003306:	4b9e      	ldr	r3, [pc, #632]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800330a:	4a9d      	ldr	r2, [pc, #628]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800330c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003310:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00a      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800331e:	4b98      	ldr	r3, [pc, #608]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003324:	f023 0203 	bic.w	r2, r3, #3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800332c:	4994      	ldr	r1, [pc, #592]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800332e:	4313      	orrs	r3, r2
 8003330:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00a      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003340:	4b8f      	ldr	r3, [pc, #572]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003346:	f023 020c 	bic.w	r2, r3, #12
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800334e:	498c      	ldr	r1, [pc, #560]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003350:	4313      	orrs	r3, r2
 8003352:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0304 	and.w	r3, r3, #4
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00a      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003362:	4b87      	ldr	r3, [pc, #540]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003368:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003370:	4983      	ldr	r1, [pc, #524]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003372:	4313      	orrs	r3, r2
 8003374:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0308 	and.w	r3, r3, #8
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00a      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003384:	4b7e      	ldr	r3, [pc, #504]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003392:	497b      	ldr	r1, [pc, #492]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003394:	4313      	orrs	r3, r2
 8003396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0310 	and.w	r3, r3, #16
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00a      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80033a6:	4b76      	ldr	r3, [pc, #472]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033b4:	4972      	ldr	r1, [pc, #456]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0320 	and.w	r3, r3, #32
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00a      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033c8:	4b6d      	ldr	r3, [pc, #436]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033d6:	496a      	ldr	r1, [pc, #424]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00a      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033ea:	4b65      	ldr	r3, [pc, #404]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f8:	4961      	ldr	r1, [pc, #388]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00a      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800340c:	4b5c      	ldr	r3, [pc, #368]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800340e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003412:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800341a:	4959      	ldr	r1, [pc, #356]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800341c:	4313      	orrs	r3, r2
 800341e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00a      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800342e:	4b54      	ldr	r3, [pc, #336]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003434:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800343c:	4950      	ldr	r1, [pc, #320]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800343e:	4313      	orrs	r3, r2
 8003440:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00a      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003450:	4b4b      	ldr	r3, [pc, #300]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003456:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800345e:	4948      	ldr	r1, [pc, #288]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003460:	4313      	orrs	r3, r2
 8003462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00a      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003472:	4b43      	ldr	r3, [pc, #268]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003478:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003480:	493f      	ldr	r1, [pc, #252]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003482:	4313      	orrs	r3, r2
 8003484:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d028      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003494:	4b3a      	ldr	r3, [pc, #232]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800349a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034a2:	4937      	ldr	r1, [pc, #220]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034b2:	d106      	bne.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034b4:	4b32      	ldr	r3, [pc, #200]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	4a31      	ldr	r2, [pc, #196]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034be:	60d3      	str	r3, [r2, #12]
 80034c0:	e011      	b.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034ca:	d10c      	bne.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	3304      	adds	r3, #4
 80034d0:	2101      	movs	r1, #1
 80034d2:	4618      	mov	r0, r3
 80034d4:	f000 f8c8 	bl	8003668 <RCCEx_PLLSAI1_Config>
 80034d8:	4603      	mov	r3, r0
 80034da:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80034dc:	7cfb      	ldrb	r3, [r7, #19]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d001      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80034e2:	7cfb      	ldrb	r3, [r7, #19]
 80034e4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d028      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80034f2:	4b23      	ldr	r3, [pc, #140]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003500:	491f      	ldr	r1, [pc, #124]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003502:	4313      	orrs	r3, r2
 8003504:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003510:	d106      	bne.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003512:	4b1b      	ldr	r3, [pc, #108]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	4a1a      	ldr	r2, [pc, #104]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003518:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800351c:	60d3      	str	r3, [r2, #12]
 800351e:	e011      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003524:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003528:	d10c      	bne.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	3304      	adds	r3, #4
 800352e:	2101      	movs	r1, #1
 8003530:	4618      	mov	r0, r3
 8003532:	f000 f899 	bl	8003668 <RCCEx_PLLSAI1_Config>
 8003536:	4603      	mov	r3, r0
 8003538:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800353a:	7cfb      	ldrb	r3, [r7, #19]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d001      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003540:	7cfb      	ldrb	r3, [r7, #19]
 8003542:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d02b      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003550:	4b0b      	ldr	r3, [pc, #44]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003556:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800355e:	4908      	ldr	r1, [pc, #32]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003560:	4313      	orrs	r3, r2
 8003562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800356a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800356e:	d109      	bne.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003570:	4b03      	ldr	r3, [pc, #12]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	4a02      	ldr	r2, [pc, #8]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003576:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800357a:	60d3      	str	r3, [r2, #12]
 800357c:	e014      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800357e:	bf00      	nop
 8003580:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003588:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800358c:	d10c      	bne.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	3304      	adds	r3, #4
 8003592:	2101      	movs	r1, #1
 8003594:	4618      	mov	r0, r3
 8003596:	f000 f867 	bl	8003668 <RCCEx_PLLSAI1_Config>
 800359a:	4603      	mov	r3, r0
 800359c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800359e:	7cfb      	ldrb	r3, [r7, #19]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d001      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80035a4:	7cfb      	ldrb	r3, [r7, #19]
 80035a6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d02f      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035b4:	4b2b      	ldr	r3, [pc, #172]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035c2:	4928      	ldr	r1, [pc, #160]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035d2:	d10d      	bne.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	3304      	adds	r3, #4
 80035d8:	2102      	movs	r1, #2
 80035da:	4618      	mov	r0, r3
 80035dc:	f000 f844 	bl	8003668 <RCCEx_PLLSAI1_Config>
 80035e0:	4603      	mov	r3, r0
 80035e2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035e4:	7cfb      	ldrb	r3, [r7, #19]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d014      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80035ea:	7cfb      	ldrb	r3, [r7, #19]
 80035ec:	74bb      	strb	r3, [r7, #18]
 80035ee:	e011      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035f8:	d10c      	bne.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	3320      	adds	r3, #32
 80035fe:	2102      	movs	r1, #2
 8003600:	4618      	mov	r0, r3
 8003602:	f000 f925 	bl	8003850 <RCCEx_PLLSAI2_Config>
 8003606:	4603      	mov	r3, r0
 8003608:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800360a:	7cfb      	ldrb	r3, [r7, #19]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003610:	7cfb      	ldrb	r3, [r7, #19]
 8003612:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00a      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003620:	4b10      	ldr	r3, [pc, #64]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003626:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800362e:	490d      	ldr	r1, [pc, #52]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003630:	4313      	orrs	r3, r2
 8003632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00b      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003642:	4b08      	ldr	r3, [pc, #32]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003648:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003652:	4904      	ldr	r1, [pc, #16]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003654:	4313      	orrs	r3, r2
 8003656:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800365a:	7cbb      	ldrb	r3, [r7, #18]
}
 800365c:	4618      	mov	r0, r3
 800365e:	3718      	adds	r7, #24
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	40021000 	.word	0x40021000

08003668 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003672:	2300      	movs	r3, #0
 8003674:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003676:	4b75      	ldr	r3, [pc, #468]	; (800384c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	f003 0303 	and.w	r3, r3, #3
 800367e:	2b00      	cmp	r3, #0
 8003680:	d018      	beq.n	80036b4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003682:	4b72      	ldr	r3, [pc, #456]	; (800384c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	f003 0203 	and.w	r2, r3, #3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	429a      	cmp	r2, r3
 8003690:	d10d      	bne.n	80036ae <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
       ||
 8003696:	2b00      	cmp	r3, #0
 8003698:	d009      	beq.n	80036ae <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800369a:	4b6c      	ldr	r3, [pc, #432]	; (800384c <RCCEx_PLLSAI1_Config+0x1e4>)
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	091b      	lsrs	r3, r3, #4
 80036a0:	f003 0307 	and.w	r3, r3, #7
 80036a4:	1c5a      	adds	r2, r3, #1
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
       ||
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d047      	beq.n	800373e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	73fb      	strb	r3, [r7, #15]
 80036b2:	e044      	b.n	800373e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2b03      	cmp	r3, #3
 80036ba:	d018      	beq.n	80036ee <RCCEx_PLLSAI1_Config+0x86>
 80036bc:	2b03      	cmp	r3, #3
 80036be:	d825      	bhi.n	800370c <RCCEx_PLLSAI1_Config+0xa4>
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d002      	beq.n	80036ca <RCCEx_PLLSAI1_Config+0x62>
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d009      	beq.n	80036dc <RCCEx_PLLSAI1_Config+0x74>
 80036c8:	e020      	b.n	800370c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036ca:	4b60      	ldr	r3, [pc, #384]	; (800384c <RCCEx_PLLSAI1_Config+0x1e4>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d11d      	bne.n	8003712 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036da:	e01a      	b.n	8003712 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036dc:	4b5b      	ldr	r3, [pc, #364]	; (800384c <RCCEx_PLLSAI1_Config+0x1e4>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d116      	bne.n	8003716 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036ec:	e013      	b.n	8003716 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80036ee:	4b57      	ldr	r3, [pc, #348]	; (800384c <RCCEx_PLLSAI1_Config+0x1e4>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10f      	bne.n	800371a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80036fa:	4b54      	ldr	r3, [pc, #336]	; (800384c <RCCEx_PLLSAI1_Config+0x1e4>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d109      	bne.n	800371a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800370a:	e006      	b.n	800371a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	73fb      	strb	r3, [r7, #15]
      break;
 8003710:	e004      	b.n	800371c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003712:	bf00      	nop
 8003714:	e002      	b.n	800371c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003716:	bf00      	nop
 8003718:	e000      	b.n	800371c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800371a:	bf00      	nop
    }

    if(status == HAL_OK)
 800371c:	7bfb      	ldrb	r3, [r7, #15]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d10d      	bne.n	800373e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003722:	4b4a      	ldr	r3, [pc, #296]	; (800384c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6819      	ldr	r1, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	3b01      	subs	r3, #1
 8003734:	011b      	lsls	r3, r3, #4
 8003736:	430b      	orrs	r3, r1
 8003738:	4944      	ldr	r1, [pc, #272]	; (800384c <RCCEx_PLLSAI1_Config+0x1e4>)
 800373a:	4313      	orrs	r3, r2
 800373c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800373e:	7bfb      	ldrb	r3, [r7, #15]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d17d      	bne.n	8003840 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003744:	4b41      	ldr	r3, [pc, #260]	; (800384c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a40      	ldr	r2, [pc, #256]	; (800384c <RCCEx_PLLSAI1_Config+0x1e4>)
 800374a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800374e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003750:	f7fd fbb6 	bl	8000ec0 <HAL_GetTick>
 8003754:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003756:	e009      	b.n	800376c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003758:	f7fd fbb2 	bl	8000ec0 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b02      	cmp	r3, #2
 8003764:	d902      	bls.n	800376c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	73fb      	strb	r3, [r7, #15]
        break;
 800376a:	e005      	b.n	8003778 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800376c:	4b37      	ldr	r3, [pc, #220]	; (800384c <RCCEx_PLLSAI1_Config+0x1e4>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d1ef      	bne.n	8003758 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003778:	7bfb      	ldrb	r3, [r7, #15]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d160      	bne.n	8003840 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d111      	bne.n	80037a8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003784:	4b31      	ldr	r3, [pc, #196]	; (800384c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800378c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	6892      	ldr	r2, [r2, #8]
 8003794:	0211      	lsls	r1, r2, #8
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	68d2      	ldr	r2, [r2, #12]
 800379a:	0912      	lsrs	r2, r2, #4
 800379c:	0452      	lsls	r2, r2, #17
 800379e:	430a      	orrs	r2, r1
 80037a0:	492a      	ldr	r1, [pc, #168]	; (800384c <RCCEx_PLLSAI1_Config+0x1e4>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	610b      	str	r3, [r1, #16]
 80037a6:	e027      	b.n	80037f8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d112      	bne.n	80037d4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037ae:	4b27      	ldr	r3, [pc, #156]	; (800384c <RCCEx_PLLSAI1_Config+0x1e4>)
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80037b6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	6892      	ldr	r2, [r2, #8]
 80037be:	0211      	lsls	r1, r2, #8
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	6912      	ldr	r2, [r2, #16]
 80037c4:	0852      	lsrs	r2, r2, #1
 80037c6:	3a01      	subs	r2, #1
 80037c8:	0552      	lsls	r2, r2, #21
 80037ca:	430a      	orrs	r2, r1
 80037cc:	491f      	ldr	r1, [pc, #124]	; (800384c <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	610b      	str	r3, [r1, #16]
 80037d2:	e011      	b.n	80037f8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037d4:	4b1d      	ldr	r3, [pc, #116]	; (800384c <RCCEx_PLLSAI1_Config+0x1e4>)
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80037dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	6892      	ldr	r2, [r2, #8]
 80037e4:	0211      	lsls	r1, r2, #8
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	6952      	ldr	r2, [r2, #20]
 80037ea:	0852      	lsrs	r2, r2, #1
 80037ec:	3a01      	subs	r2, #1
 80037ee:	0652      	lsls	r2, r2, #25
 80037f0:	430a      	orrs	r2, r1
 80037f2:	4916      	ldr	r1, [pc, #88]	; (800384c <RCCEx_PLLSAI1_Config+0x1e4>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80037f8:	4b14      	ldr	r3, [pc, #80]	; (800384c <RCCEx_PLLSAI1_Config+0x1e4>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a13      	ldr	r2, [pc, #76]	; (800384c <RCCEx_PLLSAI1_Config+0x1e4>)
 80037fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003802:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003804:	f7fd fb5c 	bl	8000ec0 <HAL_GetTick>
 8003808:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800380a:	e009      	b.n	8003820 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800380c:	f7fd fb58 	bl	8000ec0 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b02      	cmp	r3, #2
 8003818:	d902      	bls.n	8003820 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	73fb      	strb	r3, [r7, #15]
          break;
 800381e:	e005      	b.n	800382c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003820:	4b0a      	ldr	r3, [pc, #40]	; (800384c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d0ef      	beq.n	800380c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800382c:	7bfb      	ldrb	r3, [r7, #15]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d106      	bne.n	8003840 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003832:	4b06      	ldr	r3, [pc, #24]	; (800384c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003834:	691a      	ldr	r2, [r3, #16]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	4904      	ldr	r1, [pc, #16]	; (800384c <RCCEx_PLLSAI1_Config+0x1e4>)
 800383c:	4313      	orrs	r3, r2
 800383e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003840:	7bfb      	ldrb	r3, [r7, #15]
}
 8003842:	4618      	mov	r0, r3
 8003844:	3710      	adds	r7, #16
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	40021000 	.word	0x40021000

08003850 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800385a:	2300      	movs	r3, #0
 800385c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800385e:	4b6a      	ldr	r3, [pc, #424]	; (8003a08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	f003 0303 	and.w	r3, r3, #3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d018      	beq.n	800389c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800386a:	4b67      	ldr	r3, [pc, #412]	; (8003a08 <RCCEx_PLLSAI2_Config+0x1b8>)
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	f003 0203 	and.w	r2, r3, #3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	429a      	cmp	r2, r3
 8003878:	d10d      	bne.n	8003896 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
       ||
 800387e:	2b00      	cmp	r3, #0
 8003880:	d009      	beq.n	8003896 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003882:	4b61      	ldr	r3, [pc, #388]	; (8003a08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	091b      	lsrs	r3, r3, #4
 8003888:	f003 0307 	and.w	r3, r3, #7
 800388c:	1c5a      	adds	r2, r3, #1
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
       ||
 8003892:	429a      	cmp	r2, r3
 8003894:	d047      	beq.n	8003926 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	73fb      	strb	r3, [r7, #15]
 800389a:	e044      	b.n	8003926 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2b03      	cmp	r3, #3
 80038a2:	d018      	beq.n	80038d6 <RCCEx_PLLSAI2_Config+0x86>
 80038a4:	2b03      	cmp	r3, #3
 80038a6:	d825      	bhi.n	80038f4 <RCCEx_PLLSAI2_Config+0xa4>
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d002      	beq.n	80038b2 <RCCEx_PLLSAI2_Config+0x62>
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d009      	beq.n	80038c4 <RCCEx_PLLSAI2_Config+0x74>
 80038b0:	e020      	b.n	80038f4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80038b2:	4b55      	ldr	r3, [pc, #340]	; (8003a08 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d11d      	bne.n	80038fa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038c2:	e01a      	b.n	80038fa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038c4:	4b50      	ldr	r3, [pc, #320]	; (8003a08 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d116      	bne.n	80038fe <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038d4:	e013      	b.n	80038fe <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80038d6:	4b4c      	ldr	r3, [pc, #304]	; (8003a08 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d10f      	bne.n	8003902 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80038e2:	4b49      	ldr	r3, [pc, #292]	; (8003a08 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d109      	bne.n	8003902 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80038f2:	e006      	b.n	8003902 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	73fb      	strb	r3, [r7, #15]
      break;
 80038f8:	e004      	b.n	8003904 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80038fa:	bf00      	nop
 80038fc:	e002      	b.n	8003904 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80038fe:	bf00      	nop
 8003900:	e000      	b.n	8003904 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003902:	bf00      	nop
    }

    if(status == HAL_OK)
 8003904:	7bfb      	ldrb	r3, [r7, #15]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10d      	bne.n	8003926 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800390a:	4b3f      	ldr	r3, [pc, #252]	; (8003a08 <RCCEx_PLLSAI2_Config+0x1b8>)
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6819      	ldr	r1, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	3b01      	subs	r3, #1
 800391c:	011b      	lsls	r3, r3, #4
 800391e:	430b      	orrs	r3, r1
 8003920:	4939      	ldr	r1, [pc, #228]	; (8003a08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003922:	4313      	orrs	r3, r2
 8003924:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003926:	7bfb      	ldrb	r3, [r7, #15]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d167      	bne.n	80039fc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800392c:	4b36      	ldr	r3, [pc, #216]	; (8003a08 <RCCEx_PLLSAI2_Config+0x1b8>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a35      	ldr	r2, [pc, #212]	; (8003a08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003932:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003936:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003938:	f7fd fac2 	bl	8000ec0 <HAL_GetTick>
 800393c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800393e:	e009      	b.n	8003954 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003940:	f7fd fabe 	bl	8000ec0 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b02      	cmp	r3, #2
 800394c:	d902      	bls.n	8003954 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	73fb      	strb	r3, [r7, #15]
        break;
 8003952:	e005      	b.n	8003960 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003954:	4b2c      	ldr	r3, [pc, #176]	; (8003a08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1ef      	bne.n	8003940 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003960:	7bfb      	ldrb	r3, [r7, #15]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d14a      	bne.n	80039fc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d111      	bne.n	8003990 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800396c:	4b26      	ldr	r3, [pc, #152]	; (8003a08 <RCCEx_PLLSAI2_Config+0x1b8>)
 800396e:	695b      	ldr	r3, [r3, #20]
 8003970:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003974:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	6892      	ldr	r2, [r2, #8]
 800397c:	0211      	lsls	r1, r2, #8
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	68d2      	ldr	r2, [r2, #12]
 8003982:	0912      	lsrs	r2, r2, #4
 8003984:	0452      	lsls	r2, r2, #17
 8003986:	430a      	orrs	r2, r1
 8003988:	491f      	ldr	r1, [pc, #124]	; (8003a08 <RCCEx_PLLSAI2_Config+0x1b8>)
 800398a:	4313      	orrs	r3, r2
 800398c:	614b      	str	r3, [r1, #20]
 800398e:	e011      	b.n	80039b4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003990:	4b1d      	ldr	r3, [pc, #116]	; (8003a08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003992:	695b      	ldr	r3, [r3, #20]
 8003994:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003998:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	6892      	ldr	r2, [r2, #8]
 80039a0:	0211      	lsls	r1, r2, #8
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	6912      	ldr	r2, [r2, #16]
 80039a6:	0852      	lsrs	r2, r2, #1
 80039a8:	3a01      	subs	r2, #1
 80039aa:	0652      	lsls	r2, r2, #25
 80039ac:	430a      	orrs	r2, r1
 80039ae:	4916      	ldr	r1, [pc, #88]	; (8003a08 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80039b4:	4b14      	ldr	r3, [pc, #80]	; (8003a08 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a13      	ldr	r2, [pc, #76]	; (8003a08 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039c0:	f7fd fa7e 	bl	8000ec0 <HAL_GetTick>
 80039c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80039c6:	e009      	b.n	80039dc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80039c8:	f7fd fa7a 	bl	8000ec0 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d902      	bls.n	80039dc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	73fb      	strb	r3, [r7, #15]
          break;
 80039da:	e005      	b.n	80039e8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80039dc:	4b0a      	ldr	r3, [pc, #40]	; (8003a08 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d0ef      	beq.n	80039c8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80039e8:	7bfb      	ldrb	r3, [r7, #15]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d106      	bne.n	80039fc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80039ee:	4b06      	ldr	r3, [pc, #24]	; (8003a08 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039f0:	695a      	ldr	r2, [r3, #20]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	4904      	ldr	r1, [pc, #16]	; (8003a08 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80039fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	40021000 	.word	0x40021000

08003a0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e049      	b.n	8003ab2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d106      	bne.n	8003a38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f7fd f870 	bl	8000b18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2202      	movs	r2, #2
 8003a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	3304      	adds	r3, #4
 8003a48:	4619      	mov	r1, r3
 8003a4a:	4610      	mov	r0, r2
 8003a4c:	f000 fb7a 	bl	8004144 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3708      	adds	r7, #8
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b082      	sub	sp, #8
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d101      	bne.n	8003acc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e049      	b.n	8003b60 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d106      	bne.n	8003ae6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 f841 	bl	8003b68 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2202      	movs	r2, #2
 8003aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	3304      	adds	r3, #4
 8003af6:	4619      	mov	r1, r3
 8003af8:	4610      	mov	r0, r2
 8003afa:	f000 fb23 	bl	8004144 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2201      	movs	r2, #1
 8003b02:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2201      	movs	r2, #1
 8003b12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2201      	movs	r2, #1
 8003b52:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3708      	adds	r7, #8
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d109      	bne.n	8003ba0 <HAL_TIM_PWM_Start+0x24>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	bf14      	ite	ne
 8003b98:	2301      	movne	r3, #1
 8003b9a:	2300      	moveq	r3, #0
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	e03c      	b.n	8003c1a <HAL_TIM_PWM_Start+0x9e>
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	2b04      	cmp	r3, #4
 8003ba4:	d109      	bne.n	8003bba <HAL_TIM_PWM_Start+0x3e>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	bf14      	ite	ne
 8003bb2:	2301      	movne	r3, #1
 8003bb4:	2300      	moveq	r3, #0
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	e02f      	b.n	8003c1a <HAL_TIM_PWM_Start+0x9e>
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	2b08      	cmp	r3, #8
 8003bbe:	d109      	bne.n	8003bd4 <HAL_TIM_PWM_Start+0x58>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	bf14      	ite	ne
 8003bcc:	2301      	movne	r3, #1
 8003bce:	2300      	moveq	r3, #0
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	e022      	b.n	8003c1a <HAL_TIM_PWM_Start+0x9e>
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	2b0c      	cmp	r3, #12
 8003bd8:	d109      	bne.n	8003bee <HAL_TIM_PWM_Start+0x72>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	bf14      	ite	ne
 8003be6:	2301      	movne	r3, #1
 8003be8:	2300      	moveq	r3, #0
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	e015      	b.n	8003c1a <HAL_TIM_PWM_Start+0x9e>
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	2b10      	cmp	r3, #16
 8003bf2:	d109      	bne.n	8003c08 <HAL_TIM_PWM_Start+0x8c>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	bf14      	ite	ne
 8003c00:	2301      	movne	r3, #1
 8003c02:	2300      	moveq	r3, #0
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	e008      	b.n	8003c1a <HAL_TIM_PWM_Start+0x9e>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	bf14      	ite	ne
 8003c14:	2301      	movne	r3, #1
 8003c16:	2300      	moveq	r3, #0
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e09c      	b.n	8003d5c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d104      	bne.n	8003c32 <HAL_TIM_PWM_Start+0xb6>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c30:	e023      	b.n	8003c7a <HAL_TIM_PWM_Start+0xfe>
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	2b04      	cmp	r3, #4
 8003c36:	d104      	bne.n	8003c42 <HAL_TIM_PWM_Start+0xc6>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2202      	movs	r2, #2
 8003c3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c40:	e01b      	b.n	8003c7a <HAL_TIM_PWM_Start+0xfe>
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	2b08      	cmp	r3, #8
 8003c46:	d104      	bne.n	8003c52 <HAL_TIM_PWM_Start+0xd6>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2202      	movs	r2, #2
 8003c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c50:	e013      	b.n	8003c7a <HAL_TIM_PWM_Start+0xfe>
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	2b0c      	cmp	r3, #12
 8003c56:	d104      	bne.n	8003c62 <HAL_TIM_PWM_Start+0xe6>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c60:	e00b      	b.n	8003c7a <HAL_TIM_PWM_Start+0xfe>
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	2b10      	cmp	r3, #16
 8003c66:	d104      	bne.n	8003c72 <HAL_TIM_PWM_Start+0xf6>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c70:	e003      	b.n	8003c7a <HAL_TIM_PWM_Start+0xfe>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2202      	movs	r2, #2
 8003c76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	6839      	ldr	r1, [r7, #0]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f000 fe68 	bl	8004958 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a35      	ldr	r2, [pc, #212]	; (8003d64 <HAL_TIM_PWM_Start+0x1e8>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d013      	beq.n	8003cba <HAL_TIM_PWM_Start+0x13e>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a34      	ldr	r2, [pc, #208]	; (8003d68 <HAL_TIM_PWM_Start+0x1ec>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d00e      	beq.n	8003cba <HAL_TIM_PWM_Start+0x13e>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a32      	ldr	r2, [pc, #200]	; (8003d6c <HAL_TIM_PWM_Start+0x1f0>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d009      	beq.n	8003cba <HAL_TIM_PWM_Start+0x13e>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a31      	ldr	r2, [pc, #196]	; (8003d70 <HAL_TIM_PWM_Start+0x1f4>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d004      	beq.n	8003cba <HAL_TIM_PWM_Start+0x13e>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a2f      	ldr	r2, [pc, #188]	; (8003d74 <HAL_TIM_PWM_Start+0x1f8>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d101      	bne.n	8003cbe <HAL_TIM_PWM_Start+0x142>
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e000      	b.n	8003cc0 <HAL_TIM_PWM_Start+0x144>
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d007      	beq.n	8003cd4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cd2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a22      	ldr	r2, [pc, #136]	; (8003d64 <HAL_TIM_PWM_Start+0x1e8>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d01d      	beq.n	8003d1a <HAL_TIM_PWM_Start+0x19e>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ce6:	d018      	beq.n	8003d1a <HAL_TIM_PWM_Start+0x19e>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a22      	ldr	r2, [pc, #136]	; (8003d78 <HAL_TIM_PWM_Start+0x1fc>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d013      	beq.n	8003d1a <HAL_TIM_PWM_Start+0x19e>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a21      	ldr	r2, [pc, #132]	; (8003d7c <HAL_TIM_PWM_Start+0x200>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d00e      	beq.n	8003d1a <HAL_TIM_PWM_Start+0x19e>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a1f      	ldr	r2, [pc, #124]	; (8003d80 <HAL_TIM_PWM_Start+0x204>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d009      	beq.n	8003d1a <HAL_TIM_PWM_Start+0x19e>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a17      	ldr	r2, [pc, #92]	; (8003d68 <HAL_TIM_PWM_Start+0x1ec>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d004      	beq.n	8003d1a <HAL_TIM_PWM_Start+0x19e>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a15      	ldr	r2, [pc, #84]	; (8003d6c <HAL_TIM_PWM_Start+0x1f0>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d115      	bne.n	8003d46 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	689a      	ldr	r2, [r3, #8]
 8003d20:	4b18      	ldr	r3, [pc, #96]	; (8003d84 <HAL_TIM_PWM_Start+0x208>)
 8003d22:	4013      	ands	r3, r2
 8003d24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2b06      	cmp	r3, #6
 8003d2a:	d015      	beq.n	8003d58 <HAL_TIM_PWM_Start+0x1dc>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d32:	d011      	beq.n	8003d58 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f042 0201 	orr.w	r2, r2, #1
 8003d42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d44:	e008      	b.n	8003d58 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f042 0201 	orr.w	r2, r2, #1
 8003d54:	601a      	str	r2, [r3, #0]
 8003d56:	e000      	b.n	8003d5a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d58:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3710      	adds	r7, #16
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	40012c00 	.word	0x40012c00
 8003d68:	40013400 	.word	0x40013400
 8003d6c:	40014000 	.word	0x40014000
 8003d70:	40014400 	.word	0x40014400
 8003d74:	40014800 	.word	0x40014800
 8003d78:	40000400 	.word	0x40000400
 8003d7c:	40000800 	.word	0x40000800
 8003d80:	40000c00 	.word	0x40000c00
 8003d84:	00010007 	.word	0x00010007

08003d88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b086      	sub	sp, #24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d94:	2300      	movs	r3, #0
 8003d96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d101      	bne.n	8003da6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003da2:	2302      	movs	r3, #2
 8003da4:	e0ff      	b.n	8003fa6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2201      	movs	r2, #1
 8003daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2b14      	cmp	r3, #20
 8003db2:	f200 80f0 	bhi.w	8003f96 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003db6:	a201      	add	r2, pc, #4	; (adr r2, 8003dbc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dbc:	08003e11 	.word	0x08003e11
 8003dc0:	08003f97 	.word	0x08003f97
 8003dc4:	08003f97 	.word	0x08003f97
 8003dc8:	08003f97 	.word	0x08003f97
 8003dcc:	08003e51 	.word	0x08003e51
 8003dd0:	08003f97 	.word	0x08003f97
 8003dd4:	08003f97 	.word	0x08003f97
 8003dd8:	08003f97 	.word	0x08003f97
 8003ddc:	08003e93 	.word	0x08003e93
 8003de0:	08003f97 	.word	0x08003f97
 8003de4:	08003f97 	.word	0x08003f97
 8003de8:	08003f97 	.word	0x08003f97
 8003dec:	08003ed3 	.word	0x08003ed3
 8003df0:	08003f97 	.word	0x08003f97
 8003df4:	08003f97 	.word	0x08003f97
 8003df8:	08003f97 	.word	0x08003f97
 8003dfc:	08003f15 	.word	0x08003f15
 8003e00:	08003f97 	.word	0x08003f97
 8003e04:	08003f97 	.word	0x08003f97
 8003e08:	08003f97 	.word	0x08003f97
 8003e0c:	08003f55 	.word	0x08003f55
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68b9      	ldr	r1, [r7, #8]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f000 fa2e 	bl	8004278 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	699a      	ldr	r2, [r3, #24]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f042 0208 	orr.w	r2, r2, #8
 8003e2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	699a      	ldr	r2, [r3, #24]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f022 0204 	bic.w	r2, r2, #4
 8003e3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	6999      	ldr	r1, [r3, #24]
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	691a      	ldr	r2, [r3, #16]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	619a      	str	r2, [r3, #24]
      break;
 8003e4e:	e0a5      	b.n	8003f9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68b9      	ldr	r1, [r7, #8]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f000 fa9e 	bl	8004398 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	699a      	ldr	r2, [r3, #24]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	699a      	ldr	r2, [r3, #24]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6999      	ldr	r1, [r3, #24]
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	021a      	lsls	r2, r3, #8
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	430a      	orrs	r2, r1
 8003e8e:	619a      	str	r2, [r3, #24]
      break;
 8003e90:	e084      	b.n	8003f9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68b9      	ldr	r1, [r7, #8]
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f000 fb07 	bl	80044ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	69da      	ldr	r2, [r3, #28]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f042 0208 	orr.w	r2, r2, #8
 8003eac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	69da      	ldr	r2, [r3, #28]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f022 0204 	bic.w	r2, r2, #4
 8003ebc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	69d9      	ldr	r1, [r3, #28]
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	691a      	ldr	r2, [r3, #16]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	61da      	str	r2, [r3, #28]
      break;
 8003ed0:	e064      	b.n	8003f9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68b9      	ldr	r1, [r7, #8]
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f000 fb6f 	bl	80045bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	69da      	ldr	r2, [r3, #28]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003eec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	69da      	ldr	r2, [r3, #28]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003efc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	69d9      	ldr	r1, [r3, #28]
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	021a      	lsls	r2, r3, #8
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	61da      	str	r2, [r3, #28]
      break;
 8003f12:	e043      	b.n	8003f9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68b9      	ldr	r1, [r7, #8]
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f000 fbb8 	bl	8004690 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f042 0208 	orr.w	r2, r2, #8
 8003f2e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f022 0204 	bic.w	r2, r2, #4
 8003f3e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	691a      	ldr	r2, [r3, #16]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003f52:	e023      	b.n	8003f9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68b9      	ldr	r1, [r7, #8]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f000 fbfc 	bl	8004758 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f6e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f7e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	021a      	lsls	r2, r3, #8
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	430a      	orrs	r2, r1
 8003f92:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003f94:	e002      	b.n	8003f9c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	75fb      	strb	r3, [r7, #23]
      break;
 8003f9a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003fa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3718      	adds	r7, #24
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop

08003fb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d101      	bne.n	8003fcc <HAL_TIM_ConfigClockSource+0x1c>
 8003fc8:	2302      	movs	r3, #2
 8003fca:	e0b6      	b.n	800413a <HAL_TIM_ConfigClockSource+0x18a>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2202      	movs	r2, #2
 8003fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003fee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ff6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68ba      	ldr	r2, [r7, #8]
 8003ffe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004008:	d03e      	beq.n	8004088 <HAL_TIM_ConfigClockSource+0xd8>
 800400a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800400e:	f200 8087 	bhi.w	8004120 <HAL_TIM_ConfigClockSource+0x170>
 8004012:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004016:	f000 8086 	beq.w	8004126 <HAL_TIM_ConfigClockSource+0x176>
 800401a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800401e:	d87f      	bhi.n	8004120 <HAL_TIM_ConfigClockSource+0x170>
 8004020:	2b70      	cmp	r3, #112	; 0x70
 8004022:	d01a      	beq.n	800405a <HAL_TIM_ConfigClockSource+0xaa>
 8004024:	2b70      	cmp	r3, #112	; 0x70
 8004026:	d87b      	bhi.n	8004120 <HAL_TIM_ConfigClockSource+0x170>
 8004028:	2b60      	cmp	r3, #96	; 0x60
 800402a:	d050      	beq.n	80040ce <HAL_TIM_ConfigClockSource+0x11e>
 800402c:	2b60      	cmp	r3, #96	; 0x60
 800402e:	d877      	bhi.n	8004120 <HAL_TIM_ConfigClockSource+0x170>
 8004030:	2b50      	cmp	r3, #80	; 0x50
 8004032:	d03c      	beq.n	80040ae <HAL_TIM_ConfigClockSource+0xfe>
 8004034:	2b50      	cmp	r3, #80	; 0x50
 8004036:	d873      	bhi.n	8004120 <HAL_TIM_ConfigClockSource+0x170>
 8004038:	2b40      	cmp	r3, #64	; 0x40
 800403a:	d058      	beq.n	80040ee <HAL_TIM_ConfigClockSource+0x13e>
 800403c:	2b40      	cmp	r3, #64	; 0x40
 800403e:	d86f      	bhi.n	8004120 <HAL_TIM_ConfigClockSource+0x170>
 8004040:	2b30      	cmp	r3, #48	; 0x30
 8004042:	d064      	beq.n	800410e <HAL_TIM_ConfigClockSource+0x15e>
 8004044:	2b30      	cmp	r3, #48	; 0x30
 8004046:	d86b      	bhi.n	8004120 <HAL_TIM_ConfigClockSource+0x170>
 8004048:	2b20      	cmp	r3, #32
 800404a:	d060      	beq.n	800410e <HAL_TIM_ConfigClockSource+0x15e>
 800404c:	2b20      	cmp	r3, #32
 800404e:	d867      	bhi.n	8004120 <HAL_TIM_ConfigClockSource+0x170>
 8004050:	2b00      	cmp	r3, #0
 8004052:	d05c      	beq.n	800410e <HAL_TIM_ConfigClockSource+0x15e>
 8004054:	2b10      	cmp	r3, #16
 8004056:	d05a      	beq.n	800410e <HAL_TIM_ConfigClockSource+0x15e>
 8004058:	e062      	b.n	8004120 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6818      	ldr	r0, [r3, #0]
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	6899      	ldr	r1, [r3, #8]
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	685a      	ldr	r2, [r3, #4]
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	f000 fc55 	bl	8004918 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800407c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68ba      	ldr	r2, [r7, #8]
 8004084:	609a      	str	r2, [r3, #8]
      break;
 8004086:	e04f      	b.n	8004128 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6818      	ldr	r0, [r3, #0]
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	6899      	ldr	r1, [r3, #8]
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	685a      	ldr	r2, [r3, #4]
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	f000 fc3e 	bl	8004918 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	689a      	ldr	r2, [r3, #8]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040aa:	609a      	str	r2, [r3, #8]
      break;
 80040ac:	e03c      	b.n	8004128 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6818      	ldr	r0, [r3, #0]
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	6859      	ldr	r1, [r3, #4]
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	461a      	mov	r2, r3
 80040bc:	f000 fbb2 	bl	8004824 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2150      	movs	r1, #80	; 0x50
 80040c6:	4618      	mov	r0, r3
 80040c8:	f000 fc0b 	bl	80048e2 <TIM_ITRx_SetConfig>
      break;
 80040cc:	e02c      	b.n	8004128 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6818      	ldr	r0, [r3, #0]
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	6859      	ldr	r1, [r3, #4]
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	461a      	mov	r2, r3
 80040dc:	f000 fbd1 	bl	8004882 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2160      	movs	r1, #96	; 0x60
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 fbfb 	bl	80048e2 <TIM_ITRx_SetConfig>
      break;
 80040ec:	e01c      	b.n	8004128 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6818      	ldr	r0, [r3, #0]
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	6859      	ldr	r1, [r3, #4]
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	461a      	mov	r2, r3
 80040fc:	f000 fb92 	bl	8004824 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2140      	movs	r1, #64	; 0x40
 8004106:	4618      	mov	r0, r3
 8004108:	f000 fbeb 	bl	80048e2 <TIM_ITRx_SetConfig>
      break;
 800410c:	e00c      	b.n	8004128 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4619      	mov	r1, r3
 8004118:	4610      	mov	r0, r2
 800411a:	f000 fbe2 	bl	80048e2 <TIM_ITRx_SetConfig>
      break;
 800411e:	e003      	b.n	8004128 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	73fb      	strb	r3, [r7, #15]
      break;
 8004124:	e000      	b.n	8004128 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004126:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004138:	7bfb      	ldrb	r3, [r7, #15]
}
 800413a:	4618      	mov	r0, r3
 800413c:	3710      	adds	r7, #16
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
	...

08004144 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004144:	b480      	push	{r7}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a40      	ldr	r2, [pc, #256]	; (8004258 <TIM_Base_SetConfig+0x114>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d013      	beq.n	8004184 <TIM_Base_SetConfig+0x40>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004162:	d00f      	beq.n	8004184 <TIM_Base_SetConfig+0x40>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a3d      	ldr	r2, [pc, #244]	; (800425c <TIM_Base_SetConfig+0x118>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d00b      	beq.n	8004184 <TIM_Base_SetConfig+0x40>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a3c      	ldr	r2, [pc, #240]	; (8004260 <TIM_Base_SetConfig+0x11c>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d007      	beq.n	8004184 <TIM_Base_SetConfig+0x40>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a3b      	ldr	r2, [pc, #236]	; (8004264 <TIM_Base_SetConfig+0x120>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d003      	beq.n	8004184 <TIM_Base_SetConfig+0x40>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a3a      	ldr	r2, [pc, #232]	; (8004268 <TIM_Base_SetConfig+0x124>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d108      	bne.n	8004196 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800418a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	4313      	orrs	r3, r2
 8004194:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a2f      	ldr	r2, [pc, #188]	; (8004258 <TIM_Base_SetConfig+0x114>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d01f      	beq.n	80041de <TIM_Base_SetConfig+0x9a>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041a4:	d01b      	beq.n	80041de <TIM_Base_SetConfig+0x9a>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a2c      	ldr	r2, [pc, #176]	; (800425c <TIM_Base_SetConfig+0x118>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d017      	beq.n	80041de <TIM_Base_SetConfig+0x9a>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a2b      	ldr	r2, [pc, #172]	; (8004260 <TIM_Base_SetConfig+0x11c>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d013      	beq.n	80041de <TIM_Base_SetConfig+0x9a>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a2a      	ldr	r2, [pc, #168]	; (8004264 <TIM_Base_SetConfig+0x120>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d00f      	beq.n	80041de <TIM_Base_SetConfig+0x9a>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a29      	ldr	r2, [pc, #164]	; (8004268 <TIM_Base_SetConfig+0x124>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d00b      	beq.n	80041de <TIM_Base_SetConfig+0x9a>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a28      	ldr	r2, [pc, #160]	; (800426c <TIM_Base_SetConfig+0x128>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d007      	beq.n	80041de <TIM_Base_SetConfig+0x9a>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a27      	ldr	r2, [pc, #156]	; (8004270 <TIM_Base_SetConfig+0x12c>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d003      	beq.n	80041de <TIM_Base_SetConfig+0x9a>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a26      	ldr	r2, [pc, #152]	; (8004274 <TIM_Base_SetConfig+0x130>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d108      	bne.n	80041f0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	689a      	ldr	r2, [r3, #8]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a10      	ldr	r2, [pc, #64]	; (8004258 <TIM_Base_SetConfig+0x114>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d00f      	beq.n	800423c <TIM_Base_SetConfig+0xf8>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a12      	ldr	r2, [pc, #72]	; (8004268 <TIM_Base_SetConfig+0x124>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d00b      	beq.n	800423c <TIM_Base_SetConfig+0xf8>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a11      	ldr	r2, [pc, #68]	; (800426c <TIM_Base_SetConfig+0x128>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d007      	beq.n	800423c <TIM_Base_SetConfig+0xf8>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a10      	ldr	r2, [pc, #64]	; (8004270 <TIM_Base_SetConfig+0x12c>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d003      	beq.n	800423c <TIM_Base_SetConfig+0xf8>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a0f      	ldr	r2, [pc, #60]	; (8004274 <TIM_Base_SetConfig+0x130>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d103      	bne.n	8004244 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	691a      	ldr	r2, [r3, #16]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	615a      	str	r2, [r3, #20]
}
 800424a:	bf00      	nop
 800424c:	3714      	adds	r7, #20
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	40012c00 	.word	0x40012c00
 800425c:	40000400 	.word	0x40000400
 8004260:	40000800 	.word	0x40000800
 8004264:	40000c00 	.word	0x40000c00
 8004268:	40013400 	.word	0x40013400
 800426c:	40014000 	.word	0x40014000
 8004270:	40014400 	.word	0x40014400
 8004274:	40014800 	.word	0x40014800

08004278 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004278:	b480      	push	{r7}
 800427a:	b087      	sub	sp, #28
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a1b      	ldr	r3, [r3, #32]
 8004286:	f023 0201 	bic.w	r2, r3, #1
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a1b      	ldr	r3, [r3, #32]
 8004292:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	699b      	ldr	r3, [r3, #24]
 800429e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f023 0303 	bic.w	r3, r3, #3
 80042b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	f023 0302 	bic.w	r3, r3, #2
 80042c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	697a      	ldr	r2, [r7, #20]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a2c      	ldr	r2, [pc, #176]	; (8004384 <TIM_OC1_SetConfig+0x10c>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d00f      	beq.n	80042f8 <TIM_OC1_SetConfig+0x80>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a2b      	ldr	r2, [pc, #172]	; (8004388 <TIM_OC1_SetConfig+0x110>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d00b      	beq.n	80042f8 <TIM_OC1_SetConfig+0x80>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a2a      	ldr	r2, [pc, #168]	; (800438c <TIM_OC1_SetConfig+0x114>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d007      	beq.n	80042f8 <TIM_OC1_SetConfig+0x80>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a29      	ldr	r2, [pc, #164]	; (8004390 <TIM_OC1_SetConfig+0x118>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d003      	beq.n	80042f8 <TIM_OC1_SetConfig+0x80>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a28      	ldr	r2, [pc, #160]	; (8004394 <TIM_OC1_SetConfig+0x11c>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d10c      	bne.n	8004312 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	f023 0308 	bic.w	r3, r3, #8
 80042fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	697a      	ldr	r2, [r7, #20]
 8004306:	4313      	orrs	r3, r2
 8004308:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	f023 0304 	bic.w	r3, r3, #4
 8004310:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a1b      	ldr	r2, [pc, #108]	; (8004384 <TIM_OC1_SetConfig+0x10c>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d00f      	beq.n	800433a <TIM_OC1_SetConfig+0xc2>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a1a      	ldr	r2, [pc, #104]	; (8004388 <TIM_OC1_SetConfig+0x110>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d00b      	beq.n	800433a <TIM_OC1_SetConfig+0xc2>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a19      	ldr	r2, [pc, #100]	; (800438c <TIM_OC1_SetConfig+0x114>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d007      	beq.n	800433a <TIM_OC1_SetConfig+0xc2>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a18      	ldr	r2, [pc, #96]	; (8004390 <TIM_OC1_SetConfig+0x118>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d003      	beq.n	800433a <TIM_OC1_SetConfig+0xc2>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a17      	ldr	r2, [pc, #92]	; (8004394 <TIM_OC1_SetConfig+0x11c>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d111      	bne.n	800435e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004340:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004348:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	695b      	ldr	r3, [r3, #20]
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	4313      	orrs	r3, r2
 8004352:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	4313      	orrs	r3, r2
 800435c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	685a      	ldr	r2, [r3, #4]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	697a      	ldr	r2, [r7, #20]
 8004376:	621a      	str	r2, [r3, #32]
}
 8004378:	bf00      	nop
 800437a:	371c      	adds	r7, #28
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr
 8004384:	40012c00 	.word	0x40012c00
 8004388:	40013400 	.word	0x40013400
 800438c:	40014000 	.word	0x40014000
 8004390:	40014400 	.word	0x40014400
 8004394:	40014800 	.word	0x40014800

08004398 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004398:	b480      	push	{r7}
 800439a:	b087      	sub	sp, #28
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a1b      	ldr	r3, [r3, #32]
 80043a6:	f023 0210 	bic.w	r2, r3, #16
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a1b      	ldr	r3, [r3, #32]
 80043b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	699b      	ldr	r3, [r3, #24]
 80043be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	021b      	lsls	r3, r3, #8
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	4313      	orrs	r3, r2
 80043de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	f023 0320 	bic.w	r3, r3, #32
 80043e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	011b      	lsls	r3, r3, #4
 80043ee:	697a      	ldr	r2, [r7, #20]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a28      	ldr	r2, [pc, #160]	; (8004498 <TIM_OC2_SetConfig+0x100>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d003      	beq.n	8004404 <TIM_OC2_SetConfig+0x6c>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a27      	ldr	r2, [pc, #156]	; (800449c <TIM_OC2_SetConfig+0x104>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d10d      	bne.n	8004420 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800440a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	011b      	lsls	r3, r3, #4
 8004412:	697a      	ldr	r2, [r7, #20]
 8004414:	4313      	orrs	r3, r2
 8004416:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800441e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a1d      	ldr	r2, [pc, #116]	; (8004498 <TIM_OC2_SetConfig+0x100>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d00f      	beq.n	8004448 <TIM_OC2_SetConfig+0xb0>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a1c      	ldr	r2, [pc, #112]	; (800449c <TIM_OC2_SetConfig+0x104>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d00b      	beq.n	8004448 <TIM_OC2_SetConfig+0xb0>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a1b      	ldr	r2, [pc, #108]	; (80044a0 <TIM_OC2_SetConfig+0x108>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d007      	beq.n	8004448 <TIM_OC2_SetConfig+0xb0>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a1a      	ldr	r2, [pc, #104]	; (80044a4 <TIM_OC2_SetConfig+0x10c>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d003      	beq.n	8004448 <TIM_OC2_SetConfig+0xb0>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a19      	ldr	r2, [pc, #100]	; (80044a8 <TIM_OC2_SetConfig+0x110>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d113      	bne.n	8004470 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800444e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004456:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	695b      	ldr	r3, [r3, #20]
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	4313      	orrs	r3, r2
 8004462:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	699b      	ldr	r3, [r3, #24]
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	693a      	ldr	r2, [r7, #16]
 800446c:	4313      	orrs	r3, r2
 800446e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	693a      	ldr	r2, [r7, #16]
 8004474:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	685a      	ldr	r2, [r3, #4]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	697a      	ldr	r2, [r7, #20]
 8004488:	621a      	str	r2, [r3, #32]
}
 800448a:	bf00      	nop
 800448c:	371c      	adds	r7, #28
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	40012c00 	.word	0x40012c00
 800449c:	40013400 	.word	0x40013400
 80044a0:	40014000 	.word	0x40014000
 80044a4:	40014400 	.word	0x40014400
 80044a8:	40014800 	.word	0x40014800

080044ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b087      	sub	sp, #28
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a1b      	ldr	r3, [r3, #32]
 80044ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a1b      	ldr	r3, [r3, #32]
 80044c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	69db      	ldr	r3, [r3, #28]
 80044d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f023 0303 	bic.w	r3, r3, #3
 80044e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	021b      	lsls	r3, r3, #8
 8004500:	697a      	ldr	r2, [r7, #20]
 8004502:	4313      	orrs	r3, r2
 8004504:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a27      	ldr	r2, [pc, #156]	; (80045a8 <TIM_OC3_SetConfig+0xfc>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d003      	beq.n	8004516 <TIM_OC3_SetConfig+0x6a>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a26      	ldr	r2, [pc, #152]	; (80045ac <TIM_OC3_SetConfig+0x100>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d10d      	bne.n	8004532 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800451c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	021b      	lsls	r3, r3, #8
 8004524:	697a      	ldr	r2, [r7, #20]
 8004526:	4313      	orrs	r3, r2
 8004528:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004530:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a1c      	ldr	r2, [pc, #112]	; (80045a8 <TIM_OC3_SetConfig+0xfc>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d00f      	beq.n	800455a <TIM_OC3_SetConfig+0xae>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a1b      	ldr	r2, [pc, #108]	; (80045ac <TIM_OC3_SetConfig+0x100>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d00b      	beq.n	800455a <TIM_OC3_SetConfig+0xae>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a1a      	ldr	r2, [pc, #104]	; (80045b0 <TIM_OC3_SetConfig+0x104>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d007      	beq.n	800455a <TIM_OC3_SetConfig+0xae>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a19      	ldr	r2, [pc, #100]	; (80045b4 <TIM_OC3_SetConfig+0x108>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d003      	beq.n	800455a <TIM_OC3_SetConfig+0xae>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a18      	ldr	r2, [pc, #96]	; (80045b8 <TIM_OC3_SetConfig+0x10c>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d113      	bne.n	8004582 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004560:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004568:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	011b      	lsls	r3, r3, #4
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	4313      	orrs	r3, r2
 8004574:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	011b      	lsls	r3, r3, #4
 800457c:	693a      	ldr	r2, [r7, #16]
 800457e:	4313      	orrs	r3, r2
 8004580:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	693a      	ldr	r2, [r7, #16]
 8004586:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	685a      	ldr	r2, [r3, #4]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	697a      	ldr	r2, [r7, #20]
 800459a:	621a      	str	r2, [r3, #32]
}
 800459c:	bf00      	nop
 800459e:	371c      	adds	r7, #28
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr
 80045a8:	40012c00 	.word	0x40012c00
 80045ac:	40013400 	.word	0x40013400
 80045b0:	40014000 	.word	0x40014000
 80045b4:	40014400 	.word	0x40014400
 80045b8:	40014800 	.word	0x40014800

080045bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045bc:	b480      	push	{r7}
 80045be:	b087      	sub	sp, #28
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a1b      	ldr	r3, [r3, #32]
 80045d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	69db      	ldr	r3, [r3, #28]
 80045e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	021b      	lsls	r3, r3, #8
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	4313      	orrs	r3, r2
 8004602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800460a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	031b      	lsls	r3, r3, #12
 8004612:	693a      	ldr	r2, [r7, #16]
 8004614:	4313      	orrs	r3, r2
 8004616:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a18      	ldr	r2, [pc, #96]	; (800467c <TIM_OC4_SetConfig+0xc0>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d00f      	beq.n	8004640 <TIM_OC4_SetConfig+0x84>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a17      	ldr	r2, [pc, #92]	; (8004680 <TIM_OC4_SetConfig+0xc4>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d00b      	beq.n	8004640 <TIM_OC4_SetConfig+0x84>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a16      	ldr	r2, [pc, #88]	; (8004684 <TIM_OC4_SetConfig+0xc8>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d007      	beq.n	8004640 <TIM_OC4_SetConfig+0x84>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a15      	ldr	r2, [pc, #84]	; (8004688 <TIM_OC4_SetConfig+0xcc>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d003      	beq.n	8004640 <TIM_OC4_SetConfig+0x84>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a14      	ldr	r2, [pc, #80]	; (800468c <TIM_OC4_SetConfig+0xd0>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d109      	bne.n	8004654 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004646:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	695b      	ldr	r3, [r3, #20]
 800464c:	019b      	lsls	r3, r3, #6
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	4313      	orrs	r3, r2
 8004652:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	697a      	ldr	r2, [r7, #20]
 8004658:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	685a      	ldr	r2, [r3, #4]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	693a      	ldr	r2, [r7, #16]
 800466c:	621a      	str	r2, [r3, #32]
}
 800466e:	bf00      	nop
 8004670:	371c      	adds	r7, #28
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	40012c00 	.word	0x40012c00
 8004680:	40013400 	.word	0x40013400
 8004684:	40014000 	.word	0x40014000
 8004688:	40014400 	.word	0x40014400
 800468c:	40014800 	.word	0x40014800

08004690 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004690:	b480      	push	{r7}
 8004692:	b087      	sub	sp, #28
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a1b      	ldr	r3, [r3, #32]
 800469e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80046d4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	041b      	lsls	r3, r3, #16
 80046dc:	693a      	ldr	r2, [r7, #16]
 80046de:	4313      	orrs	r3, r2
 80046e0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a17      	ldr	r2, [pc, #92]	; (8004744 <TIM_OC5_SetConfig+0xb4>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d00f      	beq.n	800470a <TIM_OC5_SetConfig+0x7a>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a16      	ldr	r2, [pc, #88]	; (8004748 <TIM_OC5_SetConfig+0xb8>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d00b      	beq.n	800470a <TIM_OC5_SetConfig+0x7a>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a15      	ldr	r2, [pc, #84]	; (800474c <TIM_OC5_SetConfig+0xbc>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d007      	beq.n	800470a <TIM_OC5_SetConfig+0x7a>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a14      	ldr	r2, [pc, #80]	; (8004750 <TIM_OC5_SetConfig+0xc0>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d003      	beq.n	800470a <TIM_OC5_SetConfig+0x7a>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a13      	ldr	r2, [pc, #76]	; (8004754 <TIM_OC5_SetConfig+0xc4>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d109      	bne.n	800471e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004710:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	021b      	lsls	r3, r3, #8
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	4313      	orrs	r3, r2
 800471c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	685a      	ldr	r2, [r3, #4]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	693a      	ldr	r2, [r7, #16]
 8004736:	621a      	str	r2, [r3, #32]
}
 8004738:	bf00      	nop
 800473a:	371c      	adds	r7, #28
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr
 8004744:	40012c00 	.word	0x40012c00
 8004748:	40013400 	.word	0x40013400
 800474c:	40014000 	.word	0x40014000
 8004750:	40014400 	.word	0x40014400
 8004754:	40014800 	.word	0x40014800

08004758 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004758:	b480      	push	{r7}
 800475a:	b087      	sub	sp, #28
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a1b      	ldr	r3, [r3, #32]
 8004766:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a1b      	ldr	r3, [r3, #32]
 8004772:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800477e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004786:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800478a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	021b      	lsls	r3, r3, #8
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	4313      	orrs	r3, r2
 8004796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800479e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	051b      	lsls	r3, r3, #20
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a18      	ldr	r2, [pc, #96]	; (8004810 <TIM_OC6_SetConfig+0xb8>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d00f      	beq.n	80047d4 <TIM_OC6_SetConfig+0x7c>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a17      	ldr	r2, [pc, #92]	; (8004814 <TIM_OC6_SetConfig+0xbc>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d00b      	beq.n	80047d4 <TIM_OC6_SetConfig+0x7c>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a16      	ldr	r2, [pc, #88]	; (8004818 <TIM_OC6_SetConfig+0xc0>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d007      	beq.n	80047d4 <TIM_OC6_SetConfig+0x7c>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a15      	ldr	r2, [pc, #84]	; (800481c <TIM_OC6_SetConfig+0xc4>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d003      	beq.n	80047d4 <TIM_OC6_SetConfig+0x7c>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a14      	ldr	r2, [pc, #80]	; (8004820 <TIM_OC6_SetConfig+0xc8>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d109      	bne.n	80047e8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	695b      	ldr	r3, [r3, #20]
 80047e0:	029b      	lsls	r3, r3, #10
 80047e2:	697a      	ldr	r2, [r7, #20]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	697a      	ldr	r2, [r7, #20]
 80047ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	68fa      	ldr	r2, [r7, #12]
 80047f2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	685a      	ldr	r2, [r3, #4]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	693a      	ldr	r2, [r7, #16]
 8004800:	621a      	str	r2, [r3, #32]
}
 8004802:	bf00      	nop
 8004804:	371c      	adds	r7, #28
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	40012c00 	.word	0x40012c00
 8004814:	40013400 	.word	0x40013400
 8004818:	40014000 	.word	0x40014000
 800481c:	40014400 	.word	0x40014400
 8004820:	40014800 	.word	0x40014800

08004824 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004824:	b480      	push	{r7}
 8004826:	b087      	sub	sp, #28
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6a1b      	ldr	r3, [r3, #32]
 8004834:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6a1b      	ldr	r3, [r3, #32]
 800483a:	f023 0201 	bic.w	r2, r3, #1
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	699b      	ldr	r3, [r3, #24]
 8004846:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800484e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	011b      	lsls	r3, r3, #4
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	4313      	orrs	r3, r2
 8004858:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	f023 030a 	bic.w	r3, r3, #10
 8004860:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	4313      	orrs	r3, r2
 8004868:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	697a      	ldr	r2, [r7, #20]
 8004874:	621a      	str	r2, [r3, #32]
}
 8004876:	bf00      	nop
 8004878:	371c      	adds	r7, #28
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr

08004882 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004882:	b480      	push	{r7}
 8004884:	b087      	sub	sp, #28
 8004886:	af00      	add	r7, sp, #0
 8004888:	60f8      	str	r0, [r7, #12]
 800488a:	60b9      	str	r1, [r7, #8]
 800488c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6a1b      	ldr	r3, [r3, #32]
 8004892:	f023 0210 	bic.w	r2, r3, #16
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6a1b      	ldr	r3, [r3, #32]
 80048a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	031b      	lsls	r3, r3, #12
 80048b2:	697a      	ldr	r2, [r7, #20]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	011b      	lsls	r3, r3, #4
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	697a      	ldr	r2, [r7, #20]
 80048ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	693a      	ldr	r2, [r7, #16]
 80048d4:	621a      	str	r2, [r3, #32]
}
 80048d6:	bf00      	nop
 80048d8:	371c      	adds	r7, #28
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr

080048e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048e2:	b480      	push	{r7}
 80048e4:	b085      	sub	sp, #20
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
 80048ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048fa:	683a      	ldr	r2, [r7, #0]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	4313      	orrs	r3, r2
 8004900:	f043 0307 	orr.w	r3, r3, #7
 8004904:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	609a      	str	r2, [r3, #8]
}
 800490c:	bf00      	nop
 800490e:	3714      	adds	r7, #20
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004918:	b480      	push	{r7}
 800491a:	b087      	sub	sp, #28
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	607a      	str	r2, [r7, #4]
 8004924:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004932:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	021a      	lsls	r2, r3, #8
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	431a      	orrs	r2, r3
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	4313      	orrs	r3, r2
 8004940:	697a      	ldr	r2, [r7, #20]
 8004942:	4313      	orrs	r3, r2
 8004944:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	609a      	str	r2, [r3, #8]
}
 800494c:	bf00      	nop
 800494e:	371c      	adds	r7, #28
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004958:	b480      	push	{r7}
 800495a:	b087      	sub	sp, #28
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	f003 031f 	and.w	r3, r3, #31
 800496a:	2201      	movs	r2, #1
 800496c:	fa02 f303 	lsl.w	r3, r2, r3
 8004970:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6a1a      	ldr	r2, [r3, #32]
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	43db      	mvns	r3, r3
 800497a:	401a      	ands	r2, r3
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6a1a      	ldr	r2, [r3, #32]
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	f003 031f 	and.w	r3, r3, #31
 800498a:	6879      	ldr	r1, [r7, #4]
 800498c:	fa01 f303 	lsl.w	r3, r1, r3
 8004990:	431a      	orrs	r2, r3
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	621a      	str	r2, [r3, #32]
}
 8004996:	bf00      	nop
 8004998:	371c      	adds	r7, #28
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
	...

080049a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d101      	bne.n	80049bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049b8:	2302      	movs	r3, #2
 80049ba:	e068      	b.n	8004a8e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2202      	movs	r2, #2
 80049c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a2e      	ldr	r2, [pc, #184]	; (8004a9c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d004      	beq.n	80049f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a2d      	ldr	r2, [pc, #180]	; (8004aa0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d108      	bne.n	8004a02 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80049f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a08:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a1e      	ldr	r2, [pc, #120]	; (8004a9c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d01d      	beq.n	8004a62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a2e:	d018      	beq.n	8004a62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a1b      	ldr	r2, [pc, #108]	; (8004aa4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d013      	beq.n	8004a62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a1a      	ldr	r2, [pc, #104]	; (8004aa8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d00e      	beq.n	8004a62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a18      	ldr	r2, [pc, #96]	; (8004aac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d009      	beq.n	8004a62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a13      	ldr	r2, [pc, #76]	; (8004aa0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d004      	beq.n	8004a62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a14      	ldr	r2, [pc, #80]	; (8004ab0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d10c      	bne.n	8004a7c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	68ba      	ldr	r2, [r7, #8]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68ba      	ldr	r2, [r7, #8]
 8004a7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3714      	adds	r7, #20
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	40012c00 	.word	0x40012c00
 8004aa0:	40013400 	.word	0x40013400
 8004aa4:	40000400 	.word	0x40000400
 8004aa8:	40000800 	.word	0x40000800
 8004aac:	40000c00 	.word	0x40000c00
 8004ab0:	40014000 	.word	0x40014000

08004ab4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d101      	bne.n	8004ac6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e040      	b.n	8004b48 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d106      	bne.n	8004adc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f7fc f874 	bl	8000bc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2224      	movs	r2, #36	; 0x24
 8004ae0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f022 0201 	bic.w	r2, r2, #1
 8004af0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 f992 	bl	8004e1c <UART_SetConfig>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d101      	bne.n	8004b02 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e022      	b.n	8004b48 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d002      	beq.n	8004b10 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 fc10 	bl	8005330 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	685a      	ldr	r2, [r3, #4]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	689a      	ldr	r2, [r3, #8]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f042 0201 	orr.w	r2, r2, #1
 8004b3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 fc97 	bl	8005474 <UART_CheckIdleState>
 8004b46:	4603      	mov	r3, r0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3708      	adds	r7, #8
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b08a      	sub	sp, #40	; 0x28
 8004b54:	af02      	add	r7, sp, #8
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	603b      	str	r3, [r7, #0]
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b64:	2b20      	cmp	r3, #32
 8004b66:	f040 8082 	bne.w	8004c6e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d002      	beq.n	8004b76 <HAL_UART_Transmit+0x26>
 8004b70:	88fb      	ldrh	r3, [r7, #6]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d101      	bne.n	8004b7a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e07a      	b.n	8004c70 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d101      	bne.n	8004b88 <HAL_UART_Transmit+0x38>
 8004b84:	2302      	movs	r3, #2
 8004b86:	e073      	b.n	8004c70 <HAL_UART_Transmit+0x120>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2221      	movs	r2, #33	; 0x21
 8004b9c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b9e:	f7fc f98f 	bl	8000ec0 <HAL_GetTick>
 8004ba2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	88fa      	ldrh	r2, [r7, #6]
 8004ba8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	88fa      	ldrh	r2, [r7, #6]
 8004bb0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bbc:	d108      	bne.n	8004bd0 <HAL_UART_Transmit+0x80>
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d104      	bne.n	8004bd0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	61bb      	str	r3, [r7, #24]
 8004bce:	e003      	b.n	8004bd8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004be0:	e02d      	b.n	8004c3e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	9300      	str	r3, [sp, #0]
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	2200      	movs	r2, #0
 8004bea:	2180      	movs	r1, #128	; 0x80
 8004bec:	68f8      	ldr	r0, [r7, #12]
 8004bee:	f000 fc8a 	bl	8005506 <UART_WaitOnFlagUntilTimeout>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d001      	beq.n	8004bfc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e039      	b.n	8004c70 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d10b      	bne.n	8004c1a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	881a      	ldrh	r2, [r3, #0]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c0e:	b292      	uxth	r2, r2
 8004c10:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	3302      	adds	r3, #2
 8004c16:	61bb      	str	r3, [r7, #24]
 8004c18:	e008      	b.n	8004c2c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	781a      	ldrb	r2, [r3, #0]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	b292      	uxth	r2, r2
 8004c24:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	3301      	adds	r3, #1
 8004c2a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	3b01      	subs	r3, #1
 8004c36:	b29a      	uxth	r2, r3
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d1cb      	bne.n	8004be2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	9300      	str	r3, [sp, #0]
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	2200      	movs	r2, #0
 8004c52:	2140      	movs	r1, #64	; 0x40
 8004c54:	68f8      	ldr	r0, [r7, #12]
 8004c56:	f000 fc56 	bl	8005506 <UART_WaitOnFlagUntilTimeout>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d001      	beq.n	8004c64 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	e005      	b.n	8004c70 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2220      	movs	r2, #32
 8004c68:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	e000      	b.n	8004c70 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004c6e:	2302      	movs	r3, #2
  }
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3720      	adds	r7, #32
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b08a      	sub	sp, #40	; 0x28
 8004c7c:	af02      	add	r7, sp, #8
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	603b      	str	r3, [r7, #0]
 8004c84:	4613      	mov	r3, r2
 8004c86:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c8c:	2b20      	cmp	r3, #32
 8004c8e:	f040 80bf 	bne.w	8004e10 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d002      	beq.n	8004c9e <HAL_UART_Receive+0x26>
 8004c98:	88fb      	ldrh	r3, [r7, #6]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d101      	bne.n	8004ca2 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e0b7      	b.n	8004e12 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d101      	bne.n	8004cb0 <HAL_UART_Receive+0x38>
 8004cac:	2302      	movs	r3, #2
 8004cae:	e0b0      	b.n	8004e12 <HAL_UART_Receive+0x19a>
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2222      	movs	r2, #34	; 0x22
 8004cc4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ccc:	f7fc f8f8 	bl	8000ec0 <HAL_GetTick>
 8004cd0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	88fa      	ldrh	r2, [r7, #6]
 8004cd6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	88fa      	ldrh	r2, [r7, #6]
 8004cde:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cea:	d10e      	bne.n	8004d0a <HAL_UART_Receive+0x92>
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d105      	bne.n	8004d00 <HAL_UART_Receive+0x88>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004cfa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004cfe:	e02d      	b.n	8004d5c <HAL_UART_Receive+0xe4>
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	22ff      	movs	r2, #255	; 0xff
 8004d04:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d08:	e028      	b.n	8004d5c <HAL_UART_Receive+0xe4>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10d      	bne.n	8004d2e <HAL_UART_Receive+0xb6>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d104      	bne.n	8004d24 <HAL_UART_Receive+0xac>
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	22ff      	movs	r2, #255	; 0xff
 8004d1e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d22:	e01b      	b.n	8004d5c <HAL_UART_Receive+0xe4>
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	227f      	movs	r2, #127	; 0x7f
 8004d28:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d2c:	e016      	b.n	8004d5c <HAL_UART_Receive+0xe4>
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d36:	d10d      	bne.n	8004d54 <HAL_UART_Receive+0xdc>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d104      	bne.n	8004d4a <HAL_UART_Receive+0xd2>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	227f      	movs	r2, #127	; 0x7f
 8004d44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d48:	e008      	b.n	8004d5c <HAL_UART_Receive+0xe4>
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	223f      	movs	r2, #63	; 0x3f
 8004d4e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d52:	e003      	b.n	8004d5c <HAL_UART_Receive+0xe4>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004d62:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d6c:	d108      	bne.n	8004d80 <HAL_UART_Receive+0x108>
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d104      	bne.n	8004d80 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8004d76:	2300      	movs	r3, #0
 8004d78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	61bb      	str	r3, [r7, #24]
 8004d7e:	e003      	b.n	8004d88 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d84:	2300      	movs	r3, #0
 8004d86:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004d90:	e033      	b.n	8004dfa <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	9300      	str	r3, [sp, #0]
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	2120      	movs	r1, #32
 8004d9c:	68f8      	ldr	r0, [r7, #12]
 8004d9e:	f000 fbb2 	bl	8005506 <UART_WaitOnFlagUntilTimeout>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d001      	beq.n	8004dac <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e032      	b.n	8004e12 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d10c      	bne.n	8004dcc <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004db8:	b29a      	uxth	r2, r3
 8004dba:	8a7b      	ldrh	r3, [r7, #18]
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	b29a      	uxth	r2, r3
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	3302      	adds	r3, #2
 8004dc8:	61bb      	str	r3, [r7, #24]
 8004dca:	e00d      	b.n	8004de8 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	b2da      	uxtb	r2, r3
 8004dd6:	8a7b      	ldrh	r3, [r7, #18]
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	4013      	ands	r3, r2
 8004ddc:	b2da      	uxtb	r2, r3
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	3301      	adds	r3, #1
 8004de6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	3b01      	subs	r3, #1
 8004df2:	b29a      	uxth	r2, r3
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d1c5      	bne.n	8004d92 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2220      	movs	r2, #32
 8004e0a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	e000      	b.n	8004e12 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8004e10:	2302      	movs	r3, #2
  }
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3720      	adds	r7, #32
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
	...

08004e1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e1c:	b5b0      	push	{r4, r5, r7, lr}
 8004e1e:	b088      	sub	sp, #32
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e24:	2300      	movs	r3, #0
 8004e26:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	689a      	ldr	r2, [r3, #8]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	431a      	orrs	r2, r3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	431a      	orrs	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	69db      	ldr	r3, [r3, #28]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	4bad      	ldr	r3, [pc, #692]	; (80050fc <UART_SetConfig+0x2e0>)
 8004e48:	4013      	ands	r3, r2
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	6812      	ldr	r2, [r2, #0]
 8004e4e:	69f9      	ldr	r1, [r7, #28]
 8004e50:	430b      	orrs	r3, r1
 8004e52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	68da      	ldr	r2, [r3, #12]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	430a      	orrs	r2, r1
 8004e68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	699b      	ldr	r3, [r3, #24]
 8004e6e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4aa2      	ldr	r2, [pc, #648]	; (8005100 <UART_SetConfig+0x2e4>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d004      	beq.n	8004e84 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a1b      	ldr	r3, [r3, #32]
 8004e7e:	69fa      	ldr	r2, [r7, #28]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	69fa      	ldr	r2, [r7, #28]
 8004e94:	430a      	orrs	r2, r1
 8004e96:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a99      	ldr	r2, [pc, #612]	; (8005104 <UART_SetConfig+0x2e8>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d121      	bne.n	8004ee6 <UART_SetConfig+0xca>
 8004ea2:	4b99      	ldr	r3, [pc, #612]	; (8005108 <UART_SetConfig+0x2ec>)
 8004ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ea8:	f003 0303 	and.w	r3, r3, #3
 8004eac:	2b03      	cmp	r3, #3
 8004eae:	d817      	bhi.n	8004ee0 <UART_SetConfig+0xc4>
 8004eb0:	a201      	add	r2, pc, #4	; (adr r2, 8004eb8 <UART_SetConfig+0x9c>)
 8004eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb6:	bf00      	nop
 8004eb8:	08004ec9 	.word	0x08004ec9
 8004ebc:	08004ed5 	.word	0x08004ed5
 8004ec0:	08004ecf 	.word	0x08004ecf
 8004ec4:	08004edb 	.word	0x08004edb
 8004ec8:	2301      	movs	r3, #1
 8004eca:	76fb      	strb	r3, [r7, #27]
 8004ecc:	e0e7      	b.n	800509e <UART_SetConfig+0x282>
 8004ece:	2302      	movs	r3, #2
 8004ed0:	76fb      	strb	r3, [r7, #27]
 8004ed2:	e0e4      	b.n	800509e <UART_SetConfig+0x282>
 8004ed4:	2304      	movs	r3, #4
 8004ed6:	76fb      	strb	r3, [r7, #27]
 8004ed8:	e0e1      	b.n	800509e <UART_SetConfig+0x282>
 8004eda:	2308      	movs	r3, #8
 8004edc:	76fb      	strb	r3, [r7, #27]
 8004ede:	e0de      	b.n	800509e <UART_SetConfig+0x282>
 8004ee0:	2310      	movs	r3, #16
 8004ee2:	76fb      	strb	r3, [r7, #27]
 8004ee4:	e0db      	b.n	800509e <UART_SetConfig+0x282>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a88      	ldr	r2, [pc, #544]	; (800510c <UART_SetConfig+0x2f0>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d132      	bne.n	8004f56 <UART_SetConfig+0x13a>
 8004ef0:	4b85      	ldr	r3, [pc, #532]	; (8005108 <UART_SetConfig+0x2ec>)
 8004ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ef6:	f003 030c 	and.w	r3, r3, #12
 8004efa:	2b0c      	cmp	r3, #12
 8004efc:	d828      	bhi.n	8004f50 <UART_SetConfig+0x134>
 8004efe:	a201      	add	r2, pc, #4	; (adr r2, 8004f04 <UART_SetConfig+0xe8>)
 8004f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f04:	08004f39 	.word	0x08004f39
 8004f08:	08004f51 	.word	0x08004f51
 8004f0c:	08004f51 	.word	0x08004f51
 8004f10:	08004f51 	.word	0x08004f51
 8004f14:	08004f45 	.word	0x08004f45
 8004f18:	08004f51 	.word	0x08004f51
 8004f1c:	08004f51 	.word	0x08004f51
 8004f20:	08004f51 	.word	0x08004f51
 8004f24:	08004f3f 	.word	0x08004f3f
 8004f28:	08004f51 	.word	0x08004f51
 8004f2c:	08004f51 	.word	0x08004f51
 8004f30:	08004f51 	.word	0x08004f51
 8004f34:	08004f4b 	.word	0x08004f4b
 8004f38:	2300      	movs	r3, #0
 8004f3a:	76fb      	strb	r3, [r7, #27]
 8004f3c:	e0af      	b.n	800509e <UART_SetConfig+0x282>
 8004f3e:	2302      	movs	r3, #2
 8004f40:	76fb      	strb	r3, [r7, #27]
 8004f42:	e0ac      	b.n	800509e <UART_SetConfig+0x282>
 8004f44:	2304      	movs	r3, #4
 8004f46:	76fb      	strb	r3, [r7, #27]
 8004f48:	e0a9      	b.n	800509e <UART_SetConfig+0x282>
 8004f4a:	2308      	movs	r3, #8
 8004f4c:	76fb      	strb	r3, [r7, #27]
 8004f4e:	e0a6      	b.n	800509e <UART_SetConfig+0x282>
 8004f50:	2310      	movs	r3, #16
 8004f52:	76fb      	strb	r3, [r7, #27]
 8004f54:	e0a3      	b.n	800509e <UART_SetConfig+0x282>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a6d      	ldr	r2, [pc, #436]	; (8005110 <UART_SetConfig+0x2f4>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d120      	bne.n	8004fa2 <UART_SetConfig+0x186>
 8004f60:	4b69      	ldr	r3, [pc, #420]	; (8005108 <UART_SetConfig+0x2ec>)
 8004f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f66:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004f6a:	2b30      	cmp	r3, #48	; 0x30
 8004f6c:	d013      	beq.n	8004f96 <UART_SetConfig+0x17a>
 8004f6e:	2b30      	cmp	r3, #48	; 0x30
 8004f70:	d814      	bhi.n	8004f9c <UART_SetConfig+0x180>
 8004f72:	2b20      	cmp	r3, #32
 8004f74:	d009      	beq.n	8004f8a <UART_SetConfig+0x16e>
 8004f76:	2b20      	cmp	r3, #32
 8004f78:	d810      	bhi.n	8004f9c <UART_SetConfig+0x180>
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d002      	beq.n	8004f84 <UART_SetConfig+0x168>
 8004f7e:	2b10      	cmp	r3, #16
 8004f80:	d006      	beq.n	8004f90 <UART_SetConfig+0x174>
 8004f82:	e00b      	b.n	8004f9c <UART_SetConfig+0x180>
 8004f84:	2300      	movs	r3, #0
 8004f86:	76fb      	strb	r3, [r7, #27]
 8004f88:	e089      	b.n	800509e <UART_SetConfig+0x282>
 8004f8a:	2302      	movs	r3, #2
 8004f8c:	76fb      	strb	r3, [r7, #27]
 8004f8e:	e086      	b.n	800509e <UART_SetConfig+0x282>
 8004f90:	2304      	movs	r3, #4
 8004f92:	76fb      	strb	r3, [r7, #27]
 8004f94:	e083      	b.n	800509e <UART_SetConfig+0x282>
 8004f96:	2308      	movs	r3, #8
 8004f98:	76fb      	strb	r3, [r7, #27]
 8004f9a:	e080      	b.n	800509e <UART_SetConfig+0x282>
 8004f9c:	2310      	movs	r3, #16
 8004f9e:	76fb      	strb	r3, [r7, #27]
 8004fa0:	e07d      	b.n	800509e <UART_SetConfig+0x282>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a5b      	ldr	r2, [pc, #364]	; (8005114 <UART_SetConfig+0x2f8>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d120      	bne.n	8004fee <UART_SetConfig+0x1d2>
 8004fac:	4b56      	ldr	r3, [pc, #344]	; (8005108 <UART_SetConfig+0x2ec>)
 8004fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004fb6:	2bc0      	cmp	r3, #192	; 0xc0
 8004fb8:	d013      	beq.n	8004fe2 <UART_SetConfig+0x1c6>
 8004fba:	2bc0      	cmp	r3, #192	; 0xc0
 8004fbc:	d814      	bhi.n	8004fe8 <UART_SetConfig+0x1cc>
 8004fbe:	2b80      	cmp	r3, #128	; 0x80
 8004fc0:	d009      	beq.n	8004fd6 <UART_SetConfig+0x1ba>
 8004fc2:	2b80      	cmp	r3, #128	; 0x80
 8004fc4:	d810      	bhi.n	8004fe8 <UART_SetConfig+0x1cc>
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d002      	beq.n	8004fd0 <UART_SetConfig+0x1b4>
 8004fca:	2b40      	cmp	r3, #64	; 0x40
 8004fcc:	d006      	beq.n	8004fdc <UART_SetConfig+0x1c0>
 8004fce:	e00b      	b.n	8004fe8 <UART_SetConfig+0x1cc>
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	76fb      	strb	r3, [r7, #27]
 8004fd4:	e063      	b.n	800509e <UART_SetConfig+0x282>
 8004fd6:	2302      	movs	r3, #2
 8004fd8:	76fb      	strb	r3, [r7, #27]
 8004fda:	e060      	b.n	800509e <UART_SetConfig+0x282>
 8004fdc:	2304      	movs	r3, #4
 8004fde:	76fb      	strb	r3, [r7, #27]
 8004fe0:	e05d      	b.n	800509e <UART_SetConfig+0x282>
 8004fe2:	2308      	movs	r3, #8
 8004fe4:	76fb      	strb	r3, [r7, #27]
 8004fe6:	e05a      	b.n	800509e <UART_SetConfig+0x282>
 8004fe8:	2310      	movs	r3, #16
 8004fea:	76fb      	strb	r3, [r7, #27]
 8004fec:	e057      	b.n	800509e <UART_SetConfig+0x282>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a49      	ldr	r2, [pc, #292]	; (8005118 <UART_SetConfig+0x2fc>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d125      	bne.n	8005044 <UART_SetConfig+0x228>
 8004ff8:	4b43      	ldr	r3, [pc, #268]	; (8005108 <UART_SetConfig+0x2ec>)
 8004ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ffe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005002:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005006:	d017      	beq.n	8005038 <UART_SetConfig+0x21c>
 8005008:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800500c:	d817      	bhi.n	800503e <UART_SetConfig+0x222>
 800500e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005012:	d00b      	beq.n	800502c <UART_SetConfig+0x210>
 8005014:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005018:	d811      	bhi.n	800503e <UART_SetConfig+0x222>
 800501a:	2b00      	cmp	r3, #0
 800501c:	d003      	beq.n	8005026 <UART_SetConfig+0x20a>
 800501e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005022:	d006      	beq.n	8005032 <UART_SetConfig+0x216>
 8005024:	e00b      	b.n	800503e <UART_SetConfig+0x222>
 8005026:	2300      	movs	r3, #0
 8005028:	76fb      	strb	r3, [r7, #27]
 800502a:	e038      	b.n	800509e <UART_SetConfig+0x282>
 800502c:	2302      	movs	r3, #2
 800502e:	76fb      	strb	r3, [r7, #27]
 8005030:	e035      	b.n	800509e <UART_SetConfig+0x282>
 8005032:	2304      	movs	r3, #4
 8005034:	76fb      	strb	r3, [r7, #27]
 8005036:	e032      	b.n	800509e <UART_SetConfig+0x282>
 8005038:	2308      	movs	r3, #8
 800503a:	76fb      	strb	r3, [r7, #27]
 800503c:	e02f      	b.n	800509e <UART_SetConfig+0x282>
 800503e:	2310      	movs	r3, #16
 8005040:	76fb      	strb	r3, [r7, #27]
 8005042:	e02c      	b.n	800509e <UART_SetConfig+0x282>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a2d      	ldr	r2, [pc, #180]	; (8005100 <UART_SetConfig+0x2e4>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d125      	bne.n	800509a <UART_SetConfig+0x27e>
 800504e:	4b2e      	ldr	r3, [pc, #184]	; (8005108 <UART_SetConfig+0x2ec>)
 8005050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005054:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005058:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800505c:	d017      	beq.n	800508e <UART_SetConfig+0x272>
 800505e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005062:	d817      	bhi.n	8005094 <UART_SetConfig+0x278>
 8005064:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005068:	d00b      	beq.n	8005082 <UART_SetConfig+0x266>
 800506a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800506e:	d811      	bhi.n	8005094 <UART_SetConfig+0x278>
 8005070:	2b00      	cmp	r3, #0
 8005072:	d003      	beq.n	800507c <UART_SetConfig+0x260>
 8005074:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005078:	d006      	beq.n	8005088 <UART_SetConfig+0x26c>
 800507a:	e00b      	b.n	8005094 <UART_SetConfig+0x278>
 800507c:	2300      	movs	r3, #0
 800507e:	76fb      	strb	r3, [r7, #27]
 8005080:	e00d      	b.n	800509e <UART_SetConfig+0x282>
 8005082:	2302      	movs	r3, #2
 8005084:	76fb      	strb	r3, [r7, #27]
 8005086:	e00a      	b.n	800509e <UART_SetConfig+0x282>
 8005088:	2304      	movs	r3, #4
 800508a:	76fb      	strb	r3, [r7, #27]
 800508c:	e007      	b.n	800509e <UART_SetConfig+0x282>
 800508e:	2308      	movs	r3, #8
 8005090:	76fb      	strb	r3, [r7, #27]
 8005092:	e004      	b.n	800509e <UART_SetConfig+0x282>
 8005094:	2310      	movs	r3, #16
 8005096:	76fb      	strb	r3, [r7, #27]
 8005098:	e001      	b.n	800509e <UART_SetConfig+0x282>
 800509a:	2310      	movs	r3, #16
 800509c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a17      	ldr	r2, [pc, #92]	; (8005100 <UART_SetConfig+0x2e4>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	f040 8087 	bne.w	80051b8 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80050aa:	7efb      	ldrb	r3, [r7, #27]
 80050ac:	2b08      	cmp	r3, #8
 80050ae:	d837      	bhi.n	8005120 <UART_SetConfig+0x304>
 80050b0:	a201      	add	r2, pc, #4	; (adr r2, 80050b8 <UART_SetConfig+0x29c>)
 80050b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b6:	bf00      	nop
 80050b8:	080050dd 	.word	0x080050dd
 80050bc:	08005121 	.word	0x08005121
 80050c0:	080050e5 	.word	0x080050e5
 80050c4:	08005121 	.word	0x08005121
 80050c8:	080050eb 	.word	0x080050eb
 80050cc:	08005121 	.word	0x08005121
 80050d0:	08005121 	.word	0x08005121
 80050d4:	08005121 	.word	0x08005121
 80050d8:	080050f3 	.word	0x080050f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050dc:	f7fd ff4e 	bl	8002f7c <HAL_RCC_GetPCLK1Freq>
 80050e0:	6178      	str	r0, [r7, #20]
        break;
 80050e2:	e022      	b.n	800512a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050e4:	4b0d      	ldr	r3, [pc, #52]	; (800511c <UART_SetConfig+0x300>)
 80050e6:	617b      	str	r3, [r7, #20]
        break;
 80050e8:	e01f      	b.n	800512a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050ea:	f7fd feaf 	bl	8002e4c <HAL_RCC_GetSysClockFreq>
 80050ee:	6178      	str	r0, [r7, #20]
        break;
 80050f0:	e01b      	b.n	800512a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050f6:	617b      	str	r3, [r7, #20]
        break;
 80050f8:	e017      	b.n	800512a <UART_SetConfig+0x30e>
 80050fa:	bf00      	nop
 80050fc:	efff69f3 	.word	0xefff69f3
 8005100:	40008000 	.word	0x40008000
 8005104:	40013800 	.word	0x40013800
 8005108:	40021000 	.word	0x40021000
 800510c:	40004400 	.word	0x40004400
 8005110:	40004800 	.word	0x40004800
 8005114:	40004c00 	.word	0x40004c00
 8005118:	40005000 	.word	0x40005000
 800511c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005120:	2300      	movs	r3, #0
 8005122:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	76bb      	strb	r3, [r7, #26]
        break;
 8005128:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	2b00      	cmp	r3, #0
 800512e:	f000 80f1 	beq.w	8005314 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685a      	ldr	r2, [r3, #4]
 8005136:	4613      	mov	r3, r2
 8005138:	005b      	lsls	r3, r3, #1
 800513a:	4413      	add	r3, r2
 800513c:	697a      	ldr	r2, [r7, #20]
 800513e:	429a      	cmp	r2, r3
 8005140:	d305      	bcc.n	800514e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005148:	697a      	ldr	r2, [r7, #20]
 800514a:	429a      	cmp	r2, r3
 800514c:	d902      	bls.n	8005154 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	76bb      	strb	r3, [r7, #26]
 8005152:	e0df      	b.n	8005314 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	4618      	mov	r0, r3
 8005158:	f04f 0100 	mov.w	r1, #0
 800515c:	f04f 0200 	mov.w	r2, #0
 8005160:	f04f 0300 	mov.w	r3, #0
 8005164:	020b      	lsls	r3, r1, #8
 8005166:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800516a:	0202      	lsls	r2, r0, #8
 800516c:	6879      	ldr	r1, [r7, #4]
 800516e:	6849      	ldr	r1, [r1, #4]
 8005170:	0849      	lsrs	r1, r1, #1
 8005172:	4608      	mov	r0, r1
 8005174:	f04f 0100 	mov.w	r1, #0
 8005178:	1814      	adds	r4, r2, r0
 800517a:	eb43 0501 	adc.w	r5, r3, r1
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	461a      	mov	r2, r3
 8005184:	f04f 0300 	mov.w	r3, #0
 8005188:	4620      	mov	r0, r4
 800518a:	4629      	mov	r1, r5
 800518c:	f7fb f81c 	bl	80001c8 <__aeabi_uldivmod>
 8005190:	4602      	mov	r2, r0
 8005192:	460b      	mov	r3, r1
 8005194:	4613      	mov	r3, r2
 8005196:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800519e:	d308      	bcc.n	80051b2 <UART_SetConfig+0x396>
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051a6:	d204      	bcs.n	80051b2 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	693a      	ldr	r2, [r7, #16]
 80051ae:	60da      	str	r2, [r3, #12]
 80051b0:	e0b0      	b.n	8005314 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	76bb      	strb	r3, [r7, #26]
 80051b6:	e0ad      	b.n	8005314 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	69db      	ldr	r3, [r3, #28]
 80051bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051c0:	d15b      	bne.n	800527a <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 80051c2:	7efb      	ldrb	r3, [r7, #27]
 80051c4:	2b08      	cmp	r3, #8
 80051c6:	d828      	bhi.n	800521a <UART_SetConfig+0x3fe>
 80051c8:	a201      	add	r2, pc, #4	; (adr r2, 80051d0 <UART_SetConfig+0x3b4>)
 80051ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ce:	bf00      	nop
 80051d0:	080051f5 	.word	0x080051f5
 80051d4:	080051fd 	.word	0x080051fd
 80051d8:	08005205 	.word	0x08005205
 80051dc:	0800521b 	.word	0x0800521b
 80051e0:	0800520b 	.word	0x0800520b
 80051e4:	0800521b 	.word	0x0800521b
 80051e8:	0800521b 	.word	0x0800521b
 80051ec:	0800521b 	.word	0x0800521b
 80051f0:	08005213 	.word	0x08005213
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051f4:	f7fd fec2 	bl	8002f7c <HAL_RCC_GetPCLK1Freq>
 80051f8:	6178      	str	r0, [r7, #20]
        break;
 80051fa:	e013      	b.n	8005224 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051fc:	f7fd fed4 	bl	8002fa8 <HAL_RCC_GetPCLK2Freq>
 8005200:	6178      	str	r0, [r7, #20]
        break;
 8005202:	e00f      	b.n	8005224 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005204:	4b49      	ldr	r3, [pc, #292]	; (800532c <UART_SetConfig+0x510>)
 8005206:	617b      	str	r3, [r7, #20]
        break;
 8005208:	e00c      	b.n	8005224 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800520a:	f7fd fe1f 	bl	8002e4c <HAL_RCC_GetSysClockFreq>
 800520e:	6178      	str	r0, [r7, #20]
        break;
 8005210:	e008      	b.n	8005224 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005212:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005216:	617b      	str	r3, [r7, #20]
        break;
 8005218:	e004      	b.n	8005224 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800521a:	2300      	movs	r3, #0
 800521c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	76bb      	strb	r3, [r7, #26]
        break;
 8005222:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d074      	beq.n	8005314 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	005a      	lsls	r2, r3, #1
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	085b      	lsrs	r3, r3, #1
 8005234:	441a      	add	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	fbb2 f3f3 	udiv	r3, r2, r3
 800523e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	2b0f      	cmp	r3, #15
 8005244:	d916      	bls.n	8005274 <UART_SetConfig+0x458>
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800524c:	d212      	bcs.n	8005274 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	b29b      	uxth	r3, r3
 8005252:	f023 030f 	bic.w	r3, r3, #15
 8005256:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	085b      	lsrs	r3, r3, #1
 800525c:	b29b      	uxth	r3, r3
 800525e:	f003 0307 	and.w	r3, r3, #7
 8005262:	b29a      	uxth	r2, r3
 8005264:	89fb      	ldrh	r3, [r7, #14]
 8005266:	4313      	orrs	r3, r2
 8005268:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	89fa      	ldrh	r2, [r7, #14]
 8005270:	60da      	str	r2, [r3, #12]
 8005272:	e04f      	b.n	8005314 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	76bb      	strb	r3, [r7, #26]
 8005278:	e04c      	b.n	8005314 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800527a:	7efb      	ldrb	r3, [r7, #27]
 800527c:	2b08      	cmp	r3, #8
 800527e:	d828      	bhi.n	80052d2 <UART_SetConfig+0x4b6>
 8005280:	a201      	add	r2, pc, #4	; (adr r2, 8005288 <UART_SetConfig+0x46c>)
 8005282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005286:	bf00      	nop
 8005288:	080052ad 	.word	0x080052ad
 800528c:	080052b5 	.word	0x080052b5
 8005290:	080052bd 	.word	0x080052bd
 8005294:	080052d3 	.word	0x080052d3
 8005298:	080052c3 	.word	0x080052c3
 800529c:	080052d3 	.word	0x080052d3
 80052a0:	080052d3 	.word	0x080052d3
 80052a4:	080052d3 	.word	0x080052d3
 80052a8:	080052cb 	.word	0x080052cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052ac:	f7fd fe66 	bl	8002f7c <HAL_RCC_GetPCLK1Freq>
 80052b0:	6178      	str	r0, [r7, #20]
        break;
 80052b2:	e013      	b.n	80052dc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052b4:	f7fd fe78 	bl	8002fa8 <HAL_RCC_GetPCLK2Freq>
 80052b8:	6178      	str	r0, [r7, #20]
        break;
 80052ba:	e00f      	b.n	80052dc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052bc:	4b1b      	ldr	r3, [pc, #108]	; (800532c <UART_SetConfig+0x510>)
 80052be:	617b      	str	r3, [r7, #20]
        break;
 80052c0:	e00c      	b.n	80052dc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052c2:	f7fd fdc3 	bl	8002e4c <HAL_RCC_GetSysClockFreq>
 80052c6:	6178      	str	r0, [r7, #20]
        break;
 80052c8:	e008      	b.n	80052dc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052ce:	617b      	str	r3, [r7, #20]
        break;
 80052d0:	e004      	b.n	80052dc <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80052d2:	2300      	movs	r3, #0
 80052d4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	76bb      	strb	r3, [r7, #26]
        break;
 80052da:	bf00      	nop
    }

    if (pclk != 0U)
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d018      	beq.n	8005314 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	085a      	lsrs	r2, r3, #1
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	441a      	add	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	2b0f      	cmp	r3, #15
 80052fa:	d909      	bls.n	8005310 <UART_SetConfig+0x4f4>
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005302:	d205      	bcs.n	8005310 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	b29a      	uxth	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	60da      	str	r2, [r3, #12]
 800530e:	e001      	b.n	8005314 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005320:	7ebb      	ldrb	r3, [r7, #26]
}
 8005322:	4618      	mov	r0, r3
 8005324:	3720      	adds	r7, #32
 8005326:	46bd      	mov	sp, r7
 8005328:	bdb0      	pop	{r4, r5, r7, pc}
 800532a:	bf00      	nop
 800532c:	00f42400 	.word	0x00f42400

08005330 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533c:	f003 0301 	and.w	r3, r3, #1
 8005340:	2b00      	cmp	r3, #0
 8005342:	d00a      	beq.n	800535a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	430a      	orrs	r2, r1
 8005358:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535e:	f003 0302 	and.w	r3, r3, #2
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00a      	beq.n	800537c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	430a      	orrs	r2, r1
 800537a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005380:	f003 0304 	and.w	r3, r3, #4
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00a      	beq.n	800539e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	430a      	orrs	r2, r1
 800539c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a2:	f003 0308 	and.w	r3, r3, #8
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00a      	beq.n	80053c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	430a      	orrs	r2, r1
 80053be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c4:	f003 0310 	and.w	r3, r3, #16
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d00a      	beq.n	80053e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	430a      	orrs	r2, r1
 80053e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e6:	f003 0320 	and.w	r3, r3, #32
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00a      	beq.n	8005404 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	430a      	orrs	r2, r1
 8005402:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800540c:	2b00      	cmp	r3, #0
 800540e:	d01a      	beq.n	8005446 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	430a      	orrs	r2, r1
 8005424:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800542e:	d10a      	bne.n	8005446 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	430a      	orrs	r2, r1
 8005444:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00a      	beq.n	8005468 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	430a      	orrs	r2, r1
 8005466:	605a      	str	r2, [r3, #4]
  }
}
 8005468:	bf00      	nop
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b086      	sub	sp, #24
 8005478:	af02      	add	r7, sp, #8
 800547a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005484:	f7fb fd1c 	bl	8000ec0 <HAL_GetTick>
 8005488:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 0308 	and.w	r3, r3, #8
 8005494:	2b08      	cmp	r3, #8
 8005496:	d10e      	bne.n	80054b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005498:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800549c:	9300      	str	r3, [sp, #0]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 f82d 	bl	8005506 <UART_WaitOnFlagUntilTimeout>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d001      	beq.n	80054b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e023      	b.n	80054fe <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0304 	and.w	r3, r3, #4
 80054c0:	2b04      	cmp	r3, #4
 80054c2:	d10e      	bne.n	80054e2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054c8:	9300      	str	r3, [sp, #0]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 f817 	bl	8005506 <UART_WaitOnFlagUntilTimeout>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d001      	beq.n	80054e2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e00d      	b.n	80054fe <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2220      	movs	r2, #32
 80054e6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2220      	movs	r2, #32
 80054ec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3710      	adds	r7, #16
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}

08005506 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005506:	b580      	push	{r7, lr}
 8005508:	b09c      	sub	sp, #112	; 0x70
 800550a:	af00      	add	r7, sp, #0
 800550c:	60f8      	str	r0, [r7, #12]
 800550e:	60b9      	str	r1, [r7, #8]
 8005510:	603b      	str	r3, [r7, #0]
 8005512:	4613      	mov	r3, r2
 8005514:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005516:	e0a5      	b.n	8005664 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005518:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800551a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800551e:	f000 80a1 	beq.w	8005664 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005522:	f7fb fccd 	bl	8000ec0 <HAL_GetTick>
 8005526:	4602      	mov	r2, r0
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	1ad3      	subs	r3, r2, r3
 800552c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800552e:	429a      	cmp	r2, r3
 8005530:	d302      	bcc.n	8005538 <UART_WaitOnFlagUntilTimeout+0x32>
 8005532:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005534:	2b00      	cmp	r3, #0
 8005536:	d13e      	bne.n	80055b6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800553e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005540:	e853 3f00 	ldrex	r3, [r3]
 8005544:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005546:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005548:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800554c:	667b      	str	r3, [r7, #100]	; 0x64
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	461a      	mov	r2, r3
 8005554:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005556:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005558:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800555a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800555c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800555e:	e841 2300 	strex	r3, r2, [r1]
 8005562:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005564:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005566:	2b00      	cmp	r3, #0
 8005568:	d1e6      	bne.n	8005538 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	3308      	adds	r3, #8
 8005570:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005574:	e853 3f00 	ldrex	r3, [r3]
 8005578:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800557a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800557c:	f023 0301 	bic.w	r3, r3, #1
 8005580:	663b      	str	r3, [r7, #96]	; 0x60
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	3308      	adds	r3, #8
 8005588:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800558a:	64ba      	str	r2, [r7, #72]	; 0x48
 800558c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800558e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005590:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005592:	e841 2300 	strex	r3, r2, [r1]
 8005596:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005598:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800559a:	2b00      	cmp	r3, #0
 800559c:	d1e5      	bne.n	800556a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2220      	movs	r2, #32
 80055a2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2220      	movs	r2, #32
 80055a8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	e067      	b.n	8005686 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0304 	and.w	r3, r3, #4
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d04f      	beq.n	8005664 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	69db      	ldr	r3, [r3, #28]
 80055ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055d2:	d147      	bne.n	8005664 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055dc:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e6:	e853 3f00 	ldrex	r3, [r3]
 80055ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80055f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	461a      	mov	r2, r3
 80055fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055fc:	637b      	str	r3, [r7, #52]	; 0x34
 80055fe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005600:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005602:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005604:	e841 2300 	strex	r3, r2, [r1]
 8005608:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800560a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800560c:	2b00      	cmp	r3, #0
 800560e:	d1e6      	bne.n	80055de <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	3308      	adds	r3, #8
 8005616:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	e853 3f00 	ldrex	r3, [r3]
 800561e:	613b      	str	r3, [r7, #16]
   return(result);
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	f023 0301 	bic.w	r3, r3, #1
 8005626:	66bb      	str	r3, [r7, #104]	; 0x68
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	3308      	adds	r3, #8
 800562e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005630:	623a      	str	r2, [r7, #32]
 8005632:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005634:	69f9      	ldr	r1, [r7, #28]
 8005636:	6a3a      	ldr	r2, [r7, #32]
 8005638:	e841 2300 	strex	r3, r2, [r1]
 800563c:	61bb      	str	r3, [r7, #24]
   return(result);
 800563e:	69bb      	ldr	r3, [r7, #24]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d1e5      	bne.n	8005610 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2220      	movs	r2, #32
 8005648:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2220      	movs	r2, #32
 800564e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2220      	movs	r2, #32
 8005654:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2200      	movs	r2, #0
 800565c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005660:	2303      	movs	r3, #3
 8005662:	e010      	b.n	8005686 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	69da      	ldr	r2, [r3, #28]
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	4013      	ands	r3, r2
 800566e:	68ba      	ldr	r2, [r7, #8]
 8005670:	429a      	cmp	r2, r3
 8005672:	bf0c      	ite	eq
 8005674:	2301      	moveq	r3, #1
 8005676:	2300      	movne	r3, #0
 8005678:	b2db      	uxtb	r3, r3
 800567a:	461a      	mov	r2, r3
 800567c:	79fb      	ldrb	r3, [r7, #7]
 800567e:	429a      	cmp	r2, r3
 8005680:	f43f af4a 	beq.w	8005518 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3770      	adds	r7, #112	; 0x70
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
	...

08005690 <__libc_init_array>:
 8005690:	b570      	push	{r4, r5, r6, lr}
 8005692:	4d0d      	ldr	r5, [pc, #52]	; (80056c8 <__libc_init_array+0x38>)
 8005694:	4c0d      	ldr	r4, [pc, #52]	; (80056cc <__libc_init_array+0x3c>)
 8005696:	1b64      	subs	r4, r4, r5
 8005698:	10a4      	asrs	r4, r4, #2
 800569a:	2600      	movs	r6, #0
 800569c:	42a6      	cmp	r6, r4
 800569e:	d109      	bne.n	80056b4 <__libc_init_array+0x24>
 80056a0:	4d0b      	ldr	r5, [pc, #44]	; (80056d0 <__libc_init_array+0x40>)
 80056a2:	4c0c      	ldr	r4, [pc, #48]	; (80056d4 <__libc_init_array+0x44>)
 80056a4:	f000 f820 	bl	80056e8 <_init>
 80056a8:	1b64      	subs	r4, r4, r5
 80056aa:	10a4      	asrs	r4, r4, #2
 80056ac:	2600      	movs	r6, #0
 80056ae:	42a6      	cmp	r6, r4
 80056b0:	d105      	bne.n	80056be <__libc_init_array+0x2e>
 80056b2:	bd70      	pop	{r4, r5, r6, pc}
 80056b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80056b8:	4798      	blx	r3
 80056ba:	3601      	adds	r6, #1
 80056bc:	e7ee      	b.n	800569c <__libc_init_array+0xc>
 80056be:	f855 3b04 	ldr.w	r3, [r5], #4
 80056c2:	4798      	blx	r3
 80056c4:	3601      	adds	r6, #1
 80056c6:	e7f2      	b.n	80056ae <__libc_init_array+0x1e>
 80056c8:	080057ac 	.word	0x080057ac
 80056cc:	080057ac 	.word	0x080057ac
 80056d0:	080057ac 	.word	0x080057ac
 80056d4:	080057b0 	.word	0x080057b0

080056d8 <memset>:
 80056d8:	4402      	add	r2, r0
 80056da:	4603      	mov	r3, r0
 80056dc:	4293      	cmp	r3, r2
 80056de:	d100      	bne.n	80056e2 <memset+0xa>
 80056e0:	4770      	bx	lr
 80056e2:	f803 1b01 	strb.w	r1, [r3], #1
 80056e6:	e7f9      	b.n	80056dc <memset+0x4>

080056e8 <_init>:
 80056e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ea:	bf00      	nop
 80056ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ee:	bc08      	pop	{r3}
 80056f0:	469e      	mov	lr, r3
 80056f2:	4770      	bx	lr

080056f4 <_fini>:
 80056f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056f6:	bf00      	nop
 80056f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056fa:	bc08      	pop	{r3}
 80056fc:	469e      	mov	lr, r3
 80056fe:	4770      	bx	lr
