
1DOF_Bench.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077d8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08007968  08007968  00017968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007adc  08007adc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007adc  08007adc  00017adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ae4  08007ae4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ae4  08007ae4  00017ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ae8  08007ae8  00017ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007aec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  20000070  08007b5c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000022c  08007b5c  0002022c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d1ad  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fd8  00000000  00000000  0003d24d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001428  00000000  00000000  00040228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001300  00000000  00000000  00041650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a6e4  00000000  00000000  00042950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017656  00000000  00000000  0006d034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010a27d  00000000  00000000  0008468a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018e907  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d40  00000000  00000000  0018e95c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007950 	.word	0x08007950

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08007950 	.word	0x08007950

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800056a:	b09b      	sub	sp, #108	; 0x6c
 800056c:	af16      	add	r7, sp, #88	; 0x58
	/* USER CODE BEGIN 1 */
	enum states etat;
	etat = idle_mode;
 800056e:	2300      	movs	r3, #0
 8000570:	73fb      	strb	r3, [r7, #15]
#define valeur_min_moteur 1512


	int val;
	//char buffer [size];
	int k = 0;
 8000572:	2300      	movs	r3, #0
 8000574:	607b      	str	r3, [r7, #4]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000576:	f000 fe23 	bl	80011c0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800057a:	f000 f90d 	bl	8000798 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800057e:	f000 fa99 	bl	8000ab4 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000582:	f000 fa49 	bl	8000a18 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 8000586:	f000 f959 	bl	800083c <MX_ADC1_Init>
	MX_DMA_Init();
 800058a:	f000 fa75 	bl	8000a78 <MX_DMA_Init>
	MX_TIM3_Init();
 800058e:	f000 f9cb 	bl	8000928 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	// Light up green led
	setGreenLed();
 8000592:	f000 fafa 	bl	8000b8a <setGreenLed>
	// blink green led
	blinkGreenLed(10, 100);
 8000596:	2164      	movs	r1, #100	; 0x64
 8000598:	200a      	movs	r0, #10
 800059a:	f000 fb00 	bl	8000b9e <blinkGreenLed>
	// Welcome message on UART
	//sendWelcomeMsgRS232(&huart2);
	//la fonction au dessus pose des soucis
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800059e:	2104      	movs	r1, #4
 80005a0:	4871      	ldr	r0, [pc, #452]	; (8000768 <main+0x200>)
 80005a2:	f004 fb45 	bl	8004c30 <HAL_TIM_PWM_Start>
	//NOus mettons ici la valeur minimale pour emettre un signal vers notre ESC dans notre registre capture and compare register
	TIM3->CCR2 = valeur_min_moteur;
 80005a6:	4b71      	ldr	r3, [pc, #452]	; (800076c <main+0x204>)
 80005a8:	f44f 62bd 	mov.w	r2, #1512	; 0x5e8
 80005ac:	639a      	str	r2, [r3, #56]	; 0x38
	y_print(&huart2, " 0 to 6 to change state \r\n", 26);
 80005ae:	221a      	movs	r2, #26
 80005b0:	496f      	ldr	r1, [pc, #444]	; (8000770 <main+0x208>)
 80005b2:	4870      	ldr	r0, [pc, #448]	; (8000774 <main+0x20c>)
 80005b4:	f000 fdc3 	bl	800113e <y_print>
	HAL_Delay(5000);
 80005b8:	f241 3088 	movw	r0, #5000	; 0x1388
 80005bc:	f000 fe7c 	bl	80012b8 <HAL_Delay>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		__HAL_UART_CLEAR_OREFLAG(&huart2);
 80005c0:	4b6c      	ldr	r3, [pc, #432]	; (8000774 <main+0x20c>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	2208      	movs	r2, #8
 80005c6:	621a      	str	r2, [r3, #32]

		//differents etats qu'on peut avoir
		//idle_mode,init_uc,init_motor,motor_ready,manual_mode,auto_mode,info_mode
		val = load_adc(hadc1, 5);
 80005c8:	4c6b      	ldr	r4, [pc, #428]	; (8000778 <main+0x210>)
 80005ca:	2305      	movs	r3, #5
 80005cc:	9315      	str	r3, [sp, #84]	; 0x54
 80005ce:	4668      	mov	r0, sp
 80005d0:	f104 0310 	add.w	r3, r4, #16
 80005d4:	2254      	movs	r2, #84	; 0x54
 80005d6:	4619      	mov	r1, r3
 80005d8:	f006 fa4e 	bl	8006a78 <memcpy>
 80005dc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80005e0:	f000 fd82 	bl	80010e8 <load_adc>
 80005e4:	60b8      	str	r0, [r7, #8]
		if (val > 2025)
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	f240 72e9 	movw	r2, #2025	; 0x7e9
 80005ec:	4293      	cmp	r3, r2
 80005ee:	dd02      	ble.n	80005f6 <main+0x8e>
			val = 2025;
 80005f0:	f240 73e9 	movw	r3, #2025	; 0x7e9
 80005f4:	60bb      	str	r3, [r7, #8]
		//sprintf(valchar,"%d \n\r",val);
		load_pwm(htim3, val);
 80005f6:	4e5c      	ldr	r6, [pc, #368]	; (8000768 <main+0x200>)
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	930f      	str	r3, [sp, #60]	; 0x3c
 80005fc:	466d      	mov	r5, sp
 80005fe:	f106 0410 	add.w	r4, r6, #16
 8000602:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000604:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000606:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000608:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800060a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800060c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800060e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000612:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000616:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800061a:	f000 fd81 	bl	8001120 <load_pwm>
		//Error_Handler();
		//load_pwm(htim3, 1400);
		//HAL_Delay(1000);
		//---------changement d'etat-------

		switch (etat) {
 800061e:	7bfb      	ldrb	r3, [r7, #15]
 8000620:	2b06      	cmp	r3, #6
 8000622:	f200 808f 	bhi.w	8000744 <main+0x1dc>
 8000626:	a201      	add	r2, pc, #4	; (adr r2, 800062c <main+0xc4>)
 8000628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800062c:	08000649 	.word	0x08000649
 8000630:	08000665 	.word	0x08000665
 8000634:	080006c5 	.word	0x080006c5
 8000638:	080006e5 	.word	0x080006e5
 800063c:	08000725 	.word	0x08000725
 8000640:	08000705 	.word	0x08000705
 8000644:	08000679 	.word	0x08000679

		case idle_mode:
			//traitement des sorties

			HAL_Delay(1000);
 8000648:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800064c:	f000 fe34 	bl	80012b8 <HAL_Delay>
			//if (HAL_UART_Transmit(&huart2, (uint8_t*) "Idle mode \n\r", 15, 100)
			//		!= HAL_OK)
			//	Error_Handler();
			printf("Idle Mode\n\r");
 8000650:	484a      	ldr	r0, [pc, #296]	; (800077c <main+0x214>)
 8000652:	f006 fa27 	bl	8006aa4 <iprintf>
			HAL_Delay(3000);
 8000656:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800065a:	f000 fe2d 	bl	80012b8 <HAL_Delay>
			//traitement des entrées (transitions)
			etat = init_uc;
 800065e:	2301      	movs	r3, #1
 8000660:	73fb      	strb	r3, [r7, #15]
			break;
 8000662:	e070      	b.n	8000746 <main+0x1de>
		case init_uc:
			//traitement des sorties
			/*if (HAL_UART_Transmit(&huart2, (uint8_t*) "UC Initialization \n\r", 22,
			 100) != HAL_OK)
			 Error_Handler();*/
			printf("Init Micro Controleur\n\r");
 8000664:	4846      	ldr	r0, [pc, #280]	; (8000780 <main+0x218>)
 8000666:	f006 fa1d 	bl	8006aa4 <iprintf>
			HAL_Delay(3000);
 800066a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800066e:	f000 fe23 	bl	80012b8 <HAL_Delay>
			//traitement des entrées (transitions)
			etat = info_mode;
 8000672:	2306      	movs	r3, #6
 8000674:	73fb      	strb	r3, [r7, #15]
			break;
 8000676:	e066      	b.n	8000746 <main+0x1de>

		case info_mode:
			//if (HAL_UART_Transmit(&huart2, (uint8_t*) "Info mode\n\r", 12, 100)
			//	!= HAL_OK)
			//Error_Handler();
			printf("Info mode\n\r");
 8000678:	4842      	ldr	r0, [pc, #264]	; (8000784 <main+0x21c>)
 800067a:	f006 fa13 	bl	8006aa4 <iprintf>
			HAL_Delay(3000);
 800067e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000682:	f000 fe19 	bl	80012b8 <HAL_Delay>
			//sortie de la boucle
			do {
				r_buffer[0] = ' ';
 8000686:	2320      	movs	r3, #32
 8000688:	703b      	strb	r3, [r7, #0]
				if (HAL_UART_Receive(&huart2, (uint8_t*) r_buffer, 2, 10)
 800068a:	4639      	mov	r1, r7
 800068c:	230a      	movs	r3, #10
 800068e:	2202      	movs	r2, #2
 8000690:	4838      	ldr	r0, [pc, #224]	; (8000774 <main+0x20c>)
 8000692:	f005 fcbb 	bl	800600c <HAL_UART_Receive>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d10b      	bne.n	80006b4 <main+0x14c>
						== HAL_OK) {
					HAL_Delay(50);
 800069c:	2032      	movs	r0, #50	; 0x32
 800069e:	f000 fe0b 	bl	80012b8 <HAL_Delay>
					HAL_UART_Transmit(&huart2, (uint8_t*) r_buffer, 2, 10);
 80006a2:	4639      	mov	r1, r7
 80006a4:	230a      	movs	r3, #10
 80006a6:	2202      	movs	r2, #2
 80006a8:	4832      	ldr	r0, [pc, #200]	; (8000774 <main+0x20c>)
 80006aa:	f005 fc1b 	bl	8005ee4 <HAL_UART_Transmit>
					HAL_Delay(50);
 80006ae:	2032      	movs	r0, #50	; 0x32
 80006b0:	f000 fe02 	bl	80012b8 <HAL_Delay>
				}

			} while (r_buffer[0] != '0');
 80006b4:	783b      	ldrb	r3, [r7, #0]
 80006b6:	2b30      	cmp	r3, #48	; 0x30
 80006b8:	d1e5      	bne.n	8000686 <main+0x11e>

			etat = idle_mode;
 80006ba:	2300      	movs	r3, #0
 80006bc:	73fb      	strb	r3, [r7, #15]
			// Reinitialisation du buffer
			r_buffer[0] = 0;
 80006be:	2300      	movs	r3, #0
 80006c0:	703b      	strb	r3, [r7, #0]

			//le programme freeze dans l'etat info
			break;
 80006c2:	e040      	b.n	8000746 <main+0x1de>

		case init_motor:
			if (HAL_UART_Transmit(&huart2,
 80006c4:	2364      	movs	r3, #100	; 0x64
 80006c6:	2218      	movs	r2, #24
 80006c8:	492f      	ldr	r1, [pc, #188]	; (8000788 <main+0x220>)
 80006ca:	482a      	ldr	r0, [pc, #168]	; (8000774 <main+0x20c>)
 80006cc:	f005 fc0a 	bl	8005ee4 <HAL_UART_Transmit>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <main+0x172>
					(uint8_t*) "Motor Initialization \n\r", 24, 100) != HAL_OK)
				Error_Handler();
 80006d6:	f000 fa53 	bl	8000b80 <Error_Handler>
			HAL_Delay(3000);
 80006da:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80006de:	f000 fdeb 	bl	80012b8 <HAL_Delay>
			break;
 80006e2:	e030      	b.n	8000746 <main+0x1de>

		case motor_ready:
			if (HAL_UART_Transmit(&huart2, (uint8_t*) "Motor ready \n\r", 15,
 80006e4:	2364      	movs	r3, #100	; 0x64
 80006e6:	220f      	movs	r2, #15
 80006e8:	4928      	ldr	r1, [pc, #160]	; (800078c <main+0x224>)
 80006ea:	4822      	ldr	r0, [pc, #136]	; (8000774 <main+0x20c>)
 80006ec:	f005 fbfa 	bl	8005ee4 <HAL_UART_Transmit>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <main+0x192>
					100) != HAL_OK)
				Error_Handler();
 80006f6:	f000 fa43 	bl	8000b80 <Error_Handler>
			HAL_Delay(3000);
 80006fa:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80006fe:	f000 fddb 	bl	80012b8 <HAL_Delay>

			break;
 8000702:	e020      	b.n	8000746 <main+0x1de>

		case auto_mode:
			if (HAL_UART_Transmit(&huart2, (uint8_t*) "Auto mode \n\r", 15, 100)
 8000704:	2364      	movs	r3, #100	; 0x64
 8000706:	220f      	movs	r2, #15
 8000708:	4921      	ldr	r1, [pc, #132]	; (8000790 <main+0x228>)
 800070a:	481a      	ldr	r0, [pc, #104]	; (8000774 <main+0x20c>)
 800070c:	f005 fbea 	bl	8005ee4 <HAL_UART_Transmit>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <main+0x1b2>
					!= HAL_OK)
				Error_Handler();
 8000716:	f000 fa33 	bl	8000b80 <Error_Handler>
			HAL_Delay(3000);
 800071a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800071e:	f000 fdcb 	bl	80012b8 <HAL_Delay>

			break;
 8000722:	e010      	b.n	8000746 <main+0x1de>

		case manual_mode:
			if (HAL_UART_Transmit(&huart2, (uint8_t*) "Manual mode \n\r", 15,
 8000724:	2364      	movs	r3, #100	; 0x64
 8000726:	220f      	movs	r2, #15
 8000728:	491a      	ldr	r1, [pc, #104]	; (8000794 <main+0x22c>)
 800072a:	4812      	ldr	r0, [pc, #72]	; (8000774 <main+0x20c>)
 800072c:	f005 fbda 	bl	8005ee4 <HAL_UART_Transmit>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <main+0x1d2>
					100) != HAL_OK)
				Error_Handler();
 8000736:	f000 fa23 	bl	8000b80 <Error_Handler>
			HAL_Delay(3000);
 800073a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800073e:	f000 fdbb 	bl	80012b8 <HAL_Delay>

			break;
 8000742:	e000      	b.n	8000746 <main+0x1de>
		default:
			break;
 8000744:	bf00      	nop
		 HAL_UART_Transmit(&huart2,(uint8_t*) r_buffer, 2, 10);
		 HAL_Delay(50);

		 }*/
		//idle_mode,init_uc,init_motor,motor_ready,manual_mode,auto_mode,info_mode
		if (HAL_UART_Receive(&huart2, (uint8_t*) r_buffer, 2, 10) == HAL_OK)
 8000746:	4639      	mov	r1, r7
 8000748:	230a      	movs	r3, #10
 800074a:	2202      	movs	r2, #2
 800074c:	4809      	ldr	r0, [pc, #36]	; (8000774 <main+0x20c>)
 800074e:	f005 fc5d 	bl	800600c <HAL_UART_Receive>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	f47f af33 	bne.w	80005c0 <main+0x58>
			HAL_UART_Transmit(&huart2, (uint8_t*) r_buffer, 2, 10);
 800075a:	4639      	mov	r1, r7
 800075c:	230a      	movs	r3, #10
 800075e:	2202      	movs	r2, #2
 8000760:	4804      	ldr	r0, [pc, #16]	; (8000774 <main+0x20c>)
 8000762:	f005 fbbf 	bl	8005ee4 <HAL_UART_Transmit>
		__HAL_UART_CLEAR_OREFLAG(&huart2);
 8000766:	e72b      	b.n	80005c0 <main+0x58>
 8000768:	20000120 	.word	0x20000120
 800076c:	40000400 	.word	0x40000400
 8000770:	08007968 	.word	0x08007968
 8000774:	2000009c 	.word	0x2000009c
 8000778:	2000016c 	.word	0x2000016c
 800077c:	08007984 	.word	0x08007984
 8000780:	08007990 	.word	0x08007990
 8000784:	080079a8 	.word	0x080079a8
 8000788:	080079b4 	.word	0x080079b4
 800078c:	080079cc 	.word	0x080079cc
 8000790:	080079dc 	.word	0x080079dc
 8000794:	080079ec 	.word	0x080079ec

08000798 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000798:	b580      	push	{r7, lr}
 800079a:	b096      	sub	sp, #88	; 0x58
 800079c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800079e:	f107 0314 	add.w	r3, r7, #20
 80007a2:	2244      	movs	r2, #68	; 0x44
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f006 f974 	bl	8006a94 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80007ac:	463b      	mov	r3, r7
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
 80007b8:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 80007ba:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007be:	f002 fe81 	bl	80034c4 <HAL_PWREx_ControlVoltageScaling>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 80007c8:	f000 f9da 	bl	8000b80 <Error_Handler>
	}
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007cc:	2302      	movs	r3, #2
 80007ce:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007d4:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007d6:	2310      	movs	r3, #16
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007da:	2302      	movs	r3, #2
 80007dc:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007de:	2302      	movs	r3, #2
 80007e0:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 80007e2:	2301      	movs	r3, #1
 80007e4:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 80007e6:	230a      	movs	r3, #10
 80007e8:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007ea:	2307      	movs	r3, #7
 80007ec:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007ee:	2302      	movs	r3, #2
 80007f0:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007f2:	2302      	movs	r3, #2
 80007f4:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80007f6:	f107 0314 	add.w	r3, r7, #20
 80007fa:	4618      	mov	r0, r3
 80007fc:	f002 feb8 	bl	8003570 <HAL_RCC_OscConfig>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <SystemClock_Config+0x72>
		Error_Handler();
 8000806:	f000 f9bb 	bl	8000b80 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800080a:	230f      	movs	r3, #15
 800080c:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800080e:	2303      	movs	r3, #3
 8000810:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000812:	2300      	movs	r3, #0
 8000814:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000816:	2300      	movs	r3, #0
 8000818:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800081a:	2300      	movs	r3, #0
 800081c:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 800081e:	463b      	mov	r3, r7
 8000820:	2104      	movs	r1, #4
 8000822:	4618      	mov	r0, r3
 8000824:	f003 fa8a 	bl	8003d3c <HAL_RCC_ClockConfig>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <SystemClock_Config+0x9a>
		Error_Handler();
 800082e:	f000 f9a7 	bl	8000b80 <Error_Handler>
	}
}
 8000832:	bf00      	nop
 8000834:	3758      	adds	r7, #88	; 0x58
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
	...

0800083c <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b08a      	sub	sp, #40	; 0x28
 8000840:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 8000842:	f107 031c 	add.w	r3, r7, #28
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
 800085a:	611a      	str	r2, [r3, #16]
 800085c:	615a      	str	r2, [r3, #20]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 800085e:	4b2f      	ldr	r3, [pc, #188]	; (800091c <MX_ADC1_Init+0xe0>)
 8000860:	4a2f      	ldr	r2, [pc, #188]	; (8000920 <MX_ADC1_Init+0xe4>)
 8000862:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000864:	4b2d      	ldr	r3, [pc, #180]	; (800091c <MX_ADC1_Init+0xe0>)
 8000866:	2200      	movs	r2, #0
 8000868:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800086a:	4b2c      	ldr	r3, [pc, #176]	; (800091c <MX_ADC1_Init+0xe0>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000870:	4b2a      	ldr	r3, [pc, #168]	; (800091c <MX_ADC1_Init+0xe0>)
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000876:	4b29      	ldr	r3, [pc, #164]	; (800091c <MX_ADC1_Init+0xe0>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800087c:	4b27      	ldr	r3, [pc, #156]	; (800091c <MX_ADC1_Init+0xe0>)
 800087e:	2204      	movs	r2, #4
 8000880:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8000882:	4b26      	ldr	r3, [pc, #152]	; (800091c <MX_ADC1_Init+0xe0>)
 8000884:	2200      	movs	r2, #0
 8000886:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000888:	4b24      	ldr	r3, [pc, #144]	; (800091c <MX_ADC1_Init+0xe0>)
 800088a:	2200      	movs	r2, #0
 800088c:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 800088e:	4b23      	ldr	r3, [pc, #140]	; (800091c <MX_ADC1_Init+0xe0>)
 8000890:	2201      	movs	r2, #1
 8000892:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000894:	4b21      	ldr	r3, [pc, #132]	; (800091c <MX_ADC1_Init+0xe0>)
 8000896:	2200      	movs	r2, #0
 8000898:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800089c:	4b1f      	ldr	r3, [pc, #124]	; (800091c <MX_ADC1_Init+0xe0>)
 800089e:	2200      	movs	r2, #0
 80008a0:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008a2:	4b1e      	ldr	r3, [pc, #120]	; (800091c <MX_ADC1_Init+0xe0>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80008a8:	4b1c      	ldr	r3, [pc, #112]	; (800091c <MX_ADC1_Init+0xe0>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008b0:	4b1a      	ldr	r3, [pc, #104]	; (800091c <MX_ADC1_Init+0xe0>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 80008b6:	4b19      	ldr	r3, [pc, #100]	; (800091c <MX_ADC1_Init+0xe0>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80008be:	4817      	ldr	r0, [pc, #92]	; (800091c <MX_ADC1_Init+0xe0>)
 80008c0:	f000 ff14 	bl	80016ec <HAL_ADC_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_ADC1_Init+0x92>
		Error_Handler();
 80008ca:	f000 f959 	bl	8000b80 <Error_Handler>
	}
	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	4619      	mov	r1, r3
 80008d8:	4810      	ldr	r0, [pc, #64]	; (800091c <MX_ADC1_Init+0xe0>)
 80008da:	f002 f8df 	bl	8002a9c <HAL_ADCEx_MultiModeConfigChannel>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_ADC1_Init+0xac>
		Error_Handler();
 80008e4:	f000 f94c 	bl	8000b80 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 80008e8:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <MX_ADC1_Init+0xe8>)
 80008ea:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ec:	2306      	movs	r3, #6
 80008ee:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80008f0:	2300      	movs	r3, #0
 80008f2:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008f4:	237f      	movs	r3, #127	; 0x7f
 80008f6:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008f8:	2304      	movs	r3, #4
 80008fa:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000900:	1d3b      	adds	r3, r7, #4
 8000902:	4619      	mov	r1, r3
 8000904:	4805      	ldr	r0, [pc, #20]	; (800091c <MX_ADC1_Init+0xe0>)
 8000906:	f001 fc1f 	bl	8002148 <HAL_ADC_ConfigChannel>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_ADC1_Init+0xd8>
		Error_Handler();
 8000910:	f000 f936 	bl	8000b80 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000914:	bf00      	nop
 8000916:	3728      	adds	r7, #40	; 0x28
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	2000016c 	.word	0x2000016c
 8000920:	50040000 	.word	0x50040000
 8000924:	14f00020 	.word	0x14f00020

08000928 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000928:	b580      	push	{r7, lr}
 800092a:	b08e      	sub	sp, #56	; 0x38
 800092c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800092e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000948:	463b      	mov	r3, r7
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
 8000952:	60da      	str	r2, [r3, #12]
 8000954:	611a      	str	r2, [r3, #16]
 8000956:	615a      	str	r2, [r3, #20]
 8000958:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 800095a:	4b2d      	ldr	r3, [pc, #180]	; (8000a10 <MX_TIM3_Init+0xe8>)
 800095c:	4a2d      	ldr	r2, [pc, #180]	; (8000a14 <MX_TIM3_Init+0xec>)
 800095e:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 38;
 8000960:	4b2b      	ldr	r3, [pc, #172]	; (8000a10 <MX_TIM3_Init+0xe8>)
 8000962:	2226      	movs	r2, #38	; 0x26
 8000964:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000966:	4b2a      	ldr	r3, [pc, #168]	; (8000a10 <MX_TIM3_Init+0xe8>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 4096;
 800096c:	4b28      	ldr	r3, [pc, #160]	; (8000a10 <MX_TIM3_Init+0xe8>)
 800096e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000972:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000974:	4b26      	ldr	r3, [pc, #152]	; (8000a10 <MX_TIM3_Init+0xe8>)
 8000976:	2200      	movs	r2, #0
 8000978:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800097a:	4b25      	ldr	r3, [pc, #148]	; (8000a10 <MX_TIM3_Init+0xe8>)
 800097c:	2280      	movs	r2, #128	; 0x80
 800097e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8000980:	4823      	ldr	r0, [pc, #140]	; (8000a10 <MX_TIM3_Init+0xe8>)
 8000982:	f004 f89d 	bl	8004ac0 <HAL_TIM_Base_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_TIM3_Init+0x68>
		Error_Handler();
 800098c:	f000 f8f8 	bl	8000b80 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000990:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000994:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8000996:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800099a:	4619      	mov	r1, r3
 800099c:	481c      	ldr	r0, [pc, #112]	; (8000a10 <MX_TIM3_Init+0xe8>)
 800099e:	f004 fc81 	bl	80052a4 <HAL_TIM_ConfigClockSource>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_TIM3_Init+0x84>
		Error_Handler();
 80009a8:	f000 f8ea 	bl	8000b80 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 80009ac:	4818      	ldr	r0, [pc, #96]	; (8000a10 <MX_TIM3_Init+0xe8>)
 80009ae:	f004 f8de 	bl	8004b6e <HAL_TIM_PWM_Init>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_TIM3_Init+0x94>
		Error_Handler();
 80009b8:	f000 f8e2 	bl	8000b80 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009bc:	2300      	movs	r3, #0
 80009be:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c0:	2300      	movs	r3, #0
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80009c4:	f107 031c 	add.w	r3, r7, #28
 80009c8:	4619      	mov	r1, r3
 80009ca:	4811      	ldr	r0, [pc, #68]	; (8000a10 <MX_TIM3_Init+0xe8>)
 80009cc:	f005 f996 	bl	8005cfc <HAL_TIMEx_MasterConfigSynchronization>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_TIM3_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 80009d6:	f000 f8d3 	bl	8000b80 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009da:	2360      	movs	r3, #96	; 0x60
 80009dc:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 25;
 80009de:	2319      	movs	r3, #25
 80009e0:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009e2:	2300      	movs	r3, #0
 80009e4:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009e6:	2300      	movs	r3, #0
 80009e8:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 80009ea:	463b      	mov	r3, r7
 80009ec:	2204      	movs	r2, #4
 80009ee:	4619      	mov	r1, r3
 80009f0:	4807      	ldr	r0, [pc, #28]	; (8000a10 <MX_TIM3_Init+0xe8>)
 80009f2:	f004 fb43 	bl	800507c <HAL_TIM_PWM_ConfigChannel>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_TIM3_Init+0xd8>
			!= HAL_OK) {
		Error_Handler();
 80009fc:	f000 f8c0 	bl	8000b80 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8000a00:	4803      	ldr	r0, [pc, #12]	; (8000a10 <MX_TIM3_Init+0xe8>)
 8000a02:	f000 f9fd 	bl	8000e00 <HAL_TIM_MspPostInit>

}
 8000a06:	bf00      	nop
 8000a08:	3738      	adds	r7, #56	; 0x38
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000120 	.word	0x20000120
 8000a14:	40000400 	.word	0x40000400

08000a18 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000a1c:	4b14      	ldr	r3, [pc, #80]	; (8000a70 <MX_USART2_UART_Init+0x58>)
 8000a1e:	4a15      	ldr	r2, [pc, #84]	; (8000a74 <MX_USART2_UART_Init+0x5c>)
 8000a20:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000a22:	4b13      	ldr	r3, [pc, #76]	; (8000a70 <MX_USART2_UART_Init+0x58>)
 8000a24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a28:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a2a:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <MX_USART2_UART_Init+0x58>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000a30:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <MX_USART2_UART_Init+0x58>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000a36:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <MX_USART2_UART_Init+0x58>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000a3c:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <MX_USART2_UART_Init+0x58>)
 8000a3e:	220c      	movs	r2, #12
 8000a40:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a42:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <MX_USART2_UART_Init+0x58>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a48:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <MX_USART2_UART_Init+0x58>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a4e:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <MX_USART2_UART_Init+0x58>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <MX_USART2_UART_Init+0x58>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000a5a:	4805      	ldr	r0, [pc, #20]	; (8000a70 <MX_USART2_UART_Init+0x58>)
 8000a5c:	f005 f9f4 	bl	8005e48 <HAL_UART_Init>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_USART2_UART_Init+0x52>
		Error_Handler();
 8000a66:	f000 f88b 	bl	8000b80 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	2000009c 	.word	0x2000009c
 8000a74:	40004400 	.word	0x40004400

08000a78 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000a7e:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <MX_DMA_Init+0x38>)
 8000a80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a82:	4a0b      	ldr	r2, [pc, #44]	; (8000ab0 <MX_DMA_Init+0x38>)
 8000a84:	f043 0301 	orr.w	r3, r3, #1
 8000a88:	6493      	str	r3, [r2, #72]	; 0x48
 8000a8a:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <MX_DMA_Init+0x38>)
 8000a8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a8e:	f003 0301 	and.w	r3, r3, #1
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2100      	movs	r1, #0
 8000a9a:	200b      	movs	r0, #11
 8000a9c:	f002 f989 	bl	8002db2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000aa0:	200b      	movs	r0, #11
 8000aa2:	f002 f9a2 	bl	8002dea <HAL_NVIC_EnableIRQ>

}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40021000 	.word	0x40021000

08000ab4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08a      	sub	sp, #40	; 0x28
 8000ab8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]
 8000ac4:	609a      	str	r2, [r3, #8]
 8000ac6:	60da      	str	r2, [r3, #12]
 8000ac8:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000aca:	4b2b      	ldr	r3, [pc, #172]	; (8000b78 <MX_GPIO_Init+0xc4>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ace:	4a2a      	ldr	r2, [pc, #168]	; (8000b78 <MX_GPIO_Init+0xc4>)
 8000ad0:	f043 0304 	orr.w	r3, r3, #4
 8000ad4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ad6:	4b28      	ldr	r3, [pc, #160]	; (8000b78 <MX_GPIO_Init+0xc4>)
 8000ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ada:	f003 0304 	and.w	r3, r3, #4
 8000ade:	613b      	str	r3, [r7, #16]
 8000ae0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000ae2:	4b25      	ldr	r3, [pc, #148]	; (8000b78 <MX_GPIO_Init+0xc4>)
 8000ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae6:	4a24      	ldr	r2, [pc, #144]	; (8000b78 <MX_GPIO_Init+0xc4>)
 8000ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aee:	4b22      	ldr	r3, [pc, #136]	; (8000b78 <MX_GPIO_Init+0xc4>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000afa:	4b1f      	ldr	r3, [pc, #124]	; (8000b78 <MX_GPIO_Init+0xc4>)
 8000afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afe:	4a1e      	ldr	r2, [pc, #120]	; (8000b78 <MX_GPIO_Init+0xc4>)
 8000b00:	f043 0301 	orr.w	r3, r3, #1
 8000b04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b06:	4b1c      	ldr	r3, [pc, #112]	; (8000b78 <MX_GPIO_Init+0xc4>)
 8000b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	60bb      	str	r3, [r7, #8]
 8000b10:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b12:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <MX_GPIO_Init+0xc4>)
 8000b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b16:	4a18      	ldr	r2, [pc, #96]	; (8000b78 <MX_GPIO_Init+0xc4>)
 8000b18:	f043 0302 	orr.w	r3, r3, #2
 8000b1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b1e:	4b16      	ldr	r3, [pc, #88]	; (8000b78 <MX_GPIO_Init+0xc4>)
 8000b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b22:	f003 0302 	and.w	r3, r3, #2
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2120      	movs	r1, #32
 8000b2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b32:	f002 fc87 	bl	8003444 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000b36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b3a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b3c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b40:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b46:	f107 0314 	add.w	r3, r7, #20
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	480b      	ldr	r0, [pc, #44]	; (8000b7c <MX_GPIO_Init+0xc8>)
 8000b4e:	f002 facf 	bl	80030f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000b52:	2320      	movs	r3, #32
 8000b54:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b56:	2301      	movs	r3, #1
 8000b58:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	4619      	mov	r1, r3
 8000b68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b6c:	f002 fac0 	bl	80030f0 <HAL_GPIO_Init>

}
 8000b70:	bf00      	nop
 8000b72:	3728      	adds	r7, #40	; 0x28
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	48000800 	.word	0x48000800

08000b80 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b84:	b672      	cpsid	i
}
 8000b86:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000b88:	e7fe      	b.n	8000b88 <Error_Handler+0x8>

08000b8a <setGreenLed>:
#include  <stdio.h>
#include  <errno.h>
#include  <sys/unistd.h> // STDOUT_FILENO, STDERR_FILENO

// On board green LED On
void setGreenLed() {
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8000b8e:	2201      	movs	r2, #1
 8000b90:	2120      	movs	r1, #32
 8000b92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b96:	f002 fc55 	bl	8003444 <HAL_GPIO_WritePin>
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <blinkGreenLed>:

// On board green LED blink
void blinkGreenLed(int nb, int delay) {
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b084      	sub	sp, #16
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
 8000ba6:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < nb; i++) {
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	e00b      	b.n	8000bc6 <blinkGreenLed+0x28>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000bae:	2120      	movs	r1, #32
 8000bb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb4:	f002 fc5e 	bl	8003474 <HAL_GPIO_TogglePin>
		HAL_Delay(delay);
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f000 fb7c 	bl	80012b8 <HAL_Delay>
	for (int i = 0; i < nb; i++) {
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	68fa      	ldr	r2, [r7, #12]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	429a      	cmp	r2, r3
 8000bcc:	dbef      	blt.n	8000bae <blinkGreenLed+0x10>
	}
}
 8000bce:	bf00      	nop
 8000bd0:	bf00      	nop
 8000bd2:	3710      	adds	r7, #16
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <_write>:
		__HAL_UART_CLEAR_OREFLAG(huart);
	}
}

// Redefine _write function for printf
int _write(int file, char *data, int len) {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	60f8      	str	r0, [r7, #12]
 8000be0:	60b9      	str	r1, [r7, #8]
 8000be2:	607a      	str	r2, [r7, #4]
	if ((file != STDOUT_FILENO) && (file != STDERR_FILENO)) {
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d00a      	beq.n	8000c00 <_write+0x28>
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	2b02      	cmp	r3, #2
 8000bee:	d007      	beq.n	8000c00 <_write+0x28>
		errno = EBADF;
 8000bf0:	f005 ff18 	bl	8006a24 <__errno>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2209      	movs	r2, #9
 8000bf8:	601a      	str	r2, [r3, #0]
		return -1;
 8000bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfe:	e00f      	b.n	8000c20 <_write+0x48>
	}

	// arbitrary timeout 1000
	HAL_StatusTypeDef status = HAL_UART_Transmit(&huart2, (uint8_t*) data, len,
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	b29a      	uxth	r2, r3
 8000c04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c08:	68b9      	ldr	r1, [r7, #8]
 8000c0a:	4807      	ldr	r0, [pc, #28]	; (8000c28 <_write+0x50>)
 8000c0c:	f005 f96a 	bl	8005ee4 <HAL_UART_Transmit>
 8000c10:	4603      	mov	r3, r0
 8000c12:	75fb      	strb	r3, [r7, #23]
			1000);

	// return # of bytes written - as best we can tell
	return (status == HAL_OK ? len : 0);
 8000c14:	7dfb      	ldrb	r3, [r7, #23]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d101      	bne.n	8000c1e <_write+0x46>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	e000      	b.n	8000c20 <_write+0x48>
 8000c1e:	2300      	movs	r3, #0
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3718      	adds	r7, #24
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	2000009c 	.word	0x2000009c

08000c2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c32:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <HAL_MspInit+0x44>)
 8000c34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c36:	4a0e      	ldr	r2, [pc, #56]	; (8000c70 <HAL_MspInit+0x44>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	6613      	str	r3, [r2, #96]	; 0x60
 8000c3e:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <HAL_MspInit+0x44>)
 8000c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	607b      	str	r3, [r7, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c4a:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <HAL_MspInit+0x44>)
 8000c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c4e:	4a08      	ldr	r2, [pc, #32]	; (8000c70 <HAL_MspInit+0x44>)
 8000c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c54:	6593      	str	r3, [r2, #88]	; 0x58
 8000c56:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <HAL_MspInit+0x44>)
 8000c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5e:	603b      	str	r3, [r7, #0]
 8000c60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c62:	bf00      	nop
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	40021000 	.word	0x40021000

08000c74 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b0ac      	sub	sp, #176	; 0xb0
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	2288      	movs	r2, #136	; 0x88
 8000c92:	2100      	movs	r1, #0
 8000c94:	4618      	mov	r0, r3
 8000c96:	f005 fefd 	bl	8006a94 <memset>
  if(hadc->Instance==ADC1)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a41      	ldr	r2, [pc, #260]	; (8000da4 <HAL_ADC_MspInit+0x130>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d17a      	bne.n	8000d9a <HAL_ADC_MspInit+0x126>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000ca4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ca8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000caa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000cae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000cba:	2308      	movs	r3, #8
 8000cbc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000cbe:	2307      	movs	r3, #7
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000cca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000cce:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cd0:	f107 0314 	add.w	r3, r7, #20
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f003 fa37 	bl	8004148 <HAL_RCCEx_PeriphCLKConfig>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000ce0:	f7ff ff4e 	bl	8000b80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000ce4:	4b30      	ldr	r3, [pc, #192]	; (8000da8 <HAL_ADC_MspInit+0x134>)
 8000ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce8:	4a2f      	ldr	r2, [pc, #188]	; (8000da8 <HAL_ADC_MspInit+0x134>)
 8000cea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000cee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cf0:	4b2d      	ldr	r3, [pc, #180]	; (8000da8 <HAL_ADC_MspInit+0x134>)
 8000cf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cf8:	613b      	str	r3, [r7, #16]
 8000cfa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfc:	4b2a      	ldr	r3, [pc, #168]	; (8000da8 <HAL_ADC_MspInit+0x134>)
 8000cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d00:	4a29      	ldr	r2, [pc, #164]	; (8000da8 <HAL_ADC_MspInit+0x134>)
 8000d02:	f043 0301 	orr.w	r3, r3, #1
 8000d06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d08:	4b27      	ldr	r3, [pc, #156]	; (8000da8 <HAL_ADC_MspInit+0x134>)
 8000d0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d0c:	f003 0301 	and.w	r3, r3, #1
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d14:	2301      	movs	r3, #1
 8000d16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d1a:	230b      	movs	r3, #11
 8000d1c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d26:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d30:	f002 f9de 	bl	80030f0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000d34:	4b1d      	ldr	r3, [pc, #116]	; (8000dac <HAL_ADC_MspInit+0x138>)
 8000d36:	4a1e      	ldr	r2, [pc, #120]	; (8000db0 <HAL_ADC_MspInit+0x13c>)
 8000d38:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000d3a:	4b1c      	ldr	r3, [pc, #112]	; (8000dac <HAL_ADC_MspInit+0x138>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d40:	4b1a      	ldr	r3, [pc, #104]	; (8000dac <HAL_ADC_MspInit+0x138>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d46:	4b19      	ldr	r3, [pc, #100]	; (8000dac <HAL_ADC_MspInit+0x138>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d4c:	4b17      	ldr	r3, [pc, #92]	; (8000dac <HAL_ADC_MspInit+0x138>)
 8000d4e:	2280      	movs	r2, #128	; 0x80
 8000d50:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d52:	4b16      	ldr	r3, [pc, #88]	; (8000dac <HAL_ADC_MspInit+0x138>)
 8000d54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d58:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d5a:	4b14      	ldr	r3, [pc, #80]	; (8000dac <HAL_ADC_MspInit+0x138>)
 8000d5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d60:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000d62:	4b12      	ldr	r3, [pc, #72]	; (8000dac <HAL_ADC_MspInit+0x138>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d68:	4b10      	ldr	r3, [pc, #64]	; (8000dac <HAL_ADC_MspInit+0x138>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d6e:	480f      	ldr	r0, [pc, #60]	; (8000dac <HAL_ADC_MspInit+0x138>)
 8000d70:	f002 f856 	bl	8002e20 <HAL_DMA_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 8000d7a:	f7ff ff01 	bl	8000b80 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a0a      	ldr	r2, [pc, #40]	; (8000dac <HAL_ADC_MspInit+0x138>)
 8000d82:	64da      	str	r2, [r3, #76]	; 0x4c
 8000d84:	4a09      	ldr	r2, [pc, #36]	; (8000dac <HAL_ADC_MspInit+0x138>)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	2012      	movs	r0, #18
 8000d90:	f002 f80f 	bl	8002db2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000d94:	2012      	movs	r0, #18
 8000d96:	f002 f828 	bl	8002dea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d9a:	bf00      	nop
 8000d9c:	37b0      	adds	r7, #176	; 0xb0
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	50040000 	.word	0x50040000
 8000da8:	40021000 	.word	0x40021000
 8000dac:	200001d0 	.word	0x200001d0
 8000db0:	40020008 	.word	0x40020008

08000db4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a0d      	ldr	r2, [pc, #52]	; (8000df8 <HAL_TIM_Base_MspInit+0x44>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d113      	bne.n	8000dee <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000dc6:	4b0d      	ldr	r3, [pc, #52]	; (8000dfc <HAL_TIM_Base_MspInit+0x48>)
 8000dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dca:	4a0c      	ldr	r2, [pc, #48]	; (8000dfc <HAL_TIM_Base_MspInit+0x48>)
 8000dcc:	f043 0302 	orr.w	r3, r3, #2
 8000dd0:	6593      	str	r3, [r2, #88]	; 0x58
 8000dd2:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <HAL_TIM_Base_MspInit+0x48>)
 8000dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dd6:	f003 0302 	and.w	r3, r3, #2
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000dde:	2200      	movs	r2, #0
 8000de0:	2100      	movs	r1, #0
 8000de2:	201d      	movs	r0, #29
 8000de4:	f001 ffe5 	bl	8002db2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000de8:	201d      	movs	r0, #29
 8000dea:	f001 fffe 	bl	8002dea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000dee:	bf00      	nop
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40000400 	.word	0x40000400
 8000dfc:	40021000 	.word	0x40021000

08000e00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b088      	sub	sp, #32
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e08:	f107 030c 	add.w	r3, r7, #12
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a11      	ldr	r2, [pc, #68]	; (8000e64 <HAL_TIM_MspPostInit+0x64>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d11c      	bne.n	8000e5c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e22:	4b11      	ldr	r3, [pc, #68]	; (8000e68 <HAL_TIM_MspPostInit+0x68>)
 8000e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e26:	4a10      	ldr	r2, [pc, #64]	; (8000e68 <HAL_TIM_MspPostInit+0x68>)
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e2e:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <HAL_TIM_MspPostInit+0x68>)
 8000e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	60bb      	str	r3, [r7, #8]
 8000e38:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000e3a:	2380      	movs	r3, #128	; 0x80
 8000e3c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e46:	2300      	movs	r3, #0
 8000e48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4e:	f107 030c 	add.w	r3, r7, #12
 8000e52:	4619      	mov	r1, r3
 8000e54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e58:	f002 f94a 	bl	80030f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000e5c:	bf00      	nop
 8000e5e:	3720      	adds	r7, #32
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40000400 	.word	0x40000400
 8000e68:	40021000 	.word	0x40021000

08000e6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b0ac      	sub	sp, #176	; 0xb0
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e84:	f107 0314 	add.w	r3, r7, #20
 8000e88:	2288      	movs	r2, #136	; 0x88
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f005 fe01 	bl	8006a94 <memset>
  if(huart->Instance==USART2)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a21      	ldr	r2, [pc, #132]	; (8000f1c <HAL_UART_MspInit+0xb0>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d13b      	bne.n	8000f14 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ea4:	f107 0314 	add.w	r3, r7, #20
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f003 f94d 	bl	8004148 <HAL_RCCEx_PeriphCLKConfig>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000eb4:	f7ff fe64 	bl	8000b80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000eb8:	4b19      	ldr	r3, [pc, #100]	; (8000f20 <HAL_UART_MspInit+0xb4>)
 8000eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ebc:	4a18      	ldr	r2, [pc, #96]	; (8000f20 <HAL_UART_MspInit+0xb4>)
 8000ebe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ec2:	6593      	str	r3, [r2, #88]	; 0x58
 8000ec4:	4b16      	ldr	r3, [pc, #88]	; (8000f20 <HAL_UART_MspInit+0xb4>)
 8000ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ecc:	613b      	str	r3, [r7, #16]
 8000ece:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed0:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <HAL_UART_MspInit+0xb4>)
 8000ed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed4:	4a12      	ldr	r2, [pc, #72]	; (8000f20 <HAL_UART_MspInit+0xb4>)
 8000ed6:	f043 0301 	orr.w	r3, r3, #1
 8000eda:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000edc:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <HAL_UART_MspInit+0xb4>)
 8000ede:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee0:	f003 0301 	and.w	r3, r3, #1
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ee8:	230c      	movs	r3, #12
 8000eea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efa:	2303      	movs	r3, #3
 8000efc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f00:	2307      	movs	r3, #7
 8000f02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f06:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f10:	f002 f8ee 	bl	80030f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f14:	bf00      	nop
 8000f16:	37b0      	adds	r7, #176	; 0xb0
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40004400 	.word	0x40004400
 8000f20:	40021000 	.word	0x40021000

08000f24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f28:	e7fe      	b.n	8000f28 <NMI_Handler+0x4>

08000f2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f2e:	e7fe      	b.n	8000f2e <HardFault_Handler+0x4>

08000f30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f34:	e7fe      	b.n	8000f34 <MemManage_Handler+0x4>

08000f36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f3a:	e7fe      	b.n	8000f3a <BusFault_Handler+0x4>

08000f3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f40:	e7fe      	b.n	8000f40 <UsageFault_Handler+0x4>

08000f42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f70:	f000 f982 	bl	8001278 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f7c:	4802      	ldr	r0, [pc, #8]	; (8000f88 <DMA1_Channel1_IRQHandler+0x10>)
 8000f7e:	f002 f807 	bl	8002f90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	200001d0 	.word	0x200001d0

08000f8c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000f90:	4802      	ldr	r0, [pc, #8]	; (8000f9c <ADC1_2_IRQHandler+0x10>)
 8000f92:	f000 fea1 	bl	8001cd8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	2000016c 	.word	0x2000016c

08000fa0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000fa4:	4802      	ldr	r0, [pc, #8]	; (8000fb0 <TIM3_IRQHandler+0x10>)
 8000fa6:	f003 ff49 	bl	8004e3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000120 	.word	0x20000120

08000fb4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]
 8000fc4:	e00a      	b.n	8000fdc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000fc6:	f3af 8000 	nop.w
 8000fca:	4601      	mov	r1, r0
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	1c5a      	adds	r2, r3, #1
 8000fd0:	60ba      	str	r2, [r7, #8]
 8000fd2:	b2ca      	uxtb	r2, r1
 8000fd4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	617b      	str	r3, [r7, #20]
 8000fdc:	697a      	ldr	r2, [r7, #20]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	dbf0      	blt.n	8000fc6 <_read+0x12>
	}

return len;
 8000fe4:	687b      	ldr	r3, [r7, #4]
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3718      	adds	r7, #24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <_close>:
	}
	return len;
}

int _close(int file)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	b083      	sub	sp, #12
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
	return -1;
 8000ff6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr

08001006 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001006:	b480      	push	{r7}
 8001008:	b083      	sub	sp, #12
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
 800100e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001016:	605a      	str	r2, [r3, #4]
	return 0;
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <_isatty>:

int _isatty(int file)
{
 8001026:	b480      	push	{r7}
 8001028:	b083      	sub	sp, #12
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
	return 1;
 800102e:	2301      	movs	r3, #1
}
 8001030:	4618      	mov	r0, r3
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
	return 0;
 8001048:	2300      	movs	r3, #0
}
 800104a:	4618      	mov	r0, r3
 800104c:	3714      	adds	r7, #20
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
	...

08001058 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001060:	4a14      	ldr	r2, [pc, #80]	; (80010b4 <_sbrk+0x5c>)
 8001062:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <_sbrk+0x60>)
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800106c:	4b13      	ldr	r3, [pc, #76]	; (80010bc <_sbrk+0x64>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d102      	bne.n	800107a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001074:	4b11      	ldr	r3, [pc, #68]	; (80010bc <_sbrk+0x64>)
 8001076:	4a12      	ldr	r2, [pc, #72]	; (80010c0 <_sbrk+0x68>)
 8001078:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800107a:	4b10      	ldr	r3, [pc, #64]	; (80010bc <_sbrk+0x64>)
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4413      	add	r3, r2
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	429a      	cmp	r2, r3
 8001086:	d207      	bcs.n	8001098 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001088:	f005 fccc 	bl	8006a24 <__errno>
 800108c:	4603      	mov	r3, r0
 800108e:	220c      	movs	r2, #12
 8001090:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001092:	f04f 33ff 	mov.w	r3, #4294967295
 8001096:	e009      	b.n	80010ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001098:	4b08      	ldr	r3, [pc, #32]	; (80010bc <_sbrk+0x64>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800109e:	4b07      	ldr	r3, [pc, #28]	; (80010bc <_sbrk+0x64>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4413      	add	r3, r2
 80010a6:	4a05      	ldr	r2, [pc, #20]	; (80010bc <_sbrk+0x64>)
 80010a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010aa:	68fb      	ldr	r3, [r7, #12]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3718      	adds	r7, #24
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20018000 	.word	0x20018000
 80010b8:	00000400 	.word	0x00000400
 80010bc:	2000008c 	.word	0x2000008c
 80010c0:	20000230 	.word	0x20000230

080010c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010c8:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <SystemInit+0x20>)
 80010ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010ce:	4a05      	ldr	r2, [pc, #20]	; (80010e4 <SystemInit+0x20>)
 80010d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <load_adc>:

#include "yann.h"
#include "remi.h"
#include<stdio.h>

int load_adc(ADC_HandleTypeDef hadc, int polTime) {
 80010e8:	b084      	sub	sp, #16
 80010ea:	b580      	push	{r7, lr}
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	f107 0c08 	add.w	ip, r7, #8
 80010f2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	HAL_ADC_Start(&hadc);
 80010f6:	f107 0008 	add.w	r0, r7, #8
 80010fa:	f000 fc4d 	bl	8001998 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, polTime);
 80010fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001100:	4619      	mov	r1, r3
 8001102:	f107 0008 	add.w	r0, r7, #8
 8001106:	f000 fd01 	bl	8001b0c <HAL_ADC_PollForConversion>
	//if(HAL_ADC_GetValue(&hadc)==0)
	//return 1;
	return HAL_ADC_GetValue(&hadc);
 800110a:	f107 0008 	add.w	r0, r7, #8
 800110e:	f000 fdd5 	bl	8001cbc <HAL_ADC_GetValue>
 8001112:	4603      	mov	r3, r0

}
 8001114:	4618      	mov	r0, r3
 8001116:	46bd      	mov	sp, r7
 8001118:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800111c:	b004      	add	sp, #16
 800111e:	4770      	bx	lr

08001120 <load_pwm>:

void load_pwm(TIM_HandleTypeDef htimX, int val) {
 8001120:	b084      	sub	sp, #16
 8001122:	b490      	push	{r4, r7}
 8001124:	af00      	add	r7, sp, #0
 8001126:	f107 0408 	add.w	r4, r7, #8
 800112a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	htimX.Instance->CCR2 = val;
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001132:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	bc90      	pop	{r4, r7}
 800113a:	b004      	add	sp, #16
 800113c:	4770      	bx	lr

0800113e <y_print>:

void y_print(UART_HandleTypeDef *huart, char *mess,int len) {
 800113e:	b580      	push	{r7, lr}
 8001140:	b084      	sub	sp, #16
 8001142:	af00      	add	r7, sp, #0
 8001144:	60f8      	str	r0, [r7, #12]
 8001146:	60b9      	str	r1, [r7, #8]
 8001148:	607a      	str	r2, [r7, #4]

	if (HAL_UART_Transmit(huart, (uint8_t*) mess,len, 100) != HAL_OK)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	b29a      	uxth	r2, r3
 800114e:	2364      	movs	r3, #100	; 0x64
 8001150:	68b9      	ldr	r1, [r7, #8]
 8001152:	68f8      	ldr	r0, [r7, #12]
 8001154:	f004 fec6 	bl	8005ee4 <HAL_UART_Transmit>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <y_print+0x24>
		Error_Handler();
 800115e:	f7ff fd0f 	bl	8000b80 <Error_Handler>
}
 8001162:	bf00      	nop
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800116c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011a4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001170:	f7ff ffa8 	bl	80010c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001174:	480c      	ldr	r0, [pc, #48]	; (80011a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001176:	490d      	ldr	r1, [pc, #52]	; (80011ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001178:	4a0d      	ldr	r2, [pc, #52]	; (80011b0 <LoopForever+0xe>)
  movs r3, #0
 800117a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800117c:	e002      	b.n	8001184 <LoopCopyDataInit>

0800117e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800117e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001180:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001182:	3304      	adds	r3, #4

08001184 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001184:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001186:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001188:	d3f9      	bcc.n	800117e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800118a:	4a0a      	ldr	r2, [pc, #40]	; (80011b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800118c:	4c0a      	ldr	r4, [pc, #40]	; (80011b8 <LoopForever+0x16>)
  movs r3, #0
 800118e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001190:	e001      	b.n	8001196 <LoopFillZerobss>

08001192 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001192:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001194:	3204      	adds	r2, #4

08001196 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001196:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001198:	d3fb      	bcc.n	8001192 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800119a:	f005 fc49 	bl	8006a30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800119e:	f7ff f9e3 	bl	8000568 <main>

080011a2 <LoopForever>:

LoopForever:
    b LoopForever
 80011a2:	e7fe      	b.n	80011a2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80011a4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80011a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011ac:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80011b0:	08007aec 	.word	0x08007aec
  ldr r2, =_sbss
 80011b4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80011b8:	2000022c 	.word	0x2000022c

080011bc <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011bc:	e7fe      	b.n	80011bc <ADC3_IRQHandler>
	...

080011c0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011c6:	2300      	movs	r3, #0
 80011c8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011ca:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <HAL_Init+0x3c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a0b      	ldr	r2, [pc, #44]	; (80011fc <HAL_Init+0x3c>)
 80011d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011d4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d6:	2003      	movs	r0, #3
 80011d8:	f001 fde0 	bl	8002d9c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011dc:	2000      	movs	r0, #0
 80011de:	f000 f80f 	bl	8001200 <HAL_InitTick>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d002      	beq.n	80011ee <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	71fb      	strb	r3, [r7, #7]
 80011ec:	e001      	b.n	80011f2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011ee:	f7ff fd1d 	bl	8000c2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011f2:	79fb      	ldrb	r3, [r7, #7]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40022000 	.word	0x40022000

08001200 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001208:	2300      	movs	r3, #0
 800120a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800120c:	4b17      	ldr	r3, [pc, #92]	; (800126c <HAL_InitTick+0x6c>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d023      	beq.n	800125c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001214:	4b16      	ldr	r3, [pc, #88]	; (8001270 <HAL_InitTick+0x70>)
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	4b14      	ldr	r3, [pc, #80]	; (800126c <HAL_InitTick+0x6c>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	4619      	mov	r1, r3
 800121e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001222:	fbb3 f3f1 	udiv	r3, r3, r1
 8001226:	fbb2 f3f3 	udiv	r3, r2, r3
 800122a:	4618      	mov	r0, r3
 800122c:	f001 fdeb 	bl	8002e06 <HAL_SYSTICK_Config>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d10f      	bne.n	8001256 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2b0f      	cmp	r3, #15
 800123a:	d809      	bhi.n	8001250 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800123c:	2200      	movs	r2, #0
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	f04f 30ff 	mov.w	r0, #4294967295
 8001244:	f001 fdb5 	bl	8002db2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001248:	4a0a      	ldr	r2, [pc, #40]	; (8001274 <HAL_InitTick+0x74>)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6013      	str	r3, [r2, #0]
 800124e:	e007      	b.n	8001260 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	73fb      	strb	r3, [r7, #15]
 8001254:	e004      	b.n	8001260 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	73fb      	strb	r3, [r7, #15]
 800125a:	e001      	b.n	8001260 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001260:	7bfb      	ldrb	r3, [r7, #15]
}
 8001262:	4618      	mov	r0, r3
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000008 	.word	0x20000008
 8001270:	20000000 	.word	0x20000000
 8001274:	20000004 	.word	0x20000004

08001278 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800127c:	4b06      	ldr	r3, [pc, #24]	; (8001298 <HAL_IncTick+0x20>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	461a      	mov	r2, r3
 8001282:	4b06      	ldr	r3, [pc, #24]	; (800129c <HAL_IncTick+0x24>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4413      	add	r3, r2
 8001288:	4a04      	ldr	r2, [pc, #16]	; (800129c <HAL_IncTick+0x24>)
 800128a:	6013      	str	r3, [r2, #0]
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	20000008 	.word	0x20000008
 800129c:	20000218 	.word	0x20000218

080012a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  return uwTick;
 80012a4:	4b03      	ldr	r3, [pc, #12]	; (80012b4 <HAL_GetTick+0x14>)
 80012a6:	681b      	ldr	r3, [r3, #0]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	20000218 	.word	0x20000218

080012b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012c0:	f7ff ffee 	bl	80012a0 <HAL_GetTick>
 80012c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d0:	d005      	beq.n	80012de <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80012d2:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <HAL_Delay+0x44>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	461a      	mov	r2, r3
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	4413      	add	r3, r2
 80012dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012de:	bf00      	nop
 80012e0:	f7ff ffde 	bl	80012a0 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	68fa      	ldr	r2, [r7, #12]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d8f7      	bhi.n	80012e0 <HAL_Delay+0x28>
  {
  }
}
 80012f0:	bf00      	nop
 80012f2:	bf00      	nop
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20000008 	.word	0x20000008

08001300 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	431a      	orrs	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	609a      	str	r2, [r3, #8]
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001326:	b480      	push	{r7}
 8001328:	b083      	sub	sp, #12
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
 800132e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	431a      	orrs	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	609a      	str	r2, [r3, #8]
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800135c:	4618      	mov	r0, r3
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001368:	b480      	push	{r7}
 800136a:	b087      	sub	sp, #28
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
 8001374:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	3360      	adds	r3, #96	; 0x60
 800137a:	461a      	mov	r2, r3
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	4413      	add	r3, r2
 8001382:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	4b08      	ldr	r3, [pc, #32]	; (80013ac <LL_ADC_SetOffset+0x44>)
 800138a:	4013      	ands	r3, r2
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001392:	683a      	ldr	r2, [r7, #0]
 8001394:	430a      	orrs	r2, r1
 8001396:	4313      	orrs	r3, r2
 8001398:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80013a0:	bf00      	nop
 80013a2:	371c      	adds	r7, #28
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	03fff000 	.word	0x03fff000

080013b0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	3360      	adds	r3, #96	; 0x60
 80013be:	461a      	mov	r2, r3
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	4413      	add	r3, r2
 80013c6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80013dc:	b480      	push	{r7}
 80013de:	b087      	sub	sp, #28
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	3360      	adds	r3, #96	; 0x60
 80013ec:	461a      	mov	r2, r3
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4413      	add	r3, r2
 80013f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	431a      	orrs	r2, r3
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001406:	bf00      	nop
 8001408:	371c      	adds	r7, #28
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001412:	b480      	push	{r7}
 8001414:	b083      	sub	sp, #12
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001422:	2b00      	cmp	r3, #0
 8001424:	d101      	bne.n	800142a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001426:	2301      	movs	r3, #1
 8001428:	e000      	b.n	800142c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800142a:	2300      	movs	r3, #0
}
 800142c:	4618      	mov	r0, r3
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001438:	b480      	push	{r7}
 800143a:	b087      	sub	sp, #28
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	3330      	adds	r3, #48	; 0x30
 8001448:	461a      	mov	r2, r3
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	0a1b      	lsrs	r3, r3, #8
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	f003 030c 	and.w	r3, r3, #12
 8001454:	4413      	add	r3, r2
 8001456:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	f003 031f 	and.w	r3, r3, #31
 8001462:	211f      	movs	r1, #31
 8001464:	fa01 f303 	lsl.w	r3, r1, r3
 8001468:	43db      	mvns	r3, r3
 800146a:	401a      	ands	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	0e9b      	lsrs	r3, r3, #26
 8001470:	f003 011f 	and.w	r1, r3, #31
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	f003 031f 	and.w	r3, r3, #31
 800147a:	fa01 f303 	lsl.w	r3, r1, r3
 800147e:	431a      	orrs	r2, r3
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001484:	bf00      	nop
 8001486:	371c      	adds	r7, #28
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d101      	bne.n	80014a8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80014a4:	2301      	movs	r3, #1
 80014a6:	e000      	b.n	80014aa <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr

080014b6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80014b6:	b480      	push	{r7}
 80014b8:	b087      	sub	sp, #28
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	60f8      	str	r0, [r7, #12]
 80014be:	60b9      	str	r1, [r7, #8]
 80014c0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	3314      	adds	r3, #20
 80014c6:	461a      	mov	r2, r3
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	0e5b      	lsrs	r3, r3, #25
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	f003 0304 	and.w	r3, r3, #4
 80014d2:	4413      	add	r3, r2
 80014d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	0d1b      	lsrs	r3, r3, #20
 80014de:	f003 031f 	and.w	r3, r3, #31
 80014e2:	2107      	movs	r1, #7
 80014e4:	fa01 f303 	lsl.w	r3, r1, r3
 80014e8:	43db      	mvns	r3, r3
 80014ea:	401a      	ands	r2, r3
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	0d1b      	lsrs	r3, r3, #20
 80014f0:	f003 031f 	and.w	r3, r3, #31
 80014f4:	6879      	ldr	r1, [r7, #4]
 80014f6:	fa01 f303 	lsl.w	r3, r1, r3
 80014fa:	431a      	orrs	r2, r3
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001500:	bf00      	nop
 8001502:	371c      	adds	r7, #28
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001524:	43db      	mvns	r3, r3
 8001526:	401a      	ands	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f003 0318 	and.w	r3, r3, #24
 800152e:	4908      	ldr	r1, [pc, #32]	; (8001550 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001530:	40d9      	lsrs	r1, r3
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	400b      	ands	r3, r1
 8001536:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800153a:	431a      	orrs	r2, r3
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001542:	bf00      	nop
 8001544:	3714      	adds	r7, #20
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	0007ffff 	.word	0x0007ffff

08001554 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	f003 031f 	and.w	r3, r3, #31
}
 8001564:	4618      	mov	r0, r3
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001580:	4618      	mov	r0, r3
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800159c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	6093      	str	r3, [r2, #8]
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80015c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80015c4:	d101      	bne.n	80015ca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80015c6:	2301      	movs	r3, #1
 80015c8:	e000      	b.n	80015cc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80015ca:	2300      	movs	r3, #0
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80015e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015ec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001610:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001614:	d101      	bne.n	800161a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001616:	2301      	movs	r3, #1
 8001618:	e000      	b.n	800161c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800161a:	2300      	movs	r3, #0
}
 800161c:	4618      	mov	r0, r3
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001638:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800163c:	f043 0201 	orr.w	r2, r3, #1
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001644:	bf00      	nop
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	f003 0301 	and.w	r3, r3, #1
 8001660:	2b01      	cmp	r3, #1
 8001662:	d101      	bne.n	8001668 <LL_ADC_IsEnabled+0x18>
 8001664:	2301      	movs	r3, #1
 8001666:	e000      	b.n	800166a <LL_ADC_IsEnabled+0x1a>
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001676:	b480      	push	{r7}
 8001678:	b083      	sub	sp, #12
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001686:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800168a:	f043 0204 	orr.w	r2, r3, #4
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800169e:	b480      	push	{r7}
 80016a0:	b083      	sub	sp, #12
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f003 0304 	and.w	r3, r3, #4
 80016ae:	2b04      	cmp	r3, #4
 80016b0:	d101      	bne.n	80016b6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80016b2:	2301      	movs	r3, #1
 80016b4:	e000      	b.n	80016b8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80016b6:	2300      	movs	r3, #0
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	f003 0308 	and.w	r3, r3, #8
 80016d4:	2b08      	cmp	r3, #8
 80016d6:	d101      	bne.n	80016dc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80016d8:	2301      	movs	r3, #1
 80016da:	e000      	b.n	80016de <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
	...

080016ec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80016ec:	b590      	push	{r4, r7, lr}
 80016ee:	b089      	sub	sp, #36	; 0x24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016f4:	2300      	movs	r3, #0
 80016f6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d101      	bne.n	8001706 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e136      	b.n	8001974 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	691b      	ldr	r3, [r3, #16]
 800170a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001710:	2b00      	cmp	r3, #0
 8001712:	d109      	bne.n	8001728 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f7ff faad 	bl	8000c74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2200      	movs	r2, #0
 800171e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff ff3f 	bl	80015b0 <LL_ADC_IsDeepPowerDownEnabled>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d004      	beq.n	8001742 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff ff25 	bl	800158c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff ff5a 	bl	8001600 <LL_ADC_IsInternalRegulatorEnabled>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d115      	bne.n	800177e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff ff3e 	bl	80015d8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800175c:	4b87      	ldr	r3, [pc, #540]	; (800197c <HAL_ADC_Init+0x290>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	099b      	lsrs	r3, r3, #6
 8001762:	4a87      	ldr	r2, [pc, #540]	; (8001980 <HAL_ADC_Init+0x294>)
 8001764:	fba2 2303 	umull	r2, r3, r2, r3
 8001768:	099b      	lsrs	r3, r3, #6
 800176a:	3301      	adds	r3, #1
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001770:	e002      	b.n	8001778 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	3b01      	subs	r3, #1
 8001776:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d1f9      	bne.n	8001772 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff ff3c 	bl	8001600 <LL_ADC_IsInternalRegulatorEnabled>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d10d      	bne.n	80017aa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001792:	f043 0210 	orr.w	r2, r3, #16
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800179e:	f043 0201 	orr.w	r2, r3, #1
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff ff75 	bl	800169e <LL_ADC_REG_IsConversionOngoing>
 80017b4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ba:	f003 0310 	and.w	r3, r3, #16
 80017be:	2b00      	cmp	r3, #0
 80017c0:	f040 80cf 	bne.w	8001962 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	f040 80cb 	bne.w	8001962 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017d0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80017d4:	f043 0202 	orr.w	r2, r3, #2
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff ff35 	bl	8001650 <LL_ADC_IsEnabled>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d115      	bne.n	8001818 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80017ec:	4865      	ldr	r0, [pc, #404]	; (8001984 <HAL_ADC_Init+0x298>)
 80017ee:	f7ff ff2f 	bl	8001650 <LL_ADC_IsEnabled>
 80017f2:	4604      	mov	r4, r0
 80017f4:	4864      	ldr	r0, [pc, #400]	; (8001988 <HAL_ADC_Init+0x29c>)
 80017f6:	f7ff ff2b 	bl	8001650 <LL_ADC_IsEnabled>
 80017fa:	4603      	mov	r3, r0
 80017fc:	431c      	orrs	r4, r3
 80017fe:	4863      	ldr	r0, [pc, #396]	; (800198c <HAL_ADC_Init+0x2a0>)
 8001800:	f7ff ff26 	bl	8001650 <LL_ADC_IsEnabled>
 8001804:	4603      	mov	r3, r0
 8001806:	4323      	orrs	r3, r4
 8001808:	2b00      	cmp	r3, #0
 800180a:	d105      	bne.n	8001818 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	4619      	mov	r1, r3
 8001812:	485f      	ldr	r0, [pc, #380]	; (8001990 <HAL_ADC_Init+0x2a4>)
 8001814:	f7ff fd74 	bl	8001300 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	7e5b      	ldrb	r3, [r3, #25]
 800181c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001822:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001828:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800182e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001836:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001838:	4313      	orrs	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d106      	bne.n	8001854 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184a:	3b01      	subs	r3, #1
 800184c:	045b      	lsls	r3, r3, #17
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	4313      	orrs	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001858:	2b00      	cmp	r3, #0
 800185a:	d009      	beq.n	8001870 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001860:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001868:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4313      	orrs	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	68da      	ldr	r2, [r3, #12]
 8001876:	4b47      	ldr	r3, [pc, #284]	; (8001994 <HAL_ADC_Init+0x2a8>)
 8001878:	4013      	ands	r3, r2
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	6812      	ldr	r2, [r2, #0]
 800187e:	69b9      	ldr	r1, [r7, #24]
 8001880:	430b      	orrs	r3, r1
 8001882:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff ff08 	bl	800169e <LL_ADC_REG_IsConversionOngoing>
 800188e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff ff15 	bl	80016c4 <LL_ADC_INJ_IsConversionOngoing>
 800189a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d13d      	bne.n	800191e <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d13a      	bne.n	800191e <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80018ac:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018b4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80018b6:	4313      	orrs	r3, r2
 80018b8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018c4:	f023 0302 	bic.w	r3, r3, #2
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	6812      	ldr	r2, [r2, #0]
 80018cc:	69b9      	ldr	r1, [r7, #24]
 80018ce:	430b      	orrs	r3, r1
 80018d0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d118      	bne.n	800190e <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80018e6:	f023 0304 	bic.w	r3, r3, #4
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80018f2:	4311      	orrs	r1, r2
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80018f8:	4311      	orrs	r1, r2
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80018fe:	430a      	orrs	r2, r1
 8001900:	431a      	orrs	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f042 0201 	orr.w	r2, r2, #1
 800190a:	611a      	str	r2, [r3, #16]
 800190c:	e007      	b.n	800191e <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	691a      	ldr	r2, [r3, #16]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f022 0201 	bic.w	r2, r2, #1
 800191c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	691b      	ldr	r3, [r3, #16]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d10c      	bne.n	8001940 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192c:	f023 010f 	bic.w	r1, r3, #15
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	69db      	ldr	r3, [r3, #28]
 8001934:	1e5a      	subs	r2, r3, #1
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	430a      	orrs	r2, r1
 800193c:	631a      	str	r2, [r3, #48]	; 0x30
 800193e:	e007      	b.n	8001950 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f022 020f 	bic.w	r2, r2, #15
 800194e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001954:	f023 0303 	bic.w	r3, r3, #3
 8001958:	f043 0201 	orr.w	r2, r3, #1
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	655a      	str	r2, [r3, #84]	; 0x54
 8001960:	e007      	b.n	8001972 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001966:	f043 0210 	orr.w	r2, r3, #16
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001972:	7ffb      	ldrb	r3, [r7, #31]
}
 8001974:	4618      	mov	r0, r3
 8001976:	3724      	adds	r7, #36	; 0x24
 8001978:	46bd      	mov	sp, r7
 800197a:	bd90      	pop	{r4, r7, pc}
 800197c:	20000000 	.word	0x20000000
 8001980:	053e2d63 	.word	0x053e2d63
 8001984:	50040000 	.word	0x50040000
 8001988:	50040100 	.word	0x50040100
 800198c:	50040200 	.word	0x50040200
 8001990:	50040300 	.word	0x50040300
 8001994:	fff0c007 	.word	0xfff0c007

08001998 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80019a0:	4857      	ldr	r0, [pc, #348]	; (8001b00 <HAL_ADC_Start+0x168>)
 80019a2:	f7ff fdd7 	bl	8001554 <LL_ADC_GetMultimode>
 80019a6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff fe76 	bl	800169e <LL_ADC_REG_IsConversionOngoing>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f040 809c 	bne.w	8001af2 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d101      	bne.n	80019c8 <HAL_ADC_Start+0x30>
 80019c4:	2302      	movs	r3, #2
 80019c6:	e097      	b.n	8001af8 <HAL_ADC_Start+0x160>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2201      	movs	r2, #1
 80019cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f000 ffa9 	bl	8002928 <ADC_Enable>
 80019d6:	4603      	mov	r3, r0
 80019d8:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80019da:	7dfb      	ldrb	r3, [r7, #23]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	f040 8083 	bne.w	8001ae8 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019e6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80019ea:	f023 0301 	bic.w	r3, r3, #1
 80019ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a42      	ldr	r2, [pc, #264]	; (8001b04 <HAL_ADC_Start+0x16c>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d002      	beq.n	8001a06 <HAL_ADC_Start+0x6e>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	e000      	b.n	8001a08 <HAL_ADC_Start+0x70>
 8001a06:	4b40      	ldr	r3, [pc, #256]	; (8001b08 <HAL_ADC_Start+0x170>)
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	6812      	ldr	r2, [r2, #0]
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d002      	beq.n	8001a16 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d105      	bne.n	8001a22 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a1a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a2e:	d106      	bne.n	8001a3e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a34:	f023 0206 	bic.w	r2, r3, #6
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	659a      	str	r2, [r3, #88]	; 0x58
 8001a3c:	e002      	b.n	8001a44 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	221c      	movs	r2, #28
 8001a4a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a2a      	ldr	r2, [pc, #168]	; (8001b04 <HAL_ADC_Start+0x16c>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d002      	beq.n	8001a64 <HAL_ADC_Start+0xcc>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	e000      	b.n	8001a66 <HAL_ADC_Start+0xce>
 8001a64:	4b28      	ldr	r3, [pc, #160]	; (8001b08 <HAL_ADC_Start+0x170>)
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	6812      	ldr	r2, [r2, #0]
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d008      	beq.n	8001a80 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d005      	beq.n	8001a80 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	2b05      	cmp	r3, #5
 8001a78:	d002      	beq.n	8001a80 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	2b09      	cmp	r3, #9
 8001a7e:	d114      	bne.n	8001aaa <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d007      	beq.n	8001a9e <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a92:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a96:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff fde7 	bl	8001676 <LL_ADC_REG_StartConversion>
 8001aa8:	e025      	b.n	8001af6 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a12      	ldr	r2, [pc, #72]	; (8001b04 <HAL_ADC_Start+0x16c>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d002      	beq.n	8001ac6 <HAL_ADC_Start+0x12e>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	e000      	b.n	8001ac8 <HAL_ADC_Start+0x130>
 8001ac6:	4b10      	ldr	r3, [pc, #64]	; (8001b08 <HAL_ADC_Start+0x170>)
 8001ac8:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d00f      	beq.n	8001af6 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ada:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ade:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	655a      	str	r2, [r3, #84]	; 0x54
 8001ae6:	e006      	b.n	8001af6 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001af0:	e001      	b.n	8001af6 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001af2:	2302      	movs	r3, #2
 8001af4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001af6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3718      	adds	r7, #24
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	50040300 	.word	0x50040300
 8001b04:	50040100 	.word	0x50040100
 8001b08:	50040000 	.word	0x50040000

08001b0c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b088      	sub	sp, #32
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b16:	4866      	ldr	r0, [pc, #408]	; (8001cb0 <HAL_ADC_PollForConversion+0x1a4>)
 8001b18:	f7ff fd1c 	bl	8001554 <LL_ADC_GetMultimode>
 8001b1c:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	2b08      	cmp	r3, #8
 8001b24:	d102      	bne.n	8001b2c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001b26:	2308      	movs	r3, #8
 8001b28:	61fb      	str	r3, [r7, #28]
 8001b2a:	e02a      	b.n	8001b82 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d005      	beq.n	8001b3e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	2b05      	cmp	r3, #5
 8001b36:	d002      	beq.n	8001b3e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	2b09      	cmp	r3, #9
 8001b3c:	d111      	bne.n	8001b62 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	f003 0301 	and.w	r3, r3, #1
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d007      	beq.n	8001b5c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b50:	f043 0220 	orr.w	r2, r3, #32
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e0a4      	b.n	8001ca6 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001b5c:	2304      	movs	r3, #4
 8001b5e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001b60:	e00f      	b.n	8001b82 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001b62:	4853      	ldr	r0, [pc, #332]	; (8001cb0 <HAL_ADC_PollForConversion+0x1a4>)
 8001b64:	f7ff fd04 	bl	8001570 <LL_ADC_GetMultiDMATransfer>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d007      	beq.n	8001b7e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b72:	f043 0220 	orr.w	r2, r3, #32
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e093      	b.n	8001ca6 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001b7e:	2304      	movs	r3, #4
 8001b80:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001b82:	f7ff fb8d 	bl	80012a0 <HAL_GetTick>
 8001b86:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001b88:	e021      	b.n	8001bce <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b90:	d01d      	beq.n	8001bce <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001b92:	f7ff fb85 	bl	80012a0 <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d302      	bcc.n	8001ba8 <HAL_ADC_PollForConversion+0x9c>
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d112      	bne.n	8001bce <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d10b      	bne.n	8001bce <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bba:	f043 0204 	orr.w	r2, r3, #4
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e06b      	b.n	8001ca6 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d0d6      	beq.n	8001b8a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001be0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff fc10 	bl	8001412 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d01c      	beq.n	8001c32 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	7e5b      	ldrb	r3, [r3, #25]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d118      	bne.n	8001c32 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0308 	and.w	r3, r3, #8
 8001c0a:	2b08      	cmp	r3, #8
 8001c0c:	d111      	bne.n	8001c32 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d105      	bne.n	8001c32 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c2a:	f043 0201 	orr.w	r2, r3, #1
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a1f      	ldr	r2, [pc, #124]	; (8001cb4 <HAL_ADC_PollForConversion+0x1a8>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d002      	beq.n	8001c42 <HAL_ADC_PollForConversion+0x136>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	e000      	b.n	8001c44 <HAL_ADC_PollForConversion+0x138>
 8001c42:	4b1d      	ldr	r3, [pc, #116]	; (8001cb8 <HAL_ADC_PollForConversion+0x1ac>)
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	6812      	ldr	r2, [r2, #0]
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d008      	beq.n	8001c5e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d005      	beq.n	8001c5e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	2b05      	cmp	r3, #5
 8001c56:	d002      	beq.n	8001c5e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	2b09      	cmp	r3, #9
 8001c5c:	d104      	bne.n	8001c68 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	61bb      	str	r3, [r7, #24]
 8001c66:	e00c      	b.n	8001c82 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a11      	ldr	r2, [pc, #68]	; (8001cb4 <HAL_ADC_PollForConversion+0x1a8>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d002      	beq.n	8001c78 <HAL_ADC_PollForConversion+0x16c>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	e000      	b.n	8001c7a <HAL_ADC_PollForConversion+0x16e>
 8001c78:	4b0f      	ldr	r3, [pc, #60]	; (8001cb8 <HAL_ADC_PollForConversion+0x1ac>)
 8001c7a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	2b08      	cmp	r3, #8
 8001c86:	d104      	bne.n	8001c92 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2208      	movs	r2, #8
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	e008      	b.n	8001ca4 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d103      	bne.n	8001ca4 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	220c      	movs	r2, #12
 8001ca2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3720      	adds	r7, #32
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	50040300 	.word	0x50040300
 8001cb4:	50040100 	.word	0x50040100
 8001cb8:	50040000 	.word	0x50040000

08001cbc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
	...

08001cd8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b08a      	sub	sp, #40	; 0x28
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001cf4:	4882      	ldr	r0, [pc, #520]	; (8001f00 <HAL_ADC_IRQHandler+0x228>)
 8001cf6:	f7ff fc2d 	bl	8001554 <LL_ADC_GetMultimode>
 8001cfa:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d017      	beq.n	8001d36 <HAL_ADC_IRQHandler+0x5e>
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	f003 0302 	and.w	r3, r3, #2
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d012      	beq.n	8001d36 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d14:	f003 0310 	and.w	r3, r3, #16
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d105      	bne.n	8001d28 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d20:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f000 fead 	bl	8002a88 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2202      	movs	r2, #2
 8001d34:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	f003 0304 	and.w	r3, r3, #4
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d004      	beq.n	8001d4a <HAL_ADC_IRQHandler+0x72>
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	f003 0304 	and.w	r3, r3, #4
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d10a      	bne.n	8001d60 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	f000 8083 	beq.w	8001e5c <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	f003 0308 	and.w	r3, r3, #8
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d07d      	beq.n	8001e5c <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d64:	f003 0310 	and.w	r3, r3, #16
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d105      	bne.n	8001d78 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d70:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff fb48 	bl	8001412 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d062      	beq.n	8001e4e <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a5d      	ldr	r2, [pc, #372]	; (8001f04 <HAL_ADC_IRQHandler+0x22c>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d002      	beq.n	8001d98 <HAL_ADC_IRQHandler+0xc0>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	e000      	b.n	8001d9a <HAL_ADC_IRQHandler+0xc2>
 8001d98:	4b5b      	ldr	r3, [pc, #364]	; (8001f08 <HAL_ADC_IRQHandler+0x230>)
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	6812      	ldr	r2, [r2, #0]
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d008      	beq.n	8001db4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d005      	beq.n	8001db4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	2b05      	cmp	r3, #5
 8001dac:	d002      	beq.n	8001db4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	2b09      	cmp	r3, #9
 8001db2:	d104      	bne.n	8001dbe <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	623b      	str	r3, [r7, #32]
 8001dbc:	e00c      	b.n	8001dd8 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a50      	ldr	r2, [pc, #320]	; (8001f04 <HAL_ADC_IRQHandler+0x22c>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d002      	beq.n	8001dce <HAL_ADC_IRQHandler+0xf6>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	e000      	b.n	8001dd0 <HAL_ADC_IRQHandler+0xf8>
 8001dce:	4b4e      	ldr	r3, [pc, #312]	; (8001f08 <HAL_ADC_IRQHandler+0x230>)
 8001dd0:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001dd8:	6a3b      	ldr	r3, [r7, #32]
 8001dda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d135      	bne.n	8001e4e <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0308 	and.w	r3, r3, #8
 8001dec:	2b08      	cmp	r3, #8
 8001dee:	d12e      	bne.n	8001e4e <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff fc52 	bl	800169e <LL_ADC_REG_IsConversionOngoing>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d11a      	bne.n	8001e36 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	685a      	ldr	r2, [r3, #4]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f022 020c 	bic.w	r2, r2, #12
 8001e0e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d112      	bne.n	8001e4e <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e2c:	f043 0201 	orr.w	r2, r3, #1
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	655a      	str	r2, [r3, #84]	; 0x54
 8001e34:	e00b      	b.n	8001e4e <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e3a:	f043 0210 	orr.w	r2, r3, #16
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e46:	f043 0201 	orr.w	r2, r3, #1
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 f95c 	bl	800210c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	220c      	movs	r2, #12
 8001e5a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	f003 0320 	and.w	r3, r3, #32
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d004      	beq.n	8001e70 <HAL_ADC_IRQHandler+0x198>
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	f003 0320 	and.w	r3, r3, #32
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d10b      	bne.n	8001e88 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	f000 809f 	beq.w	8001fba <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f000 8099 	beq.w	8001fba <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e8c:	f003 0310 	and.w	r3, r3, #16
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d105      	bne.n	8001ea0 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e98:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff faf3 	bl	8001490 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001eaa:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff faae 	bl	8001412 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001eb6:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a11      	ldr	r2, [pc, #68]	; (8001f04 <HAL_ADC_IRQHandler+0x22c>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d002      	beq.n	8001ec8 <HAL_ADC_IRQHandler+0x1f0>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	e000      	b.n	8001eca <HAL_ADC_IRQHandler+0x1f2>
 8001ec8:	4b0f      	ldr	r3, [pc, #60]	; (8001f08 <HAL_ADC_IRQHandler+0x230>)
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	6812      	ldr	r2, [r2, #0]
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d008      	beq.n	8001ee4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d005      	beq.n	8001ee4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	2b06      	cmp	r3, #6
 8001edc:	d002      	beq.n	8001ee4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	2b07      	cmp	r3, #7
 8001ee2:	d104      	bne.n	8001eee <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	623b      	str	r3, [r7, #32]
 8001eec:	e013      	b.n	8001f16 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a04      	ldr	r2, [pc, #16]	; (8001f04 <HAL_ADC_IRQHandler+0x22c>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d009      	beq.n	8001f0c <HAL_ADC_IRQHandler+0x234>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	e007      	b.n	8001f0e <HAL_ADC_IRQHandler+0x236>
 8001efe:	bf00      	nop
 8001f00:	50040300 	.word	0x50040300
 8001f04:	50040100 	.word	0x50040100
 8001f08:	50040000 	.word	0x50040000
 8001f0c:	4b7d      	ldr	r3, [pc, #500]	; (8002104 <HAL_ADC_IRQHandler+0x42c>)
 8001f0e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d047      	beq.n	8001fac <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001f1c:	6a3b      	ldr	r3, [r7, #32]
 8001f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d007      	beq.n	8001f36 <HAL_ADC_IRQHandler+0x25e>
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d03f      	beq.n	8001fac <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001f2c:	6a3b      	ldr	r3, [r7, #32]
 8001f2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d13a      	bne.n	8001fac <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f40:	2b40      	cmp	r3, #64	; 0x40
 8001f42:	d133      	bne.n	8001fac <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001f44:	6a3b      	ldr	r3, [r7, #32]
 8001f46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d12e      	bne.n	8001fac <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff fbb6 	bl	80016c4 <LL_ADC_INJ_IsConversionOngoing>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d11a      	bne.n	8001f94 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	685a      	ldr	r2, [r3, #4]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001f6c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d112      	bne.n	8001fac <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f8a:	f043 0201 	orr.w	r2, r3, #1
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	655a      	str	r2, [r3, #84]	; 0x54
 8001f92:	e00b      	b.n	8001fac <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f98:	f043 0210 	orr.w	r2, r3, #16
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa4:	f043 0201 	orr.w	r2, r3, #1
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f000 fd43 	bl	8002a38 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2260      	movs	r2, #96	; 0x60
 8001fb8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d011      	beq.n	8001fe8 <HAL_ADC_IRQHandler+0x310>
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d00c      	beq.n	8001fe8 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 f8a0 	bl	8002120 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2280      	movs	r2, #128	; 0x80
 8001fe6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d012      	beq.n	8002018 <HAL_ADC_IRQHandler+0x340>
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d00d      	beq.n	8002018 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002000:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f000 fd29 	bl	8002a60 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002016:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800201e:	2b00      	cmp	r3, #0
 8002020:	d012      	beq.n	8002048 <HAL_ADC_IRQHandler+0x370>
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002028:	2b00      	cmp	r3, #0
 800202a:	d00d      	beq.n	8002048 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002030:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f000 fd1b 	bl	8002a74 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002046:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	f003 0310 	and.w	r3, r3, #16
 800204e:	2b00      	cmp	r3, #0
 8002050:	d036      	beq.n	80020c0 <HAL_ADC_IRQHandler+0x3e8>
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	f003 0310 	and.w	r3, r3, #16
 8002058:	2b00      	cmp	r3, #0
 800205a:	d031      	beq.n	80020c0 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002060:	2b00      	cmp	r3, #0
 8002062:	d102      	bne.n	800206a <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8002064:	2301      	movs	r3, #1
 8002066:	627b      	str	r3, [r7, #36]	; 0x24
 8002068:	e014      	b.n	8002094 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d008      	beq.n	8002082 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002070:	4825      	ldr	r0, [pc, #148]	; (8002108 <HAL_ADC_IRQHandler+0x430>)
 8002072:	f7ff fa7d 	bl	8001570 <LL_ADC_GetMultiDMATransfer>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d00b      	beq.n	8002094 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 800207c:	2301      	movs	r3, #1
 800207e:	627b      	str	r3, [r7, #36]	; 0x24
 8002080:	e008      	b.n	8002094 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	f003 0301 	and.w	r3, r3, #1
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002090:	2301      	movs	r3, #1
 8002092:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002096:	2b01      	cmp	r3, #1
 8002098:	d10e      	bne.n	80020b8 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800209e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020aa:	f043 0202 	orr.w	r2, r3, #2
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 f83e 	bl	8002134 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2210      	movs	r2, #16
 80020be:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d018      	beq.n	80020fc <HAL_ADC_IRQHandler+0x424>
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d013      	beq.n	80020fc <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d8:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e4:	f043 0208 	orr.w	r2, r3, #8
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020f4:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 fca8 	bl	8002a4c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80020fc:	bf00      	nop
 80020fe:	3728      	adds	r7, #40	; 0x28
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	50040000 	.word	0x50040000
 8002108:	50040300 	.word	0x50040300

0800210c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b0b6      	sub	sp, #216	; 0xd8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002152:	2300      	movs	r3, #0
 8002154:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002158:	2300      	movs	r3, #0
 800215a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002162:	2b01      	cmp	r3, #1
 8002164:	d101      	bne.n	800216a <HAL_ADC_ConfigChannel+0x22>
 8002166:	2302      	movs	r3, #2
 8002168:	e3c7      	b.n	80028fa <HAL_ADC_ConfigChannel+0x7b2>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2201      	movs	r2, #1
 800216e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff fa91 	bl	800169e <LL_ADC_REG_IsConversionOngoing>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	f040 83a8 	bne.w	80028d4 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	2b05      	cmp	r3, #5
 800218a:	d824      	bhi.n	80021d6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	3b02      	subs	r3, #2
 8002192:	2b03      	cmp	r3, #3
 8002194:	d81b      	bhi.n	80021ce <HAL_ADC_ConfigChannel+0x86>
 8002196:	a201      	add	r2, pc, #4	; (adr r2, 800219c <HAL_ADC_ConfigChannel+0x54>)
 8002198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800219c:	080021ad 	.word	0x080021ad
 80021a0:	080021b5 	.word	0x080021b5
 80021a4:	080021bd 	.word	0x080021bd
 80021a8:	080021c5 	.word	0x080021c5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	220c      	movs	r2, #12
 80021b0:	605a      	str	r2, [r3, #4]
          break;
 80021b2:	e011      	b.n	80021d8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	2212      	movs	r2, #18
 80021b8:	605a      	str	r2, [r3, #4]
          break;
 80021ba:	e00d      	b.n	80021d8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	2218      	movs	r2, #24
 80021c0:	605a      	str	r2, [r3, #4]
          break;
 80021c2:	e009      	b.n	80021d8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021ca:	605a      	str	r2, [r3, #4]
          break;
 80021cc:	e004      	b.n	80021d8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	2206      	movs	r2, #6
 80021d2:	605a      	str	r2, [r3, #4]
          break;
 80021d4:	e000      	b.n	80021d8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80021d6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6818      	ldr	r0, [r3, #0]
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	6859      	ldr	r1, [r3, #4]
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	461a      	mov	r2, r3
 80021e6:	f7ff f927 	bl	8001438 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff fa55 	bl	800169e <LL_ADC_REG_IsConversionOngoing>
 80021f4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff fa61 	bl	80016c4 <LL_ADC_INJ_IsConversionOngoing>
 8002202:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002206:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800220a:	2b00      	cmp	r3, #0
 800220c:	f040 81a6 	bne.w	800255c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002210:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002214:	2b00      	cmp	r3, #0
 8002216:	f040 81a1 	bne.w	800255c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6818      	ldr	r0, [r3, #0]
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	6819      	ldr	r1, [r3, #0]
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	461a      	mov	r2, r3
 8002228:	f7ff f945 	bl	80014b6 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	695a      	ldr	r2, [r3, #20]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	08db      	lsrs	r3, r3, #3
 8002238:	f003 0303 	and.w	r3, r3, #3
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	2b04      	cmp	r3, #4
 800224c:	d00a      	beq.n	8002264 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6818      	ldr	r0, [r3, #0]
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	6919      	ldr	r1, [r3, #16]
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800225e:	f7ff f883 	bl	8001368 <LL_ADC_SetOffset>
 8002262:	e17b      	b.n	800255c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2100      	movs	r1, #0
 800226a:	4618      	mov	r0, r3
 800226c:	f7ff f8a0 	bl	80013b0 <LL_ADC_GetOffsetChannel>
 8002270:	4603      	mov	r3, r0
 8002272:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002276:	2b00      	cmp	r3, #0
 8002278:	d10a      	bne.n	8002290 <HAL_ADC_ConfigChannel+0x148>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2100      	movs	r1, #0
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff f895 	bl	80013b0 <LL_ADC_GetOffsetChannel>
 8002286:	4603      	mov	r3, r0
 8002288:	0e9b      	lsrs	r3, r3, #26
 800228a:	f003 021f 	and.w	r2, r3, #31
 800228e:	e01e      	b.n	80022ce <HAL_ADC_ConfigChannel+0x186>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2100      	movs	r1, #0
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff f88a 	bl	80013b0 <LL_ADC_GetOffsetChannel>
 800229c:	4603      	mov	r3, r0
 800229e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80022a6:	fa93 f3a3 	rbit	r3, r3
 80022aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80022b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80022b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80022be:	2320      	movs	r3, #32
 80022c0:	e004      	b.n	80022cc <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80022c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80022c6:	fab3 f383 	clz	r3, r3
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d105      	bne.n	80022e6 <HAL_ADC_ConfigChannel+0x19e>
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	0e9b      	lsrs	r3, r3, #26
 80022e0:	f003 031f 	and.w	r3, r3, #31
 80022e4:	e018      	b.n	8002318 <HAL_ADC_ConfigChannel+0x1d0>
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80022f2:	fa93 f3a3 	rbit	r3, r3
 80022f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80022fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80022fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002302:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800230a:	2320      	movs	r3, #32
 800230c:	e004      	b.n	8002318 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800230e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002312:	fab3 f383 	clz	r3, r3
 8002316:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002318:	429a      	cmp	r2, r3
 800231a:	d106      	bne.n	800232a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2200      	movs	r2, #0
 8002322:	2100      	movs	r1, #0
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff f859 	bl	80013dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2101      	movs	r1, #1
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff f83d 	bl	80013b0 <LL_ADC_GetOffsetChannel>
 8002336:	4603      	mov	r3, r0
 8002338:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800233c:	2b00      	cmp	r3, #0
 800233e:	d10a      	bne.n	8002356 <HAL_ADC_ConfigChannel+0x20e>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2101      	movs	r1, #1
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff f832 	bl	80013b0 <LL_ADC_GetOffsetChannel>
 800234c:	4603      	mov	r3, r0
 800234e:	0e9b      	lsrs	r3, r3, #26
 8002350:	f003 021f 	and.w	r2, r3, #31
 8002354:	e01e      	b.n	8002394 <HAL_ADC_ConfigChannel+0x24c>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2101      	movs	r1, #1
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff f827 	bl	80013b0 <LL_ADC_GetOffsetChannel>
 8002362:	4603      	mov	r3, r0
 8002364:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002368:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800236c:	fa93 f3a3 	rbit	r3, r3
 8002370:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002374:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002378:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800237c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002380:	2b00      	cmp	r3, #0
 8002382:	d101      	bne.n	8002388 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002384:	2320      	movs	r3, #32
 8002386:	e004      	b.n	8002392 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002388:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800238c:	fab3 f383 	clz	r3, r3
 8002390:	b2db      	uxtb	r3, r3
 8002392:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800239c:	2b00      	cmp	r3, #0
 800239e:	d105      	bne.n	80023ac <HAL_ADC_ConfigChannel+0x264>
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	0e9b      	lsrs	r3, r3, #26
 80023a6:	f003 031f 	and.w	r3, r3, #31
 80023aa:	e018      	b.n	80023de <HAL_ADC_ConfigChannel+0x296>
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80023b8:	fa93 f3a3 	rbit	r3, r3
 80023bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80023c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80023c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80023c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d101      	bne.n	80023d4 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80023d0:	2320      	movs	r3, #32
 80023d2:	e004      	b.n	80023de <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80023d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80023d8:	fab3 f383 	clz	r3, r3
 80023dc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80023de:	429a      	cmp	r2, r3
 80023e0:	d106      	bne.n	80023f0 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2200      	movs	r2, #0
 80023e8:	2101      	movs	r1, #1
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7fe fff6 	bl	80013dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2102      	movs	r1, #2
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7fe ffda 	bl	80013b0 <LL_ADC_GetOffsetChannel>
 80023fc:	4603      	mov	r3, r0
 80023fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10a      	bne.n	800241c <HAL_ADC_ConfigChannel+0x2d4>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2102      	movs	r1, #2
 800240c:	4618      	mov	r0, r3
 800240e:	f7fe ffcf 	bl	80013b0 <LL_ADC_GetOffsetChannel>
 8002412:	4603      	mov	r3, r0
 8002414:	0e9b      	lsrs	r3, r3, #26
 8002416:	f003 021f 	and.w	r2, r3, #31
 800241a:	e01e      	b.n	800245a <HAL_ADC_ConfigChannel+0x312>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2102      	movs	r1, #2
 8002422:	4618      	mov	r0, r3
 8002424:	f7fe ffc4 	bl	80013b0 <LL_ADC_GetOffsetChannel>
 8002428:	4603      	mov	r3, r0
 800242a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002432:	fa93 f3a3 	rbit	r3, r3
 8002436:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800243a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800243e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002442:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800244a:	2320      	movs	r3, #32
 800244c:	e004      	b.n	8002458 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800244e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002452:	fab3 f383 	clz	r3, r3
 8002456:	b2db      	uxtb	r3, r3
 8002458:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002462:	2b00      	cmp	r3, #0
 8002464:	d105      	bne.n	8002472 <HAL_ADC_ConfigChannel+0x32a>
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	0e9b      	lsrs	r3, r3, #26
 800246c:	f003 031f 	and.w	r3, r3, #31
 8002470:	e016      	b.n	80024a0 <HAL_ADC_ConfigChannel+0x358>
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800247e:	fa93 f3a3 	rbit	r3, r3
 8002482:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002484:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002486:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800248a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002492:	2320      	movs	r3, #32
 8002494:	e004      	b.n	80024a0 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002496:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800249a:	fab3 f383 	clz	r3, r3
 800249e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d106      	bne.n	80024b2 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2200      	movs	r2, #0
 80024aa:	2102      	movs	r1, #2
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7fe ff95 	bl	80013dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2103      	movs	r1, #3
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7fe ff79 	bl	80013b0 <LL_ADC_GetOffsetChannel>
 80024be:	4603      	mov	r3, r0
 80024c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d10a      	bne.n	80024de <HAL_ADC_ConfigChannel+0x396>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2103      	movs	r1, #3
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7fe ff6e 	bl	80013b0 <LL_ADC_GetOffsetChannel>
 80024d4:	4603      	mov	r3, r0
 80024d6:	0e9b      	lsrs	r3, r3, #26
 80024d8:	f003 021f 	and.w	r2, r3, #31
 80024dc:	e017      	b.n	800250e <HAL_ADC_ConfigChannel+0x3c6>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2103      	movs	r1, #3
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7fe ff63 	bl	80013b0 <LL_ADC_GetOffsetChannel>
 80024ea:	4603      	mov	r3, r0
 80024ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024f0:	fa93 f3a3 	rbit	r3, r3
 80024f4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80024f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024f8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80024fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d101      	bne.n	8002504 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002500:	2320      	movs	r3, #32
 8002502:	e003      	b.n	800250c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002504:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002506:	fab3 f383 	clz	r3, r3
 800250a:	b2db      	uxtb	r3, r3
 800250c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002516:	2b00      	cmp	r3, #0
 8002518:	d105      	bne.n	8002526 <HAL_ADC_ConfigChannel+0x3de>
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	0e9b      	lsrs	r3, r3, #26
 8002520:	f003 031f 	and.w	r3, r3, #31
 8002524:	e011      	b.n	800254a <HAL_ADC_ConfigChannel+0x402>
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800252e:	fa93 f3a3 	rbit	r3, r3
 8002532:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002534:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002536:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800253a:	2b00      	cmp	r3, #0
 800253c:	d101      	bne.n	8002542 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800253e:	2320      	movs	r3, #32
 8002540:	e003      	b.n	800254a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002542:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002544:	fab3 f383 	clz	r3, r3
 8002548:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800254a:	429a      	cmp	r2, r3
 800254c:	d106      	bne.n	800255c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2200      	movs	r2, #0
 8002554:	2103      	movs	r1, #3
 8002556:	4618      	mov	r0, r3
 8002558:	f7fe ff40 	bl	80013dc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff f875 	bl	8001650 <LL_ADC_IsEnabled>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	f040 813f 	bne.w	80027ec <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6818      	ldr	r0, [r3, #0]
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	6819      	ldr	r1, [r3, #0]
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	461a      	mov	r2, r3
 800257c:	f7fe ffc6 	bl	800150c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	4a8e      	ldr	r2, [pc, #568]	; (80027c0 <HAL_ADC_ConfigChannel+0x678>)
 8002586:	4293      	cmp	r3, r2
 8002588:	f040 8130 	bne.w	80027ec <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002598:	2b00      	cmp	r3, #0
 800259a:	d10b      	bne.n	80025b4 <HAL_ADC_ConfigChannel+0x46c>
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	0e9b      	lsrs	r3, r3, #26
 80025a2:	3301      	adds	r3, #1
 80025a4:	f003 031f 	and.w	r3, r3, #31
 80025a8:	2b09      	cmp	r3, #9
 80025aa:	bf94      	ite	ls
 80025ac:	2301      	movls	r3, #1
 80025ae:	2300      	movhi	r3, #0
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	e019      	b.n	80025e8 <HAL_ADC_ConfigChannel+0x4a0>
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025bc:	fa93 f3a3 	rbit	r3, r3
 80025c0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80025c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025c4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80025c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d101      	bne.n	80025d0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80025cc:	2320      	movs	r3, #32
 80025ce:	e003      	b.n	80025d8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80025d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025d2:	fab3 f383 	clz	r3, r3
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	3301      	adds	r3, #1
 80025da:	f003 031f 	and.w	r3, r3, #31
 80025de:	2b09      	cmp	r3, #9
 80025e0:	bf94      	ite	ls
 80025e2:	2301      	movls	r3, #1
 80025e4:	2300      	movhi	r3, #0
 80025e6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d079      	beq.n	80026e0 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d107      	bne.n	8002608 <HAL_ADC_ConfigChannel+0x4c0>
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	0e9b      	lsrs	r3, r3, #26
 80025fe:	3301      	adds	r3, #1
 8002600:	069b      	lsls	r3, r3, #26
 8002602:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002606:	e015      	b.n	8002634 <HAL_ADC_ConfigChannel+0x4ec>
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002610:	fa93 f3a3 	rbit	r3, r3
 8002614:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002618:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800261a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800261c:	2b00      	cmp	r3, #0
 800261e:	d101      	bne.n	8002624 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002620:	2320      	movs	r3, #32
 8002622:	e003      	b.n	800262c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002624:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002626:	fab3 f383 	clz	r3, r3
 800262a:	b2db      	uxtb	r3, r3
 800262c:	3301      	adds	r3, #1
 800262e:	069b      	lsls	r3, r3, #26
 8002630:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800263c:	2b00      	cmp	r3, #0
 800263e:	d109      	bne.n	8002654 <HAL_ADC_ConfigChannel+0x50c>
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	0e9b      	lsrs	r3, r3, #26
 8002646:	3301      	adds	r3, #1
 8002648:	f003 031f 	and.w	r3, r3, #31
 800264c:	2101      	movs	r1, #1
 800264e:	fa01 f303 	lsl.w	r3, r1, r3
 8002652:	e017      	b.n	8002684 <HAL_ADC_ConfigChannel+0x53c>
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800265c:	fa93 f3a3 	rbit	r3, r3
 8002660:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002662:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002664:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002666:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002668:	2b00      	cmp	r3, #0
 800266a:	d101      	bne.n	8002670 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 800266c:	2320      	movs	r3, #32
 800266e:	e003      	b.n	8002678 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002670:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002672:	fab3 f383 	clz	r3, r3
 8002676:	b2db      	uxtb	r3, r3
 8002678:	3301      	adds	r3, #1
 800267a:	f003 031f 	and.w	r3, r3, #31
 800267e:	2101      	movs	r1, #1
 8002680:	fa01 f303 	lsl.w	r3, r1, r3
 8002684:	ea42 0103 	orr.w	r1, r2, r3
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002690:	2b00      	cmp	r3, #0
 8002692:	d10a      	bne.n	80026aa <HAL_ADC_ConfigChannel+0x562>
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	0e9b      	lsrs	r3, r3, #26
 800269a:	3301      	adds	r3, #1
 800269c:	f003 021f 	and.w	r2, r3, #31
 80026a0:	4613      	mov	r3, r2
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	4413      	add	r3, r2
 80026a6:	051b      	lsls	r3, r3, #20
 80026a8:	e018      	b.n	80026dc <HAL_ADC_ConfigChannel+0x594>
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026b2:	fa93 f3a3 	rbit	r3, r3
 80026b6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80026b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80026bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80026c2:	2320      	movs	r3, #32
 80026c4:	e003      	b.n	80026ce <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80026c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026c8:	fab3 f383 	clz	r3, r3
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	3301      	adds	r3, #1
 80026d0:	f003 021f 	and.w	r2, r3, #31
 80026d4:	4613      	mov	r3, r2
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	4413      	add	r3, r2
 80026da:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026dc:	430b      	orrs	r3, r1
 80026de:	e080      	b.n	80027e2 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d107      	bne.n	80026fc <HAL_ADC_ConfigChannel+0x5b4>
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	0e9b      	lsrs	r3, r3, #26
 80026f2:	3301      	adds	r3, #1
 80026f4:	069b      	lsls	r3, r3, #26
 80026f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026fa:	e015      	b.n	8002728 <HAL_ADC_ConfigChannel+0x5e0>
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002704:	fa93 f3a3 	rbit	r3, r3
 8002708:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800270a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800270c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800270e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002710:	2b00      	cmp	r3, #0
 8002712:	d101      	bne.n	8002718 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002714:	2320      	movs	r3, #32
 8002716:	e003      	b.n	8002720 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800271a:	fab3 f383 	clz	r3, r3
 800271e:	b2db      	uxtb	r3, r3
 8002720:	3301      	adds	r3, #1
 8002722:	069b      	lsls	r3, r3, #26
 8002724:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002730:	2b00      	cmp	r3, #0
 8002732:	d109      	bne.n	8002748 <HAL_ADC_ConfigChannel+0x600>
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	0e9b      	lsrs	r3, r3, #26
 800273a:	3301      	adds	r3, #1
 800273c:	f003 031f 	and.w	r3, r3, #31
 8002740:	2101      	movs	r1, #1
 8002742:	fa01 f303 	lsl.w	r3, r1, r3
 8002746:	e017      	b.n	8002778 <HAL_ADC_ConfigChannel+0x630>
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274e:	6a3b      	ldr	r3, [r7, #32]
 8002750:	fa93 f3a3 	rbit	r3, r3
 8002754:	61fb      	str	r3, [r7, #28]
  return result;
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800275a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275c:	2b00      	cmp	r3, #0
 800275e:	d101      	bne.n	8002764 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002760:	2320      	movs	r3, #32
 8002762:	e003      	b.n	800276c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002766:	fab3 f383 	clz	r3, r3
 800276a:	b2db      	uxtb	r3, r3
 800276c:	3301      	adds	r3, #1
 800276e:	f003 031f 	and.w	r3, r3, #31
 8002772:	2101      	movs	r1, #1
 8002774:	fa01 f303 	lsl.w	r3, r1, r3
 8002778:	ea42 0103 	orr.w	r1, r2, r3
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002784:	2b00      	cmp	r3, #0
 8002786:	d10d      	bne.n	80027a4 <HAL_ADC_ConfigChannel+0x65c>
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	0e9b      	lsrs	r3, r3, #26
 800278e:	3301      	adds	r3, #1
 8002790:	f003 021f 	and.w	r2, r3, #31
 8002794:	4613      	mov	r3, r2
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	4413      	add	r3, r2
 800279a:	3b1e      	subs	r3, #30
 800279c:	051b      	lsls	r3, r3, #20
 800279e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027a2:	e01d      	b.n	80027e0 <HAL_ADC_ConfigChannel+0x698>
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	fa93 f3a3 	rbit	r3, r3
 80027b0:	613b      	str	r3, [r7, #16]
  return result;
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d103      	bne.n	80027c4 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80027bc:	2320      	movs	r3, #32
 80027be:	e005      	b.n	80027cc <HAL_ADC_ConfigChannel+0x684>
 80027c0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	fab3 f383 	clz	r3, r3
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	3301      	adds	r3, #1
 80027ce:	f003 021f 	and.w	r2, r3, #31
 80027d2:	4613      	mov	r3, r2
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	4413      	add	r3, r2
 80027d8:	3b1e      	subs	r3, #30
 80027da:	051b      	lsls	r3, r3, #20
 80027dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027e0:	430b      	orrs	r3, r1
 80027e2:	683a      	ldr	r2, [r7, #0]
 80027e4:	6892      	ldr	r2, [r2, #8]
 80027e6:	4619      	mov	r1, r3
 80027e8:	f7fe fe65 	bl	80014b6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	4b44      	ldr	r3, [pc, #272]	; (8002904 <HAL_ADC_ConfigChannel+0x7bc>)
 80027f2:	4013      	ands	r3, r2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d07a      	beq.n	80028ee <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027f8:	4843      	ldr	r0, [pc, #268]	; (8002908 <HAL_ADC_ConfigChannel+0x7c0>)
 80027fa:	f7fe fda7 	bl	800134c <LL_ADC_GetCommonPathInternalCh>
 80027fe:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a41      	ldr	r2, [pc, #260]	; (800290c <HAL_ADC_ConfigChannel+0x7c4>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d12c      	bne.n	8002866 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800280c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002810:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d126      	bne.n	8002866 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a3c      	ldr	r2, [pc, #240]	; (8002910 <HAL_ADC_ConfigChannel+0x7c8>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d004      	beq.n	800282c <HAL_ADC_ConfigChannel+0x6e4>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a3b      	ldr	r2, [pc, #236]	; (8002914 <HAL_ADC_ConfigChannel+0x7cc>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d15d      	bne.n	80028e8 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800282c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002830:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002834:	4619      	mov	r1, r3
 8002836:	4834      	ldr	r0, [pc, #208]	; (8002908 <HAL_ADC_ConfigChannel+0x7c0>)
 8002838:	f7fe fd75 	bl	8001326 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800283c:	4b36      	ldr	r3, [pc, #216]	; (8002918 <HAL_ADC_ConfigChannel+0x7d0>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	099b      	lsrs	r3, r3, #6
 8002842:	4a36      	ldr	r2, [pc, #216]	; (800291c <HAL_ADC_ConfigChannel+0x7d4>)
 8002844:	fba2 2303 	umull	r2, r3, r2, r3
 8002848:	099b      	lsrs	r3, r3, #6
 800284a:	1c5a      	adds	r2, r3, #1
 800284c:	4613      	mov	r3, r2
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	4413      	add	r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002856:	e002      	b.n	800285e <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	3b01      	subs	r3, #1
 800285c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1f9      	bne.n	8002858 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002864:	e040      	b.n	80028e8 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a2d      	ldr	r2, [pc, #180]	; (8002920 <HAL_ADC_ConfigChannel+0x7d8>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d118      	bne.n	80028a2 <HAL_ADC_ConfigChannel+0x75a>
 8002870:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002874:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d112      	bne.n	80028a2 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a23      	ldr	r2, [pc, #140]	; (8002910 <HAL_ADC_ConfigChannel+0x7c8>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d004      	beq.n	8002890 <HAL_ADC_ConfigChannel+0x748>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a22      	ldr	r2, [pc, #136]	; (8002914 <HAL_ADC_ConfigChannel+0x7cc>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d12d      	bne.n	80028ec <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002890:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002894:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002898:	4619      	mov	r1, r3
 800289a:	481b      	ldr	r0, [pc, #108]	; (8002908 <HAL_ADC_ConfigChannel+0x7c0>)
 800289c:	f7fe fd43 	bl	8001326 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028a0:	e024      	b.n	80028ec <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a1f      	ldr	r2, [pc, #124]	; (8002924 <HAL_ADC_ConfigChannel+0x7dc>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d120      	bne.n	80028ee <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80028ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d11a      	bne.n	80028ee <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a14      	ldr	r2, [pc, #80]	; (8002910 <HAL_ADC_ConfigChannel+0x7c8>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d115      	bne.n	80028ee <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028ca:	4619      	mov	r1, r3
 80028cc:	480e      	ldr	r0, [pc, #56]	; (8002908 <HAL_ADC_ConfigChannel+0x7c0>)
 80028ce:	f7fe fd2a 	bl	8001326 <LL_ADC_SetCommonPathInternalCh>
 80028d2:	e00c      	b.n	80028ee <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d8:	f043 0220 	orr.w	r2, r3, #32
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80028e6:	e002      	b.n	80028ee <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028e8:	bf00      	nop
 80028ea:	e000      	b.n	80028ee <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028ec:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80028f6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	37d8      	adds	r7, #216	; 0xd8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	80080000 	.word	0x80080000
 8002908:	50040300 	.word	0x50040300
 800290c:	c7520000 	.word	0xc7520000
 8002910:	50040000 	.word	0x50040000
 8002914:	50040200 	.word	0x50040200
 8002918:	20000000 	.word	0x20000000
 800291c:	053e2d63 	.word	0x053e2d63
 8002920:	cb840000 	.word	0xcb840000
 8002924:	80000001 	.word	0x80000001

08002928 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4618      	mov	r0, r3
 8002936:	f7fe fe8b 	bl	8001650 <LL_ADC_IsEnabled>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d14d      	bne.n	80029dc <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689a      	ldr	r2, [r3, #8]
 8002946:	4b28      	ldr	r3, [pc, #160]	; (80029e8 <ADC_Enable+0xc0>)
 8002948:	4013      	ands	r3, r2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00d      	beq.n	800296a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002952:	f043 0210 	orr.w	r2, r3, #16
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800295e:	f043 0201 	orr.w	r2, r3, #1
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e039      	b.n	80029de <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4618      	mov	r0, r3
 8002970:	f7fe fe5a 	bl	8001628 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002974:	f7fe fc94 	bl	80012a0 <HAL_GetTick>
 8002978:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800297a:	e028      	b.n	80029ce <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4618      	mov	r0, r3
 8002982:	f7fe fe65 	bl	8001650 <LL_ADC_IsEnabled>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d104      	bne.n	8002996 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4618      	mov	r0, r3
 8002992:	f7fe fe49 	bl	8001628 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002996:	f7fe fc83 	bl	80012a0 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d914      	bls.n	80029ce <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d00d      	beq.n	80029ce <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b6:	f043 0210 	orr.w	r2, r3, #16
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c2:	f043 0201 	orr.w	r2, r3, #1
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e007      	b.n	80029de <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d1cf      	bne.n	800297c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	8000003f 	.word	0x8000003f

080029ec <LL_ADC_IsEnabled>:
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d101      	bne.n	8002a04 <LL_ADC_IsEnabled+0x18>
 8002a00:	2301      	movs	r3, #1
 8002a02:	e000      	b.n	8002a06 <LL_ADC_IsEnabled+0x1a>
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr

08002a12 <LL_ADC_REG_IsConversionOngoing>:
{
 8002a12:	b480      	push	{r7}
 8002a14:	b083      	sub	sp, #12
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f003 0304 	and.w	r3, r3, #4
 8002a22:	2b04      	cmp	r3, #4
 8002a24:	d101      	bne.n	8002a2a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a26:	2301      	movs	r3, #1
 8002a28:	e000      	b.n	8002a2c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a2a:	2300      	movs	r3, #0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002a7c:	bf00      	nop
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002a90:	bf00      	nop
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002a9c:	b590      	push	{r4, r7, lr}
 8002a9e:	b09f      	sub	sp, #124	; 0x7c
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d101      	bne.n	8002aba <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	e093      	b.n	8002be2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2201      	movs	r2, #1
 8002abe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a47      	ldr	r2, [pc, #284]	; (8002bec <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d102      	bne.n	8002ada <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002ad4:	4b46      	ldr	r3, [pc, #280]	; (8002bf0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002ad6:	60bb      	str	r3, [r7, #8]
 8002ad8:	e001      	b.n	8002ade <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002ada:	2300      	movs	r3, #0
 8002adc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d10b      	bne.n	8002afc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae8:	f043 0220 	orr.w	r2, r3, #32
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e072      	b.n	8002be2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7ff ff87 	bl	8002a12 <LL_ADC_REG_IsConversionOngoing>
 8002b04:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7ff ff81 	bl	8002a12 <LL_ADC_REG_IsConversionOngoing>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d154      	bne.n	8002bc0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002b16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d151      	bne.n	8002bc0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002b1c:	4b35      	ldr	r3, [pc, #212]	; (8002bf4 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002b1e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d02c      	beq.n	8002b82 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002b28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	6859      	ldr	r1, [r3, #4]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b3a:	035b      	lsls	r3, r3, #13
 8002b3c:	430b      	orrs	r3, r1
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b42:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b44:	4829      	ldr	r0, [pc, #164]	; (8002bec <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002b46:	f7ff ff51 	bl	80029ec <LL_ADC_IsEnabled>
 8002b4a:	4604      	mov	r4, r0
 8002b4c:	4828      	ldr	r0, [pc, #160]	; (8002bf0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002b4e:	f7ff ff4d 	bl	80029ec <LL_ADC_IsEnabled>
 8002b52:	4603      	mov	r3, r0
 8002b54:	431c      	orrs	r4, r3
 8002b56:	4828      	ldr	r0, [pc, #160]	; (8002bf8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002b58:	f7ff ff48 	bl	80029ec <LL_ADC_IsEnabled>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	4323      	orrs	r3, r4
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d137      	bne.n	8002bd4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002b64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002b6c:	f023 030f 	bic.w	r3, r3, #15
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	6811      	ldr	r1, [r2, #0]
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	6892      	ldr	r2, [r2, #8]
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b7e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b80:	e028      	b.n	8002bd4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002b82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b8c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b8e:	4817      	ldr	r0, [pc, #92]	; (8002bec <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002b90:	f7ff ff2c 	bl	80029ec <LL_ADC_IsEnabled>
 8002b94:	4604      	mov	r4, r0
 8002b96:	4816      	ldr	r0, [pc, #88]	; (8002bf0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002b98:	f7ff ff28 	bl	80029ec <LL_ADC_IsEnabled>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	431c      	orrs	r4, r3
 8002ba0:	4815      	ldr	r0, [pc, #84]	; (8002bf8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002ba2:	f7ff ff23 	bl	80029ec <LL_ADC_IsEnabled>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	4323      	orrs	r3, r4
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d112      	bne.n	8002bd4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002bae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002bb6:	f023 030f 	bic.w	r3, r3, #15
 8002bba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002bbc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002bbe:	e009      	b.n	8002bd4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc4:	f043 0220 	orr.w	r2, r3, #32
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002bd2:	e000      	b.n	8002bd6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002bd4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002bde:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	377c      	adds	r7, #124	; 0x7c
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd90      	pop	{r4, r7, pc}
 8002bea:	bf00      	nop
 8002bec:	50040000 	.word	0x50040000
 8002bf0:	50040100 	.word	0x50040100
 8002bf4:	50040300 	.word	0x50040300
 8002bf8:	50040200 	.word	0x50040200

08002bfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f003 0307 	and.w	r3, r3, #7
 8002c0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c0c:	4b0c      	ldr	r3, [pc, #48]	; (8002c40 <__NVIC_SetPriorityGrouping+0x44>)
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c12:	68ba      	ldr	r2, [r7, #8]
 8002c14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c18:	4013      	ands	r3, r2
 8002c1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c2e:	4a04      	ldr	r2, [pc, #16]	; (8002c40 <__NVIC_SetPriorityGrouping+0x44>)
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	60d3      	str	r3, [r2, #12]
}
 8002c34:	bf00      	nop
 8002c36:	3714      	adds	r7, #20
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr
 8002c40:	e000ed00 	.word	0xe000ed00

08002c44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c48:	4b04      	ldr	r3, [pc, #16]	; (8002c5c <__NVIC_GetPriorityGrouping+0x18>)
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	0a1b      	lsrs	r3, r3, #8
 8002c4e:	f003 0307 	and.w	r3, r3, #7
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr
 8002c5c:	e000ed00 	.word	0xe000ed00

08002c60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	4603      	mov	r3, r0
 8002c68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	db0b      	blt.n	8002c8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c72:	79fb      	ldrb	r3, [r7, #7]
 8002c74:	f003 021f 	and.w	r2, r3, #31
 8002c78:	4907      	ldr	r1, [pc, #28]	; (8002c98 <__NVIC_EnableIRQ+0x38>)
 8002c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7e:	095b      	lsrs	r3, r3, #5
 8002c80:	2001      	movs	r0, #1
 8002c82:	fa00 f202 	lsl.w	r2, r0, r2
 8002c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c8a:	bf00      	nop
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	e000e100 	.word	0xe000e100

08002c9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	6039      	str	r1, [r7, #0]
 8002ca6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	db0a      	blt.n	8002cc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	b2da      	uxtb	r2, r3
 8002cb4:	490c      	ldr	r1, [pc, #48]	; (8002ce8 <__NVIC_SetPriority+0x4c>)
 8002cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cba:	0112      	lsls	r2, r2, #4
 8002cbc:	b2d2      	uxtb	r2, r2
 8002cbe:	440b      	add	r3, r1
 8002cc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cc4:	e00a      	b.n	8002cdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	b2da      	uxtb	r2, r3
 8002cca:	4908      	ldr	r1, [pc, #32]	; (8002cec <__NVIC_SetPriority+0x50>)
 8002ccc:	79fb      	ldrb	r3, [r7, #7]
 8002cce:	f003 030f 	and.w	r3, r3, #15
 8002cd2:	3b04      	subs	r3, #4
 8002cd4:	0112      	lsls	r2, r2, #4
 8002cd6:	b2d2      	uxtb	r2, r2
 8002cd8:	440b      	add	r3, r1
 8002cda:	761a      	strb	r2, [r3, #24]
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr
 8002ce8:	e000e100 	.word	0xe000e100
 8002cec:	e000ed00 	.word	0xe000ed00

08002cf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b089      	sub	sp, #36	; 0x24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f003 0307 	and.w	r3, r3, #7
 8002d02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	f1c3 0307 	rsb	r3, r3, #7
 8002d0a:	2b04      	cmp	r3, #4
 8002d0c:	bf28      	it	cs
 8002d0e:	2304      	movcs	r3, #4
 8002d10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	3304      	adds	r3, #4
 8002d16:	2b06      	cmp	r3, #6
 8002d18:	d902      	bls.n	8002d20 <NVIC_EncodePriority+0x30>
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	3b03      	subs	r3, #3
 8002d1e:	e000      	b.n	8002d22 <NVIC_EncodePriority+0x32>
 8002d20:	2300      	movs	r3, #0
 8002d22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d24:	f04f 32ff 	mov.w	r2, #4294967295
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2e:	43da      	mvns	r2, r3
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	401a      	ands	r2, r3
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d38:	f04f 31ff 	mov.w	r1, #4294967295
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d42:	43d9      	mvns	r1, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d48:	4313      	orrs	r3, r2
         );
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3724      	adds	r7, #36	; 0x24
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
	...

08002d58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	3b01      	subs	r3, #1
 8002d64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d68:	d301      	bcc.n	8002d6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e00f      	b.n	8002d8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d6e:	4a0a      	ldr	r2, [pc, #40]	; (8002d98 <SysTick_Config+0x40>)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	3b01      	subs	r3, #1
 8002d74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d76:	210f      	movs	r1, #15
 8002d78:	f04f 30ff 	mov.w	r0, #4294967295
 8002d7c:	f7ff ff8e 	bl	8002c9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d80:	4b05      	ldr	r3, [pc, #20]	; (8002d98 <SysTick_Config+0x40>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d86:	4b04      	ldr	r3, [pc, #16]	; (8002d98 <SysTick_Config+0x40>)
 8002d88:	2207      	movs	r2, #7
 8002d8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3708      	adds	r7, #8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	e000e010 	.word	0xe000e010

08002d9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f7ff ff29 	bl	8002bfc <__NVIC_SetPriorityGrouping>
}
 8002daa:	bf00      	nop
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b086      	sub	sp, #24
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	4603      	mov	r3, r0
 8002dba:	60b9      	str	r1, [r7, #8]
 8002dbc:	607a      	str	r2, [r7, #4]
 8002dbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002dc4:	f7ff ff3e 	bl	8002c44 <__NVIC_GetPriorityGrouping>
 8002dc8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	68b9      	ldr	r1, [r7, #8]
 8002dce:	6978      	ldr	r0, [r7, #20]
 8002dd0:	f7ff ff8e 	bl	8002cf0 <NVIC_EncodePriority>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dda:	4611      	mov	r1, r2
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff ff5d 	bl	8002c9c <__NVIC_SetPriority>
}
 8002de2:	bf00      	nop
 8002de4:	3718      	adds	r7, #24
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b082      	sub	sp, #8
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	4603      	mov	r3, r0
 8002df2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7ff ff31 	bl	8002c60 <__NVIC_EnableIRQ>
}
 8002dfe:	bf00      	nop
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b082      	sub	sp, #8
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f7ff ffa2 	bl	8002d58 <SysTick_Config>
 8002e14:	4603      	mov	r3, r0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
	...

08002e20 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b085      	sub	sp, #20
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e098      	b.n	8002f64 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	461a      	mov	r2, r3
 8002e38:	4b4d      	ldr	r3, [pc, #308]	; (8002f70 <HAL_DMA_Init+0x150>)
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d80f      	bhi.n	8002e5e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	461a      	mov	r2, r3
 8002e44:	4b4b      	ldr	r3, [pc, #300]	; (8002f74 <HAL_DMA_Init+0x154>)
 8002e46:	4413      	add	r3, r2
 8002e48:	4a4b      	ldr	r2, [pc, #300]	; (8002f78 <HAL_DMA_Init+0x158>)
 8002e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e4e:	091b      	lsrs	r3, r3, #4
 8002e50:	009a      	lsls	r2, r3, #2
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a48      	ldr	r2, [pc, #288]	; (8002f7c <HAL_DMA_Init+0x15c>)
 8002e5a:	641a      	str	r2, [r3, #64]	; 0x40
 8002e5c:	e00e      	b.n	8002e7c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	461a      	mov	r2, r3
 8002e64:	4b46      	ldr	r3, [pc, #280]	; (8002f80 <HAL_DMA_Init+0x160>)
 8002e66:	4413      	add	r3, r2
 8002e68:	4a43      	ldr	r2, [pc, #268]	; (8002f78 <HAL_DMA_Init+0x158>)
 8002e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6e:	091b      	lsrs	r3, r3, #4
 8002e70:	009a      	lsls	r2, r3, #2
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a42      	ldr	r2, [pc, #264]	; (8002f84 <HAL_DMA_Init+0x164>)
 8002e7a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2202      	movs	r2, #2
 8002e80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e96:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002ea0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eb8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a1b      	ldr	r3, [r3, #32]
 8002ebe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ed6:	d039      	beq.n	8002f4c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002edc:	4a27      	ldr	r2, [pc, #156]	; (8002f7c <HAL_DMA_Init+0x15c>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d11a      	bne.n	8002f18 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002ee2:	4b29      	ldr	r3, [pc, #164]	; (8002f88 <HAL_DMA_Init+0x168>)
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eea:	f003 031c 	and.w	r3, r3, #28
 8002eee:	210f      	movs	r1, #15
 8002ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	4924      	ldr	r1, [pc, #144]	; (8002f88 <HAL_DMA_Init+0x168>)
 8002ef8:	4013      	ands	r3, r2
 8002efa:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002efc:	4b22      	ldr	r3, [pc, #136]	; (8002f88 <HAL_DMA_Init+0x168>)
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6859      	ldr	r1, [r3, #4]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f08:	f003 031c 	and.w	r3, r3, #28
 8002f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f10:	491d      	ldr	r1, [pc, #116]	; (8002f88 <HAL_DMA_Init+0x168>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	600b      	str	r3, [r1, #0]
 8002f16:	e019      	b.n	8002f4c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002f18:	4b1c      	ldr	r3, [pc, #112]	; (8002f8c <HAL_DMA_Init+0x16c>)
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f20:	f003 031c 	and.w	r3, r3, #28
 8002f24:	210f      	movs	r1, #15
 8002f26:	fa01 f303 	lsl.w	r3, r1, r3
 8002f2a:	43db      	mvns	r3, r3
 8002f2c:	4917      	ldr	r1, [pc, #92]	; (8002f8c <HAL_DMA_Init+0x16c>)
 8002f2e:	4013      	ands	r3, r2
 8002f30:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002f32:	4b16      	ldr	r3, [pc, #88]	; (8002f8c <HAL_DMA_Init+0x16c>)
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6859      	ldr	r1, [r3, #4]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3e:	f003 031c 	and.w	r3, r3, #28
 8002f42:	fa01 f303 	lsl.w	r3, r1, r3
 8002f46:	4911      	ldr	r1, [pc, #68]	; (8002f8c <HAL_DMA_Init+0x16c>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2201      	movs	r2, #1
 8002f56:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3714      	adds	r7, #20
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr
 8002f70:	40020407 	.word	0x40020407
 8002f74:	bffdfff8 	.word	0xbffdfff8
 8002f78:	cccccccd 	.word	0xcccccccd
 8002f7c:	40020000 	.word	0x40020000
 8002f80:	bffdfbf8 	.word	0xbffdfbf8
 8002f84:	40020400 	.word	0x40020400
 8002f88:	400200a8 	.word	0x400200a8
 8002f8c:	400204a8 	.word	0x400204a8

08002f90 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fac:	f003 031c 	and.w	r3, r3, #28
 8002fb0:	2204      	movs	r2, #4
 8002fb2:	409a      	lsls	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d026      	beq.n	800300a <HAL_DMA_IRQHandler+0x7a>
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	f003 0304 	and.w	r3, r3, #4
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d021      	beq.n	800300a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0320 	and.w	r3, r3, #32
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d107      	bne.n	8002fe4 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f022 0204 	bic.w	r2, r2, #4
 8002fe2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe8:	f003 021c 	and.w	r2, r3, #28
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff0:	2104      	movs	r1, #4
 8002ff2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ff6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d071      	beq.n	80030e4 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003008:	e06c      	b.n	80030e4 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800300e:	f003 031c 	and.w	r3, r3, #28
 8003012:	2202      	movs	r2, #2
 8003014:	409a      	lsls	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	4013      	ands	r3, r2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d02e      	beq.n	800307c <HAL_DMA_IRQHandler+0xec>
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	2b00      	cmp	r3, #0
 8003026:	d029      	beq.n	800307c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0320 	and.w	r3, r3, #32
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10b      	bne.n	800304e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f022 020a 	bic.w	r2, r2, #10
 8003044:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2201      	movs	r2, #1
 800304a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003052:	f003 021c 	and.w	r2, r3, #28
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305a:	2102      	movs	r1, #2
 800305c:	fa01 f202 	lsl.w	r2, r1, r2
 8003060:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306e:	2b00      	cmp	r3, #0
 8003070:	d038      	beq.n	80030e4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800307a:	e033      	b.n	80030e4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003080:	f003 031c 	and.w	r3, r3, #28
 8003084:	2208      	movs	r2, #8
 8003086:	409a      	lsls	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	4013      	ands	r3, r2
 800308c:	2b00      	cmp	r3, #0
 800308e:	d02a      	beq.n	80030e6 <HAL_DMA_IRQHandler+0x156>
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	f003 0308 	and.w	r3, r3, #8
 8003096:	2b00      	cmp	r3, #0
 8003098:	d025      	beq.n	80030e6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f022 020e 	bic.w	r2, r2, #14
 80030a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ae:	f003 021c 	and.w	r2, r3, #28
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	2101      	movs	r1, #1
 80030b8:	fa01 f202 	lsl.w	r2, r1, r2
 80030bc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d004      	beq.n	80030e6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80030e4:	bf00      	nop
 80030e6:	bf00      	nop
}
 80030e8:	3710      	adds	r7, #16
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
	...

080030f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b087      	sub	sp, #28
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030fa:	2300      	movs	r3, #0
 80030fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030fe:	e17f      	b.n	8003400 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	2101      	movs	r1, #1
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	fa01 f303 	lsl.w	r3, r1, r3
 800310c:	4013      	ands	r3, r2
 800310e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2b00      	cmp	r3, #0
 8003114:	f000 8171 	beq.w	80033fa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f003 0303 	and.w	r3, r3, #3
 8003120:	2b01      	cmp	r3, #1
 8003122:	d005      	beq.n	8003130 <HAL_GPIO_Init+0x40>
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f003 0303 	and.w	r3, r3, #3
 800312c:	2b02      	cmp	r3, #2
 800312e:	d130      	bne.n	8003192 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	2203      	movs	r2, #3
 800313c:	fa02 f303 	lsl.w	r3, r2, r3
 8003140:	43db      	mvns	r3, r3
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	4013      	ands	r3, r2
 8003146:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	68da      	ldr	r2, [r3, #12]
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	4313      	orrs	r3, r2
 8003158:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	693a      	ldr	r2, [r7, #16]
 800315e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003166:	2201      	movs	r2, #1
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	fa02 f303 	lsl.w	r3, r2, r3
 800316e:	43db      	mvns	r3, r3
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	4013      	ands	r3, r2
 8003174:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	091b      	lsrs	r3, r3, #4
 800317c:	f003 0201 	and.w	r2, r3, #1
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	fa02 f303 	lsl.w	r3, r2, r3
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	4313      	orrs	r3, r2
 800318a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f003 0303 	and.w	r3, r3, #3
 800319a:	2b03      	cmp	r3, #3
 800319c:	d118      	bne.n	80031d0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80031a4:	2201      	movs	r2, #1
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ac:	43db      	mvns	r3, r3
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	4013      	ands	r3, r2
 80031b2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	08db      	lsrs	r3, r3, #3
 80031ba:	f003 0201 	and.w	r2, r3, #1
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	fa02 f303 	lsl.w	r3, r2, r3
 80031c4:	693a      	ldr	r2, [r7, #16]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f003 0303 	and.w	r3, r3, #3
 80031d8:	2b03      	cmp	r3, #3
 80031da:	d017      	beq.n	800320c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	2203      	movs	r2, #3
 80031e8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ec:	43db      	mvns	r3, r3
 80031ee:	693a      	ldr	r2, [r7, #16]
 80031f0:	4013      	ands	r3, r2
 80031f2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	693a      	ldr	r2, [r7, #16]
 8003202:	4313      	orrs	r3, r2
 8003204:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f003 0303 	and.w	r3, r3, #3
 8003214:	2b02      	cmp	r3, #2
 8003216:	d123      	bne.n	8003260 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	08da      	lsrs	r2, r3, #3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3208      	adds	r2, #8
 8003220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003224:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	f003 0307 	and.w	r3, r3, #7
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	220f      	movs	r2, #15
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	43db      	mvns	r3, r3
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	4013      	ands	r3, r2
 800323a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	691a      	ldr	r2, [r3, #16]
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	f003 0307 	and.w	r3, r3, #7
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	4313      	orrs	r3, r2
 8003250:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	08da      	lsrs	r2, r3, #3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	3208      	adds	r2, #8
 800325a:	6939      	ldr	r1, [r7, #16]
 800325c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	2203      	movs	r2, #3
 800326c:	fa02 f303 	lsl.w	r3, r2, r3
 8003270:	43db      	mvns	r3, r3
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	4013      	ands	r3, r2
 8003276:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f003 0203 	and.w	r2, r3, #3
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	693a      	ldr	r2, [r7, #16]
 800328a:	4313      	orrs	r3, r2
 800328c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800329c:	2b00      	cmp	r3, #0
 800329e:	f000 80ac 	beq.w	80033fa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032a2:	4b5f      	ldr	r3, [pc, #380]	; (8003420 <HAL_GPIO_Init+0x330>)
 80032a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032a6:	4a5e      	ldr	r2, [pc, #376]	; (8003420 <HAL_GPIO_Init+0x330>)
 80032a8:	f043 0301 	orr.w	r3, r3, #1
 80032ac:	6613      	str	r3, [r2, #96]	; 0x60
 80032ae:	4b5c      	ldr	r3, [pc, #368]	; (8003420 <HAL_GPIO_Init+0x330>)
 80032b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	60bb      	str	r3, [r7, #8]
 80032b8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80032ba:	4a5a      	ldr	r2, [pc, #360]	; (8003424 <HAL_GPIO_Init+0x334>)
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	089b      	lsrs	r3, r3, #2
 80032c0:	3302      	adds	r3, #2
 80032c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	f003 0303 	and.w	r3, r3, #3
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	220f      	movs	r2, #15
 80032d2:	fa02 f303 	lsl.w	r3, r2, r3
 80032d6:	43db      	mvns	r3, r3
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	4013      	ands	r3, r2
 80032dc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80032e4:	d025      	beq.n	8003332 <HAL_GPIO_Init+0x242>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a4f      	ldr	r2, [pc, #316]	; (8003428 <HAL_GPIO_Init+0x338>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d01f      	beq.n	800332e <HAL_GPIO_Init+0x23e>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a4e      	ldr	r2, [pc, #312]	; (800342c <HAL_GPIO_Init+0x33c>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d019      	beq.n	800332a <HAL_GPIO_Init+0x23a>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a4d      	ldr	r2, [pc, #308]	; (8003430 <HAL_GPIO_Init+0x340>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d013      	beq.n	8003326 <HAL_GPIO_Init+0x236>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a4c      	ldr	r2, [pc, #304]	; (8003434 <HAL_GPIO_Init+0x344>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d00d      	beq.n	8003322 <HAL_GPIO_Init+0x232>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a4b      	ldr	r2, [pc, #300]	; (8003438 <HAL_GPIO_Init+0x348>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d007      	beq.n	800331e <HAL_GPIO_Init+0x22e>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a4a      	ldr	r2, [pc, #296]	; (800343c <HAL_GPIO_Init+0x34c>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d101      	bne.n	800331a <HAL_GPIO_Init+0x22a>
 8003316:	2306      	movs	r3, #6
 8003318:	e00c      	b.n	8003334 <HAL_GPIO_Init+0x244>
 800331a:	2307      	movs	r3, #7
 800331c:	e00a      	b.n	8003334 <HAL_GPIO_Init+0x244>
 800331e:	2305      	movs	r3, #5
 8003320:	e008      	b.n	8003334 <HAL_GPIO_Init+0x244>
 8003322:	2304      	movs	r3, #4
 8003324:	e006      	b.n	8003334 <HAL_GPIO_Init+0x244>
 8003326:	2303      	movs	r3, #3
 8003328:	e004      	b.n	8003334 <HAL_GPIO_Init+0x244>
 800332a:	2302      	movs	r3, #2
 800332c:	e002      	b.n	8003334 <HAL_GPIO_Init+0x244>
 800332e:	2301      	movs	r3, #1
 8003330:	e000      	b.n	8003334 <HAL_GPIO_Init+0x244>
 8003332:	2300      	movs	r3, #0
 8003334:	697a      	ldr	r2, [r7, #20]
 8003336:	f002 0203 	and.w	r2, r2, #3
 800333a:	0092      	lsls	r2, r2, #2
 800333c:	4093      	lsls	r3, r2
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	4313      	orrs	r3, r2
 8003342:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003344:	4937      	ldr	r1, [pc, #220]	; (8003424 <HAL_GPIO_Init+0x334>)
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	089b      	lsrs	r3, r3, #2
 800334a:	3302      	adds	r3, #2
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003352:	4b3b      	ldr	r3, [pc, #236]	; (8003440 <HAL_GPIO_Init+0x350>)
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	43db      	mvns	r3, r3
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	4013      	ands	r3, r2
 8003360:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d003      	beq.n	8003376 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	4313      	orrs	r3, r2
 8003374:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003376:	4a32      	ldr	r2, [pc, #200]	; (8003440 <HAL_GPIO_Init+0x350>)
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800337c:	4b30      	ldr	r3, [pc, #192]	; (8003440 <HAL_GPIO_Init+0x350>)
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	43db      	mvns	r3, r3
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	4013      	ands	r3, r2
 800338a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d003      	beq.n	80033a0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003398:	693a      	ldr	r2, [r7, #16]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	4313      	orrs	r3, r2
 800339e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80033a0:	4a27      	ldr	r2, [pc, #156]	; (8003440 <HAL_GPIO_Init+0x350>)
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80033a6:	4b26      	ldr	r3, [pc, #152]	; (8003440 <HAL_GPIO_Init+0x350>)
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	43db      	mvns	r3, r3
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	4013      	ands	r3, r2
 80033b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d003      	beq.n	80033ca <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80033ca:	4a1d      	ldr	r2, [pc, #116]	; (8003440 <HAL_GPIO_Init+0x350>)
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80033d0:	4b1b      	ldr	r3, [pc, #108]	; (8003440 <HAL_GPIO_Init+0x350>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	43db      	mvns	r3, r3
 80033da:	693a      	ldr	r2, [r7, #16]
 80033dc:	4013      	ands	r3, r2
 80033de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d003      	beq.n	80033f4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80033f4:	4a12      	ldr	r2, [pc, #72]	; (8003440 <HAL_GPIO_Init+0x350>)
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	3301      	adds	r3, #1
 80033fe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	fa22 f303 	lsr.w	r3, r2, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	f47f ae78 	bne.w	8003100 <HAL_GPIO_Init+0x10>
  }
}
 8003410:	bf00      	nop
 8003412:	bf00      	nop
 8003414:	371c      	adds	r7, #28
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	40021000 	.word	0x40021000
 8003424:	40010000 	.word	0x40010000
 8003428:	48000400 	.word	0x48000400
 800342c:	48000800 	.word	0x48000800
 8003430:	48000c00 	.word	0x48000c00
 8003434:	48001000 	.word	0x48001000
 8003438:	48001400 	.word	0x48001400
 800343c:	48001800 	.word	0x48001800
 8003440:	40010400 	.word	0x40010400

08003444 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	460b      	mov	r3, r1
 800344e:	807b      	strh	r3, [r7, #2]
 8003450:	4613      	mov	r3, r2
 8003452:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003454:	787b      	ldrb	r3, [r7, #1]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d003      	beq.n	8003462 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800345a:	887a      	ldrh	r2, [r7, #2]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003460:	e002      	b.n	8003468 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003462:	887a      	ldrh	r2, [r7, #2]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003468:	bf00      	nop
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003474:	b480      	push	{r7}
 8003476:	b085      	sub	sp, #20
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	460b      	mov	r3, r1
 800347e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	695b      	ldr	r3, [r3, #20]
 8003484:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003486:	887a      	ldrh	r2, [r7, #2]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	4013      	ands	r3, r2
 800348c:	041a      	lsls	r2, r3, #16
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	43d9      	mvns	r1, r3
 8003492:	887b      	ldrh	r3, [r7, #2]
 8003494:	400b      	ands	r3, r1
 8003496:	431a      	orrs	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	619a      	str	r2, [r3, #24]
}
 800349c:	bf00      	nop
 800349e:	3714      	adds	r7, #20
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80034ac:	4b04      	ldr	r3, [pc, #16]	; (80034c0 <HAL_PWREx_GetVoltageRange+0x18>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	40007000 	.word	0x40007000

080034c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034d2:	d130      	bne.n	8003536 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80034d4:	4b23      	ldr	r3, [pc, #140]	; (8003564 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80034dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034e0:	d038      	beq.n	8003554 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80034e2:	4b20      	ldr	r3, [pc, #128]	; (8003564 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80034ea:	4a1e      	ldr	r2, [pc, #120]	; (8003564 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034f0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80034f2:	4b1d      	ldr	r3, [pc, #116]	; (8003568 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2232      	movs	r2, #50	; 0x32
 80034f8:	fb02 f303 	mul.w	r3, r2, r3
 80034fc:	4a1b      	ldr	r2, [pc, #108]	; (800356c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80034fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003502:	0c9b      	lsrs	r3, r3, #18
 8003504:	3301      	adds	r3, #1
 8003506:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003508:	e002      	b.n	8003510 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	3b01      	subs	r3, #1
 800350e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003510:	4b14      	ldr	r3, [pc, #80]	; (8003564 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003512:	695b      	ldr	r3, [r3, #20]
 8003514:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003518:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800351c:	d102      	bne.n	8003524 <HAL_PWREx_ControlVoltageScaling+0x60>
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1f2      	bne.n	800350a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003524:	4b0f      	ldr	r3, [pc, #60]	; (8003564 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003526:	695b      	ldr	r3, [r3, #20]
 8003528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800352c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003530:	d110      	bne.n	8003554 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e00f      	b.n	8003556 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003536:	4b0b      	ldr	r3, [pc, #44]	; (8003564 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800353e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003542:	d007      	beq.n	8003554 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003544:	4b07      	ldr	r3, [pc, #28]	; (8003564 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800354c:	4a05      	ldr	r2, [pc, #20]	; (8003564 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800354e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003552:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3714      	adds	r7, #20
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	40007000 	.word	0x40007000
 8003568:	20000000 	.word	0x20000000
 800356c:	431bde83 	.word	0x431bde83

08003570 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b088      	sub	sp, #32
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e3d4      	b.n	8003d2c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003582:	4ba1      	ldr	r3, [pc, #644]	; (8003808 <HAL_RCC_OscConfig+0x298>)
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f003 030c 	and.w	r3, r3, #12
 800358a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800358c:	4b9e      	ldr	r3, [pc, #632]	; (8003808 <HAL_RCC_OscConfig+0x298>)
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	f003 0303 	and.w	r3, r3, #3
 8003594:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0310 	and.w	r3, r3, #16
 800359e:	2b00      	cmp	r3, #0
 80035a0:	f000 80e4 	beq.w	800376c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d007      	beq.n	80035ba <HAL_RCC_OscConfig+0x4a>
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	2b0c      	cmp	r3, #12
 80035ae:	f040 808b 	bne.w	80036c8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	f040 8087 	bne.w	80036c8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035ba:	4b93      	ldr	r3, [pc, #588]	; (8003808 <HAL_RCC_OscConfig+0x298>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d005      	beq.n	80035d2 <HAL_RCC_OscConfig+0x62>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e3ac      	b.n	8003d2c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a1a      	ldr	r2, [r3, #32]
 80035d6:	4b8c      	ldr	r3, [pc, #560]	; (8003808 <HAL_RCC_OscConfig+0x298>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0308 	and.w	r3, r3, #8
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d004      	beq.n	80035ec <HAL_RCC_OscConfig+0x7c>
 80035e2:	4b89      	ldr	r3, [pc, #548]	; (8003808 <HAL_RCC_OscConfig+0x298>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035ea:	e005      	b.n	80035f8 <HAL_RCC_OscConfig+0x88>
 80035ec:	4b86      	ldr	r3, [pc, #536]	; (8003808 <HAL_RCC_OscConfig+0x298>)
 80035ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035f2:	091b      	lsrs	r3, r3, #4
 80035f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d223      	bcs.n	8003644 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a1b      	ldr	r3, [r3, #32]
 8003600:	4618      	mov	r0, r3
 8003602:	f000 fd41 	bl	8004088 <RCC_SetFlashLatencyFromMSIRange>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d001      	beq.n	8003610 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e38d      	b.n	8003d2c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003610:	4b7d      	ldr	r3, [pc, #500]	; (8003808 <HAL_RCC_OscConfig+0x298>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a7c      	ldr	r2, [pc, #496]	; (8003808 <HAL_RCC_OscConfig+0x298>)
 8003616:	f043 0308 	orr.w	r3, r3, #8
 800361a:	6013      	str	r3, [r2, #0]
 800361c:	4b7a      	ldr	r3, [pc, #488]	; (8003808 <HAL_RCC_OscConfig+0x298>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a1b      	ldr	r3, [r3, #32]
 8003628:	4977      	ldr	r1, [pc, #476]	; (8003808 <HAL_RCC_OscConfig+0x298>)
 800362a:	4313      	orrs	r3, r2
 800362c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800362e:	4b76      	ldr	r3, [pc, #472]	; (8003808 <HAL_RCC_OscConfig+0x298>)
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	69db      	ldr	r3, [r3, #28]
 800363a:	021b      	lsls	r3, r3, #8
 800363c:	4972      	ldr	r1, [pc, #456]	; (8003808 <HAL_RCC_OscConfig+0x298>)
 800363e:	4313      	orrs	r3, r2
 8003640:	604b      	str	r3, [r1, #4]
 8003642:	e025      	b.n	8003690 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003644:	4b70      	ldr	r3, [pc, #448]	; (8003808 <HAL_RCC_OscConfig+0x298>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a6f      	ldr	r2, [pc, #444]	; (8003808 <HAL_RCC_OscConfig+0x298>)
 800364a:	f043 0308 	orr.w	r3, r3, #8
 800364e:	6013      	str	r3, [r2, #0]
 8003650:	4b6d      	ldr	r3, [pc, #436]	; (8003808 <HAL_RCC_OscConfig+0x298>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a1b      	ldr	r3, [r3, #32]
 800365c:	496a      	ldr	r1, [pc, #424]	; (8003808 <HAL_RCC_OscConfig+0x298>)
 800365e:	4313      	orrs	r3, r2
 8003660:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003662:	4b69      	ldr	r3, [pc, #420]	; (8003808 <HAL_RCC_OscConfig+0x298>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	69db      	ldr	r3, [r3, #28]
 800366e:	021b      	lsls	r3, r3, #8
 8003670:	4965      	ldr	r1, [pc, #404]	; (8003808 <HAL_RCC_OscConfig+0x298>)
 8003672:	4313      	orrs	r3, r2
 8003674:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d109      	bne.n	8003690 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a1b      	ldr	r3, [r3, #32]
 8003680:	4618      	mov	r0, r3
 8003682:	f000 fd01 	bl	8004088 <RCC_SetFlashLatencyFromMSIRange>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d001      	beq.n	8003690 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e34d      	b.n	8003d2c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003690:	f000 fc36 	bl	8003f00 <HAL_RCC_GetSysClockFreq>
 8003694:	4602      	mov	r2, r0
 8003696:	4b5c      	ldr	r3, [pc, #368]	; (8003808 <HAL_RCC_OscConfig+0x298>)
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	091b      	lsrs	r3, r3, #4
 800369c:	f003 030f 	and.w	r3, r3, #15
 80036a0:	495a      	ldr	r1, [pc, #360]	; (800380c <HAL_RCC_OscConfig+0x29c>)
 80036a2:	5ccb      	ldrb	r3, [r1, r3]
 80036a4:	f003 031f 	and.w	r3, r3, #31
 80036a8:	fa22 f303 	lsr.w	r3, r2, r3
 80036ac:	4a58      	ldr	r2, [pc, #352]	; (8003810 <HAL_RCC_OscConfig+0x2a0>)
 80036ae:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80036b0:	4b58      	ldr	r3, [pc, #352]	; (8003814 <HAL_RCC_OscConfig+0x2a4>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4618      	mov	r0, r3
 80036b6:	f7fd fda3 	bl	8001200 <HAL_InitTick>
 80036ba:	4603      	mov	r3, r0
 80036bc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80036be:	7bfb      	ldrb	r3, [r7, #15]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d052      	beq.n	800376a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80036c4:	7bfb      	ldrb	r3, [r7, #15]
 80036c6:	e331      	b.n	8003d2c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d032      	beq.n	8003736 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80036d0:	4b4d      	ldr	r3, [pc, #308]	; (8003808 <HAL_RCC_OscConfig+0x298>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a4c      	ldr	r2, [pc, #304]	; (8003808 <HAL_RCC_OscConfig+0x298>)
 80036d6:	f043 0301 	orr.w	r3, r3, #1
 80036da:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80036dc:	f7fd fde0 	bl	80012a0 <HAL_GetTick>
 80036e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036e2:	e008      	b.n	80036f6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036e4:	f7fd fddc 	bl	80012a0 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e31a      	b.n	8003d2c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036f6:	4b44      	ldr	r3, [pc, #272]	; (8003808 <HAL_RCC_OscConfig+0x298>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d0f0      	beq.n	80036e4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003702:	4b41      	ldr	r3, [pc, #260]	; (8003808 <HAL_RCC_OscConfig+0x298>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a40      	ldr	r2, [pc, #256]	; (8003808 <HAL_RCC_OscConfig+0x298>)
 8003708:	f043 0308 	orr.w	r3, r3, #8
 800370c:	6013      	str	r3, [r2, #0]
 800370e:	4b3e      	ldr	r3, [pc, #248]	; (8003808 <HAL_RCC_OscConfig+0x298>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a1b      	ldr	r3, [r3, #32]
 800371a:	493b      	ldr	r1, [pc, #236]	; (8003808 <HAL_RCC_OscConfig+0x298>)
 800371c:	4313      	orrs	r3, r2
 800371e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003720:	4b39      	ldr	r3, [pc, #228]	; (8003808 <HAL_RCC_OscConfig+0x298>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	69db      	ldr	r3, [r3, #28]
 800372c:	021b      	lsls	r3, r3, #8
 800372e:	4936      	ldr	r1, [pc, #216]	; (8003808 <HAL_RCC_OscConfig+0x298>)
 8003730:	4313      	orrs	r3, r2
 8003732:	604b      	str	r3, [r1, #4]
 8003734:	e01a      	b.n	800376c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003736:	4b34      	ldr	r3, [pc, #208]	; (8003808 <HAL_RCC_OscConfig+0x298>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a33      	ldr	r2, [pc, #204]	; (8003808 <HAL_RCC_OscConfig+0x298>)
 800373c:	f023 0301 	bic.w	r3, r3, #1
 8003740:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003742:	f7fd fdad 	bl	80012a0 <HAL_GetTick>
 8003746:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003748:	e008      	b.n	800375c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800374a:	f7fd fda9 	bl	80012a0 <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	2b02      	cmp	r3, #2
 8003756:	d901      	bls.n	800375c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e2e7      	b.n	8003d2c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800375c:	4b2a      	ldr	r3, [pc, #168]	; (8003808 <HAL_RCC_OscConfig+0x298>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1f0      	bne.n	800374a <HAL_RCC_OscConfig+0x1da>
 8003768:	e000      	b.n	800376c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800376a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0301 	and.w	r3, r3, #1
 8003774:	2b00      	cmp	r3, #0
 8003776:	d074      	beq.n	8003862 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	2b08      	cmp	r3, #8
 800377c:	d005      	beq.n	800378a <HAL_RCC_OscConfig+0x21a>
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	2b0c      	cmp	r3, #12
 8003782:	d10e      	bne.n	80037a2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	2b03      	cmp	r3, #3
 8003788:	d10b      	bne.n	80037a2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800378a:	4b1f      	ldr	r3, [pc, #124]	; (8003808 <HAL_RCC_OscConfig+0x298>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d064      	beq.n	8003860 <HAL_RCC_OscConfig+0x2f0>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d160      	bne.n	8003860 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e2c4      	b.n	8003d2c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037aa:	d106      	bne.n	80037ba <HAL_RCC_OscConfig+0x24a>
 80037ac:	4b16      	ldr	r3, [pc, #88]	; (8003808 <HAL_RCC_OscConfig+0x298>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a15      	ldr	r2, [pc, #84]	; (8003808 <HAL_RCC_OscConfig+0x298>)
 80037b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037b6:	6013      	str	r3, [r2, #0]
 80037b8:	e01d      	b.n	80037f6 <HAL_RCC_OscConfig+0x286>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037c2:	d10c      	bne.n	80037de <HAL_RCC_OscConfig+0x26e>
 80037c4:	4b10      	ldr	r3, [pc, #64]	; (8003808 <HAL_RCC_OscConfig+0x298>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a0f      	ldr	r2, [pc, #60]	; (8003808 <HAL_RCC_OscConfig+0x298>)
 80037ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037ce:	6013      	str	r3, [r2, #0]
 80037d0:	4b0d      	ldr	r3, [pc, #52]	; (8003808 <HAL_RCC_OscConfig+0x298>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a0c      	ldr	r2, [pc, #48]	; (8003808 <HAL_RCC_OscConfig+0x298>)
 80037d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037da:	6013      	str	r3, [r2, #0]
 80037dc:	e00b      	b.n	80037f6 <HAL_RCC_OscConfig+0x286>
 80037de:	4b0a      	ldr	r3, [pc, #40]	; (8003808 <HAL_RCC_OscConfig+0x298>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a09      	ldr	r2, [pc, #36]	; (8003808 <HAL_RCC_OscConfig+0x298>)
 80037e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037e8:	6013      	str	r3, [r2, #0]
 80037ea:	4b07      	ldr	r3, [pc, #28]	; (8003808 <HAL_RCC_OscConfig+0x298>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a06      	ldr	r2, [pc, #24]	; (8003808 <HAL_RCC_OscConfig+0x298>)
 80037f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037f4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d01c      	beq.n	8003838 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037fe:	f7fd fd4f 	bl	80012a0 <HAL_GetTick>
 8003802:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003804:	e011      	b.n	800382a <HAL_RCC_OscConfig+0x2ba>
 8003806:	bf00      	nop
 8003808:	40021000 	.word	0x40021000
 800380c:	080079fc 	.word	0x080079fc
 8003810:	20000000 	.word	0x20000000
 8003814:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003818:	f7fd fd42 	bl	80012a0 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	2b64      	cmp	r3, #100	; 0x64
 8003824:	d901      	bls.n	800382a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e280      	b.n	8003d2c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800382a:	4baf      	ldr	r3, [pc, #700]	; (8003ae8 <HAL_RCC_OscConfig+0x578>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d0f0      	beq.n	8003818 <HAL_RCC_OscConfig+0x2a8>
 8003836:	e014      	b.n	8003862 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003838:	f7fd fd32 	bl	80012a0 <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800383e:	e008      	b.n	8003852 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003840:	f7fd fd2e 	bl	80012a0 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b64      	cmp	r3, #100	; 0x64
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e26c      	b.n	8003d2c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003852:	4ba5      	ldr	r3, [pc, #660]	; (8003ae8 <HAL_RCC_OscConfig+0x578>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1f0      	bne.n	8003840 <HAL_RCC_OscConfig+0x2d0>
 800385e:	e000      	b.n	8003862 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003860:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d060      	beq.n	8003930 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	2b04      	cmp	r3, #4
 8003872:	d005      	beq.n	8003880 <HAL_RCC_OscConfig+0x310>
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	2b0c      	cmp	r3, #12
 8003878:	d119      	bne.n	80038ae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	2b02      	cmp	r3, #2
 800387e:	d116      	bne.n	80038ae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003880:	4b99      	ldr	r3, [pc, #612]	; (8003ae8 <HAL_RCC_OscConfig+0x578>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003888:	2b00      	cmp	r3, #0
 800388a:	d005      	beq.n	8003898 <HAL_RCC_OscConfig+0x328>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d101      	bne.n	8003898 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e249      	b.n	8003d2c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003898:	4b93      	ldr	r3, [pc, #588]	; (8003ae8 <HAL_RCC_OscConfig+0x578>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	061b      	lsls	r3, r3, #24
 80038a6:	4990      	ldr	r1, [pc, #576]	; (8003ae8 <HAL_RCC_OscConfig+0x578>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038ac:	e040      	b.n	8003930 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d023      	beq.n	80038fe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038b6:	4b8c      	ldr	r3, [pc, #560]	; (8003ae8 <HAL_RCC_OscConfig+0x578>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a8b      	ldr	r2, [pc, #556]	; (8003ae8 <HAL_RCC_OscConfig+0x578>)
 80038bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c2:	f7fd fced 	bl	80012a0 <HAL_GetTick>
 80038c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038c8:	e008      	b.n	80038dc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038ca:	f7fd fce9 	bl	80012a0 <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d901      	bls.n	80038dc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e227      	b.n	8003d2c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038dc:	4b82      	ldr	r3, [pc, #520]	; (8003ae8 <HAL_RCC_OscConfig+0x578>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d0f0      	beq.n	80038ca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038e8:	4b7f      	ldr	r3, [pc, #508]	; (8003ae8 <HAL_RCC_OscConfig+0x578>)
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	061b      	lsls	r3, r3, #24
 80038f6:	497c      	ldr	r1, [pc, #496]	; (8003ae8 <HAL_RCC_OscConfig+0x578>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	604b      	str	r3, [r1, #4]
 80038fc:	e018      	b.n	8003930 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038fe:	4b7a      	ldr	r3, [pc, #488]	; (8003ae8 <HAL_RCC_OscConfig+0x578>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a79      	ldr	r2, [pc, #484]	; (8003ae8 <HAL_RCC_OscConfig+0x578>)
 8003904:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003908:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800390a:	f7fd fcc9 	bl	80012a0 <HAL_GetTick>
 800390e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003910:	e008      	b.n	8003924 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003912:	f7fd fcc5 	bl	80012a0 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	2b02      	cmp	r3, #2
 800391e:	d901      	bls.n	8003924 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e203      	b.n	8003d2c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003924:	4b70      	ldr	r3, [pc, #448]	; (8003ae8 <HAL_RCC_OscConfig+0x578>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800392c:	2b00      	cmp	r3, #0
 800392e:	d1f0      	bne.n	8003912 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0308 	and.w	r3, r3, #8
 8003938:	2b00      	cmp	r3, #0
 800393a:	d03c      	beq.n	80039b6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d01c      	beq.n	800397e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003944:	4b68      	ldr	r3, [pc, #416]	; (8003ae8 <HAL_RCC_OscConfig+0x578>)
 8003946:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800394a:	4a67      	ldr	r2, [pc, #412]	; (8003ae8 <HAL_RCC_OscConfig+0x578>)
 800394c:	f043 0301 	orr.w	r3, r3, #1
 8003950:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003954:	f7fd fca4 	bl	80012a0 <HAL_GetTick>
 8003958:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800395a:	e008      	b.n	800396e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800395c:	f7fd fca0 	bl	80012a0 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b02      	cmp	r3, #2
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e1de      	b.n	8003d2c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800396e:	4b5e      	ldr	r3, [pc, #376]	; (8003ae8 <HAL_RCC_OscConfig+0x578>)
 8003970:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d0ef      	beq.n	800395c <HAL_RCC_OscConfig+0x3ec>
 800397c:	e01b      	b.n	80039b6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800397e:	4b5a      	ldr	r3, [pc, #360]	; (8003ae8 <HAL_RCC_OscConfig+0x578>)
 8003980:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003984:	4a58      	ldr	r2, [pc, #352]	; (8003ae8 <HAL_RCC_OscConfig+0x578>)
 8003986:	f023 0301 	bic.w	r3, r3, #1
 800398a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800398e:	f7fd fc87 	bl	80012a0 <HAL_GetTick>
 8003992:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003994:	e008      	b.n	80039a8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003996:	f7fd fc83 	bl	80012a0 <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d901      	bls.n	80039a8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e1c1      	b.n	8003d2c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039a8:	4b4f      	ldr	r3, [pc, #316]	; (8003ae8 <HAL_RCC_OscConfig+0x578>)
 80039aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1ef      	bne.n	8003996 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0304 	and.w	r3, r3, #4
 80039be:	2b00      	cmp	r3, #0
 80039c0:	f000 80a6 	beq.w	8003b10 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039c4:	2300      	movs	r3, #0
 80039c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80039c8:	4b47      	ldr	r3, [pc, #284]	; (8003ae8 <HAL_RCC_OscConfig+0x578>)
 80039ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d10d      	bne.n	80039f0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039d4:	4b44      	ldr	r3, [pc, #272]	; (8003ae8 <HAL_RCC_OscConfig+0x578>)
 80039d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d8:	4a43      	ldr	r2, [pc, #268]	; (8003ae8 <HAL_RCC_OscConfig+0x578>)
 80039da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039de:	6593      	str	r3, [r2, #88]	; 0x58
 80039e0:	4b41      	ldr	r3, [pc, #260]	; (8003ae8 <HAL_RCC_OscConfig+0x578>)
 80039e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039e8:	60bb      	str	r3, [r7, #8]
 80039ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039ec:	2301      	movs	r3, #1
 80039ee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039f0:	4b3e      	ldr	r3, [pc, #248]	; (8003aec <HAL_RCC_OscConfig+0x57c>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d118      	bne.n	8003a2e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039fc:	4b3b      	ldr	r3, [pc, #236]	; (8003aec <HAL_RCC_OscConfig+0x57c>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a3a      	ldr	r2, [pc, #232]	; (8003aec <HAL_RCC_OscConfig+0x57c>)
 8003a02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a06:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a08:	f7fd fc4a 	bl	80012a0 <HAL_GetTick>
 8003a0c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a0e:	e008      	b.n	8003a22 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a10:	f7fd fc46 	bl	80012a0 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e184      	b.n	8003d2c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a22:	4b32      	ldr	r3, [pc, #200]	; (8003aec <HAL_RCC_OscConfig+0x57c>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d0f0      	beq.n	8003a10 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d108      	bne.n	8003a48 <HAL_RCC_OscConfig+0x4d8>
 8003a36:	4b2c      	ldr	r3, [pc, #176]	; (8003ae8 <HAL_RCC_OscConfig+0x578>)
 8003a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a3c:	4a2a      	ldr	r2, [pc, #168]	; (8003ae8 <HAL_RCC_OscConfig+0x578>)
 8003a3e:	f043 0301 	orr.w	r3, r3, #1
 8003a42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a46:	e024      	b.n	8003a92 <HAL_RCC_OscConfig+0x522>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	2b05      	cmp	r3, #5
 8003a4e:	d110      	bne.n	8003a72 <HAL_RCC_OscConfig+0x502>
 8003a50:	4b25      	ldr	r3, [pc, #148]	; (8003ae8 <HAL_RCC_OscConfig+0x578>)
 8003a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a56:	4a24      	ldr	r2, [pc, #144]	; (8003ae8 <HAL_RCC_OscConfig+0x578>)
 8003a58:	f043 0304 	orr.w	r3, r3, #4
 8003a5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a60:	4b21      	ldr	r3, [pc, #132]	; (8003ae8 <HAL_RCC_OscConfig+0x578>)
 8003a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a66:	4a20      	ldr	r2, [pc, #128]	; (8003ae8 <HAL_RCC_OscConfig+0x578>)
 8003a68:	f043 0301 	orr.w	r3, r3, #1
 8003a6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a70:	e00f      	b.n	8003a92 <HAL_RCC_OscConfig+0x522>
 8003a72:	4b1d      	ldr	r3, [pc, #116]	; (8003ae8 <HAL_RCC_OscConfig+0x578>)
 8003a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a78:	4a1b      	ldr	r2, [pc, #108]	; (8003ae8 <HAL_RCC_OscConfig+0x578>)
 8003a7a:	f023 0301 	bic.w	r3, r3, #1
 8003a7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a82:	4b19      	ldr	r3, [pc, #100]	; (8003ae8 <HAL_RCC_OscConfig+0x578>)
 8003a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a88:	4a17      	ldr	r2, [pc, #92]	; (8003ae8 <HAL_RCC_OscConfig+0x578>)
 8003a8a:	f023 0304 	bic.w	r3, r3, #4
 8003a8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d016      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a9a:	f7fd fc01 	bl	80012a0 <HAL_GetTick>
 8003a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003aa0:	e00a      	b.n	8003ab8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aa2:	f7fd fbfd 	bl	80012a0 <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d901      	bls.n	8003ab8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e139      	b.n	8003d2c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ab8:	4b0b      	ldr	r3, [pc, #44]	; (8003ae8 <HAL_RCC_OscConfig+0x578>)
 8003aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d0ed      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x532>
 8003ac6:	e01a      	b.n	8003afe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac8:	f7fd fbea 	bl	80012a0 <HAL_GetTick>
 8003acc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ace:	e00f      	b.n	8003af0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ad0:	f7fd fbe6 	bl	80012a0 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d906      	bls.n	8003af0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e122      	b.n	8003d2c <HAL_RCC_OscConfig+0x7bc>
 8003ae6:	bf00      	nop
 8003ae8:	40021000 	.word	0x40021000
 8003aec:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003af0:	4b90      	ldr	r3, [pc, #576]	; (8003d34 <HAL_RCC_OscConfig+0x7c4>)
 8003af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1e8      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003afe:	7ffb      	ldrb	r3, [r7, #31]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d105      	bne.n	8003b10 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b04:	4b8b      	ldr	r3, [pc, #556]	; (8003d34 <HAL_RCC_OscConfig+0x7c4>)
 8003b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b08:	4a8a      	ldr	r2, [pc, #552]	; (8003d34 <HAL_RCC_OscConfig+0x7c4>)
 8003b0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b0e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f000 8108 	beq.w	8003d2a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	f040 80d0 	bne.w	8003cc4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003b24:	4b83      	ldr	r3, [pc, #524]	; (8003d34 <HAL_RCC_OscConfig+0x7c4>)
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	f003 0203 	and.w	r2, r3, #3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d130      	bne.n	8003b9a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b42:	3b01      	subs	r3, #1
 8003b44:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d127      	bne.n	8003b9a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b54:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d11f      	bne.n	8003b9a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b64:	2a07      	cmp	r2, #7
 8003b66:	bf14      	ite	ne
 8003b68:	2201      	movne	r2, #1
 8003b6a:	2200      	moveq	r2, #0
 8003b6c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d113      	bne.n	8003b9a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b7c:	085b      	lsrs	r3, r3, #1
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d109      	bne.n	8003b9a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b90:	085b      	lsrs	r3, r3, #1
 8003b92:	3b01      	subs	r3, #1
 8003b94:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d06e      	beq.n	8003c78 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	2b0c      	cmp	r3, #12
 8003b9e:	d069      	beq.n	8003c74 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003ba0:	4b64      	ldr	r3, [pc, #400]	; (8003d34 <HAL_RCC_OscConfig+0x7c4>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d105      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003bac:	4b61      	ldr	r3, [pc, #388]	; (8003d34 <HAL_RCC_OscConfig+0x7c4>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d001      	beq.n	8003bbc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e0b7      	b.n	8003d2c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003bbc:	4b5d      	ldr	r3, [pc, #372]	; (8003d34 <HAL_RCC_OscConfig+0x7c4>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a5c      	ldr	r2, [pc, #368]	; (8003d34 <HAL_RCC_OscConfig+0x7c4>)
 8003bc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bc6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003bc8:	f7fd fb6a 	bl	80012a0 <HAL_GetTick>
 8003bcc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bce:	e008      	b.n	8003be2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bd0:	f7fd fb66 	bl	80012a0 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e0a4      	b.n	8003d2c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003be2:	4b54      	ldr	r3, [pc, #336]	; (8003d34 <HAL_RCC_OscConfig+0x7c4>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1f0      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bee:	4b51      	ldr	r3, [pc, #324]	; (8003d34 <HAL_RCC_OscConfig+0x7c4>)
 8003bf0:	68da      	ldr	r2, [r3, #12]
 8003bf2:	4b51      	ldr	r3, [pc, #324]	; (8003d38 <HAL_RCC_OscConfig+0x7c8>)
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003bfe:	3a01      	subs	r2, #1
 8003c00:	0112      	lsls	r2, r2, #4
 8003c02:	4311      	orrs	r1, r2
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c08:	0212      	lsls	r2, r2, #8
 8003c0a:	4311      	orrs	r1, r2
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003c10:	0852      	lsrs	r2, r2, #1
 8003c12:	3a01      	subs	r2, #1
 8003c14:	0552      	lsls	r2, r2, #21
 8003c16:	4311      	orrs	r1, r2
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003c1c:	0852      	lsrs	r2, r2, #1
 8003c1e:	3a01      	subs	r2, #1
 8003c20:	0652      	lsls	r2, r2, #25
 8003c22:	4311      	orrs	r1, r2
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c28:	0912      	lsrs	r2, r2, #4
 8003c2a:	0452      	lsls	r2, r2, #17
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	4941      	ldr	r1, [pc, #260]	; (8003d34 <HAL_RCC_OscConfig+0x7c4>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003c34:	4b3f      	ldr	r3, [pc, #252]	; (8003d34 <HAL_RCC_OscConfig+0x7c4>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a3e      	ldr	r2, [pc, #248]	; (8003d34 <HAL_RCC_OscConfig+0x7c4>)
 8003c3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c3e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c40:	4b3c      	ldr	r3, [pc, #240]	; (8003d34 <HAL_RCC_OscConfig+0x7c4>)
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	4a3b      	ldr	r2, [pc, #236]	; (8003d34 <HAL_RCC_OscConfig+0x7c4>)
 8003c46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c4a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c4c:	f7fd fb28 	bl	80012a0 <HAL_GetTick>
 8003c50:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c52:	e008      	b.n	8003c66 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c54:	f7fd fb24 	bl	80012a0 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e062      	b.n	8003d2c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c66:	4b33      	ldr	r3, [pc, #204]	; (8003d34 <HAL_RCC_OscConfig+0x7c4>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d0f0      	beq.n	8003c54 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c72:	e05a      	b.n	8003d2a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e059      	b.n	8003d2c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c78:	4b2e      	ldr	r3, [pc, #184]	; (8003d34 <HAL_RCC_OscConfig+0x7c4>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d152      	bne.n	8003d2a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003c84:	4b2b      	ldr	r3, [pc, #172]	; (8003d34 <HAL_RCC_OscConfig+0x7c4>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a2a      	ldr	r2, [pc, #168]	; (8003d34 <HAL_RCC_OscConfig+0x7c4>)
 8003c8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c8e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c90:	4b28      	ldr	r3, [pc, #160]	; (8003d34 <HAL_RCC_OscConfig+0x7c4>)
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	4a27      	ldr	r2, [pc, #156]	; (8003d34 <HAL_RCC_OscConfig+0x7c4>)
 8003c96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c9a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003c9c:	f7fd fb00 	bl	80012a0 <HAL_GetTick>
 8003ca0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ca2:	e008      	b.n	8003cb6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ca4:	f7fd fafc 	bl	80012a0 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d901      	bls.n	8003cb6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e03a      	b.n	8003d2c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cb6:	4b1f      	ldr	r3, [pc, #124]	; (8003d34 <HAL_RCC_OscConfig+0x7c4>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d0f0      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x734>
 8003cc2:	e032      	b.n	8003d2a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	2b0c      	cmp	r3, #12
 8003cc8:	d02d      	beq.n	8003d26 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cca:	4b1a      	ldr	r3, [pc, #104]	; (8003d34 <HAL_RCC_OscConfig+0x7c4>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a19      	ldr	r2, [pc, #100]	; (8003d34 <HAL_RCC_OscConfig+0x7c4>)
 8003cd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cd4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003cd6:	4b17      	ldr	r3, [pc, #92]	; (8003d34 <HAL_RCC_OscConfig+0x7c4>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d105      	bne.n	8003cee <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003ce2:	4b14      	ldr	r3, [pc, #80]	; (8003d34 <HAL_RCC_OscConfig+0x7c4>)
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	4a13      	ldr	r2, [pc, #76]	; (8003d34 <HAL_RCC_OscConfig+0x7c4>)
 8003ce8:	f023 0303 	bic.w	r3, r3, #3
 8003cec:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003cee:	4b11      	ldr	r3, [pc, #68]	; (8003d34 <HAL_RCC_OscConfig+0x7c4>)
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	4a10      	ldr	r2, [pc, #64]	; (8003d34 <HAL_RCC_OscConfig+0x7c4>)
 8003cf4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003cf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cfc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cfe:	f7fd facf 	bl	80012a0 <HAL_GetTick>
 8003d02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d04:	e008      	b.n	8003d18 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d06:	f7fd facb 	bl	80012a0 <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d901      	bls.n	8003d18 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e009      	b.n	8003d2c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d18:	4b06      	ldr	r3, [pc, #24]	; (8003d34 <HAL_RCC_OscConfig+0x7c4>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d1f0      	bne.n	8003d06 <HAL_RCC_OscConfig+0x796>
 8003d24:	e001      	b.n	8003d2a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e000      	b.n	8003d2c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3720      	adds	r7, #32
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	40021000 	.word	0x40021000
 8003d38:	f99d808c 	.word	0xf99d808c

08003d3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d101      	bne.n	8003d50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e0c8      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d50:	4b66      	ldr	r3, [pc, #408]	; (8003eec <HAL_RCC_ClockConfig+0x1b0>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0307 	and.w	r3, r3, #7
 8003d58:	683a      	ldr	r2, [r7, #0]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d910      	bls.n	8003d80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d5e:	4b63      	ldr	r3, [pc, #396]	; (8003eec <HAL_RCC_ClockConfig+0x1b0>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f023 0207 	bic.w	r2, r3, #7
 8003d66:	4961      	ldr	r1, [pc, #388]	; (8003eec <HAL_RCC_ClockConfig+0x1b0>)
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d6e:	4b5f      	ldr	r3, [pc, #380]	; (8003eec <HAL_RCC_ClockConfig+0x1b0>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0307 	and.w	r3, r3, #7
 8003d76:	683a      	ldr	r2, [r7, #0]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d001      	beq.n	8003d80 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e0b0      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0301 	and.w	r3, r3, #1
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d04c      	beq.n	8003e26 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	2b03      	cmp	r3, #3
 8003d92:	d107      	bne.n	8003da4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d94:	4b56      	ldr	r3, [pc, #344]	; (8003ef0 <HAL_RCC_ClockConfig+0x1b4>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d121      	bne.n	8003de4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e09e      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d107      	bne.n	8003dbc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dac:	4b50      	ldr	r3, [pc, #320]	; (8003ef0 <HAL_RCC_ClockConfig+0x1b4>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d115      	bne.n	8003de4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e092      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d107      	bne.n	8003dd4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003dc4:	4b4a      	ldr	r3, [pc, #296]	; (8003ef0 <HAL_RCC_ClockConfig+0x1b4>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0302 	and.w	r3, r3, #2
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d109      	bne.n	8003de4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e086      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003dd4:	4b46      	ldr	r3, [pc, #280]	; (8003ef0 <HAL_RCC_ClockConfig+0x1b4>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d101      	bne.n	8003de4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e07e      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003de4:	4b42      	ldr	r3, [pc, #264]	; (8003ef0 <HAL_RCC_ClockConfig+0x1b4>)
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f023 0203 	bic.w	r2, r3, #3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	493f      	ldr	r1, [pc, #252]	; (8003ef0 <HAL_RCC_ClockConfig+0x1b4>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003df6:	f7fd fa53 	bl	80012a0 <HAL_GetTick>
 8003dfa:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dfc:	e00a      	b.n	8003e14 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dfe:	f7fd fa4f 	bl	80012a0 <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d901      	bls.n	8003e14 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e066      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e14:	4b36      	ldr	r3, [pc, #216]	; (8003ef0 <HAL_RCC_ClockConfig+0x1b4>)
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f003 020c 	and.w	r2, r3, #12
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d1eb      	bne.n	8003dfe <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d008      	beq.n	8003e44 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e32:	4b2f      	ldr	r3, [pc, #188]	; (8003ef0 <HAL_RCC_ClockConfig+0x1b4>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	492c      	ldr	r1, [pc, #176]	; (8003ef0 <HAL_RCC_ClockConfig+0x1b4>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e44:	4b29      	ldr	r3, [pc, #164]	; (8003eec <HAL_RCC_ClockConfig+0x1b0>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0307 	and.w	r3, r3, #7
 8003e4c:	683a      	ldr	r2, [r7, #0]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d210      	bcs.n	8003e74 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e52:	4b26      	ldr	r3, [pc, #152]	; (8003eec <HAL_RCC_ClockConfig+0x1b0>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f023 0207 	bic.w	r2, r3, #7
 8003e5a:	4924      	ldr	r1, [pc, #144]	; (8003eec <HAL_RCC_ClockConfig+0x1b0>)
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e62:	4b22      	ldr	r3, [pc, #136]	; (8003eec <HAL_RCC_ClockConfig+0x1b0>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0307 	and.w	r3, r3, #7
 8003e6a:	683a      	ldr	r2, [r7, #0]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d001      	beq.n	8003e74 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e036      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0304 	and.w	r3, r3, #4
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d008      	beq.n	8003e92 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e80:	4b1b      	ldr	r3, [pc, #108]	; (8003ef0 <HAL_RCC_ClockConfig+0x1b4>)
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	4918      	ldr	r1, [pc, #96]	; (8003ef0 <HAL_RCC_ClockConfig+0x1b4>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0308 	and.w	r3, r3, #8
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d009      	beq.n	8003eb2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e9e:	4b14      	ldr	r3, [pc, #80]	; (8003ef0 <HAL_RCC_ClockConfig+0x1b4>)
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	00db      	lsls	r3, r3, #3
 8003eac:	4910      	ldr	r1, [pc, #64]	; (8003ef0 <HAL_RCC_ClockConfig+0x1b4>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003eb2:	f000 f825 	bl	8003f00 <HAL_RCC_GetSysClockFreq>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	4b0d      	ldr	r3, [pc, #52]	; (8003ef0 <HAL_RCC_ClockConfig+0x1b4>)
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	091b      	lsrs	r3, r3, #4
 8003ebe:	f003 030f 	and.w	r3, r3, #15
 8003ec2:	490c      	ldr	r1, [pc, #48]	; (8003ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8003ec4:	5ccb      	ldrb	r3, [r1, r3]
 8003ec6:	f003 031f 	and.w	r3, r3, #31
 8003eca:	fa22 f303 	lsr.w	r3, r2, r3
 8003ece:	4a0a      	ldr	r2, [pc, #40]	; (8003ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003ed2:	4b0a      	ldr	r3, [pc, #40]	; (8003efc <HAL_RCC_ClockConfig+0x1c0>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7fd f992 	bl	8001200 <HAL_InitTick>
 8003edc:	4603      	mov	r3, r0
 8003ede:	72fb      	strb	r3, [r7, #11]

  return status;
 8003ee0:	7afb      	ldrb	r3, [r7, #11]
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3710      	adds	r7, #16
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	40022000 	.word	0x40022000
 8003ef0:	40021000 	.word	0x40021000
 8003ef4:	080079fc 	.word	0x080079fc
 8003ef8:	20000000 	.word	0x20000000
 8003efc:	20000004 	.word	0x20000004

08003f00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b089      	sub	sp, #36	; 0x24
 8003f04:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003f06:	2300      	movs	r3, #0
 8003f08:	61fb      	str	r3, [r7, #28]
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f0e:	4b3e      	ldr	r3, [pc, #248]	; (8004008 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f003 030c 	and.w	r3, r3, #12
 8003f16:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f18:	4b3b      	ldr	r3, [pc, #236]	; (8004008 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	f003 0303 	and.w	r3, r3, #3
 8003f20:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d005      	beq.n	8003f34 <HAL_RCC_GetSysClockFreq+0x34>
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	2b0c      	cmp	r3, #12
 8003f2c:	d121      	bne.n	8003f72 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d11e      	bne.n	8003f72 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003f34:	4b34      	ldr	r3, [pc, #208]	; (8004008 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0308 	and.w	r3, r3, #8
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d107      	bne.n	8003f50 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003f40:	4b31      	ldr	r3, [pc, #196]	; (8004008 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f46:	0a1b      	lsrs	r3, r3, #8
 8003f48:	f003 030f 	and.w	r3, r3, #15
 8003f4c:	61fb      	str	r3, [r7, #28]
 8003f4e:	e005      	b.n	8003f5c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003f50:	4b2d      	ldr	r3, [pc, #180]	; (8004008 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	091b      	lsrs	r3, r3, #4
 8003f56:	f003 030f 	and.w	r3, r3, #15
 8003f5a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003f5c:	4a2b      	ldr	r2, [pc, #172]	; (800400c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f64:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d10d      	bne.n	8003f88 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f70:	e00a      	b.n	8003f88 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	2b04      	cmp	r3, #4
 8003f76:	d102      	bne.n	8003f7e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f78:	4b25      	ldr	r3, [pc, #148]	; (8004010 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f7a:	61bb      	str	r3, [r7, #24]
 8003f7c:	e004      	b.n	8003f88 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	2b08      	cmp	r3, #8
 8003f82:	d101      	bne.n	8003f88 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f84:	4b23      	ldr	r3, [pc, #140]	; (8004014 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f86:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	2b0c      	cmp	r3, #12
 8003f8c:	d134      	bne.n	8003ff8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f8e:	4b1e      	ldr	r3, [pc, #120]	; (8004008 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	f003 0303 	and.w	r3, r3, #3
 8003f96:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d003      	beq.n	8003fa6 <HAL_RCC_GetSysClockFreq+0xa6>
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	2b03      	cmp	r3, #3
 8003fa2:	d003      	beq.n	8003fac <HAL_RCC_GetSysClockFreq+0xac>
 8003fa4:	e005      	b.n	8003fb2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003fa6:	4b1a      	ldr	r3, [pc, #104]	; (8004010 <HAL_RCC_GetSysClockFreq+0x110>)
 8003fa8:	617b      	str	r3, [r7, #20]
      break;
 8003faa:	e005      	b.n	8003fb8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003fac:	4b19      	ldr	r3, [pc, #100]	; (8004014 <HAL_RCC_GetSysClockFreq+0x114>)
 8003fae:	617b      	str	r3, [r7, #20]
      break;
 8003fb0:	e002      	b.n	8003fb8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	617b      	str	r3, [r7, #20]
      break;
 8003fb6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003fb8:	4b13      	ldr	r3, [pc, #76]	; (8004008 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	091b      	lsrs	r3, r3, #4
 8003fbe:	f003 0307 	and.w	r3, r3, #7
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003fc6:	4b10      	ldr	r3, [pc, #64]	; (8004008 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	0a1b      	lsrs	r3, r3, #8
 8003fcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fd0:	697a      	ldr	r2, [r7, #20]
 8003fd2:	fb02 f203 	mul.w	r2, r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fdc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003fde:	4b0a      	ldr	r3, [pc, #40]	; (8004008 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	0e5b      	lsrs	r3, r3, #25
 8003fe4:	f003 0303 	and.w	r3, r3, #3
 8003fe8:	3301      	adds	r3, #1
 8003fea:	005b      	lsls	r3, r3, #1
 8003fec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ff6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003ff8:	69bb      	ldr	r3, [r7, #24]
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3724      	adds	r7, #36	; 0x24
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	40021000 	.word	0x40021000
 800400c:	08007a14 	.word	0x08007a14
 8004010:	00f42400 	.word	0x00f42400
 8004014:	007a1200 	.word	0x007a1200

08004018 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004018:	b480      	push	{r7}
 800401a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800401c:	4b03      	ldr	r3, [pc, #12]	; (800402c <HAL_RCC_GetHCLKFreq+0x14>)
 800401e:	681b      	ldr	r3, [r3, #0]
}
 8004020:	4618      	mov	r0, r3
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	20000000 	.word	0x20000000

08004030 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004034:	f7ff fff0 	bl	8004018 <HAL_RCC_GetHCLKFreq>
 8004038:	4602      	mov	r2, r0
 800403a:	4b06      	ldr	r3, [pc, #24]	; (8004054 <HAL_RCC_GetPCLK1Freq+0x24>)
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	0a1b      	lsrs	r3, r3, #8
 8004040:	f003 0307 	and.w	r3, r3, #7
 8004044:	4904      	ldr	r1, [pc, #16]	; (8004058 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004046:	5ccb      	ldrb	r3, [r1, r3]
 8004048:	f003 031f 	and.w	r3, r3, #31
 800404c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004050:	4618      	mov	r0, r3
 8004052:	bd80      	pop	{r7, pc}
 8004054:	40021000 	.word	0x40021000
 8004058:	08007a0c 	.word	0x08007a0c

0800405c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004060:	f7ff ffda 	bl	8004018 <HAL_RCC_GetHCLKFreq>
 8004064:	4602      	mov	r2, r0
 8004066:	4b06      	ldr	r3, [pc, #24]	; (8004080 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	0adb      	lsrs	r3, r3, #11
 800406c:	f003 0307 	and.w	r3, r3, #7
 8004070:	4904      	ldr	r1, [pc, #16]	; (8004084 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004072:	5ccb      	ldrb	r3, [r1, r3]
 8004074:	f003 031f 	and.w	r3, r3, #31
 8004078:	fa22 f303 	lsr.w	r3, r2, r3
}
 800407c:	4618      	mov	r0, r3
 800407e:	bd80      	pop	{r7, pc}
 8004080:	40021000 	.word	0x40021000
 8004084:	08007a0c 	.word	0x08007a0c

08004088 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b086      	sub	sp, #24
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004090:	2300      	movs	r3, #0
 8004092:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004094:	4b2a      	ldr	r3, [pc, #168]	; (8004140 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d003      	beq.n	80040a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80040a0:	f7ff fa02 	bl	80034a8 <HAL_PWREx_GetVoltageRange>
 80040a4:	6178      	str	r0, [r7, #20]
 80040a6:	e014      	b.n	80040d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80040a8:	4b25      	ldr	r3, [pc, #148]	; (8004140 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ac:	4a24      	ldr	r2, [pc, #144]	; (8004140 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040b2:	6593      	str	r3, [r2, #88]	; 0x58
 80040b4:	4b22      	ldr	r3, [pc, #136]	; (8004140 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040bc:	60fb      	str	r3, [r7, #12]
 80040be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80040c0:	f7ff f9f2 	bl	80034a8 <HAL_PWREx_GetVoltageRange>
 80040c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80040c6:	4b1e      	ldr	r3, [pc, #120]	; (8004140 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ca:	4a1d      	ldr	r2, [pc, #116]	; (8004140 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040d0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040d8:	d10b      	bne.n	80040f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2b80      	cmp	r3, #128	; 0x80
 80040de:	d919      	bls.n	8004114 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2ba0      	cmp	r3, #160	; 0xa0
 80040e4:	d902      	bls.n	80040ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80040e6:	2302      	movs	r3, #2
 80040e8:	613b      	str	r3, [r7, #16]
 80040ea:	e013      	b.n	8004114 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80040ec:	2301      	movs	r3, #1
 80040ee:	613b      	str	r3, [r7, #16]
 80040f0:	e010      	b.n	8004114 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2b80      	cmp	r3, #128	; 0x80
 80040f6:	d902      	bls.n	80040fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80040f8:	2303      	movs	r3, #3
 80040fa:	613b      	str	r3, [r7, #16]
 80040fc:	e00a      	b.n	8004114 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2b80      	cmp	r3, #128	; 0x80
 8004102:	d102      	bne.n	800410a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004104:	2302      	movs	r3, #2
 8004106:	613b      	str	r3, [r7, #16]
 8004108:	e004      	b.n	8004114 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2b70      	cmp	r3, #112	; 0x70
 800410e:	d101      	bne.n	8004114 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004110:	2301      	movs	r3, #1
 8004112:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004114:	4b0b      	ldr	r3, [pc, #44]	; (8004144 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f023 0207 	bic.w	r2, r3, #7
 800411c:	4909      	ldr	r1, [pc, #36]	; (8004144 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	4313      	orrs	r3, r2
 8004122:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004124:	4b07      	ldr	r3, [pc, #28]	; (8004144 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0307 	and.w	r3, r3, #7
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	429a      	cmp	r2, r3
 8004130:	d001      	beq.n	8004136 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e000      	b.n	8004138 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	3718      	adds	r7, #24
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	40021000 	.word	0x40021000
 8004144:	40022000 	.word	0x40022000

08004148 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b086      	sub	sp, #24
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004150:	2300      	movs	r3, #0
 8004152:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004154:	2300      	movs	r3, #0
 8004156:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004160:	2b00      	cmp	r3, #0
 8004162:	d041      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004168:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800416c:	d02a      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800416e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004172:	d824      	bhi.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004174:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004178:	d008      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800417a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800417e:	d81e      	bhi.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00a      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004184:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004188:	d010      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 800418a:	e018      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800418c:	4b86      	ldr	r3, [pc, #536]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	4a85      	ldr	r2, [pc, #532]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004192:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004196:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004198:	e015      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	3304      	adds	r3, #4
 800419e:	2100      	movs	r1, #0
 80041a0:	4618      	mov	r0, r3
 80041a2:	f000 fabb 	bl	800471c <RCCEx_PLLSAI1_Config>
 80041a6:	4603      	mov	r3, r0
 80041a8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041aa:	e00c      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	3320      	adds	r3, #32
 80041b0:	2100      	movs	r1, #0
 80041b2:	4618      	mov	r0, r3
 80041b4:	f000 fba6 	bl	8004904 <RCCEx_PLLSAI2_Config>
 80041b8:	4603      	mov	r3, r0
 80041ba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041bc:	e003      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	74fb      	strb	r3, [r7, #19]
      break;
 80041c2:	e000      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80041c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041c6:	7cfb      	ldrb	r3, [r7, #19]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d10b      	bne.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041cc:	4b76      	ldr	r3, [pc, #472]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041da:	4973      	ldr	r1, [pc, #460]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80041e2:	e001      	b.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041e4:	7cfb      	ldrb	r3, [r7, #19]
 80041e6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d041      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041f8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80041fc:	d02a      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80041fe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004202:	d824      	bhi.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004204:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004208:	d008      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800420a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800420e:	d81e      	bhi.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004210:	2b00      	cmp	r3, #0
 8004212:	d00a      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004214:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004218:	d010      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800421a:	e018      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800421c:	4b62      	ldr	r3, [pc, #392]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	4a61      	ldr	r2, [pc, #388]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004222:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004226:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004228:	e015      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	3304      	adds	r3, #4
 800422e:	2100      	movs	r1, #0
 8004230:	4618      	mov	r0, r3
 8004232:	f000 fa73 	bl	800471c <RCCEx_PLLSAI1_Config>
 8004236:	4603      	mov	r3, r0
 8004238:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800423a:	e00c      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	3320      	adds	r3, #32
 8004240:	2100      	movs	r1, #0
 8004242:	4618      	mov	r0, r3
 8004244:	f000 fb5e 	bl	8004904 <RCCEx_PLLSAI2_Config>
 8004248:	4603      	mov	r3, r0
 800424a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800424c:	e003      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	74fb      	strb	r3, [r7, #19]
      break;
 8004252:	e000      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004254:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004256:	7cfb      	ldrb	r3, [r7, #19]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d10b      	bne.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800425c:	4b52      	ldr	r3, [pc, #328]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800425e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004262:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800426a:	494f      	ldr	r1, [pc, #316]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800426c:	4313      	orrs	r3, r2
 800426e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004272:	e001      	b.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004274:	7cfb      	ldrb	r3, [r7, #19]
 8004276:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004280:	2b00      	cmp	r3, #0
 8004282:	f000 80a0 	beq.w	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004286:	2300      	movs	r3, #0
 8004288:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800428a:	4b47      	ldr	r3, [pc, #284]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800428c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800428e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d101      	bne.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004296:	2301      	movs	r3, #1
 8004298:	e000      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800429a:	2300      	movs	r3, #0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d00d      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042a0:	4b41      	ldr	r3, [pc, #260]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042a4:	4a40      	ldr	r2, [pc, #256]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042aa:	6593      	str	r3, [r2, #88]	; 0x58
 80042ac:	4b3e      	ldr	r3, [pc, #248]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042b4:	60bb      	str	r3, [r7, #8]
 80042b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042b8:	2301      	movs	r3, #1
 80042ba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042bc:	4b3b      	ldr	r3, [pc, #236]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a3a      	ldr	r2, [pc, #232]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80042c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042c8:	f7fc ffea 	bl	80012a0 <HAL_GetTick>
 80042cc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80042ce:	e009      	b.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042d0:	f7fc ffe6 	bl	80012a0 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d902      	bls.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	74fb      	strb	r3, [r7, #19]
        break;
 80042e2:	e005      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80042e4:	4b31      	ldr	r3, [pc, #196]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d0ef      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80042f0:	7cfb      	ldrb	r3, [r7, #19]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d15c      	bne.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80042f6:	4b2c      	ldr	r3, [pc, #176]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004300:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d01f      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800430e:	697a      	ldr	r2, [r7, #20]
 8004310:	429a      	cmp	r2, r3
 8004312:	d019      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004314:	4b24      	ldr	r3, [pc, #144]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800431a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800431e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004320:	4b21      	ldr	r3, [pc, #132]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004326:	4a20      	ldr	r2, [pc, #128]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800432c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004330:	4b1d      	ldr	r3, [pc, #116]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004336:	4a1c      	ldr	r2, [pc, #112]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004338:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800433c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004340:	4a19      	ldr	r2, [pc, #100]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	f003 0301 	and.w	r3, r3, #1
 800434e:	2b00      	cmp	r3, #0
 8004350:	d016      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004352:	f7fc ffa5 	bl	80012a0 <HAL_GetTick>
 8004356:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004358:	e00b      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800435a:	f7fc ffa1 	bl	80012a0 <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	f241 3288 	movw	r2, #5000	; 0x1388
 8004368:	4293      	cmp	r3, r2
 800436a:	d902      	bls.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	74fb      	strb	r3, [r7, #19]
            break;
 8004370:	e006      	b.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004372:	4b0d      	ldr	r3, [pc, #52]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004378:	f003 0302 	and.w	r3, r3, #2
 800437c:	2b00      	cmp	r3, #0
 800437e:	d0ec      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004380:	7cfb      	ldrb	r3, [r7, #19]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d10c      	bne.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004386:	4b08      	ldr	r3, [pc, #32]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800438c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004396:	4904      	ldr	r1, [pc, #16]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004398:	4313      	orrs	r3, r2
 800439a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800439e:	e009      	b.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80043a0:	7cfb      	ldrb	r3, [r7, #19]
 80043a2:	74bb      	strb	r3, [r7, #18]
 80043a4:	e006      	b.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80043a6:	bf00      	nop
 80043a8:	40021000 	.word	0x40021000
 80043ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043b0:	7cfb      	ldrb	r3, [r7, #19]
 80043b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043b4:	7c7b      	ldrb	r3, [r7, #17]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d105      	bne.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043ba:	4b9e      	ldr	r3, [pc, #632]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043be:	4a9d      	ldr	r2, [pc, #628]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00a      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043d2:	4b98      	ldr	r3, [pc, #608]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d8:	f023 0203 	bic.w	r2, r3, #3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e0:	4994      	ldr	r1, [pc, #592]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0302 	and.w	r3, r3, #2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00a      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80043f4:	4b8f      	ldr	r3, [pc, #572]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043fa:	f023 020c 	bic.w	r2, r3, #12
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004402:	498c      	ldr	r1, [pc, #560]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004404:	4313      	orrs	r3, r2
 8004406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0304 	and.w	r3, r3, #4
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00a      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004416:	4b87      	ldr	r3, [pc, #540]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800441c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004424:	4983      	ldr	r1, [pc, #524]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004426:	4313      	orrs	r3, r2
 8004428:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0308 	and.w	r3, r3, #8
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00a      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004438:	4b7e      	ldr	r3, [pc, #504]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800443a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800443e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004446:	497b      	ldr	r1, [pc, #492]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004448:	4313      	orrs	r3, r2
 800444a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0310 	and.w	r3, r3, #16
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00a      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800445a:	4b76      	ldr	r3, [pc, #472]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800445c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004460:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004468:	4972      	ldr	r1, [pc, #456]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800446a:	4313      	orrs	r3, r2
 800446c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0320 	and.w	r3, r3, #32
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00a      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800447c:	4b6d      	ldr	r3, [pc, #436]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800447e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004482:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800448a:	496a      	ldr	r1, [pc, #424]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800448c:	4313      	orrs	r3, r2
 800448e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00a      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800449e:	4b65      	ldr	r3, [pc, #404]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ac:	4961      	ldr	r1, [pc, #388]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d00a      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80044c0:	4b5c      	ldr	r3, [pc, #368]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044ce:	4959      	ldr	r1, [pc, #356]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00a      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044e2:	4b54      	ldr	r3, [pc, #336]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044e8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044f0:	4950      	ldr	r1, [pc, #320]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004500:	2b00      	cmp	r3, #0
 8004502:	d00a      	beq.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004504:	4b4b      	ldr	r3, [pc, #300]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800450a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004512:	4948      	ldr	r1, [pc, #288]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004514:	4313      	orrs	r3, r2
 8004516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00a      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004526:	4b43      	ldr	r3, [pc, #268]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800452c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004534:	493f      	ldr	r1, [pc, #252]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004536:	4313      	orrs	r3, r2
 8004538:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d028      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004548:	4b3a      	ldr	r3, [pc, #232]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800454a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800454e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004556:	4937      	ldr	r1, [pc, #220]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004558:	4313      	orrs	r3, r2
 800455a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004562:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004566:	d106      	bne.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004568:	4b32      	ldr	r3, [pc, #200]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	4a31      	ldr	r2, [pc, #196]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800456e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004572:	60d3      	str	r3, [r2, #12]
 8004574:	e011      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800457a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800457e:	d10c      	bne.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	3304      	adds	r3, #4
 8004584:	2101      	movs	r1, #1
 8004586:	4618      	mov	r0, r3
 8004588:	f000 f8c8 	bl	800471c <RCCEx_PLLSAI1_Config>
 800458c:	4603      	mov	r3, r0
 800458e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004590:	7cfb      	ldrb	r3, [r7, #19]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d001      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004596:	7cfb      	ldrb	r3, [r7, #19]
 8004598:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d028      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80045a6:	4b23      	ldr	r3, [pc, #140]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b4:	491f      	ldr	r1, [pc, #124]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045c4:	d106      	bne.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045c6:	4b1b      	ldr	r3, [pc, #108]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	4a1a      	ldr	r2, [pc, #104]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045d0:	60d3      	str	r3, [r2, #12]
 80045d2:	e011      	b.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045dc:	d10c      	bne.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	3304      	adds	r3, #4
 80045e2:	2101      	movs	r1, #1
 80045e4:	4618      	mov	r0, r3
 80045e6:	f000 f899 	bl	800471c <RCCEx_PLLSAI1_Config>
 80045ea:	4603      	mov	r3, r0
 80045ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045ee:	7cfb      	ldrb	r3, [r7, #19]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d001      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80045f4:	7cfb      	ldrb	r3, [r7, #19]
 80045f6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d02b      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004604:	4b0b      	ldr	r3, [pc, #44]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800460a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004612:	4908      	ldr	r1, [pc, #32]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004614:	4313      	orrs	r3, r2
 8004616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800461e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004622:	d109      	bne.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004624:	4b03      	ldr	r3, [pc, #12]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	4a02      	ldr	r2, [pc, #8]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800462a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800462e:	60d3      	str	r3, [r2, #12]
 8004630:	e014      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004632:	bf00      	nop
 8004634:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800463c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004640:	d10c      	bne.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	3304      	adds	r3, #4
 8004646:	2101      	movs	r1, #1
 8004648:	4618      	mov	r0, r3
 800464a:	f000 f867 	bl	800471c <RCCEx_PLLSAI1_Config>
 800464e:	4603      	mov	r3, r0
 8004650:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004652:	7cfb      	ldrb	r3, [r7, #19]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d001      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004658:	7cfb      	ldrb	r3, [r7, #19]
 800465a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d02f      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004668:	4b2b      	ldr	r3, [pc, #172]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800466a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800466e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004676:	4928      	ldr	r1, [pc, #160]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004678:	4313      	orrs	r3, r2
 800467a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004682:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004686:	d10d      	bne.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	3304      	adds	r3, #4
 800468c:	2102      	movs	r1, #2
 800468e:	4618      	mov	r0, r3
 8004690:	f000 f844 	bl	800471c <RCCEx_PLLSAI1_Config>
 8004694:	4603      	mov	r3, r0
 8004696:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004698:	7cfb      	ldrb	r3, [r7, #19]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d014      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800469e:	7cfb      	ldrb	r3, [r7, #19]
 80046a0:	74bb      	strb	r3, [r7, #18]
 80046a2:	e011      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046ac:	d10c      	bne.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	3320      	adds	r3, #32
 80046b2:	2102      	movs	r1, #2
 80046b4:	4618      	mov	r0, r3
 80046b6:	f000 f925 	bl	8004904 <RCCEx_PLLSAI2_Config>
 80046ba:	4603      	mov	r3, r0
 80046bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046be:	7cfb      	ldrb	r3, [r7, #19]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d001      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80046c4:	7cfb      	ldrb	r3, [r7, #19]
 80046c6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d00a      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80046d4:	4b10      	ldr	r3, [pc, #64]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046da:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046e2:	490d      	ldr	r1, [pc, #52]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00b      	beq.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80046f6:	4b08      	ldr	r3, [pc, #32]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046fc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004706:	4904      	ldr	r1, [pc, #16]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004708:	4313      	orrs	r3, r2
 800470a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800470e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004710:	4618      	mov	r0, r3
 8004712:	3718      	adds	r7, #24
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	40021000 	.word	0x40021000

0800471c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004726:	2300      	movs	r3, #0
 8004728:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800472a:	4b75      	ldr	r3, [pc, #468]	; (8004900 <RCCEx_PLLSAI1_Config+0x1e4>)
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	f003 0303 	and.w	r3, r3, #3
 8004732:	2b00      	cmp	r3, #0
 8004734:	d018      	beq.n	8004768 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004736:	4b72      	ldr	r3, [pc, #456]	; (8004900 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	f003 0203 	and.w	r2, r3, #3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	429a      	cmp	r2, r3
 8004744:	d10d      	bne.n	8004762 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
       ||
 800474a:	2b00      	cmp	r3, #0
 800474c:	d009      	beq.n	8004762 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800474e:	4b6c      	ldr	r3, [pc, #432]	; (8004900 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	091b      	lsrs	r3, r3, #4
 8004754:	f003 0307 	and.w	r3, r3, #7
 8004758:	1c5a      	adds	r2, r3, #1
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
       ||
 800475e:	429a      	cmp	r2, r3
 8004760:	d047      	beq.n	80047f2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	73fb      	strb	r3, [r7, #15]
 8004766:	e044      	b.n	80047f2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2b03      	cmp	r3, #3
 800476e:	d018      	beq.n	80047a2 <RCCEx_PLLSAI1_Config+0x86>
 8004770:	2b03      	cmp	r3, #3
 8004772:	d825      	bhi.n	80047c0 <RCCEx_PLLSAI1_Config+0xa4>
 8004774:	2b01      	cmp	r3, #1
 8004776:	d002      	beq.n	800477e <RCCEx_PLLSAI1_Config+0x62>
 8004778:	2b02      	cmp	r3, #2
 800477a:	d009      	beq.n	8004790 <RCCEx_PLLSAI1_Config+0x74>
 800477c:	e020      	b.n	80047c0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800477e:	4b60      	ldr	r3, [pc, #384]	; (8004900 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d11d      	bne.n	80047c6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800478e:	e01a      	b.n	80047c6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004790:	4b5b      	ldr	r3, [pc, #364]	; (8004900 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004798:	2b00      	cmp	r3, #0
 800479a:	d116      	bne.n	80047ca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047a0:	e013      	b.n	80047ca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80047a2:	4b57      	ldr	r3, [pc, #348]	; (8004900 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d10f      	bne.n	80047ce <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80047ae:	4b54      	ldr	r3, [pc, #336]	; (8004900 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d109      	bne.n	80047ce <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80047be:	e006      	b.n	80047ce <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	73fb      	strb	r3, [r7, #15]
      break;
 80047c4:	e004      	b.n	80047d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80047c6:	bf00      	nop
 80047c8:	e002      	b.n	80047d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80047ca:	bf00      	nop
 80047cc:	e000      	b.n	80047d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80047ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80047d0:	7bfb      	ldrb	r3, [r7, #15]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d10d      	bne.n	80047f2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80047d6:	4b4a      	ldr	r3, [pc, #296]	; (8004900 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6819      	ldr	r1, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	3b01      	subs	r3, #1
 80047e8:	011b      	lsls	r3, r3, #4
 80047ea:	430b      	orrs	r3, r1
 80047ec:	4944      	ldr	r1, [pc, #272]	; (8004900 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80047f2:	7bfb      	ldrb	r3, [r7, #15]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d17d      	bne.n	80048f4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80047f8:	4b41      	ldr	r3, [pc, #260]	; (8004900 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a40      	ldr	r2, [pc, #256]	; (8004900 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004802:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004804:	f7fc fd4c 	bl	80012a0 <HAL_GetTick>
 8004808:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800480a:	e009      	b.n	8004820 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800480c:	f7fc fd48 	bl	80012a0 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	2b02      	cmp	r3, #2
 8004818:	d902      	bls.n	8004820 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	73fb      	strb	r3, [r7, #15]
        break;
 800481e:	e005      	b.n	800482c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004820:	4b37      	ldr	r3, [pc, #220]	; (8004900 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d1ef      	bne.n	800480c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800482c:	7bfb      	ldrb	r3, [r7, #15]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d160      	bne.n	80048f4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d111      	bne.n	800485c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004838:	4b31      	ldr	r3, [pc, #196]	; (8004900 <RCCEx_PLLSAI1_Config+0x1e4>)
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004840:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	6892      	ldr	r2, [r2, #8]
 8004848:	0211      	lsls	r1, r2, #8
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	68d2      	ldr	r2, [r2, #12]
 800484e:	0912      	lsrs	r2, r2, #4
 8004850:	0452      	lsls	r2, r2, #17
 8004852:	430a      	orrs	r2, r1
 8004854:	492a      	ldr	r1, [pc, #168]	; (8004900 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004856:	4313      	orrs	r3, r2
 8004858:	610b      	str	r3, [r1, #16]
 800485a:	e027      	b.n	80048ac <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	2b01      	cmp	r3, #1
 8004860:	d112      	bne.n	8004888 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004862:	4b27      	ldr	r3, [pc, #156]	; (8004900 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800486a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	6892      	ldr	r2, [r2, #8]
 8004872:	0211      	lsls	r1, r2, #8
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	6912      	ldr	r2, [r2, #16]
 8004878:	0852      	lsrs	r2, r2, #1
 800487a:	3a01      	subs	r2, #1
 800487c:	0552      	lsls	r2, r2, #21
 800487e:	430a      	orrs	r2, r1
 8004880:	491f      	ldr	r1, [pc, #124]	; (8004900 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004882:	4313      	orrs	r3, r2
 8004884:	610b      	str	r3, [r1, #16]
 8004886:	e011      	b.n	80048ac <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004888:	4b1d      	ldr	r3, [pc, #116]	; (8004900 <RCCEx_PLLSAI1_Config+0x1e4>)
 800488a:	691b      	ldr	r3, [r3, #16]
 800488c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004890:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	6892      	ldr	r2, [r2, #8]
 8004898:	0211      	lsls	r1, r2, #8
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	6952      	ldr	r2, [r2, #20]
 800489e:	0852      	lsrs	r2, r2, #1
 80048a0:	3a01      	subs	r2, #1
 80048a2:	0652      	lsls	r2, r2, #25
 80048a4:	430a      	orrs	r2, r1
 80048a6:	4916      	ldr	r1, [pc, #88]	; (8004900 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80048ac:	4b14      	ldr	r3, [pc, #80]	; (8004900 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a13      	ldr	r2, [pc, #76]	; (8004900 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80048b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048b8:	f7fc fcf2 	bl	80012a0 <HAL_GetTick>
 80048bc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80048be:	e009      	b.n	80048d4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048c0:	f7fc fcee 	bl	80012a0 <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d902      	bls.n	80048d4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	73fb      	strb	r3, [r7, #15]
          break;
 80048d2:	e005      	b.n	80048e0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80048d4:	4b0a      	ldr	r3, [pc, #40]	; (8004900 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d0ef      	beq.n	80048c0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80048e0:	7bfb      	ldrb	r3, [r7, #15]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d106      	bne.n	80048f4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80048e6:	4b06      	ldr	r3, [pc, #24]	; (8004900 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048e8:	691a      	ldr	r2, [r3, #16]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	699b      	ldr	r3, [r3, #24]
 80048ee:	4904      	ldr	r1, [pc, #16]	; (8004900 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80048f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3710      	adds	r7, #16
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	40021000 	.word	0x40021000

08004904 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800490e:	2300      	movs	r3, #0
 8004910:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004912:	4b6a      	ldr	r3, [pc, #424]	; (8004abc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	f003 0303 	and.w	r3, r3, #3
 800491a:	2b00      	cmp	r3, #0
 800491c:	d018      	beq.n	8004950 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800491e:	4b67      	ldr	r3, [pc, #412]	; (8004abc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	f003 0203 	and.w	r2, r3, #3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	429a      	cmp	r2, r3
 800492c:	d10d      	bne.n	800494a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
       ||
 8004932:	2b00      	cmp	r3, #0
 8004934:	d009      	beq.n	800494a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004936:	4b61      	ldr	r3, [pc, #388]	; (8004abc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	091b      	lsrs	r3, r3, #4
 800493c:	f003 0307 	and.w	r3, r3, #7
 8004940:	1c5a      	adds	r2, r3, #1
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
       ||
 8004946:	429a      	cmp	r2, r3
 8004948:	d047      	beq.n	80049da <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	73fb      	strb	r3, [r7, #15]
 800494e:	e044      	b.n	80049da <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2b03      	cmp	r3, #3
 8004956:	d018      	beq.n	800498a <RCCEx_PLLSAI2_Config+0x86>
 8004958:	2b03      	cmp	r3, #3
 800495a:	d825      	bhi.n	80049a8 <RCCEx_PLLSAI2_Config+0xa4>
 800495c:	2b01      	cmp	r3, #1
 800495e:	d002      	beq.n	8004966 <RCCEx_PLLSAI2_Config+0x62>
 8004960:	2b02      	cmp	r3, #2
 8004962:	d009      	beq.n	8004978 <RCCEx_PLLSAI2_Config+0x74>
 8004964:	e020      	b.n	80049a8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004966:	4b55      	ldr	r3, [pc, #340]	; (8004abc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d11d      	bne.n	80049ae <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004976:	e01a      	b.n	80049ae <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004978:	4b50      	ldr	r3, [pc, #320]	; (8004abc <RCCEx_PLLSAI2_Config+0x1b8>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004980:	2b00      	cmp	r3, #0
 8004982:	d116      	bne.n	80049b2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004988:	e013      	b.n	80049b2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800498a:	4b4c      	ldr	r3, [pc, #304]	; (8004abc <RCCEx_PLLSAI2_Config+0x1b8>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d10f      	bne.n	80049b6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004996:	4b49      	ldr	r3, [pc, #292]	; (8004abc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d109      	bne.n	80049b6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80049a6:	e006      	b.n	80049b6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	73fb      	strb	r3, [r7, #15]
      break;
 80049ac:	e004      	b.n	80049b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80049ae:	bf00      	nop
 80049b0:	e002      	b.n	80049b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80049b2:	bf00      	nop
 80049b4:	e000      	b.n	80049b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80049b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80049b8:	7bfb      	ldrb	r3, [r7, #15]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d10d      	bne.n	80049da <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80049be:	4b3f      	ldr	r3, [pc, #252]	; (8004abc <RCCEx_PLLSAI2_Config+0x1b8>)
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6819      	ldr	r1, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	3b01      	subs	r3, #1
 80049d0:	011b      	lsls	r3, r3, #4
 80049d2:	430b      	orrs	r3, r1
 80049d4:	4939      	ldr	r1, [pc, #228]	; (8004abc <RCCEx_PLLSAI2_Config+0x1b8>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80049da:	7bfb      	ldrb	r3, [r7, #15]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d167      	bne.n	8004ab0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80049e0:	4b36      	ldr	r3, [pc, #216]	; (8004abc <RCCEx_PLLSAI2_Config+0x1b8>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a35      	ldr	r2, [pc, #212]	; (8004abc <RCCEx_PLLSAI2_Config+0x1b8>)
 80049e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049ec:	f7fc fc58 	bl	80012a0 <HAL_GetTick>
 80049f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80049f2:	e009      	b.n	8004a08 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80049f4:	f7fc fc54 	bl	80012a0 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d902      	bls.n	8004a08 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	73fb      	strb	r3, [r7, #15]
        break;
 8004a06:	e005      	b.n	8004a14 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a08:	4b2c      	ldr	r3, [pc, #176]	; (8004abc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d1ef      	bne.n	80049f4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004a14:	7bfb      	ldrb	r3, [r7, #15]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d14a      	bne.n	8004ab0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d111      	bne.n	8004a44 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a20:	4b26      	ldr	r3, [pc, #152]	; (8004abc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a22:	695b      	ldr	r3, [r3, #20]
 8004a24:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004a28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	6892      	ldr	r2, [r2, #8]
 8004a30:	0211      	lsls	r1, r2, #8
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	68d2      	ldr	r2, [r2, #12]
 8004a36:	0912      	lsrs	r2, r2, #4
 8004a38:	0452      	lsls	r2, r2, #17
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	491f      	ldr	r1, [pc, #124]	; (8004abc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	614b      	str	r3, [r1, #20]
 8004a42:	e011      	b.n	8004a68 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a44:	4b1d      	ldr	r3, [pc, #116]	; (8004abc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a46:	695b      	ldr	r3, [r3, #20]
 8004a48:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004a4c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	6892      	ldr	r2, [r2, #8]
 8004a54:	0211      	lsls	r1, r2, #8
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	6912      	ldr	r2, [r2, #16]
 8004a5a:	0852      	lsrs	r2, r2, #1
 8004a5c:	3a01      	subs	r2, #1
 8004a5e:	0652      	lsls	r2, r2, #25
 8004a60:	430a      	orrs	r2, r1
 8004a62:	4916      	ldr	r1, [pc, #88]	; (8004abc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a64:	4313      	orrs	r3, r2
 8004a66:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004a68:	4b14      	ldr	r3, [pc, #80]	; (8004abc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a13      	ldr	r2, [pc, #76]	; (8004abc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a72:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a74:	f7fc fc14 	bl	80012a0 <HAL_GetTick>
 8004a78:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a7a:	e009      	b.n	8004a90 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a7c:	f7fc fc10 	bl	80012a0 <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d902      	bls.n	8004a90 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	73fb      	strb	r3, [r7, #15]
          break;
 8004a8e:	e005      	b.n	8004a9c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a90:	4b0a      	ldr	r3, [pc, #40]	; (8004abc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d0ef      	beq.n	8004a7c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004a9c:	7bfb      	ldrb	r3, [r7, #15]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d106      	bne.n	8004ab0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004aa2:	4b06      	ldr	r3, [pc, #24]	; (8004abc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aa4:	695a      	ldr	r2, [r3, #20]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	4904      	ldr	r1, [pc, #16]	; (8004abc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aac:	4313      	orrs	r3, r2
 8004aae:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3710      	adds	r7, #16
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	40021000 	.word	0x40021000

08004ac0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d101      	bne.n	8004ad2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e049      	b.n	8004b66 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d106      	bne.n	8004aec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f7fc f964 	bl	8000db4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2202      	movs	r2, #2
 8004af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	3304      	adds	r3, #4
 8004afc:	4619      	mov	r1, r3
 8004afe:	4610      	mov	r0, r2
 8004b00:	f000 fccc 	bl	800549c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3708      	adds	r7, #8
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b6e:	b580      	push	{r7, lr}
 8004b70:	b082      	sub	sp, #8
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d101      	bne.n	8004b80 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e049      	b.n	8004c14 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d106      	bne.n	8004b9a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 f841 	bl	8004c1c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2202      	movs	r2, #2
 8004b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	3304      	adds	r3, #4
 8004baa:	4619      	mov	r1, r3
 8004bac:	4610      	mov	r0, r2
 8004bae:	f000 fc75 	bl	800549c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2201      	movs	r2, #1
 8004be6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2201      	movs	r2, #1
 8004bee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2201      	movs	r2, #1
 8004c06:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3708      	adds	r7, #8
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004c24:	bf00      	nop
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d109      	bne.n	8004c54 <HAL_TIM_PWM_Start+0x24>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	bf14      	ite	ne
 8004c4c:	2301      	movne	r3, #1
 8004c4e:	2300      	moveq	r3, #0
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	e03c      	b.n	8004cce <HAL_TIM_PWM_Start+0x9e>
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	2b04      	cmp	r3, #4
 8004c58:	d109      	bne.n	8004c6e <HAL_TIM_PWM_Start+0x3e>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	bf14      	ite	ne
 8004c66:	2301      	movne	r3, #1
 8004c68:	2300      	moveq	r3, #0
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	e02f      	b.n	8004cce <HAL_TIM_PWM_Start+0x9e>
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	2b08      	cmp	r3, #8
 8004c72:	d109      	bne.n	8004c88 <HAL_TIM_PWM_Start+0x58>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	bf14      	ite	ne
 8004c80:	2301      	movne	r3, #1
 8004c82:	2300      	moveq	r3, #0
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	e022      	b.n	8004cce <HAL_TIM_PWM_Start+0x9e>
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	2b0c      	cmp	r3, #12
 8004c8c:	d109      	bne.n	8004ca2 <HAL_TIM_PWM_Start+0x72>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	bf14      	ite	ne
 8004c9a:	2301      	movne	r3, #1
 8004c9c:	2300      	moveq	r3, #0
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	e015      	b.n	8004cce <HAL_TIM_PWM_Start+0x9e>
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	2b10      	cmp	r3, #16
 8004ca6:	d109      	bne.n	8004cbc <HAL_TIM_PWM_Start+0x8c>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	bf14      	ite	ne
 8004cb4:	2301      	movne	r3, #1
 8004cb6:	2300      	moveq	r3, #0
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	e008      	b.n	8004cce <HAL_TIM_PWM_Start+0x9e>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	bf14      	ite	ne
 8004cc8:	2301      	movne	r3, #1
 8004cca:	2300      	moveq	r3, #0
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d001      	beq.n	8004cd6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e09c      	b.n	8004e10 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d104      	bne.n	8004ce6 <HAL_TIM_PWM_Start+0xb6>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2202      	movs	r2, #2
 8004ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ce4:	e023      	b.n	8004d2e <HAL_TIM_PWM_Start+0xfe>
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	2b04      	cmp	r3, #4
 8004cea:	d104      	bne.n	8004cf6 <HAL_TIM_PWM_Start+0xc6>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2202      	movs	r2, #2
 8004cf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cf4:	e01b      	b.n	8004d2e <HAL_TIM_PWM_Start+0xfe>
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	2b08      	cmp	r3, #8
 8004cfa:	d104      	bne.n	8004d06 <HAL_TIM_PWM_Start+0xd6>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2202      	movs	r2, #2
 8004d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d04:	e013      	b.n	8004d2e <HAL_TIM_PWM_Start+0xfe>
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	2b0c      	cmp	r3, #12
 8004d0a:	d104      	bne.n	8004d16 <HAL_TIM_PWM_Start+0xe6>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2202      	movs	r2, #2
 8004d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d14:	e00b      	b.n	8004d2e <HAL_TIM_PWM_Start+0xfe>
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	2b10      	cmp	r3, #16
 8004d1a:	d104      	bne.n	8004d26 <HAL_TIM_PWM_Start+0xf6>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2202      	movs	r2, #2
 8004d20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d24:	e003      	b.n	8004d2e <HAL_TIM_PWM_Start+0xfe>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2202      	movs	r2, #2
 8004d2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2201      	movs	r2, #1
 8004d34:	6839      	ldr	r1, [r7, #0]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f000 ffba 	bl	8005cb0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a35      	ldr	r2, [pc, #212]	; (8004e18 <HAL_TIM_PWM_Start+0x1e8>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d013      	beq.n	8004d6e <HAL_TIM_PWM_Start+0x13e>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a34      	ldr	r2, [pc, #208]	; (8004e1c <HAL_TIM_PWM_Start+0x1ec>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d00e      	beq.n	8004d6e <HAL_TIM_PWM_Start+0x13e>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a32      	ldr	r2, [pc, #200]	; (8004e20 <HAL_TIM_PWM_Start+0x1f0>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d009      	beq.n	8004d6e <HAL_TIM_PWM_Start+0x13e>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a31      	ldr	r2, [pc, #196]	; (8004e24 <HAL_TIM_PWM_Start+0x1f4>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d004      	beq.n	8004d6e <HAL_TIM_PWM_Start+0x13e>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a2f      	ldr	r2, [pc, #188]	; (8004e28 <HAL_TIM_PWM_Start+0x1f8>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d101      	bne.n	8004d72 <HAL_TIM_PWM_Start+0x142>
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e000      	b.n	8004d74 <HAL_TIM_PWM_Start+0x144>
 8004d72:	2300      	movs	r3, #0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d007      	beq.n	8004d88 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d86:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a22      	ldr	r2, [pc, #136]	; (8004e18 <HAL_TIM_PWM_Start+0x1e8>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d01d      	beq.n	8004dce <HAL_TIM_PWM_Start+0x19e>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d9a:	d018      	beq.n	8004dce <HAL_TIM_PWM_Start+0x19e>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a22      	ldr	r2, [pc, #136]	; (8004e2c <HAL_TIM_PWM_Start+0x1fc>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d013      	beq.n	8004dce <HAL_TIM_PWM_Start+0x19e>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a21      	ldr	r2, [pc, #132]	; (8004e30 <HAL_TIM_PWM_Start+0x200>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d00e      	beq.n	8004dce <HAL_TIM_PWM_Start+0x19e>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a1f      	ldr	r2, [pc, #124]	; (8004e34 <HAL_TIM_PWM_Start+0x204>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d009      	beq.n	8004dce <HAL_TIM_PWM_Start+0x19e>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a17      	ldr	r2, [pc, #92]	; (8004e1c <HAL_TIM_PWM_Start+0x1ec>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d004      	beq.n	8004dce <HAL_TIM_PWM_Start+0x19e>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a15      	ldr	r2, [pc, #84]	; (8004e20 <HAL_TIM_PWM_Start+0x1f0>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d115      	bne.n	8004dfa <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	689a      	ldr	r2, [r3, #8]
 8004dd4:	4b18      	ldr	r3, [pc, #96]	; (8004e38 <HAL_TIM_PWM_Start+0x208>)
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2b06      	cmp	r3, #6
 8004dde:	d015      	beq.n	8004e0c <HAL_TIM_PWM_Start+0x1dc>
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004de6:	d011      	beq.n	8004e0c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f042 0201 	orr.w	r2, r2, #1
 8004df6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004df8:	e008      	b.n	8004e0c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f042 0201 	orr.w	r2, r2, #1
 8004e08:	601a      	str	r2, [r3, #0]
 8004e0a:	e000      	b.n	8004e0e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e0c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e0e:	2300      	movs	r3, #0
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3710      	adds	r7, #16
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	40012c00 	.word	0x40012c00
 8004e1c:	40013400 	.word	0x40013400
 8004e20:	40014000 	.word	0x40014000
 8004e24:	40014400 	.word	0x40014400
 8004e28:	40014800 	.word	0x40014800
 8004e2c:	40000400 	.word	0x40000400
 8004e30:	40000800 	.word	0x40000800
 8004e34:	40000c00 	.word	0x40000c00
 8004e38:	00010007 	.word	0x00010007

08004e3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	f003 0302 	and.w	r3, r3, #2
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d122      	bne.n	8004e98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	f003 0302 	and.w	r3, r3, #2
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d11b      	bne.n	8004e98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f06f 0202 	mvn.w	r2, #2
 8004e68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	f003 0303 	and.w	r3, r3, #3
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d003      	beq.n	8004e86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 faed 	bl	800545e <HAL_TIM_IC_CaptureCallback>
 8004e84:	e005      	b.n	8004e92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 fadf 	bl	800544a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 faf0 	bl	8005472 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	f003 0304 	and.w	r3, r3, #4
 8004ea2:	2b04      	cmp	r3, #4
 8004ea4:	d122      	bne.n	8004eec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	f003 0304 	and.w	r3, r3, #4
 8004eb0:	2b04      	cmp	r3, #4
 8004eb2:	d11b      	bne.n	8004eec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f06f 0204 	mvn.w	r2, #4
 8004ebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2202      	movs	r2, #2
 8004ec2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d003      	beq.n	8004eda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 fac3 	bl	800545e <HAL_TIM_IC_CaptureCallback>
 8004ed8:	e005      	b.n	8004ee6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 fab5 	bl	800544a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f000 fac6 	bl	8005472 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	f003 0308 	and.w	r3, r3, #8
 8004ef6:	2b08      	cmp	r3, #8
 8004ef8:	d122      	bne.n	8004f40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	f003 0308 	and.w	r3, r3, #8
 8004f04:	2b08      	cmp	r3, #8
 8004f06:	d11b      	bne.n	8004f40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f06f 0208 	mvn.w	r2, #8
 8004f10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2204      	movs	r2, #4
 8004f16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	69db      	ldr	r3, [r3, #28]
 8004f1e:	f003 0303 	and.w	r3, r3, #3
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d003      	beq.n	8004f2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 fa99 	bl	800545e <HAL_TIM_IC_CaptureCallback>
 8004f2c:	e005      	b.n	8004f3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 fa8b 	bl	800544a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 fa9c 	bl	8005472 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	f003 0310 	and.w	r3, r3, #16
 8004f4a:	2b10      	cmp	r3, #16
 8004f4c:	d122      	bne.n	8004f94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	f003 0310 	and.w	r3, r3, #16
 8004f58:	2b10      	cmp	r3, #16
 8004f5a:	d11b      	bne.n	8004f94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f06f 0210 	mvn.w	r2, #16
 8004f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2208      	movs	r2, #8
 8004f6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	69db      	ldr	r3, [r3, #28]
 8004f72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d003      	beq.n	8004f82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 fa6f 	bl	800545e <HAL_TIM_IC_CaptureCallback>
 8004f80:	e005      	b.n	8004f8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 fa61 	bl	800544a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f000 fa72 	bl	8005472 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	f003 0301 	and.w	r3, r3, #1
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d10e      	bne.n	8004fc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	f003 0301 	and.w	r3, r3, #1
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d107      	bne.n	8004fc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f06f 0201 	mvn.w	r2, #1
 8004fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 fa3b 	bl	8005436 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fca:	2b80      	cmp	r3, #128	; 0x80
 8004fcc:	d10e      	bne.n	8004fec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fd8:	2b80      	cmp	r3, #128	; 0x80
 8004fda:	d107      	bne.n	8004fec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 ff1a 	bl	8005e20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ff6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ffa:	d10e      	bne.n	800501a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005006:	2b80      	cmp	r3, #128	; 0x80
 8005008:	d107      	bne.n	800501a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005012:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f000 ff0d 	bl	8005e34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	691b      	ldr	r3, [r3, #16]
 8005020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005024:	2b40      	cmp	r3, #64	; 0x40
 8005026:	d10e      	bne.n	8005046 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005032:	2b40      	cmp	r3, #64	; 0x40
 8005034:	d107      	bne.n	8005046 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800503e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 fa20 	bl	8005486 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	f003 0320 	and.w	r3, r3, #32
 8005050:	2b20      	cmp	r3, #32
 8005052:	d10e      	bne.n	8005072 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	f003 0320 	and.w	r3, r3, #32
 800505e:	2b20      	cmp	r3, #32
 8005060:	d107      	bne.n	8005072 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f06f 0220 	mvn.w	r2, #32
 800506a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 fecd 	bl	8005e0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005072:	bf00      	nop
 8005074:	3708      	adds	r7, #8
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
	...

0800507c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b086      	sub	sp, #24
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005088:	2300      	movs	r3, #0
 800508a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005092:	2b01      	cmp	r3, #1
 8005094:	d101      	bne.n	800509a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005096:	2302      	movs	r3, #2
 8005098:	e0ff      	b.n	800529a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2201      	movs	r2, #1
 800509e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2b14      	cmp	r3, #20
 80050a6:	f200 80f0 	bhi.w	800528a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80050aa:	a201      	add	r2, pc, #4	; (adr r2, 80050b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80050ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b0:	08005105 	.word	0x08005105
 80050b4:	0800528b 	.word	0x0800528b
 80050b8:	0800528b 	.word	0x0800528b
 80050bc:	0800528b 	.word	0x0800528b
 80050c0:	08005145 	.word	0x08005145
 80050c4:	0800528b 	.word	0x0800528b
 80050c8:	0800528b 	.word	0x0800528b
 80050cc:	0800528b 	.word	0x0800528b
 80050d0:	08005187 	.word	0x08005187
 80050d4:	0800528b 	.word	0x0800528b
 80050d8:	0800528b 	.word	0x0800528b
 80050dc:	0800528b 	.word	0x0800528b
 80050e0:	080051c7 	.word	0x080051c7
 80050e4:	0800528b 	.word	0x0800528b
 80050e8:	0800528b 	.word	0x0800528b
 80050ec:	0800528b 	.word	0x0800528b
 80050f0:	08005209 	.word	0x08005209
 80050f4:	0800528b 	.word	0x0800528b
 80050f8:	0800528b 	.word	0x0800528b
 80050fc:	0800528b 	.word	0x0800528b
 8005100:	08005249 	.word	0x08005249
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68b9      	ldr	r1, [r7, #8]
 800510a:	4618      	mov	r0, r3
 800510c:	f000 fa60 	bl	80055d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	699a      	ldr	r2, [r3, #24]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f042 0208 	orr.w	r2, r2, #8
 800511e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	699a      	ldr	r2, [r3, #24]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f022 0204 	bic.w	r2, r2, #4
 800512e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	6999      	ldr	r1, [r3, #24]
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	691a      	ldr	r2, [r3, #16]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	430a      	orrs	r2, r1
 8005140:	619a      	str	r2, [r3, #24]
      break;
 8005142:	e0a5      	b.n	8005290 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68b9      	ldr	r1, [r7, #8]
 800514a:	4618      	mov	r0, r3
 800514c:	f000 fad0 	bl	80056f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	699a      	ldr	r2, [r3, #24]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800515e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	699a      	ldr	r2, [r3, #24]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800516e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	6999      	ldr	r1, [r3, #24]
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	021a      	lsls	r2, r3, #8
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	430a      	orrs	r2, r1
 8005182:	619a      	str	r2, [r3, #24]
      break;
 8005184:	e084      	b.n	8005290 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68b9      	ldr	r1, [r7, #8]
 800518c:	4618      	mov	r0, r3
 800518e:	f000 fb39 	bl	8005804 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	69da      	ldr	r2, [r3, #28]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f042 0208 	orr.w	r2, r2, #8
 80051a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	69da      	ldr	r2, [r3, #28]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f022 0204 	bic.w	r2, r2, #4
 80051b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	69d9      	ldr	r1, [r3, #28]
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	691a      	ldr	r2, [r3, #16]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	430a      	orrs	r2, r1
 80051c2:	61da      	str	r2, [r3, #28]
      break;
 80051c4:	e064      	b.n	8005290 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68b9      	ldr	r1, [r7, #8]
 80051cc:	4618      	mov	r0, r3
 80051ce:	f000 fba1 	bl	8005914 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	69da      	ldr	r2, [r3, #28]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	69da      	ldr	r2, [r3, #28]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	69d9      	ldr	r1, [r3, #28]
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	691b      	ldr	r3, [r3, #16]
 80051fc:	021a      	lsls	r2, r3, #8
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	430a      	orrs	r2, r1
 8005204:	61da      	str	r2, [r3, #28]
      break;
 8005206:	e043      	b.n	8005290 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68b9      	ldr	r1, [r7, #8]
 800520e:	4618      	mov	r0, r3
 8005210:	f000 fbea 	bl	80059e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f042 0208 	orr.w	r2, r2, #8
 8005222:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f022 0204 	bic.w	r2, r2, #4
 8005232:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	691a      	ldr	r2, [r3, #16]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	430a      	orrs	r2, r1
 8005244:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005246:	e023      	b.n	8005290 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	68b9      	ldr	r1, [r7, #8]
 800524e:	4618      	mov	r0, r3
 8005250:	f000 fc2e 	bl	8005ab0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005262:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005272:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	021a      	lsls	r2, r3, #8
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	430a      	orrs	r2, r1
 8005286:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005288:	e002      	b.n	8005290 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	75fb      	strb	r3, [r7, #23]
      break;
 800528e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2200      	movs	r2, #0
 8005294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005298:	7dfb      	ldrb	r3, [r7, #23]
}
 800529a:	4618      	mov	r0, r3
 800529c:	3718      	adds	r7, #24
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop

080052a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b084      	sub	sp, #16
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052ae:	2300      	movs	r3, #0
 80052b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d101      	bne.n	80052c0 <HAL_TIM_ConfigClockSource+0x1c>
 80052bc:	2302      	movs	r3, #2
 80052be:	e0b6      	b.n	800542e <HAL_TIM_ConfigClockSource+0x18a>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2202      	movs	r2, #2
 80052cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80052e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68ba      	ldr	r2, [r7, #8]
 80052f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052fc:	d03e      	beq.n	800537c <HAL_TIM_ConfigClockSource+0xd8>
 80052fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005302:	f200 8087 	bhi.w	8005414 <HAL_TIM_ConfigClockSource+0x170>
 8005306:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800530a:	f000 8086 	beq.w	800541a <HAL_TIM_ConfigClockSource+0x176>
 800530e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005312:	d87f      	bhi.n	8005414 <HAL_TIM_ConfigClockSource+0x170>
 8005314:	2b70      	cmp	r3, #112	; 0x70
 8005316:	d01a      	beq.n	800534e <HAL_TIM_ConfigClockSource+0xaa>
 8005318:	2b70      	cmp	r3, #112	; 0x70
 800531a:	d87b      	bhi.n	8005414 <HAL_TIM_ConfigClockSource+0x170>
 800531c:	2b60      	cmp	r3, #96	; 0x60
 800531e:	d050      	beq.n	80053c2 <HAL_TIM_ConfigClockSource+0x11e>
 8005320:	2b60      	cmp	r3, #96	; 0x60
 8005322:	d877      	bhi.n	8005414 <HAL_TIM_ConfigClockSource+0x170>
 8005324:	2b50      	cmp	r3, #80	; 0x50
 8005326:	d03c      	beq.n	80053a2 <HAL_TIM_ConfigClockSource+0xfe>
 8005328:	2b50      	cmp	r3, #80	; 0x50
 800532a:	d873      	bhi.n	8005414 <HAL_TIM_ConfigClockSource+0x170>
 800532c:	2b40      	cmp	r3, #64	; 0x40
 800532e:	d058      	beq.n	80053e2 <HAL_TIM_ConfigClockSource+0x13e>
 8005330:	2b40      	cmp	r3, #64	; 0x40
 8005332:	d86f      	bhi.n	8005414 <HAL_TIM_ConfigClockSource+0x170>
 8005334:	2b30      	cmp	r3, #48	; 0x30
 8005336:	d064      	beq.n	8005402 <HAL_TIM_ConfigClockSource+0x15e>
 8005338:	2b30      	cmp	r3, #48	; 0x30
 800533a:	d86b      	bhi.n	8005414 <HAL_TIM_ConfigClockSource+0x170>
 800533c:	2b20      	cmp	r3, #32
 800533e:	d060      	beq.n	8005402 <HAL_TIM_ConfigClockSource+0x15e>
 8005340:	2b20      	cmp	r3, #32
 8005342:	d867      	bhi.n	8005414 <HAL_TIM_ConfigClockSource+0x170>
 8005344:	2b00      	cmp	r3, #0
 8005346:	d05c      	beq.n	8005402 <HAL_TIM_ConfigClockSource+0x15e>
 8005348:	2b10      	cmp	r3, #16
 800534a:	d05a      	beq.n	8005402 <HAL_TIM_ConfigClockSource+0x15e>
 800534c:	e062      	b.n	8005414 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6818      	ldr	r0, [r3, #0]
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	6899      	ldr	r1, [r3, #8]
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	685a      	ldr	r2, [r3, #4]
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	f000 fc87 	bl	8005c70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005370:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68ba      	ldr	r2, [r7, #8]
 8005378:	609a      	str	r2, [r3, #8]
      break;
 800537a:	e04f      	b.n	800541c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6818      	ldr	r0, [r3, #0]
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	6899      	ldr	r1, [r3, #8]
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	685a      	ldr	r2, [r3, #4]
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	f000 fc70 	bl	8005c70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	689a      	ldr	r2, [r3, #8]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800539e:	609a      	str	r2, [r3, #8]
      break;
 80053a0:	e03c      	b.n	800541c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6818      	ldr	r0, [r3, #0]
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	6859      	ldr	r1, [r3, #4]
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	461a      	mov	r2, r3
 80053b0:	f000 fbe4 	bl	8005b7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2150      	movs	r1, #80	; 0x50
 80053ba:	4618      	mov	r0, r3
 80053bc:	f000 fc3d 	bl	8005c3a <TIM_ITRx_SetConfig>
      break;
 80053c0:	e02c      	b.n	800541c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6818      	ldr	r0, [r3, #0]
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	6859      	ldr	r1, [r3, #4]
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	461a      	mov	r2, r3
 80053d0:	f000 fc03 	bl	8005bda <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2160      	movs	r1, #96	; 0x60
 80053da:	4618      	mov	r0, r3
 80053dc:	f000 fc2d 	bl	8005c3a <TIM_ITRx_SetConfig>
      break;
 80053e0:	e01c      	b.n	800541c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6818      	ldr	r0, [r3, #0]
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	6859      	ldr	r1, [r3, #4]
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	461a      	mov	r2, r3
 80053f0:	f000 fbc4 	bl	8005b7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2140      	movs	r1, #64	; 0x40
 80053fa:	4618      	mov	r0, r3
 80053fc:	f000 fc1d 	bl	8005c3a <TIM_ITRx_SetConfig>
      break;
 8005400:	e00c      	b.n	800541c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4619      	mov	r1, r3
 800540c:	4610      	mov	r0, r2
 800540e:	f000 fc14 	bl	8005c3a <TIM_ITRx_SetConfig>
      break;
 8005412:	e003      	b.n	800541c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	73fb      	strb	r3, [r7, #15]
      break;
 8005418:	e000      	b.n	800541c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800541a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800542c:	7bfb      	ldrb	r3, [r7, #15]
}
 800542e:	4618      	mov	r0, r3
 8005430:	3710      	adds	r7, #16
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}

08005436 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005436:	b480      	push	{r7}
 8005438:	b083      	sub	sp, #12
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800543e:	bf00      	nop
 8005440:	370c      	adds	r7, #12
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr

0800544a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800544a:	b480      	push	{r7}
 800544c:	b083      	sub	sp, #12
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005452:	bf00      	nop
 8005454:	370c      	adds	r7, #12
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr

0800545e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800545e:	b480      	push	{r7}
 8005460:	b083      	sub	sp, #12
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005466:	bf00      	nop
 8005468:	370c      	adds	r7, #12
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr

08005472 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005472:	b480      	push	{r7}
 8005474:	b083      	sub	sp, #12
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800547a:	bf00      	nop
 800547c:	370c      	adds	r7, #12
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr

08005486 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005486:	b480      	push	{r7}
 8005488:	b083      	sub	sp, #12
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800548e:	bf00      	nop
 8005490:	370c      	adds	r7, #12
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
	...

0800549c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800549c:	b480      	push	{r7}
 800549e:	b085      	sub	sp, #20
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a40      	ldr	r2, [pc, #256]	; (80055b0 <TIM_Base_SetConfig+0x114>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d013      	beq.n	80054dc <TIM_Base_SetConfig+0x40>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054ba:	d00f      	beq.n	80054dc <TIM_Base_SetConfig+0x40>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a3d      	ldr	r2, [pc, #244]	; (80055b4 <TIM_Base_SetConfig+0x118>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d00b      	beq.n	80054dc <TIM_Base_SetConfig+0x40>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a3c      	ldr	r2, [pc, #240]	; (80055b8 <TIM_Base_SetConfig+0x11c>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d007      	beq.n	80054dc <TIM_Base_SetConfig+0x40>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a3b      	ldr	r2, [pc, #236]	; (80055bc <TIM_Base_SetConfig+0x120>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d003      	beq.n	80054dc <TIM_Base_SetConfig+0x40>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a3a      	ldr	r2, [pc, #232]	; (80055c0 <TIM_Base_SetConfig+0x124>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d108      	bne.n	80054ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a2f      	ldr	r2, [pc, #188]	; (80055b0 <TIM_Base_SetConfig+0x114>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d01f      	beq.n	8005536 <TIM_Base_SetConfig+0x9a>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054fc:	d01b      	beq.n	8005536 <TIM_Base_SetConfig+0x9a>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a2c      	ldr	r2, [pc, #176]	; (80055b4 <TIM_Base_SetConfig+0x118>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d017      	beq.n	8005536 <TIM_Base_SetConfig+0x9a>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a2b      	ldr	r2, [pc, #172]	; (80055b8 <TIM_Base_SetConfig+0x11c>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d013      	beq.n	8005536 <TIM_Base_SetConfig+0x9a>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a2a      	ldr	r2, [pc, #168]	; (80055bc <TIM_Base_SetConfig+0x120>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d00f      	beq.n	8005536 <TIM_Base_SetConfig+0x9a>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a29      	ldr	r2, [pc, #164]	; (80055c0 <TIM_Base_SetConfig+0x124>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d00b      	beq.n	8005536 <TIM_Base_SetConfig+0x9a>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a28      	ldr	r2, [pc, #160]	; (80055c4 <TIM_Base_SetConfig+0x128>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d007      	beq.n	8005536 <TIM_Base_SetConfig+0x9a>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a27      	ldr	r2, [pc, #156]	; (80055c8 <TIM_Base_SetConfig+0x12c>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d003      	beq.n	8005536 <TIM_Base_SetConfig+0x9a>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a26      	ldr	r2, [pc, #152]	; (80055cc <TIM_Base_SetConfig+0x130>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d108      	bne.n	8005548 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800553c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	4313      	orrs	r3, r2
 8005546:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	4313      	orrs	r3, r2
 8005554:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	689a      	ldr	r2, [r3, #8]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a10      	ldr	r2, [pc, #64]	; (80055b0 <TIM_Base_SetConfig+0x114>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d00f      	beq.n	8005594 <TIM_Base_SetConfig+0xf8>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a12      	ldr	r2, [pc, #72]	; (80055c0 <TIM_Base_SetConfig+0x124>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d00b      	beq.n	8005594 <TIM_Base_SetConfig+0xf8>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a11      	ldr	r2, [pc, #68]	; (80055c4 <TIM_Base_SetConfig+0x128>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d007      	beq.n	8005594 <TIM_Base_SetConfig+0xf8>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a10      	ldr	r2, [pc, #64]	; (80055c8 <TIM_Base_SetConfig+0x12c>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d003      	beq.n	8005594 <TIM_Base_SetConfig+0xf8>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a0f      	ldr	r2, [pc, #60]	; (80055cc <TIM_Base_SetConfig+0x130>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d103      	bne.n	800559c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	691a      	ldr	r2, [r3, #16]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	615a      	str	r2, [r3, #20]
}
 80055a2:	bf00      	nop
 80055a4:	3714      	adds	r7, #20
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
 80055ae:	bf00      	nop
 80055b0:	40012c00 	.word	0x40012c00
 80055b4:	40000400 	.word	0x40000400
 80055b8:	40000800 	.word	0x40000800
 80055bc:	40000c00 	.word	0x40000c00
 80055c0:	40013400 	.word	0x40013400
 80055c4:	40014000 	.word	0x40014000
 80055c8:	40014400 	.word	0x40014400
 80055cc:	40014800 	.word	0x40014800

080055d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b087      	sub	sp, #28
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a1b      	ldr	r3, [r3, #32]
 80055de:	f023 0201 	bic.w	r2, r3, #1
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a1b      	ldr	r3, [r3, #32]
 80055ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	699b      	ldr	r3, [r3, #24]
 80055f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f023 0303 	bic.w	r3, r3, #3
 800560a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	4313      	orrs	r3, r2
 8005614:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	f023 0302 	bic.w	r3, r3, #2
 800561c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	4313      	orrs	r3, r2
 8005626:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a2c      	ldr	r2, [pc, #176]	; (80056dc <TIM_OC1_SetConfig+0x10c>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d00f      	beq.n	8005650 <TIM_OC1_SetConfig+0x80>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a2b      	ldr	r2, [pc, #172]	; (80056e0 <TIM_OC1_SetConfig+0x110>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d00b      	beq.n	8005650 <TIM_OC1_SetConfig+0x80>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4a2a      	ldr	r2, [pc, #168]	; (80056e4 <TIM_OC1_SetConfig+0x114>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d007      	beq.n	8005650 <TIM_OC1_SetConfig+0x80>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a29      	ldr	r2, [pc, #164]	; (80056e8 <TIM_OC1_SetConfig+0x118>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d003      	beq.n	8005650 <TIM_OC1_SetConfig+0x80>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a28      	ldr	r2, [pc, #160]	; (80056ec <TIM_OC1_SetConfig+0x11c>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d10c      	bne.n	800566a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	f023 0308 	bic.w	r3, r3, #8
 8005656:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	697a      	ldr	r2, [r7, #20]
 800565e:	4313      	orrs	r3, r2
 8005660:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	f023 0304 	bic.w	r3, r3, #4
 8005668:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a1b      	ldr	r2, [pc, #108]	; (80056dc <TIM_OC1_SetConfig+0x10c>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d00f      	beq.n	8005692 <TIM_OC1_SetConfig+0xc2>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a1a      	ldr	r2, [pc, #104]	; (80056e0 <TIM_OC1_SetConfig+0x110>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d00b      	beq.n	8005692 <TIM_OC1_SetConfig+0xc2>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a19      	ldr	r2, [pc, #100]	; (80056e4 <TIM_OC1_SetConfig+0x114>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d007      	beq.n	8005692 <TIM_OC1_SetConfig+0xc2>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a18      	ldr	r2, [pc, #96]	; (80056e8 <TIM_OC1_SetConfig+0x118>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d003      	beq.n	8005692 <TIM_OC1_SetConfig+0xc2>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a17      	ldr	r2, [pc, #92]	; (80056ec <TIM_OC1_SetConfig+0x11c>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d111      	bne.n	80056b6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005698:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	695b      	ldr	r3, [r3, #20]
 80056a6:	693a      	ldr	r2, [r7, #16]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	693a      	ldr	r2, [r7, #16]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	693a      	ldr	r2, [r7, #16]
 80056ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	685a      	ldr	r2, [r3, #4]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	697a      	ldr	r2, [r7, #20]
 80056ce:	621a      	str	r2, [r3, #32]
}
 80056d0:	bf00      	nop
 80056d2:	371c      	adds	r7, #28
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr
 80056dc:	40012c00 	.word	0x40012c00
 80056e0:	40013400 	.word	0x40013400
 80056e4:	40014000 	.word	0x40014000
 80056e8:	40014400 	.word	0x40014400
 80056ec:	40014800 	.word	0x40014800

080056f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b087      	sub	sp, #28
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a1b      	ldr	r3, [r3, #32]
 80056fe:	f023 0210 	bic.w	r2, r3, #16
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a1b      	ldr	r3, [r3, #32]
 800570a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800571e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800572a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	021b      	lsls	r3, r3, #8
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	4313      	orrs	r3, r2
 8005736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	f023 0320 	bic.w	r3, r3, #32
 800573e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	011b      	lsls	r3, r3, #4
 8005746:	697a      	ldr	r2, [r7, #20]
 8005748:	4313      	orrs	r3, r2
 800574a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a28      	ldr	r2, [pc, #160]	; (80057f0 <TIM_OC2_SetConfig+0x100>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d003      	beq.n	800575c <TIM_OC2_SetConfig+0x6c>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a27      	ldr	r2, [pc, #156]	; (80057f4 <TIM_OC2_SetConfig+0x104>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d10d      	bne.n	8005778 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005762:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	011b      	lsls	r3, r3, #4
 800576a:	697a      	ldr	r2, [r7, #20]
 800576c:	4313      	orrs	r3, r2
 800576e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005776:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a1d      	ldr	r2, [pc, #116]	; (80057f0 <TIM_OC2_SetConfig+0x100>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d00f      	beq.n	80057a0 <TIM_OC2_SetConfig+0xb0>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4a1c      	ldr	r2, [pc, #112]	; (80057f4 <TIM_OC2_SetConfig+0x104>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d00b      	beq.n	80057a0 <TIM_OC2_SetConfig+0xb0>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	4a1b      	ldr	r2, [pc, #108]	; (80057f8 <TIM_OC2_SetConfig+0x108>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d007      	beq.n	80057a0 <TIM_OC2_SetConfig+0xb0>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4a1a      	ldr	r2, [pc, #104]	; (80057fc <TIM_OC2_SetConfig+0x10c>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d003      	beq.n	80057a0 <TIM_OC2_SetConfig+0xb0>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4a19      	ldr	r2, [pc, #100]	; (8005800 <TIM_OC2_SetConfig+0x110>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d113      	bne.n	80057c8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	695b      	ldr	r3, [r3, #20]
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	693a      	ldr	r2, [r7, #16]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	699b      	ldr	r3, [r3, #24]
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	693a      	ldr	r2, [r7, #16]
 80057cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	685a      	ldr	r2, [r3, #4]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	697a      	ldr	r2, [r7, #20]
 80057e0:	621a      	str	r2, [r3, #32]
}
 80057e2:	bf00      	nop
 80057e4:	371c      	adds	r7, #28
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop
 80057f0:	40012c00 	.word	0x40012c00
 80057f4:	40013400 	.word	0x40013400
 80057f8:	40014000 	.word	0x40014000
 80057fc:	40014400 	.word	0x40014400
 8005800:	40014800 	.word	0x40014800

08005804 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005804:	b480      	push	{r7}
 8005806:	b087      	sub	sp, #28
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a1b      	ldr	r3, [r3, #32]
 8005812:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a1b      	ldr	r3, [r3, #32]
 800581e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	69db      	ldr	r3, [r3, #28]
 800582a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005836:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f023 0303 	bic.w	r3, r3, #3
 800583e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	4313      	orrs	r3, r2
 8005848:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005850:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	021b      	lsls	r3, r3, #8
 8005858:	697a      	ldr	r2, [r7, #20]
 800585a:	4313      	orrs	r3, r2
 800585c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a27      	ldr	r2, [pc, #156]	; (8005900 <TIM_OC3_SetConfig+0xfc>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d003      	beq.n	800586e <TIM_OC3_SetConfig+0x6a>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a26      	ldr	r2, [pc, #152]	; (8005904 <TIM_OC3_SetConfig+0x100>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d10d      	bne.n	800588a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005874:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	021b      	lsls	r3, r3, #8
 800587c:	697a      	ldr	r2, [r7, #20]
 800587e:	4313      	orrs	r3, r2
 8005880:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005888:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a1c      	ldr	r2, [pc, #112]	; (8005900 <TIM_OC3_SetConfig+0xfc>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d00f      	beq.n	80058b2 <TIM_OC3_SetConfig+0xae>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a1b      	ldr	r2, [pc, #108]	; (8005904 <TIM_OC3_SetConfig+0x100>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d00b      	beq.n	80058b2 <TIM_OC3_SetConfig+0xae>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a1a      	ldr	r2, [pc, #104]	; (8005908 <TIM_OC3_SetConfig+0x104>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d007      	beq.n	80058b2 <TIM_OC3_SetConfig+0xae>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a19      	ldr	r2, [pc, #100]	; (800590c <TIM_OC3_SetConfig+0x108>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d003      	beq.n	80058b2 <TIM_OC3_SetConfig+0xae>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a18      	ldr	r2, [pc, #96]	; (8005910 <TIM_OC3_SetConfig+0x10c>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d113      	bne.n	80058da <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	695b      	ldr	r3, [r3, #20]
 80058c6:	011b      	lsls	r3, r3, #4
 80058c8:	693a      	ldr	r2, [r7, #16]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	011b      	lsls	r3, r3, #4
 80058d4:	693a      	ldr	r2, [r7, #16]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	693a      	ldr	r2, [r7, #16]
 80058de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	685a      	ldr	r2, [r3, #4]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	697a      	ldr	r2, [r7, #20]
 80058f2:	621a      	str	r2, [r3, #32]
}
 80058f4:	bf00      	nop
 80058f6:	371c      	adds	r7, #28
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr
 8005900:	40012c00 	.word	0x40012c00
 8005904:	40013400 	.word	0x40013400
 8005908:	40014000 	.word	0x40014000
 800590c:	40014400 	.word	0x40014400
 8005910:	40014800 	.word	0x40014800

08005914 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005914:	b480      	push	{r7}
 8005916:	b087      	sub	sp, #28
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a1b      	ldr	r3, [r3, #32]
 8005922:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	69db      	ldr	r3, [r3, #28]
 800593a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005942:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005946:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800594e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	021b      	lsls	r3, r3, #8
 8005956:	68fa      	ldr	r2, [r7, #12]
 8005958:	4313      	orrs	r3, r2
 800595a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005962:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	031b      	lsls	r3, r3, #12
 800596a:	693a      	ldr	r2, [r7, #16]
 800596c:	4313      	orrs	r3, r2
 800596e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a18      	ldr	r2, [pc, #96]	; (80059d4 <TIM_OC4_SetConfig+0xc0>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d00f      	beq.n	8005998 <TIM_OC4_SetConfig+0x84>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a17      	ldr	r2, [pc, #92]	; (80059d8 <TIM_OC4_SetConfig+0xc4>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d00b      	beq.n	8005998 <TIM_OC4_SetConfig+0x84>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a16      	ldr	r2, [pc, #88]	; (80059dc <TIM_OC4_SetConfig+0xc8>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d007      	beq.n	8005998 <TIM_OC4_SetConfig+0x84>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a15      	ldr	r2, [pc, #84]	; (80059e0 <TIM_OC4_SetConfig+0xcc>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d003      	beq.n	8005998 <TIM_OC4_SetConfig+0x84>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a14      	ldr	r2, [pc, #80]	; (80059e4 <TIM_OC4_SetConfig+0xd0>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d109      	bne.n	80059ac <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800599e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	695b      	ldr	r3, [r3, #20]
 80059a4:	019b      	lsls	r3, r3, #6
 80059a6:	697a      	ldr	r2, [r7, #20]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	697a      	ldr	r2, [r7, #20]
 80059b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	685a      	ldr	r2, [r3, #4]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	693a      	ldr	r2, [r7, #16]
 80059c4:	621a      	str	r2, [r3, #32]
}
 80059c6:	bf00      	nop
 80059c8:	371c      	adds	r7, #28
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr
 80059d2:	bf00      	nop
 80059d4:	40012c00 	.word	0x40012c00
 80059d8:	40013400 	.word	0x40013400
 80059dc:	40014000 	.word	0x40014000
 80059e0:	40014400 	.word	0x40014400
 80059e4:	40014800 	.word	0x40014800

080059e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b087      	sub	sp, #28
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a1b      	ldr	r3, [r3, #32]
 80059f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a1b      	ldr	r3, [r3, #32]
 8005a02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005a2c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	041b      	lsls	r3, r3, #16
 8005a34:	693a      	ldr	r2, [r7, #16]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a17      	ldr	r2, [pc, #92]	; (8005a9c <TIM_OC5_SetConfig+0xb4>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d00f      	beq.n	8005a62 <TIM_OC5_SetConfig+0x7a>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a16      	ldr	r2, [pc, #88]	; (8005aa0 <TIM_OC5_SetConfig+0xb8>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d00b      	beq.n	8005a62 <TIM_OC5_SetConfig+0x7a>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a15      	ldr	r2, [pc, #84]	; (8005aa4 <TIM_OC5_SetConfig+0xbc>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d007      	beq.n	8005a62 <TIM_OC5_SetConfig+0x7a>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a14      	ldr	r2, [pc, #80]	; (8005aa8 <TIM_OC5_SetConfig+0xc0>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d003      	beq.n	8005a62 <TIM_OC5_SetConfig+0x7a>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a13      	ldr	r2, [pc, #76]	; (8005aac <TIM_OC5_SetConfig+0xc4>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d109      	bne.n	8005a76 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a68:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	695b      	ldr	r3, [r3, #20]
 8005a6e:	021b      	lsls	r3, r3, #8
 8005a70:	697a      	ldr	r2, [r7, #20]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	697a      	ldr	r2, [r7, #20]
 8005a7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	685a      	ldr	r2, [r3, #4]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	693a      	ldr	r2, [r7, #16]
 8005a8e:	621a      	str	r2, [r3, #32]
}
 8005a90:	bf00      	nop
 8005a92:	371c      	adds	r7, #28
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr
 8005a9c:	40012c00 	.word	0x40012c00
 8005aa0:	40013400 	.word	0x40013400
 8005aa4:	40014000 	.word	0x40014000
 8005aa8:	40014400 	.word	0x40014400
 8005aac:	40014800 	.word	0x40014800

08005ab0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b087      	sub	sp, #28
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a1b      	ldr	r3, [r3, #32]
 8005abe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a1b      	ldr	r3, [r3, #32]
 8005aca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ade:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ae2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	021b      	lsls	r3, r3, #8
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005af6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	051b      	lsls	r3, r3, #20
 8005afe:	693a      	ldr	r2, [r7, #16]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a18      	ldr	r2, [pc, #96]	; (8005b68 <TIM_OC6_SetConfig+0xb8>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d00f      	beq.n	8005b2c <TIM_OC6_SetConfig+0x7c>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a17      	ldr	r2, [pc, #92]	; (8005b6c <TIM_OC6_SetConfig+0xbc>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d00b      	beq.n	8005b2c <TIM_OC6_SetConfig+0x7c>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a16      	ldr	r2, [pc, #88]	; (8005b70 <TIM_OC6_SetConfig+0xc0>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d007      	beq.n	8005b2c <TIM_OC6_SetConfig+0x7c>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a15      	ldr	r2, [pc, #84]	; (8005b74 <TIM_OC6_SetConfig+0xc4>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d003      	beq.n	8005b2c <TIM_OC6_SetConfig+0x7c>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a14      	ldr	r2, [pc, #80]	; (8005b78 <TIM_OC6_SetConfig+0xc8>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d109      	bne.n	8005b40 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b32:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	695b      	ldr	r3, [r3, #20]
 8005b38:	029b      	lsls	r3, r3, #10
 8005b3a:	697a      	ldr	r2, [r7, #20]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	685a      	ldr	r2, [r3, #4]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	693a      	ldr	r2, [r7, #16]
 8005b58:	621a      	str	r2, [r3, #32]
}
 8005b5a:	bf00      	nop
 8005b5c:	371c      	adds	r7, #28
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr
 8005b66:	bf00      	nop
 8005b68:	40012c00 	.word	0x40012c00
 8005b6c:	40013400 	.word	0x40013400
 8005b70:	40014000 	.word	0x40014000
 8005b74:	40014400 	.word	0x40014400
 8005b78:	40014800 	.word	0x40014800

08005b7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b087      	sub	sp, #28
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6a1b      	ldr	r3, [r3, #32]
 8005b8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6a1b      	ldr	r3, [r3, #32]
 8005b92:	f023 0201 	bic.w	r2, r3, #1
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	699b      	ldr	r3, [r3, #24]
 8005b9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ba6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	011b      	lsls	r3, r3, #4
 8005bac:	693a      	ldr	r2, [r7, #16]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	f023 030a 	bic.w	r3, r3, #10
 8005bb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005bba:	697a      	ldr	r2, [r7, #20]
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	693a      	ldr	r2, [r7, #16]
 8005bc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	697a      	ldr	r2, [r7, #20]
 8005bcc:	621a      	str	r2, [r3, #32]
}
 8005bce:	bf00      	nop
 8005bd0:	371c      	adds	r7, #28
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr

08005bda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bda:	b480      	push	{r7}
 8005bdc:	b087      	sub	sp, #28
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	60f8      	str	r0, [r7, #12]
 8005be2:	60b9      	str	r1, [r7, #8]
 8005be4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	f023 0210 	bic.w	r2, r3, #16
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6a1b      	ldr	r3, [r3, #32]
 8005bfc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	031b      	lsls	r3, r3, #12
 8005c0a:	697a      	ldr	r2, [r7, #20]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c16:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	011b      	lsls	r3, r3, #4
 8005c1c:	693a      	ldr	r2, [r7, #16]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	697a      	ldr	r2, [r7, #20]
 8005c26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	693a      	ldr	r2, [r7, #16]
 8005c2c:	621a      	str	r2, [r3, #32]
}
 8005c2e:	bf00      	nop
 8005c30:	371c      	adds	r7, #28
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr

08005c3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c3a:	b480      	push	{r7}
 8005c3c:	b085      	sub	sp, #20
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
 8005c42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c52:	683a      	ldr	r2, [r7, #0]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	f043 0307 	orr.w	r3, r3, #7
 8005c5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	609a      	str	r2, [r3, #8]
}
 8005c64:	bf00      	nop
 8005c66:	3714      	adds	r7, #20
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b087      	sub	sp, #28
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	607a      	str	r2, [r7, #4]
 8005c7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	021a      	lsls	r2, r3, #8
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	431a      	orrs	r2, r3
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	697a      	ldr	r2, [r7, #20]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	609a      	str	r2, [r3, #8]
}
 8005ca4:	bf00      	nop
 8005ca6:	371c      	adds	r7, #28
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b087      	sub	sp, #28
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	60f8      	str	r0, [r7, #12]
 8005cb8:	60b9      	str	r1, [r7, #8]
 8005cba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	f003 031f 	and.w	r3, r3, #31
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6a1a      	ldr	r2, [r3, #32]
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	43db      	mvns	r3, r3
 8005cd2:	401a      	ands	r2, r3
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6a1a      	ldr	r2, [r3, #32]
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	f003 031f 	and.w	r3, r3, #31
 8005ce2:	6879      	ldr	r1, [r7, #4]
 8005ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ce8:	431a      	orrs	r2, r3
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	621a      	str	r2, [r3, #32]
}
 8005cee:	bf00      	nop
 8005cf0:	371c      	adds	r7, #28
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr
	...

08005cfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b085      	sub	sp, #20
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d101      	bne.n	8005d14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d10:	2302      	movs	r3, #2
 8005d12:	e068      	b.n	8005de6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2202      	movs	r2, #2
 8005d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a2e      	ldr	r2, [pc, #184]	; (8005df4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d004      	beq.n	8005d48 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a2d      	ldr	r2, [pc, #180]	; (8005df8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d108      	bne.n	8005d5a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005d4e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d60:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a1e      	ldr	r2, [pc, #120]	; (8005df4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d01d      	beq.n	8005dba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d86:	d018      	beq.n	8005dba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a1b      	ldr	r2, [pc, #108]	; (8005dfc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d013      	beq.n	8005dba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a1a      	ldr	r2, [pc, #104]	; (8005e00 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d00e      	beq.n	8005dba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a18      	ldr	r2, [pc, #96]	; (8005e04 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d009      	beq.n	8005dba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a13      	ldr	r2, [pc, #76]	; (8005df8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d004      	beq.n	8005dba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a14      	ldr	r2, [pc, #80]	; (8005e08 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d10c      	bne.n	8005dd4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	68ba      	ldr	r2, [r7, #8]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68ba      	ldr	r2, [r7, #8]
 8005dd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3714      	adds	r7, #20
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop
 8005df4:	40012c00 	.word	0x40012c00
 8005df8:	40013400 	.word	0x40013400
 8005dfc:	40000400 	.word	0x40000400
 8005e00:	40000800 	.word	0x40000800
 8005e04:	40000c00 	.word	0x40000c00
 8005e08:	40014000 	.word	0x40014000

08005e0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e14:	bf00      	nop
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e28:	bf00      	nop
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005e3c:	bf00      	nop
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d101      	bne.n	8005e5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e040      	b.n	8005edc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d106      	bne.n	8005e70 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f7fa fffe 	bl	8000e6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2224      	movs	r2, #36	; 0x24
 8005e74:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f022 0201 	bic.w	r2, r2, #1
 8005e84:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 f992 	bl	80061b0 <UART_SetConfig>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d101      	bne.n	8005e96 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e022      	b.n	8005edc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d002      	beq.n	8005ea4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 fc10 	bl	80066c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	685a      	ldr	r2, [r3, #4]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005eb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	689a      	ldr	r2, [r3, #8]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ec2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f042 0201 	orr.w	r2, r2, #1
 8005ed2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f000 fc97 	bl	8006808 <UART_CheckIdleState>
 8005eda:	4603      	mov	r3, r0
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3708      	adds	r7, #8
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b08a      	sub	sp, #40	; 0x28
 8005ee8:	af02      	add	r7, sp, #8
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	603b      	str	r3, [r7, #0]
 8005ef0:	4613      	mov	r3, r2
 8005ef2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ef8:	2b20      	cmp	r3, #32
 8005efa:	f040 8082 	bne.w	8006002 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d002      	beq.n	8005f0a <HAL_UART_Transmit+0x26>
 8005f04:	88fb      	ldrh	r3, [r7, #6]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d101      	bne.n	8005f0e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e07a      	b.n	8006004 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d101      	bne.n	8005f1c <HAL_UART_Transmit+0x38>
 8005f18:	2302      	movs	r3, #2
 8005f1a:	e073      	b.n	8006004 <HAL_UART_Transmit+0x120>
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2221      	movs	r2, #33	; 0x21
 8005f30:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f32:	f7fb f9b5 	bl	80012a0 <HAL_GetTick>
 8005f36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	88fa      	ldrh	r2, [r7, #6]
 8005f3c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	88fa      	ldrh	r2, [r7, #6]
 8005f44:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f50:	d108      	bne.n	8005f64 <HAL_UART_Transmit+0x80>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d104      	bne.n	8005f64 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	61bb      	str	r3, [r7, #24]
 8005f62:	e003      	b.n	8005f6c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005f74:	e02d      	b.n	8005fd2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	9300      	str	r3, [sp, #0]
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	2180      	movs	r1, #128	; 0x80
 8005f80:	68f8      	ldr	r0, [r7, #12]
 8005f82:	f000 fc8a 	bl	800689a <UART_WaitOnFlagUntilTimeout>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d001      	beq.n	8005f90 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005f8c:	2303      	movs	r3, #3
 8005f8e:	e039      	b.n	8006004 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d10b      	bne.n	8005fae <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	881a      	ldrh	r2, [r3, #0]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fa2:	b292      	uxth	r2, r2
 8005fa4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	3302      	adds	r3, #2
 8005faa:	61bb      	str	r3, [r7, #24]
 8005fac:	e008      	b.n	8005fc0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	781a      	ldrb	r2, [r3, #0]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	b292      	uxth	r2, r2
 8005fb8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	3301      	adds	r3, #1
 8005fbe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	3b01      	subs	r3, #1
 8005fca:	b29a      	uxth	r2, r3
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d1cb      	bne.n	8005f76 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	9300      	str	r3, [sp, #0]
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	2140      	movs	r1, #64	; 0x40
 8005fe8:	68f8      	ldr	r0, [r7, #12]
 8005fea:	f000 fc56 	bl	800689a <UART_WaitOnFlagUntilTimeout>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d001      	beq.n	8005ff8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	e005      	b.n	8006004 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2220      	movs	r2, #32
 8005ffc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005ffe:	2300      	movs	r3, #0
 8006000:	e000      	b.n	8006004 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006002:	2302      	movs	r3, #2
  }
}
 8006004:	4618      	mov	r0, r3
 8006006:	3720      	adds	r7, #32
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b08a      	sub	sp, #40	; 0x28
 8006010:	af02      	add	r7, sp, #8
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	603b      	str	r3, [r7, #0]
 8006018:	4613      	mov	r3, r2
 800601a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006020:	2b20      	cmp	r3, #32
 8006022:	f040 80bf 	bne.w	80061a4 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d002      	beq.n	8006032 <HAL_UART_Receive+0x26>
 800602c:	88fb      	ldrh	r3, [r7, #6]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d101      	bne.n	8006036 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e0b7      	b.n	80061a6 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800603c:	2b01      	cmp	r3, #1
 800603e:	d101      	bne.n	8006044 <HAL_UART_Receive+0x38>
 8006040:	2302      	movs	r3, #2
 8006042:	e0b0      	b.n	80061a6 <HAL_UART_Receive+0x19a>
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2200      	movs	r2, #0
 8006050:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2222      	movs	r2, #34	; 0x22
 8006058:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2200      	movs	r2, #0
 800605e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006060:	f7fb f91e 	bl	80012a0 <HAL_GetTick>
 8006064:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	88fa      	ldrh	r2, [r7, #6]
 800606a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	88fa      	ldrh	r2, [r7, #6]
 8006072:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800607e:	d10e      	bne.n	800609e <HAL_UART_Receive+0x92>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d105      	bne.n	8006094 <HAL_UART_Receive+0x88>
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800608e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006092:	e02d      	b.n	80060f0 <HAL_UART_Receive+0xe4>
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	22ff      	movs	r2, #255	; 0xff
 8006098:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800609c:	e028      	b.n	80060f0 <HAL_UART_Receive+0xe4>
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d10d      	bne.n	80060c2 <HAL_UART_Receive+0xb6>
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d104      	bne.n	80060b8 <HAL_UART_Receive+0xac>
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	22ff      	movs	r2, #255	; 0xff
 80060b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80060b6:	e01b      	b.n	80060f0 <HAL_UART_Receive+0xe4>
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	227f      	movs	r2, #127	; 0x7f
 80060bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80060c0:	e016      	b.n	80060f0 <HAL_UART_Receive+0xe4>
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060ca:	d10d      	bne.n	80060e8 <HAL_UART_Receive+0xdc>
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	691b      	ldr	r3, [r3, #16]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d104      	bne.n	80060de <HAL_UART_Receive+0xd2>
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	227f      	movs	r2, #127	; 0x7f
 80060d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80060dc:	e008      	b.n	80060f0 <HAL_UART_Receive+0xe4>
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	223f      	movs	r2, #63	; 0x3f
 80060e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80060e6:	e003      	b.n	80060f0 <HAL_UART_Receive+0xe4>
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80060f6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006100:	d108      	bne.n	8006114 <HAL_UART_Receive+0x108>
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d104      	bne.n	8006114 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800610a:	2300      	movs	r3, #0
 800610c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	61bb      	str	r3, [r7, #24]
 8006112:	e003      	b.n	800611c <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006118:	2300      	movs	r3, #0
 800611a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2200      	movs	r2, #0
 8006120:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006124:	e033      	b.n	800618e <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	9300      	str	r3, [sp, #0]
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	2200      	movs	r2, #0
 800612e:	2120      	movs	r1, #32
 8006130:	68f8      	ldr	r0, [r7, #12]
 8006132:	f000 fbb2 	bl	800689a <UART_WaitOnFlagUntilTimeout>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d001      	beq.n	8006140 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 800613c:	2303      	movs	r3, #3
 800613e:	e032      	b.n	80061a6 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d10c      	bne.n	8006160 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800614c:	b29a      	uxth	r2, r3
 800614e:	8a7b      	ldrh	r3, [r7, #18]
 8006150:	4013      	ands	r3, r2
 8006152:	b29a      	uxth	r2, r3
 8006154:	69bb      	ldr	r3, [r7, #24]
 8006156:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006158:	69bb      	ldr	r3, [r7, #24]
 800615a:	3302      	adds	r3, #2
 800615c:	61bb      	str	r3, [r7, #24]
 800615e:	e00d      	b.n	800617c <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006166:	b29b      	uxth	r3, r3
 8006168:	b2da      	uxtb	r2, r3
 800616a:	8a7b      	ldrh	r3, [r7, #18]
 800616c:	b2db      	uxtb	r3, r3
 800616e:	4013      	ands	r3, r2
 8006170:	b2da      	uxtb	r2, r3
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006176:	69fb      	ldr	r3, [r7, #28]
 8006178:	3301      	adds	r3, #1
 800617a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006182:	b29b      	uxth	r3, r3
 8006184:	3b01      	subs	r3, #1
 8006186:	b29a      	uxth	r2, r3
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006194:	b29b      	uxth	r3, r3
 8006196:	2b00      	cmp	r3, #0
 8006198:	d1c5      	bne.n	8006126 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2220      	movs	r2, #32
 800619e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80061a0:	2300      	movs	r3, #0
 80061a2:	e000      	b.n	80061a6 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80061a4:	2302      	movs	r3, #2
  }
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3720      	adds	r7, #32
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
	...

080061b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061b0:	b5b0      	push	{r4, r5, r7, lr}
 80061b2:	b088      	sub	sp, #32
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80061b8:	2300      	movs	r3, #0
 80061ba:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	689a      	ldr	r2, [r3, #8]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	691b      	ldr	r3, [r3, #16]
 80061c4:	431a      	orrs	r2, r3
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	695b      	ldr	r3, [r3, #20]
 80061ca:	431a      	orrs	r2, r3
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	69db      	ldr	r3, [r3, #28]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	4bad      	ldr	r3, [pc, #692]	; (8006490 <UART_SetConfig+0x2e0>)
 80061dc:	4013      	ands	r3, r2
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	6812      	ldr	r2, [r2, #0]
 80061e2:	69f9      	ldr	r1, [r7, #28]
 80061e4:	430b      	orrs	r3, r1
 80061e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	68da      	ldr	r2, [r3, #12]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	430a      	orrs	r2, r1
 80061fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	699b      	ldr	r3, [r3, #24]
 8006202:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4aa2      	ldr	r2, [pc, #648]	; (8006494 <UART_SetConfig+0x2e4>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d004      	beq.n	8006218 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6a1b      	ldr	r3, [r3, #32]
 8006212:	69fa      	ldr	r2, [r7, #28]
 8006214:	4313      	orrs	r3, r2
 8006216:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	69fa      	ldr	r2, [r7, #28]
 8006228:	430a      	orrs	r2, r1
 800622a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a99      	ldr	r2, [pc, #612]	; (8006498 <UART_SetConfig+0x2e8>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d121      	bne.n	800627a <UART_SetConfig+0xca>
 8006236:	4b99      	ldr	r3, [pc, #612]	; (800649c <UART_SetConfig+0x2ec>)
 8006238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800623c:	f003 0303 	and.w	r3, r3, #3
 8006240:	2b03      	cmp	r3, #3
 8006242:	d817      	bhi.n	8006274 <UART_SetConfig+0xc4>
 8006244:	a201      	add	r2, pc, #4	; (adr r2, 800624c <UART_SetConfig+0x9c>)
 8006246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800624a:	bf00      	nop
 800624c:	0800625d 	.word	0x0800625d
 8006250:	08006269 	.word	0x08006269
 8006254:	08006263 	.word	0x08006263
 8006258:	0800626f 	.word	0x0800626f
 800625c:	2301      	movs	r3, #1
 800625e:	76fb      	strb	r3, [r7, #27]
 8006260:	e0e7      	b.n	8006432 <UART_SetConfig+0x282>
 8006262:	2302      	movs	r3, #2
 8006264:	76fb      	strb	r3, [r7, #27]
 8006266:	e0e4      	b.n	8006432 <UART_SetConfig+0x282>
 8006268:	2304      	movs	r3, #4
 800626a:	76fb      	strb	r3, [r7, #27]
 800626c:	e0e1      	b.n	8006432 <UART_SetConfig+0x282>
 800626e:	2308      	movs	r3, #8
 8006270:	76fb      	strb	r3, [r7, #27]
 8006272:	e0de      	b.n	8006432 <UART_SetConfig+0x282>
 8006274:	2310      	movs	r3, #16
 8006276:	76fb      	strb	r3, [r7, #27]
 8006278:	e0db      	b.n	8006432 <UART_SetConfig+0x282>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a88      	ldr	r2, [pc, #544]	; (80064a0 <UART_SetConfig+0x2f0>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d132      	bne.n	80062ea <UART_SetConfig+0x13a>
 8006284:	4b85      	ldr	r3, [pc, #532]	; (800649c <UART_SetConfig+0x2ec>)
 8006286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800628a:	f003 030c 	and.w	r3, r3, #12
 800628e:	2b0c      	cmp	r3, #12
 8006290:	d828      	bhi.n	80062e4 <UART_SetConfig+0x134>
 8006292:	a201      	add	r2, pc, #4	; (adr r2, 8006298 <UART_SetConfig+0xe8>)
 8006294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006298:	080062cd 	.word	0x080062cd
 800629c:	080062e5 	.word	0x080062e5
 80062a0:	080062e5 	.word	0x080062e5
 80062a4:	080062e5 	.word	0x080062e5
 80062a8:	080062d9 	.word	0x080062d9
 80062ac:	080062e5 	.word	0x080062e5
 80062b0:	080062e5 	.word	0x080062e5
 80062b4:	080062e5 	.word	0x080062e5
 80062b8:	080062d3 	.word	0x080062d3
 80062bc:	080062e5 	.word	0x080062e5
 80062c0:	080062e5 	.word	0x080062e5
 80062c4:	080062e5 	.word	0x080062e5
 80062c8:	080062df 	.word	0x080062df
 80062cc:	2300      	movs	r3, #0
 80062ce:	76fb      	strb	r3, [r7, #27]
 80062d0:	e0af      	b.n	8006432 <UART_SetConfig+0x282>
 80062d2:	2302      	movs	r3, #2
 80062d4:	76fb      	strb	r3, [r7, #27]
 80062d6:	e0ac      	b.n	8006432 <UART_SetConfig+0x282>
 80062d8:	2304      	movs	r3, #4
 80062da:	76fb      	strb	r3, [r7, #27]
 80062dc:	e0a9      	b.n	8006432 <UART_SetConfig+0x282>
 80062de:	2308      	movs	r3, #8
 80062e0:	76fb      	strb	r3, [r7, #27]
 80062e2:	e0a6      	b.n	8006432 <UART_SetConfig+0x282>
 80062e4:	2310      	movs	r3, #16
 80062e6:	76fb      	strb	r3, [r7, #27]
 80062e8:	e0a3      	b.n	8006432 <UART_SetConfig+0x282>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a6d      	ldr	r2, [pc, #436]	; (80064a4 <UART_SetConfig+0x2f4>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d120      	bne.n	8006336 <UART_SetConfig+0x186>
 80062f4:	4b69      	ldr	r3, [pc, #420]	; (800649c <UART_SetConfig+0x2ec>)
 80062f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062fa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80062fe:	2b30      	cmp	r3, #48	; 0x30
 8006300:	d013      	beq.n	800632a <UART_SetConfig+0x17a>
 8006302:	2b30      	cmp	r3, #48	; 0x30
 8006304:	d814      	bhi.n	8006330 <UART_SetConfig+0x180>
 8006306:	2b20      	cmp	r3, #32
 8006308:	d009      	beq.n	800631e <UART_SetConfig+0x16e>
 800630a:	2b20      	cmp	r3, #32
 800630c:	d810      	bhi.n	8006330 <UART_SetConfig+0x180>
 800630e:	2b00      	cmp	r3, #0
 8006310:	d002      	beq.n	8006318 <UART_SetConfig+0x168>
 8006312:	2b10      	cmp	r3, #16
 8006314:	d006      	beq.n	8006324 <UART_SetConfig+0x174>
 8006316:	e00b      	b.n	8006330 <UART_SetConfig+0x180>
 8006318:	2300      	movs	r3, #0
 800631a:	76fb      	strb	r3, [r7, #27]
 800631c:	e089      	b.n	8006432 <UART_SetConfig+0x282>
 800631e:	2302      	movs	r3, #2
 8006320:	76fb      	strb	r3, [r7, #27]
 8006322:	e086      	b.n	8006432 <UART_SetConfig+0x282>
 8006324:	2304      	movs	r3, #4
 8006326:	76fb      	strb	r3, [r7, #27]
 8006328:	e083      	b.n	8006432 <UART_SetConfig+0x282>
 800632a:	2308      	movs	r3, #8
 800632c:	76fb      	strb	r3, [r7, #27]
 800632e:	e080      	b.n	8006432 <UART_SetConfig+0x282>
 8006330:	2310      	movs	r3, #16
 8006332:	76fb      	strb	r3, [r7, #27]
 8006334:	e07d      	b.n	8006432 <UART_SetConfig+0x282>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a5b      	ldr	r2, [pc, #364]	; (80064a8 <UART_SetConfig+0x2f8>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d120      	bne.n	8006382 <UART_SetConfig+0x1d2>
 8006340:	4b56      	ldr	r3, [pc, #344]	; (800649c <UART_SetConfig+0x2ec>)
 8006342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006346:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800634a:	2bc0      	cmp	r3, #192	; 0xc0
 800634c:	d013      	beq.n	8006376 <UART_SetConfig+0x1c6>
 800634e:	2bc0      	cmp	r3, #192	; 0xc0
 8006350:	d814      	bhi.n	800637c <UART_SetConfig+0x1cc>
 8006352:	2b80      	cmp	r3, #128	; 0x80
 8006354:	d009      	beq.n	800636a <UART_SetConfig+0x1ba>
 8006356:	2b80      	cmp	r3, #128	; 0x80
 8006358:	d810      	bhi.n	800637c <UART_SetConfig+0x1cc>
 800635a:	2b00      	cmp	r3, #0
 800635c:	d002      	beq.n	8006364 <UART_SetConfig+0x1b4>
 800635e:	2b40      	cmp	r3, #64	; 0x40
 8006360:	d006      	beq.n	8006370 <UART_SetConfig+0x1c0>
 8006362:	e00b      	b.n	800637c <UART_SetConfig+0x1cc>
 8006364:	2300      	movs	r3, #0
 8006366:	76fb      	strb	r3, [r7, #27]
 8006368:	e063      	b.n	8006432 <UART_SetConfig+0x282>
 800636a:	2302      	movs	r3, #2
 800636c:	76fb      	strb	r3, [r7, #27]
 800636e:	e060      	b.n	8006432 <UART_SetConfig+0x282>
 8006370:	2304      	movs	r3, #4
 8006372:	76fb      	strb	r3, [r7, #27]
 8006374:	e05d      	b.n	8006432 <UART_SetConfig+0x282>
 8006376:	2308      	movs	r3, #8
 8006378:	76fb      	strb	r3, [r7, #27]
 800637a:	e05a      	b.n	8006432 <UART_SetConfig+0x282>
 800637c:	2310      	movs	r3, #16
 800637e:	76fb      	strb	r3, [r7, #27]
 8006380:	e057      	b.n	8006432 <UART_SetConfig+0x282>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a49      	ldr	r2, [pc, #292]	; (80064ac <UART_SetConfig+0x2fc>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d125      	bne.n	80063d8 <UART_SetConfig+0x228>
 800638c:	4b43      	ldr	r3, [pc, #268]	; (800649c <UART_SetConfig+0x2ec>)
 800638e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006392:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006396:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800639a:	d017      	beq.n	80063cc <UART_SetConfig+0x21c>
 800639c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063a0:	d817      	bhi.n	80063d2 <UART_SetConfig+0x222>
 80063a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063a6:	d00b      	beq.n	80063c0 <UART_SetConfig+0x210>
 80063a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063ac:	d811      	bhi.n	80063d2 <UART_SetConfig+0x222>
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d003      	beq.n	80063ba <UART_SetConfig+0x20a>
 80063b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063b6:	d006      	beq.n	80063c6 <UART_SetConfig+0x216>
 80063b8:	e00b      	b.n	80063d2 <UART_SetConfig+0x222>
 80063ba:	2300      	movs	r3, #0
 80063bc:	76fb      	strb	r3, [r7, #27]
 80063be:	e038      	b.n	8006432 <UART_SetConfig+0x282>
 80063c0:	2302      	movs	r3, #2
 80063c2:	76fb      	strb	r3, [r7, #27]
 80063c4:	e035      	b.n	8006432 <UART_SetConfig+0x282>
 80063c6:	2304      	movs	r3, #4
 80063c8:	76fb      	strb	r3, [r7, #27]
 80063ca:	e032      	b.n	8006432 <UART_SetConfig+0x282>
 80063cc:	2308      	movs	r3, #8
 80063ce:	76fb      	strb	r3, [r7, #27]
 80063d0:	e02f      	b.n	8006432 <UART_SetConfig+0x282>
 80063d2:	2310      	movs	r3, #16
 80063d4:	76fb      	strb	r3, [r7, #27]
 80063d6:	e02c      	b.n	8006432 <UART_SetConfig+0x282>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a2d      	ldr	r2, [pc, #180]	; (8006494 <UART_SetConfig+0x2e4>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d125      	bne.n	800642e <UART_SetConfig+0x27e>
 80063e2:	4b2e      	ldr	r3, [pc, #184]	; (800649c <UART_SetConfig+0x2ec>)
 80063e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80063ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80063f0:	d017      	beq.n	8006422 <UART_SetConfig+0x272>
 80063f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80063f6:	d817      	bhi.n	8006428 <UART_SetConfig+0x278>
 80063f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063fc:	d00b      	beq.n	8006416 <UART_SetConfig+0x266>
 80063fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006402:	d811      	bhi.n	8006428 <UART_SetConfig+0x278>
 8006404:	2b00      	cmp	r3, #0
 8006406:	d003      	beq.n	8006410 <UART_SetConfig+0x260>
 8006408:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800640c:	d006      	beq.n	800641c <UART_SetConfig+0x26c>
 800640e:	e00b      	b.n	8006428 <UART_SetConfig+0x278>
 8006410:	2300      	movs	r3, #0
 8006412:	76fb      	strb	r3, [r7, #27]
 8006414:	e00d      	b.n	8006432 <UART_SetConfig+0x282>
 8006416:	2302      	movs	r3, #2
 8006418:	76fb      	strb	r3, [r7, #27]
 800641a:	e00a      	b.n	8006432 <UART_SetConfig+0x282>
 800641c:	2304      	movs	r3, #4
 800641e:	76fb      	strb	r3, [r7, #27]
 8006420:	e007      	b.n	8006432 <UART_SetConfig+0x282>
 8006422:	2308      	movs	r3, #8
 8006424:	76fb      	strb	r3, [r7, #27]
 8006426:	e004      	b.n	8006432 <UART_SetConfig+0x282>
 8006428:	2310      	movs	r3, #16
 800642a:	76fb      	strb	r3, [r7, #27]
 800642c:	e001      	b.n	8006432 <UART_SetConfig+0x282>
 800642e:	2310      	movs	r3, #16
 8006430:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a17      	ldr	r2, [pc, #92]	; (8006494 <UART_SetConfig+0x2e4>)
 8006438:	4293      	cmp	r3, r2
 800643a:	f040 8087 	bne.w	800654c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800643e:	7efb      	ldrb	r3, [r7, #27]
 8006440:	2b08      	cmp	r3, #8
 8006442:	d837      	bhi.n	80064b4 <UART_SetConfig+0x304>
 8006444:	a201      	add	r2, pc, #4	; (adr r2, 800644c <UART_SetConfig+0x29c>)
 8006446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800644a:	bf00      	nop
 800644c:	08006471 	.word	0x08006471
 8006450:	080064b5 	.word	0x080064b5
 8006454:	08006479 	.word	0x08006479
 8006458:	080064b5 	.word	0x080064b5
 800645c:	0800647f 	.word	0x0800647f
 8006460:	080064b5 	.word	0x080064b5
 8006464:	080064b5 	.word	0x080064b5
 8006468:	080064b5 	.word	0x080064b5
 800646c:	08006487 	.word	0x08006487
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006470:	f7fd fdde 	bl	8004030 <HAL_RCC_GetPCLK1Freq>
 8006474:	6178      	str	r0, [r7, #20]
        break;
 8006476:	e022      	b.n	80064be <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006478:	4b0d      	ldr	r3, [pc, #52]	; (80064b0 <UART_SetConfig+0x300>)
 800647a:	617b      	str	r3, [r7, #20]
        break;
 800647c:	e01f      	b.n	80064be <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800647e:	f7fd fd3f 	bl	8003f00 <HAL_RCC_GetSysClockFreq>
 8006482:	6178      	str	r0, [r7, #20]
        break;
 8006484:	e01b      	b.n	80064be <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006486:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800648a:	617b      	str	r3, [r7, #20]
        break;
 800648c:	e017      	b.n	80064be <UART_SetConfig+0x30e>
 800648e:	bf00      	nop
 8006490:	efff69f3 	.word	0xefff69f3
 8006494:	40008000 	.word	0x40008000
 8006498:	40013800 	.word	0x40013800
 800649c:	40021000 	.word	0x40021000
 80064a0:	40004400 	.word	0x40004400
 80064a4:	40004800 	.word	0x40004800
 80064a8:	40004c00 	.word	0x40004c00
 80064ac:	40005000 	.word	0x40005000
 80064b0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80064b4:	2300      	movs	r3, #0
 80064b6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	76bb      	strb	r3, [r7, #26]
        break;
 80064bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	f000 80f1 	beq.w	80066a8 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	685a      	ldr	r2, [r3, #4]
 80064ca:	4613      	mov	r3, r2
 80064cc:	005b      	lsls	r3, r3, #1
 80064ce:	4413      	add	r3, r2
 80064d0:	697a      	ldr	r2, [r7, #20]
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d305      	bcc.n	80064e2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80064dc:	697a      	ldr	r2, [r7, #20]
 80064de:	429a      	cmp	r2, r3
 80064e0:	d902      	bls.n	80064e8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	76bb      	strb	r3, [r7, #26]
 80064e6:	e0df      	b.n	80066a8 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	4618      	mov	r0, r3
 80064ec:	f04f 0100 	mov.w	r1, #0
 80064f0:	f04f 0200 	mov.w	r2, #0
 80064f4:	f04f 0300 	mov.w	r3, #0
 80064f8:	020b      	lsls	r3, r1, #8
 80064fa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80064fe:	0202      	lsls	r2, r0, #8
 8006500:	6879      	ldr	r1, [r7, #4]
 8006502:	6849      	ldr	r1, [r1, #4]
 8006504:	0849      	lsrs	r1, r1, #1
 8006506:	4608      	mov	r0, r1
 8006508:	f04f 0100 	mov.w	r1, #0
 800650c:	1814      	adds	r4, r2, r0
 800650e:	eb43 0501 	adc.w	r5, r3, r1
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	461a      	mov	r2, r3
 8006518:	f04f 0300 	mov.w	r3, #0
 800651c:	4620      	mov	r0, r4
 800651e:	4629      	mov	r1, r5
 8006520:	f7f9 fea6 	bl	8000270 <__aeabi_uldivmod>
 8006524:	4602      	mov	r2, r0
 8006526:	460b      	mov	r3, r1
 8006528:	4613      	mov	r3, r2
 800652a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006532:	d308      	bcc.n	8006546 <UART_SetConfig+0x396>
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800653a:	d204      	bcs.n	8006546 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	693a      	ldr	r2, [r7, #16]
 8006542:	60da      	str	r2, [r3, #12]
 8006544:	e0b0      	b.n	80066a8 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	76bb      	strb	r3, [r7, #26]
 800654a:	e0ad      	b.n	80066a8 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	69db      	ldr	r3, [r3, #28]
 8006550:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006554:	d15b      	bne.n	800660e <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8006556:	7efb      	ldrb	r3, [r7, #27]
 8006558:	2b08      	cmp	r3, #8
 800655a:	d828      	bhi.n	80065ae <UART_SetConfig+0x3fe>
 800655c:	a201      	add	r2, pc, #4	; (adr r2, 8006564 <UART_SetConfig+0x3b4>)
 800655e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006562:	bf00      	nop
 8006564:	08006589 	.word	0x08006589
 8006568:	08006591 	.word	0x08006591
 800656c:	08006599 	.word	0x08006599
 8006570:	080065af 	.word	0x080065af
 8006574:	0800659f 	.word	0x0800659f
 8006578:	080065af 	.word	0x080065af
 800657c:	080065af 	.word	0x080065af
 8006580:	080065af 	.word	0x080065af
 8006584:	080065a7 	.word	0x080065a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006588:	f7fd fd52 	bl	8004030 <HAL_RCC_GetPCLK1Freq>
 800658c:	6178      	str	r0, [r7, #20]
        break;
 800658e:	e013      	b.n	80065b8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006590:	f7fd fd64 	bl	800405c <HAL_RCC_GetPCLK2Freq>
 8006594:	6178      	str	r0, [r7, #20]
        break;
 8006596:	e00f      	b.n	80065b8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006598:	4b49      	ldr	r3, [pc, #292]	; (80066c0 <UART_SetConfig+0x510>)
 800659a:	617b      	str	r3, [r7, #20]
        break;
 800659c:	e00c      	b.n	80065b8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800659e:	f7fd fcaf 	bl	8003f00 <HAL_RCC_GetSysClockFreq>
 80065a2:	6178      	str	r0, [r7, #20]
        break;
 80065a4:	e008      	b.n	80065b8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065aa:	617b      	str	r3, [r7, #20]
        break;
 80065ac:	e004      	b.n	80065b8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80065ae:	2300      	movs	r3, #0
 80065b0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	76bb      	strb	r3, [r7, #26]
        break;
 80065b6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d074      	beq.n	80066a8 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	005a      	lsls	r2, r3, #1
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	085b      	lsrs	r3, r3, #1
 80065c8:	441a      	add	r2, r3
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80065d2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	2b0f      	cmp	r3, #15
 80065d8:	d916      	bls.n	8006608 <UART_SetConfig+0x458>
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065e0:	d212      	bcs.n	8006608 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	f023 030f 	bic.w	r3, r3, #15
 80065ea:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	085b      	lsrs	r3, r3, #1
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	f003 0307 	and.w	r3, r3, #7
 80065f6:	b29a      	uxth	r2, r3
 80065f8:	89fb      	ldrh	r3, [r7, #14]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	89fa      	ldrh	r2, [r7, #14]
 8006604:	60da      	str	r2, [r3, #12]
 8006606:	e04f      	b.n	80066a8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	76bb      	strb	r3, [r7, #26]
 800660c:	e04c      	b.n	80066a8 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800660e:	7efb      	ldrb	r3, [r7, #27]
 8006610:	2b08      	cmp	r3, #8
 8006612:	d828      	bhi.n	8006666 <UART_SetConfig+0x4b6>
 8006614:	a201      	add	r2, pc, #4	; (adr r2, 800661c <UART_SetConfig+0x46c>)
 8006616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800661a:	bf00      	nop
 800661c:	08006641 	.word	0x08006641
 8006620:	08006649 	.word	0x08006649
 8006624:	08006651 	.word	0x08006651
 8006628:	08006667 	.word	0x08006667
 800662c:	08006657 	.word	0x08006657
 8006630:	08006667 	.word	0x08006667
 8006634:	08006667 	.word	0x08006667
 8006638:	08006667 	.word	0x08006667
 800663c:	0800665f 	.word	0x0800665f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006640:	f7fd fcf6 	bl	8004030 <HAL_RCC_GetPCLK1Freq>
 8006644:	6178      	str	r0, [r7, #20]
        break;
 8006646:	e013      	b.n	8006670 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006648:	f7fd fd08 	bl	800405c <HAL_RCC_GetPCLK2Freq>
 800664c:	6178      	str	r0, [r7, #20]
        break;
 800664e:	e00f      	b.n	8006670 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006650:	4b1b      	ldr	r3, [pc, #108]	; (80066c0 <UART_SetConfig+0x510>)
 8006652:	617b      	str	r3, [r7, #20]
        break;
 8006654:	e00c      	b.n	8006670 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006656:	f7fd fc53 	bl	8003f00 <HAL_RCC_GetSysClockFreq>
 800665a:	6178      	str	r0, [r7, #20]
        break;
 800665c:	e008      	b.n	8006670 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800665e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006662:	617b      	str	r3, [r7, #20]
        break;
 8006664:	e004      	b.n	8006670 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8006666:	2300      	movs	r3, #0
 8006668:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	76bb      	strb	r3, [r7, #26]
        break;
 800666e:	bf00      	nop
    }

    if (pclk != 0U)
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d018      	beq.n	80066a8 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	085a      	lsrs	r2, r3, #1
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	441a      	add	r2, r3
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	fbb2 f3f3 	udiv	r3, r2, r3
 8006688:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	2b0f      	cmp	r3, #15
 800668e:	d909      	bls.n	80066a4 <UART_SetConfig+0x4f4>
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006696:	d205      	bcs.n	80066a4 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	b29a      	uxth	r2, r3
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	60da      	str	r2, [r3, #12]
 80066a2:	e001      	b.n	80066a8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80066b4:	7ebb      	ldrb	r3, [r7, #26]
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3720      	adds	r7, #32
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bdb0      	pop	{r4, r5, r7, pc}
 80066be:	bf00      	nop
 80066c0:	00f42400 	.word	0x00f42400

080066c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d0:	f003 0301 	and.w	r3, r3, #1
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d00a      	beq.n	80066ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	430a      	orrs	r2, r1
 80066ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f2:	f003 0302 	and.w	r3, r3, #2
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00a      	beq.n	8006710 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	430a      	orrs	r2, r1
 800670e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006714:	f003 0304 	and.w	r3, r3, #4
 8006718:	2b00      	cmp	r3, #0
 800671a:	d00a      	beq.n	8006732 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	430a      	orrs	r2, r1
 8006730:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006736:	f003 0308 	and.w	r3, r3, #8
 800673a:	2b00      	cmp	r3, #0
 800673c:	d00a      	beq.n	8006754 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	430a      	orrs	r2, r1
 8006752:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006758:	f003 0310 	and.w	r3, r3, #16
 800675c:	2b00      	cmp	r3, #0
 800675e:	d00a      	beq.n	8006776 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	430a      	orrs	r2, r1
 8006774:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800677a:	f003 0320 	and.w	r3, r3, #32
 800677e:	2b00      	cmp	r3, #0
 8006780:	d00a      	beq.n	8006798 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	430a      	orrs	r2, r1
 8006796:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800679c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d01a      	beq.n	80067da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	430a      	orrs	r2, r1
 80067b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067c2:	d10a      	bne.n	80067da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	430a      	orrs	r2, r1
 80067d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d00a      	beq.n	80067fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	430a      	orrs	r2, r1
 80067fa:	605a      	str	r2, [r3, #4]
  }
}
 80067fc:	bf00      	nop
 80067fe:	370c      	adds	r7, #12
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b086      	sub	sp, #24
 800680c:	af02      	add	r7, sp, #8
 800680e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006818:	f7fa fd42 	bl	80012a0 <HAL_GetTick>
 800681c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f003 0308 	and.w	r3, r3, #8
 8006828:	2b08      	cmp	r3, #8
 800682a:	d10e      	bne.n	800684a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800682c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006830:	9300      	str	r3, [sp, #0]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2200      	movs	r2, #0
 8006836:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 f82d 	bl	800689a <UART_WaitOnFlagUntilTimeout>
 8006840:	4603      	mov	r3, r0
 8006842:	2b00      	cmp	r3, #0
 8006844:	d001      	beq.n	800684a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006846:	2303      	movs	r3, #3
 8006848:	e023      	b.n	8006892 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f003 0304 	and.w	r3, r3, #4
 8006854:	2b04      	cmp	r3, #4
 8006856:	d10e      	bne.n	8006876 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006858:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800685c:	9300      	str	r3, [sp, #0]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2200      	movs	r2, #0
 8006862:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 f817 	bl	800689a <UART_WaitOnFlagUntilTimeout>
 800686c:	4603      	mov	r3, r0
 800686e:	2b00      	cmp	r3, #0
 8006870:	d001      	beq.n	8006876 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006872:	2303      	movs	r3, #3
 8006874:	e00d      	b.n	8006892 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2220      	movs	r2, #32
 800687a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2220      	movs	r2, #32
 8006880:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	3710      	adds	r7, #16
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}

0800689a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800689a:	b580      	push	{r7, lr}
 800689c:	b09c      	sub	sp, #112	; 0x70
 800689e:	af00      	add	r7, sp, #0
 80068a0:	60f8      	str	r0, [r7, #12]
 80068a2:	60b9      	str	r1, [r7, #8]
 80068a4:	603b      	str	r3, [r7, #0]
 80068a6:	4613      	mov	r3, r2
 80068a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068aa:	e0a5      	b.n	80069f8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068b2:	f000 80a1 	beq.w	80069f8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068b6:	f7fa fcf3 	bl	80012a0 <HAL_GetTick>
 80068ba:	4602      	mov	r2, r0
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	1ad3      	subs	r3, r2, r3
 80068c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d302      	bcc.n	80068cc <UART_WaitOnFlagUntilTimeout+0x32>
 80068c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d13e      	bne.n	800694a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068d4:	e853 3f00 	ldrex	r3, [r3]
 80068d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80068da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80068e0:	667b      	str	r3, [r7, #100]	; 0x64
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	461a      	mov	r2, r3
 80068e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068ec:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80068f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80068f2:	e841 2300 	strex	r3, r2, [r1]
 80068f6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80068f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d1e6      	bne.n	80068cc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	3308      	adds	r3, #8
 8006904:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006908:	e853 3f00 	ldrex	r3, [r3]
 800690c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800690e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006910:	f023 0301 	bic.w	r3, r3, #1
 8006914:	663b      	str	r3, [r7, #96]	; 0x60
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	3308      	adds	r3, #8
 800691c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800691e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006920:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006922:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006924:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006926:	e841 2300 	strex	r3, r2, [r1]
 800692a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800692c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800692e:	2b00      	cmp	r3, #0
 8006930:	d1e5      	bne.n	80068fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2220      	movs	r2, #32
 8006936:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2220      	movs	r2, #32
 800693c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2200      	movs	r2, #0
 8006942:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006946:	2303      	movs	r3, #3
 8006948:	e067      	b.n	8006a1a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f003 0304 	and.w	r3, r3, #4
 8006954:	2b00      	cmp	r3, #0
 8006956:	d04f      	beq.n	80069f8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	69db      	ldr	r3, [r3, #28]
 800695e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006962:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006966:	d147      	bne.n	80069f8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006970:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800697a:	e853 3f00 	ldrex	r3, [r3]
 800697e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006982:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006986:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	461a      	mov	r2, r3
 800698e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006990:	637b      	str	r3, [r7, #52]	; 0x34
 8006992:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006994:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006996:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006998:	e841 2300 	strex	r3, r2, [r1]
 800699c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800699e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d1e6      	bne.n	8006972 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	3308      	adds	r3, #8
 80069aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	e853 3f00 	ldrex	r3, [r3]
 80069b2:	613b      	str	r3, [r7, #16]
   return(result);
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	f023 0301 	bic.w	r3, r3, #1
 80069ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	3308      	adds	r3, #8
 80069c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80069c4:	623a      	str	r2, [r7, #32]
 80069c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c8:	69f9      	ldr	r1, [r7, #28]
 80069ca:	6a3a      	ldr	r2, [r7, #32]
 80069cc:	e841 2300 	strex	r3, r2, [r1]
 80069d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80069d2:	69bb      	ldr	r3, [r7, #24]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d1e5      	bne.n	80069a4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2220      	movs	r2, #32
 80069dc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2220      	movs	r2, #32
 80069e2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2220      	movs	r2, #32
 80069e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80069f4:	2303      	movs	r3, #3
 80069f6:	e010      	b.n	8006a1a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	69da      	ldr	r2, [r3, #28]
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	4013      	ands	r3, r2
 8006a02:	68ba      	ldr	r2, [r7, #8]
 8006a04:	429a      	cmp	r2, r3
 8006a06:	bf0c      	ite	eq
 8006a08:	2301      	moveq	r3, #1
 8006a0a:	2300      	movne	r3, #0
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	461a      	mov	r2, r3
 8006a10:	79fb      	ldrb	r3, [r7, #7]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	f43f af4a 	beq.w	80068ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a18:	2300      	movs	r3, #0
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3770      	adds	r7, #112	; 0x70
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
	...

08006a24 <__errno>:
 8006a24:	4b01      	ldr	r3, [pc, #4]	; (8006a2c <__errno+0x8>)
 8006a26:	6818      	ldr	r0, [r3, #0]
 8006a28:	4770      	bx	lr
 8006a2a:	bf00      	nop
 8006a2c:	2000000c 	.word	0x2000000c

08006a30 <__libc_init_array>:
 8006a30:	b570      	push	{r4, r5, r6, lr}
 8006a32:	4d0d      	ldr	r5, [pc, #52]	; (8006a68 <__libc_init_array+0x38>)
 8006a34:	4c0d      	ldr	r4, [pc, #52]	; (8006a6c <__libc_init_array+0x3c>)
 8006a36:	1b64      	subs	r4, r4, r5
 8006a38:	10a4      	asrs	r4, r4, #2
 8006a3a:	2600      	movs	r6, #0
 8006a3c:	42a6      	cmp	r6, r4
 8006a3e:	d109      	bne.n	8006a54 <__libc_init_array+0x24>
 8006a40:	4d0b      	ldr	r5, [pc, #44]	; (8006a70 <__libc_init_array+0x40>)
 8006a42:	4c0c      	ldr	r4, [pc, #48]	; (8006a74 <__libc_init_array+0x44>)
 8006a44:	f000 ff84 	bl	8007950 <_init>
 8006a48:	1b64      	subs	r4, r4, r5
 8006a4a:	10a4      	asrs	r4, r4, #2
 8006a4c:	2600      	movs	r6, #0
 8006a4e:	42a6      	cmp	r6, r4
 8006a50:	d105      	bne.n	8006a5e <__libc_init_array+0x2e>
 8006a52:	bd70      	pop	{r4, r5, r6, pc}
 8006a54:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a58:	4798      	blx	r3
 8006a5a:	3601      	adds	r6, #1
 8006a5c:	e7ee      	b.n	8006a3c <__libc_init_array+0xc>
 8006a5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a62:	4798      	blx	r3
 8006a64:	3601      	adds	r6, #1
 8006a66:	e7f2      	b.n	8006a4e <__libc_init_array+0x1e>
 8006a68:	08007ae4 	.word	0x08007ae4
 8006a6c:	08007ae4 	.word	0x08007ae4
 8006a70:	08007ae4 	.word	0x08007ae4
 8006a74:	08007ae8 	.word	0x08007ae8

08006a78 <memcpy>:
 8006a78:	440a      	add	r2, r1
 8006a7a:	4291      	cmp	r1, r2
 8006a7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a80:	d100      	bne.n	8006a84 <memcpy+0xc>
 8006a82:	4770      	bx	lr
 8006a84:	b510      	push	{r4, lr}
 8006a86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a8e:	4291      	cmp	r1, r2
 8006a90:	d1f9      	bne.n	8006a86 <memcpy+0xe>
 8006a92:	bd10      	pop	{r4, pc}

08006a94 <memset>:
 8006a94:	4402      	add	r2, r0
 8006a96:	4603      	mov	r3, r0
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d100      	bne.n	8006a9e <memset+0xa>
 8006a9c:	4770      	bx	lr
 8006a9e:	f803 1b01 	strb.w	r1, [r3], #1
 8006aa2:	e7f9      	b.n	8006a98 <memset+0x4>

08006aa4 <iprintf>:
 8006aa4:	b40f      	push	{r0, r1, r2, r3}
 8006aa6:	4b0a      	ldr	r3, [pc, #40]	; (8006ad0 <iprintf+0x2c>)
 8006aa8:	b513      	push	{r0, r1, r4, lr}
 8006aaa:	681c      	ldr	r4, [r3, #0]
 8006aac:	b124      	cbz	r4, 8006ab8 <iprintf+0x14>
 8006aae:	69a3      	ldr	r3, [r4, #24]
 8006ab0:	b913      	cbnz	r3, 8006ab8 <iprintf+0x14>
 8006ab2:	4620      	mov	r0, r4
 8006ab4:	f000 f866 	bl	8006b84 <__sinit>
 8006ab8:	ab05      	add	r3, sp, #20
 8006aba:	9a04      	ldr	r2, [sp, #16]
 8006abc:	68a1      	ldr	r1, [r4, #8]
 8006abe:	9301      	str	r3, [sp, #4]
 8006ac0:	4620      	mov	r0, r4
 8006ac2:	f000 f983 	bl	8006dcc <_vfiprintf_r>
 8006ac6:	b002      	add	sp, #8
 8006ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006acc:	b004      	add	sp, #16
 8006ace:	4770      	bx	lr
 8006ad0:	2000000c 	.word	0x2000000c

08006ad4 <std>:
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	b510      	push	{r4, lr}
 8006ad8:	4604      	mov	r4, r0
 8006ada:	e9c0 3300 	strd	r3, r3, [r0]
 8006ade:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006ae2:	6083      	str	r3, [r0, #8]
 8006ae4:	8181      	strh	r1, [r0, #12]
 8006ae6:	6643      	str	r3, [r0, #100]	; 0x64
 8006ae8:	81c2      	strh	r2, [r0, #14]
 8006aea:	6183      	str	r3, [r0, #24]
 8006aec:	4619      	mov	r1, r3
 8006aee:	2208      	movs	r2, #8
 8006af0:	305c      	adds	r0, #92	; 0x5c
 8006af2:	f7ff ffcf 	bl	8006a94 <memset>
 8006af6:	4b05      	ldr	r3, [pc, #20]	; (8006b0c <std+0x38>)
 8006af8:	6263      	str	r3, [r4, #36]	; 0x24
 8006afa:	4b05      	ldr	r3, [pc, #20]	; (8006b10 <std+0x3c>)
 8006afc:	62a3      	str	r3, [r4, #40]	; 0x28
 8006afe:	4b05      	ldr	r3, [pc, #20]	; (8006b14 <std+0x40>)
 8006b00:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006b02:	4b05      	ldr	r3, [pc, #20]	; (8006b18 <std+0x44>)
 8006b04:	6224      	str	r4, [r4, #32]
 8006b06:	6323      	str	r3, [r4, #48]	; 0x30
 8006b08:	bd10      	pop	{r4, pc}
 8006b0a:	bf00      	nop
 8006b0c:	08007375 	.word	0x08007375
 8006b10:	08007397 	.word	0x08007397
 8006b14:	080073cf 	.word	0x080073cf
 8006b18:	080073f3 	.word	0x080073f3

08006b1c <_cleanup_r>:
 8006b1c:	4901      	ldr	r1, [pc, #4]	; (8006b24 <_cleanup_r+0x8>)
 8006b1e:	f000 b8af 	b.w	8006c80 <_fwalk_reent>
 8006b22:	bf00      	nop
 8006b24:	080076cd 	.word	0x080076cd

08006b28 <__sfmoreglue>:
 8006b28:	b570      	push	{r4, r5, r6, lr}
 8006b2a:	1e4a      	subs	r2, r1, #1
 8006b2c:	2568      	movs	r5, #104	; 0x68
 8006b2e:	4355      	muls	r5, r2
 8006b30:	460e      	mov	r6, r1
 8006b32:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006b36:	f000 f8c5 	bl	8006cc4 <_malloc_r>
 8006b3a:	4604      	mov	r4, r0
 8006b3c:	b140      	cbz	r0, 8006b50 <__sfmoreglue+0x28>
 8006b3e:	2100      	movs	r1, #0
 8006b40:	e9c0 1600 	strd	r1, r6, [r0]
 8006b44:	300c      	adds	r0, #12
 8006b46:	60a0      	str	r0, [r4, #8]
 8006b48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006b4c:	f7ff ffa2 	bl	8006a94 <memset>
 8006b50:	4620      	mov	r0, r4
 8006b52:	bd70      	pop	{r4, r5, r6, pc}

08006b54 <__sfp_lock_acquire>:
 8006b54:	4801      	ldr	r0, [pc, #4]	; (8006b5c <__sfp_lock_acquire+0x8>)
 8006b56:	f000 b8b3 	b.w	8006cc0 <__retarget_lock_acquire_recursive>
 8006b5a:	bf00      	nop
 8006b5c:	20000224 	.word	0x20000224

08006b60 <__sfp_lock_release>:
 8006b60:	4801      	ldr	r0, [pc, #4]	; (8006b68 <__sfp_lock_release+0x8>)
 8006b62:	f000 b8ae 	b.w	8006cc2 <__retarget_lock_release_recursive>
 8006b66:	bf00      	nop
 8006b68:	20000224 	.word	0x20000224

08006b6c <__sinit_lock_acquire>:
 8006b6c:	4801      	ldr	r0, [pc, #4]	; (8006b74 <__sinit_lock_acquire+0x8>)
 8006b6e:	f000 b8a7 	b.w	8006cc0 <__retarget_lock_acquire_recursive>
 8006b72:	bf00      	nop
 8006b74:	2000021f 	.word	0x2000021f

08006b78 <__sinit_lock_release>:
 8006b78:	4801      	ldr	r0, [pc, #4]	; (8006b80 <__sinit_lock_release+0x8>)
 8006b7a:	f000 b8a2 	b.w	8006cc2 <__retarget_lock_release_recursive>
 8006b7e:	bf00      	nop
 8006b80:	2000021f 	.word	0x2000021f

08006b84 <__sinit>:
 8006b84:	b510      	push	{r4, lr}
 8006b86:	4604      	mov	r4, r0
 8006b88:	f7ff fff0 	bl	8006b6c <__sinit_lock_acquire>
 8006b8c:	69a3      	ldr	r3, [r4, #24]
 8006b8e:	b11b      	cbz	r3, 8006b98 <__sinit+0x14>
 8006b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b94:	f7ff bff0 	b.w	8006b78 <__sinit_lock_release>
 8006b98:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006b9c:	6523      	str	r3, [r4, #80]	; 0x50
 8006b9e:	4b13      	ldr	r3, [pc, #76]	; (8006bec <__sinit+0x68>)
 8006ba0:	4a13      	ldr	r2, [pc, #76]	; (8006bf0 <__sinit+0x6c>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	62a2      	str	r2, [r4, #40]	; 0x28
 8006ba6:	42a3      	cmp	r3, r4
 8006ba8:	bf04      	itt	eq
 8006baa:	2301      	moveq	r3, #1
 8006bac:	61a3      	streq	r3, [r4, #24]
 8006bae:	4620      	mov	r0, r4
 8006bb0:	f000 f820 	bl	8006bf4 <__sfp>
 8006bb4:	6060      	str	r0, [r4, #4]
 8006bb6:	4620      	mov	r0, r4
 8006bb8:	f000 f81c 	bl	8006bf4 <__sfp>
 8006bbc:	60a0      	str	r0, [r4, #8]
 8006bbe:	4620      	mov	r0, r4
 8006bc0:	f000 f818 	bl	8006bf4 <__sfp>
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	60e0      	str	r0, [r4, #12]
 8006bc8:	2104      	movs	r1, #4
 8006bca:	6860      	ldr	r0, [r4, #4]
 8006bcc:	f7ff ff82 	bl	8006ad4 <std>
 8006bd0:	68a0      	ldr	r0, [r4, #8]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	2109      	movs	r1, #9
 8006bd6:	f7ff ff7d 	bl	8006ad4 <std>
 8006bda:	68e0      	ldr	r0, [r4, #12]
 8006bdc:	2202      	movs	r2, #2
 8006bde:	2112      	movs	r1, #18
 8006be0:	f7ff ff78 	bl	8006ad4 <std>
 8006be4:	2301      	movs	r3, #1
 8006be6:	61a3      	str	r3, [r4, #24]
 8006be8:	e7d2      	b.n	8006b90 <__sinit+0xc>
 8006bea:	bf00      	nop
 8006bec:	08007a44 	.word	0x08007a44
 8006bf0:	08006b1d 	.word	0x08006b1d

08006bf4 <__sfp>:
 8006bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bf6:	4607      	mov	r7, r0
 8006bf8:	f7ff ffac 	bl	8006b54 <__sfp_lock_acquire>
 8006bfc:	4b1e      	ldr	r3, [pc, #120]	; (8006c78 <__sfp+0x84>)
 8006bfe:	681e      	ldr	r6, [r3, #0]
 8006c00:	69b3      	ldr	r3, [r6, #24]
 8006c02:	b913      	cbnz	r3, 8006c0a <__sfp+0x16>
 8006c04:	4630      	mov	r0, r6
 8006c06:	f7ff ffbd 	bl	8006b84 <__sinit>
 8006c0a:	3648      	adds	r6, #72	; 0x48
 8006c0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006c10:	3b01      	subs	r3, #1
 8006c12:	d503      	bpl.n	8006c1c <__sfp+0x28>
 8006c14:	6833      	ldr	r3, [r6, #0]
 8006c16:	b30b      	cbz	r3, 8006c5c <__sfp+0x68>
 8006c18:	6836      	ldr	r6, [r6, #0]
 8006c1a:	e7f7      	b.n	8006c0c <__sfp+0x18>
 8006c1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006c20:	b9d5      	cbnz	r5, 8006c58 <__sfp+0x64>
 8006c22:	4b16      	ldr	r3, [pc, #88]	; (8006c7c <__sfp+0x88>)
 8006c24:	60e3      	str	r3, [r4, #12]
 8006c26:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006c2a:	6665      	str	r5, [r4, #100]	; 0x64
 8006c2c:	f000 f847 	bl	8006cbe <__retarget_lock_init_recursive>
 8006c30:	f7ff ff96 	bl	8006b60 <__sfp_lock_release>
 8006c34:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006c38:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006c3c:	6025      	str	r5, [r4, #0]
 8006c3e:	61a5      	str	r5, [r4, #24]
 8006c40:	2208      	movs	r2, #8
 8006c42:	4629      	mov	r1, r5
 8006c44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006c48:	f7ff ff24 	bl	8006a94 <memset>
 8006c4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006c50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006c54:	4620      	mov	r0, r4
 8006c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c58:	3468      	adds	r4, #104	; 0x68
 8006c5a:	e7d9      	b.n	8006c10 <__sfp+0x1c>
 8006c5c:	2104      	movs	r1, #4
 8006c5e:	4638      	mov	r0, r7
 8006c60:	f7ff ff62 	bl	8006b28 <__sfmoreglue>
 8006c64:	4604      	mov	r4, r0
 8006c66:	6030      	str	r0, [r6, #0]
 8006c68:	2800      	cmp	r0, #0
 8006c6a:	d1d5      	bne.n	8006c18 <__sfp+0x24>
 8006c6c:	f7ff ff78 	bl	8006b60 <__sfp_lock_release>
 8006c70:	230c      	movs	r3, #12
 8006c72:	603b      	str	r3, [r7, #0]
 8006c74:	e7ee      	b.n	8006c54 <__sfp+0x60>
 8006c76:	bf00      	nop
 8006c78:	08007a44 	.word	0x08007a44
 8006c7c:	ffff0001 	.word	0xffff0001

08006c80 <_fwalk_reent>:
 8006c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c84:	4606      	mov	r6, r0
 8006c86:	4688      	mov	r8, r1
 8006c88:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006c8c:	2700      	movs	r7, #0
 8006c8e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c92:	f1b9 0901 	subs.w	r9, r9, #1
 8006c96:	d505      	bpl.n	8006ca4 <_fwalk_reent+0x24>
 8006c98:	6824      	ldr	r4, [r4, #0]
 8006c9a:	2c00      	cmp	r4, #0
 8006c9c:	d1f7      	bne.n	8006c8e <_fwalk_reent+0xe>
 8006c9e:	4638      	mov	r0, r7
 8006ca0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ca4:	89ab      	ldrh	r3, [r5, #12]
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d907      	bls.n	8006cba <_fwalk_reent+0x3a>
 8006caa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006cae:	3301      	adds	r3, #1
 8006cb0:	d003      	beq.n	8006cba <_fwalk_reent+0x3a>
 8006cb2:	4629      	mov	r1, r5
 8006cb4:	4630      	mov	r0, r6
 8006cb6:	47c0      	blx	r8
 8006cb8:	4307      	orrs	r7, r0
 8006cba:	3568      	adds	r5, #104	; 0x68
 8006cbc:	e7e9      	b.n	8006c92 <_fwalk_reent+0x12>

08006cbe <__retarget_lock_init_recursive>:
 8006cbe:	4770      	bx	lr

08006cc0 <__retarget_lock_acquire_recursive>:
 8006cc0:	4770      	bx	lr

08006cc2 <__retarget_lock_release_recursive>:
 8006cc2:	4770      	bx	lr

08006cc4 <_malloc_r>:
 8006cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cc6:	1ccd      	adds	r5, r1, #3
 8006cc8:	f025 0503 	bic.w	r5, r5, #3
 8006ccc:	3508      	adds	r5, #8
 8006cce:	2d0c      	cmp	r5, #12
 8006cd0:	bf38      	it	cc
 8006cd2:	250c      	movcc	r5, #12
 8006cd4:	2d00      	cmp	r5, #0
 8006cd6:	4606      	mov	r6, r0
 8006cd8:	db01      	blt.n	8006cde <_malloc_r+0x1a>
 8006cda:	42a9      	cmp	r1, r5
 8006cdc:	d903      	bls.n	8006ce6 <_malloc_r+0x22>
 8006cde:	230c      	movs	r3, #12
 8006ce0:	6033      	str	r3, [r6, #0]
 8006ce2:	2000      	movs	r0, #0
 8006ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ce6:	f000 fda3 	bl	8007830 <__malloc_lock>
 8006cea:	4921      	ldr	r1, [pc, #132]	; (8006d70 <_malloc_r+0xac>)
 8006cec:	680a      	ldr	r2, [r1, #0]
 8006cee:	4614      	mov	r4, r2
 8006cf0:	b99c      	cbnz	r4, 8006d1a <_malloc_r+0x56>
 8006cf2:	4f20      	ldr	r7, [pc, #128]	; (8006d74 <_malloc_r+0xb0>)
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	b923      	cbnz	r3, 8006d02 <_malloc_r+0x3e>
 8006cf8:	4621      	mov	r1, r4
 8006cfa:	4630      	mov	r0, r6
 8006cfc:	f000 fb2a 	bl	8007354 <_sbrk_r>
 8006d00:	6038      	str	r0, [r7, #0]
 8006d02:	4629      	mov	r1, r5
 8006d04:	4630      	mov	r0, r6
 8006d06:	f000 fb25 	bl	8007354 <_sbrk_r>
 8006d0a:	1c43      	adds	r3, r0, #1
 8006d0c:	d123      	bne.n	8006d56 <_malloc_r+0x92>
 8006d0e:	230c      	movs	r3, #12
 8006d10:	6033      	str	r3, [r6, #0]
 8006d12:	4630      	mov	r0, r6
 8006d14:	f000 fd92 	bl	800783c <__malloc_unlock>
 8006d18:	e7e3      	b.n	8006ce2 <_malloc_r+0x1e>
 8006d1a:	6823      	ldr	r3, [r4, #0]
 8006d1c:	1b5b      	subs	r3, r3, r5
 8006d1e:	d417      	bmi.n	8006d50 <_malloc_r+0x8c>
 8006d20:	2b0b      	cmp	r3, #11
 8006d22:	d903      	bls.n	8006d2c <_malloc_r+0x68>
 8006d24:	6023      	str	r3, [r4, #0]
 8006d26:	441c      	add	r4, r3
 8006d28:	6025      	str	r5, [r4, #0]
 8006d2a:	e004      	b.n	8006d36 <_malloc_r+0x72>
 8006d2c:	6863      	ldr	r3, [r4, #4]
 8006d2e:	42a2      	cmp	r2, r4
 8006d30:	bf0c      	ite	eq
 8006d32:	600b      	streq	r3, [r1, #0]
 8006d34:	6053      	strne	r3, [r2, #4]
 8006d36:	4630      	mov	r0, r6
 8006d38:	f000 fd80 	bl	800783c <__malloc_unlock>
 8006d3c:	f104 000b 	add.w	r0, r4, #11
 8006d40:	1d23      	adds	r3, r4, #4
 8006d42:	f020 0007 	bic.w	r0, r0, #7
 8006d46:	1ac2      	subs	r2, r0, r3
 8006d48:	d0cc      	beq.n	8006ce4 <_malloc_r+0x20>
 8006d4a:	1a1b      	subs	r3, r3, r0
 8006d4c:	50a3      	str	r3, [r4, r2]
 8006d4e:	e7c9      	b.n	8006ce4 <_malloc_r+0x20>
 8006d50:	4622      	mov	r2, r4
 8006d52:	6864      	ldr	r4, [r4, #4]
 8006d54:	e7cc      	b.n	8006cf0 <_malloc_r+0x2c>
 8006d56:	1cc4      	adds	r4, r0, #3
 8006d58:	f024 0403 	bic.w	r4, r4, #3
 8006d5c:	42a0      	cmp	r0, r4
 8006d5e:	d0e3      	beq.n	8006d28 <_malloc_r+0x64>
 8006d60:	1a21      	subs	r1, r4, r0
 8006d62:	4630      	mov	r0, r6
 8006d64:	f000 faf6 	bl	8007354 <_sbrk_r>
 8006d68:	3001      	adds	r0, #1
 8006d6a:	d1dd      	bne.n	8006d28 <_malloc_r+0x64>
 8006d6c:	e7cf      	b.n	8006d0e <_malloc_r+0x4a>
 8006d6e:	bf00      	nop
 8006d70:	20000090 	.word	0x20000090
 8006d74:	20000094 	.word	0x20000094

08006d78 <__sfputc_r>:
 8006d78:	6893      	ldr	r3, [r2, #8]
 8006d7a:	3b01      	subs	r3, #1
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	b410      	push	{r4}
 8006d80:	6093      	str	r3, [r2, #8]
 8006d82:	da08      	bge.n	8006d96 <__sfputc_r+0x1e>
 8006d84:	6994      	ldr	r4, [r2, #24]
 8006d86:	42a3      	cmp	r3, r4
 8006d88:	db01      	blt.n	8006d8e <__sfputc_r+0x16>
 8006d8a:	290a      	cmp	r1, #10
 8006d8c:	d103      	bne.n	8006d96 <__sfputc_r+0x1e>
 8006d8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d92:	f000 bb33 	b.w	80073fc <__swbuf_r>
 8006d96:	6813      	ldr	r3, [r2, #0]
 8006d98:	1c58      	adds	r0, r3, #1
 8006d9a:	6010      	str	r0, [r2, #0]
 8006d9c:	7019      	strb	r1, [r3, #0]
 8006d9e:	4608      	mov	r0, r1
 8006da0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006da4:	4770      	bx	lr

08006da6 <__sfputs_r>:
 8006da6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006da8:	4606      	mov	r6, r0
 8006daa:	460f      	mov	r7, r1
 8006dac:	4614      	mov	r4, r2
 8006dae:	18d5      	adds	r5, r2, r3
 8006db0:	42ac      	cmp	r4, r5
 8006db2:	d101      	bne.n	8006db8 <__sfputs_r+0x12>
 8006db4:	2000      	movs	r0, #0
 8006db6:	e007      	b.n	8006dc8 <__sfputs_r+0x22>
 8006db8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dbc:	463a      	mov	r2, r7
 8006dbe:	4630      	mov	r0, r6
 8006dc0:	f7ff ffda 	bl	8006d78 <__sfputc_r>
 8006dc4:	1c43      	adds	r3, r0, #1
 8006dc6:	d1f3      	bne.n	8006db0 <__sfputs_r+0xa>
 8006dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006dcc <_vfiprintf_r>:
 8006dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dd0:	460d      	mov	r5, r1
 8006dd2:	b09d      	sub	sp, #116	; 0x74
 8006dd4:	4614      	mov	r4, r2
 8006dd6:	4698      	mov	r8, r3
 8006dd8:	4606      	mov	r6, r0
 8006dda:	b118      	cbz	r0, 8006de4 <_vfiprintf_r+0x18>
 8006ddc:	6983      	ldr	r3, [r0, #24]
 8006dde:	b90b      	cbnz	r3, 8006de4 <_vfiprintf_r+0x18>
 8006de0:	f7ff fed0 	bl	8006b84 <__sinit>
 8006de4:	4b89      	ldr	r3, [pc, #548]	; (800700c <_vfiprintf_r+0x240>)
 8006de6:	429d      	cmp	r5, r3
 8006de8:	d11b      	bne.n	8006e22 <_vfiprintf_r+0x56>
 8006dea:	6875      	ldr	r5, [r6, #4]
 8006dec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006dee:	07d9      	lsls	r1, r3, #31
 8006df0:	d405      	bmi.n	8006dfe <_vfiprintf_r+0x32>
 8006df2:	89ab      	ldrh	r3, [r5, #12]
 8006df4:	059a      	lsls	r2, r3, #22
 8006df6:	d402      	bmi.n	8006dfe <_vfiprintf_r+0x32>
 8006df8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006dfa:	f7ff ff61 	bl	8006cc0 <__retarget_lock_acquire_recursive>
 8006dfe:	89ab      	ldrh	r3, [r5, #12]
 8006e00:	071b      	lsls	r3, r3, #28
 8006e02:	d501      	bpl.n	8006e08 <_vfiprintf_r+0x3c>
 8006e04:	692b      	ldr	r3, [r5, #16]
 8006e06:	b9eb      	cbnz	r3, 8006e44 <_vfiprintf_r+0x78>
 8006e08:	4629      	mov	r1, r5
 8006e0a:	4630      	mov	r0, r6
 8006e0c:	f000 fb5a 	bl	80074c4 <__swsetup_r>
 8006e10:	b1c0      	cbz	r0, 8006e44 <_vfiprintf_r+0x78>
 8006e12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e14:	07dc      	lsls	r4, r3, #31
 8006e16:	d50e      	bpl.n	8006e36 <_vfiprintf_r+0x6a>
 8006e18:	f04f 30ff 	mov.w	r0, #4294967295
 8006e1c:	b01d      	add	sp, #116	; 0x74
 8006e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e22:	4b7b      	ldr	r3, [pc, #492]	; (8007010 <_vfiprintf_r+0x244>)
 8006e24:	429d      	cmp	r5, r3
 8006e26:	d101      	bne.n	8006e2c <_vfiprintf_r+0x60>
 8006e28:	68b5      	ldr	r5, [r6, #8]
 8006e2a:	e7df      	b.n	8006dec <_vfiprintf_r+0x20>
 8006e2c:	4b79      	ldr	r3, [pc, #484]	; (8007014 <_vfiprintf_r+0x248>)
 8006e2e:	429d      	cmp	r5, r3
 8006e30:	bf08      	it	eq
 8006e32:	68f5      	ldreq	r5, [r6, #12]
 8006e34:	e7da      	b.n	8006dec <_vfiprintf_r+0x20>
 8006e36:	89ab      	ldrh	r3, [r5, #12]
 8006e38:	0598      	lsls	r0, r3, #22
 8006e3a:	d4ed      	bmi.n	8006e18 <_vfiprintf_r+0x4c>
 8006e3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e3e:	f7ff ff40 	bl	8006cc2 <__retarget_lock_release_recursive>
 8006e42:	e7e9      	b.n	8006e18 <_vfiprintf_r+0x4c>
 8006e44:	2300      	movs	r3, #0
 8006e46:	9309      	str	r3, [sp, #36]	; 0x24
 8006e48:	2320      	movs	r3, #32
 8006e4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e52:	2330      	movs	r3, #48	; 0x30
 8006e54:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007018 <_vfiprintf_r+0x24c>
 8006e58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e5c:	f04f 0901 	mov.w	r9, #1
 8006e60:	4623      	mov	r3, r4
 8006e62:	469a      	mov	sl, r3
 8006e64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e68:	b10a      	cbz	r2, 8006e6e <_vfiprintf_r+0xa2>
 8006e6a:	2a25      	cmp	r2, #37	; 0x25
 8006e6c:	d1f9      	bne.n	8006e62 <_vfiprintf_r+0x96>
 8006e6e:	ebba 0b04 	subs.w	fp, sl, r4
 8006e72:	d00b      	beq.n	8006e8c <_vfiprintf_r+0xc0>
 8006e74:	465b      	mov	r3, fp
 8006e76:	4622      	mov	r2, r4
 8006e78:	4629      	mov	r1, r5
 8006e7a:	4630      	mov	r0, r6
 8006e7c:	f7ff ff93 	bl	8006da6 <__sfputs_r>
 8006e80:	3001      	adds	r0, #1
 8006e82:	f000 80aa 	beq.w	8006fda <_vfiprintf_r+0x20e>
 8006e86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e88:	445a      	add	r2, fp
 8006e8a:	9209      	str	r2, [sp, #36]	; 0x24
 8006e8c:	f89a 3000 	ldrb.w	r3, [sl]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	f000 80a2 	beq.w	8006fda <_vfiprintf_r+0x20e>
 8006e96:	2300      	movs	r3, #0
 8006e98:	f04f 32ff 	mov.w	r2, #4294967295
 8006e9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ea0:	f10a 0a01 	add.w	sl, sl, #1
 8006ea4:	9304      	str	r3, [sp, #16]
 8006ea6:	9307      	str	r3, [sp, #28]
 8006ea8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006eac:	931a      	str	r3, [sp, #104]	; 0x68
 8006eae:	4654      	mov	r4, sl
 8006eb0:	2205      	movs	r2, #5
 8006eb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006eb6:	4858      	ldr	r0, [pc, #352]	; (8007018 <_vfiprintf_r+0x24c>)
 8006eb8:	f7f9 f98a 	bl	80001d0 <memchr>
 8006ebc:	9a04      	ldr	r2, [sp, #16]
 8006ebe:	b9d8      	cbnz	r0, 8006ef8 <_vfiprintf_r+0x12c>
 8006ec0:	06d1      	lsls	r1, r2, #27
 8006ec2:	bf44      	itt	mi
 8006ec4:	2320      	movmi	r3, #32
 8006ec6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006eca:	0713      	lsls	r3, r2, #28
 8006ecc:	bf44      	itt	mi
 8006ece:	232b      	movmi	r3, #43	; 0x2b
 8006ed0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ed4:	f89a 3000 	ldrb.w	r3, [sl]
 8006ed8:	2b2a      	cmp	r3, #42	; 0x2a
 8006eda:	d015      	beq.n	8006f08 <_vfiprintf_r+0x13c>
 8006edc:	9a07      	ldr	r2, [sp, #28]
 8006ede:	4654      	mov	r4, sl
 8006ee0:	2000      	movs	r0, #0
 8006ee2:	f04f 0c0a 	mov.w	ip, #10
 8006ee6:	4621      	mov	r1, r4
 8006ee8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006eec:	3b30      	subs	r3, #48	; 0x30
 8006eee:	2b09      	cmp	r3, #9
 8006ef0:	d94e      	bls.n	8006f90 <_vfiprintf_r+0x1c4>
 8006ef2:	b1b0      	cbz	r0, 8006f22 <_vfiprintf_r+0x156>
 8006ef4:	9207      	str	r2, [sp, #28]
 8006ef6:	e014      	b.n	8006f22 <_vfiprintf_r+0x156>
 8006ef8:	eba0 0308 	sub.w	r3, r0, r8
 8006efc:	fa09 f303 	lsl.w	r3, r9, r3
 8006f00:	4313      	orrs	r3, r2
 8006f02:	9304      	str	r3, [sp, #16]
 8006f04:	46a2      	mov	sl, r4
 8006f06:	e7d2      	b.n	8006eae <_vfiprintf_r+0xe2>
 8006f08:	9b03      	ldr	r3, [sp, #12]
 8006f0a:	1d19      	adds	r1, r3, #4
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	9103      	str	r1, [sp, #12]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	bfbb      	ittet	lt
 8006f14:	425b      	neglt	r3, r3
 8006f16:	f042 0202 	orrlt.w	r2, r2, #2
 8006f1a:	9307      	strge	r3, [sp, #28]
 8006f1c:	9307      	strlt	r3, [sp, #28]
 8006f1e:	bfb8      	it	lt
 8006f20:	9204      	strlt	r2, [sp, #16]
 8006f22:	7823      	ldrb	r3, [r4, #0]
 8006f24:	2b2e      	cmp	r3, #46	; 0x2e
 8006f26:	d10c      	bne.n	8006f42 <_vfiprintf_r+0x176>
 8006f28:	7863      	ldrb	r3, [r4, #1]
 8006f2a:	2b2a      	cmp	r3, #42	; 0x2a
 8006f2c:	d135      	bne.n	8006f9a <_vfiprintf_r+0x1ce>
 8006f2e:	9b03      	ldr	r3, [sp, #12]
 8006f30:	1d1a      	adds	r2, r3, #4
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	9203      	str	r2, [sp, #12]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	bfb8      	it	lt
 8006f3a:	f04f 33ff 	movlt.w	r3, #4294967295
 8006f3e:	3402      	adds	r4, #2
 8006f40:	9305      	str	r3, [sp, #20]
 8006f42:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007028 <_vfiprintf_r+0x25c>
 8006f46:	7821      	ldrb	r1, [r4, #0]
 8006f48:	2203      	movs	r2, #3
 8006f4a:	4650      	mov	r0, sl
 8006f4c:	f7f9 f940 	bl	80001d0 <memchr>
 8006f50:	b140      	cbz	r0, 8006f64 <_vfiprintf_r+0x198>
 8006f52:	2340      	movs	r3, #64	; 0x40
 8006f54:	eba0 000a 	sub.w	r0, r0, sl
 8006f58:	fa03 f000 	lsl.w	r0, r3, r0
 8006f5c:	9b04      	ldr	r3, [sp, #16]
 8006f5e:	4303      	orrs	r3, r0
 8006f60:	3401      	adds	r4, #1
 8006f62:	9304      	str	r3, [sp, #16]
 8006f64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f68:	482c      	ldr	r0, [pc, #176]	; (800701c <_vfiprintf_r+0x250>)
 8006f6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f6e:	2206      	movs	r2, #6
 8006f70:	f7f9 f92e 	bl	80001d0 <memchr>
 8006f74:	2800      	cmp	r0, #0
 8006f76:	d03f      	beq.n	8006ff8 <_vfiprintf_r+0x22c>
 8006f78:	4b29      	ldr	r3, [pc, #164]	; (8007020 <_vfiprintf_r+0x254>)
 8006f7a:	bb1b      	cbnz	r3, 8006fc4 <_vfiprintf_r+0x1f8>
 8006f7c:	9b03      	ldr	r3, [sp, #12]
 8006f7e:	3307      	adds	r3, #7
 8006f80:	f023 0307 	bic.w	r3, r3, #7
 8006f84:	3308      	adds	r3, #8
 8006f86:	9303      	str	r3, [sp, #12]
 8006f88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f8a:	443b      	add	r3, r7
 8006f8c:	9309      	str	r3, [sp, #36]	; 0x24
 8006f8e:	e767      	b.n	8006e60 <_vfiprintf_r+0x94>
 8006f90:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f94:	460c      	mov	r4, r1
 8006f96:	2001      	movs	r0, #1
 8006f98:	e7a5      	b.n	8006ee6 <_vfiprintf_r+0x11a>
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	3401      	adds	r4, #1
 8006f9e:	9305      	str	r3, [sp, #20]
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	f04f 0c0a 	mov.w	ip, #10
 8006fa6:	4620      	mov	r0, r4
 8006fa8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fac:	3a30      	subs	r2, #48	; 0x30
 8006fae:	2a09      	cmp	r2, #9
 8006fb0:	d903      	bls.n	8006fba <_vfiprintf_r+0x1ee>
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d0c5      	beq.n	8006f42 <_vfiprintf_r+0x176>
 8006fb6:	9105      	str	r1, [sp, #20]
 8006fb8:	e7c3      	b.n	8006f42 <_vfiprintf_r+0x176>
 8006fba:	fb0c 2101 	mla	r1, ip, r1, r2
 8006fbe:	4604      	mov	r4, r0
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e7f0      	b.n	8006fa6 <_vfiprintf_r+0x1da>
 8006fc4:	ab03      	add	r3, sp, #12
 8006fc6:	9300      	str	r3, [sp, #0]
 8006fc8:	462a      	mov	r2, r5
 8006fca:	4b16      	ldr	r3, [pc, #88]	; (8007024 <_vfiprintf_r+0x258>)
 8006fcc:	a904      	add	r1, sp, #16
 8006fce:	4630      	mov	r0, r6
 8006fd0:	f3af 8000 	nop.w
 8006fd4:	4607      	mov	r7, r0
 8006fd6:	1c78      	adds	r0, r7, #1
 8006fd8:	d1d6      	bne.n	8006f88 <_vfiprintf_r+0x1bc>
 8006fda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006fdc:	07d9      	lsls	r1, r3, #31
 8006fde:	d405      	bmi.n	8006fec <_vfiprintf_r+0x220>
 8006fe0:	89ab      	ldrh	r3, [r5, #12]
 8006fe2:	059a      	lsls	r2, r3, #22
 8006fe4:	d402      	bmi.n	8006fec <_vfiprintf_r+0x220>
 8006fe6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006fe8:	f7ff fe6b 	bl	8006cc2 <__retarget_lock_release_recursive>
 8006fec:	89ab      	ldrh	r3, [r5, #12]
 8006fee:	065b      	lsls	r3, r3, #25
 8006ff0:	f53f af12 	bmi.w	8006e18 <_vfiprintf_r+0x4c>
 8006ff4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ff6:	e711      	b.n	8006e1c <_vfiprintf_r+0x50>
 8006ff8:	ab03      	add	r3, sp, #12
 8006ffa:	9300      	str	r3, [sp, #0]
 8006ffc:	462a      	mov	r2, r5
 8006ffe:	4b09      	ldr	r3, [pc, #36]	; (8007024 <_vfiprintf_r+0x258>)
 8007000:	a904      	add	r1, sp, #16
 8007002:	4630      	mov	r0, r6
 8007004:	f000 f880 	bl	8007108 <_printf_i>
 8007008:	e7e4      	b.n	8006fd4 <_vfiprintf_r+0x208>
 800700a:	bf00      	nop
 800700c:	08007a68 	.word	0x08007a68
 8007010:	08007a88 	.word	0x08007a88
 8007014:	08007a48 	.word	0x08007a48
 8007018:	08007aa8 	.word	0x08007aa8
 800701c:	08007ab2 	.word	0x08007ab2
 8007020:	00000000 	.word	0x00000000
 8007024:	08006da7 	.word	0x08006da7
 8007028:	08007aae 	.word	0x08007aae

0800702c <_printf_common>:
 800702c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007030:	4616      	mov	r6, r2
 8007032:	4699      	mov	r9, r3
 8007034:	688a      	ldr	r2, [r1, #8]
 8007036:	690b      	ldr	r3, [r1, #16]
 8007038:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800703c:	4293      	cmp	r3, r2
 800703e:	bfb8      	it	lt
 8007040:	4613      	movlt	r3, r2
 8007042:	6033      	str	r3, [r6, #0]
 8007044:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007048:	4607      	mov	r7, r0
 800704a:	460c      	mov	r4, r1
 800704c:	b10a      	cbz	r2, 8007052 <_printf_common+0x26>
 800704e:	3301      	adds	r3, #1
 8007050:	6033      	str	r3, [r6, #0]
 8007052:	6823      	ldr	r3, [r4, #0]
 8007054:	0699      	lsls	r1, r3, #26
 8007056:	bf42      	ittt	mi
 8007058:	6833      	ldrmi	r3, [r6, #0]
 800705a:	3302      	addmi	r3, #2
 800705c:	6033      	strmi	r3, [r6, #0]
 800705e:	6825      	ldr	r5, [r4, #0]
 8007060:	f015 0506 	ands.w	r5, r5, #6
 8007064:	d106      	bne.n	8007074 <_printf_common+0x48>
 8007066:	f104 0a19 	add.w	sl, r4, #25
 800706a:	68e3      	ldr	r3, [r4, #12]
 800706c:	6832      	ldr	r2, [r6, #0]
 800706e:	1a9b      	subs	r3, r3, r2
 8007070:	42ab      	cmp	r3, r5
 8007072:	dc26      	bgt.n	80070c2 <_printf_common+0x96>
 8007074:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007078:	1e13      	subs	r3, r2, #0
 800707a:	6822      	ldr	r2, [r4, #0]
 800707c:	bf18      	it	ne
 800707e:	2301      	movne	r3, #1
 8007080:	0692      	lsls	r2, r2, #26
 8007082:	d42b      	bmi.n	80070dc <_printf_common+0xb0>
 8007084:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007088:	4649      	mov	r1, r9
 800708a:	4638      	mov	r0, r7
 800708c:	47c0      	blx	r8
 800708e:	3001      	adds	r0, #1
 8007090:	d01e      	beq.n	80070d0 <_printf_common+0xa4>
 8007092:	6823      	ldr	r3, [r4, #0]
 8007094:	68e5      	ldr	r5, [r4, #12]
 8007096:	6832      	ldr	r2, [r6, #0]
 8007098:	f003 0306 	and.w	r3, r3, #6
 800709c:	2b04      	cmp	r3, #4
 800709e:	bf08      	it	eq
 80070a0:	1aad      	subeq	r5, r5, r2
 80070a2:	68a3      	ldr	r3, [r4, #8]
 80070a4:	6922      	ldr	r2, [r4, #16]
 80070a6:	bf0c      	ite	eq
 80070a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070ac:	2500      	movne	r5, #0
 80070ae:	4293      	cmp	r3, r2
 80070b0:	bfc4      	itt	gt
 80070b2:	1a9b      	subgt	r3, r3, r2
 80070b4:	18ed      	addgt	r5, r5, r3
 80070b6:	2600      	movs	r6, #0
 80070b8:	341a      	adds	r4, #26
 80070ba:	42b5      	cmp	r5, r6
 80070bc:	d11a      	bne.n	80070f4 <_printf_common+0xc8>
 80070be:	2000      	movs	r0, #0
 80070c0:	e008      	b.n	80070d4 <_printf_common+0xa8>
 80070c2:	2301      	movs	r3, #1
 80070c4:	4652      	mov	r2, sl
 80070c6:	4649      	mov	r1, r9
 80070c8:	4638      	mov	r0, r7
 80070ca:	47c0      	blx	r8
 80070cc:	3001      	adds	r0, #1
 80070ce:	d103      	bne.n	80070d8 <_printf_common+0xac>
 80070d0:	f04f 30ff 	mov.w	r0, #4294967295
 80070d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070d8:	3501      	adds	r5, #1
 80070da:	e7c6      	b.n	800706a <_printf_common+0x3e>
 80070dc:	18e1      	adds	r1, r4, r3
 80070de:	1c5a      	adds	r2, r3, #1
 80070e0:	2030      	movs	r0, #48	; 0x30
 80070e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80070e6:	4422      	add	r2, r4
 80070e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80070ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80070f0:	3302      	adds	r3, #2
 80070f2:	e7c7      	b.n	8007084 <_printf_common+0x58>
 80070f4:	2301      	movs	r3, #1
 80070f6:	4622      	mov	r2, r4
 80070f8:	4649      	mov	r1, r9
 80070fa:	4638      	mov	r0, r7
 80070fc:	47c0      	blx	r8
 80070fe:	3001      	adds	r0, #1
 8007100:	d0e6      	beq.n	80070d0 <_printf_common+0xa4>
 8007102:	3601      	adds	r6, #1
 8007104:	e7d9      	b.n	80070ba <_printf_common+0x8e>
	...

08007108 <_printf_i>:
 8007108:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800710c:	460c      	mov	r4, r1
 800710e:	4691      	mov	r9, r2
 8007110:	7e27      	ldrb	r7, [r4, #24]
 8007112:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007114:	2f78      	cmp	r7, #120	; 0x78
 8007116:	4680      	mov	r8, r0
 8007118:	469a      	mov	sl, r3
 800711a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800711e:	d807      	bhi.n	8007130 <_printf_i+0x28>
 8007120:	2f62      	cmp	r7, #98	; 0x62
 8007122:	d80a      	bhi.n	800713a <_printf_i+0x32>
 8007124:	2f00      	cmp	r7, #0
 8007126:	f000 80d8 	beq.w	80072da <_printf_i+0x1d2>
 800712a:	2f58      	cmp	r7, #88	; 0x58
 800712c:	f000 80a3 	beq.w	8007276 <_printf_i+0x16e>
 8007130:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007134:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007138:	e03a      	b.n	80071b0 <_printf_i+0xa8>
 800713a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800713e:	2b15      	cmp	r3, #21
 8007140:	d8f6      	bhi.n	8007130 <_printf_i+0x28>
 8007142:	a001      	add	r0, pc, #4	; (adr r0, 8007148 <_printf_i+0x40>)
 8007144:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007148:	080071a1 	.word	0x080071a1
 800714c:	080071b5 	.word	0x080071b5
 8007150:	08007131 	.word	0x08007131
 8007154:	08007131 	.word	0x08007131
 8007158:	08007131 	.word	0x08007131
 800715c:	08007131 	.word	0x08007131
 8007160:	080071b5 	.word	0x080071b5
 8007164:	08007131 	.word	0x08007131
 8007168:	08007131 	.word	0x08007131
 800716c:	08007131 	.word	0x08007131
 8007170:	08007131 	.word	0x08007131
 8007174:	080072c1 	.word	0x080072c1
 8007178:	080071e5 	.word	0x080071e5
 800717c:	080072a3 	.word	0x080072a3
 8007180:	08007131 	.word	0x08007131
 8007184:	08007131 	.word	0x08007131
 8007188:	080072e3 	.word	0x080072e3
 800718c:	08007131 	.word	0x08007131
 8007190:	080071e5 	.word	0x080071e5
 8007194:	08007131 	.word	0x08007131
 8007198:	08007131 	.word	0x08007131
 800719c:	080072ab 	.word	0x080072ab
 80071a0:	680b      	ldr	r3, [r1, #0]
 80071a2:	1d1a      	adds	r2, r3, #4
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	600a      	str	r2, [r1, #0]
 80071a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80071ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80071b0:	2301      	movs	r3, #1
 80071b2:	e0a3      	b.n	80072fc <_printf_i+0x1f4>
 80071b4:	6825      	ldr	r5, [r4, #0]
 80071b6:	6808      	ldr	r0, [r1, #0]
 80071b8:	062e      	lsls	r6, r5, #24
 80071ba:	f100 0304 	add.w	r3, r0, #4
 80071be:	d50a      	bpl.n	80071d6 <_printf_i+0xce>
 80071c0:	6805      	ldr	r5, [r0, #0]
 80071c2:	600b      	str	r3, [r1, #0]
 80071c4:	2d00      	cmp	r5, #0
 80071c6:	da03      	bge.n	80071d0 <_printf_i+0xc8>
 80071c8:	232d      	movs	r3, #45	; 0x2d
 80071ca:	426d      	negs	r5, r5
 80071cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071d0:	485e      	ldr	r0, [pc, #376]	; (800734c <_printf_i+0x244>)
 80071d2:	230a      	movs	r3, #10
 80071d4:	e019      	b.n	800720a <_printf_i+0x102>
 80071d6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80071da:	6805      	ldr	r5, [r0, #0]
 80071dc:	600b      	str	r3, [r1, #0]
 80071de:	bf18      	it	ne
 80071e0:	b22d      	sxthne	r5, r5
 80071e2:	e7ef      	b.n	80071c4 <_printf_i+0xbc>
 80071e4:	680b      	ldr	r3, [r1, #0]
 80071e6:	6825      	ldr	r5, [r4, #0]
 80071e8:	1d18      	adds	r0, r3, #4
 80071ea:	6008      	str	r0, [r1, #0]
 80071ec:	0628      	lsls	r0, r5, #24
 80071ee:	d501      	bpl.n	80071f4 <_printf_i+0xec>
 80071f0:	681d      	ldr	r5, [r3, #0]
 80071f2:	e002      	b.n	80071fa <_printf_i+0xf2>
 80071f4:	0669      	lsls	r1, r5, #25
 80071f6:	d5fb      	bpl.n	80071f0 <_printf_i+0xe8>
 80071f8:	881d      	ldrh	r5, [r3, #0]
 80071fa:	4854      	ldr	r0, [pc, #336]	; (800734c <_printf_i+0x244>)
 80071fc:	2f6f      	cmp	r7, #111	; 0x6f
 80071fe:	bf0c      	ite	eq
 8007200:	2308      	moveq	r3, #8
 8007202:	230a      	movne	r3, #10
 8007204:	2100      	movs	r1, #0
 8007206:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800720a:	6866      	ldr	r6, [r4, #4]
 800720c:	60a6      	str	r6, [r4, #8]
 800720e:	2e00      	cmp	r6, #0
 8007210:	bfa2      	ittt	ge
 8007212:	6821      	ldrge	r1, [r4, #0]
 8007214:	f021 0104 	bicge.w	r1, r1, #4
 8007218:	6021      	strge	r1, [r4, #0]
 800721a:	b90d      	cbnz	r5, 8007220 <_printf_i+0x118>
 800721c:	2e00      	cmp	r6, #0
 800721e:	d04d      	beq.n	80072bc <_printf_i+0x1b4>
 8007220:	4616      	mov	r6, r2
 8007222:	fbb5 f1f3 	udiv	r1, r5, r3
 8007226:	fb03 5711 	mls	r7, r3, r1, r5
 800722a:	5dc7      	ldrb	r7, [r0, r7]
 800722c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007230:	462f      	mov	r7, r5
 8007232:	42bb      	cmp	r3, r7
 8007234:	460d      	mov	r5, r1
 8007236:	d9f4      	bls.n	8007222 <_printf_i+0x11a>
 8007238:	2b08      	cmp	r3, #8
 800723a:	d10b      	bne.n	8007254 <_printf_i+0x14c>
 800723c:	6823      	ldr	r3, [r4, #0]
 800723e:	07df      	lsls	r7, r3, #31
 8007240:	d508      	bpl.n	8007254 <_printf_i+0x14c>
 8007242:	6923      	ldr	r3, [r4, #16]
 8007244:	6861      	ldr	r1, [r4, #4]
 8007246:	4299      	cmp	r1, r3
 8007248:	bfde      	ittt	le
 800724a:	2330      	movle	r3, #48	; 0x30
 800724c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007250:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007254:	1b92      	subs	r2, r2, r6
 8007256:	6122      	str	r2, [r4, #16]
 8007258:	f8cd a000 	str.w	sl, [sp]
 800725c:	464b      	mov	r3, r9
 800725e:	aa03      	add	r2, sp, #12
 8007260:	4621      	mov	r1, r4
 8007262:	4640      	mov	r0, r8
 8007264:	f7ff fee2 	bl	800702c <_printf_common>
 8007268:	3001      	adds	r0, #1
 800726a:	d14c      	bne.n	8007306 <_printf_i+0x1fe>
 800726c:	f04f 30ff 	mov.w	r0, #4294967295
 8007270:	b004      	add	sp, #16
 8007272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007276:	4835      	ldr	r0, [pc, #212]	; (800734c <_printf_i+0x244>)
 8007278:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800727c:	6823      	ldr	r3, [r4, #0]
 800727e:	680e      	ldr	r6, [r1, #0]
 8007280:	061f      	lsls	r7, r3, #24
 8007282:	f856 5b04 	ldr.w	r5, [r6], #4
 8007286:	600e      	str	r6, [r1, #0]
 8007288:	d514      	bpl.n	80072b4 <_printf_i+0x1ac>
 800728a:	07d9      	lsls	r1, r3, #31
 800728c:	bf44      	itt	mi
 800728e:	f043 0320 	orrmi.w	r3, r3, #32
 8007292:	6023      	strmi	r3, [r4, #0]
 8007294:	b91d      	cbnz	r5, 800729e <_printf_i+0x196>
 8007296:	6823      	ldr	r3, [r4, #0]
 8007298:	f023 0320 	bic.w	r3, r3, #32
 800729c:	6023      	str	r3, [r4, #0]
 800729e:	2310      	movs	r3, #16
 80072a0:	e7b0      	b.n	8007204 <_printf_i+0xfc>
 80072a2:	6823      	ldr	r3, [r4, #0]
 80072a4:	f043 0320 	orr.w	r3, r3, #32
 80072a8:	6023      	str	r3, [r4, #0]
 80072aa:	2378      	movs	r3, #120	; 0x78
 80072ac:	4828      	ldr	r0, [pc, #160]	; (8007350 <_printf_i+0x248>)
 80072ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80072b2:	e7e3      	b.n	800727c <_printf_i+0x174>
 80072b4:	065e      	lsls	r6, r3, #25
 80072b6:	bf48      	it	mi
 80072b8:	b2ad      	uxthmi	r5, r5
 80072ba:	e7e6      	b.n	800728a <_printf_i+0x182>
 80072bc:	4616      	mov	r6, r2
 80072be:	e7bb      	b.n	8007238 <_printf_i+0x130>
 80072c0:	680b      	ldr	r3, [r1, #0]
 80072c2:	6826      	ldr	r6, [r4, #0]
 80072c4:	6960      	ldr	r0, [r4, #20]
 80072c6:	1d1d      	adds	r5, r3, #4
 80072c8:	600d      	str	r5, [r1, #0]
 80072ca:	0635      	lsls	r5, r6, #24
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	d501      	bpl.n	80072d4 <_printf_i+0x1cc>
 80072d0:	6018      	str	r0, [r3, #0]
 80072d2:	e002      	b.n	80072da <_printf_i+0x1d2>
 80072d4:	0671      	lsls	r1, r6, #25
 80072d6:	d5fb      	bpl.n	80072d0 <_printf_i+0x1c8>
 80072d8:	8018      	strh	r0, [r3, #0]
 80072da:	2300      	movs	r3, #0
 80072dc:	6123      	str	r3, [r4, #16]
 80072de:	4616      	mov	r6, r2
 80072e0:	e7ba      	b.n	8007258 <_printf_i+0x150>
 80072e2:	680b      	ldr	r3, [r1, #0]
 80072e4:	1d1a      	adds	r2, r3, #4
 80072e6:	600a      	str	r2, [r1, #0]
 80072e8:	681e      	ldr	r6, [r3, #0]
 80072ea:	6862      	ldr	r2, [r4, #4]
 80072ec:	2100      	movs	r1, #0
 80072ee:	4630      	mov	r0, r6
 80072f0:	f7f8 ff6e 	bl	80001d0 <memchr>
 80072f4:	b108      	cbz	r0, 80072fa <_printf_i+0x1f2>
 80072f6:	1b80      	subs	r0, r0, r6
 80072f8:	6060      	str	r0, [r4, #4]
 80072fa:	6863      	ldr	r3, [r4, #4]
 80072fc:	6123      	str	r3, [r4, #16]
 80072fe:	2300      	movs	r3, #0
 8007300:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007304:	e7a8      	b.n	8007258 <_printf_i+0x150>
 8007306:	6923      	ldr	r3, [r4, #16]
 8007308:	4632      	mov	r2, r6
 800730a:	4649      	mov	r1, r9
 800730c:	4640      	mov	r0, r8
 800730e:	47d0      	blx	sl
 8007310:	3001      	adds	r0, #1
 8007312:	d0ab      	beq.n	800726c <_printf_i+0x164>
 8007314:	6823      	ldr	r3, [r4, #0]
 8007316:	079b      	lsls	r3, r3, #30
 8007318:	d413      	bmi.n	8007342 <_printf_i+0x23a>
 800731a:	68e0      	ldr	r0, [r4, #12]
 800731c:	9b03      	ldr	r3, [sp, #12]
 800731e:	4298      	cmp	r0, r3
 8007320:	bfb8      	it	lt
 8007322:	4618      	movlt	r0, r3
 8007324:	e7a4      	b.n	8007270 <_printf_i+0x168>
 8007326:	2301      	movs	r3, #1
 8007328:	4632      	mov	r2, r6
 800732a:	4649      	mov	r1, r9
 800732c:	4640      	mov	r0, r8
 800732e:	47d0      	blx	sl
 8007330:	3001      	adds	r0, #1
 8007332:	d09b      	beq.n	800726c <_printf_i+0x164>
 8007334:	3501      	adds	r5, #1
 8007336:	68e3      	ldr	r3, [r4, #12]
 8007338:	9903      	ldr	r1, [sp, #12]
 800733a:	1a5b      	subs	r3, r3, r1
 800733c:	42ab      	cmp	r3, r5
 800733e:	dcf2      	bgt.n	8007326 <_printf_i+0x21e>
 8007340:	e7eb      	b.n	800731a <_printf_i+0x212>
 8007342:	2500      	movs	r5, #0
 8007344:	f104 0619 	add.w	r6, r4, #25
 8007348:	e7f5      	b.n	8007336 <_printf_i+0x22e>
 800734a:	bf00      	nop
 800734c:	08007ab9 	.word	0x08007ab9
 8007350:	08007aca 	.word	0x08007aca

08007354 <_sbrk_r>:
 8007354:	b538      	push	{r3, r4, r5, lr}
 8007356:	4d06      	ldr	r5, [pc, #24]	; (8007370 <_sbrk_r+0x1c>)
 8007358:	2300      	movs	r3, #0
 800735a:	4604      	mov	r4, r0
 800735c:	4608      	mov	r0, r1
 800735e:	602b      	str	r3, [r5, #0]
 8007360:	f7f9 fe7a 	bl	8001058 <_sbrk>
 8007364:	1c43      	adds	r3, r0, #1
 8007366:	d102      	bne.n	800736e <_sbrk_r+0x1a>
 8007368:	682b      	ldr	r3, [r5, #0]
 800736a:	b103      	cbz	r3, 800736e <_sbrk_r+0x1a>
 800736c:	6023      	str	r3, [r4, #0]
 800736e:	bd38      	pop	{r3, r4, r5, pc}
 8007370:	20000228 	.word	0x20000228

08007374 <__sread>:
 8007374:	b510      	push	{r4, lr}
 8007376:	460c      	mov	r4, r1
 8007378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800737c:	f000 fab4 	bl	80078e8 <_read_r>
 8007380:	2800      	cmp	r0, #0
 8007382:	bfab      	itete	ge
 8007384:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007386:	89a3      	ldrhlt	r3, [r4, #12]
 8007388:	181b      	addge	r3, r3, r0
 800738a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800738e:	bfac      	ite	ge
 8007390:	6563      	strge	r3, [r4, #84]	; 0x54
 8007392:	81a3      	strhlt	r3, [r4, #12]
 8007394:	bd10      	pop	{r4, pc}

08007396 <__swrite>:
 8007396:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800739a:	461f      	mov	r7, r3
 800739c:	898b      	ldrh	r3, [r1, #12]
 800739e:	05db      	lsls	r3, r3, #23
 80073a0:	4605      	mov	r5, r0
 80073a2:	460c      	mov	r4, r1
 80073a4:	4616      	mov	r6, r2
 80073a6:	d505      	bpl.n	80073b4 <__swrite+0x1e>
 80073a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073ac:	2302      	movs	r3, #2
 80073ae:	2200      	movs	r2, #0
 80073b0:	f000 f9c8 	bl	8007744 <_lseek_r>
 80073b4:	89a3      	ldrh	r3, [r4, #12]
 80073b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073be:	81a3      	strh	r3, [r4, #12]
 80073c0:	4632      	mov	r2, r6
 80073c2:	463b      	mov	r3, r7
 80073c4:	4628      	mov	r0, r5
 80073c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073ca:	f000 b869 	b.w	80074a0 <_write_r>

080073ce <__sseek>:
 80073ce:	b510      	push	{r4, lr}
 80073d0:	460c      	mov	r4, r1
 80073d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073d6:	f000 f9b5 	bl	8007744 <_lseek_r>
 80073da:	1c43      	adds	r3, r0, #1
 80073dc:	89a3      	ldrh	r3, [r4, #12]
 80073de:	bf15      	itete	ne
 80073e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80073e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80073e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80073ea:	81a3      	strheq	r3, [r4, #12]
 80073ec:	bf18      	it	ne
 80073ee:	81a3      	strhne	r3, [r4, #12]
 80073f0:	bd10      	pop	{r4, pc}

080073f2 <__sclose>:
 80073f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073f6:	f000 b8d3 	b.w	80075a0 <_close_r>
	...

080073fc <__swbuf_r>:
 80073fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073fe:	460e      	mov	r6, r1
 8007400:	4614      	mov	r4, r2
 8007402:	4605      	mov	r5, r0
 8007404:	b118      	cbz	r0, 800740e <__swbuf_r+0x12>
 8007406:	6983      	ldr	r3, [r0, #24]
 8007408:	b90b      	cbnz	r3, 800740e <__swbuf_r+0x12>
 800740a:	f7ff fbbb 	bl	8006b84 <__sinit>
 800740e:	4b21      	ldr	r3, [pc, #132]	; (8007494 <__swbuf_r+0x98>)
 8007410:	429c      	cmp	r4, r3
 8007412:	d12b      	bne.n	800746c <__swbuf_r+0x70>
 8007414:	686c      	ldr	r4, [r5, #4]
 8007416:	69a3      	ldr	r3, [r4, #24]
 8007418:	60a3      	str	r3, [r4, #8]
 800741a:	89a3      	ldrh	r3, [r4, #12]
 800741c:	071a      	lsls	r2, r3, #28
 800741e:	d52f      	bpl.n	8007480 <__swbuf_r+0x84>
 8007420:	6923      	ldr	r3, [r4, #16]
 8007422:	b36b      	cbz	r3, 8007480 <__swbuf_r+0x84>
 8007424:	6923      	ldr	r3, [r4, #16]
 8007426:	6820      	ldr	r0, [r4, #0]
 8007428:	1ac0      	subs	r0, r0, r3
 800742a:	6963      	ldr	r3, [r4, #20]
 800742c:	b2f6      	uxtb	r6, r6
 800742e:	4283      	cmp	r3, r0
 8007430:	4637      	mov	r7, r6
 8007432:	dc04      	bgt.n	800743e <__swbuf_r+0x42>
 8007434:	4621      	mov	r1, r4
 8007436:	4628      	mov	r0, r5
 8007438:	f000 f948 	bl	80076cc <_fflush_r>
 800743c:	bb30      	cbnz	r0, 800748c <__swbuf_r+0x90>
 800743e:	68a3      	ldr	r3, [r4, #8]
 8007440:	3b01      	subs	r3, #1
 8007442:	60a3      	str	r3, [r4, #8]
 8007444:	6823      	ldr	r3, [r4, #0]
 8007446:	1c5a      	adds	r2, r3, #1
 8007448:	6022      	str	r2, [r4, #0]
 800744a:	701e      	strb	r6, [r3, #0]
 800744c:	6963      	ldr	r3, [r4, #20]
 800744e:	3001      	adds	r0, #1
 8007450:	4283      	cmp	r3, r0
 8007452:	d004      	beq.n	800745e <__swbuf_r+0x62>
 8007454:	89a3      	ldrh	r3, [r4, #12]
 8007456:	07db      	lsls	r3, r3, #31
 8007458:	d506      	bpl.n	8007468 <__swbuf_r+0x6c>
 800745a:	2e0a      	cmp	r6, #10
 800745c:	d104      	bne.n	8007468 <__swbuf_r+0x6c>
 800745e:	4621      	mov	r1, r4
 8007460:	4628      	mov	r0, r5
 8007462:	f000 f933 	bl	80076cc <_fflush_r>
 8007466:	b988      	cbnz	r0, 800748c <__swbuf_r+0x90>
 8007468:	4638      	mov	r0, r7
 800746a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800746c:	4b0a      	ldr	r3, [pc, #40]	; (8007498 <__swbuf_r+0x9c>)
 800746e:	429c      	cmp	r4, r3
 8007470:	d101      	bne.n	8007476 <__swbuf_r+0x7a>
 8007472:	68ac      	ldr	r4, [r5, #8]
 8007474:	e7cf      	b.n	8007416 <__swbuf_r+0x1a>
 8007476:	4b09      	ldr	r3, [pc, #36]	; (800749c <__swbuf_r+0xa0>)
 8007478:	429c      	cmp	r4, r3
 800747a:	bf08      	it	eq
 800747c:	68ec      	ldreq	r4, [r5, #12]
 800747e:	e7ca      	b.n	8007416 <__swbuf_r+0x1a>
 8007480:	4621      	mov	r1, r4
 8007482:	4628      	mov	r0, r5
 8007484:	f000 f81e 	bl	80074c4 <__swsetup_r>
 8007488:	2800      	cmp	r0, #0
 800748a:	d0cb      	beq.n	8007424 <__swbuf_r+0x28>
 800748c:	f04f 37ff 	mov.w	r7, #4294967295
 8007490:	e7ea      	b.n	8007468 <__swbuf_r+0x6c>
 8007492:	bf00      	nop
 8007494:	08007a68 	.word	0x08007a68
 8007498:	08007a88 	.word	0x08007a88
 800749c:	08007a48 	.word	0x08007a48

080074a0 <_write_r>:
 80074a0:	b538      	push	{r3, r4, r5, lr}
 80074a2:	4d07      	ldr	r5, [pc, #28]	; (80074c0 <_write_r+0x20>)
 80074a4:	4604      	mov	r4, r0
 80074a6:	4608      	mov	r0, r1
 80074a8:	4611      	mov	r1, r2
 80074aa:	2200      	movs	r2, #0
 80074ac:	602a      	str	r2, [r5, #0]
 80074ae:	461a      	mov	r2, r3
 80074b0:	f7f9 fb92 	bl	8000bd8 <_write>
 80074b4:	1c43      	adds	r3, r0, #1
 80074b6:	d102      	bne.n	80074be <_write_r+0x1e>
 80074b8:	682b      	ldr	r3, [r5, #0]
 80074ba:	b103      	cbz	r3, 80074be <_write_r+0x1e>
 80074bc:	6023      	str	r3, [r4, #0]
 80074be:	bd38      	pop	{r3, r4, r5, pc}
 80074c0:	20000228 	.word	0x20000228

080074c4 <__swsetup_r>:
 80074c4:	4b32      	ldr	r3, [pc, #200]	; (8007590 <__swsetup_r+0xcc>)
 80074c6:	b570      	push	{r4, r5, r6, lr}
 80074c8:	681d      	ldr	r5, [r3, #0]
 80074ca:	4606      	mov	r6, r0
 80074cc:	460c      	mov	r4, r1
 80074ce:	b125      	cbz	r5, 80074da <__swsetup_r+0x16>
 80074d0:	69ab      	ldr	r3, [r5, #24]
 80074d2:	b913      	cbnz	r3, 80074da <__swsetup_r+0x16>
 80074d4:	4628      	mov	r0, r5
 80074d6:	f7ff fb55 	bl	8006b84 <__sinit>
 80074da:	4b2e      	ldr	r3, [pc, #184]	; (8007594 <__swsetup_r+0xd0>)
 80074dc:	429c      	cmp	r4, r3
 80074de:	d10f      	bne.n	8007500 <__swsetup_r+0x3c>
 80074e0:	686c      	ldr	r4, [r5, #4]
 80074e2:	89a3      	ldrh	r3, [r4, #12]
 80074e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80074e8:	0719      	lsls	r1, r3, #28
 80074ea:	d42c      	bmi.n	8007546 <__swsetup_r+0x82>
 80074ec:	06dd      	lsls	r5, r3, #27
 80074ee:	d411      	bmi.n	8007514 <__swsetup_r+0x50>
 80074f0:	2309      	movs	r3, #9
 80074f2:	6033      	str	r3, [r6, #0]
 80074f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80074f8:	81a3      	strh	r3, [r4, #12]
 80074fa:	f04f 30ff 	mov.w	r0, #4294967295
 80074fe:	e03e      	b.n	800757e <__swsetup_r+0xba>
 8007500:	4b25      	ldr	r3, [pc, #148]	; (8007598 <__swsetup_r+0xd4>)
 8007502:	429c      	cmp	r4, r3
 8007504:	d101      	bne.n	800750a <__swsetup_r+0x46>
 8007506:	68ac      	ldr	r4, [r5, #8]
 8007508:	e7eb      	b.n	80074e2 <__swsetup_r+0x1e>
 800750a:	4b24      	ldr	r3, [pc, #144]	; (800759c <__swsetup_r+0xd8>)
 800750c:	429c      	cmp	r4, r3
 800750e:	bf08      	it	eq
 8007510:	68ec      	ldreq	r4, [r5, #12]
 8007512:	e7e6      	b.n	80074e2 <__swsetup_r+0x1e>
 8007514:	0758      	lsls	r0, r3, #29
 8007516:	d512      	bpl.n	800753e <__swsetup_r+0x7a>
 8007518:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800751a:	b141      	cbz	r1, 800752e <__swsetup_r+0x6a>
 800751c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007520:	4299      	cmp	r1, r3
 8007522:	d002      	beq.n	800752a <__swsetup_r+0x66>
 8007524:	4630      	mov	r0, r6
 8007526:	f000 f98f 	bl	8007848 <_free_r>
 800752a:	2300      	movs	r3, #0
 800752c:	6363      	str	r3, [r4, #52]	; 0x34
 800752e:	89a3      	ldrh	r3, [r4, #12]
 8007530:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007534:	81a3      	strh	r3, [r4, #12]
 8007536:	2300      	movs	r3, #0
 8007538:	6063      	str	r3, [r4, #4]
 800753a:	6923      	ldr	r3, [r4, #16]
 800753c:	6023      	str	r3, [r4, #0]
 800753e:	89a3      	ldrh	r3, [r4, #12]
 8007540:	f043 0308 	orr.w	r3, r3, #8
 8007544:	81a3      	strh	r3, [r4, #12]
 8007546:	6923      	ldr	r3, [r4, #16]
 8007548:	b94b      	cbnz	r3, 800755e <__swsetup_r+0x9a>
 800754a:	89a3      	ldrh	r3, [r4, #12]
 800754c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007550:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007554:	d003      	beq.n	800755e <__swsetup_r+0x9a>
 8007556:	4621      	mov	r1, r4
 8007558:	4630      	mov	r0, r6
 800755a:	f000 f929 	bl	80077b0 <__smakebuf_r>
 800755e:	89a0      	ldrh	r0, [r4, #12]
 8007560:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007564:	f010 0301 	ands.w	r3, r0, #1
 8007568:	d00a      	beq.n	8007580 <__swsetup_r+0xbc>
 800756a:	2300      	movs	r3, #0
 800756c:	60a3      	str	r3, [r4, #8]
 800756e:	6963      	ldr	r3, [r4, #20]
 8007570:	425b      	negs	r3, r3
 8007572:	61a3      	str	r3, [r4, #24]
 8007574:	6923      	ldr	r3, [r4, #16]
 8007576:	b943      	cbnz	r3, 800758a <__swsetup_r+0xc6>
 8007578:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800757c:	d1ba      	bne.n	80074f4 <__swsetup_r+0x30>
 800757e:	bd70      	pop	{r4, r5, r6, pc}
 8007580:	0781      	lsls	r1, r0, #30
 8007582:	bf58      	it	pl
 8007584:	6963      	ldrpl	r3, [r4, #20]
 8007586:	60a3      	str	r3, [r4, #8]
 8007588:	e7f4      	b.n	8007574 <__swsetup_r+0xb0>
 800758a:	2000      	movs	r0, #0
 800758c:	e7f7      	b.n	800757e <__swsetup_r+0xba>
 800758e:	bf00      	nop
 8007590:	2000000c 	.word	0x2000000c
 8007594:	08007a68 	.word	0x08007a68
 8007598:	08007a88 	.word	0x08007a88
 800759c:	08007a48 	.word	0x08007a48

080075a0 <_close_r>:
 80075a0:	b538      	push	{r3, r4, r5, lr}
 80075a2:	4d06      	ldr	r5, [pc, #24]	; (80075bc <_close_r+0x1c>)
 80075a4:	2300      	movs	r3, #0
 80075a6:	4604      	mov	r4, r0
 80075a8:	4608      	mov	r0, r1
 80075aa:	602b      	str	r3, [r5, #0]
 80075ac:	f7f9 fd1f 	bl	8000fee <_close>
 80075b0:	1c43      	adds	r3, r0, #1
 80075b2:	d102      	bne.n	80075ba <_close_r+0x1a>
 80075b4:	682b      	ldr	r3, [r5, #0]
 80075b6:	b103      	cbz	r3, 80075ba <_close_r+0x1a>
 80075b8:	6023      	str	r3, [r4, #0]
 80075ba:	bd38      	pop	{r3, r4, r5, pc}
 80075bc:	20000228 	.word	0x20000228

080075c0 <__sflush_r>:
 80075c0:	898a      	ldrh	r2, [r1, #12]
 80075c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075c6:	4605      	mov	r5, r0
 80075c8:	0710      	lsls	r0, r2, #28
 80075ca:	460c      	mov	r4, r1
 80075cc:	d458      	bmi.n	8007680 <__sflush_r+0xc0>
 80075ce:	684b      	ldr	r3, [r1, #4]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	dc05      	bgt.n	80075e0 <__sflush_r+0x20>
 80075d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	dc02      	bgt.n	80075e0 <__sflush_r+0x20>
 80075da:	2000      	movs	r0, #0
 80075dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075e2:	2e00      	cmp	r6, #0
 80075e4:	d0f9      	beq.n	80075da <__sflush_r+0x1a>
 80075e6:	2300      	movs	r3, #0
 80075e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80075ec:	682f      	ldr	r7, [r5, #0]
 80075ee:	602b      	str	r3, [r5, #0]
 80075f0:	d032      	beq.n	8007658 <__sflush_r+0x98>
 80075f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80075f4:	89a3      	ldrh	r3, [r4, #12]
 80075f6:	075a      	lsls	r2, r3, #29
 80075f8:	d505      	bpl.n	8007606 <__sflush_r+0x46>
 80075fa:	6863      	ldr	r3, [r4, #4]
 80075fc:	1ac0      	subs	r0, r0, r3
 80075fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007600:	b10b      	cbz	r3, 8007606 <__sflush_r+0x46>
 8007602:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007604:	1ac0      	subs	r0, r0, r3
 8007606:	2300      	movs	r3, #0
 8007608:	4602      	mov	r2, r0
 800760a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800760c:	6a21      	ldr	r1, [r4, #32]
 800760e:	4628      	mov	r0, r5
 8007610:	47b0      	blx	r6
 8007612:	1c43      	adds	r3, r0, #1
 8007614:	89a3      	ldrh	r3, [r4, #12]
 8007616:	d106      	bne.n	8007626 <__sflush_r+0x66>
 8007618:	6829      	ldr	r1, [r5, #0]
 800761a:	291d      	cmp	r1, #29
 800761c:	d82c      	bhi.n	8007678 <__sflush_r+0xb8>
 800761e:	4a2a      	ldr	r2, [pc, #168]	; (80076c8 <__sflush_r+0x108>)
 8007620:	40ca      	lsrs	r2, r1
 8007622:	07d6      	lsls	r6, r2, #31
 8007624:	d528      	bpl.n	8007678 <__sflush_r+0xb8>
 8007626:	2200      	movs	r2, #0
 8007628:	6062      	str	r2, [r4, #4]
 800762a:	04d9      	lsls	r1, r3, #19
 800762c:	6922      	ldr	r2, [r4, #16]
 800762e:	6022      	str	r2, [r4, #0]
 8007630:	d504      	bpl.n	800763c <__sflush_r+0x7c>
 8007632:	1c42      	adds	r2, r0, #1
 8007634:	d101      	bne.n	800763a <__sflush_r+0x7a>
 8007636:	682b      	ldr	r3, [r5, #0]
 8007638:	b903      	cbnz	r3, 800763c <__sflush_r+0x7c>
 800763a:	6560      	str	r0, [r4, #84]	; 0x54
 800763c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800763e:	602f      	str	r7, [r5, #0]
 8007640:	2900      	cmp	r1, #0
 8007642:	d0ca      	beq.n	80075da <__sflush_r+0x1a>
 8007644:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007648:	4299      	cmp	r1, r3
 800764a:	d002      	beq.n	8007652 <__sflush_r+0x92>
 800764c:	4628      	mov	r0, r5
 800764e:	f000 f8fb 	bl	8007848 <_free_r>
 8007652:	2000      	movs	r0, #0
 8007654:	6360      	str	r0, [r4, #52]	; 0x34
 8007656:	e7c1      	b.n	80075dc <__sflush_r+0x1c>
 8007658:	6a21      	ldr	r1, [r4, #32]
 800765a:	2301      	movs	r3, #1
 800765c:	4628      	mov	r0, r5
 800765e:	47b0      	blx	r6
 8007660:	1c41      	adds	r1, r0, #1
 8007662:	d1c7      	bne.n	80075f4 <__sflush_r+0x34>
 8007664:	682b      	ldr	r3, [r5, #0]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d0c4      	beq.n	80075f4 <__sflush_r+0x34>
 800766a:	2b1d      	cmp	r3, #29
 800766c:	d001      	beq.n	8007672 <__sflush_r+0xb2>
 800766e:	2b16      	cmp	r3, #22
 8007670:	d101      	bne.n	8007676 <__sflush_r+0xb6>
 8007672:	602f      	str	r7, [r5, #0]
 8007674:	e7b1      	b.n	80075da <__sflush_r+0x1a>
 8007676:	89a3      	ldrh	r3, [r4, #12]
 8007678:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800767c:	81a3      	strh	r3, [r4, #12]
 800767e:	e7ad      	b.n	80075dc <__sflush_r+0x1c>
 8007680:	690f      	ldr	r7, [r1, #16]
 8007682:	2f00      	cmp	r7, #0
 8007684:	d0a9      	beq.n	80075da <__sflush_r+0x1a>
 8007686:	0793      	lsls	r3, r2, #30
 8007688:	680e      	ldr	r6, [r1, #0]
 800768a:	bf08      	it	eq
 800768c:	694b      	ldreq	r3, [r1, #20]
 800768e:	600f      	str	r7, [r1, #0]
 8007690:	bf18      	it	ne
 8007692:	2300      	movne	r3, #0
 8007694:	eba6 0807 	sub.w	r8, r6, r7
 8007698:	608b      	str	r3, [r1, #8]
 800769a:	f1b8 0f00 	cmp.w	r8, #0
 800769e:	dd9c      	ble.n	80075da <__sflush_r+0x1a>
 80076a0:	6a21      	ldr	r1, [r4, #32]
 80076a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80076a4:	4643      	mov	r3, r8
 80076a6:	463a      	mov	r2, r7
 80076a8:	4628      	mov	r0, r5
 80076aa:	47b0      	blx	r6
 80076ac:	2800      	cmp	r0, #0
 80076ae:	dc06      	bgt.n	80076be <__sflush_r+0xfe>
 80076b0:	89a3      	ldrh	r3, [r4, #12]
 80076b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076b6:	81a3      	strh	r3, [r4, #12]
 80076b8:	f04f 30ff 	mov.w	r0, #4294967295
 80076bc:	e78e      	b.n	80075dc <__sflush_r+0x1c>
 80076be:	4407      	add	r7, r0
 80076c0:	eba8 0800 	sub.w	r8, r8, r0
 80076c4:	e7e9      	b.n	800769a <__sflush_r+0xda>
 80076c6:	bf00      	nop
 80076c8:	20400001 	.word	0x20400001

080076cc <_fflush_r>:
 80076cc:	b538      	push	{r3, r4, r5, lr}
 80076ce:	690b      	ldr	r3, [r1, #16]
 80076d0:	4605      	mov	r5, r0
 80076d2:	460c      	mov	r4, r1
 80076d4:	b913      	cbnz	r3, 80076dc <_fflush_r+0x10>
 80076d6:	2500      	movs	r5, #0
 80076d8:	4628      	mov	r0, r5
 80076da:	bd38      	pop	{r3, r4, r5, pc}
 80076dc:	b118      	cbz	r0, 80076e6 <_fflush_r+0x1a>
 80076de:	6983      	ldr	r3, [r0, #24]
 80076e0:	b90b      	cbnz	r3, 80076e6 <_fflush_r+0x1a>
 80076e2:	f7ff fa4f 	bl	8006b84 <__sinit>
 80076e6:	4b14      	ldr	r3, [pc, #80]	; (8007738 <_fflush_r+0x6c>)
 80076e8:	429c      	cmp	r4, r3
 80076ea:	d11b      	bne.n	8007724 <_fflush_r+0x58>
 80076ec:	686c      	ldr	r4, [r5, #4]
 80076ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d0ef      	beq.n	80076d6 <_fflush_r+0xa>
 80076f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80076f8:	07d0      	lsls	r0, r2, #31
 80076fa:	d404      	bmi.n	8007706 <_fflush_r+0x3a>
 80076fc:	0599      	lsls	r1, r3, #22
 80076fe:	d402      	bmi.n	8007706 <_fflush_r+0x3a>
 8007700:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007702:	f7ff fadd 	bl	8006cc0 <__retarget_lock_acquire_recursive>
 8007706:	4628      	mov	r0, r5
 8007708:	4621      	mov	r1, r4
 800770a:	f7ff ff59 	bl	80075c0 <__sflush_r>
 800770e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007710:	07da      	lsls	r2, r3, #31
 8007712:	4605      	mov	r5, r0
 8007714:	d4e0      	bmi.n	80076d8 <_fflush_r+0xc>
 8007716:	89a3      	ldrh	r3, [r4, #12]
 8007718:	059b      	lsls	r3, r3, #22
 800771a:	d4dd      	bmi.n	80076d8 <_fflush_r+0xc>
 800771c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800771e:	f7ff fad0 	bl	8006cc2 <__retarget_lock_release_recursive>
 8007722:	e7d9      	b.n	80076d8 <_fflush_r+0xc>
 8007724:	4b05      	ldr	r3, [pc, #20]	; (800773c <_fflush_r+0x70>)
 8007726:	429c      	cmp	r4, r3
 8007728:	d101      	bne.n	800772e <_fflush_r+0x62>
 800772a:	68ac      	ldr	r4, [r5, #8]
 800772c:	e7df      	b.n	80076ee <_fflush_r+0x22>
 800772e:	4b04      	ldr	r3, [pc, #16]	; (8007740 <_fflush_r+0x74>)
 8007730:	429c      	cmp	r4, r3
 8007732:	bf08      	it	eq
 8007734:	68ec      	ldreq	r4, [r5, #12]
 8007736:	e7da      	b.n	80076ee <_fflush_r+0x22>
 8007738:	08007a68 	.word	0x08007a68
 800773c:	08007a88 	.word	0x08007a88
 8007740:	08007a48 	.word	0x08007a48

08007744 <_lseek_r>:
 8007744:	b538      	push	{r3, r4, r5, lr}
 8007746:	4d07      	ldr	r5, [pc, #28]	; (8007764 <_lseek_r+0x20>)
 8007748:	4604      	mov	r4, r0
 800774a:	4608      	mov	r0, r1
 800774c:	4611      	mov	r1, r2
 800774e:	2200      	movs	r2, #0
 8007750:	602a      	str	r2, [r5, #0]
 8007752:	461a      	mov	r2, r3
 8007754:	f7f9 fc72 	bl	800103c <_lseek>
 8007758:	1c43      	adds	r3, r0, #1
 800775a:	d102      	bne.n	8007762 <_lseek_r+0x1e>
 800775c:	682b      	ldr	r3, [r5, #0]
 800775e:	b103      	cbz	r3, 8007762 <_lseek_r+0x1e>
 8007760:	6023      	str	r3, [r4, #0]
 8007762:	bd38      	pop	{r3, r4, r5, pc}
 8007764:	20000228 	.word	0x20000228

08007768 <__swhatbuf_r>:
 8007768:	b570      	push	{r4, r5, r6, lr}
 800776a:	460e      	mov	r6, r1
 800776c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007770:	2900      	cmp	r1, #0
 8007772:	b096      	sub	sp, #88	; 0x58
 8007774:	4614      	mov	r4, r2
 8007776:	461d      	mov	r5, r3
 8007778:	da07      	bge.n	800778a <__swhatbuf_r+0x22>
 800777a:	2300      	movs	r3, #0
 800777c:	602b      	str	r3, [r5, #0]
 800777e:	89b3      	ldrh	r3, [r6, #12]
 8007780:	061a      	lsls	r2, r3, #24
 8007782:	d410      	bmi.n	80077a6 <__swhatbuf_r+0x3e>
 8007784:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007788:	e00e      	b.n	80077a8 <__swhatbuf_r+0x40>
 800778a:	466a      	mov	r2, sp
 800778c:	f000 f8be 	bl	800790c <_fstat_r>
 8007790:	2800      	cmp	r0, #0
 8007792:	dbf2      	blt.n	800777a <__swhatbuf_r+0x12>
 8007794:	9a01      	ldr	r2, [sp, #4]
 8007796:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800779a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800779e:	425a      	negs	r2, r3
 80077a0:	415a      	adcs	r2, r3
 80077a2:	602a      	str	r2, [r5, #0]
 80077a4:	e7ee      	b.n	8007784 <__swhatbuf_r+0x1c>
 80077a6:	2340      	movs	r3, #64	; 0x40
 80077a8:	2000      	movs	r0, #0
 80077aa:	6023      	str	r3, [r4, #0]
 80077ac:	b016      	add	sp, #88	; 0x58
 80077ae:	bd70      	pop	{r4, r5, r6, pc}

080077b0 <__smakebuf_r>:
 80077b0:	898b      	ldrh	r3, [r1, #12]
 80077b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80077b4:	079d      	lsls	r5, r3, #30
 80077b6:	4606      	mov	r6, r0
 80077b8:	460c      	mov	r4, r1
 80077ba:	d507      	bpl.n	80077cc <__smakebuf_r+0x1c>
 80077bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80077c0:	6023      	str	r3, [r4, #0]
 80077c2:	6123      	str	r3, [r4, #16]
 80077c4:	2301      	movs	r3, #1
 80077c6:	6163      	str	r3, [r4, #20]
 80077c8:	b002      	add	sp, #8
 80077ca:	bd70      	pop	{r4, r5, r6, pc}
 80077cc:	ab01      	add	r3, sp, #4
 80077ce:	466a      	mov	r2, sp
 80077d0:	f7ff ffca 	bl	8007768 <__swhatbuf_r>
 80077d4:	9900      	ldr	r1, [sp, #0]
 80077d6:	4605      	mov	r5, r0
 80077d8:	4630      	mov	r0, r6
 80077da:	f7ff fa73 	bl	8006cc4 <_malloc_r>
 80077de:	b948      	cbnz	r0, 80077f4 <__smakebuf_r+0x44>
 80077e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077e4:	059a      	lsls	r2, r3, #22
 80077e6:	d4ef      	bmi.n	80077c8 <__smakebuf_r+0x18>
 80077e8:	f023 0303 	bic.w	r3, r3, #3
 80077ec:	f043 0302 	orr.w	r3, r3, #2
 80077f0:	81a3      	strh	r3, [r4, #12]
 80077f2:	e7e3      	b.n	80077bc <__smakebuf_r+0xc>
 80077f4:	4b0d      	ldr	r3, [pc, #52]	; (800782c <__smakebuf_r+0x7c>)
 80077f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80077f8:	89a3      	ldrh	r3, [r4, #12]
 80077fa:	6020      	str	r0, [r4, #0]
 80077fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007800:	81a3      	strh	r3, [r4, #12]
 8007802:	9b00      	ldr	r3, [sp, #0]
 8007804:	6163      	str	r3, [r4, #20]
 8007806:	9b01      	ldr	r3, [sp, #4]
 8007808:	6120      	str	r0, [r4, #16]
 800780a:	b15b      	cbz	r3, 8007824 <__smakebuf_r+0x74>
 800780c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007810:	4630      	mov	r0, r6
 8007812:	f000 f88d 	bl	8007930 <_isatty_r>
 8007816:	b128      	cbz	r0, 8007824 <__smakebuf_r+0x74>
 8007818:	89a3      	ldrh	r3, [r4, #12]
 800781a:	f023 0303 	bic.w	r3, r3, #3
 800781e:	f043 0301 	orr.w	r3, r3, #1
 8007822:	81a3      	strh	r3, [r4, #12]
 8007824:	89a0      	ldrh	r0, [r4, #12]
 8007826:	4305      	orrs	r5, r0
 8007828:	81a5      	strh	r5, [r4, #12]
 800782a:	e7cd      	b.n	80077c8 <__smakebuf_r+0x18>
 800782c:	08006b1d 	.word	0x08006b1d

08007830 <__malloc_lock>:
 8007830:	4801      	ldr	r0, [pc, #4]	; (8007838 <__malloc_lock+0x8>)
 8007832:	f7ff ba45 	b.w	8006cc0 <__retarget_lock_acquire_recursive>
 8007836:	bf00      	nop
 8007838:	20000220 	.word	0x20000220

0800783c <__malloc_unlock>:
 800783c:	4801      	ldr	r0, [pc, #4]	; (8007844 <__malloc_unlock+0x8>)
 800783e:	f7ff ba40 	b.w	8006cc2 <__retarget_lock_release_recursive>
 8007842:	bf00      	nop
 8007844:	20000220 	.word	0x20000220

08007848 <_free_r>:
 8007848:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800784a:	2900      	cmp	r1, #0
 800784c:	d048      	beq.n	80078e0 <_free_r+0x98>
 800784e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007852:	9001      	str	r0, [sp, #4]
 8007854:	2b00      	cmp	r3, #0
 8007856:	f1a1 0404 	sub.w	r4, r1, #4
 800785a:	bfb8      	it	lt
 800785c:	18e4      	addlt	r4, r4, r3
 800785e:	f7ff ffe7 	bl	8007830 <__malloc_lock>
 8007862:	4a20      	ldr	r2, [pc, #128]	; (80078e4 <_free_r+0x9c>)
 8007864:	9801      	ldr	r0, [sp, #4]
 8007866:	6813      	ldr	r3, [r2, #0]
 8007868:	4615      	mov	r5, r2
 800786a:	b933      	cbnz	r3, 800787a <_free_r+0x32>
 800786c:	6063      	str	r3, [r4, #4]
 800786e:	6014      	str	r4, [r2, #0]
 8007870:	b003      	add	sp, #12
 8007872:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007876:	f7ff bfe1 	b.w	800783c <__malloc_unlock>
 800787a:	42a3      	cmp	r3, r4
 800787c:	d90b      	bls.n	8007896 <_free_r+0x4e>
 800787e:	6821      	ldr	r1, [r4, #0]
 8007880:	1862      	adds	r2, r4, r1
 8007882:	4293      	cmp	r3, r2
 8007884:	bf04      	itt	eq
 8007886:	681a      	ldreq	r2, [r3, #0]
 8007888:	685b      	ldreq	r3, [r3, #4]
 800788a:	6063      	str	r3, [r4, #4]
 800788c:	bf04      	itt	eq
 800788e:	1852      	addeq	r2, r2, r1
 8007890:	6022      	streq	r2, [r4, #0]
 8007892:	602c      	str	r4, [r5, #0]
 8007894:	e7ec      	b.n	8007870 <_free_r+0x28>
 8007896:	461a      	mov	r2, r3
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	b10b      	cbz	r3, 80078a0 <_free_r+0x58>
 800789c:	42a3      	cmp	r3, r4
 800789e:	d9fa      	bls.n	8007896 <_free_r+0x4e>
 80078a0:	6811      	ldr	r1, [r2, #0]
 80078a2:	1855      	adds	r5, r2, r1
 80078a4:	42a5      	cmp	r5, r4
 80078a6:	d10b      	bne.n	80078c0 <_free_r+0x78>
 80078a8:	6824      	ldr	r4, [r4, #0]
 80078aa:	4421      	add	r1, r4
 80078ac:	1854      	adds	r4, r2, r1
 80078ae:	42a3      	cmp	r3, r4
 80078b0:	6011      	str	r1, [r2, #0]
 80078b2:	d1dd      	bne.n	8007870 <_free_r+0x28>
 80078b4:	681c      	ldr	r4, [r3, #0]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	6053      	str	r3, [r2, #4]
 80078ba:	4421      	add	r1, r4
 80078bc:	6011      	str	r1, [r2, #0]
 80078be:	e7d7      	b.n	8007870 <_free_r+0x28>
 80078c0:	d902      	bls.n	80078c8 <_free_r+0x80>
 80078c2:	230c      	movs	r3, #12
 80078c4:	6003      	str	r3, [r0, #0]
 80078c6:	e7d3      	b.n	8007870 <_free_r+0x28>
 80078c8:	6825      	ldr	r5, [r4, #0]
 80078ca:	1961      	adds	r1, r4, r5
 80078cc:	428b      	cmp	r3, r1
 80078ce:	bf04      	itt	eq
 80078d0:	6819      	ldreq	r1, [r3, #0]
 80078d2:	685b      	ldreq	r3, [r3, #4]
 80078d4:	6063      	str	r3, [r4, #4]
 80078d6:	bf04      	itt	eq
 80078d8:	1949      	addeq	r1, r1, r5
 80078da:	6021      	streq	r1, [r4, #0]
 80078dc:	6054      	str	r4, [r2, #4]
 80078de:	e7c7      	b.n	8007870 <_free_r+0x28>
 80078e0:	b003      	add	sp, #12
 80078e2:	bd30      	pop	{r4, r5, pc}
 80078e4:	20000090 	.word	0x20000090

080078e8 <_read_r>:
 80078e8:	b538      	push	{r3, r4, r5, lr}
 80078ea:	4d07      	ldr	r5, [pc, #28]	; (8007908 <_read_r+0x20>)
 80078ec:	4604      	mov	r4, r0
 80078ee:	4608      	mov	r0, r1
 80078f0:	4611      	mov	r1, r2
 80078f2:	2200      	movs	r2, #0
 80078f4:	602a      	str	r2, [r5, #0]
 80078f6:	461a      	mov	r2, r3
 80078f8:	f7f9 fb5c 	bl	8000fb4 <_read>
 80078fc:	1c43      	adds	r3, r0, #1
 80078fe:	d102      	bne.n	8007906 <_read_r+0x1e>
 8007900:	682b      	ldr	r3, [r5, #0]
 8007902:	b103      	cbz	r3, 8007906 <_read_r+0x1e>
 8007904:	6023      	str	r3, [r4, #0]
 8007906:	bd38      	pop	{r3, r4, r5, pc}
 8007908:	20000228 	.word	0x20000228

0800790c <_fstat_r>:
 800790c:	b538      	push	{r3, r4, r5, lr}
 800790e:	4d07      	ldr	r5, [pc, #28]	; (800792c <_fstat_r+0x20>)
 8007910:	2300      	movs	r3, #0
 8007912:	4604      	mov	r4, r0
 8007914:	4608      	mov	r0, r1
 8007916:	4611      	mov	r1, r2
 8007918:	602b      	str	r3, [r5, #0]
 800791a:	f7f9 fb74 	bl	8001006 <_fstat>
 800791e:	1c43      	adds	r3, r0, #1
 8007920:	d102      	bne.n	8007928 <_fstat_r+0x1c>
 8007922:	682b      	ldr	r3, [r5, #0]
 8007924:	b103      	cbz	r3, 8007928 <_fstat_r+0x1c>
 8007926:	6023      	str	r3, [r4, #0]
 8007928:	bd38      	pop	{r3, r4, r5, pc}
 800792a:	bf00      	nop
 800792c:	20000228 	.word	0x20000228

08007930 <_isatty_r>:
 8007930:	b538      	push	{r3, r4, r5, lr}
 8007932:	4d06      	ldr	r5, [pc, #24]	; (800794c <_isatty_r+0x1c>)
 8007934:	2300      	movs	r3, #0
 8007936:	4604      	mov	r4, r0
 8007938:	4608      	mov	r0, r1
 800793a:	602b      	str	r3, [r5, #0]
 800793c:	f7f9 fb73 	bl	8001026 <_isatty>
 8007940:	1c43      	adds	r3, r0, #1
 8007942:	d102      	bne.n	800794a <_isatty_r+0x1a>
 8007944:	682b      	ldr	r3, [r5, #0]
 8007946:	b103      	cbz	r3, 800794a <_isatty_r+0x1a>
 8007948:	6023      	str	r3, [r4, #0]
 800794a:	bd38      	pop	{r3, r4, r5, pc}
 800794c:	20000228 	.word	0x20000228

08007950 <_init>:
 8007950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007952:	bf00      	nop
 8007954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007956:	bc08      	pop	{r3}
 8007958:	469e      	mov	lr, r3
 800795a:	4770      	bx	lr

0800795c <_fini>:
 800795c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800795e:	bf00      	nop
 8007960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007962:	bc08      	pop	{r3}
 8007964:	469e      	mov	lr, r3
 8007966:	4770      	bx	lr
