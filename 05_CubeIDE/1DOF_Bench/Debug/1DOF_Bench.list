
1DOF_Bench.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055e8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08005770  08005770  00015770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005850  08005850  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005850  08005850  00015850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005858  08005858  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005858  08005858  00015858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800585c  0800585c  0001585c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005860  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  2000000c  0800586c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  0800586c  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a0c5  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002981  00000000  00000000  0003a101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c0  00000000  00000000  0003ca88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011c8  00000000  00000000  0003dd48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029ac9  00000000  00000000  0003ef10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015b64  00000000  00000000  000689d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108ccb  00000000  00000000  0007e53d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00187208  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005000  00000000  00000000  0018725c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005758 	.word	0x08005758

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005758 	.word	0x08005758

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
		enum states etat;
		etat = idle_mode;
 80004c6:	2300      	movs	r3, #0
 80004c8:	71fb      	strb	r3, [r7, #7]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004ca:	f000 fcc1 	bl	8000e50 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004ce:	f000 f865 	bl	800059c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004d2:	f000 f9d3 	bl	800087c <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80004d6:	f000 f9a1 	bl	800081c <MX_USART2_UART_Init>
	MX_ADC1_Init();
 80004da:	f000 f8b1 	bl	8000640 <MX_ADC1_Init>
	MX_TIM3_Init();
 80004de:	f000 f925 	bl	800072c <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	// Light up green led
	setGreenLed();
 80004e2:	f000 fa36 	bl	8000952 <setGreenLed>
	// blink green led
	blinkGreenLed(10, 100);
 80004e6:	2164      	movs	r1, #100	; 0x64
 80004e8:	200a      	movs	r0, #10
 80004ea:	f000 fa3c 	bl	8000966 <blinkGreenLed>
	// Welcome message on UART
	//sendWelcomeMsgRS232(&huart2);
	//la fonction au dessus pose des soucis
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80004ee:	2104      	movs	r1, #4
 80004f0:	4826      	ldr	r0, [pc, #152]	; (800058c <main+0xcc>)
 80004f2:	f003 fb7b 	bl	8003bec <HAL_TIM_PWM_Start>
	TIM3->CCR2 = 1512;
 80004f6:	4b26      	ldr	r3, [pc, #152]	; (8000590 <main+0xd0>)
 80004f8:	f44f 62bd 	mov.w	r2, #1512	; 0x5e8
 80004fc:	639a      	str	r2, [r3, #56]	; 0x38
	y_print(&huart2, " 0 to 6 to change state \n");
 80004fe:	4925      	ldr	r1, [pc, #148]	; (8000594 <main+0xd4>)
 8000500:	4825      	ldr	r0, [pc, #148]	; (8000598 <main+0xd8>)
 8000502:	f000 fbc7 	bl	8000c94 <y_print>
	HAL_Delay(5000);
 8000506:	f241 3088 	movw	r0, #5000	; 0x1388
 800050a:	f000 fd1d 	bl	8000f48 <HAL_Delay>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		__HAL_UART_CLEAR_OREFLAG(&huart2);
 800050e:	4b22      	ldr	r3, [pc, #136]	; (8000598 <main+0xd8>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	2208      	movs	r2, #8
 8000514:	621a      	str	r2, [r3, #32]

					//differents etats qu'on peut avoir
				//idle_mode,init_uc,init_motor,motor_ready,manual_mode,auto_mode,info_mode

		//---------changement d'etat-------
				changing(etat, &huart2);//fonction qui change l'etat dans Yann.c
 8000516:	79fb      	ldrb	r3, [r7, #7]
 8000518:	491f      	ldr	r1, [pc, #124]	; (8000598 <main+0xd8>)
 800051a:	4618      	mov	r0, r3
 800051c:	f000 fbce 	bl	8000cbc <changing>
						HAL_UART_Transmit(&huart2,(uint8_t*) r_buffer, 2, 10);
						HAL_Delay(50);

					}*/
				//idle_mode,init_uc,init_motor,motor_ready,manual_mode,auto_mode,info_mode
					 HAL_UART_Receive(&huart2,(uint8_t*) r_buffer, 2, 10);
 8000520:	1d39      	adds	r1, r7, #4
 8000522:	230a      	movs	r3, #10
 8000524:	2202      	movs	r2, #2
 8000526:	481c      	ldr	r0, [pc, #112]	; (8000598 <main+0xd8>)
 8000528:	f004 fbde 	bl	8004ce8 <HAL_UART_Receive>
					 HAL_Delay(50);
 800052c:	2032      	movs	r0, #50	; 0x32
 800052e:	f000 fd0b 	bl	8000f48 <HAL_Delay>
					 HAL_UART_Transmit(&huart2,(uint8_t*) r_buffer, 2, 10);
 8000532:	1d39      	adds	r1, r7, #4
 8000534:	230a      	movs	r3, #10
 8000536:	2202      	movs	r2, #2
 8000538:	4817      	ldr	r0, [pc, #92]	; (8000598 <main+0xd8>)
 800053a:	f004 fb41 	bl	8004bc0 <HAL_UART_Transmit>
					 HAL_Delay(50);
 800053e:	2032      	movs	r0, #50	; 0x32
 8000540:	f000 fd02 	bl	8000f48 <HAL_Delay>
						if(r_buffer[0]=='0') etat=idle_mode;
 8000544:	793b      	ldrb	r3, [r7, #4]
 8000546:	2b30      	cmp	r3, #48	; 0x30
 8000548:	d101      	bne.n	800054e <main+0x8e>
 800054a:	2300      	movs	r3, #0
 800054c:	71fb      	strb	r3, [r7, #7]
						if(r_buffer[0]=='1') etat=init_uc;
 800054e:	793b      	ldrb	r3, [r7, #4]
 8000550:	2b31      	cmp	r3, #49	; 0x31
 8000552:	d101      	bne.n	8000558 <main+0x98>
 8000554:	2301      	movs	r3, #1
 8000556:	71fb      	strb	r3, [r7, #7]
						if(r_buffer[0]=='2') etat=init_motor;
 8000558:	793b      	ldrb	r3, [r7, #4]
 800055a:	2b32      	cmp	r3, #50	; 0x32
 800055c:	d101      	bne.n	8000562 <main+0xa2>
 800055e:	2302      	movs	r3, #2
 8000560:	71fb      	strb	r3, [r7, #7]
						if(r_buffer[0]=='3') etat=motor_ready;
 8000562:	793b      	ldrb	r3, [r7, #4]
 8000564:	2b33      	cmp	r3, #51	; 0x33
 8000566:	d101      	bne.n	800056c <main+0xac>
 8000568:	2303      	movs	r3, #3
 800056a:	71fb      	strb	r3, [r7, #7]
						if(r_buffer[0]=='4') etat=manual_mode;
 800056c:	793b      	ldrb	r3, [r7, #4]
 800056e:	2b34      	cmp	r3, #52	; 0x34
 8000570:	d101      	bne.n	8000576 <main+0xb6>
 8000572:	2304      	movs	r3, #4
 8000574:	71fb      	strb	r3, [r7, #7]
						if(r_buffer[0]=='5') etat=auto_mode;
 8000576:	793b      	ldrb	r3, [r7, #4]
 8000578:	2b35      	cmp	r3, #53	; 0x35
 800057a:	d101      	bne.n	8000580 <main+0xc0>
 800057c:	2305      	movs	r3, #5
 800057e:	71fb      	strb	r3, [r7, #7]
						if(r_buffer[0]=='6') etat=info_mode;
 8000580:	793b      	ldrb	r3, [r7, #4]
 8000582:	2b36      	cmp	r3, #54	; 0x36
 8000584:	d1c3      	bne.n	800050e <main+0x4e>
 8000586:	2306      	movs	r3, #6
 8000588:	71fb      	strb	r3, [r7, #7]
		__HAL_UART_CLEAR_OREFLAG(&huart2);
 800058a:	e7c0      	b.n	800050e <main+0x4e>
 800058c:	200000ac 	.word	0x200000ac
 8000590:	40000400 	.word	0x40000400
 8000594:	08005770 	.word	0x08005770
 8000598:	20000028 	.word	0x20000028

0800059c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800059c:	b580      	push	{r7, lr}
 800059e:	b096      	sub	sp, #88	; 0x58
 80005a0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80005a2:	f107 0314 	add.w	r3, r7, #20
 80005a6:	2244      	movs	r2, #68	; 0x44
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f005 f8cc 	bl	8005748 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80005b0:	463b      	mov	r3, r7
 80005b2:	2200      	movs	r2, #0
 80005b4:	601a      	str	r2, [r3, #0]
 80005b6:	605a      	str	r2, [r3, #4]
 80005b8:	609a      	str	r2, [r3, #8]
 80005ba:	60da      	str	r2, [r3, #12]
 80005bc:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 80005be:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005c2:	f001 ff5d 	bl	8002480 <HAL_PWREx_ControlVoltageScaling>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 80005cc:	f000 f9bc 	bl	8000948 <Error_Handler>
	}
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d0:	2302      	movs	r3, #2
 80005d2:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005d8:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005da:	2310      	movs	r3, #16
 80005dc:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005de:	2302      	movs	r3, #2
 80005e0:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005e2:	2302      	movs	r3, #2
 80005e4:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 80005e6:	2301      	movs	r3, #1
 80005e8:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 80005ea:	230a      	movs	r3, #10
 80005ec:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005ee:	2307      	movs	r3, #7
 80005f0:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005f2:	2302      	movs	r3, #2
 80005f4:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005f6:	2302      	movs	r3, #2
 80005f8:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80005fa:	f107 0314 	add.w	r3, r7, #20
 80005fe:	4618      	mov	r0, r3
 8000600:	f001 ff94 	bl	800252c <HAL_RCC_OscConfig>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0x72>
		Error_Handler();
 800060a:	f000 f99d 	bl	8000948 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800060e:	230f      	movs	r3, #15
 8000610:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000612:	2303      	movs	r3, #3
 8000614:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000616:	2300      	movs	r3, #0
 8000618:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800061a:	2300      	movs	r3, #0
 800061c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800061e:	2300      	movs	r3, #0
 8000620:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8000622:	463b      	mov	r3, r7
 8000624:	2104      	movs	r1, #4
 8000626:	4618      	mov	r0, r3
 8000628:	f002 fb66 	bl	8002cf8 <HAL_RCC_ClockConfig>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0x9a>
		Error_Handler();
 8000632:	f000 f989 	bl	8000948 <Error_Handler>
	}
}
 8000636:	bf00      	nop
 8000638:	3758      	adds	r7, #88	; 0x58
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
	...

08000640 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000640:	b580      	push	{r7, lr}
 8000642:	b08a      	sub	sp, #40	; 0x28
 8000644:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 8000646:	f107 031c 	add.w	r3, r7, #28
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]
 8000660:	615a      	str	r2, [r3, #20]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000662:	4b2f      	ldr	r3, [pc, #188]	; (8000720 <MX_ADC1_Init+0xe0>)
 8000664:	4a2f      	ldr	r2, [pc, #188]	; (8000724 <MX_ADC1_Init+0xe4>)
 8000666:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000668:	4b2d      	ldr	r3, [pc, #180]	; (8000720 <MX_ADC1_Init+0xe0>)
 800066a:	2200      	movs	r2, #0
 800066c:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800066e:	4b2c      	ldr	r3, [pc, #176]	; (8000720 <MX_ADC1_Init+0xe0>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000674:	4b2a      	ldr	r3, [pc, #168]	; (8000720 <MX_ADC1_Init+0xe0>)
 8000676:	2200      	movs	r2, #0
 8000678:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800067a:	4b29      	ldr	r3, [pc, #164]	; (8000720 <MX_ADC1_Init+0xe0>)
 800067c:	2200      	movs	r2, #0
 800067e:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000680:	4b27      	ldr	r3, [pc, #156]	; (8000720 <MX_ADC1_Init+0xe0>)
 8000682:	2204      	movs	r2, #4
 8000684:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8000686:	4b26      	ldr	r3, [pc, #152]	; (8000720 <MX_ADC1_Init+0xe0>)
 8000688:	2200      	movs	r2, #0
 800068a:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 800068c:	4b24      	ldr	r3, [pc, #144]	; (8000720 <MX_ADC1_Init+0xe0>)
 800068e:	2200      	movs	r2, #0
 8000690:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 8000692:	4b23      	ldr	r3, [pc, #140]	; (8000720 <MX_ADC1_Init+0xe0>)
 8000694:	2201      	movs	r2, #1
 8000696:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000698:	4b21      	ldr	r3, [pc, #132]	; (8000720 <MX_ADC1_Init+0xe0>)
 800069a:	2200      	movs	r2, #0
 800069c:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006a0:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <MX_ADC1_Init+0xe0>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006a6:	4b1e      	ldr	r3, [pc, #120]	; (8000720 <MX_ADC1_Init+0xe0>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80006ac:	4b1c      	ldr	r3, [pc, #112]	; (8000720 <MX_ADC1_Init+0xe0>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006b4:	4b1a      	ldr	r3, [pc, #104]	; (8000720 <MX_ADC1_Init+0xe0>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 80006ba:	4b19      	ldr	r3, [pc, #100]	; (8000720 <MX_ADC1_Init+0xe0>)
 80006bc:	2200      	movs	r2, #0
 80006be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80006c2:	4817      	ldr	r0, [pc, #92]	; (8000720 <MX_ADC1_Init+0xe0>)
 80006c4:	f000 fdf0 	bl	80012a8 <HAL_ADC_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_ADC1_Init+0x92>
		Error_Handler();
 80006ce:	f000 f93b 	bl	8000948 <Error_Handler>
	}
	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 80006d2:	2300      	movs	r3, #0
 80006d4:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 80006d6:	f107 031c 	add.w	r3, r7, #28
 80006da:	4619      	mov	r1, r3
 80006dc:	4810      	ldr	r0, [pc, #64]	; (8000720 <MX_ADC1_Init+0xe0>)
 80006de:	f001 fb4f 	bl	8001d80 <HAL_ADCEx_MultiModeConfigChannel>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_ADC1_Init+0xac>
		Error_Handler();
 80006e8:	f000 f92e 	bl	8000948 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 80006ec:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <MX_ADC1_Init+0xe8>)
 80006ee:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80006f0:	2306      	movs	r3, #6
 80006f2:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006f4:	2300      	movs	r3, #0
 80006f6:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006f8:	237f      	movs	r3, #127	; 0x7f
 80006fa:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006fc:	2304      	movs	r3, #4
 80006fe:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8000700:	2300      	movs	r3, #0
 8000702:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	4619      	mov	r1, r3
 8000708:	4805      	ldr	r0, [pc, #20]	; (8000720 <MX_ADC1_Init+0xe0>)
 800070a:	f000 ff23 	bl	8001554 <HAL_ADC_ConfigChannel>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ADC1_Init+0xd8>
		Error_Handler();
 8000714:	f000 f918 	bl	8000948 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000718:	bf00      	nop
 800071a:	3728      	adds	r7, #40	; 0x28
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	200000fc 	.word	0x200000fc
 8000724:	50040000 	.word	0x50040000
 8000728:	14f00020 	.word	0x14f00020

0800072c <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 800072c:	b580      	push	{r7, lr}
 800072e:	b08e      	sub	sp, #56	; 0x38
 8000730:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000732:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000740:	f107 031c 	add.w	r3, r7, #28
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800074c:	463b      	mov	r3, r7
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
 8000758:	611a      	str	r2, [r3, #16]
 800075a:	615a      	str	r2, [r3, #20]
 800075c:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 800075e:	4b2d      	ldr	r3, [pc, #180]	; (8000814 <MX_TIM3_Init+0xe8>)
 8000760:	4a2d      	ldr	r2, [pc, #180]	; (8000818 <MX_TIM3_Init+0xec>)
 8000762:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 38;	  		//38
 8000764:	4b2b      	ldr	r3, [pc, #172]	; (8000814 <MX_TIM3_Init+0xe8>)
 8000766:	2226      	movs	r2, #38	; 0x26
 8000768:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800076a:	4b2a      	ldr	r3, [pc, #168]	; (8000814 <MX_TIM3_Init+0xe8>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 4096;
 8000770:	4b28      	ldr	r3, [pc, #160]	; (8000814 <MX_TIM3_Init+0xe8>)
 8000772:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000776:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000778:	4b26      	ldr	r3, [pc, #152]	; (8000814 <MX_TIM3_Init+0xe8>)
 800077a:	2200      	movs	r2, #0
 800077c:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800077e:	4b25      	ldr	r3, [pc, #148]	; (8000814 <MX_TIM3_Init+0xe8>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8000784:	4823      	ldr	r0, [pc, #140]	; (8000814 <MX_TIM3_Init+0xe8>)
 8000786:	f003 f979 	bl	8003a7c <HAL_TIM_Base_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_TIM3_Init+0x68>
		Error_Handler();
 8000790:	f000 f8da 	bl	8000948 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000794:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000798:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 800079a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800079e:	4619      	mov	r1, r3
 80007a0:	481c      	ldr	r0, [pc, #112]	; (8000814 <MX_TIM3_Init+0xe8>)
 80007a2:	f003 fc3d 	bl	8004020 <HAL_TIM_ConfigClockSource>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_TIM3_Init+0x84>
		Error_Handler();
 80007ac:	f000 f8cc 	bl	8000948 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 80007b0:	4818      	ldr	r0, [pc, #96]	; (8000814 <MX_TIM3_Init+0xe8>)
 80007b2:	f003 f9ba 	bl	8003b2a <HAL_TIM_PWM_Init>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_TIM3_Init+0x94>
		Error_Handler();
 80007bc:	f000 f8c4 	bl	8000948 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007c4:	2300      	movs	r3, #0
 80007c6:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80007c8:	f107 031c 	add.w	r3, r7, #28
 80007cc:	4619      	mov	r1, r3
 80007ce:	4811      	ldr	r0, [pc, #68]	; (8000814 <MX_TIM3_Init+0xe8>)
 80007d0:	f004 f920 	bl	8004a14 <HAL_TIMEx_MasterConfigSynchronization>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_TIM3_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 80007da:	f000 f8b5 	bl	8000948 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007de:	2360      	movs	r3, #96	; 0x60
 80007e0:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007e6:	2300      	movs	r3, #0
 80007e8:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007ea:	2300      	movs	r3, #0
 80007ec:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 80007ee:	463b      	mov	r3, r7
 80007f0:	2204      	movs	r2, #4
 80007f2:	4619      	mov	r1, r3
 80007f4:	4807      	ldr	r0, [pc, #28]	; (8000814 <MX_TIM3_Init+0xe8>)
 80007f6:	f003 faff 	bl	8003df8 <HAL_TIM_PWM_ConfigChannel>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_TIM3_Init+0xd8>
			!= HAL_OK) {
		Error_Handler();
 8000800:	f000 f8a2 	bl	8000948 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8000804:	4803      	ldr	r0, [pc, #12]	; (8000814 <MX_TIM3_Init+0xe8>)
 8000806:	f000 f977 	bl	8000af8 <HAL_TIM_MspPostInit>

}
 800080a:	bf00      	nop
 800080c:	3738      	adds	r7, #56	; 0x38
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	200000ac 	.word	0x200000ac
 8000818:	40000400 	.word	0x40000400

0800081c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000820:	4b14      	ldr	r3, [pc, #80]	; (8000874 <MX_USART2_UART_Init+0x58>)
 8000822:	4a15      	ldr	r2, [pc, #84]	; (8000878 <MX_USART2_UART_Init+0x5c>)
 8000824:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000826:	4b13      	ldr	r3, [pc, #76]	; (8000874 <MX_USART2_UART_Init+0x58>)
 8000828:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800082c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800082e:	4b11      	ldr	r3, [pc, #68]	; (8000874 <MX_USART2_UART_Init+0x58>)
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000834:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <MX_USART2_UART_Init+0x58>)
 8000836:	2200      	movs	r2, #0
 8000838:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800083a:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <MX_USART2_UART_Init+0x58>)
 800083c:	2200      	movs	r2, #0
 800083e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000840:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <MX_USART2_UART_Init+0x58>)
 8000842:	220c      	movs	r2, #12
 8000844:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000846:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <MX_USART2_UART_Init+0x58>)
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800084c:	4b09      	ldr	r3, [pc, #36]	; (8000874 <MX_USART2_UART_Init+0x58>)
 800084e:	2200      	movs	r2, #0
 8000850:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000852:	4b08      	ldr	r3, [pc, #32]	; (8000874 <MX_USART2_UART_Init+0x58>)
 8000854:	2200      	movs	r2, #0
 8000856:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <MX_USART2_UART_Init+0x58>)
 800085a:	2200      	movs	r2, #0
 800085c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800085e:	4805      	ldr	r0, [pc, #20]	; (8000874 <MX_USART2_UART_Init+0x58>)
 8000860:	f004 f960 	bl	8004b24 <HAL_UART_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_USART2_UART_Init+0x52>
		Error_Handler();
 800086a:	f000 f86d 	bl	8000948 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	20000028 	.word	0x20000028
 8000878:	40004400 	.word	0x40004400

0800087c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800087c:	b580      	push	{r7, lr}
 800087e:	b08a      	sub	sp, #40	; 0x28
 8000880:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000882:	f107 0314 	add.w	r3, r7, #20
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
 8000890:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000892:	4b2b      	ldr	r3, [pc, #172]	; (8000940 <MX_GPIO_Init+0xc4>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000896:	4a2a      	ldr	r2, [pc, #168]	; (8000940 <MX_GPIO_Init+0xc4>)
 8000898:	f043 0304 	orr.w	r3, r3, #4
 800089c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800089e:	4b28      	ldr	r3, [pc, #160]	; (8000940 <MX_GPIO_Init+0xc4>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a2:	f003 0304 	and.w	r3, r3, #4
 80008a6:	613b      	str	r3, [r7, #16]
 80008a8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80008aa:	4b25      	ldr	r3, [pc, #148]	; (8000940 <MX_GPIO_Init+0xc4>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ae:	4a24      	ldr	r2, [pc, #144]	; (8000940 <MX_GPIO_Init+0xc4>)
 80008b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008b6:	4b22      	ldr	r3, [pc, #136]	; (8000940 <MX_GPIO_Init+0xc4>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008c2:	4b1f      	ldr	r3, [pc, #124]	; (8000940 <MX_GPIO_Init+0xc4>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c6:	4a1e      	ldr	r2, [pc, #120]	; (8000940 <MX_GPIO_Init+0xc4>)
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ce:	4b1c      	ldr	r3, [pc, #112]	; (8000940 <MX_GPIO_Init+0xc4>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	60bb      	str	r3, [r7, #8]
 80008d8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80008da:	4b19      	ldr	r3, [pc, #100]	; (8000940 <MX_GPIO_Init+0xc4>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008de:	4a18      	ldr	r2, [pc, #96]	; (8000940 <MX_GPIO_Init+0xc4>)
 80008e0:	f043 0302 	orr.w	r3, r3, #2
 80008e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008e6:	4b16      	ldr	r3, [pc, #88]	; (8000940 <MX_GPIO_Init+0xc4>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ea:	f003 0302 	and.w	r3, r3, #2
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2120      	movs	r1, #32
 80008f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008fa:	f001 fd81 	bl	8002400 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80008fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000902:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000904:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000908:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800090e:	f107 0314 	add.w	r3, r7, #20
 8000912:	4619      	mov	r1, r3
 8000914:	480b      	ldr	r0, [pc, #44]	; (8000944 <MX_GPIO_Init+0xc8>)
 8000916:	f001 fbc9 	bl	80020ac <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 800091a:	2320      	movs	r3, #32
 800091c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091e:	2301      	movs	r3, #1
 8000920:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2300      	movs	r3, #0
 8000928:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800092a:	f107 0314 	add.w	r3, r7, #20
 800092e:	4619      	mov	r1, r3
 8000930:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000934:	f001 fbba 	bl	80020ac <HAL_GPIO_Init>

}
 8000938:	bf00      	nop
 800093a:	3728      	adds	r7, #40	; 0x28
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40021000 	.word	0x40021000
 8000944:	48000800 	.word	0x48000800

08000948 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800094c:	b672      	cpsid	i
}
 800094e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000950:	e7fe      	b.n	8000950 <Error_Handler+0x8>

08000952 <setGreenLed>:
#include  <stdio.h>
#include  <errno.h>
#include  <sys/unistd.h> // STDOUT_FILENO, STDERR_FILENO

// On board green LED On
void setGreenLed() {
 8000952:	b580      	push	{r7, lr}
 8000954:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8000956:	2201      	movs	r2, #1
 8000958:	2120      	movs	r1, #32
 800095a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800095e:	f001 fd4f 	bl	8002400 <HAL_GPIO_WritePin>
}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}

08000966 <blinkGreenLed>:

// On board green LED blink
void blinkGreenLed(int nb, int delay) {
 8000966:	b580      	push	{r7, lr}
 8000968:	b084      	sub	sp, #16
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
 800096e:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < nb; i++) {
 8000970:	2300      	movs	r3, #0
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	e00b      	b.n	800098e <blinkGreenLed+0x28>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000976:	2120      	movs	r1, #32
 8000978:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800097c:	f001 fd58 	bl	8002430 <HAL_GPIO_TogglePin>
		HAL_Delay(delay);
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	4618      	mov	r0, r3
 8000984:	f000 fae0 	bl	8000f48 <HAL_Delay>
	for (int i = 0; i < nb; i++) {
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	3301      	adds	r3, #1
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	68fa      	ldr	r2, [r7, #12]
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	429a      	cmp	r2, r3
 8000994:	dbef      	blt.n	8000976 <blinkGreenLed+0x10>
	}
}
 8000996:	bf00      	nop
 8000998:	bf00      	nop
 800099a:	3710      	adds	r7, #16
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}

080009a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a6:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <HAL_MspInit+0x44>)
 80009a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009aa:	4a0e      	ldr	r2, [pc, #56]	; (80009e4 <HAL_MspInit+0x44>)
 80009ac:	f043 0301 	orr.w	r3, r3, #1
 80009b0:	6613      	str	r3, [r2, #96]	; 0x60
 80009b2:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <HAL_MspInit+0x44>)
 80009b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009be:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <HAL_MspInit+0x44>)
 80009c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009c2:	4a08      	ldr	r2, [pc, #32]	; (80009e4 <HAL_MspInit+0x44>)
 80009c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c8:	6593      	str	r3, [r2, #88]	; 0x58
 80009ca:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <HAL_MspInit+0x44>)
 80009cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d2:	603b      	str	r3, [r7, #0]
 80009d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	40021000 	.word	0x40021000

080009e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b0ac      	sub	sp, #176	; 0xb0
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	2288      	movs	r2, #136	; 0x88
 8000a06:	2100      	movs	r1, #0
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f004 fe9d 	bl	8005748 <memset>
  if(hadc->Instance==ADC1)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a27      	ldr	r2, [pc, #156]	; (8000ab0 <HAL_ADC_MspInit+0xc8>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d147      	bne.n	8000aa8 <HAL_ADC_MspInit+0xc0>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a18:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a1c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000a1e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000a26:	2302      	movs	r3, #2
 8000a28:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000a2e:	2308      	movs	r3, #8
 8000a30:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000a32:	2307      	movs	r3, #7
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000a36:	2302      	movs	r3, #2
 8000a38:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000a3e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a42:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f002 fb5b 	bl	8003104 <HAL_RCCEx_PeriphCLKConfig>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000a54:	f7ff ff78 	bl	8000948 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000a58:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <HAL_ADC_MspInit+0xcc>)
 8000a5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5c:	4a15      	ldr	r2, [pc, #84]	; (8000ab4 <HAL_ADC_MspInit+0xcc>)
 8000a5e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a64:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <HAL_ADC_MspInit+0xcc>)
 8000a66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a6c:	613b      	str	r3, [r7, #16]
 8000a6e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a70:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <HAL_ADC_MspInit+0xcc>)
 8000a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a74:	4a0f      	ldr	r2, [pc, #60]	; (8000ab4 <HAL_ADC_MspInit+0xcc>)
 8000a76:	f043 0301 	orr.w	r3, r3, #1
 8000a7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a7c:	4b0d      	ldr	r3, [pc, #52]	; (8000ab4 <HAL_ADC_MspInit+0xcc>)
 8000a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a80:	f003 0301 	and.w	r3, r3, #1
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a8e:	230b      	movs	r3, #11
 8000a90:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa4:	f001 fb02 	bl	80020ac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000aa8:	bf00      	nop
 8000aaa:	37b0      	adds	r7, #176	; 0xb0
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	50040000 	.word	0x50040000
 8000ab4:	40021000 	.word	0x40021000

08000ab8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a0a      	ldr	r2, [pc, #40]	; (8000af0 <HAL_TIM_Base_MspInit+0x38>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d10b      	bne.n	8000ae2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000aca:	4b0a      	ldr	r3, [pc, #40]	; (8000af4 <HAL_TIM_Base_MspInit+0x3c>)
 8000acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ace:	4a09      	ldr	r2, [pc, #36]	; (8000af4 <HAL_TIM_Base_MspInit+0x3c>)
 8000ad0:	f043 0302 	orr.w	r3, r3, #2
 8000ad4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ad6:	4b07      	ldr	r3, [pc, #28]	; (8000af4 <HAL_TIM_Base_MspInit+0x3c>)
 8000ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ada:	f003 0302 	and.w	r3, r3, #2
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000ae2:	bf00      	nop
 8000ae4:	3714      	adds	r7, #20
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	40000400 	.word	0x40000400
 8000af4:	40021000 	.word	0x40021000

08000af8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b088      	sub	sp, #32
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 030c 	add.w	r3, r7, #12
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a11      	ldr	r2, [pc, #68]	; (8000b5c <HAL_TIM_MspPostInit+0x64>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d11c      	bne.n	8000b54 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1a:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <HAL_TIM_MspPostInit+0x68>)
 8000b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1e:	4a10      	ldr	r2, [pc, #64]	; (8000b60 <HAL_TIM_MspPostInit+0x68>)
 8000b20:	f043 0301 	orr.w	r3, r3, #1
 8000b24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b26:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <HAL_TIM_MspPostInit+0x68>)
 8000b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	60bb      	str	r3, [r7, #8]
 8000b30:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b32:	2380      	movs	r3, #128	; 0x80
 8000b34:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b36:	2302      	movs	r3, #2
 8000b38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000b42:	2302      	movs	r3, #2
 8000b44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b46:	f107 030c 	add.w	r3, r7, #12
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b50:	f001 faac 	bl	80020ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000b54:	bf00      	nop
 8000b56:	3720      	adds	r7, #32
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40000400 	.word	0x40000400
 8000b60:	40021000 	.word	0x40021000

08000b64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b0ac      	sub	sp, #176	; 0xb0
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	2288      	movs	r2, #136	; 0x88
 8000b82:	2100      	movs	r1, #0
 8000b84:	4618      	mov	r0, r3
 8000b86:	f004 fddf 	bl	8005748 <memset>
  if(huart->Instance==USART2)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a21      	ldr	r2, [pc, #132]	; (8000c14 <HAL_UART_MspInit+0xb0>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d13b      	bne.n	8000c0c <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b94:	2302      	movs	r3, #2
 8000b96:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f002 faaf 	bl	8003104 <HAL_RCCEx_PeriphCLKConfig>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000bac:	f7ff fecc 	bl	8000948 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bb0:	4b19      	ldr	r3, [pc, #100]	; (8000c18 <HAL_UART_MspInit+0xb4>)
 8000bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bb4:	4a18      	ldr	r2, [pc, #96]	; (8000c18 <HAL_UART_MspInit+0xb4>)
 8000bb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bba:	6593      	str	r3, [r2, #88]	; 0x58
 8000bbc:	4b16      	ldr	r3, [pc, #88]	; (8000c18 <HAL_UART_MspInit+0xb4>)
 8000bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bc4:	613b      	str	r3, [r7, #16]
 8000bc6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc8:	4b13      	ldr	r3, [pc, #76]	; (8000c18 <HAL_UART_MspInit+0xb4>)
 8000bca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bcc:	4a12      	ldr	r2, [pc, #72]	; (8000c18 <HAL_UART_MspInit+0xb4>)
 8000bce:	f043 0301 	orr.w	r3, r3, #1
 8000bd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bd4:	4b10      	ldr	r3, [pc, #64]	; (8000c18 <HAL_UART_MspInit+0xb4>)
 8000bd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd8:	f003 0301 	and.w	r3, r3, #1
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000be0:	230c      	movs	r3, #12
 8000be2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be6:	2302      	movs	r3, #2
 8000be8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bf8:	2307      	movs	r3, #7
 8000bfa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c02:	4619      	mov	r1, r3
 8000c04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c08:	f001 fa50 	bl	80020ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c0c:	bf00      	nop
 8000c0e:	37b0      	adds	r7, #176	; 0xb0
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40004400 	.word	0x40004400
 8000c18:	40021000 	.word	0x40021000

08000c1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <NMI_Handler+0x4>

08000c22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c26:	e7fe      	b.n	8000c26 <HardFault_Handler+0x4>

08000c28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c2c:	e7fe      	b.n	8000c2c <MemManage_Handler+0x4>

08000c2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c32:	e7fe      	b.n	8000c32 <BusFault_Handler+0x4>

08000c34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <UsageFault_Handler+0x4>

08000c3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr

08000c56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c68:	f000 f94e 	bl	8000f08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c6c:	bf00      	nop
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c74:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <SystemInit+0x20>)
 8000c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c7a:	4a05      	ldr	r2, [pc, #20]	; (8000c90 <SystemInit+0x20>)
 8000c7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <y_print>:
void load_pwm(TIM_HandleTypeDef htimX, int val) {

	htimX.Instance->CCR2 = val;
}

void y_print(UART_HandleTypeDef *huart, char *mess) {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	6039      	str	r1, [r7, #0]

	if (HAL_UART_Transmit(huart, (uint8_t*) mess, 25, 100) != HAL_OK)
 8000c9e:	2364      	movs	r3, #100	; 0x64
 8000ca0:	2219      	movs	r2, #25
 8000ca2:	6839      	ldr	r1, [r7, #0]
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f003 ff8b 	bl	8004bc0 <HAL_UART_Transmit>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <y_print+0x20>
		Error_Handler();
 8000cb0:	f7ff fe4a 	bl	8000948 <Error_Handler>
}
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <changing>:

void changing(enum states etat, UART_HandleTypeDef *huart) {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	6039      	str	r1, [r7, #0]
 8000cc6:	71fb      	strb	r3, [r7, #7]
	switch (etat) {
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	2b06      	cmp	r3, #6
 8000ccc:	f200 8082 	bhi.w	8000dd4 <changing+0x118>
 8000cd0:	a201      	add	r2, pc, #4	; (adr r2, 8000cd8 <changing+0x1c>)
 8000cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cd6:	bf00      	nop
 8000cd8:	08000cf5 	.word	0x08000cf5
 8000cdc:	08000d35 	.word	0x08000d35
 8000ce0:	08000d55 	.word	0x08000d55
 8000ce4:	08000d75 	.word	0x08000d75
 8000ce8:	08000db5 	.word	0x08000db5
 8000cec:	08000d95 	.word	0x08000d95
 8000cf0:	08000d15 	.word	0x08000d15

	case idle_mode:
		if (HAL_UART_Transmit(huart, (uint8_t*) "Idle mode \n\r", 15, 100)
 8000cf4:	2364      	movs	r3, #100	; 0x64
 8000cf6:	220f      	movs	r2, #15
 8000cf8:	4939      	ldr	r1, [pc, #228]	; (8000de0 <changing+0x124>)
 8000cfa:	6838      	ldr	r0, [r7, #0]
 8000cfc:	f003 ff60 	bl	8004bc0 <HAL_UART_Transmit>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <changing+0x4e>
				!= HAL_OK)
			Error_Handler();
 8000d06:	f7ff fe1f 	bl	8000948 <Error_Handler>
		HAL_Delay(3000);
 8000d0a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000d0e:	f000 f91b 	bl	8000f48 <HAL_Delay>

		break;
 8000d12:	e060      	b.n	8000dd6 <changing+0x11a>
	case info_mode:
		if (HAL_UART_Transmit(huart, (uint8_t*) "Info mode\n\r", 15, 100)
 8000d14:	2364      	movs	r3, #100	; 0x64
 8000d16:	220f      	movs	r2, #15
 8000d18:	4932      	ldr	r1, [pc, #200]	; (8000de4 <changing+0x128>)
 8000d1a:	6838      	ldr	r0, [r7, #0]
 8000d1c:	f003 ff50 	bl	8004bc0 <HAL_UART_Transmit>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <changing+0x6e>
				!= HAL_OK)
			Error_Handler();
 8000d26:	f7ff fe0f 	bl	8000948 <Error_Handler>
		HAL_Delay(3000);
 8000d2a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000d2e:	f000 f90b 	bl	8000f48 <HAL_Delay>

		break;
 8000d32:	e050      	b.n	8000dd6 <changing+0x11a>
	case init_uc:
		if (HAL_UART_Transmit(huart, (uint8_t*) "UC Initialization \n\r", 25,
 8000d34:	2364      	movs	r3, #100	; 0x64
 8000d36:	2219      	movs	r2, #25
 8000d38:	492b      	ldr	r1, [pc, #172]	; (8000de8 <changing+0x12c>)
 8000d3a:	6838      	ldr	r0, [r7, #0]
 8000d3c:	f003 ff40 	bl	8004bc0 <HAL_UART_Transmit>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <changing+0x8e>
				100) != HAL_OK)
			Error_Handler();
 8000d46:	f7ff fdff 	bl	8000948 <Error_Handler>
		HAL_Delay(3000);
 8000d4a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000d4e:	f000 f8fb 	bl	8000f48 <HAL_Delay>
		break;
 8000d52:	e040      	b.n	8000dd6 <changing+0x11a>
	case init_motor:
		if (HAL_UART_Transmit(huart, (uint8_t*) "Motor Initialization \n\r", 27,
 8000d54:	2364      	movs	r3, #100	; 0x64
 8000d56:	221b      	movs	r2, #27
 8000d58:	4924      	ldr	r1, [pc, #144]	; (8000dec <changing+0x130>)
 8000d5a:	6838      	ldr	r0, [r7, #0]
 8000d5c:	f003 ff30 	bl	8004bc0 <HAL_UART_Transmit>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <changing+0xae>
				100) != HAL_OK)
			Error_Handler();
 8000d66:	f7ff fdef 	bl	8000948 <Error_Handler>
		HAL_Delay(3000);
 8000d6a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000d6e:	f000 f8eb 	bl	8000f48 <HAL_Delay>
		break;
 8000d72:	e030      	b.n	8000dd6 <changing+0x11a>
	case motor_ready:
		if (HAL_UART_Transmit(huart, (uint8_t*) "Motor ready \n\r", 15, 100)
 8000d74:	2364      	movs	r3, #100	; 0x64
 8000d76:	220f      	movs	r2, #15
 8000d78:	491d      	ldr	r1, [pc, #116]	; (8000df0 <changing+0x134>)
 8000d7a:	6838      	ldr	r0, [r7, #0]
 8000d7c:	f003 ff20 	bl	8004bc0 <HAL_UART_Transmit>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <changing+0xce>
				!= HAL_OK)
			Error_Handler();
 8000d86:	f7ff fddf 	bl	8000948 <Error_Handler>
		HAL_Delay(3000);
 8000d8a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000d8e:	f000 f8db 	bl	8000f48 <HAL_Delay>

		break;
 8000d92:	e020      	b.n	8000dd6 <changing+0x11a>
	case auto_mode:
		if (HAL_UART_Transmit(huart, (uint8_t*) "Auto mode \n\r", 15, 100)
 8000d94:	2364      	movs	r3, #100	; 0x64
 8000d96:	220f      	movs	r2, #15
 8000d98:	4916      	ldr	r1, [pc, #88]	; (8000df4 <changing+0x138>)
 8000d9a:	6838      	ldr	r0, [r7, #0]
 8000d9c:	f003 ff10 	bl	8004bc0 <HAL_UART_Transmit>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <changing+0xee>
				!= HAL_OK)
			Error_Handler();
 8000da6:	f7ff fdcf 	bl	8000948 <Error_Handler>
		HAL_Delay(3000);
 8000daa:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000dae:	f000 f8cb 	bl	8000f48 <HAL_Delay>

		break;
 8000db2:	e010      	b.n	8000dd6 <changing+0x11a>
	case manual_mode:
		if (HAL_UART_Transmit(huart, (uint8_t*) "Manual mode \n\r", 15, 100)
 8000db4:	2364      	movs	r3, #100	; 0x64
 8000db6:	220f      	movs	r2, #15
 8000db8:	490f      	ldr	r1, [pc, #60]	; (8000df8 <changing+0x13c>)
 8000dba:	6838      	ldr	r0, [r7, #0]
 8000dbc:	f003 ff00 	bl	8004bc0 <HAL_UART_Transmit>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <changing+0x10e>
				!= HAL_OK)
			Error_Handler();
 8000dc6:	f7ff fdbf 	bl	8000948 <Error_Handler>
		HAL_Delay(3000);
 8000dca:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000dce:	f000 f8bb 	bl	8000f48 <HAL_Delay>

		break;
 8000dd2:	e000      	b.n	8000dd6 <changing+0x11a>
	default:
		break;
 8000dd4:	bf00      	nop

	}

}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	0800578c 	.word	0x0800578c
 8000de4:	0800579c 	.word	0x0800579c
 8000de8:	080057a8 	.word	0x080057a8
 8000dec:	080057c0 	.word	0x080057c0
 8000df0:	080057d8 	.word	0x080057d8
 8000df4:	080057e8 	.word	0x080057e8
 8000df8:	080057f8 	.word	0x080057f8

08000dfc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000dfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e34 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e00:	f7ff ff36 	bl	8000c70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e04:	480c      	ldr	r0, [pc, #48]	; (8000e38 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e06:	490d      	ldr	r1, [pc, #52]	; (8000e3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e08:	4a0d      	ldr	r2, [pc, #52]	; (8000e40 <LoopForever+0xe>)
  movs r3, #0
 8000e0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e0c:	e002      	b.n	8000e14 <LoopCopyDataInit>

08000e0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e12:	3304      	adds	r3, #4

08000e14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e18:	d3f9      	bcc.n	8000e0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e1a:	4a0a      	ldr	r2, [pc, #40]	; (8000e44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e1c:	4c0a      	ldr	r4, [pc, #40]	; (8000e48 <LoopForever+0x16>)
  movs r3, #0
 8000e1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e20:	e001      	b.n	8000e26 <LoopFillZerobss>

08000e22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e24:	3204      	adds	r2, #4

08000e26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e28:	d3fb      	bcc.n	8000e22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e2a:	f004 fc69 	bl	8005700 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e2e:	f7ff fb47 	bl	80004c0 <main>

08000e32 <LoopForever>:

LoopForever:
    b LoopForever
 8000e32:	e7fe      	b.n	8000e32 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e34:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e3c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e40:	08005860 	.word	0x08005860
  ldr r2, =_sbss
 8000e44:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e48:	20000168 	.word	0x20000168

08000e4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e4c:	e7fe      	b.n	8000e4c <ADC1_2_IRQHandler>
	...

08000e50 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e56:	2300      	movs	r3, #0
 8000e58:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e5a:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <HAL_Init+0x3c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a0b      	ldr	r2, [pc, #44]	; (8000e8c <HAL_Init+0x3c>)
 8000e60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e64:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e66:	2003      	movs	r0, #3
 8000e68:	f001 f8ec 	bl	8002044 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e6c:	2000      	movs	r0, #0
 8000e6e:	f000 f80f 	bl	8000e90 <HAL_InitTick>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d002      	beq.n	8000e7e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	71fb      	strb	r3, [r7, #7]
 8000e7c:	e001      	b.n	8000e82 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e7e:	f7ff fd8f 	bl	80009a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e82:	79fb      	ldrb	r3, [r7, #7]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40022000 	.word	0x40022000

08000e90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e9c:	4b17      	ldr	r3, [pc, #92]	; (8000efc <HAL_InitTick+0x6c>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d023      	beq.n	8000eec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ea4:	4b16      	ldr	r3, [pc, #88]	; (8000f00 <HAL_InitTick+0x70>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	4b14      	ldr	r3, [pc, #80]	; (8000efc <HAL_InitTick+0x6c>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	4619      	mov	r1, r3
 8000eae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f001 f8e9 	bl	8002092 <HAL_SYSTICK_Config>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d10f      	bne.n	8000ee6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2b0f      	cmp	r3, #15
 8000eca:	d809      	bhi.n	8000ee0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	6879      	ldr	r1, [r7, #4]
 8000ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed4:	f001 f8c1 	bl	800205a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ed8:	4a0a      	ldr	r2, [pc, #40]	; (8000f04 <HAL_InitTick+0x74>)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6013      	str	r3, [r2, #0]
 8000ede:	e007      	b.n	8000ef0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	73fb      	strb	r3, [r7, #15]
 8000ee4:	e004      	b.n	8000ef0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	73fb      	strb	r3, [r7, #15]
 8000eea:	e001      	b.n	8000ef0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000eec:	2301      	movs	r3, #1
 8000eee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3710      	adds	r7, #16
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20000008 	.word	0x20000008
 8000f00:	20000000 	.word	0x20000000
 8000f04:	20000004 	.word	0x20000004

08000f08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f0c:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <HAL_IncTick+0x20>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	461a      	mov	r2, r3
 8000f12:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <HAL_IncTick+0x24>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4413      	add	r3, r2
 8000f18:	4a04      	ldr	r2, [pc, #16]	; (8000f2c <HAL_IncTick+0x24>)
 8000f1a:	6013      	str	r3, [r2, #0]
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	20000008 	.word	0x20000008
 8000f2c:	20000164 	.word	0x20000164

08000f30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  return uwTick;
 8000f34:	4b03      	ldr	r3, [pc, #12]	; (8000f44 <HAL_GetTick+0x14>)
 8000f36:	681b      	ldr	r3, [r3, #0]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	20000164 	.word	0x20000164

08000f48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f50:	f7ff ffee 	bl	8000f30 <HAL_GetTick>
 8000f54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f60:	d005      	beq.n	8000f6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f62:	4b0a      	ldr	r3, [pc, #40]	; (8000f8c <HAL_Delay+0x44>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	461a      	mov	r2, r3
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f6e:	bf00      	nop
 8000f70:	f7ff ffde 	bl	8000f30 <HAL_GetTick>
 8000f74:	4602      	mov	r2, r0
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d8f7      	bhi.n	8000f70 <HAL_Delay+0x28>
  {
  }
}
 8000f80:	bf00      	nop
 8000f82:	bf00      	nop
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000008 	.word	0x20000008

08000f90 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	431a      	orrs	r2, r3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	609a      	str	r2, [r3, #8]
}
 8000faa:	bf00      	nop
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	b083      	sub	sp, #12
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
 8000fbe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	609a      	str	r2, [r3, #8]
}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	689b      	ldr	r3, [r3, #8]
 8000fe8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b087      	sub	sp, #28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
 8001004:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	3360      	adds	r3, #96	; 0x60
 800100a:	461a      	mov	r2, r3
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	4413      	add	r3, r2
 8001012:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	4b08      	ldr	r3, [pc, #32]	; (800103c <LL_ADC_SetOffset+0x44>)
 800101a:	4013      	ands	r3, r2
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001022:	683a      	ldr	r2, [r7, #0]
 8001024:	430a      	orrs	r2, r1
 8001026:	4313      	orrs	r3, r2
 8001028:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001030:	bf00      	nop
 8001032:	371c      	adds	r7, #28
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	03fff000 	.word	0x03fff000

08001040 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	3360      	adds	r3, #96	; 0x60
 800104e:	461a      	mov	r2, r3
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	4413      	add	r3, r2
 8001056:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001060:	4618      	mov	r0, r3
 8001062:	3714      	adds	r7, #20
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800106c:	b480      	push	{r7}
 800106e:	b087      	sub	sp, #28
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	3360      	adds	r3, #96	; 0x60
 800107c:	461a      	mov	r2, r3
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	4413      	add	r3, r2
 8001084:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	431a      	orrs	r2, r3
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001096:	bf00      	nop
 8001098:	371c      	adds	r7, #28
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80010a2:	b480      	push	{r7}
 80010a4:	b087      	sub	sp, #28
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	60f8      	str	r0, [r7, #12]
 80010aa:	60b9      	str	r1, [r7, #8]
 80010ac:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	3330      	adds	r3, #48	; 0x30
 80010b2:	461a      	mov	r2, r3
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	0a1b      	lsrs	r3, r3, #8
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	f003 030c 	and.w	r3, r3, #12
 80010be:	4413      	add	r3, r2
 80010c0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	f003 031f 	and.w	r3, r3, #31
 80010cc:	211f      	movs	r1, #31
 80010ce:	fa01 f303 	lsl.w	r3, r1, r3
 80010d2:	43db      	mvns	r3, r3
 80010d4:	401a      	ands	r2, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	0e9b      	lsrs	r3, r3, #26
 80010da:	f003 011f 	and.w	r1, r3, #31
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	f003 031f 	and.w	r3, r3, #31
 80010e4:	fa01 f303 	lsl.w	r3, r1, r3
 80010e8:	431a      	orrs	r2, r3
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80010ee:	bf00      	nop
 80010f0:	371c      	adds	r7, #28
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80010fa:	b480      	push	{r7}
 80010fc:	b087      	sub	sp, #28
 80010fe:	af00      	add	r7, sp, #0
 8001100:	60f8      	str	r0, [r7, #12]
 8001102:	60b9      	str	r1, [r7, #8]
 8001104:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	3314      	adds	r3, #20
 800110a:	461a      	mov	r2, r3
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	0e5b      	lsrs	r3, r3, #25
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	f003 0304 	and.w	r3, r3, #4
 8001116:	4413      	add	r3, r2
 8001118:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	0d1b      	lsrs	r3, r3, #20
 8001122:	f003 031f 	and.w	r3, r3, #31
 8001126:	2107      	movs	r1, #7
 8001128:	fa01 f303 	lsl.w	r3, r1, r3
 800112c:	43db      	mvns	r3, r3
 800112e:	401a      	ands	r2, r3
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	0d1b      	lsrs	r3, r3, #20
 8001134:	f003 031f 	and.w	r3, r3, #31
 8001138:	6879      	ldr	r1, [r7, #4]
 800113a:	fa01 f303 	lsl.w	r3, r1, r3
 800113e:	431a      	orrs	r2, r3
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001144:	bf00      	nop
 8001146:	371c      	adds	r7, #28
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001168:	43db      	mvns	r3, r3
 800116a:	401a      	ands	r2, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f003 0318 	and.w	r3, r3, #24
 8001172:	4908      	ldr	r1, [pc, #32]	; (8001194 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001174:	40d9      	lsrs	r1, r3
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	400b      	ands	r3, r1
 800117a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800117e:	431a      	orrs	r2, r3
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001186:	bf00      	nop
 8001188:	3714      	adds	r7, #20
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	0007ffff 	.word	0x0007ffff

08001198 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80011a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	6093      	str	r3, [r2, #8]
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80011cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80011d0:	d101      	bne.n	80011d6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80011d2:	2301      	movs	r3, #1
 80011d4:	e000      	b.n	80011d8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80011d6:	2300      	movs	r3, #0
}
 80011d8:	4618      	mov	r0, r3
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80011f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011f8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800121c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001220:	d101      	bne.n	8001226 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001222:	2301      	movs	r3, #1
 8001224:	e000      	b.n	8001228 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001226:	2300      	movs	r3, #0
}
 8001228:	4618      	mov	r0, r3
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	f003 0301 	and.w	r3, r3, #1
 8001244:	2b01      	cmp	r3, #1
 8001246:	d101      	bne.n	800124c <LL_ADC_IsEnabled+0x18>
 8001248:	2301      	movs	r3, #1
 800124a:	e000      	b.n	800124e <LL_ADC_IsEnabled+0x1a>
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr

0800125a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800125a:	b480      	push	{r7}
 800125c:	b083      	sub	sp, #12
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f003 0304 	and.w	r3, r3, #4
 800126a:	2b04      	cmp	r3, #4
 800126c:	d101      	bne.n	8001272 <LL_ADC_REG_IsConversionOngoing+0x18>
 800126e:	2301      	movs	r3, #1
 8001270:	e000      	b.n	8001274 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001272:	2300      	movs	r3, #0
}
 8001274:	4618      	mov	r0, r3
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	f003 0308 	and.w	r3, r3, #8
 8001290:	2b08      	cmp	r3, #8
 8001292:	d101      	bne.n	8001298 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001294:	2301      	movs	r3, #1
 8001296:	e000      	b.n	800129a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001298:	2300      	movs	r3, #0
}
 800129a:	4618      	mov	r0, r3
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
	...

080012a8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80012a8:	b590      	push	{r4, r7, lr}
 80012aa:	b089      	sub	sp, #36	; 0x24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012b0:	2300      	movs	r3, #0
 80012b2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d101      	bne.n	80012c2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e136      	b.n	8001530 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	691b      	ldr	r3, [r3, #16]
 80012c6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d109      	bne.n	80012e4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f7ff fb89 	bl	80009e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2200      	movs	r2, #0
 80012da:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2200      	movs	r2, #0
 80012e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff ff67 	bl	80011bc <LL_ADC_IsDeepPowerDownEnabled>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d004      	beq.n	80012fe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff ff4d 	bl	8001198 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff ff82 	bl	800120c <LL_ADC_IsInternalRegulatorEnabled>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d115      	bne.n	800133a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff ff66 	bl	80011e4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001318:	4b87      	ldr	r3, [pc, #540]	; (8001538 <HAL_ADC_Init+0x290>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	099b      	lsrs	r3, r3, #6
 800131e:	4a87      	ldr	r2, [pc, #540]	; (800153c <HAL_ADC_Init+0x294>)
 8001320:	fba2 2303 	umull	r2, r3, r2, r3
 8001324:	099b      	lsrs	r3, r3, #6
 8001326:	3301      	adds	r3, #1
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800132c:	e002      	b.n	8001334 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	3b01      	subs	r3, #1
 8001332:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d1f9      	bne.n	800132e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff ff64 	bl	800120c <LL_ADC_IsInternalRegulatorEnabled>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d10d      	bne.n	8001366 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800134e:	f043 0210 	orr.w	r2, r3, #16
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800135a:	f043 0201 	orr.w	r2, r3, #1
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff ff75 	bl	800125a <LL_ADC_REG_IsConversionOngoing>
 8001370:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001376:	f003 0310 	and.w	r3, r3, #16
 800137a:	2b00      	cmp	r3, #0
 800137c:	f040 80cf 	bne.w	800151e <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	2b00      	cmp	r3, #0
 8001384:	f040 80cb 	bne.w	800151e <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800138c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001390:	f043 0202 	orr.w	r2, r3, #2
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff ff49 	bl	8001234 <LL_ADC_IsEnabled>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d115      	bne.n	80013d4 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80013a8:	4865      	ldr	r0, [pc, #404]	; (8001540 <HAL_ADC_Init+0x298>)
 80013aa:	f7ff ff43 	bl	8001234 <LL_ADC_IsEnabled>
 80013ae:	4604      	mov	r4, r0
 80013b0:	4864      	ldr	r0, [pc, #400]	; (8001544 <HAL_ADC_Init+0x29c>)
 80013b2:	f7ff ff3f 	bl	8001234 <LL_ADC_IsEnabled>
 80013b6:	4603      	mov	r3, r0
 80013b8:	431c      	orrs	r4, r3
 80013ba:	4863      	ldr	r0, [pc, #396]	; (8001548 <HAL_ADC_Init+0x2a0>)
 80013bc:	f7ff ff3a 	bl	8001234 <LL_ADC_IsEnabled>
 80013c0:	4603      	mov	r3, r0
 80013c2:	4323      	orrs	r3, r4
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d105      	bne.n	80013d4 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	4619      	mov	r1, r3
 80013ce:	485f      	ldr	r0, [pc, #380]	; (800154c <HAL_ADC_Init+0x2a4>)
 80013d0:	f7ff fdde 	bl	8000f90 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	7e5b      	ldrb	r3, [r3, #25]
 80013d8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013de:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80013e4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80013ea:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013f2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013f4:	4313      	orrs	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d106      	bne.n	8001410 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001406:	3b01      	subs	r3, #1
 8001408:	045b      	lsls	r3, r3, #17
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	4313      	orrs	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001414:	2b00      	cmp	r3, #0
 8001416:	d009      	beq.n	800142c <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800141c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001424:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4313      	orrs	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	68da      	ldr	r2, [r3, #12]
 8001432:	4b47      	ldr	r3, [pc, #284]	; (8001550 <HAL_ADC_Init+0x2a8>)
 8001434:	4013      	ands	r3, r2
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	6812      	ldr	r2, [r2, #0]
 800143a:	69b9      	ldr	r1, [r7, #24]
 800143c:	430b      	orrs	r3, r1
 800143e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff ff08 	bl	800125a <LL_ADC_REG_IsConversionOngoing>
 800144a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff ff15 	bl	8001280 <LL_ADC_INJ_IsConversionOngoing>
 8001456:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d13d      	bne.n	80014da <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d13a      	bne.n	80014da <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001468:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001470:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001472:	4313      	orrs	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001480:	f023 0302 	bic.w	r3, r3, #2
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	6812      	ldr	r2, [r2, #0]
 8001488:	69b9      	ldr	r1, [r7, #24]
 800148a:	430b      	orrs	r3, r1
 800148c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001494:	2b01      	cmp	r3, #1
 8001496:	d118      	bne.n	80014ca <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	691b      	ldr	r3, [r3, #16]
 800149e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80014a2:	f023 0304 	bic.w	r3, r3, #4
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80014ae:	4311      	orrs	r1, r2
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80014b4:	4311      	orrs	r1, r2
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80014ba:	430a      	orrs	r2, r1
 80014bc:	431a      	orrs	r2, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f042 0201 	orr.w	r2, r2, #1
 80014c6:	611a      	str	r2, [r3, #16]
 80014c8:	e007      	b.n	80014da <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	691a      	ldr	r2, [r3, #16]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f022 0201 	bic.w	r2, r2, #1
 80014d8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	691b      	ldr	r3, [r3, #16]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d10c      	bne.n	80014fc <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e8:	f023 010f 	bic.w	r1, r3, #15
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	69db      	ldr	r3, [r3, #28]
 80014f0:	1e5a      	subs	r2, r3, #1
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	430a      	orrs	r2, r1
 80014f8:	631a      	str	r2, [r3, #48]	; 0x30
 80014fa:	e007      	b.n	800150c <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f022 020f 	bic.w	r2, r2, #15
 800150a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001510:	f023 0303 	bic.w	r3, r3, #3
 8001514:	f043 0201 	orr.w	r2, r3, #1
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	655a      	str	r2, [r3, #84]	; 0x54
 800151c:	e007      	b.n	800152e <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001522:	f043 0210 	orr.w	r2, r3, #16
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800152e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001530:	4618      	mov	r0, r3
 8001532:	3724      	adds	r7, #36	; 0x24
 8001534:	46bd      	mov	sp, r7
 8001536:	bd90      	pop	{r4, r7, pc}
 8001538:	20000000 	.word	0x20000000
 800153c:	053e2d63 	.word	0x053e2d63
 8001540:	50040000 	.word	0x50040000
 8001544:	50040100 	.word	0x50040100
 8001548:	50040200 	.word	0x50040200
 800154c:	50040300 	.word	0x50040300
 8001550:	fff0c007 	.word	0xfff0c007

08001554 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b0b6      	sub	sp, #216	; 0xd8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800155e:	2300      	movs	r3, #0
 8001560:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001564:	2300      	movs	r3, #0
 8001566:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800156e:	2b01      	cmp	r3, #1
 8001570:	d101      	bne.n	8001576 <HAL_ADC_ConfigChannel+0x22>
 8001572:	2302      	movs	r3, #2
 8001574:	e3c7      	b.n	8001d06 <HAL_ADC_ConfigChannel+0x7b2>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2201      	movs	r2, #1
 800157a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff fe69 	bl	800125a <LL_ADC_REG_IsConversionOngoing>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	f040 83a8 	bne.w	8001ce0 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	2b05      	cmp	r3, #5
 8001596:	d824      	bhi.n	80015e2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	3b02      	subs	r3, #2
 800159e:	2b03      	cmp	r3, #3
 80015a0:	d81b      	bhi.n	80015da <HAL_ADC_ConfigChannel+0x86>
 80015a2:	a201      	add	r2, pc, #4	; (adr r2, 80015a8 <HAL_ADC_ConfigChannel+0x54>)
 80015a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015a8:	080015b9 	.word	0x080015b9
 80015ac:	080015c1 	.word	0x080015c1
 80015b0:	080015c9 	.word	0x080015c9
 80015b4:	080015d1 	.word	0x080015d1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	220c      	movs	r2, #12
 80015bc:	605a      	str	r2, [r3, #4]
          break;
 80015be:	e011      	b.n	80015e4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	2212      	movs	r2, #18
 80015c4:	605a      	str	r2, [r3, #4]
          break;
 80015c6:	e00d      	b.n	80015e4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	2218      	movs	r2, #24
 80015cc:	605a      	str	r2, [r3, #4]
          break;
 80015ce:	e009      	b.n	80015e4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015d6:	605a      	str	r2, [r3, #4]
          break;
 80015d8:	e004      	b.n	80015e4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	2206      	movs	r2, #6
 80015de:	605a      	str	r2, [r3, #4]
          break;
 80015e0:	e000      	b.n	80015e4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80015e2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6818      	ldr	r0, [r3, #0]
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	6859      	ldr	r1, [r3, #4]
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	461a      	mov	r2, r3
 80015f2:	f7ff fd56 	bl	80010a2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff fe2d 	bl	800125a <LL_ADC_REG_IsConversionOngoing>
 8001600:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff fe39 	bl	8001280 <LL_ADC_INJ_IsConversionOngoing>
 800160e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001612:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001616:	2b00      	cmp	r3, #0
 8001618:	f040 81a6 	bne.w	8001968 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800161c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001620:	2b00      	cmp	r3, #0
 8001622:	f040 81a1 	bne.w	8001968 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6818      	ldr	r0, [r3, #0]
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	6819      	ldr	r1, [r3, #0]
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	461a      	mov	r2, r3
 8001634:	f7ff fd61 	bl	80010fa <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	695a      	ldr	r2, [r3, #20]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	08db      	lsrs	r3, r3, #3
 8001644:	f003 0303 	and.w	r3, r3, #3
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	691b      	ldr	r3, [r3, #16]
 8001656:	2b04      	cmp	r3, #4
 8001658:	d00a      	beq.n	8001670 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6818      	ldr	r0, [r3, #0]
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	6919      	ldr	r1, [r3, #16]
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800166a:	f7ff fcc5 	bl	8000ff8 <LL_ADC_SetOffset>
 800166e:	e17b      	b.n	8001968 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2100      	movs	r1, #0
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff fce2 	bl	8001040 <LL_ADC_GetOffsetChannel>
 800167c:	4603      	mov	r3, r0
 800167e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001682:	2b00      	cmp	r3, #0
 8001684:	d10a      	bne.n	800169c <HAL_ADC_ConfigChannel+0x148>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2100      	movs	r1, #0
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff fcd7 	bl	8001040 <LL_ADC_GetOffsetChannel>
 8001692:	4603      	mov	r3, r0
 8001694:	0e9b      	lsrs	r3, r3, #26
 8001696:	f003 021f 	and.w	r2, r3, #31
 800169a:	e01e      	b.n	80016da <HAL_ADC_ConfigChannel+0x186>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2100      	movs	r1, #0
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff fccc 	bl	8001040 <LL_ADC_GetOffsetChannel>
 80016a8:	4603      	mov	r3, r0
 80016aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80016b2:	fa93 f3a3 	rbit	r3, r3
 80016b6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80016ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80016be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80016c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d101      	bne.n	80016ce <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80016ca:	2320      	movs	r3, #32
 80016cc:	e004      	b.n	80016d8 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80016ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80016d2:	fab3 f383 	clz	r3, r3
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d105      	bne.n	80016f2 <HAL_ADC_ConfigChannel+0x19e>
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	0e9b      	lsrs	r3, r3, #26
 80016ec:	f003 031f 	and.w	r3, r3, #31
 80016f0:	e018      	b.n	8001724 <HAL_ADC_ConfigChannel+0x1d0>
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016fa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80016fe:	fa93 f3a3 	rbit	r3, r3
 8001702:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001706:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800170a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800170e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001712:	2b00      	cmp	r3, #0
 8001714:	d101      	bne.n	800171a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001716:	2320      	movs	r3, #32
 8001718:	e004      	b.n	8001724 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800171a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800171e:	fab3 f383 	clz	r3, r3
 8001722:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001724:	429a      	cmp	r2, r3
 8001726:	d106      	bne.n	8001736 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2200      	movs	r2, #0
 800172e:	2100      	movs	r1, #0
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff fc9b 	bl	800106c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2101      	movs	r1, #1
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff fc7f 	bl	8001040 <LL_ADC_GetOffsetChannel>
 8001742:	4603      	mov	r3, r0
 8001744:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001748:	2b00      	cmp	r3, #0
 800174a:	d10a      	bne.n	8001762 <HAL_ADC_ConfigChannel+0x20e>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2101      	movs	r1, #1
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff fc74 	bl	8001040 <LL_ADC_GetOffsetChannel>
 8001758:	4603      	mov	r3, r0
 800175a:	0e9b      	lsrs	r3, r3, #26
 800175c:	f003 021f 	and.w	r2, r3, #31
 8001760:	e01e      	b.n	80017a0 <HAL_ADC_ConfigChannel+0x24c>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2101      	movs	r1, #1
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff fc69 	bl	8001040 <LL_ADC_GetOffsetChannel>
 800176e:	4603      	mov	r3, r0
 8001770:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001774:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001778:	fa93 f3a3 	rbit	r3, r3
 800177c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001780:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001784:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001788:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800178c:	2b00      	cmp	r3, #0
 800178e:	d101      	bne.n	8001794 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001790:	2320      	movs	r3, #32
 8001792:	e004      	b.n	800179e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001794:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001798:	fab3 f383 	clz	r3, r3
 800179c:	b2db      	uxtb	r3, r3
 800179e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d105      	bne.n	80017b8 <HAL_ADC_ConfigChannel+0x264>
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	0e9b      	lsrs	r3, r3, #26
 80017b2:	f003 031f 	and.w	r3, r3, #31
 80017b6:	e018      	b.n	80017ea <HAL_ADC_ConfigChannel+0x296>
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80017c4:	fa93 f3a3 	rbit	r3, r3
 80017c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80017cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80017d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80017d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d101      	bne.n	80017e0 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80017dc:	2320      	movs	r3, #32
 80017de:	e004      	b.n	80017ea <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80017e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80017e4:	fab3 f383 	clz	r3, r3
 80017e8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d106      	bne.n	80017fc <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2200      	movs	r2, #0
 80017f4:	2101      	movs	r1, #1
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff fc38 	bl	800106c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2102      	movs	r1, #2
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff fc1c 	bl	8001040 <LL_ADC_GetOffsetChannel>
 8001808:	4603      	mov	r3, r0
 800180a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800180e:	2b00      	cmp	r3, #0
 8001810:	d10a      	bne.n	8001828 <HAL_ADC_ConfigChannel+0x2d4>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2102      	movs	r1, #2
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff fc11 	bl	8001040 <LL_ADC_GetOffsetChannel>
 800181e:	4603      	mov	r3, r0
 8001820:	0e9b      	lsrs	r3, r3, #26
 8001822:	f003 021f 	and.w	r2, r3, #31
 8001826:	e01e      	b.n	8001866 <HAL_ADC_ConfigChannel+0x312>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2102      	movs	r1, #2
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff fc06 	bl	8001040 <LL_ADC_GetOffsetChannel>
 8001834:	4603      	mov	r3, r0
 8001836:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800183a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800183e:	fa93 f3a3 	rbit	r3, r3
 8001842:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001846:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800184a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800184e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001852:	2b00      	cmp	r3, #0
 8001854:	d101      	bne.n	800185a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001856:	2320      	movs	r3, #32
 8001858:	e004      	b.n	8001864 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800185a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800185e:	fab3 f383 	clz	r3, r3
 8001862:	b2db      	uxtb	r3, r3
 8001864:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800186e:	2b00      	cmp	r3, #0
 8001870:	d105      	bne.n	800187e <HAL_ADC_ConfigChannel+0x32a>
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	0e9b      	lsrs	r3, r3, #26
 8001878:	f003 031f 	and.w	r3, r3, #31
 800187c:	e016      	b.n	80018ac <HAL_ADC_ConfigChannel+0x358>
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001886:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800188a:	fa93 f3a3 	rbit	r3, r3
 800188e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001890:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001892:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001896:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800189a:	2b00      	cmp	r3, #0
 800189c:	d101      	bne.n	80018a2 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800189e:	2320      	movs	r3, #32
 80018a0:	e004      	b.n	80018ac <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80018a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80018a6:	fab3 f383 	clz	r3, r3
 80018aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d106      	bne.n	80018be <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2200      	movs	r2, #0
 80018b6:	2102      	movs	r1, #2
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff fbd7 	bl	800106c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2103      	movs	r1, #3
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff fbbb 	bl	8001040 <LL_ADC_GetOffsetChannel>
 80018ca:	4603      	mov	r3, r0
 80018cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d10a      	bne.n	80018ea <HAL_ADC_ConfigChannel+0x396>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2103      	movs	r1, #3
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff fbb0 	bl	8001040 <LL_ADC_GetOffsetChannel>
 80018e0:	4603      	mov	r3, r0
 80018e2:	0e9b      	lsrs	r3, r3, #26
 80018e4:	f003 021f 	and.w	r2, r3, #31
 80018e8:	e017      	b.n	800191a <HAL_ADC_ConfigChannel+0x3c6>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2103      	movs	r1, #3
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff fba5 	bl	8001040 <LL_ADC_GetOffsetChannel>
 80018f6:	4603      	mov	r3, r0
 80018f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018fc:	fa93 f3a3 	rbit	r3, r3
 8001900:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001902:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001904:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001906:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001908:	2b00      	cmp	r3, #0
 800190a:	d101      	bne.n	8001910 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 800190c:	2320      	movs	r3, #32
 800190e:	e003      	b.n	8001918 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001910:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001912:	fab3 f383 	clz	r3, r3
 8001916:	b2db      	uxtb	r3, r3
 8001918:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001922:	2b00      	cmp	r3, #0
 8001924:	d105      	bne.n	8001932 <HAL_ADC_ConfigChannel+0x3de>
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	0e9b      	lsrs	r3, r3, #26
 800192c:	f003 031f 	and.w	r3, r3, #31
 8001930:	e011      	b.n	8001956 <HAL_ADC_ConfigChannel+0x402>
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001938:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800193a:	fa93 f3a3 	rbit	r3, r3
 800193e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001940:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001942:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001944:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001946:	2b00      	cmp	r3, #0
 8001948:	d101      	bne.n	800194e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800194a:	2320      	movs	r3, #32
 800194c:	e003      	b.n	8001956 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800194e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001950:	fab3 f383 	clz	r3, r3
 8001954:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001956:	429a      	cmp	r2, r3
 8001958:	d106      	bne.n	8001968 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2200      	movs	r2, #0
 8001960:	2103      	movs	r1, #3
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff fb82 	bl	800106c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff fc61 	bl	8001234 <LL_ADC_IsEnabled>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	f040 813f 	bne.w	8001bf8 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6818      	ldr	r0, [r3, #0]
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	6819      	ldr	r1, [r3, #0]
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	461a      	mov	r2, r3
 8001988:	f7ff fbe2 	bl	8001150 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	4a8e      	ldr	r2, [pc, #568]	; (8001bcc <HAL_ADC_ConfigChannel+0x678>)
 8001992:	4293      	cmp	r3, r2
 8001994:	f040 8130 	bne.w	8001bf8 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d10b      	bne.n	80019c0 <HAL_ADC_ConfigChannel+0x46c>
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	0e9b      	lsrs	r3, r3, #26
 80019ae:	3301      	adds	r3, #1
 80019b0:	f003 031f 	and.w	r3, r3, #31
 80019b4:	2b09      	cmp	r3, #9
 80019b6:	bf94      	ite	ls
 80019b8:	2301      	movls	r3, #1
 80019ba:	2300      	movhi	r3, #0
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	e019      	b.n	80019f4 <HAL_ADC_ConfigChannel+0x4a0>
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019c8:	fa93 f3a3 	rbit	r3, r3
 80019cc:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80019ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019d0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80019d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d101      	bne.n	80019dc <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80019d8:	2320      	movs	r3, #32
 80019da:	e003      	b.n	80019e4 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80019dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80019de:	fab3 f383 	clz	r3, r3
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	3301      	adds	r3, #1
 80019e6:	f003 031f 	and.w	r3, r3, #31
 80019ea:	2b09      	cmp	r3, #9
 80019ec:	bf94      	ite	ls
 80019ee:	2301      	movls	r3, #1
 80019f0:	2300      	movhi	r3, #0
 80019f2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d079      	beq.n	8001aec <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d107      	bne.n	8001a14 <HAL_ADC_ConfigChannel+0x4c0>
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	0e9b      	lsrs	r3, r3, #26
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	069b      	lsls	r3, r3, #26
 8001a0e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a12:	e015      	b.n	8001a40 <HAL_ADC_ConfigChannel+0x4ec>
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a1c:	fa93 f3a3 	rbit	r3, r3
 8001a20:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001a22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a24:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001a26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d101      	bne.n	8001a30 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001a2c:	2320      	movs	r3, #32
 8001a2e:	e003      	b.n	8001a38 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001a30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a32:	fab3 f383 	clz	r3, r3
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	3301      	adds	r3, #1
 8001a3a:	069b      	lsls	r3, r3, #26
 8001a3c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d109      	bne.n	8001a60 <HAL_ADC_ConfigChannel+0x50c>
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	0e9b      	lsrs	r3, r3, #26
 8001a52:	3301      	adds	r3, #1
 8001a54:	f003 031f 	and.w	r3, r3, #31
 8001a58:	2101      	movs	r1, #1
 8001a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5e:	e017      	b.n	8001a90 <HAL_ADC_ConfigChannel+0x53c>
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a68:	fa93 f3a3 	rbit	r3, r3
 8001a6c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001a6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a70:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001a72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d101      	bne.n	8001a7c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001a78:	2320      	movs	r3, #32
 8001a7a:	e003      	b.n	8001a84 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001a7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a7e:	fab3 f383 	clz	r3, r3
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	3301      	adds	r3, #1
 8001a86:	f003 031f 	and.w	r3, r3, #31
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a90:	ea42 0103 	orr.w	r1, r2, r3
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d10a      	bne.n	8001ab6 <HAL_ADC_ConfigChannel+0x562>
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	0e9b      	lsrs	r3, r3, #26
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	f003 021f 	and.w	r2, r3, #31
 8001aac:	4613      	mov	r3, r2
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	4413      	add	r3, r2
 8001ab2:	051b      	lsls	r3, r3, #20
 8001ab4:	e018      	b.n	8001ae8 <HAL_ADC_ConfigChannel+0x594>
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001abe:	fa93 f3a3 	rbit	r3, r3
 8001ac2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001ac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001ace:	2320      	movs	r3, #32
 8001ad0:	e003      	b.n	8001ada <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001ad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ad4:	fab3 f383 	clz	r3, r3
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	3301      	adds	r3, #1
 8001adc:	f003 021f 	and.w	r2, r3, #31
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	4413      	add	r3, r2
 8001ae6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ae8:	430b      	orrs	r3, r1
 8001aea:	e080      	b.n	8001bee <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d107      	bne.n	8001b08 <HAL_ADC_ConfigChannel+0x5b4>
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	0e9b      	lsrs	r3, r3, #26
 8001afe:	3301      	adds	r3, #1
 8001b00:	069b      	lsls	r3, r3, #26
 8001b02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b06:	e015      	b.n	8001b34 <HAL_ADC_ConfigChannel+0x5e0>
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b10:	fa93 f3a3 	rbit	r3, r3
 8001b14:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b18:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d101      	bne.n	8001b24 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001b20:	2320      	movs	r3, #32
 8001b22:	e003      	b.n	8001b2c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b26:	fab3 f383 	clz	r3, r3
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	069b      	lsls	r3, r3, #26
 8001b30:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d109      	bne.n	8001b54 <HAL_ADC_ConfigChannel+0x600>
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	0e9b      	lsrs	r3, r3, #26
 8001b46:	3301      	adds	r3, #1
 8001b48:	f003 031f 	and.w	r3, r3, #31
 8001b4c:	2101      	movs	r1, #1
 8001b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b52:	e017      	b.n	8001b84 <HAL_ADC_ConfigChannel+0x630>
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5a:	6a3b      	ldr	r3, [r7, #32]
 8001b5c:	fa93 f3a3 	rbit	r3, r3
 8001b60:	61fb      	str	r3, [r7, #28]
  return result;
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d101      	bne.n	8001b70 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001b6c:	2320      	movs	r3, #32
 8001b6e:	e003      	b.n	8001b78 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b72:	fab3 f383 	clz	r3, r3
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	3301      	adds	r3, #1
 8001b7a:	f003 031f 	and.w	r3, r3, #31
 8001b7e:	2101      	movs	r1, #1
 8001b80:	fa01 f303 	lsl.w	r3, r1, r3
 8001b84:	ea42 0103 	orr.w	r1, r2, r3
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d10d      	bne.n	8001bb0 <HAL_ADC_ConfigChannel+0x65c>
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	0e9b      	lsrs	r3, r3, #26
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	f003 021f 	and.w	r2, r3, #31
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	4413      	add	r3, r2
 8001ba6:	3b1e      	subs	r3, #30
 8001ba8:	051b      	lsls	r3, r3, #20
 8001baa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bae:	e01d      	b.n	8001bec <HAL_ADC_ConfigChannel+0x698>
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	fa93 f3a3 	rbit	r3, r3
 8001bbc:	613b      	str	r3, [r7, #16]
  return result;
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d103      	bne.n	8001bd0 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001bc8:	2320      	movs	r3, #32
 8001bca:	e005      	b.n	8001bd8 <HAL_ADC_ConfigChannel+0x684>
 8001bcc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	fab3 f383 	clz	r3, r3
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	3301      	adds	r3, #1
 8001bda:	f003 021f 	and.w	r2, r3, #31
 8001bde:	4613      	mov	r3, r2
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	4413      	add	r3, r2
 8001be4:	3b1e      	subs	r3, #30
 8001be6:	051b      	lsls	r3, r3, #20
 8001be8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bec:	430b      	orrs	r3, r1
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	6892      	ldr	r2, [r2, #8]
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	f7ff fa81 	bl	80010fa <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	4b44      	ldr	r3, [pc, #272]	; (8001d10 <HAL_ADC_ConfigChannel+0x7bc>)
 8001bfe:	4013      	ands	r3, r2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d07a      	beq.n	8001cfa <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c04:	4843      	ldr	r0, [pc, #268]	; (8001d14 <HAL_ADC_ConfigChannel+0x7c0>)
 8001c06:	f7ff f9e9 	bl	8000fdc <LL_ADC_GetCommonPathInternalCh>
 8001c0a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a41      	ldr	r2, [pc, #260]	; (8001d18 <HAL_ADC_ConfigChannel+0x7c4>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d12c      	bne.n	8001c72 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001c18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d126      	bne.n	8001c72 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a3c      	ldr	r2, [pc, #240]	; (8001d1c <HAL_ADC_ConfigChannel+0x7c8>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d004      	beq.n	8001c38 <HAL_ADC_ConfigChannel+0x6e4>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a3b      	ldr	r2, [pc, #236]	; (8001d20 <HAL_ADC_ConfigChannel+0x7cc>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d15d      	bne.n	8001cf4 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c3c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c40:	4619      	mov	r1, r3
 8001c42:	4834      	ldr	r0, [pc, #208]	; (8001d14 <HAL_ADC_ConfigChannel+0x7c0>)
 8001c44:	f7ff f9b7 	bl	8000fb6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c48:	4b36      	ldr	r3, [pc, #216]	; (8001d24 <HAL_ADC_ConfigChannel+0x7d0>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	099b      	lsrs	r3, r3, #6
 8001c4e:	4a36      	ldr	r2, [pc, #216]	; (8001d28 <HAL_ADC_ConfigChannel+0x7d4>)
 8001c50:	fba2 2303 	umull	r2, r3, r2, r3
 8001c54:	099b      	lsrs	r3, r3, #6
 8001c56:	1c5a      	adds	r2, r3, #1
 8001c58:	4613      	mov	r3, r2
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	4413      	add	r3, r2
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001c62:	e002      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	3b01      	subs	r3, #1
 8001c68:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d1f9      	bne.n	8001c64 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c70:	e040      	b.n	8001cf4 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a2d      	ldr	r2, [pc, #180]	; (8001d2c <HAL_ADC_ConfigChannel+0x7d8>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d118      	bne.n	8001cae <HAL_ADC_ConfigChannel+0x75a>
 8001c7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d112      	bne.n	8001cae <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a23      	ldr	r2, [pc, #140]	; (8001d1c <HAL_ADC_ConfigChannel+0x7c8>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d004      	beq.n	8001c9c <HAL_ADC_ConfigChannel+0x748>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a22      	ldr	r2, [pc, #136]	; (8001d20 <HAL_ADC_ConfigChannel+0x7cc>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d12d      	bne.n	8001cf8 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ca0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	481b      	ldr	r0, [pc, #108]	; (8001d14 <HAL_ADC_ConfigChannel+0x7c0>)
 8001ca8:	f7ff f985 	bl	8000fb6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001cac:	e024      	b.n	8001cf8 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a1f      	ldr	r2, [pc, #124]	; (8001d30 <HAL_ADC_ConfigChannel+0x7dc>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d120      	bne.n	8001cfa <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001cb8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001cbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d11a      	bne.n	8001cfa <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a14      	ldr	r2, [pc, #80]	; (8001d1c <HAL_ADC_ConfigChannel+0x7c8>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d115      	bne.n	8001cfa <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001cd2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	480e      	ldr	r0, [pc, #56]	; (8001d14 <HAL_ADC_ConfigChannel+0x7c0>)
 8001cda:	f7ff f96c 	bl	8000fb6 <LL_ADC_SetCommonPathInternalCh>
 8001cde:	e00c      	b.n	8001cfa <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce4:	f043 0220 	orr.w	r2, r3, #32
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001cf2:	e002      	b.n	8001cfa <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001cf4:	bf00      	nop
 8001cf6:	e000      	b.n	8001cfa <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001cf8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001d02:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	37d8      	adds	r7, #216	; 0xd8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	80080000 	.word	0x80080000
 8001d14:	50040300 	.word	0x50040300
 8001d18:	c7520000 	.word	0xc7520000
 8001d1c:	50040000 	.word	0x50040000
 8001d20:	50040200 	.word	0x50040200
 8001d24:	20000000 	.word	0x20000000
 8001d28:	053e2d63 	.word	0x053e2d63
 8001d2c:	cb840000 	.word	0xcb840000
 8001d30:	80000001 	.word	0x80000001

08001d34 <LL_ADC_IsEnabled>:
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f003 0301 	and.w	r3, r3, #1
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d101      	bne.n	8001d4c <LL_ADC_IsEnabled+0x18>
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e000      	b.n	8001d4e <LL_ADC_IsEnabled+0x1a>
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <LL_ADC_REG_IsConversionOngoing>:
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b083      	sub	sp, #12
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f003 0304 	and.w	r3, r3, #4
 8001d6a:	2b04      	cmp	r3, #4
 8001d6c:	d101      	bne.n	8001d72 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e000      	b.n	8001d74 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001d80:	b590      	push	{r4, r7, lr}
 8001d82:	b09f      	sub	sp, #124	; 0x7c
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d101      	bne.n	8001d9e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	e093      	b.n	8001ec6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2201      	movs	r2, #1
 8001da2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8001da6:	2300      	movs	r3, #0
 8001da8:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8001daa:	2300      	movs	r3, #0
 8001dac:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a47      	ldr	r2, [pc, #284]	; (8001ed0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d102      	bne.n	8001dbe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001db8:	4b46      	ldr	r3, [pc, #280]	; (8001ed4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001dba:	60bb      	str	r3, [r7, #8]
 8001dbc:	e001      	b.n	8001dc2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d10b      	bne.n	8001de0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dcc:	f043 0220 	orr.w	r2, r3, #32
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e072      	b.n	8001ec6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff ffb9 	bl	8001d5a <LL_ADC_REG_IsConversionOngoing>
 8001de8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff ffb3 	bl	8001d5a <LL_ADC_REG_IsConversionOngoing>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d154      	bne.n	8001ea4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001dfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d151      	bne.n	8001ea4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001e00:	4b35      	ldr	r3, [pc, #212]	; (8001ed8 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8001e02:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d02c      	beq.n	8001e66 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001e0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	6859      	ldr	r1, [r3, #4]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e1e:	035b      	lsls	r3, r3, #13
 8001e20:	430b      	orrs	r3, r1
 8001e22:	431a      	orrs	r2, r3
 8001e24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e26:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e28:	4829      	ldr	r0, [pc, #164]	; (8001ed0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001e2a:	f7ff ff83 	bl	8001d34 <LL_ADC_IsEnabled>
 8001e2e:	4604      	mov	r4, r0
 8001e30:	4828      	ldr	r0, [pc, #160]	; (8001ed4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001e32:	f7ff ff7f 	bl	8001d34 <LL_ADC_IsEnabled>
 8001e36:	4603      	mov	r3, r0
 8001e38:	431c      	orrs	r4, r3
 8001e3a:	4828      	ldr	r0, [pc, #160]	; (8001edc <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001e3c:	f7ff ff7a 	bl	8001d34 <LL_ADC_IsEnabled>
 8001e40:	4603      	mov	r3, r0
 8001e42:	4323      	orrs	r3, r4
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d137      	bne.n	8001eb8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001e48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001e50:	f023 030f 	bic.w	r3, r3, #15
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	6811      	ldr	r1, [r2, #0]
 8001e58:	683a      	ldr	r2, [r7, #0]
 8001e5a:	6892      	ldr	r2, [r2, #8]
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	431a      	orrs	r2, r3
 8001e60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e62:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e64:	e028      	b.n	8001eb8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001e66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e70:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e72:	4817      	ldr	r0, [pc, #92]	; (8001ed0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001e74:	f7ff ff5e 	bl	8001d34 <LL_ADC_IsEnabled>
 8001e78:	4604      	mov	r4, r0
 8001e7a:	4816      	ldr	r0, [pc, #88]	; (8001ed4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001e7c:	f7ff ff5a 	bl	8001d34 <LL_ADC_IsEnabled>
 8001e80:	4603      	mov	r3, r0
 8001e82:	431c      	orrs	r4, r3
 8001e84:	4815      	ldr	r0, [pc, #84]	; (8001edc <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001e86:	f7ff ff55 	bl	8001d34 <LL_ADC_IsEnabled>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	4323      	orrs	r3, r4
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d112      	bne.n	8001eb8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001e92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001e9a:	f023 030f 	bic.w	r3, r3, #15
 8001e9e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001ea0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ea2:	e009      	b.n	8001eb8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ea8:	f043 0220 	orr.w	r2, r3, #32
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001eb6:	e000      	b.n	8001eba <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001eb8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001ec2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	377c      	adds	r7, #124	; 0x7c
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd90      	pop	{r4, r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	50040000 	.word	0x50040000
 8001ed4:	50040100 	.word	0x50040100
 8001ed8:	50040300 	.word	0x50040300
 8001edc:	50040200 	.word	0x50040200

08001ee0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ef0:	4b0c      	ldr	r3, [pc, #48]	; (8001f24 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ef6:	68ba      	ldr	r2, [r7, #8]
 8001ef8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001efc:	4013      	ands	r3, r2
 8001efe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f12:	4a04      	ldr	r2, [pc, #16]	; (8001f24 <__NVIC_SetPriorityGrouping+0x44>)
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	60d3      	str	r3, [r2, #12]
}
 8001f18:	bf00      	nop
 8001f1a:	3714      	adds	r7, #20
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	e000ed00 	.word	0xe000ed00

08001f28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f2c:	4b04      	ldr	r3, [pc, #16]	; (8001f40 <__NVIC_GetPriorityGrouping+0x18>)
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	0a1b      	lsrs	r3, r3, #8
 8001f32:	f003 0307 	and.w	r3, r3, #7
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	e000ed00 	.word	0xe000ed00

08001f44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	6039      	str	r1, [r7, #0]
 8001f4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	db0a      	blt.n	8001f6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	b2da      	uxtb	r2, r3
 8001f5c:	490c      	ldr	r1, [pc, #48]	; (8001f90 <__NVIC_SetPriority+0x4c>)
 8001f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f62:	0112      	lsls	r2, r2, #4
 8001f64:	b2d2      	uxtb	r2, r2
 8001f66:	440b      	add	r3, r1
 8001f68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f6c:	e00a      	b.n	8001f84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	b2da      	uxtb	r2, r3
 8001f72:	4908      	ldr	r1, [pc, #32]	; (8001f94 <__NVIC_SetPriority+0x50>)
 8001f74:	79fb      	ldrb	r3, [r7, #7]
 8001f76:	f003 030f 	and.w	r3, r3, #15
 8001f7a:	3b04      	subs	r3, #4
 8001f7c:	0112      	lsls	r2, r2, #4
 8001f7e:	b2d2      	uxtb	r2, r2
 8001f80:	440b      	add	r3, r1
 8001f82:	761a      	strb	r2, [r3, #24]
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr
 8001f90:	e000e100 	.word	0xe000e100
 8001f94:	e000ed00 	.word	0xe000ed00

08001f98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b089      	sub	sp, #36	; 0x24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	f1c3 0307 	rsb	r3, r3, #7
 8001fb2:	2b04      	cmp	r3, #4
 8001fb4:	bf28      	it	cs
 8001fb6:	2304      	movcs	r3, #4
 8001fb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	3304      	adds	r3, #4
 8001fbe:	2b06      	cmp	r3, #6
 8001fc0:	d902      	bls.n	8001fc8 <NVIC_EncodePriority+0x30>
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	3b03      	subs	r3, #3
 8001fc6:	e000      	b.n	8001fca <NVIC_EncodePriority+0x32>
 8001fc8:	2300      	movs	r3, #0
 8001fca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	43da      	mvns	r2, r3
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	401a      	ands	r2, r3
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fe0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fea:	43d9      	mvns	r1, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff0:	4313      	orrs	r3, r2
         );
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3724      	adds	r7, #36	; 0x24
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
	...

08002000 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3b01      	subs	r3, #1
 800200c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002010:	d301      	bcc.n	8002016 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002012:	2301      	movs	r3, #1
 8002014:	e00f      	b.n	8002036 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002016:	4a0a      	ldr	r2, [pc, #40]	; (8002040 <SysTick_Config+0x40>)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	3b01      	subs	r3, #1
 800201c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800201e:	210f      	movs	r1, #15
 8002020:	f04f 30ff 	mov.w	r0, #4294967295
 8002024:	f7ff ff8e 	bl	8001f44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002028:	4b05      	ldr	r3, [pc, #20]	; (8002040 <SysTick_Config+0x40>)
 800202a:	2200      	movs	r2, #0
 800202c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800202e:	4b04      	ldr	r3, [pc, #16]	; (8002040 <SysTick_Config+0x40>)
 8002030:	2207      	movs	r2, #7
 8002032:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	e000e010 	.word	0xe000e010

08002044 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f7ff ff47 	bl	8001ee0 <__NVIC_SetPriorityGrouping>
}
 8002052:	bf00      	nop
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b086      	sub	sp, #24
 800205e:	af00      	add	r7, sp, #0
 8002060:	4603      	mov	r3, r0
 8002062:	60b9      	str	r1, [r7, #8]
 8002064:	607a      	str	r2, [r7, #4]
 8002066:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002068:	2300      	movs	r3, #0
 800206a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800206c:	f7ff ff5c 	bl	8001f28 <__NVIC_GetPriorityGrouping>
 8002070:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	68b9      	ldr	r1, [r7, #8]
 8002076:	6978      	ldr	r0, [r7, #20]
 8002078:	f7ff ff8e 	bl	8001f98 <NVIC_EncodePriority>
 800207c:	4602      	mov	r2, r0
 800207e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002082:	4611      	mov	r1, r2
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff ff5d 	bl	8001f44 <__NVIC_SetPriority>
}
 800208a:	bf00      	nop
 800208c:	3718      	adds	r7, #24
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b082      	sub	sp, #8
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f7ff ffb0 	bl	8002000 <SysTick_Config>
 80020a0:	4603      	mov	r3, r0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
	...

080020ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b087      	sub	sp, #28
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020b6:	2300      	movs	r3, #0
 80020b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020ba:	e17f      	b.n	80023bc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	2101      	movs	r1, #1
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	fa01 f303 	lsl.w	r3, r1, r3
 80020c8:	4013      	ands	r3, r2
 80020ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f000 8171 	beq.w	80023b6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f003 0303 	and.w	r3, r3, #3
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d005      	beq.n	80020ec <HAL_GPIO_Init+0x40>
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f003 0303 	and.w	r3, r3, #3
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d130      	bne.n	800214e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	2203      	movs	r2, #3
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	43db      	mvns	r3, r3
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	4013      	ands	r3, r2
 8002102:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	68da      	ldr	r2, [r3, #12]
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	4313      	orrs	r3, r2
 8002114:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	693a      	ldr	r2, [r7, #16]
 800211a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002122:	2201      	movs	r2, #1
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	43db      	mvns	r3, r3
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	4013      	ands	r3, r2
 8002130:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	091b      	lsrs	r3, r3, #4
 8002138:	f003 0201 	and.w	r2, r3, #1
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	4313      	orrs	r3, r2
 8002146:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	2b03      	cmp	r3, #3
 8002158:	d118      	bne.n	800218c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002160:	2201      	movs	r2, #1
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	43db      	mvns	r3, r3
 800216a:	693a      	ldr	r2, [r7, #16]
 800216c:	4013      	ands	r3, r2
 800216e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	08db      	lsrs	r3, r3, #3
 8002176:	f003 0201 	and.w	r2, r3, #1
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	4313      	orrs	r3, r2
 8002184:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f003 0303 	and.w	r3, r3, #3
 8002194:	2b03      	cmp	r3, #3
 8002196:	d017      	beq.n	80021c8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	2203      	movs	r2, #3
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	43db      	mvns	r3, r3
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	4013      	ands	r3, r2
 80021ae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	689a      	ldr	r2, [r3, #8]
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	4313      	orrs	r3, r2
 80021c0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f003 0303 	and.w	r3, r3, #3
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d123      	bne.n	800221c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	08da      	lsrs	r2, r3, #3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	3208      	adds	r2, #8
 80021dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	f003 0307 	and.w	r3, r3, #7
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	220f      	movs	r2, #15
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	43db      	mvns	r3, r3
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	4013      	ands	r3, r2
 80021f6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	691a      	ldr	r2, [r3, #16]
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	f003 0307 	and.w	r3, r3, #7
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	4313      	orrs	r3, r2
 800220c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	08da      	lsrs	r2, r3, #3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	3208      	adds	r2, #8
 8002216:	6939      	ldr	r1, [r7, #16]
 8002218:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	2203      	movs	r2, #3
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	43db      	mvns	r3, r3
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	4013      	ands	r3, r2
 8002232:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f003 0203 	and.w	r2, r3, #3
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	4313      	orrs	r3, r2
 8002248:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002258:	2b00      	cmp	r3, #0
 800225a:	f000 80ac 	beq.w	80023b6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800225e:	4b5f      	ldr	r3, [pc, #380]	; (80023dc <HAL_GPIO_Init+0x330>)
 8002260:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002262:	4a5e      	ldr	r2, [pc, #376]	; (80023dc <HAL_GPIO_Init+0x330>)
 8002264:	f043 0301 	orr.w	r3, r3, #1
 8002268:	6613      	str	r3, [r2, #96]	; 0x60
 800226a:	4b5c      	ldr	r3, [pc, #368]	; (80023dc <HAL_GPIO_Init+0x330>)
 800226c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	60bb      	str	r3, [r7, #8]
 8002274:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002276:	4a5a      	ldr	r2, [pc, #360]	; (80023e0 <HAL_GPIO_Init+0x334>)
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	089b      	lsrs	r3, r3, #2
 800227c:	3302      	adds	r3, #2
 800227e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002282:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	f003 0303 	and.w	r3, r3, #3
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	220f      	movs	r2, #15
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	43db      	mvns	r3, r3
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	4013      	ands	r3, r2
 8002298:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80022a0:	d025      	beq.n	80022ee <HAL_GPIO_Init+0x242>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a4f      	ldr	r2, [pc, #316]	; (80023e4 <HAL_GPIO_Init+0x338>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d01f      	beq.n	80022ea <HAL_GPIO_Init+0x23e>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a4e      	ldr	r2, [pc, #312]	; (80023e8 <HAL_GPIO_Init+0x33c>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d019      	beq.n	80022e6 <HAL_GPIO_Init+0x23a>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a4d      	ldr	r2, [pc, #308]	; (80023ec <HAL_GPIO_Init+0x340>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d013      	beq.n	80022e2 <HAL_GPIO_Init+0x236>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a4c      	ldr	r2, [pc, #304]	; (80023f0 <HAL_GPIO_Init+0x344>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d00d      	beq.n	80022de <HAL_GPIO_Init+0x232>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a4b      	ldr	r2, [pc, #300]	; (80023f4 <HAL_GPIO_Init+0x348>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d007      	beq.n	80022da <HAL_GPIO_Init+0x22e>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a4a      	ldr	r2, [pc, #296]	; (80023f8 <HAL_GPIO_Init+0x34c>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d101      	bne.n	80022d6 <HAL_GPIO_Init+0x22a>
 80022d2:	2306      	movs	r3, #6
 80022d4:	e00c      	b.n	80022f0 <HAL_GPIO_Init+0x244>
 80022d6:	2307      	movs	r3, #7
 80022d8:	e00a      	b.n	80022f0 <HAL_GPIO_Init+0x244>
 80022da:	2305      	movs	r3, #5
 80022dc:	e008      	b.n	80022f0 <HAL_GPIO_Init+0x244>
 80022de:	2304      	movs	r3, #4
 80022e0:	e006      	b.n	80022f0 <HAL_GPIO_Init+0x244>
 80022e2:	2303      	movs	r3, #3
 80022e4:	e004      	b.n	80022f0 <HAL_GPIO_Init+0x244>
 80022e6:	2302      	movs	r3, #2
 80022e8:	e002      	b.n	80022f0 <HAL_GPIO_Init+0x244>
 80022ea:	2301      	movs	r3, #1
 80022ec:	e000      	b.n	80022f0 <HAL_GPIO_Init+0x244>
 80022ee:	2300      	movs	r3, #0
 80022f0:	697a      	ldr	r2, [r7, #20]
 80022f2:	f002 0203 	and.w	r2, r2, #3
 80022f6:	0092      	lsls	r2, r2, #2
 80022f8:	4093      	lsls	r3, r2
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002300:	4937      	ldr	r1, [pc, #220]	; (80023e0 <HAL_GPIO_Init+0x334>)
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	089b      	lsrs	r3, r3, #2
 8002306:	3302      	adds	r3, #2
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800230e:	4b3b      	ldr	r3, [pc, #236]	; (80023fc <HAL_GPIO_Init+0x350>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	43db      	mvns	r3, r3
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	4013      	ands	r3, r2
 800231c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d003      	beq.n	8002332 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	4313      	orrs	r3, r2
 8002330:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002332:	4a32      	ldr	r2, [pc, #200]	; (80023fc <HAL_GPIO_Init+0x350>)
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002338:	4b30      	ldr	r3, [pc, #192]	; (80023fc <HAL_GPIO_Init+0x350>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	43db      	mvns	r3, r3
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	4013      	ands	r3, r2
 8002346:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d003      	beq.n	800235c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	4313      	orrs	r3, r2
 800235a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800235c:	4a27      	ldr	r2, [pc, #156]	; (80023fc <HAL_GPIO_Init+0x350>)
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002362:	4b26      	ldr	r3, [pc, #152]	; (80023fc <HAL_GPIO_Init+0x350>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	43db      	mvns	r3, r3
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	4013      	ands	r3, r2
 8002370:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	4313      	orrs	r3, r2
 8002384:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002386:	4a1d      	ldr	r2, [pc, #116]	; (80023fc <HAL_GPIO_Init+0x350>)
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800238c:	4b1b      	ldr	r3, [pc, #108]	; (80023fc <HAL_GPIO_Init+0x350>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	43db      	mvns	r3, r3
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	4013      	ands	r3, r2
 800239a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d003      	beq.n	80023b0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80023b0:	4a12      	ldr	r2, [pc, #72]	; (80023fc <HAL_GPIO_Init+0x350>)
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	3301      	adds	r3, #1
 80023ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	fa22 f303 	lsr.w	r3, r2, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f47f ae78 	bne.w	80020bc <HAL_GPIO_Init+0x10>
  }
}
 80023cc:	bf00      	nop
 80023ce:	bf00      	nop
 80023d0:	371c      	adds	r7, #28
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	40021000 	.word	0x40021000
 80023e0:	40010000 	.word	0x40010000
 80023e4:	48000400 	.word	0x48000400
 80023e8:	48000800 	.word	0x48000800
 80023ec:	48000c00 	.word	0x48000c00
 80023f0:	48001000 	.word	0x48001000
 80023f4:	48001400 	.word	0x48001400
 80023f8:	48001800 	.word	0x48001800
 80023fc:	40010400 	.word	0x40010400

08002400 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	460b      	mov	r3, r1
 800240a:	807b      	strh	r3, [r7, #2]
 800240c:	4613      	mov	r3, r2
 800240e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002410:	787b      	ldrb	r3, [r7, #1]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d003      	beq.n	800241e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002416:	887a      	ldrh	r2, [r7, #2]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800241c:	e002      	b.n	8002424 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800241e:	887a      	ldrh	r2, [r7, #2]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	460b      	mov	r3, r1
 800243a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	695b      	ldr	r3, [r3, #20]
 8002440:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002442:	887a      	ldrh	r2, [r7, #2]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	4013      	ands	r3, r2
 8002448:	041a      	lsls	r2, r3, #16
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	43d9      	mvns	r1, r3
 800244e:	887b      	ldrh	r3, [r7, #2]
 8002450:	400b      	ands	r3, r1
 8002452:	431a      	orrs	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	619a      	str	r2, [r3, #24]
}
 8002458:	bf00      	nop
 800245a:	3714      	adds	r7, #20
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002468:	4b04      	ldr	r3, [pc, #16]	; (800247c <HAL_PWREx_GetVoltageRange+0x18>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002470:	4618      	mov	r0, r3
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	40007000 	.word	0x40007000

08002480 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800248e:	d130      	bne.n	80024f2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002490:	4b23      	ldr	r3, [pc, #140]	; (8002520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002498:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800249c:	d038      	beq.n	8002510 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800249e:	4b20      	ldr	r3, [pc, #128]	; (8002520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024a6:	4a1e      	ldr	r2, [pc, #120]	; (8002520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024ac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80024ae:	4b1d      	ldr	r3, [pc, #116]	; (8002524 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2232      	movs	r2, #50	; 0x32
 80024b4:	fb02 f303 	mul.w	r3, r2, r3
 80024b8:	4a1b      	ldr	r2, [pc, #108]	; (8002528 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80024ba:	fba2 2303 	umull	r2, r3, r2, r3
 80024be:	0c9b      	lsrs	r3, r3, #18
 80024c0:	3301      	adds	r3, #1
 80024c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024c4:	e002      	b.n	80024cc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	3b01      	subs	r3, #1
 80024ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024cc:	4b14      	ldr	r3, [pc, #80]	; (8002520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024ce:	695b      	ldr	r3, [r3, #20]
 80024d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024d8:	d102      	bne.n	80024e0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1f2      	bne.n	80024c6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024e0:	4b0f      	ldr	r3, [pc, #60]	; (8002520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024e2:	695b      	ldr	r3, [r3, #20]
 80024e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024ec:	d110      	bne.n	8002510 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e00f      	b.n	8002512 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80024f2:	4b0b      	ldr	r3, [pc, #44]	; (8002520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80024fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024fe:	d007      	beq.n	8002510 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002500:	4b07      	ldr	r3, [pc, #28]	; (8002520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002508:	4a05      	ldr	r2, [pc, #20]	; (8002520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800250a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800250e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3714      	adds	r7, #20
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	40007000 	.word	0x40007000
 8002524:	20000000 	.word	0x20000000
 8002528:	431bde83 	.word	0x431bde83

0800252c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b088      	sub	sp, #32
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d101      	bne.n	800253e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e3d4      	b.n	8002ce8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800253e:	4ba1      	ldr	r3, [pc, #644]	; (80027c4 <HAL_RCC_OscConfig+0x298>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 030c 	and.w	r3, r3, #12
 8002546:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002548:	4b9e      	ldr	r3, [pc, #632]	; (80027c4 <HAL_RCC_OscConfig+0x298>)
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	f003 0303 	and.w	r3, r3, #3
 8002550:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0310 	and.w	r3, r3, #16
 800255a:	2b00      	cmp	r3, #0
 800255c:	f000 80e4 	beq.w	8002728 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d007      	beq.n	8002576 <HAL_RCC_OscConfig+0x4a>
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	2b0c      	cmp	r3, #12
 800256a:	f040 808b 	bne.w	8002684 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	2b01      	cmp	r3, #1
 8002572:	f040 8087 	bne.w	8002684 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002576:	4b93      	ldr	r3, [pc, #588]	; (80027c4 <HAL_RCC_OscConfig+0x298>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d005      	beq.n	800258e <HAL_RCC_OscConfig+0x62>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e3ac      	b.n	8002ce8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a1a      	ldr	r2, [r3, #32]
 8002592:	4b8c      	ldr	r3, [pc, #560]	; (80027c4 <HAL_RCC_OscConfig+0x298>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0308 	and.w	r3, r3, #8
 800259a:	2b00      	cmp	r3, #0
 800259c:	d004      	beq.n	80025a8 <HAL_RCC_OscConfig+0x7c>
 800259e:	4b89      	ldr	r3, [pc, #548]	; (80027c4 <HAL_RCC_OscConfig+0x298>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025a6:	e005      	b.n	80025b4 <HAL_RCC_OscConfig+0x88>
 80025a8:	4b86      	ldr	r3, [pc, #536]	; (80027c4 <HAL_RCC_OscConfig+0x298>)
 80025aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025ae:	091b      	lsrs	r3, r3, #4
 80025b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d223      	bcs.n	8002600 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	4618      	mov	r0, r3
 80025be:	f000 fd41 	bl	8003044 <RCC_SetFlashLatencyFromMSIRange>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e38d      	b.n	8002ce8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025cc:	4b7d      	ldr	r3, [pc, #500]	; (80027c4 <HAL_RCC_OscConfig+0x298>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a7c      	ldr	r2, [pc, #496]	; (80027c4 <HAL_RCC_OscConfig+0x298>)
 80025d2:	f043 0308 	orr.w	r3, r3, #8
 80025d6:	6013      	str	r3, [r2, #0]
 80025d8:	4b7a      	ldr	r3, [pc, #488]	; (80027c4 <HAL_RCC_OscConfig+0x298>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	4977      	ldr	r1, [pc, #476]	; (80027c4 <HAL_RCC_OscConfig+0x298>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025ea:	4b76      	ldr	r3, [pc, #472]	; (80027c4 <HAL_RCC_OscConfig+0x298>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	021b      	lsls	r3, r3, #8
 80025f8:	4972      	ldr	r1, [pc, #456]	; (80027c4 <HAL_RCC_OscConfig+0x298>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	604b      	str	r3, [r1, #4]
 80025fe:	e025      	b.n	800264c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002600:	4b70      	ldr	r3, [pc, #448]	; (80027c4 <HAL_RCC_OscConfig+0x298>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a6f      	ldr	r2, [pc, #444]	; (80027c4 <HAL_RCC_OscConfig+0x298>)
 8002606:	f043 0308 	orr.w	r3, r3, #8
 800260a:	6013      	str	r3, [r2, #0]
 800260c:	4b6d      	ldr	r3, [pc, #436]	; (80027c4 <HAL_RCC_OscConfig+0x298>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	496a      	ldr	r1, [pc, #424]	; (80027c4 <HAL_RCC_OscConfig+0x298>)
 800261a:	4313      	orrs	r3, r2
 800261c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800261e:	4b69      	ldr	r3, [pc, #420]	; (80027c4 <HAL_RCC_OscConfig+0x298>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	69db      	ldr	r3, [r3, #28]
 800262a:	021b      	lsls	r3, r3, #8
 800262c:	4965      	ldr	r1, [pc, #404]	; (80027c4 <HAL_RCC_OscConfig+0x298>)
 800262e:	4313      	orrs	r3, r2
 8002630:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d109      	bne.n	800264c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a1b      	ldr	r3, [r3, #32]
 800263c:	4618      	mov	r0, r3
 800263e:	f000 fd01 	bl	8003044 <RCC_SetFlashLatencyFromMSIRange>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e34d      	b.n	8002ce8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800264c:	f000 fc36 	bl	8002ebc <HAL_RCC_GetSysClockFreq>
 8002650:	4602      	mov	r2, r0
 8002652:	4b5c      	ldr	r3, [pc, #368]	; (80027c4 <HAL_RCC_OscConfig+0x298>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	091b      	lsrs	r3, r3, #4
 8002658:	f003 030f 	and.w	r3, r3, #15
 800265c:	495a      	ldr	r1, [pc, #360]	; (80027c8 <HAL_RCC_OscConfig+0x29c>)
 800265e:	5ccb      	ldrb	r3, [r1, r3]
 8002660:	f003 031f 	and.w	r3, r3, #31
 8002664:	fa22 f303 	lsr.w	r3, r2, r3
 8002668:	4a58      	ldr	r2, [pc, #352]	; (80027cc <HAL_RCC_OscConfig+0x2a0>)
 800266a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800266c:	4b58      	ldr	r3, [pc, #352]	; (80027d0 <HAL_RCC_OscConfig+0x2a4>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4618      	mov	r0, r3
 8002672:	f7fe fc0d 	bl	8000e90 <HAL_InitTick>
 8002676:	4603      	mov	r3, r0
 8002678:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800267a:	7bfb      	ldrb	r3, [r7, #15]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d052      	beq.n	8002726 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002680:	7bfb      	ldrb	r3, [r7, #15]
 8002682:	e331      	b.n	8002ce8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d032      	beq.n	80026f2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800268c:	4b4d      	ldr	r3, [pc, #308]	; (80027c4 <HAL_RCC_OscConfig+0x298>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a4c      	ldr	r2, [pc, #304]	; (80027c4 <HAL_RCC_OscConfig+0x298>)
 8002692:	f043 0301 	orr.w	r3, r3, #1
 8002696:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002698:	f7fe fc4a 	bl	8000f30 <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026a0:	f7fe fc46 	bl	8000f30 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e31a      	b.n	8002ce8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026b2:	4b44      	ldr	r3, [pc, #272]	; (80027c4 <HAL_RCC_OscConfig+0x298>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d0f0      	beq.n	80026a0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026be:	4b41      	ldr	r3, [pc, #260]	; (80027c4 <HAL_RCC_OscConfig+0x298>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a40      	ldr	r2, [pc, #256]	; (80027c4 <HAL_RCC_OscConfig+0x298>)
 80026c4:	f043 0308 	orr.w	r3, r3, #8
 80026c8:	6013      	str	r3, [r2, #0]
 80026ca:	4b3e      	ldr	r3, [pc, #248]	; (80027c4 <HAL_RCC_OscConfig+0x298>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a1b      	ldr	r3, [r3, #32]
 80026d6:	493b      	ldr	r1, [pc, #236]	; (80027c4 <HAL_RCC_OscConfig+0x298>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026dc:	4b39      	ldr	r3, [pc, #228]	; (80027c4 <HAL_RCC_OscConfig+0x298>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	69db      	ldr	r3, [r3, #28]
 80026e8:	021b      	lsls	r3, r3, #8
 80026ea:	4936      	ldr	r1, [pc, #216]	; (80027c4 <HAL_RCC_OscConfig+0x298>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	604b      	str	r3, [r1, #4]
 80026f0:	e01a      	b.n	8002728 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80026f2:	4b34      	ldr	r3, [pc, #208]	; (80027c4 <HAL_RCC_OscConfig+0x298>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a33      	ldr	r2, [pc, #204]	; (80027c4 <HAL_RCC_OscConfig+0x298>)
 80026f8:	f023 0301 	bic.w	r3, r3, #1
 80026fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026fe:	f7fe fc17 	bl	8000f30 <HAL_GetTick>
 8002702:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002704:	e008      	b.n	8002718 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002706:	f7fe fc13 	bl	8000f30 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	2b02      	cmp	r3, #2
 8002712:	d901      	bls.n	8002718 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e2e7      	b.n	8002ce8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002718:	4b2a      	ldr	r3, [pc, #168]	; (80027c4 <HAL_RCC_OscConfig+0x298>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d1f0      	bne.n	8002706 <HAL_RCC_OscConfig+0x1da>
 8002724:	e000      	b.n	8002728 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002726:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0301 	and.w	r3, r3, #1
 8002730:	2b00      	cmp	r3, #0
 8002732:	d074      	beq.n	800281e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	2b08      	cmp	r3, #8
 8002738:	d005      	beq.n	8002746 <HAL_RCC_OscConfig+0x21a>
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	2b0c      	cmp	r3, #12
 800273e:	d10e      	bne.n	800275e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	2b03      	cmp	r3, #3
 8002744:	d10b      	bne.n	800275e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002746:	4b1f      	ldr	r3, [pc, #124]	; (80027c4 <HAL_RCC_OscConfig+0x298>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d064      	beq.n	800281c <HAL_RCC_OscConfig+0x2f0>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d160      	bne.n	800281c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e2c4      	b.n	8002ce8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002766:	d106      	bne.n	8002776 <HAL_RCC_OscConfig+0x24a>
 8002768:	4b16      	ldr	r3, [pc, #88]	; (80027c4 <HAL_RCC_OscConfig+0x298>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a15      	ldr	r2, [pc, #84]	; (80027c4 <HAL_RCC_OscConfig+0x298>)
 800276e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002772:	6013      	str	r3, [r2, #0]
 8002774:	e01d      	b.n	80027b2 <HAL_RCC_OscConfig+0x286>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800277e:	d10c      	bne.n	800279a <HAL_RCC_OscConfig+0x26e>
 8002780:	4b10      	ldr	r3, [pc, #64]	; (80027c4 <HAL_RCC_OscConfig+0x298>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a0f      	ldr	r2, [pc, #60]	; (80027c4 <HAL_RCC_OscConfig+0x298>)
 8002786:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800278a:	6013      	str	r3, [r2, #0]
 800278c:	4b0d      	ldr	r3, [pc, #52]	; (80027c4 <HAL_RCC_OscConfig+0x298>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a0c      	ldr	r2, [pc, #48]	; (80027c4 <HAL_RCC_OscConfig+0x298>)
 8002792:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002796:	6013      	str	r3, [r2, #0]
 8002798:	e00b      	b.n	80027b2 <HAL_RCC_OscConfig+0x286>
 800279a:	4b0a      	ldr	r3, [pc, #40]	; (80027c4 <HAL_RCC_OscConfig+0x298>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a09      	ldr	r2, [pc, #36]	; (80027c4 <HAL_RCC_OscConfig+0x298>)
 80027a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027a4:	6013      	str	r3, [r2, #0]
 80027a6:	4b07      	ldr	r3, [pc, #28]	; (80027c4 <HAL_RCC_OscConfig+0x298>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a06      	ldr	r2, [pc, #24]	; (80027c4 <HAL_RCC_OscConfig+0x298>)
 80027ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027b0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d01c      	beq.n	80027f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ba:	f7fe fbb9 	bl	8000f30 <HAL_GetTick>
 80027be:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027c0:	e011      	b.n	80027e6 <HAL_RCC_OscConfig+0x2ba>
 80027c2:	bf00      	nop
 80027c4:	40021000 	.word	0x40021000
 80027c8:	08005808 	.word	0x08005808
 80027cc:	20000000 	.word	0x20000000
 80027d0:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027d4:	f7fe fbac 	bl	8000f30 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b64      	cmp	r3, #100	; 0x64
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e280      	b.n	8002ce8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027e6:	4baf      	ldr	r3, [pc, #700]	; (8002aa4 <HAL_RCC_OscConfig+0x578>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d0f0      	beq.n	80027d4 <HAL_RCC_OscConfig+0x2a8>
 80027f2:	e014      	b.n	800281e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f4:	f7fe fb9c 	bl	8000f30 <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027fc:	f7fe fb98 	bl	8000f30 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b64      	cmp	r3, #100	; 0x64
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e26c      	b.n	8002ce8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800280e:	4ba5      	ldr	r3, [pc, #660]	; (8002aa4 <HAL_RCC_OscConfig+0x578>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1f0      	bne.n	80027fc <HAL_RCC_OscConfig+0x2d0>
 800281a:	e000      	b.n	800281e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800281c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d060      	beq.n	80028ec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	2b04      	cmp	r3, #4
 800282e:	d005      	beq.n	800283c <HAL_RCC_OscConfig+0x310>
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	2b0c      	cmp	r3, #12
 8002834:	d119      	bne.n	800286a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	2b02      	cmp	r3, #2
 800283a:	d116      	bne.n	800286a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800283c:	4b99      	ldr	r3, [pc, #612]	; (8002aa4 <HAL_RCC_OscConfig+0x578>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002844:	2b00      	cmp	r3, #0
 8002846:	d005      	beq.n	8002854 <HAL_RCC_OscConfig+0x328>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d101      	bne.n	8002854 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e249      	b.n	8002ce8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002854:	4b93      	ldr	r3, [pc, #588]	; (8002aa4 <HAL_RCC_OscConfig+0x578>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	061b      	lsls	r3, r3, #24
 8002862:	4990      	ldr	r1, [pc, #576]	; (8002aa4 <HAL_RCC_OscConfig+0x578>)
 8002864:	4313      	orrs	r3, r2
 8002866:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002868:	e040      	b.n	80028ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d023      	beq.n	80028ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002872:	4b8c      	ldr	r3, [pc, #560]	; (8002aa4 <HAL_RCC_OscConfig+0x578>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a8b      	ldr	r2, [pc, #556]	; (8002aa4 <HAL_RCC_OscConfig+0x578>)
 8002878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800287c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800287e:	f7fe fb57 	bl	8000f30 <HAL_GetTick>
 8002882:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002884:	e008      	b.n	8002898 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002886:	f7fe fb53 	bl	8000f30 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e227      	b.n	8002ce8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002898:	4b82      	ldr	r3, [pc, #520]	; (8002aa4 <HAL_RCC_OscConfig+0x578>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d0f0      	beq.n	8002886 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028a4:	4b7f      	ldr	r3, [pc, #508]	; (8002aa4 <HAL_RCC_OscConfig+0x578>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	061b      	lsls	r3, r3, #24
 80028b2:	497c      	ldr	r1, [pc, #496]	; (8002aa4 <HAL_RCC_OscConfig+0x578>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	604b      	str	r3, [r1, #4]
 80028b8:	e018      	b.n	80028ec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028ba:	4b7a      	ldr	r3, [pc, #488]	; (8002aa4 <HAL_RCC_OscConfig+0x578>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a79      	ldr	r2, [pc, #484]	; (8002aa4 <HAL_RCC_OscConfig+0x578>)
 80028c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c6:	f7fe fb33 	bl	8000f30 <HAL_GetTick>
 80028ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028cc:	e008      	b.n	80028e0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028ce:	f7fe fb2f 	bl	8000f30 <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d901      	bls.n	80028e0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e203      	b.n	8002ce8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028e0:	4b70      	ldr	r3, [pc, #448]	; (8002aa4 <HAL_RCC_OscConfig+0x578>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1f0      	bne.n	80028ce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0308 	and.w	r3, r3, #8
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d03c      	beq.n	8002972 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	695b      	ldr	r3, [r3, #20]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d01c      	beq.n	800293a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002900:	4b68      	ldr	r3, [pc, #416]	; (8002aa4 <HAL_RCC_OscConfig+0x578>)
 8002902:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002906:	4a67      	ldr	r2, [pc, #412]	; (8002aa4 <HAL_RCC_OscConfig+0x578>)
 8002908:	f043 0301 	orr.w	r3, r3, #1
 800290c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002910:	f7fe fb0e 	bl	8000f30 <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002918:	f7fe fb0a 	bl	8000f30 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e1de      	b.n	8002ce8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800292a:	4b5e      	ldr	r3, [pc, #376]	; (8002aa4 <HAL_RCC_OscConfig+0x578>)
 800292c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d0ef      	beq.n	8002918 <HAL_RCC_OscConfig+0x3ec>
 8002938:	e01b      	b.n	8002972 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800293a:	4b5a      	ldr	r3, [pc, #360]	; (8002aa4 <HAL_RCC_OscConfig+0x578>)
 800293c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002940:	4a58      	ldr	r2, [pc, #352]	; (8002aa4 <HAL_RCC_OscConfig+0x578>)
 8002942:	f023 0301 	bic.w	r3, r3, #1
 8002946:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800294a:	f7fe faf1 	bl	8000f30 <HAL_GetTick>
 800294e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002950:	e008      	b.n	8002964 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002952:	f7fe faed 	bl	8000f30 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e1c1      	b.n	8002ce8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002964:	4b4f      	ldr	r3, [pc, #316]	; (8002aa4 <HAL_RCC_OscConfig+0x578>)
 8002966:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1ef      	bne.n	8002952 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0304 	and.w	r3, r3, #4
 800297a:	2b00      	cmp	r3, #0
 800297c:	f000 80a6 	beq.w	8002acc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002980:	2300      	movs	r3, #0
 8002982:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002984:	4b47      	ldr	r3, [pc, #284]	; (8002aa4 <HAL_RCC_OscConfig+0x578>)
 8002986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d10d      	bne.n	80029ac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002990:	4b44      	ldr	r3, [pc, #272]	; (8002aa4 <HAL_RCC_OscConfig+0x578>)
 8002992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002994:	4a43      	ldr	r2, [pc, #268]	; (8002aa4 <HAL_RCC_OscConfig+0x578>)
 8002996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800299a:	6593      	str	r3, [r2, #88]	; 0x58
 800299c:	4b41      	ldr	r3, [pc, #260]	; (8002aa4 <HAL_RCC_OscConfig+0x578>)
 800299e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a4:	60bb      	str	r3, [r7, #8]
 80029a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029a8:	2301      	movs	r3, #1
 80029aa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029ac:	4b3e      	ldr	r3, [pc, #248]	; (8002aa8 <HAL_RCC_OscConfig+0x57c>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d118      	bne.n	80029ea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029b8:	4b3b      	ldr	r3, [pc, #236]	; (8002aa8 <HAL_RCC_OscConfig+0x57c>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a3a      	ldr	r2, [pc, #232]	; (8002aa8 <HAL_RCC_OscConfig+0x57c>)
 80029be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029c4:	f7fe fab4 	bl	8000f30 <HAL_GetTick>
 80029c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029ca:	e008      	b.n	80029de <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029cc:	f7fe fab0 	bl	8000f30 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e184      	b.n	8002ce8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029de:	4b32      	ldr	r3, [pc, #200]	; (8002aa8 <HAL_RCC_OscConfig+0x57c>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d0f0      	beq.n	80029cc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d108      	bne.n	8002a04 <HAL_RCC_OscConfig+0x4d8>
 80029f2:	4b2c      	ldr	r3, [pc, #176]	; (8002aa4 <HAL_RCC_OscConfig+0x578>)
 80029f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f8:	4a2a      	ldr	r2, [pc, #168]	; (8002aa4 <HAL_RCC_OscConfig+0x578>)
 80029fa:	f043 0301 	orr.w	r3, r3, #1
 80029fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a02:	e024      	b.n	8002a4e <HAL_RCC_OscConfig+0x522>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	2b05      	cmp	r3, #5
 8002a0a:	d110      	bne.n	8002a2e <HAL_RCC_OscConfig+0x502>
 8002a0c:	4b25      	ldr	r3, [pc, #148]	; (8002aa4 <HAL_RCC_OscConfig+0x578>)
 8002a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a12:	4a24      	ldr	r2, [pc, #144]	; (8002aa4 <HAL_RCC_OscConfig+0x578>)
 8002a14:	f043 0304 	orr.w	r3, r3, #4
 8002a18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a1c:	4b21      	ldr	r3, [pc, #132]	; (8002aa4 <HAL_RCC_OscConfig+0x578>)
 8002a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a22:	4a20      	ldr	r2, [pc, #128]	; (8002aa4 <HAL_RCC_OscConfig+0x578>)
 8002a24:	f043 0301 	orr.w	r3, r3, #1
 8002a28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a2c:	e00f      	b.n	8002a4e <HAL_RCC_OscConfig+0x522>
 8002a2e:	4b1d      	ldr	r3, [pc, #116]	; (8002aa4 <HAL_RCC_OscConfig+0x578>)
 8002a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a34:	4a1b      	ldr	r2, [pc, #108]	; (8002aa4 <HAL_RCC_OscConfig+0x578>)
 8002a36:	f023 0301 	bic.w	r3, r3, #1
 8002a3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a3e:	4b19      	ldr	r3, [pc, #100]	; (8002aa4 <HAL_RCC_OscConfig+0x578>)
 8002a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a44:	4a17      	ldr	r2, [pc, #92]	; (8002aa4 <HAL_RCC_OscConfig+0x578>)
 8002a46:	f023 0304 	bic.w	r3, r3, #4
 8002a4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d016      	beq.n	8002a84 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a56:	f7fe fa6b 	bl	8000f30 <HAL_GetTick>
 8002a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a5c:	e00a      	b.n	8002a74 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a5e:	f7fe fa67 	bl	8000f30 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e139      	b.n	8002ce8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a74:	4b0b      	ldr	r3, [pc, #44]	; (8002aa4 <HAL_RCC_OscConfig+0x578>)
 8002a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d0ed      	beq.n	8002a5e <HAL_RCC_OscConfig+0x532>
 8002a82:	e01a      	b.n	8002aba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a84:	f7fe fa54 	bl	8000f30 <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a8a:	e00f      	b.n	8002aac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a8c:	f7fe fa50 	bl	8000f30 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d906      	bls.n	8002aac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e122      	b.n	8002ce8 <HAL_RCC_OscConfig+0x7bc>
 8002aa2:	bf00      	nop
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002aac:	4b90      	ldr	r3, [pc, #576]	; (8002cf0 <HAL_RCC_OscConfig+0x7c4>)
 8002aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1e8      	bne.n	8002a8c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002aba:	7ffb      	ldrb	r3, [r7, #31]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d105      	bne.n	8002acc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ac0:	4b8b      	ldr	r3, [pc, #556]	; (8002cf0 <HAL_RCC_OscConfig+0x7c4>)
 8002ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac4:	4a8a      	ldr	r2, [pc, #552]	; (8002cf0 <HAL_RCC_OscConfig+0x7c4>)
 8002ac6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aca:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f000 8108 	beq.w	8002ce6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	f040 80d0 	bne.w	8002c80 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002ae0:	4b83      	ldr	r3, [pc, #524]	; (8002cf0 <HAL_RCC_OscConfig+0x7c4>)
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	f003 0203 	and.w	r2, r3, #3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d130      	bne.n	8002b56 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afe:	3b01      	subs	r3, #1
 8002b00:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d127      	bne.n	8002b56 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b10:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d11f      	bne.n	8002b56 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b20:	2a07      	cmp	r2, #7
 8002b22:	bf14      	ite	ne
 8002b24:	2201      	movne	r2, #1
 8002b26:	2200      	moveq	r2, #0
 8002b28:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d113      	bne.n	8002b56 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b38:	085b      	lsrs	r3, r3, #1
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d109      	bne.n	8002b56 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4c:	085b      	lsrs	r3, r3, #1
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d06e      	beq.n	8002c34 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	2b0c      	cmp	r3, #12
 8002b5a:	d069      	beq.n	8002c30 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b5c:	4b64      	ldr	r3, [pc, #400]	; (8002cf0 <HAL_RCC_OscConfig+0x7c4>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d105      	bne.n	8002b74 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002b68:	4b61      	ldr	r3, [pc, #388]	; (8002cf0 <HAL_RCC_OscConfig+0x7c4>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e0b7      	b.n	8002ce8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b78:	4b5d      	ldr	r3, [pc, #372]	; (8002cf0 <HAL_RCC_OscConfig+0x7c4>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a5c      	ldr	r2, [pc, #368]	; (8002cf0 <HAL_RCC_OscConfig+0x7c4>)
 8002b7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b82:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b84:	f7fe f9d4 	bl	8000f30 <HAL_GetTick>
 8002b88:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b8a:	e008      	b.n	8002b9e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b8c:	f7fe f9d0 	bl	8000f30 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e0a4      	b.n	8002ce8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b9e:	4b54      	ldr	r3, [pc, #336]	; (8002cf0 <HAL_RCC_OscConfig+0x7c4>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1f0      	bne.n	8002b8c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002baa:	4b51      	ldr	r3, [pc, #324]	; (8002cf0 <HAL_RCC_OscConfig+0x7c4>)
 8002bac:	68da      	ldr	r2, [r3, #12]
 8002bae:	4b51      	ldr	r3, [pc, #324]	; (8002cf4 <HAL_RCC_OscConfig+0x7c8>)
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002bba:	3a01      	subs	r2, #1
 8002bbc:	0112      	lsls	r2, r2, #4
 8002bbe:	4311      	orrs	r1, r2
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002bc4:	0212      	lsls	r2, r2, #8
 8002bc6:	4311      	orrs	r1, r2
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002bcc:	0852      	lsrs	r2, r2, #1
 8002bce:	3a01      	subs	r2, #1
 8002bd0:	0552      	lsls	r2, r2, #21
 8002bd2:	4311      	orrs	r1, r2
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002bd8:	0852      	lsrs	r2, r2, #1
 8002bda:	3a01      	subs	r2, #1
 8002bdc:	0652      	lsls	r2, r2, #25
 8002bde:	4311      	orrs	r1, r2
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002be4:	0912      	lsrs	r2, r2, #4
 8002be6:	0452      	lsls	r2, r2, #17
 8002be8:	430a      	orrs	r2, r1
 8002bea:	4941      	ldr	r1, [pc, #260]	; (8002cf0 <HAL_RCC_OscConfig+0x7c4>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002bf0:	4b3f      	ldr	r3, [pc, #252]	; (8002cf0 <HAL_RCC_OscConfig+0x7c4>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a3e      	ldr	r2, [pc, #248]	; (8002cf0 <HAL_RCC_OscConfig+0x7c4>)
 8002bf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bfa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bfc:	4b3c      	ldr	r3, [pc, #240]	; (8002cf0 <HAL_RCC_OscConfig+0x7c4>)
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	4a3b      	ldr	r2, [pc, #236]	; (8002cf0 <HAL_RCC_OscConfig+0x7c4>)
 8002c02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c06:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c08:	f7fe f992 	bl	8000f30 <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c10:	f7fe f98e 	bl	8000f30 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e062      	b.n	8002ce8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c22:	4b33      	ldr	r3, [pc, #204]	; (8002cf0 <HAL_RCC_OscConfig+0x7c4>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d0f0      	beq.n	8002c10 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c2e:	e05a      	b.n	8002ce6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e059      	b.n	8002ce8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c34:	4b2e      	ldr	r3, [pc, #184]	; (8002cf0 <HAL_RCC_OscConfig+0x7c4>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d152      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002c40:	4b2b      	ldr	r3, [pc, #172]	; (8002cf0 <HAL_RCC_OscConfig+0x7c4>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a2a      	ldr	r2, [pc, #168]	; (8002cf0 <HAL_RCC_OscConfig+0x7c4>)
 8002c46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c4a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c4c:	4b28      	ldr	r3, [pc, #160]	; (8002cf0 <HAL_RCC_OscConfig+0x7c4>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	4a27      	ldr	r2, [pc, #156]	; (8002cf0 <HAL_RCC_OscConfig+0x7c4>)
 8002c52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c56:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c58:	f7fe f96a 	bl	8000f30 <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c5e:	e008      	b.n	8002c72 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c60:	f7fe f966 	bl	8000f30 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e03a      	b.n	8002ce8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c72:	4b1f      	ldr	r3, [pc, #124]	; (8002cf0 <HAL_RCC_OscConfig+0x7c4>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d0f0      	beq.n	8002c60 <HAL_RCC_OscConfig+0x734>
 8002c7e:	e032      	b.n	8002ce6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	2b0c      	cmp	r3, #12
 8002c84:	d02d      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c86:	4b1a      	ldr	r3, [pc, #104]	; (8002cf0 <HAL_RCC_OscConfig+0x7c4>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a19      	ldr	r2, [pc, #100]	; (8002cf0 <HAL_RCC_OscConfig+0x7c4>)
 8002c8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c90:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002c92:	4b17      	ldr	r3, [pc, #92]	; (8002cf0 <HAL_RCC_OscConfig+0x7c4>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d105      	bne.n	8002caa <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002c9e:	4b14      	ldr	r3, [pc, #80]	; (8002cf0 <HAL_RCC_OscConfig+0x7c4>)
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	4a13      	ldr	r2, [pc, #76]	; (8002cf0 <HAL_RCC_OscConfig+0x7c4>)
 8002ca4:	f023 0303 	bic.w	r3, r3, #3
 8002ca8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002caa:	4b11      	ldr	r3, [pc, #68]	; (8002cf0 <HAL_RCC_OscConfig+0x7c4>)
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	4a10      	ldr	r2, [pc, #64]	; (8002cf0 <HAL_RCC_OscConfig+0x7c4>)
 8002cb0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002cb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cb8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cba:	f7fe f939 	bl	8000f30 <HAL_GetTick>
 8002cbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cc0:	e008      	b.n	8002cd4 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cc2:	f7fe f935 	bl	8000f30 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e009      	b.n	8002ce8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cd4:	4b06      	ldr	r3, [pc, #24]	; (8002cf0 <HAL_RCC_OscConfig+0x7c4>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d1f0      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x796>
 8002ce0:	e001      	b.n	8002ce6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e000      	b.n	8002ce8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3720      	adds	r7, #32
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	f99d808c 	.word	0xf99d808c

08002cf8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d101      	bne.n	8002d0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e0c8      	b.n	8002e9e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d0c:	4b66      	ldr	r3, [pc, #408]	; (8002ea8 <HAL_RCC_ClockConfig+0x1b0>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0307 	and.w	r3, r3, #7
 8002d14:	683a      	ldr	r2, [r7, #0]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d910      	bls.n	8002d3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d1a:	4b63      	ldr	r3, [pc, #396]	; (8002ea8 <HAL_RCC_ClockConfig+0x1b0>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f023 0207 	bic.w	r2, r3, #7
 8002d22:	4961      	ldr	r1, [pc, #388]	; (8002ea8 <HAL_RCC_ClockConfig+0x1b0>)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d2a:	4b5f      	ldr	r3, [pc, #380]	; (8002ea8 <HAL_RCC_ClockConfig+0x1b0>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0307 	and.w	r3, r3, #7
 8002d32:	683a      	ldr	r2, [r7, #0]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d001      	beq.n	8002d3c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e0b0      	b.n	8002e9e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0301 	and.w	r3, r3, #1
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d04c      	beq.n	8002de2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	2b03      	cmp	r3, #3
 8002d4e:	d107      	bne.n	8002d60 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d50:	4b56      	ldr	r3, [pc, #344]	; (8002eac <HAL_RCC_ClockConfig+0x1b4>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d121      	bne.n	8002da0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e09e      	b.n	8002e9e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d107      	bne.n	8002d78 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d68:	4b50      	ldr	r3, [pc, #320]	; (8002eac <HAL_RCC_ClockConfig+0x1b4>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d115      	bne.n	8002da0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e092      	b.n	8002e9e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d107      	bne.n	8002d90 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d80:	4b4a      	ldr	r3, [pc, #296]	; (8002eac <HAL_RCC_ClockConfig+0x1b4>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0302 	and.w	r3, r3, #2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d109      	bne.n	8002da0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e086      	b.n	8002e9e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d90:	4b46      	ldr	r3, [pc, #280]	; (8002eac <HAL_RCC_ClockConfig+0x1b4>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d101      	bne.n	8002da0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e07e      	b.n	8002e9e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002da0:	4b42      	ldr	r3, [pc, #264]	; (8002eac <HAL_RCC_ClockConfig+0x1b4>)
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f023 0203 	bic.w	r2, r3, #3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	493f      	ldr	r1, [pc, #252]	; (8002eac <HAL_RCC_ClockConfig+0x1b4>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002db2:	f7fe f8bd 	bl	8000f30 <HAL_GetTick>
 8002db6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002db8:	e00a      	b.n	8002dd0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dba:	f7fe f8b9 	bl	8000f30 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e066      	b.n	8002e9e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dd0:	4b36      	ldr	r3, [pc, #216]	; (8002eac <HAL_RCC_ClockConfig+0x1b4>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f003 020c 	and.w	r2, r3, #12
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d1eb      	bne.n	8002dba <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d008      	beq.n	8002e00 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dee:	4b2f      	ldr	r3, [pc, #188]	; (8002eac <HAL_RCC_ClockConfig+0x1b4>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	492c      	ldr	r1, [pc, #176]	; (8002eac <HAL_RCC_ClockConfig+0x1b4>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e00:	4b29      	ldr	r3, [pc, #164]	; (8002ea8 <HAL_RCC_ClockConfig+0x1b0>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0307 	and.w	r3, r3, #7
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d210      	bcs.n	8002e30 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e0e:	4b26      	ldr	r3, [pc, #152]	; (8002ea8 <HAL_RCC_ClockConfig+0x1b0>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f023 0207 	bic.w	r2, r3, #7
 8002e16:	4924      	ldr	r1, [pc, #144]	; (8002ea8 <HAL_RCC_ClockConfig+0x1b0>)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e1e:	4b22      	ldr	r3, [pc, #136]	; (8002ea8 <HAL_RCC_ClockConfig+0x1b0>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0307 	and.w	r3, r3, #7
 8002e26:	683a      	ldr	r2, [r7, #0]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d001      	beq.n	8002e30 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e036      	b.n	8002e9e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0304 	and.w	r3, r3, #4
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d008      	beq.n	8002e4e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e3c:	4b1b      	ldr	r3, [pc, #108]	; (8002eac <HAL_RCC_ClockConfig+0x1b4>)
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	4918      	ldr	r1, [pc, #96]	; (8002eac <HAL_RCC_ClockConfig+0x1b4>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0308 	and.w	r3, r3, #8
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d009      	beq.n	8002e6e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e5a:	4b14      	ldr	r3, [pc, #80]	; (8002eac <HAL_RCC_ClockConfig+0x1b4>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	4910      	ldr	r1, [pc, #64]	; (8002eac <HAL_RCC_ClockConfig+0x1b4>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e6e:	f000 f825 	bl	8002ebc <HAL_RCC_GetSysClockFreq>
 8002e72:	4602      	mov	r2, r0
 8002e74:	4b0d      	ldr	r3, [pc, #52]	; (8002eac <HAL_RCC_ClockConfig+0x1b4>)
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	091b      	lsrs	r3, r3, #4
 8002e7a:	f003 030f 	and.w	r3, r3, #15
 8002e7e:	490c      	ldr	r1, [pc, #48]	; (8002eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e80:	5ccb      	ldrb	r3, [r1, r3]
 8002e82:	f003 031f 	and.w	r3, r3, #31
 8002e86:	fa22 f303 	lsr.w	r3, r2, r3
 8002e8a:	4a0a      	ldr	r2, [pc, #40]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e8e:	4b0a      	ldr	r3, [pc, #40]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7fd fffc 	bl	8000e90 <HAL_InitTick>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	72fb      	strb	r3, [r7, #11]

  return status;
 8002e9c:	7afb      	ldrb	r3, [r7, #11]
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40022000 	.word	0x40022000
 8002eac:	40021000 	.word	0x40021000
 8002eb0:	08005808 	.word	0x08005808
 8002eb4:	20000000 	.word	0x20000000
 8002eb8:	20000004 	.word	0x20000004

08002ebc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b089      	sub	sp, #36	; 0x24
 8002ec0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	61fb      	str	r3, [r7, #28]
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002eca:	4b3e      	ldr	r3, [pc, #248]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f003 030c 	and.w	r3, r3, #12
 8002ed2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ed4:	4b3b      	ldr	r3, [pc, #236]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	f003 0303 	and.w	r3, r3, #3
 8002edc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d005      	beq.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x34>
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	2b0c      	cmp	r3, #12
 8002ee8:	d121      	bne.n	8002f2e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d11e      	bne.n	8002f2e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ef0:	4b34      	ldr	r3, [pc, #208]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0308 	and.w	r3, r3, #8
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d107      	bne.n	8002f0c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002efc:	4b31      	ldr	r3, [pc, #196]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002efe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f02:	0a1b      	lsrs	r3, r3, #8
 8002f04:	f003 030f 	and.w	r3, r3, #15
 8002f08:	61fb      	str	r3, [r7, #28]
 8002f0a:	e005      	b.n	8002f18 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f0c:	4b2d      	ldr	r3, [pc, #180]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	091b      	lsrs	r3, r3, #4
 8002f12:	f003 030f 	and.w	r3, r3, #15
 8002f16:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f18:	4a2b      	ldr	r2, [pc, #172]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f20:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d10d      	bne.n	8002f44 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f2c:	e00a      	b.n	8002f44 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	2b04      	cmp	r3, #4
 8002f32:	d102      	bne.n	8002f3a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f34:	4b25      	ldr	r3, [pc, #148]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x110>)
 8002f36:	61bb      	str	r3, [r7, #24]
 8002f38:	e004      	b.n	8002f44 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	2b08      	cmp	r3, #8
 8002f3e:	d101      	bne.n	8002f44 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f40:	4b23      	ldr	r3, [pc, #140]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f42:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	2b0c      	cmp	r3, #12
 8002f48:	d134      	bne.n	8002fb4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f4a:	4b1e      	ldr	r3, [pc, #120]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	f003 0303 	and.w	r3, r3, #3
 8002f52:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d003      	beq.n	8002f62 <HAL_RCC_GetSysClockFreq+0xa6>
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	2b03      	cmp	r3, #3
 8002f5e:	d003      	beq.n	8002f68 <HAL_RCC_GetSysClockFreq+0xac>
 8002f60:	e005      	b.n	8002f6e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002f62:	4b1a      	ldr	r3, [pc, #104]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x110>)
 8002f64:	617b      	str	r3, [r7, #20]
      break;
 8002f66:	e005      	b.n	8002f74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002f68:	4b19      	ldr	r3, [pc, #100]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f6a:	617b      	str	r3, [r7, #20]
      break;
 8002f6c:	e002      	b.n	8002f74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	617b      	str	r3, [r7, #20]
      break;
 8002f72:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f74:	4b13      	ldr	r3, [pc, #76]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	091b      	lsrs	r3, r3, #4
 8002f7a:	f003 0307 	and.w	r3, r3, #7
 8002f7e:	3301      	adds	r3, #1
 8002f80:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f82:	4b10      	ldr	r3, [pc, #64]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	0a1b      	lsrs	r3, r3, #8
 8002f88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	fb02 f203 	mul.w	r2, r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f98:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f9a:	4b0a      	ldr	r3, [pc, #40]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	0e5b      	lsrs	r3, r3, #25
 8002fa0:	f003 0303 	and.w	r3, r3, #3
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002faa:	697a      	ldr	r2, [r7, #20]
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002fb4:	69bb      	ldr	r3, [r7, #24]
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3724      	adds	r7, #36	; 0x24
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	08005820 	.word	0x08005820
 8002fcc:	00f42400 	.word	0x00f42400
 8002fd0:	007a1200 	.word	0x007a1200

08002fd4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fd8:	4b03      	ldr	r3, [pc, #12]	; (8002fe8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fda:	681b      	ldr	r3, [r3, #0]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	20000000 	.word	0x20000000

08002fec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ff0:	f7ff fff0 	bl	8002fd4 <HAL_RCC_GetHCLKFreq>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	4b06      	ldr	r3, [pc, #24]	; (8003010 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	0a1b      	lsrs	r3, r3, #8
 8002ffc:	f003 0307 	and.w	r3, r3, #7
 8003000:	4904      	ldr	r1, [pc, #16]	; (8003014 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003002:	5ccb      	ldrb	r3, [r1, r3]
 8003004:	f003 031f 	and.w	r3, r3, #31
 8003008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800300c:	4618      	mov	r0, r3
 800300e:	bd80      	pop	{r7, pc}
 8003010:	40021000 	.word	0x40021000
 8003014:	08005818 	.word	0x08005818

08003018 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800301c:	f7ff ffda 	bl	8002fd4 <HAL_RCC_GetHCLKFreq>
 8003020:	4602      	mov	r2, r0
 8003022:	4b06      	ldr	r3, [pc, #24]	; (800303c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	0adb      	lsrs	r3, r3, #11
 8003028:	f003 0307 	and.w	r3, r3, #7
 800302c:	4904      	ldr	r1, [pc, #16]	; (8003040 <HAL_RCC_GetPCLK2Freq+0x28>)
 800302e:	5ccb      	ldrb	r3, [r1, r3]
 8003030:	f003 031f 	and.w	r3, r3, #31
 8003034:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003038:	4618      	mov	r0, r3
 800303a:	bd80      	pop	{r7, pc}
 800303c:	40021000 	.word	0x40021000
 8003040:	08005818 	.word	0x08005818

08003044 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800304c:	2300      	movs	r3, #0
 800304e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003050:	4b2a      	ldr	r3, [pc, #168]	; (80030fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d003      	beq.n	8003064 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800305c:	f7ff fa02 	bl	8002464 <HAL_PWREx_GetVoltageRange>
 8003060:	6178      	str	r0, [r7, #20]
 8003062:	e014      	b.n	800308e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003064:	4b25      	ldr	r3, [pc, #148]	; (80030fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003068:	4a24      	ldr	r2, [pc, #144]	; (80030fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800306a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800306e:	6593      	str	r3, [r2, #88]	; 0x58
 8003070:	4b22      	ldr	r3, [pc, #136]	; (80030fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003078:	60fb      	str	r3, [r7, #12]
 800307a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800307c:	f7ff f9f2 	bl	8002464 <HAL_PWREx_GetVoltageRange>
 8003080:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003082:	4b1e      	ldr	r3, [pc, #120]	; (80030fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003086:	4a1d      	ldr	r2, [pc, #116]	; (80030fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003088:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800308c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003094:	d10b      	bne.n	80030ae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2b80      	cmp	r3, #128	; 0x80
 800309a:	d919      	bls.n	80030d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2ba0      	cmp	r3, #160	; 0xa0
 80030a0:	d902      	bls.n	80030a8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030a2:	2302      	movs	r3, #2
 80030a4:	613b      	str	r3, [r7, #16]
 80030a6:	e013      	b.n	80030d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030a8:	2301      	movs	r3, #1
 80030aa:	613b      	str	r3, [r7, #16]
 80030ac:	e010      	b.n	80030d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2b80      	cmp	r3, #128	; 0x80
 80030b2:	d902      	bls.n	80030ba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80030b4:	2303      	movs	r3, #3
 80030b6:	613b      	str	r3, [r7, #16]
 80030b8:	e00a      	b.n	80030d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2b80      	cmp	r3, #128	; 0x80
 80030be:	d102      	bne.n	80030c6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030c0:	2302      	movs	r3, #2
 80030c2:	613b      	str	r3, [r7, #16]
 80030c4:	e004      	b.n	80030d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2b70      	cmp	r3, #112	; 0x70
 80030ca:	d101      	bne.n	80030d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030cc:	2301      	movs	r3, #1
 80030ce:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80030d0:	4b0b      	ldr	r3, [pc, #44]	; (8003100 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f023 0207 	bic.w	r2, r3, #7
 80030d8:	4909      	ldr	r1, [pc, #36]	; (8003100 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	4313      	orrs	r3, r2
 80030de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80030e0:	4b07      	ldr	r3, [pc, #28]	; (8003100 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0307 	and.w	r3, r3, #7
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d001      	beq.n	80030f2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e000      	b.n	80030f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3718      	adds	r7, #24
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	40021000 	.word	0x40021000
 8003100:	40022000 	.word	0x40022000

08003104 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800310c:	2300      	movs	r3, #0
 800310e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003110:	2300      	movs	r3, #0
 8003112:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800311c:	2b00      	cmp	r3, #0
 800311e:	d041      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003124:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003128:	d02a      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800312a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800312e:	d824      	bhi.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003130:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003134:	d008      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003136:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800313a:	d81e      	bhi.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00a      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003140:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003144:	d010      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003146:	e018      	b.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003148:	4b86      	ldr	r3, [pc, #536]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	4a85      	ldr	r2, [pc, #532]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800314e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003152:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003154:	e015      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	3304      	adds	r3, #4
 800315a:	2100      	movs	r1, #0
 800315c:	4618      	mov	r0, r3
 800315e:	f000 fabb 	bl	80036d8 <RCCEx_PLLSAI1_Config>
 8003162:	4603      	mov	r3, r0
 8003164:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003166:	e00c      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	3320      	adds	r3, #32
 800316c:	2100      	movs	r1, #0
 800316e:	4618      	mov	r0, r3
 8003170:	f000 fba6 	bl	80038c0 <RCCEx_PLLSAI2_Config>
 8003174:	4603      	mov	r3, r0
 8003176:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003178:	e003      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	74fb      	strb	r3, [r7, #19]
      break;
 800317e:	e000      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003180:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003182:	7cfb      	ldrb	r3, [r7, #19]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d10b      	bne.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003188:	4b76      	ldr	r3, [pc, #472]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800318a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800318e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003196:	4973      	ldr	r1, [pc, #460]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003198:	4313      	orrs	r3, r2
 800319a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800319e:	e001      	b.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031a0:	7cfb      	ldrb	r3, [r7, #19]
 80031a2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d041      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031b4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80031b8:	d02a      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80031ba:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80031be:	d824      	bhi.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80031c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80031c4:	d008      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80031c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80031ca:	d81e      	bhi.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d00a      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80031d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031d4:	d010      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80031d6:	e018      	b.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80031d8:	4b62      	ldr	r3, [pc, #392]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	4a61      	ldr	r2, [pc, #388]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031e2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031e4:	e015      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	3304      	adds	r3, #4
 80031ea:	2100      	movs	r1, #0
 80031ec:	4618      	mov	r0, r3
 80031ee:	f000 fa73 	bl	80036d8 <RCCEx_PLLSAI1_Config>
 80031f2:	4603      	mov	r3, r0
 80031f4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031f6:	e00c      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	3320      	adds	r3, #32
 80031fc:	2100      	movs	r1, #0
 80031fe:	4618      	mov	r0, r3
 8003200:	f000 fb5e 	bl	80038c0 <RCCEx_PLLSAI2_Config>
 8003204:	4603      	mov	r3, r0
 8003206:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003208:	e003      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	74fb      	strb	r3, [r7, #19]
      break;
 800320e:	e000      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003210:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003212:	7cfb      	ldrb	r3, [r7, #19]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d10b      	bne.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003218:	4b52      	ldr	r3, [pc, #328]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800321a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800321e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003226:	494f      	ldr	r1, [pc, #316]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003228:	4313      	orrs	r3, r2
 800322a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800322e:	e001      	b.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003230:	7cfb      	ldrb	r3, [r7, #19]
 8003232:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323c:	2b00      	cmp	r3, #0
 800323e:	f000 80a0 	beq.w	8003382 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003242:	2300      	movs	r3, #0
 8003244:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003246:	4b47      	ldr	r3, [pc, #284]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800324a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003252:	2301      	movs	r3, #1
 8003254:	e000      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003256:	2300      	movs	r3, #0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00d      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800325c:	4b41      	ldr	r3, [pc, #260]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800325e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003260:	4a40      	ldr	r2, [pc, #256]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003262:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003266:	6593      	str	r3, [r2, #88]	; 0x58
 8003268:	4b3e      	ldr	r3, [pc, #248]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800326a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800326c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003270:	60bb      	str	r3, [r7, #8]
 8003272:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003274:	2301      	movs	r3, #1
 8003276:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003278:	4b3b      	ldr	r3, [pc, #236]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a3a      	ldr	r2, [pc, #232]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800327e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003282:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003284:	f7fd fe54 	bl	8000f30 <HAL_GetTick>
 8003288:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800328a:	e009      	b.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800328c:	f7fd fe50 	bl	8000f30 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b02      	cmp	r3, #2
 8003298:	d902      	bls.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	74fb      	strb	r3, [r7, #19]
        break;
 800329e:	e005      	b.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80032a0:	4b31      	ldr	r3, [pc, #196]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d0ef      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80032ac:	7cfb      	ldrb	r3, [r7, #19]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d15c      	bne.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80032b2:	4b2c      	ldr	r3, [pc, #176]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032bc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d01f      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d019      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80032d0:	4b24      	ldr	r3, [pc, #144]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032da:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80032dc:	4b21      	ldr	r3, [pc, #132]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e2:	4a20      	ldr	r2, [pc, #128]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032ec:	4b1d      	ldr	r3, [pc, #116]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f2:	4a1c      	ldr	r2, [pc, #112]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80032fc:	4a19      	ldr	r2, [pc, #100]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	2b00      	cmp	r3, #0
 800330c:	d016      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800330e:	f7fd fe0f 	bl	8000f30 <HAL_GetTick>
 8003312:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003314:	e00b      	b.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003316:	f7fd fe0b 	bl	8000f30 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	f241 3288 	movw	r2, #5000	; 0x1388
 8003324:	4293      	cmp	r3, r2
 8003326:	d902      	bls.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	74fb      	strb	r3, [r7, #19]
            break;
 800332c:	e006      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800332e:	4b0d      	ldr	r3, [pc, #52]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d0ec      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800333c:	7cfb      	ldrb	r3, [r7, #19]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10c      	bne.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003342:	4b08      	ldr	r3, [pc, #32]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003348:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003352:	4904      	ldr	r1, [pc, #16]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003354:	4313      	orrs	r3, r2
 8003356:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800335a:	e009      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800335c:	7cfb      	ldrb	r3, [r7, #19]
 800335e:	74bb      	strb	r3, [r7, #18]
 8003360:	e006      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003362:	bf00      	nop
 8003364:	40021000 	.word	0x40021000
 8003368:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800336c:	7cfb      	ldrb	r3, [r7, #19]
 800336e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003370:	7c7b      	ldrb	r3, [r7, #17]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d105      	bne.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003376:	4b9e      	ldr	r3, [pc, #632]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800337a:	4a9d      	ldr	r2, [pc, #628]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800337c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003380:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00a      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800338e:	4b98      	ldr	r3, [pc, #608]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003394:	f023 0203 	bic.w	r2, r3, #3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339c:	4994      	ldr	r1, [pc, #592]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00a      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033b0:	4b8f      	ldr	r3, [pc, #572]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b6:	f023 020c 	bic.w	r2, r3, #12
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033be:	498c      	ldr	r1, [pc, #560]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0304 	and.w	r3, r3, #4
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00a      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033d2:	4b87      	ldr	r3, [pc, #540]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e0:	4983      	ldr	r1, [pc, #524]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0308 	and.w	r3, r3, #8
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00a      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033f4:	4b7e      	ldr	r3, [pc, #504]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033fa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003402:	497b      	ldr	r1, [pc, #492]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003404:	4313      	orrs	r3, r2
 8003406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0310 	and.w	r3, r3, #16
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00a      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003416:	4b76      	ldr	r3, [pc, #472]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800341c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003424:	4972      	ldr	r1, [pc, #456]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003426:	4313      	orrs	r3, r2
 8003428:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0320 	and.w	r3, r3, #32
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00a      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003438:	4b6d      	ldr	r3, [pc, #436]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800343a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800343e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003446:	496a      	ldr	r1, [pc, #424]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003448:	4313      	orrs	r3, r2
 800344a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00a      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800345a:	4b65      	ldr	r3, [pc, #404]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800345c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003460:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003468:	4961      	ldr	r1, [pc, #388]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800346a:	4313      	orrs	r3, r2
 800346c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00a      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800347c:	4b5c      	ldr	r3, [pc, #368]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800347e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003482:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800348a:	4959      	ldr	r1, [pc, #356]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800348c:	4313      	orrs	r3, r2
 800348e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00a      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800349e:	4b54      	ldr	r3, [pc, #336]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ac:	4950      	ldr	r1, [pc, #320]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d00a      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034c0:	4b4b      	ldr	r3, [pc, #300]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ce:	4948      	ldr	r1, [pc, #288]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00a      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034e2:	4b43      	ldr	r3, [pc, #268]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034f0:	493f      	ldr	r1, [pc, #252]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d028      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003504:	4b3a      	ldr	r3, [pc, #232]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800350a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003512:	4937      	ldr	r1, [pc, #220]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003514:	4313      	orrs	r3, r2
 8003516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800351e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003522:	d106      	bne.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003524:	4b32      	ldr	r3, [pc, #200]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	4a31      	ldr	r2, [pc, #196]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800352a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800352e:	60d3      	str	r3, [r2, #12]
 8003530:	e011      	b.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003536:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800353a:	d10c      	bne.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	3304      	adds	r3, #4
 8003540:	2101      	movs	r1, #1
 8003542:	4618      	mov	r0, r3
 8003544:	f000 f8c8 	bl	80036d8 <RCCEx_PLLSAI1_Config>
 8003548:	4603      	mov	r3, r0
 800354a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800354c:	7cfb      	ldrb	r3, [r7, #19]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003552:	7cfb      	ldrb	r3, [r7, #19]
 8003554:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d028      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003562:	4b23      	ldr	r3, [pc, #140]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003568:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003570:	491f      	ldr	r1, [pc, #124]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003572:	4313      	orrs	r3, r2
 8003574:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800357c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003580:	d106      	bne.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003582:	4b1b      	ldr	r3, [pc, #108]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	4a1a      	ldr	r2, [pc, #104]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003588:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800358c:	60d3      	str	r3, [r2, #12]
 800358e:	e011      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003594:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003598:	d10c      	bne.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	3304      	adds	r3, #4
 800359e:	2101      	movs	r1, #1
 80035a0:	4618      	mov	r0, r3
 80035a2:	f000 f899 	bl	80036d8 <RCCEx_PLLSAI1_Config>
 80035a6:	4603      	mov	r3, r0
 80035a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035aa:	7cfb      	ldrb	r3, [r7, #19]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d001      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80035b0:	7cfb      	ldrb	r3, [r7, #19]
 80035b2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d02b      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035c0:	4b0b      	ldr	r3, [pc, #44]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035ce:	4908      	ldr	r1, [pc, #32]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035de:	d109      	bne.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035e0:	4b03      	ldr	r3, [pc, #12]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	4a02      	ldr	r2, [pc, #8]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035ea:	60d3      	str	r3, [r2, #12]
 80035ec:	e014      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80035ee:	bf00      	nop
 80035f0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035fc:	d10c      	bne.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	3304      	adds	r3, #4
 8003602:	2101      	movs	r1, #1
 8003604:	4618      	mov	r0, r3
 8003606:	f000 f867 	bl	80036d8 <RCCEx_PLLSAI1_Config>
 800360a:	4603      	mov	r3, r0
 800360c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800360e:	7cfb      	ldrb	r3, [r7, #19]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d001      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003614:	7cfb      	ldrb	r3, [r7, #19]
 8003616:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d02f      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003624:	4b2b      	ldr	r3, [pc, #172]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800362a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003632:	4928      	ldr	r1, [pc, #160]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003634:	4313      	orrs	r3, r2
 8003636:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800363e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003642:	d10d      	bne.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	3304      	adds	r3, #4
 8003648:	2102      	movs	r1, #2
 800364a:	4618      	mov	r0, r3
 800364c:	f000 f844 	bl	80036d8 <RCCEx_PLLSAI1_Config>
 8003650:	4603      	mov	r3, r0
 8003652:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003654:	7cfb      	ldrb	r3, [r7, #19]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d014      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800365a:	7cfb      	ldrb	r3, [r7, #19]
 800365c:	74bb      	strb	r3, [r7, #18]
 800365e:	e011      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003664:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003668:	d10c      	bne.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	3320      	adds	r3, #32
 800366e:	2102      	movs	r1, #2
 8003670:	4618      	mov	r0, r3
 8003672:	f000 f925 	bl	80038c0 <RCCEx_PLLSAI2_Config>
 8003676:	4603      	mov	r3, r0
 8003678:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800367a:	7cfb      	ldrb	r3, [r7, #19]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003680:	7cfb      	ldrb	r3, [r7, #19]
 8003682:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00a      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003690:	4b10      	ldr	r3, [pc, #64]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003696:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800369e:	490d      	ldr	r1, [pc, #52]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00b      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80036b2:	4b08      	ldr	r3, [pc, #32]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036c2:	4904      	ldr	r1, [pc, #16]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80036ca:	7cbb      	ldrb	r3, [r7, #18]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3718      	adds	r7, #24
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	40021000 	.word	0x40021000

080036d8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036e2:	2300      	movs	r3, #0
 80036e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80036e6:	4b75      	ldr	r3, [pc, #468]	; (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	f003 0303 	and.w	r3, r3, #3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d018      	beq.n	8003724 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80036f2:	4b72      	ldr	r3, [pc, #456]	; (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	f003 0203 	and.w	r2, r3, #3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d10d      	bne.n	800371e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
       ||
 8003706:	2b00      	cmp	r3, #0
 8003708:	d009      	beq.n	800371e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800370a:	4b6c      	ldr	r3, [pc, #432]	; (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	091b      	lsrs	r3, r3, #4
 8003710:	f003 0307 	and.w	r3, r3, #7
 8003714:	1c5a      	adds	r2, r3, #1
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
       ||
 800371a:	429a      	cmp	r2, r3
 800371c:	d047      	beq.n	80037ae <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	73fb      	strb	r3, [r7, #15]
 8003722:	e044      	b.n	80037ae <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2b03      	cmp	r3, #3
 800372a:	d018      	beq.n	800375e <RCCEx_PLLSAI1_Config+0x86>
 800372c:	2b03      	cmp	r3, #3
 800372e:	d825      	bhi.n	800377c <RCCEx_PLLSAI1_Config+0xa4>
 8003730:	2b01      	cmp	r3, #1
 8003732:	d002      	beq.n	800373a <RCCEx_PLLSAI1_Config+0x62>
 8003734:	2b02      	cmp	r3, #2
 8003736:	d009      	beq.n	800374c <RCCEx_PLLSAI1_Config+0x74>
 8003738:	e020      	b.n	800377c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800373a:	4b60      	ldr	r3, [pc, #384]	; (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d11d      	bne.n	8003782 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800374a:	e01a      	b.n	8003782 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800374c:	4b5b      	ldr	r3, [pc, #364]	; (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003754:	2b00      	cmp	r3, #0
 8003756:	d116      	bne.n	8003786 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800375c:	e013      	b.n	8003786 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800375e:	4b57      	ldr	r3, [pc, #348]	; (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10f      	bne.n	800378a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800376a:	4b54      	ldr	r3, [pc, #336]	; (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d109      	bne.n	800378a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800377a:	e006      	b.n	800378a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	73fb      	strb	r3, [r7, #15]
      break;
 8003780:	e004      	b.n	800378c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003782:	bf00      	nop
 8003784:	e002      	b.n	800378c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003786:	bf00      	nop
 8003788:	e000      	b.n	800378c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800378a:	bf00      	nop
    }

    if(status == HAL_OK)
 800378c:	7bfb      	ldrb	r3, [r7, #15]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d10d      	bne.n	80037ae <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003792:	4b4a      	ldr	r3, [pc, #296]	; (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6819      	ldr	r1, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	3b01      	subs	r3, #1
 80037a4:	011b      	lsls	r3, r3, #4
 80037a6:	430b      	orrs	r3, r1
 80037a8:	4944      	ldr	r1, [pc, #272]	; (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80037ae:	7bfb      	ldrb	r3, [r7, #15]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d17d      	bne.n	80038b0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80037b4:	4b41      	ldr	r3, [pc, #260]	; (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a40      	ldr	r2, [pc, #256]	; (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80037be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037c0:	f7fd fbb6 	bl	8000f30 <HAL_GetTick>
 80037c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037c6:	e009      	b.n	80037dc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037c8:	f7fd fbb2 	bl	8000f30 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d902      	bls.n	80037dc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	73fb      	strb	r3, [r7, #15]
        break;
 80037da:	e005      	b.n	80037e8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037dc:	4b37      	ldr	r3, [pc, #220]	; (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1ef      	bne.n	80037c8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80037e8:	7bfb      	ldrb	r3, [r7, #15]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d160      	bne.n	80038b0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d111      	bne.n	8003818 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037f4:	4b31      	ldr	r3, [pc, #196]	; (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80037f6:	691b      	ldr	r3, [r3, #16]
 80037f8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80037fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	6892      	ldr	r2, [r2, #8]
 8003804:	0211      	lsls	r1, r2, #8
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	68d2      	ldr	r2, [r2, #12]
 800380a:	0912      	lsrs	r2, r2, #4
 800380c:	0452      	lsls	r2, r2, #17
 800380e:	430a      	orrs	r2, r1
 8003810:	492a      	ldr	r1, [pc, #168]	; (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003812:	4313      	orrs	r3, r2
 8003814:	610b      	str	r3, [r1, #16]
 8003816:	e027      	b.n	8003868 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d112      	bne.n	8003844 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800381e:	4b27      	ldr	r3, [pc, #156]	; (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003826:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	6892      	ldr	r2, [r2, #8]
 800382e:	0211      	lsls	r1, r2, #8
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	6912      	ldr	r2, [r2, #16]
 8003834:	0852      	lsrs	r2, r2, #1
 8003836:	3a01      	subs	r2, #1
 8003838:	0552      	lsls	r2, r2, #21
 800383a:	430a      	orrs	r2, r1
 800383c:	491f      	ldr	r1, [pc, #124]	; (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800383e:	4313      	orrs	r3, r2
 8003840:	610b      	str	r3, [r1, #16]
 8003842:	e011      	b.n	8003868 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003844:	4b1d      	ldr	r3, [pc, #116]	; (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800384c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	6892      	ldr	r2, [r2, #8]
 8003854:	0211      	lsls	r1, r2, #8
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	6952      	ldr	r2, [r2, #20]
 800385a:	0852      	lsrs	r2, r2, #1
 800385c:	3a01      	subs	r2, #1
 800385e:	0652      	lsls	r2, r2, #25
 8003860:	430a      	orrs	r2, r1
 8003862:	4916      	ldr	r1, [pc, #88]	; (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003864:	4313      	orrs	r3, r2
 8003866:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003868:	4b14      	ldr	r3, [pc, #80]	; (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a13      	ldr	r2, [pc, #76]	; (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800386e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003872:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003874:	f7fd fb5c 	bl	8000f30 <HAL_GetTick>
 8003878:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800387a:	e009      	b.n	8003890 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800387c:	f7fd fb58 	bl	8000f30 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b02      	cmp	r3, #2
 8003888:	d902      	bls.n	8003890 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	73fb      	strb	r3, [r7, #15]
          break;
 800388e:	e005      	b.n	800389c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003890:	4b0a      	ldr	r3, [pc, #40]	; (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d0ef      	beq.n	800387c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800389c:	7bfb      	ldrb	r3, [r7, #15]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d106      	bne.n	80038b0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80038a2:	4b06      	ldr	r3, [pc, #24]	; (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80038a4:	691a      	ldr	r2, [r3, #16]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	4904      	ldr	r1, [pc, #16]	; (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80038b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	40021000 	.word	0x40021000

080038c0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038ca:	2300      	movs	r3, #0
 80038cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80038ce:	4b6a      	ldr	r3, [pc, #424]	; (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	f003 0303 	and.w	r3, r3, #3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d018      	beq.n	800390c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80038da:	4b67      	ldr	r3, [pc, #412]	; (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	f003 0203 	and.w	r2, r3, #3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d10d      	bne.n	8003906 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
       ||
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d009      	beq.n	8003906 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80038f2:	4b61      	ldr	r3, [pc, #388]	; (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	091b      	lsrs	r3, r3, #4
 80038f8:	f003 0307 	and.w	r3, r3, #7
 80038fc:	1c5a      	adds	r2, r3, #1
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
       ||
 8003902:	429a      	cmp	r2, r3
 8003904:	d047      	beq.n	8003996 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	73fb      	strb	r3, [r7, #15]
 800390a:	e044      	b.n	8003996 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2b03      	cmp	r3, #3
 8003912:	d018      	beq.n	8003946 <RCCEx_PLLSAI2_Config+0x86>
 8003914:	2b03      	cmp	r3, #3
 8003916:	d825      	bhi.n	8003964 <RCCEx_PLLSAI2_Config+0xa4>
 8003918:	2b01      	cmp	r3, #1
 800391a:	d002      	beq.n	8003922 <RCCEx_PLLSAI2_Config+0x62>
 800391c:	2b02      	cmp	r3, #2
 800391e:	d009      	beq.n	8003934 <RCCEx_PLLSAI2_Config+0x74>
 8003920:	e020      	b.n	8003964 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003922:	4b55      	ldr	r3, [pc, #340]	; (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d11d      	bne.n	800396a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003932:	e01a      	b.n	800396a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003934:	4b50      	ldr	r3, [pc, #320]	; (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800393c:	2b00      	cmp	r3, #0
 800393e:	d116      	bne.n	800396e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003944:	e013      	b.n	800396e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003946:	4b4c      	ldr	r3, [pc, #304]	; (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d10f      	bne.n	8003972 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003952:	4b49      	ldr	r3, [pc, #292]	; (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d109      	bne.n	8003972 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003962:	e006      	b.n	8003972 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	73fb      	strb	r3, [r7, #15]
      break;
 8003968:	e004      	b.n	8003974 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800396a:	bf00      	nop
 800396c:	e002      	b.n	8003974 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800396e:	bf00      	nop
 8003970:	e000      	b.n	8003974 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003972:	bf00      	nop
    }

    if(status == HAL_OK)
 8003974:	7bfb      	ldrb	r3, [r7, #15]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d10d      	bne.n	8003996 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800397a:	4b3f      	ldr	r3, [pc, #252]	; (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6819      	ldr	r1, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	3b01      	subs	r3, #1
 800398c:	011b      	lsls	r3, r3, #4
 800398e:	430b      	orrs	r3, r1
 8003990:	4939      	ldr	r1, [pc, #228]	; (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003992:	4313      	orrs	r3, r2
 8003994:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003996:	7bfb      	ldrb	r3, [r7, #15]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d167      	bne.n	8003a6c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800399c:	4b36      	ldr	r3, [pc, #216]	; (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a35      	ldr	r2, [pc, #212]	; (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039a8:	f7fd fac2 	bl	8000f30 <HAL_GetTick>
 80039ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80039ae:	e009      	b.n	80039c4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80039b0:	f7fd fabe 	bl	8000f30 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d902      	bls.n	80039c4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	73fb      	strb	r3, [r7, #15]
        break;
 80039c2:	e005      	b.n	80039d0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80039c4:	4b2c      	ldr	r3, [pc, #176]	; (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d1ef      	bne.n	80039b0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80039d0:	7bfb      	ldrb	r3, [r7, #15]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d14a      	bne.n	8003a6c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d111      	bne.n	8003a00 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80039dc:	4b26      	ldr	r3, [pc, #152]	; (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039de:	695b      	ldr	r3, [r3, #20]
 80039e0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80039e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	6892      	ldr	r2, [r2, #8]
 80039ec:	0211      	lsls	r1, r2, #8
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	68d2      	ldr	r2, [r2, #12]
 80039f2:	0912      	lsrs	r2, r2, #4
 80039f4:	0452      	lsls	r2, r2, #17
 80039f6:	430a      	orrs	r2, r1
 80039f8:	491f      	ldr	r1, [pc, #124]	; (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	614b      	str	r3, [r1, #20]
 80039fe:	e011      	b.n	8003a24 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a00:	4b1d      	ldr	r3, [pc, #116]	; (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a02:	695b      	ldr	r3, [r3, #20]
 8003a04:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003a08:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	6892      	ldr	r2, [r2, #8]
 8003a10:	0211      	lsls	r1, r2, #8
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	6912      	ldr	r2, [r2, #16]
 8003a16:	0852      	lsrs	r2, r2, #1
 8003a18:	3a01      	subs	r2, #1
 8003a1a:	0652      	lsls	r2, r2, #25
 8003a1c:	430a      	orrs	r2, r1
 8003a1e:	4916      	ldr	r1, [pc, #88]	; (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003a24:	4b14      	ldr	r3, [pc, #80]	; (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a13      	ldr	r2, [pc, #76]	; (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a2e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a30:	f7fd fa7e 	bl	8000f30 <HAL_GetTick>
 8003a34:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a36:	e009      	b.n	8003a4c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a38:	f7fd fa7a 	bl	8000f30 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d902      	bls.n	8003a4c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	73fb      	strb	r3, [r7, #15]
          break;
 8003a4a:	e005      	b.n	8003a58 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a4c:	4b0a      	ldr	r3, [pc, #40]	; (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d0ef      	beq.n	8003a38 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003a58:	7bfb      	ldrb	r3, [r7, #15]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d106      	bne.n	8003a6c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003a5e:	4b06      	ldr	r3, [pc, #24]	; (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a60:	695a      	ldr	r2, [r3, #20]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	4904      	ldr	r1, [pc, #16]	; (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	40021000 	.word	0x40021000

08003a7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d101      	bne.n	8003a8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e049      	b.n	8003b22 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d106      	bne.n	8003aa8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f7fd f808 	bl	8000ab8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2202      	movs	r2, #2
 8003aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	3304      	adds	r3, #4
 8003ab8:	4619      	mov	r1, r3
 8003aba:	4610      	mov	r0, r2
 8003abc:	f000 fb7a 	bl	80041b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3708      	adds	r7, #8
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b082      	sub	sp, #8
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d101      	bne.n	8003b3c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e049      	b.n	8003bd0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d106      	bne.n	8003b56 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 f841 	bl	8003bd8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2202      	movs	r2, #2
 8003b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	3304      	adds	r3, #4
 8003b66:	4619      	mov	r1, r3
 8003b68:	4610      	mov	r0, r2
 8003b6a:	f000 fb23 	bl	80041b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3708      	adds	r7, #8
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003be0:	bf00      	nop
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d109      	bne.n	8003c10 <HAL_TIM_PWM_Start+0x24>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	bf14      	ite	ne
 8003c08:	2301      	movne	r3, #1
 8003c0a:	2300      	moveq	r3, #0
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	e03c      	b.n	8003c8a <HAL_TIM_PWM_Start+0x9e>
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	2b04      	cmp	r3, #4
 8003c14:	d109      	bne.n	8003c2a <HAL_TIM_PWM_Start+0x3e>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	bf14      	ite	ne
 8003c22:	2301      	movne	r3, #1
 8003c24:	2300      	moveq	r3, #0
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	e02f      	b.n	8003c8a <HAL_TIM_PWM_Start+0x9e>
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	2b08      	cmp	r3, #8
 8003c2e:	d109      	bne.n	8003c44 <HAL_TIM_PWM_Start+0x58>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	bf14      	ite	ne
 8003c3c:	2301      	movne	r3, #1
 8003c3e:	2300      	moveq	r3, #0
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	e022      	b.n	8003c8a <HAL_TIM_PWM_Start+0x9e>
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	2b0c      	cmp	r3, #12
 8003c48:	d109      	bne.n	8003c5e <HAL_TIM_PWM_Start+0x72>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	bf14      	ite	ne
 8003c56:	2301      	movne	r3, #1
 8003c58:	2300      	moveq	r3, #0
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	e015      	b.n	8003c8a <HAL_TIM_PWM_Start+0x9e>
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	2b10      	cmp	r3, #16
 8003c62:	d109      	bne.n	8003c78 <HAL_TIM_PWM_Start+0x8c>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	bf14      	ite	ne
 8003c70:	2301      	movne	r3, #1
 8003c72:	2300      	moveq	r3, #0
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	e008      	b.n	8003c8a <HAL_TIM_PWM_Start+0x9e>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	bf14      	ite	ne
 8003c84:	2301      	movne	r3, #1
 8003c86:	2300      	moveq	r3, #0
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e09c      	b.n	8003dcc <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d104      	bne.n	8003ca2 <HAL_TIM_PWM_Start+0xb6>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ca0:	e023      	b.n	8003cea <HAL_TIM_PWM_Start+0xfe>
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	2b04      	cmp	r3, #4
 8003ca6:	d104      	bne.n	8003cb2 <HAL_TIM_PWM_Start+0xc6>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2202      	movs	r2, #2
 8003cac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cb0:	e01b      	b.n	8003cea <HAL_TIM_PWM_Start+0xfe>
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	2b08      	cmp	r3, #8
 8003cb6:	d104      	bne.n	8003cc2 <HAL_TIM_PWM_Start+0xd6>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2202      	movs	r2, #2
 8003cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cc0:	e013      	b.n	8003cea <HAL_TIM_PWM_Start+0xfe>
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	2b0c      	cmp	r3, #12
 8003cc6:	d104      	bne.n	8003cd2 <HAL_TIM_PWM_Start+0xe6>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2202      	movs	r2, #2
 8003ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003cd0:	e00b      	b.n	8003cea <HAL_TIM_PWM_Start+0xfe>
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	2b10      	cmp	r3, #16
 8003cd6:	d104      	bne.n	8003ce2 <HAL_TIM_PWM_Start+0xf6>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2202      	movs	r2, #2
 8003cdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ce0:	e003      	b.n	8003cea <HAL_TIM_PWM_Start+0xfe>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2202      	movs	r2, #2
 8003ce6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	6839      	ldr	r1, [r7, #0]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f000 fe68 	bl	80049c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a35      	ldr	r2, [pc, #212]	; (8003dd4 <HAL_TIM_PWM_Start+0x1e8>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d013      	beq.n	8003d2a <HAL_TIM_PWM_Start+0x13e>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a34      	ldr	r2, [pc, #208]	; (8003dd8 <HAL_TIM_PWM_Start+0x1ec>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d00e      	beq.n	8003d2a <HAL_TIM_PWM_Start+0x13e>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a32      	ldr	r2, [pc, #200]	; (8003ddc <HAL_TIM_PWM_Start+0x1f0>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d009      	beq.n	8003d2a <HAL_TIM_PWM_Start+0x13e>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a31      	ldr	r2, [pc, #196]	; (8003de0 <HAL_TIM_PWM_Start+0x1f4>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d004      	beq.n	8003d2a <HAL_TIM_PWM_Start+0x13e>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a2f      	ldr	r2, [pc, #188]	; (8003de4 <HAL_TIM_PWM_Start+0x1f8>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d101      	bne.n	8003d2e <HAL_TIM_PWM_Start+0x142>
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e000      	b.n	8003d30 <HAL_TIM_PWM_Start+0x144>
 8003d2e:	2300      	movs	r3, #0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d007      	beq.n	8003d44 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d42:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a22      	ldr	r2, [pc, #136]	; (8003dd4 <HAL_TIM_PWM_Start+0x1e8>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d01d      	beq.n	8003d8a <HAL_TIM_PWM_Start+0x19e>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d56:	d018      	beq.n	8003d8a <HAL_TIM_PWM_Start+0x19e>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a22      	ldr	r2, [pc, #136]	; (8003de8 <HAL_TIM_PWM_Start+0x1fc>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d013      	beq.n	8003d8a <HAL_TIM_PWM_Start+0x19e>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a21      	ldr	r2, [pc, #132]	; (8003dec <HAL_TIM_PWM_Start+0x200>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d00e      	beq.n	8003d8a <HAL_TIM_PWM_Start+0x19e>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a1f      	ldr	r2, [pc, #124]	; (8003df0 <HAL_TIM_PWM_Start+0x204>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d009      	beq.n	8003d8a <HAL_TIM_PWM_Start+0x19e>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a17      	ldr	r2, [pc, #92]	; (8003dd8 <HAL_TIM_PWM_Start+0x1ec>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d004      	beq.n	8003d8a <HAL_TIM_PWM_Start+0x19e>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a15      	ldr	r2, [pc, #84]	; (8003ddc <HAL_TIM_PWM_Start+0x1f0>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d115      	bne.n	8003db6 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	689a      	ldr	r2, [r3, #8]
 8003d90:	4b18      	ldr	r3, [pc, #96]	; (8003df4 <HAL_TIM_PWM_Start+0x208>)
 8003d92:	4013      	ands	r3, r2
 8003d94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2b06      	cmp	r3, #6
 8003d9a:	d015      	beq.n	8003dc8 <HAL_TIM_PWM_Start+0x1dc>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003da2:	d011      	beq.n	8003dc8 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f042 0201 	orr.w	r2, r2, #1
 8003db2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003db4:	e008      	b.n	8003dc8 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f042 0201 	orr.w	r2, r2, #1
 8003dc4:	601a      	str	r2, [r3, #0]
 8003dc6:	e000      	b.n	8003dca <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dc8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003dca:	2300      	movs	r3, #0
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3710      	adds	r7, #16
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	40012c00 	.word	0x40012c00
 8003dd8:	40013400 	.word	0x40013400
 8003ddc:	40014000 	.word	0x40014000
 8003de0:	40014400 	.word	0x40014400
 8003de4:	40014800 	.word	0x40014800
 8003de8:	40000400 	.word	0x40000400
 8003dec:	40000800 	.word	0x40000800
 8003df0:	40000c00 	.word	0x40000c00
 8003df4:	00010007 	.word	0x00010007

08003df8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b086      	sub	sp, #24
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e04:	2300      	movs	r3, #0
 8003e06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d101      	bne.n	8003e16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e12:	2302      	movs	r3, #2
 8003e14:	e0ff      	b.n	8004016 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2b14      	cmp	r3, #20
 8003e22:	f200 80f0 	bhi.w	8004006 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003e26:	a201      	add	r2, pc, #4	; (adr r2, 8003e2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e2c:	08003e81 	.word	0x08003e81
 8003e30:	08004007 	.word	0x08004007
 8003e34:	08004007 	.word	0x08004007
 8003e38:	08004007 	.word	0x08004007
 8003e3c:	08003ec1 	.word	0x08003ec1
 8003e40:	08004007 	.word	0x08004007
 8003e44:	08004007 	.word	0x08004007
 8003e48:	08004007 	.word	0x08004007
 8003e4c:	08003f03 	.word	0x08003f03
 8003e50:	08004007 	.word	0x08004007
 8003e54:	08004007 	.word	0x08004007
 8003e58:	08004007 	.word	0x08004007
 8003e5c:	08003f43 	.word	0x08003f43
 8003e60:	08004007 	.word	0x08004007
 8003e64:	08004007 	.word	0x08004007
 8003e68:	08004007 	.word	0x08004007
 8003e6c:	08003f85 	.word	0x08003f85
 8003e70:	08004007 	.word	0x08004007
 8003e74:	08004007 	.word	0x08004007
 8003e78:	08004007 	.word	0x08004007
 8003e7c:	08003fc5 	.word	0x08003fc5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68b9      	ldr	r1, [r7, #8]
 8003e86:	4618      	mov	r0, r3
 8003e88:	f000 fa2e 	bl	80042e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	699a      	ldr	r2, [r3, #24]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f042 0208 	orr.w	r2, r2, #8
 8003e9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	699a      	ldr	r2, [r3, #24]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f022 0204 	bic.w	r2, r2, #4
 8003eaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	6999      	ldr	r1, [r3, #24]
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	691a      	ldr	r2, [r3, #16]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	430a      	orrs	r2, r1
 8003ebc:	619a      	str	r2, [r3, #24]
      break;
 8003ebe:	e0a5      	b.n	800400c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68b9      	ldr	r1, [r7, #8]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f000 fa9e 	bl	8004408 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	699a      	ldr	r2, [r3, #24]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003eda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	699a      	ldr	r2, [r3, #24]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6999      	ldr	r1, [r3, #24]
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	021a      	lsls	r2, r3, #8
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	430a      	orrs	r2, r1
 8003efe:	619a      	str	r2, [r3, #24]
      break;
 8003f00:	e084      	b.n	800400c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68b9      	ldr	r1, [r7, #8]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f000 fb07 	bl	800451c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	69da      	ldr	r2, [r3, #28]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f042 0208 	orr.w	r2, r2, #8
 8003f1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	69da      	ldr	r2, [r3, #28]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f022 0204 	bic.w	r2, r2, #4
 8003f2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	69d9      	ldr	r1, [r3, #28]
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	691a      	ldr	r2, [r3, #16]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	61da      	str	r2, [r3, #28]
      break;
 8003f40:	e064      	b.n	800400c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68b9      	ldr	r1, [r7, #8]
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f000 fb6f 	bl	800462c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	69da      	ldr	r2, [r3, #28]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	69da      	ldr	r2, [r3, #28]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	69d9      	ldr	r1, [r3, #28]
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	021a      	lsls	r2, r3, #8
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	61da      	str	r2, [r3, #28]
      break;
 8003f82:	e043      	b.n	800400c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68b9      	ldr	r1, [r7, #8]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f000 fbb8 	bl	8004700 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f042 0208 	orr.w	r2, r2, #8
 8003f9e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f022 0204 	bic.w	r2, r2, #4
 8003fae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	691a      	ldr	r2, [r3, #16]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	430a      	orrs	r2, r1
 8003fc0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003fc2:	e023      	b.n	800400c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68b9      	ldr	r1, [r7, #8]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f000 fbfc 	bl	80047c8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fde:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	021a      	lsls	r2, r3, #8
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	430a      	orrs	r2, r1
 8004002:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004004:	e002      	b.n	800400c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	75fb      	strb	r3, [r7, #23]
      break;
 800400a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004014:	7dfb      	ldrb	r3, [r7, #23]
}
 8004016:	4618      	mov	r0, r3
 8004018:	3718      	adds	r7, #24
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop

08004020 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800402a:	2300      	movs	r3, #0
 800402c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004034:	2b01      	cmp	r3, #1
 8004036:	d101      	bne.n	800403c <HAL_TIM_ConfigClockSource+0x1c>
 8004038:	2302      	movs	r3, #2
 800403a:	e0b6      	b.n	80041aa <HAL_TIM_ConfigClockSource+0x18a>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2202      	movs	r2, #2
 8004048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800405a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800405e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004066:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68ba      	ldr	r2, [r7, #8]
 800406e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004078:	d03e      	beq.n	80040f8 <HAL_TIM_ConfigClockSource+0xd8>
 800407a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800407e:	f200 8087 	bhi.w	8004190 <HAL_TIM_ConfigClockSource+0x170>
 8004082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004086:	f000 8086 	beq.w	8004196 <HAL_TIM_ConfigClockSource+0x176>
 800408a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800408e:	d87f      	bhi.n	8004190 <HAL_TIM_ConfigClockSource+0x170>
 8004090:	2b70      	cmp	r3, #112	; 0x70
 8004092:	d01a      	beq.n	80040ca <HAL_TIM_ConfigClockSource+0xaa>
 8004094:	2b70      	cmp	r3, #112	; 0x70
 8004096:	d87b      	bhi.n	8004190 <HAL_TIM_ConfigClockSource+0x170>
 8004098:	2b60      	cmp	r3, #96	; 0x60
 800409a:	d050      	beq.n	800413e <HAL_TIM_ConfigClockSource+0x11e>
 800409c:	2b60      	cmp	r3, #96	; 0x60
 800409e:	d877      	bhi.n	8004190 <HAL_TIM_ConfigClockSource+0x170>
 80040a0:	2b50      	cmp	r3, #80	; 0x50
 80040a2:	d03c      	beq.n	800411e <HAL_TIM_ConfigClockSource+0xfe>
 80040a4:	2b50      	cmp	r3, #80	; 0x50
 80040a6:	d873      	bhi.n	8004190 <HAL_TIM_ConfigClockSource+0x170>
 80040a8:	2b40      	cmp	r3, #64	; 0x40
 80040aa:	d058      	beq.n	800415e <HAL_TIM_ConfigClockSource+0x13e>
 80040ac:	2b40      	cmp	r3, #64	; 0x40
 80040ae:	d86f      	bhi.n	8004190 <HAL_TIM_ConfigClockSource+0x170>
 80040b0:	2b30      	cmp	r3, #48	; 0x30
 80040b2:	d064      	beq.n	800417e <HAL_TIM_ConfigClockSource+0x15e>
 80040b4:	2b30      	cmp	r3, #48	; 0x30
 80040b6:	d86b      	bhi.n	8004190 <HAL_TIM_ConfigClockSource+0x170>
 80040b8:	2b20      	cmp	r3, #32
 80040ba:	d060      	beq.n	800417e <HAL_TIM_ConfigClockSource+0x15e>
 80040bc:	2b20      	cmp	r3, #32
 80040be:	d867      	bhi.n	8004190 <HAL_TIM_ConfigClockSource+0x170>
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d05c      	beq.n	800417e <HAL_TIM_ConfigClockSource+0x15e>
 80040c4:	2b10      	cmp	r3, #16
 80040c6:	d05a      	beq.n	800417e <HAL_TIM_ConfigClockSource+0x15e>
 80040c8:	e062      	b.n	8004190 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6818      	ldr	r0, [r3, #0]
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	6899      	ldr	r1, [r3, #8]
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	685a      	ldr	r2, [r3, #4]
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	f000 fc55 	bl	8004988 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80040ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68ba      	ldr	r2, [r7, #8]
 80040f4:	609a      	str	r2, [r3, #8]
      break;
 80040f6:	e04f      	b.n	8004198 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6818      	ldr	r0, [r3, #0]
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	6899      	ldr	r1, [r3, #8]
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685a      	ldr	r2, [r3, #4]
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	f000 fc3e 	bl	8004988 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	689a      	ldr	r2, [r3, #8]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800411a:	609a      	str	r2, [r3, #8]
      break;
 800411c:	e03c      	b.n	8004198 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6818      	ldr	r0, [r3, #0]
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	6859      	ldr	r1, [r3, #4]
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	461a      	mov	r2, r3
 800412c:	f000 fbb2 	bl	8004894 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2150      	movs	r1, #80	; 0x50
 8004136:	4618      	mov	r0, r3
 8004138:	f000 fc0b 	bl	8004952 <TIM_ITRx_SetConfig>
      break;
 800413c:	e02c      	b.n	8004198 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6818      	ldr	r0, [r3, #0]
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	6859      	ldr	r1, [r3, #4]
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	461a      	mov	r2, r3
 800414c:	f000 fbd1 	bl	80048f2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2160      	movs	r1, #96	; 0x60
 8004156:	4618      	mov	r0, r3
 8004158:	f000 fbfb 	bl	8004952 <TIM_ITRx_SetConfig>
      break;
 800415c:	e01c      	b.n	8004198 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6818      	ldr	r0, [r3, #0]
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	6859      	ldr	r1, [r3, #4]
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	461a      	mov	r2, r3
 800416c:	f000 fb92 	bl	8004894 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2140      	movs	r1, #64	; 0x40
 8004176:	4618      	mov	r0, r3
 8004178:	f000 fbeb 	bl	8004952 <TIM_ITRx_SetConfig>
      break;
 800417c:	e00c      	b.n	8004198 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4619      	mov	r1, r3
 8004188:	4610      	mov	r0, r2
 800418a:	f000 fbe2 	bl	8004952 <TIM_ITRx_SetConfig>
      break;
 800418e:	e003      	b.n	8004198 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	73fb      	strb	r3, [r7, #15]
      break;
 8004194:	e000      	b.n	8004198 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004196:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
	...

080041b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a40      	ldr	r2, [pc, #256]	; (80042c8 <TIM_Base_SetConfig+0x114>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d013      	beq.n	80041f4 <TIM_Base_SetConfig+0x40>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041d2:	d00f      	beq.n	80041f4 <TIM_Base_SetConfig+0x40>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a3d      	ldr	r2, [pc, #244]	; (80042cc <TIM_Base_SetConfig+0x118>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d00b      	beq.n	80041f4 <TIM_Base_SetConfig+0x40>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a3c      	ldr	r2, [pc, #240]	; (80042d0 <TIM_Base_SetConfig+0x11c>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d007      	beq.n	80041f4 <TIM_Base_SetConfig+0x40>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a3b      	ldr	r2, [pc, #236]	; (80042d4 <TIM_Base_SetConfig+0x120>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d003      	beq.n	80041f4 <TIM_Base_SetConfig+0x40>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a3a      	ldr	r2, [pc, #232]	; (80042d8 <TIM_Base_SetConfig+0x124>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d108      	bne.n	8004206 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	4313      	orrs	r3, r2
 8004204:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a2f      	ldr	r2, [pc, #188]	; (80042c8 <TIM_Base_SetConfig+0x114>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d01f      	beq.n	800424e <TIM_Base_SetConfig+0x9a>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004214:	d01b      	beq.n	800424e <TIM_Base_SetConfig+0x9a>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a2c      	ldr	r2, [pc, #176]	; (80042cc <TIM_Base_SetConfig+0x118>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d017      	beq.n	800424e <TIM_Base_SetConfig+0x9a>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a2b      	ldr	r2, [pc, #172]	; (80042d0 <TIM_Base_SetConfig+0x11c>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d013      	beq.n	800424e <TIM_Base_SetConfig+0x9a>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a2a      	ldr	r2, [pc, #168]	; (80042d4 <TIM_Base_SetConfig+0x120>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d00f      	beq.n	800424e <TIM_Base_SetConfig+0x9a>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a29      	ldr	r2, [pc, #164]	; (80042d8 <TIM_Base_SetConfig+0x124>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d00b      	beq.n	800424e <TIM_Base_SetConfig+0x9a>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a28      	ldr	r2, [pc, #160]	; (80042dc <TIM_Base_SetConfig+0x128>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d007      	beq.n	800424e <TIM_Base_SetConfig+0x9a>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a27      	ldr	r2, [pc, #156]	; (80042e0 <TIM_Base_SetConfig+0x12c>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d003      	beq.n	800424e <TIM_Base_SetConfig+0x9a>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a26      	ldr	r2, [pc, #152]	; (80042e4 <TIM_Base_SetConfig+0x130>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d108      	bne.n	8004260 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004254:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	4313      	orrs	r3, r2
 800425e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	4313      	orrs	r3, r2
 800426c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	68fa      	ldr	r2, [r7, #12]
 8004272:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	689a      	ldr	r2, [r3, #8]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4a10      	ldr	r2, [pc, #64]	; (80042c8 <TIM_Base_SetConfig+0x114>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d00f      	beq.n	80042ac <TIM_Base_SetConfig+0xf8>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a12      	ldr	r2, [pc, #72]	; (80042d8 <TIM_Base_SetConfig+0x124>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d00b      	beq.n	80042ac <TIM_Base_SetConfig+0xf8>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a11      	ldr	r2, [pc, #68]	; (80042dc <TIM_Base_SetConfig+0x128>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d007      	beq.n	80042ac <TIM_Base_SetConfig+0xf8>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a10      	ldr	r2, [pc, #64]	; (80042e0 <TIM_Base_SetConfig+0x12c>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d003      	beq.n	80042ac <TIM_Base_SetConfig+0xf8>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a0f      	ldr	r2, [pc, #60]	; (80042e4 <TIM_Base_SetConfig+0x130>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d103      	bne.n	80042b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	691a      	ldr	r2, [r3, #16]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	615a      	str	r2, [r3, #20]
}
 80042ba:	bf00      	nop
 80042bc:	3714      	adds	r7, #20
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	40012c00 	.word	0x40012c00
 80042cc:	40000400 	.word	0x40000400
 80042d0:	40000800 	.word	0x40000800
 80042d4:	40000c00 	.word	0x40000c00
 80042d8:	40013400 	.word	0x40013400
 80042dc:	40014000 	.word	0x40014000
 80042e0:	40014400 	.word	0x40014400
 80042e4:	40014800 	.word	0x40014800

080042e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b087      	sub	sp, #28
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a1b      	ldr	r3, [r3, #32]
 80042f6:	f023 0201 	bic.w	r2, r3, #1
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800431a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f023 0303 	bic.w	r3, r3, #3
 8004322:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	4313      	orrs	r3, r2
 800432c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	f023 0302 	bic.w	r3, r3, #2
 8004334:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	697a      	ldr	r2, [r7, #20]
 800433c:	4313      	orrs	r3, r2
 800433e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a2c      	ldr	r2, [pc, #176]	; (80043f4 <TIM_OC1_SetConfig+0x10c>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d00f      	beq.n	8004368 <TIM_OC1_SetConfig+0x80>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a2b      	ldr	r2, [pc, #172]	; (80043f8 <TIM_OC1_SetConfig+0x110>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d00b      	beq.n	8004368 <TIM_OC1_SetConfig+0x80>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a2a      	ldr	r2, [pc, #168]	; (80043fc <TIM_OC1_SetConfig+0x114>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d007      	beq.n	8004368 <TIM_OC1_SetConfig+0x80>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a29      	ldr	r2, [pc, #164]	; (8004400 <TIM_OC1_SetConfig+0x118>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d003      	beq.n	8004368 <TIM_OC1_SetConfig+0x80>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a28      	ldr	r2, [pc, #160]	; (8004404 <TIM_OC1_SetConfig+0x11c>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d10c      	bne.n	8004382 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	f023 0308 	bic.w	r3, r3, #8
 800436e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	697a      	ldr	r2, [r7, #20]
 8004376:	4313      	orrs	r3, r2
 8004378:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f023 0304 	bic.w	r3, r3, #4
 8004380:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a1b      	ldr	r2, [pc, #108]	; (80043f4 <TIM_OC1_SetConfig+0x10c>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d00f      	beq.n	80043aa <TIM_OC1_SetConfig+0xc2>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a1a      	ldr	r2, [pc, #104]	; (80043f8 <TIM_OC1_SetConfig+0x110>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d00b      	beq.n	80043aa <TIM_OC1_SetConfig+0xc2>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a19      	ldr	r2, [pc, #100]	; (80043fc <TIM_OC1_SetConfig+0x114>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d007      	beq.n	80043aa <TIM_OC1_SetConfig+0xc2>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a18      	ldr	r2, [pc, #96]	; (8004400 <TIM_OC1_SetConfig+0x118>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d003      	beq.n	80043aa <TIM_OC1_SetConfig+0xc2>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a17      	ldr	r2, [pc, #92]	; (8004404 <TIM_OC1_SetConfig+0x11c>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d111      	bne.n	80043ce <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80043b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	693a      	ldr	r2, [r7, #16]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	693a      	ldr	r2, [r7, #16]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	693a      	ldr	r2, [r7, #16]
 80043d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	685a      	ldr	r2, [r3, #4]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	697a      	ldr	r2, [r7, #20]
 80043e6:	621a      	str	r2, [r3, #32]
}
 80043e8:	bf00      	nop
 80043ea:	371c      	adds	r7, #28
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr
 80043f4:	40012c00 	.word	0x40012c00
 80043f8:	40013400 	.word	0x40013400
 80043fc:	40014000 	.word	0x40014000
 8004400:	40014400 	.word	0x40014400
 8004404:	40014800 	.word	0x40014800

08004408 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004408:	b480      	push	{r7}
 800440a:	b087      	sub	sp, #28
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a1b      	ldr	r3, [r3, #32]
 8004416:	f023 0210 	bic.w	r2, r3, #16
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004436:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800443a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004442:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	021b      	lsls	r3, r3, #8
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	4313      	orrs	r3, r2
 800444e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	f023 0320 	bic.w	r3, r3, #32
 8004456:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	011b      	lsls	r3, r3, #4
 800445e:	697a      	ldr	r2, [r7, #20]
 8004460:	4313      	orrs	r3, r2
 8004462:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a28      	ldr	r2, [pc, #160]	; (8004508 <TIM_OC2_SetConfig+0x100>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d003      	beq.n	8004474 <TIM_OC2_SetConfig+0x6c>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a27      	ldr	r2, [pc, #156]	; (800450c <TIM_OC2_SetConfig+0x104>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d10d      	bne.n	8004490 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800447a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	011b      	lsls	r3, r3, #4
 8004482:	697a      	ldr	r2, [r7, #20]
 8004484:	4313      	orrs	r3, r2
 8004486:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800448e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a1d      	ldr	r2, [pc, #116]	; (8004508 <TIM_OC2_SetConfig+0x100>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d00f      	beq.n	80044b8 <TIM_OC2_SetConfig+0xb0>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4a1c      	ldr	r2, [pc, #112]	; (800450c <TIM_OC2_SetConfig+0x104>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d00b      	beq.n	80044b8 <TIM_OC2_SetConfig+0xb0>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a1b      	ldr	r2, [pc, #108]	; (8004510 <TIM_OC2_SetConfig+0x108>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d007      	beq.n	80044b8 <TIM_OC2_SetConfig+0xb0>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4a1a      	ldr	r2, [pc, #104]	; (8004514 <TIM_OC2_SetConfig+0x10c>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d003      	beq.n	80044b8 <TIM_OC2_SetConfig+0xb0>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a19      	ldr	r2, [pc, #100]	; (8004518 <TIM_OC2_SetConfig+0x110>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d113      	bne.n	80044e0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	693a      	ldr	r2, [r7, #16]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	693a      	ldr	r2, [r7, #16]
 80044dc:	4313      	orrs	r3, r2
 80044de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	693a      	ldr	r2, [r7, #16]
 80044e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	685a      	ldr	r2, [r3, #4]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	697a      	ldr	r2, [r7, #20]
 80044f8:	621a      	str	r2, [r3, #32]
}
 80044fa:	bf00      	nop
 80044fc:	371c      	adds	r7, #28
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	40012c00 	.word	0x40012c00
 800450c:	40013400 	.word	0x40013400
 8004510:	40014000 	.word	0x40014000
 8004514:	40014400 	.word	0x40014400
 8004518:	40014800 	.word	0x40014800

0800451c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800451c:	b480      	push	{r7}
 800451e:	b087      	sub	sp, #28
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a1b      	ldr	r3, [r3, #32]
 800452a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a1b      	ldr	r3, [r3, #32]
 8004536:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	69db      	ldr	r3, [r3, #28]
 8004542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800454a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800454e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f023 0303 	bic.w	r3, r3, #3
 8004556:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	4313      	orrs	r3, r2
 8004560:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004568:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	021b      	lsls	r3, r3, #8
 8004570:	697a      	ldr	r2, [r7, #20]
 8004572:	4313      	orrs	r3, r2
 8004574:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a27      	ldr	r2, [pc, #156]	; (8004618 <TIM_OC3_SetConfig+0xfc>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d003      	beq.n	8004586 <TIM_OC3_SetConfig+0x6a>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a26      	ldr	r2, [pc, #152]	; (800461c <TIM_OC3_SetConfig+0x100>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d10d      	bne.n	80045a2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800458c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	021b      	lsls	r3, r3, #8
 8004594:	697a      	ldr	r2, [r7, #20]
 8004596:	4313      	orrs	r3, r2
 8004598:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a1c      	ldr	r2, [pc, #112]	; (8004618 <TIM_OC3_SetConfig+0xfc>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d00f      	beq.n	80045ca <TIM_OC3_SetConfig+0xae>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a1b      	ldr	r2, [pc, #108]	; (800461c <TIM_OC3_SetConfig+0x100>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d00b      	beq.n	80045ca <TIM_OC3_SetConfig+0xae>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a1a      	ldr	r2, [pc, #104]	; (8004620 <TIM_OC3_SetConfig+0x104>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d007      	beq.n	80045ca <TIM_OC3_SetConfig+0xae>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a19      	ldr	r2, [pc, #100]	; (8004624 <TIM_OC3_SetConfig+0x108>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d003      	beq.n	80045ca <TIM_OC3_SetConfig+0xae>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a18      	ldr	r2, [pc, #96]	; (8004628 <TIM_OC3_SetConfig+0x10c>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d113      	bne.n	80045f2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	011b      	lsls	r3, r3, #4
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	011b      	lsls	r3, r3, #4
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	685a      	ldr	r2, [r3, #4]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	697a      	ldr	r2, [r7, #20]
 800460a:	621a      	str	r2, [r3, #32]
}
 800460c:	bf00      	nop
 800460e:	371c      	adds	r7, #28
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr
 8004618:	40012c00 	.word	0x40012c00
 800461c:	40013400 	.word	0x40013400
 8004620:	40014000 	.word	0x40014000
 8004624:	40014400 	.word	0x40014400
 8004628:	40014800 	.word	0x40014800

0800462c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800462c:	b480      	push	{r7}
 800462e:	b087      	sub	sp, #28
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a1b      	ldr	r3, [r3, #32]
 800463a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a1b      	ldr	r3, [r3, #32]
 8004646:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	69db      	ldr	r3, [r3, #28]
 8004652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800465a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800465e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004666:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	021b      	lsls	r3, r3, #8
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	4313      	orrs	r3, r2
 8004672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800467a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	031b      	lsls	r3, r3, #12
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	4313      	orrs	r3, r2
 8004686:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a18      	ldr	r2, [pc, #96]	; (80046ec <TIM_OC4_SetConfig+0xc0>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d00f      	beq.n	80046b0 <TIM_OC4_SetConfig+0x84>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a17      	ldr	r2, [pc, #92]	; (80046f0 <TIM_OC4_SetConfig+0xc4>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d00b      	beq.n	80046b0 <TIM_OC4_SetConfig+0x84>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a16      	ldr	r2, [pc, #88]	; (80046f4 <TIM_OC4_SetConfig+0xc8>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d007      	beq.n	80046b0 <TIM_OC4_SetConfig+0x84>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a15      	ldr	r2, [pc, #84]	; (80046f8 <TIM_OC4_SetConfig+0xcc>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d003      	beq.n	80046b0 <TIM_OC4_SetConfig+0x84>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a14      	ldr	r2, [pc, #80]	; (80046fc <TIM_OC4_SetConfig+0xd0>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d109      	bne.n	80046c4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	695b      	ldr	r3, [r3, #20]
 80046bc:	019b      	lsls	r3, r3, #6
 80046be:	697a      	ldr	r2, [r7, #20]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	685a      	ldr	r2, [r3, #4]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	693a      	ldr	r2, [r7, #16]
 80046dc:	621a      	str	r2, [r3, #32]
}
 80046de:	bf00      	nop
 80046e0:	371c      	adds	r7, #28
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	40012c00 	.word	0x40012c00
 80046f0:	40013400 	.word	0x40013400
 80046f4:	40014000 	.word	0x40014000
 80046f8:	40014400 	.word	0x40014400
 80046fc:	40014800 	.word	0x40014800

08004700 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004700:	b480      	push	{r7}
 8004702:	b087      	sub	sp, #28
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a1b      	ldr	r3, [r3, #32]
 800470e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800472e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004732:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	4313      	orrs	r3, r2
 800473c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004744:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	041b      	lsls	r3, r3, #16
 800474c:	693a      	ldr	r2, [r7, #16]
 800474e:	4313      	orrs	r3, r2
 8004750:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a17      	ldr	r2, [pc, #92]	; (80047b4 <TIM_OC5_SetConfig+0xb4>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d00f      	beq.n	800477a <TIM_OC5_SetConfig+0x7a>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a16      	ldr	r2, [pc, #88]	; (80047b8 <TIM_OC5_SetConfig+0xb8>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d00b      	beq.n	800477a <TIM_OC5_SetConfig+0x7a>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a15      	ldr	r2, [pc, #84]	; (80047bc <TIM_OC5_SetConfig+0xbc>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d007      	beq.n	800477a <TIM_OC5_SetConfig+0x7a>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a14      	ldr	r2, [pc, #80]	; (80047c0 <TIM_OC5_SetConfig+0xc0>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d003      	beq.n	800477a <TIM_OC5_SetConfig+0x7a>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a13      	ldr	r2, [pc, #76]	; (80047c4 <TIM_OC5_SetConfig+0xc4>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d109      	bne.n	800478e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004780:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	021b      	lsls	r3, r3, #8
 8004788:	697a      	ldr	r2, [r7, #20]
 800478a:	4313      	orrs	r3, r2
 800478c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	685a      	ldr	r2, [r3, #4]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	693a      	ldr	r2, [r7, #16]
 80047a6:	621a      	str	r2, [r3, #32]
}
 80047a8:	bf00      	nop
 80047aa:	371c      	adds	r7, #28
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr
 80047b4:	40012c00 	.word	0x40012c00
 80047b8:	40013400 	.word	0x40013400
 80047bc:	40014000 	.word	0x40014000
 80047c0:	40014400 	.word	0x40014400
 80047c4:	40014800 	.word	0x40014800

080047c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b087      	sub	sp, #28
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a1b      	ldr	r3, [r3, #32]
 80047e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	021b      	lsls	r3, r3, #8
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	4313      	orrs	r3, r2
 8004806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800480e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	051b      	lsls	r3, r3, #20
 8004816:	693a      	ldr	r2, [r7, #16]
 8004818:	4313      	orrs	r3, r2
 800481a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a18      	ldr	r2, [pc, #96]	; (8004880 <TIM_OC6_SetConfig+0xb8>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d00f      	beq.n	8004844 <TIM_OC6_SetConfig+0x7c>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a17      	ldr	r2, [pc, #92]	; (8004884 <TIM_OC6_SetConfig+0xbc>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d00b      	beq.n	8004844 <TIM_OC6_SetConfig+0x7c>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a16      	ldr	r2, [pc, #88]	; (8004888 <TIM_OC6_SetConfig+0xc0>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d007      	beq.n	8004844 <TIM_OC6_SetConfig+0x7c>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a15      	ldr	r2, [pc, #84]	; (800488c <TIM_OC6_SetConfig+0xc4>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d003      	beq.n	8004844 <TIM_OC6_SetConfig+0x7c>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a14      	ldr	r2, [pc, #80]	; (8004890 <TIM_OC6_SetConfig+0xc8>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d109      	bne.n	8004858 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800484a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	695b      	ldr	r3, [r3, #20]
 8004850:	029b      	lsls	r3, r3, #10
 8004852:	697a      	ldr	r2, [r7, #20]
 8004854:	4313      	orrs	r3, r2
 8004856:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	685a      	ldr	r2, [r3, #4]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	693a      	ldr	r2, [r7, #16]
 8004870:	621a      	str	r2, [r3, #32]
}
 8004872:	bf00      	nop
 8004874:	371c      	adds	r7, #28
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	40012c00 	.word	0x40012c00
 8004884:	40013400 	.word	0x40013400
 8004888:	40014000 	.word	0x40014000
 800488c:	40014400 	.word	0x40014400
 8004890:	40014800 	.word	0x40014800

08004894 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004894:	b480      	push	{r7}
 8004896:	b087      	sub	sp, #28
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6a1b      	ldr	r3, [r3, #32]
 80048a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6a1b      	ldr	r3, [r3, #32]
 80048aa:	f023 0201 	bic.w	r2, r3, #1
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	011b      	lsls	r3, r3, #4
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	f023 030a 	bic.w	r3, r3, #10
 80048d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	697a      	ldr	r2, [r7, #20]
 80048e4:	621a      	str	r2, [r3, #32]
}
 80048e6:	bf00      	nop
 80048e8:	371c      	adds	r7, #28
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr

080048f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048f2:	b480      	push	{r7}
 80048f4:	b087      	sub	sp, #28
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	60f8      	str	r0, [r7, #12]
 80048fa:	60b9      	str	r1, [r7, #8]
 80048fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6a1b      	ldr	r3, [r3, #32]
 8004902:	f023 0210 	bic.w	r2, r3, #16
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6a1b      	ldr	r3, [r3, #32]
 8004914:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800491c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	031b      	lsls	r3, r3, #12
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	4313      	orrs	r3, r2
 8004926:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800492e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	011b      	lsls	r3, r3, #4
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	4313      	orrs	r3, r2
 8004938:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	697a      	ldr	r2, [r7, #20]
 800493e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	621a      	str	r2, [r3, #32]
}
 8004946:	bf00      	nop
 8004948:	371c      	adds	r7, #28
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr

08004952 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004952:	b480      	push	{r7}
 8004954:	b085      	sub	sp, #20
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
 800495a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004968:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800496a:	683a      	ldr	r2, [r7, #0]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	4313      	orrs	r3, r2
 8004970:	f043 0307 	orr.w	r3, r3, #7
 8004974:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	609a      	str	r2, [r3, #8]
}
 800497c:	bf00      	nop
 800497e:	3714      	adds	r7, #20
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004988:	b480      	push	{r7}
 800498a:	b087      	sub	sp, #28
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
 8004994:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	021a      	lsls	r2, r3, #8
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	431a      	orrs	r2, r3
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	697a      	ldr	r2, [r7, #20]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	697a      	ldr	r2, [r7, #20]
 80049ba:	609a      	str	r2, [r3, #8]
}
 80049bc:	bf00      	nop
 80049be:	371c      	adds	r7, #28
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b087      	sub	sp, #28
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	f003 031f 	and.w	r3, r3, #31
 80049da:	2201      	movs	r2, #1
 80049dc:	fa02 f303 	lsl.w	r3, r2, r3
 80049e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6a1a      	ldr	r2, [r3, #32]
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	43db      	mvns	r3, r3
 80049ea:	401a      	ands	r2, r3
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6a1a      	ldr	r2, [r3, #32]
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	f003 031f 	and.w	r3, r3, #31
 80049fa:	6879      	ldr	r1, [r7, #4]
 80049fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004a00:	431a      	orrs	r2, r3
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	621a      	str	r2, [r3, #32]
}
 8004a06:	bf00      	nop
 8004a08:	371c      	adds	r7, #28
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
	...

08004a14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d101      	bne.n	8004a2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a28:	2302      	movs	r3, #2
 8004a2a:	e068      	b.n	8004afe <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2202      	movs	r2, #2
 8004a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a2e      	ldr	r2, [pc, #184]	; (8004b0c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d004      	beq.n	8004a60 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a2d      	ldr	r2, [pc, #180]	; (8004b10 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d108      	bne.n	8004a72 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004a66:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a78:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68fa      	ldr	r2, [r7, #12]
 8004a8a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a1e      	ldr	r2, [pc, #120]	; (8004b0c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d01d      	beq.n	8004ad2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a9e:	d018      	beq.n	8004ad2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a1b      	ldr	r2, [pc, #108]	; (8004b14 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d013      	beq.n	8004ad2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a1a      	ldr	r2, [pc, #104]	; (8004b18 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d00e      	beq.n	8004ad2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a18      	ldr	r2, [pc, #96]	; (8004b1c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d009      	beq.n	8004ad2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a13      	ldr	r2, [pc, #76]	; (8004b10 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d004      	beq.n	8004ad2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a14      	ldr	r2, [pc, #80]	; (8004b20 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d10c      	bne.n	8004aec <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ad8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	68ba      	ldr	r2, [r7, #8]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68ba      	ldr	r2, [r7, #8]
 8004aea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3714      	adds	r7, #20
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	40012c00 	.word	0x40012c00
 8004b10:	40013400 	.word	0x40013400
 8004b14:	40000400 	.word	0x40000400
 8004b18:	40000800 	.word	0x40000800
 8004b1c:	40000c00 	.word	0x40000c00
 8004b20:	40014000 	.word	0x40014000

08004b24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d101      	bne.n	8004b36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e040      	b.n	8004bb8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d106      	bne.n	8004b4c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f7fc f80c 	bl	8000b64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2224      	movs	r2, #36	; 0x24
 8004b50:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f022 0201 	bic.w	r2, r2, #1
 8004b60:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 f992 	bl	8004e8c <UART_SetConfig>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d101      	bne.n	8004b72 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e022      	b.n	8004bb8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d002      	beq.n	8004b80 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 fc10 	bl	80053a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	685a      	ldr	r2, [r3, #4]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	689a      	ldr	r2, [r3, #8]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f042 0201 	orr.w	r2, r2, #1
 8004bae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f000 fc97 	bl	80054e4 <UART_CheckIdleState>
 8004bb6:	4603      	mov	r3, r0
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3708      	adds	r7, #8
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b08a      	sub	sp, #40	; 0x28
 8004bc4:	af02      	add	r7, sp, #8
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	603b      	str	r3, [r7, #0]
 8004bcc:	4613      	mov	r3, r2
 8004bce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bd4:	2b20      	cmp	r3, #32
 8004bd6:	f040 8082 	bne.w	8004cde <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d002      	beq.n	8004be6 <HAL_UART_Transmit+0x26>
 8004be0:	88fb      	ldrh	r3, [r7, #6]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d101      	bne.n	8004bea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e07a      	b.n	8004ce0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d101      	bne.n	8004bf8 <HAL_UART_Transmit+0x38>
 8004bf4:	2302      	movs	r3, #2
 8004bf6:	e073      	b.n	8004ce0 <HAL_UART_Transmit+0x120>
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2221      	movs	r2, #33	; 0x21
 8004c0c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c0e:	f7fc f98f 	bl	8000f30 <HAL_GetTick>
 8004c12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	88fa      	ldrh	r2, [r7, #6]
 8004c18:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	88fa      	ldrh	r2, [r7, #6]
 8004c20:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c2c:	d108      	bne.n	8004c40 <HAL_UART_Transmit+0x80>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d104      	bne.n	8004c40 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004c36:	2300      	movs	r3, #0
 8004c38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	61bb      	str	r3, [r7, #24]
 8004c3e:	e003      	b.n	8004c48 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c44:	2300      	movs	r3, #0
 8004c46:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004c50:	e02d      	b.n	8004cae <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	9300      	str	r3, [sp, #0]
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	2180      	movs	r1, #128	; 0x80
 8004c5c:	68f8      	ldr	r0, [r7, #12]
 8004c5e:	f000 fc8a 	bl	8005576 <UART_WaitOnFlagUntilTimeout>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d001      	beq.n	8004c6c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e039      	b.n	8004ce0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d10b      	bne.n	8004c8a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	881a      	ldrh	r2, [r3, #0]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c7e:	b292      	uxth	r2, r2
 8004c80:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	3302      	adds	r3, #2
 8004c86:	61bb      	str	r3, [r7, #24]
 8004c88:	e008      	b.n	8004c9c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	781a      	ldrb	r2, [r3, #0]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	b292      	uxth	r2, r2
 8004c94:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	3301      	adds	r3, #1
 8004c9a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	3b01      	subs	r3, #1
 8004ca6:	b29a      	uxth	r2, r3
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d1cb      	bne.n	8004c52 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	9300      	str	r3, [sp, #0]
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	2140      	movs	r1, #64	; 0x40
 8004cc4:	68f8      	ldr	r0, [r7, #12]
 8004cc6:	f000 fc56 	bl	8005576 <UART_WaitOnFlagUntilTimeout>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d001      	beq.n	8004cd4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e005      	b.n	8004ce0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2220      	movs	r2, #32
 8004cd8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	e000      	b.n	8004ce0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004cde:	2302      	movs	r3, #2
  }
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3720      	adds	r7, #32
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b08a      	sub	sp, #40	; 0x28
 8004cec:	af02      	add	r7, sp, #8
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	603b      	str	r3, [r7, #0]
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cfc:	2b20      	cmp	r3, #32
 8004cfe:	f040 80bf 	bne.w	8004e80 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d002      	beq.n	8004d0e <HAL_UART_Receive+0x26>
 8004d08:	88fb      	ldrh	r3, [r7, #6]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d101      	bne.n	8004d12 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e0b7      	b.n	8004e82 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d101      	bne.n	8004d20 <HAL_UART_Receive+0x38>
 8004d1c:	2302      	movs	r3, #2
 8004d1e:	e0b0      	b.n	8004e82 <HAL_UART_Receive+0x19a>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2222      	movs	r2, #34	; 0x22
 8004d34:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d3c:	f7fc f8f8 	bl	8000f30 <HAL_GetTick>
 8004d40:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	88fa      	ldrh	r2, [r7, #6]
 8004d46:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	88fa      	ldrh	r2, [r7, #6]
 8004d4e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d5a:	d10e      	bne.n	8004d7a <HAL_UART_Receive+0x92>
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d105      	bne.n	8004d70 <HAL_UART_Receive+0x88>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004d6a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d6e:	e02d      	b.n	8004dcc <HAL_UART_Receive+0xe4>
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	22ff      	movs	r2, #255	; 0xff
 8004d74:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d78:	e028      	b.n	8004dcc <HAL_UART_Receive+0xe4>
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d10d      	bne.n	8004d9e <HAL_UART_Receive+0xb6>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d104      	bne.n	8004d94 <HAL_UART_Receive+0xac>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	22ff      	movs	r2, #255	; 0xff
 8004d8e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d92:	e01b      	b.n	8004dcc <HAL_UART_Receive+0xe4>
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	227f      	movs	r2, #127	; 0x7f
 8004d98:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d9c:	e016      	b.n	8004dcc <HAL_UART_Receive+0xe4>
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004da6:	d10d      	bne.n	8004dc4 <HAL_UART_Receive+0xdc>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d104      	bne.n	8004dba <HAL_UART_Receive+0xd2>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	227f      	movs	r2, #127	; 0x7f
 8004db4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004db8:	e008      	b.n	8004dcc <HAL_UART_Receive+0xe4>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	223f      	movs	r2, #63	; 0x3f
 8004dbe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004dc2:	e003      	b.n	8004dcc <HAL_UART_Receive+0xe4>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004dd2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ddc:	d108      	bne.n	8004df0 <HAL_UART_Receive+0x108>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d104      	bne.n	8004df0 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8004de6:	2300      	movs	r3, #0
 8004de8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	61bb      	str	r3, [r7, #24]
 8004dee:	e003      	b.n	8004df8 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004df4:	2300      	movs	r3, #0
 8004df6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004e00:	e033      	b.n	8004e6a <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	9300      	str	r3, [sp, #0]
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	2120      	movs	r1, #32
 8004e0c:	68f8      	ldr	r0, [r7, #12]
 8004e0e:	f000 fbb2 	bl	8005576 <UART_WaitOnFlagUntilTimeout>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d001      	beq.n	8004e1c <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	e032      	b.n	8004e82 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d10c      	bne.n	8004e3c <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004e28:	b29a      	uxth	r2, r3
 8004e2a:	8a7b      	ldrh	r3, [r7, #18]
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	b29a      	uxth	r2, r3
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	3302      	adds	r3, #2
 8004e38:	61bb      	str	r3, [r7, #24]
 8004e3a:	e00d      	b.n	8004e58 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	b2da      	uxtb	r2, r3
 8004e46:	8a7b      	ldrh	r3, [r7, #18]
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	b2da      	uxtb	r2, r3
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	3301      	adds	r3, #1
 8004e56:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	3b01      	subs	r3, #1
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1c5      	bne.n	8004e02 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2220      	movs	r2, #32
 8004e7a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	e000      	b.n	8004e82 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8004e80:	2302      	movs	r3, #2
  }
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3720      	adds	r7, #32
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
	...

08004e8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e8c:	b5b0      	push	{r4, r5, r7, lr}
 8004e8e:	b088      	sub	sp, #32
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e94:	2300      	movs	r3, #0
 8004e96:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	689a      	ldr	r2, [r3, #8]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	431a      	orrs	r2, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	695b      	ldr	r3, [r3, #20]
 8004ea6:	431a      	orrs	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	69db      	ldr	r3, [r3, #28]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	4bad      	ldr	r3, [pc, #692]	; (800516c <UART_SetConfig+0x2e0>)
 8004eb8:	4013      	ands	r3, r2
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	6812      	ldr	r2, [r2, #0]
 8004ebe:	69f9      	ldr	r1, [r7, #28]
 8004ec0:	430b      	orrs	r3, r1
 8004ec2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	68da      	ldr	r2, [r3, #12]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4aa2      	ldr	r2, [pc, #648]	; (8005170 <UART_SetConfig+0x2e4>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d004      	beq.n	8004ef4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	69fa      	ldr	r2, [r7, #28]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	69fa      	ldr	r2, [r7, #28]
 8004f04:	430a      	orrs	r2, r1
 8004f06:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a99      	ldr	r2, [pc, #612]	; (8005174 <UART_SetConfig+0x2e8>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d121      	bne.n	8004f56 <UART_SetConfig+0xca>
 8004f12:	4b99      	ldr	r3, [pc, #612]	; (8005178 <UART_SetConfig+0x2ec>)
 8004f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f18:	f003 0303 	and.w	r3, r3, #3
 8004f1c:	2b03      	cmp	r3, #3
 8004f1e:	d817      	bhi.n	8004f50 <UART_SetConfig+0xc4>
 8004f20:	a201      	add	r2, pc, #4	; (adr r2, 8004f28 <UART_SetConfig+0x9c>)
 8004f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f26:	bf00      	nop
 8004f28:	08004f39 	.word	0x08004f39
 8004f2c:	08004f45 	.word	0x08004f45
 8004f30:	08004f3f 	.word	0x08004f3f
 8004f34:	08004f4b 	.word	0x08004f4b
 8004f38:	2301      	movs	r3, #1
 8004f3a:	76fb      	strb	r3, [r7, #27]
 8004f3c:	e0e7      	b.n	800510e <UART_SetConfig+0x282>
 8004f3e:	2302      	movs	r3, #2
 8004f40:	76fb      	strb	r3, [r7, #27]
 8004f42:	e0e4      	b.n	800510e <UART_SetConfig+0x282>
 8004f44:	2304      	movs	r3, #4
 8004f46:	76fb      	strb	r3, [r7, #27]
 8004f48:	e0e1      	b.n	800510e <UART_SetConfig+0x282>
 8004f4a:	2308      	movs	r3, #8
 8004f4c:	76fb      	strb	r3, [r7, #27]
 8004f4e:	e0de      	b.n	800510e <UART_SetConfig+0x282>
 8004f50:	2310      	movs	r3, #16
 8004f52:	76fb      	strb	r3, [r7, #27]
 8004f54:	e0db      	b.n	800510e <UART_SetConfig+0x282>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a88      	ldr	r2, [pc, #544]	; (800517c <UART_SetConfig+0x2f0>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d132      	bne.n	8004fc6 <UART_SetConfig+0x13a>
 8004f60:	4b85      	ldr	r3, [pc, #532]	; (8005178 <UART_SetConfig+0x2ec>)
 8004f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f66:	f003 030c 	and.w	r3, r3, #12
 8004f6a:	2b0c      	cmp	r3, #12
 8004f6c:	d828      	bhi.n	8004fc0 <UART_SetConfig+0x134>
 8004f6e:	a201      	add	r2, pc, #4	; (adr r2, 8004f74 <UART_SetConfig+0xe8>)
 8004f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f74:	08004fa9 	.word	0x08004fa9
 8004f78:	08004fc1 	.word	0x08004fc1
 8004f7c:	08004fc1 	.word	0x08004fc1
 8004f80:	08004fc1 	.word	0x08004fc1
 8004f84:	08004fb5 	.word	0x08004fb5
 8004f88:	08004fc1 	.word	0x08004fc1
 8004f8c:	08004fc1 	.word	0x08004fc1
 8004f90:	08004fc1 	.word	0x08004fc1
 8004f94:	08004faf 	.word	0x08004faf
 8004f98:	08004fc1 	.word	0x08004fc1
 8004f9c:	08004fc1 	.word	0x08004fc1
 8004fa0:	08004fc1 	.word	0x08004fc1
 8004fa4:	08004fbb 	.word	0x08004fbb
 8004fa8:	2300      	movs	r3, #0
 8004faa:	76fb      	strb	r3, [r7, #27]
 8004fac:	e0af      	b.n	800510e <UART_SetConfig+0x282>
 8004fae:	2302      	movs	r3, #2
 8004fb0:	76fb      	strb	r3, [r7, #27]
 8004fb2:	e0ac      	b.n	800510e <UART_SetConfig+0x282>
 8004fb4:	2304      	movs	r3, #4
 8004fb6:	76fb      	strb	r3, [r7, #27]
 8004fb8:	e0a9      	b.n	800510e <UART_SetConfig+0x282>
 8004fba:	2308      	movs	r3, #8
 8004fbc:	76fb      	strb	r3, [r7, #27]
 8004fbe:	e0a6      	b.n	800510e <UART_SetConfig+0x282>
 8004fc0:	2310      	movs	r3, #16
 8004fc2:	76fb      	strb	r3, [r7, #27]
 8004fc4:	e0a3      	b.n	800510e <UART_SetConfig+0x282>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a6d      	ldr	r2, [pc, #436]	; (8005180 <UART_SetConfig+0x2f4>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d120      	bne.n	8005012 <UART_SetConfig+0x186>
 8004fd0:	4b69      	ldr	r3, [pc, #420]	; (8005178 <UART_SetConfig+0x2ec>)
 8004fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fd6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004fda:	2b30      	cmp	r3, #48	; 0x30
 8004fdc:	d013      	beq.n	8005006 <UART_SetConfig+0x17a>
 8004fde:	2b30      	cmp	r3, #48	; 0x30
 8004fe0:	d814      	bhi.n	800500c <UART_SetConfig+0x180>
 8004fe2:	2b20      	cmp	r3, #32
 8004fe4:	d009      	beq.n	8004ffa <UART_SetConfig+0x16e>
 8004fe6:	2b20      	cmp	r3, #32
 8004fe8:	d810      	bhi.n	800500c <UART_SetConfig+0x180>
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d002      	beq.n	8004ff4 <UART_SetConfig+0x168>
 8004fee:	2b10      	cmp	r3, #16
 8004ff0:	d006      	beq.n	8005000 <UART_SetConfig+0x174>
 8004ff2:	e00b      	b.n	800500c <UART_SetConfig+0x180>
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	76fb      	strb	r3, [r7, #27]
 8004ff8:	e089      	b.n	800510e <UART_SetConfig+0x282>
 8004ffa:	2302      	movs	r3, #2
 8004ffc:	76fb      	strb	r3, [r7, #27]
 8004ffe:	e086      	b.n	800510e <UART_SetConfig+0x282>
 8005000:	2304      	movs	r3, #4
 8005002:	76fb      	strb	r3, [r7, #27]
 8005004:	e083      	b.n	800510e <UART_SetConfig+0x282>
 8005006:	2308      	movs	r3, #8
 8005008:	76fb      	strb	r3, [r7, #27]
 800500a:	e080      	b.n	800510e <UART_SetConfig+0x282>
 800500c:	2310      	movs	r3, #16
 800500e:	76fb      	strb	r3, [r7, #27]
 8005010:	e07d      	b.n	800510e <UART_SetConfig+0x282>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a5b      	ldr	r2, [pc, #364]	; (8005184 <UART_SetConfig+0x2f8>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d120      	bne.n	800505e <UART_SetConfig+0x1d2>
 800501c:	4b56      	ldr	r3, [pc, #344]	; (8005178 <UART_SetConfig+0x2ec>)
 800501e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005022:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005026:	2bc0      	cmp	r3, #192	; 0xc0
 8005028:	d013      	beq.n	8005052 <UART_SetConfig+0x1c6>
 800502a:	2bc0      	cmp	r3, #192	; 0xc0
 800502c:	d814      	bhi.n	8005058 <UART_SetConfig+0x1cc>
 800502e:	2b80      	cmp	r3, #128	; 0x80
 8005030:	d009      	beq.n	8005046 <UART_SetConfig+0x1ba>
 8005032:	2b80      	cmp	r3, #128	; 0x80
 8005034:	d810      	bhi.n	8005058 <UART_SetConfig+0x1cc>
 8005036:	2b00      	cmp	r3, #0
 8005038:	d002      	beq.n	8005040 <UART_SetConfig+0x1b4>
 800503a:	2b40      	cmp	r3, #64	; 0x40
 800503c:	d006      	beq.n	800504c <UART_SetConfig+0x1c0>
 800503e:	e00b      	b.n	8005058 <UART_SetConfig+0x1cc>
 8005040:	2300      	movs	r3, #0
 8005042:	76fb      	strb	r3, [r7, #27]
 8005044:	e063      	b.n	800510e <UART_SetConfig+0x282>
 8005046:	2302      	movs	r3, #2
 8005048:	76fb      	strb	r3, [r7, #27]
 800504a:	e060      	b.n	800510e <UART_SetConfig+0x282>
 800504c:	2304      	movs	r3, #4
 800504e:	76fb      	strb	r3, [r7, #27]
 8005050:	e05d      	b.n	800510e <UART_SetConfig+0x282>
 8005052:	2308      	movs	r3, #8
 8005054:	76fb      	strb	r3, [r7, #27]
 8005056:	e05a      	b.n	800510e <UART_SetConfig+0x282>
 8005058:	2310      	movs	r3, #16
 800505a:	76fb      	strb	r3, [r7, #27]
 800505c:	e057      	b.n	800510e <UART_SetConfig+0x282>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a49      	ldr	r2, [pc, #292]	; (8005188 <UART_SetConfig+0x2fc>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d125      	bne.n	80050b4 <UART_SetConfig+0x228>
 8005068:	4b43      	ldr	r3, [pc, #268]	; (8005178 <UART_SetConfig+0x2ec>)
 800506a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800506e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005072:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005076:	d017      	beq.n	80050a8 <UART_SetConfig+0x21c>
 8005078:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800507c:	d817      	bhi.n	80050ae <UART_SetConfig+0x222>
 800507e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005082:	d00b      	beq.n	800509c <UART_SetConfig+0x210>
 8005084:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005088:	d811      	bhi.n	80050ae <UART_SetConfig+0x222>
 800508a:	2b00      	cmp	r3, #0
 800508c:	d003      	beq.n	8005096 <UART_SetConfig+0x20a>
 800508e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005092:	d006      	beq.n	80050a2 <UART_SetConfig+0x216>
 8005094:	e00b      	b.n	80050ae <UART_SetConfig+0x222>
 8005096:	2300      	movs	r3, #0
 8005098:	76fb      	strb	r3, [r7, #27]
 800509a:	e038      	b.n	800510e <UART_SetConfig+0x282>
 800509c:	2302      	movs	r3, #2
 800509e:	76fb      	strb	r3, [r7, #27]
 80050a0:	e035      	b.n	800510e <UART_SetConfig+0x282>
 80050a2:	2304      	movs	r3, #4
 80050a4:	76fb      	strb	r3, [r7, #27]
 80050a6:	e032      	b.n	800510e <UART_SetConfig+0x282>
 80050a8:	2308      	movs	r3, #8
 80050aa:	76fb      	strb	r3, [r7, #27]
 80050ac:	e02f      	b.n	800510e <UART_SetConfig+0x282>
 80050ae:	2310      	movs	r3, #16
 80050b0:	76fb      	strb	r3, [r7, #27]
 80050b2:	e02c      	b.n	800510e <UART_SetConfig+0x282>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a2d      	ldr	r2, [pc, #180]	; (8005170 <UART_SetConfig+0x2e4>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d125      	bne.n	800510a <UART_SetConfig+0x27e>
 80050be:	4b2e      	ldr	r3, [pc, #184]	; (8005178 <UART_SetConfig+0x2ec>)
 80050c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80050c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050cc:	d017      	beq.n	80050fe <UART_SetConfig+0x272>
 80050ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050d2:	d817      	bhi.n	8005104 <UART_SetConfig+0x278>
 80050d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050d8:	d00b      	beq.n	80050f2 <UART_SetConfig+0x266>
 80050da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050de:	d811      	bhi.n	8005104 <UART_SetConfig+0x278>
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d003      	beq.n	80050ec <UART_SetConfig+0x260>
 80050e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050e8:	d006      	beq.n	80050f8 <UART_SetConfig+0x26c>
 80050ea:	e00b      	b.n	8005104 <UART_SetConfig+0x278>
 80050ec:	2300      	movs	r3, #0
 80050ee:	76fb      	strb	r3, [r7, #27]
 80050f0:	e00d      	b.n	800510e <UART_SetConfig+0x282>
 80050f2:	2302      	movs	r3, #2
 80050f4:	76fb      	strb	r3, [r7, #27]
 80050f6:	e00a      	b.n	800510e <UART_SetConfig+0x282>
 80050f8:	2304      	movs	r3, #4
 80050fa:	76fb      	strb	r3, [r7, #27]
 80050fc:	e007      	b.n	800510e <UART_SetConfig+0x282>
 80050fe:	2308      	movs	r3, #8
 8005100:	76fb      	strb	r3, [r7, #27]
 8005102:	e004      	b.n	800510e <UART_SetConfig+0x282>
 8005104:	2310      	movs	r3, #16
 8005106:	76fb      	strb	r3, [r7, #27]
 8005108:	e001      	b.n	800510e <UART_SetConfig+0x282>
 800510a:	2310      	movs	r3, #16
 800510c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a17      	ldr	r2, [pc, #92]	; (8005170 <UART_SetConfig+0x2e4>)
 8005114:	4293      	cmp	r3, r2
 8005116:	f040 8087 	bne.w	8005228 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800511a:	7efb      	ldrb	r3, [r7, #27]
 800511c:	2b08      	cmp	r3, #8
 800511e:	d837      	bhi.n	8005190 <UART_SetConfig+0x304>
 8005120:	a201      	add	r2, pc, #4	; (adr r2, 8005128 <UART_SetConfig+0x29c>)
 8005122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005126:	bf00      	nop
 8005128:	0800514d 	.word	0x0800514d
 800512c:	08005191 	.word	0x08005191
 8005130:	08005155 	.word	0x08005155
 8005134:	08005191 	.word	0x08005191
 8005138:	0800515b 	.word	0x0800515b
 800513c:	08005191 	.word	0x08005191
 8005140:	08005191 	.word	0x08005191
 8005144:	08005191 	.word	0x08005191
 8005148:	08005163 	.word	0x08005163
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800514c:	f7fd ff4e 	bl	8002fec <HAL_RCC_GetPCLK1Freq>
 8005150:	6178      	str	r0, [r7, #20]
        break;
 8005152:	e022      	b.n	800519a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005154:	4b0d      	ldr	r3, [pc, #52]	; (800518c <UART_SetConfig+0x300>)
 8005156:	617b      	str	r3, [r7, #20]
        break;
 8005158:	e01f      	b.n	800519a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800515a:	f7fd feaf 	bl	8002ebc <HAL_RCC_GetSysClockFreq>
 800515e:	6178      	str	r0, [r7, #20]
        break;
 8005160:	e01b      	b.n	800519a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005162:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005166:	617b      	str	r3, [r7, #20]
        break;
 8005168:	e017      	b.n	800519a <UART_SetConfig+0x30e>
 800516a:	bf00      	nop
 800516c:	efff69f3 	.word	0xefff69f3
 8005170:	40008000 	.word	0x40008000
 8005174:	40013800 	.word	0x40013800
 8005178:	40021000 	.word	0x40021000
 800517c:	40004400 	.word	0x40004400
 8005180:	40004800 	.word	0x40004800
 8005184:	40004c00 	.word	0x40004c00
 8005188:	40005000 	.word	0x40005000
 800518c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005190:	2300      	movs	r3, #0
 8005192:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	76bb      	strb	r3, [r7, #26]
        break;
 8005198:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	2b00      	cmp	r3, #0
 800519e:	f000 80f1 	beq.w	8005384 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	685a      	ldr	r2, [r3, #4]
 80051a6:	4613      	mov	r3, r2
 80051a8:	005b      	lsls	r3, r3, #1
 80051aa:	4413      	add	r3, r2
 80051ac:	697a      	ldr	r2, [r7, #20]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d305      	bcc.n	80051be <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80051b8:	697a      	ldr	r2, [r7, #20]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d902      	bls.n	80051c4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	76bb      	strb	r3, [r7, #26]
 80051c2:	e0df      	b.n	8005384 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	4618      	mov	r0, r3
 80051c8:	f04f 0100 	mov.w	r1, #0
 80051cc:	f04f 0200 	mov.w	r2, #0
 80051d0:	f04f 0300 	mov.w	r3, #0
 80051d4:	020b      	lsls	r3, r1, #8
 80051d6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80051da:	0202      	lsls	r2, r0, #8
 80051dc:	6879      	ldr	r1, [r7, #4]
 80051de:	6849      	ldr	r1, [r1, #4]
 80051e0:	0849      	lsrs	r1, r1, #1
 80051e2:	4608      	mov	r0, r1
 80051e4:	f04f 0100 	mov.w	r1, #0
 80051e8:	1814      	adds	r4, r2, r0
 80051ea:	eb43 0501 	adc.w	r5, r3, r1
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	461a      	mov	r2, r3
 80051f4:	f04f 0300 	mov.w	r3, #0
 80051f8:	4620      	mov	r0, r4
 80051fa:	4629      	mov	r1, r5
 80051fc:	f7fa ffe4 	bl	80001c8 <__aeabi_uldivmod>
 8005200:	4602      	mov	r2, r0
 8005202:	460b      	mov	r3, r1
 8005204:	4613      	mov	r3, r2
 8005206:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800520e:	d308      	bcc.n	8005222 <UART_SetConfig+0x396>
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005216:	d204      	bcs.n	8005222 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	693a      	ldr	r2, [r7, #16]
 800521e:	60da      	str	r2, [r3, #12]
 8005220:	e0b0      	b.n	8005384 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	76bb      	strb	r3, [r7, #26]
 8005226:	e0ad      	b.n	8005384 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	69db      	ldr	r3, [r3, #28]
 800522c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005230:	d15b      	bne.n	80052ea <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8005232:	7efb      	ldrb	r3, [r7, #27]
 8005234:	2b08      	cmp	r3, #8
 8005236:	d828      	bhi.n	800528a <UART_SetConfig+0x3fe>
 8005238:	a201      	add	r2, pc, #4	; (adr r2, 8005240 <UART_SetConfig+0x3b4>)
 800523a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800523e:	bf00      	nop
 8005240:	08005265 	.word	0x08005265
 8005244:	0800526d 	.word	0x0800526d
 8005248:	08005275 	.word	0x08005275
 800524c:	0800528b 	.word	0x0800528b
 8005250:	0800527b 	.word	0x0800527b
 8005254:	0800528b 	.word	0x0800528b
 8005258:	0800528b 	.word	0x0800528b
 800525c:	0800528b 	.word	0x0800528b
 8005260:	08005283 	.word	0x08005283
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005264:	f7fd fec2 	bl	8002fec <HAL_RCC_GetPCLK1Freq>
 8005268:	6178      	str	r0, [r7, #20]
        break;
 800526a:	e013      	b.n	8005294 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800526c:	f7fd fed4 	bl	8003018 <HAL_RCC_GetPCLK2Freq>
 8005270:	6178      	str	r0, [r7, #20]
        break;
 8005272:	e00f      	b.n	8005294 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005274:	4b49      	ldr	r3, [pc, #292]	; (800539c <UART_SetConfig+0x510>)
 8005276:	617b      	str	r3, [r7, #20]
        break;
 8005278:	e00c      	b.n	8005294 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800527a:	f7fd fe1f 	bl	8002ebc <HAL_RCC_GetSysClockFreq>
 800527e:	6178      	str	r0, [r7, #20]
        break;
 8005280:	e008      	b.n	8005294 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005282:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005286:	617b      	str	r3, [r7, #20]
        break;
 8005288:	e004      	b.n	8005294 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800528a:	2300      	movs	r3, #0
 800528c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	76bb      	strb	r3, [r7, #26]
        break;
 8005292:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d074      	beq.n	8005384 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	005a      	lsls	r2, r3, #1
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	085b      	lsrs	r3, r3, #1
 80052a4:	441a      	add	r2, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ae:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	2b0f      	cmp	r3, #15
 80052b4:	d916      	bls.n	80052e4 <UART_SetConfig+0x458>
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052bc:	d212      	bcs.n	80052e4 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	f023 030f 	bic.w	r3, r3, #15
 80052c6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	085b      	lsrs	r3, r3, #1
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	f003 0307 	and.w	r3, r3, #7
 80052d2:	b29a      	uxth	r2, r3
 80052d4:	89fb      	ldrh	r3, [r7, #14]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	89fa      	ldrh	r2, [r7, #14]
 80052e0:	60da      	str	r2, [r3, #12]
 80052e2:	e04f      	b.n	8005384 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	76bb      	strb	r3, [r7, #26]
 80052e8:	e04c      	b.n	8005384 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80052ea:	7efb      	ldrb	r3, [r7, #27]
 80052ec:	2b08      	cmp	r3, #8
 80052ee:	d828      	bhi.n	8005342 <UART_SetConfig+0x4b6>
 80052f0:	a201      	add	r2, pc, #4	; (adr r2, 80052f8 <UART_SetConfig+0x46c>)
 80052f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052f6:	bf00      	nop
 80052f8:	0800531d 	.word	0x0800531d
 80052fc:	08005325 	.word	0x08005325
 8005300:	0800532d 	.word	0x0800532d
 8005304:	08005343 	.word	0x08005343
 8005308:	08005333 	.word	0x08005333
 800530c:	08005343 	.word	0x08005343
 8005310:	08005343 	.word	0x08005343
 8005314:	08005343 	.word	0x08005343
 8005318:	0800533b 	.word	0x0800533b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800531c:	f7fd fe66 	bl	8002fec <HAL_RCC_GetPCLK1Freq>
 8005320:	6178      	str	r0, [r7, #20]
        break;
 8005322:	e013      	b.n	800534c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005324:	f7fd fe78 	bl	8003018 <HAL_RCC_GetPCLK2Freq>
 8005328:	6178      	str	r0, [r7, #20]
        break;
 800532a:	e00f      	b.n	800534c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800532c:	4b1b      	ldr	r3, [pc, #108]	; (800539c <UART_SetConfig+0x510>)
 800532e:	617b      	str	r3, [r7, #20]
        break;
 8005330:	e00c      	b.n	800534c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005332:	f7fd fdc3 	bl	8002ebc <HAL_RCC_GetSysClockFreq>
 8005336:	6178      	str	r0, [r7, #20]
        break;
 8005338:	e008      	b.n	800534c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800533a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800533e:	617b      	str	r3, [r7, #20]
        break;
 8005340:	e004      	b.n	800534c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8005342:	2300      	movs	r3, #0
 8005344:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	76bb      	strb	r3, [r7, #26]
        break;
 800534a:	bf00      	nop
    }

    if (pclk != 0U)
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d018      	beq.n	8005384 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	085a      	lsrs	r2, r3, #1
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	441a      	add	r2, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	fbb2 f3f3 	udiv	r3, r2, r3
 8005364:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	2b0f      	cmp	r3, #15
 800536a:	d909      	bls.n	8005380 <UART_SetConfig+0x4f4>
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005372:	d205      	bcs.n	8005380 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	b29a      	uxth	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	60da      	str	r2, [r3, #12]
 800537e:	e001      	b.n	8005384 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005390:	7ebb      	ldrb	r3, [r7, #26]
}
 8005392:	4618      	mov	r0, r3
 8005394:	3720      	adds	r7, #32
 8005396:	46bd      	mov	sp, r7
 8005398:	bdb0      	pop	{r4, r5, r7, pc}
 800539a:	bf00      	nop
 800539c:	00f42400 	.word	0x00f42400

080053a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ac:	f003 0301 	and.w	r3, r3, #1
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d00a      	beq.n	80053ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	430a      	orrs	r2, r1
 80053c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ce:	f003 0302 	and.w	r3, r3, #2
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00a      	beq.n	80053ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	430a      	orrs	r2, r1
 80053ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f0:	f003 0304 	and.w	r3, r3, #4
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d00a      	beq.n	800540e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	430a      	orrs	r2, r1
 800540c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005412:	f003 0308 	and.w	r3, r3, #8
 8005416:	2b00      	cmp	r3, #0
 8005418:	d00a      	beq.n	8005430 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	430a      	orrs	r2, r1
 800542e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005434:	f003 0310 	and.w	r3, r3, #16
 8005438:	2b00      	cmp	r3, #0
 800543a:	d00a      	beq.n	8005452 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	430a      	orrs	r2, r1
 8005450:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005456:	f003 0320 	and.w	r3, r3, #32
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00a      	beq.n	8005474 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	430a      	orrs	r2, r1
 8005472:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800547c:	2b00      	cmp	r3, #0
 800547e:	d01a      	beq.n	80054b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	430a      	orrs	r2, r1
 8005494:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800549e:	d10a      	bne.n	80054b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	430a      	orrs	r2, r1
 80054b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00a      	beq.n	80054d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	430a      	orrs	r2, r1
 80054d6:	605a      	str	r2, [r3, #4]
  }
}
 80054d8:	bf00      	nop
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b086      	sub	sp, #24
 80054e8:	af02      	add	r7, sp, #8
 80054ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80054f4:	f7fb fd1c 	bl	8000f30 <HAL_GetTick>
 80054f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0308 	and.w	r3, r3, #8
 8005504:	2b08      	cmp	r3, #8
 8005506:	d10e      	bne.n	8005526 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005508:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800550c:	9300      	str	r3, [sp, #0]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2200      	movs	r2, #0
 8005512:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 f82d 	bl	8005576 <UART_WaitOnFlagUntilTimeout>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d001      	beq.n	8005526 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e023      	b.n	800556e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0304 	and.w	r3, r3, #4
 8005530:	2b04      	cmp	r3, #4
 8005532:	d10e      	bne.n	8005552 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005534:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005538:	9300      	str	r3, [sp, #0]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 f817 	bl	8005576 <UART_WaitOnFlagUntilTimeout>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d001      	beq.n	8005552 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e00d      	b.n	800556e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2220      	movs	r2, #32
 8005556:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2220      	movs	r2, #32
 800555c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	3710      	adds	r7, #16
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}

08005576 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005576:	b580      	push	{r7, lr}
 8005578:	b09c      	sub	sp, #112	; 0x70
 800557a:	af00      	add	r7, sp, #0
 800557c:	60f8      	str	r0, [r7, #12]
 800557e:	60b9      	str	r1, [r7, #8]
 8005580:	603b      	str	r3, [r7, #0]
 8005582:	4613      	mov	r3, r2
 8005584:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005586:	e0a5      	b.n	80056d4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005588:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800558a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800558e:	f000 80a1 	beq.w	80056d4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005592:	f7fb fccd 	bl	8000f30 <HAL_GetTick>
 8005596:	4602      	mov	r2, r0
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800559e:	429a      	cmp	r2, r3
 80055a0:	d302      	bcc.n	80055a8 <UART_WaitOnFlagUntilTimeout+0x32>
 80055a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d13e      	bne.n	8005626 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055b0:	e853 3f00 	ldrex	r3, [r3]
 80055b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80055b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80055bc:	667b      	str	r3, [r7, #100]	; 0x64
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	461a      	mov	r2, r3
 80055c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055c8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80055cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80055ce:	e841 2300 	strex	r3, r2, [r1]
 80055d2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80055d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d1e6      	bne.n	80055a8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	3308      	adds	r3, #8
 80055e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055e4:	e853 3f00 	ldrex	r3, [r3]
 80055e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ec:	f023 0301 	bic.w	r3, r3, #1
 80055f0:	663b      	str	r3, [r7, #96]	; 0x60
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	3308      	adds	r3, #8
 80055f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80055fa:	64ba      	str	r2, [r7, #72]	; 0x48
 80055fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005600:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005602:	e841 2300 	strex	r3, r2, [r1]
 8005606:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005608:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1e5      	bne.n	80055da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2220      	movs	r2, #32
 8005612:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2220      	movs	r2, #32
 8005618:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2200      	movs	r2, #0
 800561e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005622:	2303      	movs	r3, #3
 8005624:	e067      	b.n	80056f6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0304 	and.w	r3, r3, #4
 8005630:	2b00      	cmp	r3, #0
 8005632:	d04f      	beq.n	80056d4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	69db      	ldr	r3, [r3, #28]
 800563a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800563e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005642:	d147      	bne.n	80056d4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800564c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005656:	e853 3f00 	ldrex	r3, [r3]
 800565a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800565c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005662:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	461a      	mov	r2, r3
 800566a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800566c:	637b      	str	r3, [r7, #52]	; 0x34
 800566e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005670:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005672:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005674:	e841 2300 	strex	r3, r2, [r1]
 8005678:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800567a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800567c:	2b00      	cmp	r3, #0
 800567e:	d1e6      	bne.n	800564e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	3308      	adds	r3, #8
 8005686:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	e853 3f00 	ldrex	r3, [r3]
 800568e:	613b      	str	r3, [r7, #16]
   return(result);
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	f023 0301 	bic.w	r3, r3, #1
 8005696:	66bb      	str	r3, [r7, #104]	; 0x68
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	3308      	adds	r3, #8
 800569e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80056a0:	623a      	str	r2, [r7, #32]
 80056a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a4:	69f9      	ldr	r1, [r7, #28]
 80056a6:	6a3a      	ldr	r2, [r7, #32]
 80056a8:	e841 2300 	strex	r3, r2, [r1]
 80056ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d1e5      	bne.n	8005680 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2220      	movs	r2, #32
 80056b8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2220      	movs	r2, #32
 80056be:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2220      	movs	r2, #32
 80056c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e010      	b.n	80056f6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	69da      	ldr	r2, [r3, #28]
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	4013      	ands	r3, r2
 80056de:	68ba      	ldr	r2, [r7, #8]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	bf0c      	ite	eq
 80056e4:	2301      	moveq	r3, #1
 80056e6:	2300      	movne	r3, #0
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	461a      	mov	r2, r3
 80056ec:	79fb      	ldrb	r3, [r7, #7]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	f43f af4a 	beq.w	8005588 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3770      	adds	r7, #112	; 0x70
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
	...

08005700 <__libc_init_array>:
 8005700:	b570      	push	{r4, r5, r6, lr}
 8005702:	4d0d      	ldr	r5, [pc, #52]	; (8005738 <__libc_init_array+0x38>)
 8005704:	4c0d      	ldr	r4, [pc, #52]	; (800573c <__libc_init_array+0x3c>)
 8005706:	1b64      	subs	r4, r4, r5
 8005708:	10a4      	asrs	r4, r4, #2
 800570a:	2600      	movs	r6, #0
 800570c:	42a6      	cmp	r6, r4
 800570e:	d109      	bne.n	8005724 <__libc_init_array+0x24>
 8005710:	4d0b      	ldr	r5, [pc, #44]	; (8005740 <__libc_init_array+0x40>)
 8005712:	4c0c      	ldr	r4, [pc, #48]	; (8005744 <__libc_init_array+0x44>)
 8005714:	f000 f820 	bl	8005758 <_init>
 8005718:	1b64      	subs	r4, r4, r5
 800571a:	10a4      	asrs	r4, r4, #2
 800571c:	2600      	movs	r6, #0
 800571e:	42a6      	cmp	r6, r4
 8005720:	d105      	bne.n	800572e <__libc_init_array+0x2e>
 8005722:	bd70      	pop	{r4, r5, r6, pc}
 8005724:	f855 3b04 	ldr.w	r3, [r5], #4
 8005728:	4798      	blx	r3
 800572a:	3601      	adds	r6, #1
 800572c:	e7ee      	b.n	800570c <__libc_init_array+0xc>
 800572e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005732:	4798      	blx	r3
 8005734:	3601      	adds	r6, #1
 8005736:	e7f2      	b.n	800571e <__libc_init_array+0x1e>
 8005738:	08005858 	.word	0x08005858
 800573c:	08005858 	.word	0x08005858
 8005740:	08005858 	.word	0x08005858
 8005744:	0800585c 	.word	0x0800585c

08005748 <memset>:
 8005748:	4402      	add	r2, r0
 800574a:	4603      	mov	r3, r0
 800574c:	4293      	cmp	r3, r2
 800574e:	d100      	bne.n	8005752 <memset+0xa>
 8005750:	4770      	bx	lr
 8005752:	f803 1b01 	strb.w	r1, [r3], #1
 8005756:	e7f9      	b.n	800574c <memset+0x4>

08005758 <_init>:
 8005758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800575a:	bf00      	nop
 800575c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800575e:	bc08      	pop	{r3}
 8005760:	469e      	mov	lr, r3
 8005762:	4770      	bx	lr

08005764 <_fini>:
 8005764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005766:	bf00      	nop
 8005768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800576a:	bc08      	pop	{r3}
 800576c:	469e      	mov	lr, r3
 800576e:	4770      	bx	lr
