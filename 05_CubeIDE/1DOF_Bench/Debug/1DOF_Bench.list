
1DOF_Bench.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005664  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  080057ec  080057ec  000157ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058cc  080058cc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080058cc  080058cc  000158cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058d4  080058d4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058d4  080058d4  000158d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058d8  080058d8  000158d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080058dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  2000000c  080058e8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  080058e8  00020164  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a190  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002967  00000000  00000000  0003a1cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c0  00000000  00000000  0003cb38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011c8  00000000  00000000  0003ddf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029ae3  00000000  00000000  0003efc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015c1c  00000000  00000000  00068aa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108cec  00000000  00000000  0007e6bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001873ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ffc  00000000  00000000  00187400  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080057d4 	.word	0x080057d4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080057d4 	.word	0x080057d4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	enum states etat;
	etat = idle_mode;
 80004c6:	2300      	movs	r3, #0
 80004c8:	71fb      	strb	r3, [r7, #7]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004ca:	f000 fcff 	bl	8000ecc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004ce:	f000 f941 	bl	8000754 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004d2:	f000 faaf 	bl	8000a34 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80004d6:	f000 fa7d 	bl	80009d4 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 80004da:	f000 f98d 	bl	80007f8 <MX_ADC1_Init>
	MX_TIM3_Init();
 80004de:	f000 fa01 	bl	80008e4 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	// Light up green led
	setGreenLed();
 80004e2:	f000 fb12 	bl	8000b0a <setGreenLed>
	// blink green led
	blinkGreenLed(10, 100);
 80004e6:	2164      	movs	r1, #100	; 0x64
 80004e8:	200a      	movs	r0, #10
 80004ea:	f000 fb18 	bl	8000b1e <blinkGreenLed>
	// Welcome message on UART
	//sendWelcomeMsgRS232(&huart2);
	//la fonction au dessus pose des soucis
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80004ee:	2104      	movs	r1, #4
 80004f0:	488d      	ldr	r0, [pc, #564]	; (8000728 <main+0x268>)
 80004f2:	f003 fbb9 	bl	8003c68 <HAL_TIM_PWM_Start>
	//NOus mettons ici la valeur minimale pour emettre un signal vers notre ESC dans notre registre capture and compare register
	TIM3->CCR2 = Valeur_minimale_moteur;
 80004f6:	4b8d      	ldr	r3, [pc, #564]	; (800072c <main+0x26c>)
 80004f8:	f44f 62bd 	mov.w	r2, #1512	; 0x5e8
 80004fc:	639a      	str	r2, [r3, #56]	; 0x38
	y_print(&huart2, " 0 to 6 to change state \r\n",26);
 80004fe:	221a      	movs	r2, #26
 8000500:	498b      	ldr	r1, [pc, #556]	; (8000730 <main+0x270>)
 8000502:	488c      	ldr	r0, [pc, #560]	; (8000734 <main+0x274>)
 8000504:	f000 fca2 	bl	8000e4c <y_print>
	HAL_Delay(5000);
 8000508:	f241 3088 	movw	r0, #5000	; 0x1388
 800050c:	f000 fd5a 	bl	8000fc4 <HAL_Delay>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		__HAL_UART_CLEAR_OREFLAG(&huart2);
 8000510:	4b88      	ldr	r3, [pc, #544]	; (8000734 <main+0x274>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2208      	movs	r2, #8
 8000516:	621a      	str	r2, [r3, #32]
		//differents etats qu'on peut avoir
		//idle_mode,init_uc,init_motor,motor_ready,manual_mode,auto_mode,info_mode

		//---------changement d'etat-------

		switch (etat) {
 8000518:	79fb      	ldrb	r3, [r7, #7]
 800051a:	2b06      	cmp	r3, #6
 800051c:	f200 80cb 	bhi.w	80006b6 <main+0x1f6>
 8000520:	a201      	add	r2, pc, #4	; (adr r2, 8000528 <main+0x68>)
 8000522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000526:	bf00      	nop
 8000528:	08000545 	.word	0x08000545
 800052c:	080005d9 	.word	0x080005d9
 8000530:	08000637 	.word	0x08000637
 8000534:	08000657 	.word	0x08000657
 8000538:	08000697 	.word	0x08000697
 800053c:	08000677 	.word	0x08000677
 8000540:	0800056d 	.word	0x0800056d

		case idle_mode:
			//traitement des sorties

			HAL_Delay(1000);
 8000544:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000548:	f000 fd3c 	bl	8000fc4 <HAL_Delay>
			if (HAL_UART_Transmit(&huart2, (uint8_t*) "Idle mode \n\r", 15, 100)
 800054c:	2364      	movs	r3, #100	; 0x64
 800054e:	220f      	movs	r2, #15
 8000550:	4979      	ldr	r1, [pc, #484]	; (8000738 <main+0x278>)
 8000552:	4878      	ldr	r0, [pc, #480]	; (8000734 <main+0x274>)
 8000554:	f004 fb72 	bl	8004c3c <HAL_UART_Transmit>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <main+0xa2>
					!= HAL_OK)
				Error_Handler();
 800055e:	f000 facf 	bl	8000b00 <Error_Handler>
			HAL_Delay(3000);
 8000562:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000566:	f000 fd2d 	bl	8000fc4 <HAL_Delay>
			//traitement des entrées (transitions)

			break;
 800056a:	e0a9      	b.n	80006c0 <main+0x200>
		case info_mode:
			if (HAL_UART_Transmit(&huart2, (uint8_t*) "Info mode\n\r", 12, 100)
 800056c:	2364      	movs	r3, #100	; 0x64
 800056e:	220c      	movs	r2, #12
 8000570:	4972      	ldr	r1, [pc, #456]	; (800073c <main+0x27c>)
 8000572:	4870      	ldr	r0, [pc, #448]	; (8000734 <main+0x274>)
 8000574:	f004 fb62 	bl	8004c3c <HAL_UART_Transmit>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <main+0xc2>
					!= HAL_OK)
				Error_Handler();
 800057e:	f000 fabf 	bl	8000b00 <Error_Handler>
			HAL_Delay(3000);
 8000582:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000586:	f000 fd1d 	bl	8000fc4 <HAL_Delay>
			//sortie de la boucle
			do{
				__HAL_UART_CLEAR_OREFLAG(&huart2);
 800058a:	4b6a      	ldr	r3, [pc, #424]	; (8000734 <main+0x274>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	2208      	movs	r2, #8
 8000590:	621a      	str	r2, [r3, #32]
				if (HAL_UART_Receive(&huart2,(uint8_t*) r_buffer, 2, 10) == HAL_OK){
 8000592:	1d39      	adds	r1, r7, #4
 8000594:	230a      	movs	r3, #10
 8000596:	2202      	movs	r2, #2
 8000598:	4866      	ldr	r0, [pc, #408]	; (8000734 <main+0x274>)
 800059a:	f004 fbe3 	bl	8004d64 <HAL_UART_Receive>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d10b      	bne.n	80005bc <main+0xfc>
					HAL_Delay(50);
 80005a4:	2032      	movs	r0, #50	; 0x32
 80005a6:	f000 fd0d 	bl	8000fc4 <HAL_Delay>
					HAL_UART_Transmit(&huart2,(uint8_t*) r_buffer, 2, 10);
 80005aa:	1d39      	adds	r1, r7, #4
 80005ac:	230a      	movs	r3, #10
 80005ae:	2202      	movs	r2, #2
 80005b0:	4860      	ldr	r0, [pc, #384]	; (8000734 <main+0x274>)
 80005b2:	f004 fb43 	bl	8004c3c <HAL_UART_Transmit>
					HAL_Delay(50);
 80005b6:	2032      	movs	r0, #50	; 0x32
 80005b8:	f000 fd04 	bl	8000fc4 <HAL_Delay>
				}
			}while(r_buffer[0]!=1 );
 80005bc:	793b      	ldrb	r3, [r7, #4]
 80005be:	2b01      	cmp	r3, #1
 80005c0:	d1e3      	bne.n	800058a <main+0xca>
			if (r_buffer[0] == '0')
 80005c2:	793b      	ldrb	r3, [r7, #4]
 80005c4:	2b30      	cmp	r3, #48	; 0x30
 80005c6:	d101      	bne.n	80005cc <main+0x10c>
				etat = idle_mode;
 80005c8:	2300      	movs	r3, #0
 80005ca:	71fb      	strb	r3, [r7, #7]
			if (r_buffer[0] == '1')
 80005cc:	793b      	ldrb	r3, [r7, #4]
 80005ce:	2b31      	cmp	r3, #49	; 0x31
 80005d0:	d173      	bne.n	80006ba <main+0x1fa>
				etat = init_uc;
 80005d2:	2301      	movs	r3, #1
 80005d4:	71fb      	strb	r3, [r7, #7]

			break;
 80005d6:	e070      	b.n	80006ba <main+0x1fa>


		case init_uc:
			if (HAL_UART_Transmit(&huart2, (uint8_t*) "UC Initialization \n\r", 22,
 80005d8:	2364      	movs	r3, #100	; 0x64
 80005da:	2216      	movs	r2, #22
 80005dc:	4958      	ldr	r1, [pc, #352]	; (8000740 <main+0x280>)
 80005de:	4855      	ldr	r0, [pc, #340]	; (8000734 <main+0x274>)
 80005e0:	f004 fb2c 	bl	8004c3c <HAL_UART_Transmit>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <main+0x12e>
					100) != HAL_OK)
				Error_Handler();
 80005ea:	f000 fa89 	bl	8000b00 <Error_Handler>
			HAL_Delay(3000);
 80005ee:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80005f2:	f000 fce7 	bl	8000fc4 <HAL_Delay>
						do{
							if (HAL_UART_Receive(&huart2,(uint8_t*) r_buffer, 2, 10) == HAL_OK)
 80005f6:	1d39      	adds	r1, r7, #4
 80005f8:	230a      	movs	r3, #10
 80005fa:	2202      	movs	r2, #2
 80005fc:	484d      	ldr	r0, [pc, #308]	; (8000734 <main+0x274>)
 80005fe:	f004 fbb1 	bl	8004d64 <HAL_UART_Receive>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d105      	bne.n	8000614 <main+0x154>
								HAL_UART_Transmit(&huart2,(uint8_t*) r_buffer, 2, 10);
 8000608:	1d39      	adds	r1, r7, #4
 800060a:	230a      	movs	r3, #10
 800060c:	2202      	movs	r2, #2
 800060e:	4849      	ldr	r0, [pc, #292]	; (8000734 <main+0x274>)
 8000610:	f004 fb14 	bl	8004c3c <HAL_UART_Transmit>
						}while(r_buffer[0]!=2 || r_buffer[0]!=6);
 8000614:	793b      	ldrb	r3, [r7, #4]
 8000616:	2b02      	cmp	r3, #2
 8000618:	d1ed      	bne.n	80005f6 <main+0x136>
 800061a:	793b      	ldrb	r3, [r7, #4]
 800061c:	2b06      	cmp	r3, #6
 800061e:	d1ea      	bne.n	80005f6 <main+0x136>
						if (r_buffer[0] == '6')
 8000620:	793b      	ldrb	r3, [r7, #4]
 8000622:	2b36      	cmp	r3, #54	; 0x36
 8000624:	d101      	bne.n	800062a <main+0x16a>
							etat = info_mode;
 8000626:	2306      	movs	r3, #6
 8000628:	71fb      	strb	r3, [r7, #7]
						if (r_buffer[0] == '2')
 800062a:	793b      	ldrb	r3, [r7, #4]
 800062c:	2b32      	cmp	r3, #50	; 0x32
 800062e:	d146      	bne.n	80006be <main+0x1fe>
							etat = init_motor;
 8000630:	2302      	movs	r3, #2
 8000632:	71fb      	strb	r3, [r7, #7]
			break;
 8000634:	e043      	b.n	80006be <main+0x1fe>



		case init_motor:
			if (HAL_UART_Transmit(&huart2, (uint8_t*) "Motor Initialization \n\r", 24,
 8000636:	2364      	movs	r3, #100	; 0x64
 8000638:	2218      	movs	r2, #24
 800063a:	4942      	ldr	r1, [pc, #264]	; (8000744 <main+0x284>)
 800063c:	483d      	ldr	r0, [pc, #244]	; (8000734 <main+0x274>)
 800063e:	f004 fafd 	bl	8004c3c <HAL_UART_Transmit>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <main+0x18c>
					100) != HAL_OK)
				Error_Handler();
 8000648:	f000 fa5a 	bl	8000b00 <Error_Handler>
			HAL_Delay(3000);
 800064c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000650:	f000 fcb8 	bl	8000fc4 <HAL_Delay>
			break;
 8000654:	e034      	b.n	80006c0 <main+0x200>



		case motor_ready:
			if (HAL_UART_Transmit(&huart2, (uint8_t*) "Motor ready \n\r", 15, 100)
 8000656:	2364      	movs	r3, #100	; 0x64
 8000658:	220f      	movs	r2, #15
 800065a:	493b      	ldr	r1, [pc, #236]	; (8000748 <main+0x288>)
 800065c:	4835      	ldr	r0, [pc, #212]	; (8000734 <main+0x274>)
 800065e:	f004 faed 	bl	8004c3c <HAL_UART_Transmit>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <main+0x1ac>
					!= HAL_OK)
				Error_Handler();
 8000668:	f000 fa4a 	bl	8000b00 <Error_Handler>
			HAL_Delay(3000);
 800066c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000670:	f000 fca8 	bl	8000fc4 <HAL_Delay>

			break;
 8000674:	e024      	b.n	80006c0 <main+0x200>



		case auto_mode:
			if (HAL_UART_Transmit(&huart2, (uint8_t*) "Auto mode \n\r", 15, 100)
 8000676:	2364      	movs	r3, #100	; 0x64
 8000678:	220f      	movs	r2, #15
 800067a:	4934      	ldr	r1, [pc, #208]	; (800074c <main+0x28c>)
 800067c:	482d      	ldr	r0, [pc, #180]	; (8000734 <main+0x274>)
 800067e:	f004 fadd 	bl	8004c3c <HAL_UART_Transmit>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <main+0x1cc>
					!= HAL_OK)
				Error_Handler();
 8000688:	f000 fa3a 	bl	8000b00 <Error_Handler>
			HAL_Delay(3000);
 800068c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000690:	f000 fc98 	bl	8000fc4 <HAL_Delay>

			break;
 8000694:	e014      	b.n	80006c0 <main+0x200>



		case manual_mode:
			if (HAL_UART_Transmit(&huart2, (uint8_t*) "Manual mode \n\r", 15, 100)
 8000696:	2364      	movs	r3, #100	; 0x64
 8000698:	220f      	movs	r2, #15
 800069a:	492d      	ldr	r1, [pc, #180]	; (8000750 <main+0x290>)
 800069c:	4825      	ldr	r0, [pc, #148]	; (8000734 <main+0x274>)
 800069e:	f004 facd 	bl	8004c3c <HAL_UART_Transmit>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <main+0x1ec>
					!= HAL_OK)
				Error_Handler();
 80006a8:	f000 fa2a 	bl	8000b00 <Error_Handler>
			HAL_Delay(3000);
 80006ac:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80006b0:	f000 fc88 	bl	8000fc4 <HAL_Delay>

			break;
 80006b4:	e004      	b.n	80006c0 <main+0x200>
		default:
			break;
 80006b6:	bf00      	nop
 80006b8:	e002      	b.n	80006c0 <main+0x200>
			break;
 80006ba:	bf00      	nop
 80006bc:	e000      	b.n	80006c0 <main+0x200>
			break;
 80006be:	bf00      	nop
		 HAL_UART_Transmit(&huart2,(uint8_t*) r_buffer, 2, 10);
		 HAL_Delay(50);

		 }*/
		//idle_mode,init_uc,init_motor,motor_ready,manual_mode,auto_mode,info_mode
		if (HAL_UART_Receive(&huart2,(uint8_t*) r_buffer, 2, 10) == HAL_OK)
 80006c0:	1d39      	adds	r1, r7, #4
 80006c2:	230a      	movs	r3, #10
 80006c4:	2202      	movs	r2, #2
 80006c6:	481b      	ldr	r0, [pc, #108]	; (8000734 <main+0x274>)
 80006c8:	f004 fb4c 	bl	8004d64 <HAL_UART_Receive>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d105      	bne.n	80006de <main+0x21e>
				HAL_UART_Transmit(&huart2,(uint8_t*) r_buffer, 2, 10);
 80006d2:	1d39      	adds	r1, r7, #4
 80006d4:	230a      	movs	r3, #10
 80006d6:	2202      	movs	r2, #2
 80006d8:	4816      	ldr	r0, [pc, #88]	; (8000734 <main+0x274>)
 80006da:	f004 faaf 	bl	8004c3c <HAL_UART_Transmit>
		/*HAL_UART_Receive(&huart2, (uint8_t*) r_buffer, 2, 10);
		HAL_Delay(50);
		HAL_UART_Transmit(&huart2, (uint8_t*) r_buffer, 2, 10);
		HAL_Delay(50);*/
		//faire passer dans le switch
		if (r_buffer[0] == '0')
 80006de:	793b      	ldrb	r3, [r7, #4]
 80006e0:	2b30      	cmp	r3, #48	; 0x30
 80006e2:	d101      	bne.n	80006e8 <main+0x228>
			etat = idle_mode;
 80006e4:	2300      	movs	r3, #0
 80006e6:	71fb      	strb	r3, [r7, #7]
		if (r_buffer[0] == '1')
 80006e8:	793b      	ldrb	r3, [r7, #4]
 80006ea:	2b31      	cmp	r3, #49	; 0x31
 80006ec:	d101      	bne.n	80006f2 <main+0x232>
			etat = init_uc;
 80006ee:	2301      	movs	r3, #1
 80006f0:	71fb      	strb	r3, [r7, #7]
		if (r_buffer[0] == '2')
 80006f2:	793b      	ldrb	r3, [r7, #4]
 80006f4:	2b32      	cmp	r3, #50	; 0x32
 80006f6:	d101      	bne.n	80006fc <main+0x23c>
			etat = init_motor;
 80006f8:	2302      	movs	r3, #2
 80006fa:	71fb      	strb	r3, [r7, #7]
		if (r_buffer[0] == '3')
 80006fc:	793b      	ldrb	r3, [r7, #4]
 80006fe:	2b33      	cmp	r3, #51	; 0x33
 8000700:	d101      	bne.n	8000706 <main+0x246>
			etat = motor_ready;
 8000702:	2303      	movs	r3, #3
 8000704:	71fb      	strb	r3, [r7, #7]
		if (r_buffer[0] == '4')
 8000706:	793b      	ldrb	r3, [r7, #4]
 8000708:	2b34      	cmp	r3, #52	; 0x34
 800070a:	d101      	bne.n	8000710 <main+0x250>
			etat = manual_mode;
 800070c:	2304      	movs	r3, #4
 800070e:	71fb      	strb	r3, [r7, #7]
		if (r_buffer[0] == '5')
 8000710:	793b      	ldrb	r3, [r7, #4]
 8000712:	2b35      	cmp	r3, #53	; 0x35
 8000714:	d101      	bne.n	800071a <main+0x25a>
			etat = auto_mode;
 8000716:	2305      	movs	r3, #5
 8000718:	71fb      	strb	r3, [r7, #7]
		if (r_buffer[0] == '6')
 800071a:	793b      	ldrb	r3, [r7, #4]
 800071c:	2b36      	cmp	r3, #54	; 0x36
 800071e:	f47f aef7 	bne.w	8000510 <main+0x50>
			etat = info_mode;
 8000722:	2306      	movs	r3, #6
 8000724:	71fb      	strb	r3, [r7, #7]
		__HAL_UART_CLEAR_OREFLAG(&huart2);
 8000726:	e6f3      	b.n	8000510 <main+0x50>
 8000728:	200000b0 	.word	0x200000b0
 800072c:	40000400 	.word	0x40000400
 8000730:	080057ec 	.word	0x080057ec
 8000734:	2000002c 	.word	0x2000002c
 8000738:	08005808 	.word	0x08005808
 800073c:	08005818 	.word	0x08005818
 8000740:	08005824 	.word	0x08005824
 8000744:	0800583c 	.word	0x0800583c
 8000748:	08005854 	.word	0x08005854
 800074c:	08005864 	.word	0x08005864
 8000750:	08005874 	.word	0x08005874

08000754 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000754:	b580      	push	{r7, lr}
 8000756:	b096      	sub	sp, #88	; 0x58
 8000758:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800075a:	f107 0314 	add.w	r3, r7, #20
 800075e:	2244      	movs	r2, #68	; 0x44
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f005 f82e 	bl	80057c4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000768:	463b      	mov	r3, r7
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
 8000774:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8000776:	f44f 7000 	mov.w	r0, #512	; 0x200
 800077a:	f001 febf 	bl	80024fc <HAL_PWREx_ControlVoltageScaling>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 8000784:	f000 f9bc 	bl	8000b00 <Error_Handler>
	}
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000788:	2302      	movs	r3, #2
 800078a:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800078c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000790:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000792:	2310      	movs	r3, #16
 8000794:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000796:	2302      	movs	r3, #2
 8000798:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800079a:	2302      	movs	r3, #2
 800079c:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 800079e:	2301      	movs	r3, #1
 80007a0:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 80007a2:	230a      	movs	r3, #10
 80007a4:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007a6:	2307      	movs	r3, #7
 80007a8:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007aa:	2302      	movs	r3, #2
 80007ac:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007ae:	2302      	movs	r3, #2
 80007b0:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80007b2:	f107 0314 	add.w	r3, r7, #20
 80007b6:	4618      	mov	r0, r3
 80007b8:	f001 fef6 	bl	80025a8 <HAL_RCC_OscConfig>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <SystemClock_Config+0x72>
		Error_Handler();
 80007c2:	f000 f99d 	bl	8000b00 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80007c6:	230f      	movs	r3, #15
 80007c8:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ca:	2303      	movs	r3, #3
 80007cc:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ce:	2300      	movs	r3, #0
 80007d0:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007d6:	2300      	movs	r3, #0
 80007d8:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80007da:	463b      	mov	r3, r7
 80007dc:	2104      	movs	r1, #4
 80007de:	4618      	mov	r0, r3
 80007e0:	f002 fac8 	bl	8002d74 <HAL_RCC_ClockConfig>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <SystemClock_Config+0x9a>
		Error_Handler();
 80007ea:	f000 f989 	bl	8000b00 <Error_Handler>
	}
}
 80007ee:	bf00      	nop
 80007f0:	3758      	adds	r7, #88	; 0x58
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
	...

080007f8 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08a      	sub	sp, #40	; 0x28
 80007fc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 80007fe:	f107 031c 	add.w	r3, r7, #28
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 800080a:	1d3b      	adds	r3, r7, #4
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]
 8000818:	615a      	str	r2, [r3, #20]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 800081a:	4b2f      	ldr	r3, [pc, #188]	; (80008d8 <MX_ADC1_Init+0xe0>)
 800081c:	4a2f      	ldr	r2, [pc, #188]	; (80008dc <MX_ADC1_Init+0xe4>)
 800081e:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000820:	4b2d      	ldr	r3, [pc, #180]	; (80008d8 <MX_ADC1_Init+0xe0>)
 8000822:	2200      	movs	r2, #0
 8000824:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000826:	4b2c      	ldr	r3, [pc, #176]	; (80008d8 <MX_ADC1_Init+0xe0>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800082c:	4b2a      	ldr	r3, [pc, #168]	; (80008d8 <MX_ADC1_Init+0xe0>)
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000832:	4b29      	ldr	r3, [pc, #164]	; (80008d8 <MX_ADC1_Init+0xe0>)
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000838:	4b27      	ldr	r3, [pc, #156]	; (80008d8 <MX_ADC1_Init+0xe0>)
 800083a:	2204      	movs	r2, #4
 800083c:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 800083e:	4b26      	ldr	r3, [pc, #152]	; (80008d8 <MX_ADC1_Init+0xe0>)
 8000840:	2200      	movs	r2, #0
 8000842:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000844:	4b24      	ldr	r3, [pc, #144]	; (80008d8 <MX_ADC1_Init+0xe0>)
 8000846:	2200      	movs	r2, #0
 8000848:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 800084a:	4b23      	ldr	r3, [pc, #140]	; (80008d8 <MX_ADC1_Init+0xe0>)
 800084c:	2201      	movs	r2, #1
 800084e:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000850:	4b21      	ldr	r3, [pc, #132]	; (80008d8 <MX_ADC1_Init+0xe0>)
 8000852:	2200      	movs	r2, #0
 8000854:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000858:	4b1f      	ldr	r3, [pc, #124]	; (80008d8 <MX_ADC1_Init+0xe0>)
 800085a:	2200      	movs	r2, #0
 800085c:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800085e:	4b1e      	ldr	r3, [pc, #120]	; (80008d8 <MX_ADC1_Init+0xe0>)
 8000860:	2200      	movs	r2, #0
 8000862:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8000864:	4b1c      	ldr	r3, [pc, #112]	; (80008d8 <MX_ADC1_Init+0xe0>)
 8000866:	2200      	movs	r2, #0
 8000868:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800086c:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <MX_ADC1_Init+0xe0>)
 800086e:	2200      	movs	r2, #0
 8000870:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 8000872:	4b19      	ldr	r3, [pc, #100]	; (80008d8 <MX_ADC1_Init+0xe0>)
 8000874:	2200      	movs	r2, #0
 8000876:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800087a:	4817      	ldr	r0, [pc, #92]	; (80008d8 <MX_ADC1_Init+0xe0>)
 800087c:	f000 fd52 	bl	8001324 <HAL_ADC_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_ADC1_Init+0x92>
		Error_Handler();
 8000886:	f000 f93b 	bl	8000b00 <Error_Handler>
	}
	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 800088a:	2300      	movs	r3, #0
 800088c:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 800088e:	f107 031c 	add.w	r3, r7, #28
 8000892:	4619      	mov	r1, r3
 8000894:	4810      	ldr	r0, [pc, #64]	; (80008d8 <MX_ADC1_Init+0xe0>)
 8000896:	f001 fab1 	bl	8001dfc <HAL_ADCEx_MultiModeConfigChannel>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_ADC1_Init+0xac>
		Error_Handler();
 80008a0:	f000 f92e 	bl	8000b00 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 80008a4:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <MX_ADC1_Init+0xe8>)
 80008a6:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80008a8:	2306      	movs	r3, #6
 80008aa:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80008ac:	2300      	movs	r3, #0
 80008ae:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008b0:	237f      	movs	r3, #127	; 0x7f
 80008b2:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008b4:	2304      	movs	r3, #4
 80008b6:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	4619      	mov	r1, r3
 80008c0:	4805      	ldr	r0, [pc, #20]	; (80008d8 <MX_ADC1_Init+0xe0>)
 80008c2:	f000 fe85 	bl	80015d0 <HAL_ADC_ConfigChannel>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_ADC1_Init+0xd8>
		Error_Handler();
 80008cc:	f000 f918 	bl	8000b00 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80008d0:	bf00      	nop
 80008d2:	3728      	adds	r7, #40	; 0x28
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	200000fc 	.word	0x200000fc
 80008dc:	50040000 	.word	0x50040000
 80008e0:	14f00020 	.word	0x14f00020

080008e4 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08e      	sub	sp, #56	; 0x38
 80008e8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80008ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80008f8:	f107 031c 	add.w	r3, r7, #28
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000904:	463b      	mov	r3, r7
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]
 800090c:	609a      	str	r2, [r3, #8]
 800090e:	60da      	str	r2, [r3, #12]
 8000910:	611a      	str	r2, [r3, #16]
 8000912:	615a      	str	r2, [r3, #20]
 8000914:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000916:	4b2d      	ldr	r3, [pc, #180]	; (80009cc <MX_TIM3_Init+0xe8>)
 8000918:	4a2d      	ldr	r2, [pc, #180]	; (80009d0 <MX_TIM3_Init+0xec>)
 800091a:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 38;	  		//38
 800091c:	4b2b      	ldr	r3, [pc, #172]	; (80009cc <MX_TIM3_Init+0xe8>)
 800091e:	2226      	movs	r2, #38	; 0x26
 8000920:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000922:	4b2a      	ldr	r3, [pc, #168]	; (80009cc <MX_TIM3_Init+0xe8>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 4096;
 8000928:	4b28      	ldr	r3, [pc, #160]	; (80009cc <MX_TIM3_Init+0xe8>)
 800092a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800092e:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000930:	4b26      	ldr	r3, [pc, #152]	; (80009cc <MX_TIM3_Init+0xe8>)
 8000932:	2200      	movs	r2, #0
 8000934:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000936:	4b25      	ldr	r3, [pc, #148]	; (80009cc <MX_TIM3_Init+0xe8>)
 8000938:	2200      	movs	r2, #0
 800093a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 800093c:	4823      	ldr	r0, [pc, #140]	; (80009cc <MX_TIM3_Init+0xe8>)
 800093e:	f003 f8db 	bl	8003af8 <HAL_TIM_Base_Init>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_TIM3_Init+0x68>
		Error_Handler();
 8000948:	f000 f8da 	bl	8000b00 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800094c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000950:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8000952:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000956:	4619      	mov	r1, r3
 8000958:	481c      	ldr	r0, [pc, #112]	; (80009cc <MX_TIM3_Init+0xe8>)
 800095a:	f003 fb9f 	bl	800409c <HAL_TIM_ConfigClockSource>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_TIM3_Init+0x84>
		Error_Handler();
 8000964:	f000 f8cc 	bl	8000b00 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8000968:	4818      	ldr	r0, [pc, #96]	; (80009cc <MX_TIM3_Init+0xe8>)
 800096a:	f003 f91c 	bl	8003ba6 <HAL_TIM_PWM_Init>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_TIM3_Init+0x94>
		Error_Handler();
 8000974:	f000 f8c4 	bl	8000b00 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000978:	2300      	movs	r3, #0
 800097a:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800097c:	2300      	movs	r3, #0
 800097e:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000980:	f107 031c 	add.w	r3, r7, #28
 8000984:	4619      	mov	r1, r3
 8000986:	4811      	ldr	r0, [pc, #68]	; (80009cc <MX_TIM3_Init+0xe8>)
 8000988:	f004 f882 	bl	8004a90 <HAL_TIMEx_MasterConfigSynchronization>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_TIM3_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 8000992:	f000 f8b5 	bl	8000b00 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000996:	2360      	movs	r3, #96	; 0x60
 8000998:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 800099a:	2300      	movs	r3, #0
 800099c:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800099e:	2300      	movs	r3, #0
 80009a0:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009a2:	2300      	movs	r3, #0
 80009a4:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 80009a6:	463b      	mov	r3, r7
 80009a8:	2204      	movs	r2, #4
 80009aa:	4619      	mov	r1, r3
 80009ac:	4807      	ldr	r0, [pc, #28]	; (80009cc <MX_TIM3_Init+0xe8>)
 80009ae:	f003 fa61 	bl	8003e74 <HAL_TIM_PWM_ConfigChannel>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_TIM3_Init+0xd8>
			!= HAL_OK) {
		Error_Handler();
 80009b8:	f000 f8a2 	bl	8000b00 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 80009bc:	4803      	ldr	r0, [pc, #12]	; (80009cc <MX_TIM3_Init+0xe8>)
 80009be:	f000 f977 	bl	8000cb0 <HAL_TIM_MspPostInit>

}
 80009c2:	bf00      	nop
 80009c4:	3738      	adds	r7, #56	; 0x38
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	200000b0 	.word	0x200000b0
 80009d0:	40000400 	.word	0x40000400

080009d4 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80009d8:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <MX_USART2_UART_Init+0x58>)
 80009da:	4a15      	ldr	r2, [pc, #84]	; (8000a30 <MX_USART2_UART_Init+0x5c>)
 80009dc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80009de:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <MX_USART2_UART_Init+0x58>)
 80009e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009e4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009e6:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <MX_USART2_UART_Init+0x58>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80009ec:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <MX_USART2_UART_Init+0x58>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80009f2:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <MX_USART2_UART_Init+0x58>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80009f8:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <MX_USART2_UART_Init+0x58>)
 80009fa:	220c      	movs	r2, #12
 80009fc:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009fe:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <MX_USART2_UART_Init+0x58>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a04:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <MX_USART2_UART_Init+0x58>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a0a:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <MX_USART2_UART_Init+0x58>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a10:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <MX_USART2_UART_Init+0x58>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000a16:	4805      	ldr	r0, [pc, #20]	; (8000a2c <MX_USART2_UART_Init+0x58>)
 8000a18:	f004 f8c2 	bl	8004ba0 <HAL_UART_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 8000a22:	f000 f86d 	bl	8000b00 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	2000002c 	.word	0x2000002c
 8000a30:	40004400 	.word	0x40004400

08000a34 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08a      	sub	sp, #40	; 0x28
 8000a38:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000a3a:	f107 0314 	add.w	r3, r7, #20
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
 8000a44:	609a      	str	r2, [r3, #8]
 8000a46:	60da      	str	r2, [r3, #12]
 8000a48:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000a4a:	4b2b      	ldr	r3, [pc, #172]	; (8000af8 <MX_GPIO_Init+0xc4>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4e:	4a2a      	ldr	r2, [pc, #168]	; (8000af8 <MX_GPIO_Init+0xc4>)
 8000a50:	f043 0304 	orr.w	r3, r3, #4
 8000a54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a56:	4b28      	ldr	r3, [pc, #160]	; (8000af8 <MX_GPIO_Init+0xc4>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5a:	f003 0304 	and.w	r3, r3, #4
 8000a5e:	613b      	str	r3, [r7, #16]
 8000a60:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000a62:	4b25      	ldr	r3, [pc, #148]	; (8000af8 <MX_GPIO_Init+0xc4>)
 8000a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a66:	4a24      	ldr	r2, [pc, #144]	; (8000af8 <MX_GPIO_Init+0xc4>)
 8000a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a6e:	4b22      	ldr	r3, [pc, #136]	; (8000af8 <MX_GPIO_Init+0xc4>)
 8000a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7a:	4b1f      	ldr	r3, [pc, #124]	; (8000af8 <MX_GPIO_Init+0xc4>)
 8000a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7e:	4a1e      	ldr	r2, [pc, #120]	; (8000af8 <MX_GPIO_Init+0xc4>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a86:	4b1c      	ldr	r3, [pc, #112]	; (8000af8 <MX_GPIO_Init+0xc4>)
 8000a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000a92:	4b19      	ldr	r3, [pc, #100]	; (8000af8 <MX_GPIO_Init+0xc4>)
 8000a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a96:	4a18      	ldr	r2, [pc, #96]	; (8000af8 <MX_GPIO_Init+0xc4>)
 8000a98:	f043 0302 	orr.w	r3, r3, #2
 8000a9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a9e:	4b16      	ldr	r3, [pc, #88]	; (8000af8 <MX_GPIO_Init+0xc4>)
 8000aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa2:	f003 0302 	and.w	r3, r3, #2
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2120      	movs	r1, #32
 8000aae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab2:	f001 fce3 	bl	800247c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000ab6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aba:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000abc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ac0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ac6:	f107 0314 	add.w	r3, r7, #20
 8000aca:	4619      	mov	r1, r3
 8000acc:	480b      	ldr	r0, [pc, #44]	; (8000afc <MX_GPIO_Init+0xc8>)
 8000ace:	f001 fb2b 	bl	8002128 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000ad2:	2320      	movs	r3, #32
 8000ad4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ae2:	f107 0314 	add.w	r3, r7, #20
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aec:	f001 fb1c 	bl	8002128 <HAL_GPIO_Init>

}
 8000af0:	bf00      	nop
 8000af2:	3728      	adds	r7, #40	; 0x28
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40021000 	.word	0x40021000
 8000afc:	48000800 	.word	0x48000800

08000b00 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b04:	b672      	cpsid	i
}
 8000b06:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000b08:	e7fe      	b.n	8000b08 <Error_Handler+0x8>

08000b0a <setGreenLed>:
#include  <stdio.h>
#include  <errno.h>
#include  <sys/unistd.h> // STDOUT_FILENO, STDERR_FILENO

// On board green LED On
void setGreenLed() {
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8000b0e:	2201      	movs	r2, #1
 8000b10:	2120      	movs	r1, #32
 8000b12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b16:	f001 fcb1 	bl	800247c <HAL_GPIO_WritePin>
}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <blinkGreenLed>:

// On board green LED blink
void blinkGreenLed(int nb, int delay) {
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b084      	sub	sp, #16
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]
 8000b26:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < nb; i++) {
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	e00b      	b.n	8000b46 <blinkGreenLed+0x28>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000b2e:	2120      	movs	r1, #32
 8000b30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b34:	f001 fcba 	bl	80024ac <HAL_GPIO_TogglePin>
		HAL_Delay(delay);
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f000 fa42 	bl	8000fc4 <HAL_Delay>
	for (int i = 0; i < nb; i++) {
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	3301      	adds	r3, #1
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	68fa      	ldr	r2, [r7, #12]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	429a      	cmp	r2, r3
 8000b4c:	dbef      	blt.n	8000b2e <blinkGreenLed+0x10>
	}
}
 8000b4e:	bf00      	nop
 8000b50:	bf00      	nop
 8000b52:	3710      	adds	r7, #16
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5e:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <HAL_MspInit+0x44>)
 8000b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b62:	4a0e      	ldr	r2, [pc, #56]	; (8000b9c <HAL_MspInit+0x44>)
 8000b64:	f043 0301 	orr.w	r3, r3, #1
 8000b68:	6613      	str	r3, [r2, #96]	; 0x60
 8000b6a:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <HAL_MspInit+0x44>)
 8000b6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b76:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <HAL_MspInit+0x44>)
 8000b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7a:	4a08      	ldr	r2, [pc, #32]	; (8000b9c <HAL_MspInit+0x44>)
 8000b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b80:	6593      	str	r3, [r2, #88]	; 0x58
 8000b82:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <HAL_MspInit+0x44>)
 8000b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8a:	603b      	str	r3, [r7, #0]
 8000b8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	40021000 	.word	0x40021000

08000ba0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b0ac      	sub	sp, #176	; 0xb0
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	2288      	movs	r2, #136	; 0x88
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f004 fdff 	bl	80057c4 <memset>
  if(hadc->Instance==ADC1)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a27      	ldr	r2, [pc, #156]	; (8000c68 <HAL_ADC_MspInit+0xc8>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d147      	bne.n	8000c60 <HAL_ADC_MspInit+0xc0>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000bd0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000bd4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000bd6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000bda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000bde:	2302      	movs	r3, #2
 8000be0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000be2:	2301      	movs	r3, #1
 8000be4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000be6:	2308      	movs	r3, #8
 8000be8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000bea:	2307      	movs	r3, #7
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000bf6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000bfa:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	4618      	mov	r0, r3
 8000c02:	f002 fabd 	bl	8003180 <HAL_RCCEx_PeriphCLKConfig>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000c0c:	f7ff ff78 	bl	8000b00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000c10:	4b16      	ldr	r3, [pc, #88]	; (8000c6c <HAL_ADC_MspInit+0xcc>)
 8000c12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c14:	4a15      	ldr	r2, [pc, #84]	; (8000c6c <HAL_ADC_MspInit+0xcc>)
 8000c16:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c1c:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <HAL_ADC_MspInit+0xcc>)
 8000c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c24:	613b      	str	r3, [r7, #16]
 8000c26:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c28:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <HAL_ADC_MspInit+0xcc>)
 8000c2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2c:	4a0f      	ldr	r2, [pc, #60]	; (8000c6c <HAL_ADC_MspInit+0xcc>)
 8000c2e:	f043 0301 	orr.w	r3, r3, #1
 8000c32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c34:	4b0d      	ldr	r3, [pc, #52]	; (8000c6c <HAL_ADC_MspInit+0xcc>)
 8000c36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c38:	f003 0301 	and.w	r3, r3, #1
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c40:	2301      	movs	r3, #1
 8000c42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c46:	230b      	movs	r3, #11
 8000c48:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c52:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c56:	4619      	mov	r1, r3
 8000c58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c5c:	f001 fa64 	bl	8002128 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c60:	bf00      	nop
 8000c62:	37b0      	adds	r7, #176	; 0xb0
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	50040000 	.word	0x50040000
 8000c6c:	40021000 	.word	0x40021000

08000c70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a0a      	ldr	r2, [pc, #40]	; (8000ca8 <HAL_TIM_Base_MspInit+0x38>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d10b      	bne.n	8000c9a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c82:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <HAL_TIM_Base_MspInit+0x3c>)
 8000c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c86:	4a09      	ldr	r2, [pc, #36]	; (8000cac <HAL_TIM_Base_MspInit+0x3c>)
 8000c88:	f043 0302 	orr.w	r3, r3, #2
 8000c8c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c8e:	4b07      	ldr	r3, [pc, #28]	; (8000cac <HAL_TIM_Base_MspInit+0x3c>)
 8000c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c92:	f003 0302 	and.w	r3, r3, #2
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000c9a:	bf00      	nop
 8000c9c:	3714      	adds	r7, #20
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	40000400 	.word	0x40000400
 8000cac:	40021000 	.word	0x40021000

08000cb0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b088      	sub	sp, #32
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb8:	f107 030c 	add.w	r3, r7, #12
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a11      	ldr	r2, [pc, #68]	; (8000d14 <HAL_TIM_MspPostInit+0x64>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d11c      	bne.n	8000d0c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd2:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <HAL_TIM_MspPostInit+0x68>)
 8000cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd6:	4a10      	ldr	r2, [pc, #64]	; (8000d18 <HAL_TIM_MspPostInit+0x68>)
 8000cd8:	f043 0301 	orr.w	r3, r3, #1
 8000cdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cde:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <HAL_TIM_MspPostInit+0x68>)
 8000ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce2:	f003 0301 	and.w	r3, r3, #1
 8000ce6:	60bb      	str	r3, [r7, #8]
 8000ce8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000cea:	2380      	movs	r3, #128	; 0x80
 8000cec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfe:	f107 030c 	add.w	r3, r7, #12
 8000d02:	4619      	mov	r1, r3
 8000d04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d08:	f001 fa0e 	bl	8002128 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000d0c:	bf00      	nop
 8000d0e:	3720      	adds	r7, #32
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40000400 	.word	0x40000400
 8000d18:	40021000 	.word	0x40021000

08000d1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b0ac      	sub	sp, #176	; 0xb0
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d34:	f107 0314 	add.w	r3, r7, #20
 8000d38:	2288      	movs	r2, #136	; 0x88
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f004 fd41 	bl	80057c4 <memset>
  if(huart->Instance==USART2)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a21      	ldr	r2, [pc, #132]	; (8000dcc <HAL_UART_MspInit+0xb0>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d13b      	bne.n	8000dc4 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d50:	2300      	movs	r3, #0
 8000d52:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f002 fa11 	bl	8003180 <HAL_RCCEx_PeriphCLKConfig>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d64:	f7ff fecc 	bl	8000b00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d68:	4b19      	ldr	r3, [pc, #100]	; (8000dd0 <HAL_UART_MspInit+0xb4>)
 8000d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d6c:	4a18      	ldr	r2, [pc, #96]	; (8000dd0 <HAL_UART_MspInit+0xb4>)
 8000d6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d72:	6593      	str	r3, [r2, #88]	; 0x58
 8000d74:	4b16      	ldr	r3, [pc, #88]	; (8000dd0 <HAL_UART_MspInit+0xb4>)
 8000d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d7c:	613b      	str	r3, [r7, #16]
 8000d7e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d80:	4b13      	ldr	r3, [pc, #76]	; (8000dd0 <HAL_UART_MspInit+0xb4>)
 8000d82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d84:	4a12      	ldr	r2, [pc, #72]	; (8000dd0 <HAL_UART_MspInit+0xb4>)
 8000d86:	f043 0301 	orr.w	r3, r3, #1
 8000d8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d8c:	4b10      	ldr	r3, [pc, #64]	; (8000dd0 <HAL_UART_MspInit+0xb4>)
 8000d8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d90:	f003 0301 	and.w	r3, r3, #1
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d98:	230c      	movs	r3, #12
 8000d9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000daa:	2303      	movs	r3, #3
 8000dac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000db0:	2307      	movs	r3, #7
 8000db2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000dba:	4619      	mov	r1, r3
 8000dbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dc0:	f001 f9b2 	bl	8002128 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dc4:	bf00      	nop
 8000dc6:	37b0      	adds	r7, #176	; 0xb0
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40004400 	.word	0x40004400
 8000dd0:	40021000 	.word	0x40021000

08000dd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dd8:	e7fe      	b.n	8000dd8 <NMI_Handler+0x4>

08000dda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dde:	e7fe      	b.n	8000dde <HardFault_Handler+0x4>

08000de0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de4:	e7fe      	b.n	8000de4 <MemManage_Handler+0x4>

08000de6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dea:	e7fe      	b.n	8000dea <BusFault_Handler+0x4>

08000dec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df0:	e7fe      	b.n	8000df0 <UsageFault_Handler+0x4>

08000df2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr

08000e0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e20:	f000 f8b0 	bl	8000f84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e24:	bf00      	nop
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e2c:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <SystemInit+0x20>)
 8000e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e32:	4a05      	ldr	r2, [pc, #20]	; (8000e48 <SystemInit+0x20>)
 8000e34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <y_print>:
void load_pwm(TIM_HandleTypeDef htimX, int val) {

	htimX.Instance->CCR2 = val;
}

void y_print(UART_HandleTypeDef *huart, char *mess,int len) {
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]

	if (HAL_UART_Transmit(huart, (uint8_t*) mess,len, 100) != HAL_OK)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	b29a      	uxth	r2, r3
 8000e5c:	2364      	movs	r3, #100	; 0x64
 8000e5e:	68b9      	ldr	r1, [r7, #8]
 8000e60:	68f8      	ldr	r0, [r7, #12]
 8000e62:	f003 feeb 	bl	8004c3c <HAL_UART_Transmit>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <y_print+0x24>
		Error_Handler();
 8000e6c:	f7ff fe48 	bl	8000b00 <Error_Handler>
}
 8000e70:	bf00      	nop
 8000e72:	3710      	adds	r7, #16
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eb0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e7c:	f7ff ffd4 	bl	8000e28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e80:	480c      	ldr	r0, [pc, #48]	; (8000eb4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e82:	490d      	ldr	r1, [pc, #52]	; (8000eb8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e84:	4a0d      	ldr	r2, [pc, #52]	; (8000ebc <LoopForever+0xe>)
  movs r3, #0
 8000e86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e88:	e002      	b.n	8000e90 <LoopCopyDataInit>

08000e8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e8e:	3304      	adds	r3, #4

08000e90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e94:	d3f9      	bcc.n	8000e8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e96:	4a0a      	ldr	r2, [pc, #40]	; (8000ec0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e98:	4c0a      	ldr	r4, [pc, #40]	; (8000ec4 <LoopForever+0x16>)
  movs r3, #0
 8000e9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e9c:	e001      	b.n	8000ea2 <LoopFillZerobss>

08000e9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ea0:	3204      	adds	r2, #4

08000ea2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ea2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ea4:	d3fb      	bcc.n	8000e9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ea6:	f004 fc69 	bl	800577c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000eaa:	f7ff fb09 	bl	80004c0 <main>

08000eae <LoopForever>:

LoopForever:
    b LoopForever
 8000eae:	e7fe      	b.n	8000eae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000eb0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000eb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ebc:	080058dc 	.word	0x080058dc
  ldr r2, =_sbss
 8000ec0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ec4:	20000164 	.word	0x20000164

08000ec8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ec8:	e7fe      	b.n	8000ec8 <ADC1_2_IRQHandler>
	...

08000ecc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ed6:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <HAL_Init+0x3c>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a0b      	ldr	r2, [pc, #44]	; (8000f08 <HAL_Init+0x3c>)
 8000edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee2:	2003      	movs	r0, #3
 8000ee4:	f001 f8ec 	bl	80020c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ee8:	2000      	movs	r0, #0
 8000eea:	f000 f80f 	bl	8000f0c <HAL_InitTick>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d002      	beq.n	8000efa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	71fb      	strb	r3, [r7, #7]
 8000ef8:	e001      	b.n	8000efe <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000efa:	f7ff fe2d 	bl	8000b58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000efe:	79fb      	ldrb	r3, [r7, #7]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40022000 	.word	0x40022000

08000f0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f14:	2300      	movs	r3, #0
 8000f16:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f18:	4b17      	ldr	r3, [pc, #92]	; (8000f78 <HAL_InitTick+0x6c>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d023      	beq.n	8000f68 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f20:	4b16      	ldr	r3, [pc, #88]	; (8000f7c <HAL_InitTick+0x70>)
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <HAL_InitTick+0x6c>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	4619      	mov	r1, r3
 8000f2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f36:	4618      	mov	r0, r3
 8000f38:	f001 f8e9 	bl	800210e <HAL_SYSTICK_Config>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d10f      	bne.n	8000f62 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2b0f      	cmp	r3, #15
 8000f46:	d809      	bhi.n	8000f5c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	6879      	ldr	r1, [r7, #4]
 8000f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f50:	f001 f8c1 	bl	80020d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f54:	4a0a      	ldr	r2, [pc, #40]	; (8000f80 <HAL_InitTick+0x74>)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6013      	str	r3, [r2, #0]
 8000f5a:	e007      	b.n	8000f6c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	73fb      	strb	r3, [r7, #15]
 8000f60:	e004      	b.n	8000f6c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	73fb      	strb	r3, [r7, #15]
 8000f66:	e001      	b.n	8000f6c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000008 	.word	0x20000008
 8000f7c:	20000000 	.word	0x20000000
 8000f80:	20000004 	.word	0x20000004

08000f84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f88:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <HAL_IncTick+0x20>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <HAL_IncTick+0x24>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4413      	add	r3, r2
 8000f94:	4a04      	ldr	r2, [pc, #16]	; (8000fa8 <HAL_IncTick+0x24>)
 8000f96:	6013      	str	r3, [r2, #0]
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	20000008 	.word	0x20000008
 8000fa8:	20000160 	.word	0x20000160

08000fac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb0:	4b03      	ldr	r3, [pc, #12]	; (8000fc0 <HAL_GetTick+0x14>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	20000160 	.word	0x20000160

08000fc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fcc:	f7ff ffee 	bl	8000fac <HAL_GetTick>
 8000fd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fdc:	d005      	beq.n	8000fea <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000fde:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <HAL_Delay+0x44>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fea:	bf00      	nop
 8000fec:	f7ff ffde 	bl	8000fac <HAL_GetTick>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	68fa      	ldr	r2, [r7, #12]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d8f7      	bhi.n	8000fec <HAL_Delay+0x28>
  {
  }
}
 8000ffc:	bf00      	nop
 8000ffe:	bf00      	nop
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000008 	.word	0x20000008

0800100c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	431a      	orrs	r2, r3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	609a      	str	r2, [r3, #8]
}
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001032:	b480      	push	{r7}
 8001034:	b083      	sub	sp, #12
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
 800103a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	431a      	orrs	r2, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	609a      	str	r2, [r3, #8]
}
 800104c:	bf00      	nop
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001068:	4618      	mov	r0, r3
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001074:	b480      	push	{r7}
 8001076:	b087      	sub	sp, #28
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
 8001080:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	3360      	adds	r3, #96	; 0x60
 8001086:	461a      	mov	r2, r3
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	4413      	add	r3, r2
 800108e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <LL_ADC_SetOffset+0x44>)
 8001096:	4013      	ands	r3, r2
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800109e:	683a      	ldr	r2, [r7, #0]
 80010a0:	430a      	orrs	r2, r1
 80010a2:	4313      	orrs	r3, r2
 80010a4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80010ac:	bf00      	nop
 80010ae:	371c      	adds	r7, #28
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	03fff000 	.word	0x03fff000

080010bc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	3360      	adds	r3, #96	; 0x60
 80010ca:	461a      	mov	r2, r3
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	4413      	add	r3, r2
 80010d2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3714      	adds	r7, #20
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b087      	sub	sp, #28
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	3360      	adds	r3, #96	; 0x60
 80010f8:	461a      	mov	r2, r3
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	4413      	add	r3, r2
 8001100:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	431a      	orrs	r2, r3
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001112:	bf00      	nop
 8001114:	371c      	adds	r7, #28
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800111e:	b480      	push	{r7}
 8001120:	b087      	sub	sp, #28
 8001122:	af00      	add	r7, sp, #0
 8001124:	60f8      	str	r0, [r7, #12]
 8001126:	60b9      	str	r1, [r7, #8]
 8001128:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	3330      	adds	r3, #48	; 0x30
 800112e:	461a      	mov	r2, r3
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	0a1b      	lsrs	r3, r3, #8
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	f003 030c 	and.w	r3, r3, #12
 800113a:	4413      	add	r3, r2
 800113c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	f003 031f 	and.w	r3, r3, #31
 8001148:	211f      	movs	r1, #31
 800114a:	fa01 f303 	lsl.w	r3, r1, r3
 800114e:	43db      	mvns	r3, r3
 8001150:	401a      	ands	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	0e9b      	lsrs	r3, r3, #26
 8001156:	f003 011f 	and.w	r1, r3, #31
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	f003 031f 	and.w	r3, r3, #31
 8001160:	fa01 f303 	lsl.w	r3, r1, r3
 8001164:	431a      	orrs	r2, r3
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800116a:	bf00      	nop
 800116c:	371c      	adds	r7, #28
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr

08001176 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001176:	b480      	push	{r7}
 8001178:	b087      	sub	sp, #28
 800117a:	af00      	add	r7, sp, #0
 800117c:	60f8      	str	r0, [r7, #12]
 800117e:	60b9      	str	r1, [r7, #8]
 8001180:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	3314      	adds	r3, #20
 8001186:	461a      	mov	r2, r3
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	0e5b      	lsrs	r3, r3, #25
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	f003 0304 	and.w	r3, r3, #4
 8001192:	4413      	add	r3, r2
 8001194:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	0d1b      	lsrs	r3, r3, #20
 800119e:	f003 031f 	and.w	r3, r3, #31
 80011a2:	2107      	movs	r1, #7
 80011a4:	fa01 f303 	lsl.w	r3, r1, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	401a      	ands	r2, r3
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	0d1b      	lsrs	r3, r3, #20
 80011b0:	f003 031f 	and.w	r3, r3, #31
 80011b4:	6879      	ldr	r1, [r7, #4]
 80011b6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ba:	431a      	orrs	r2, r3
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80011c0:	bf00      	nop
 80011c2:	371c      	adds	r7, #28
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011e4:	43db      	mvns	r3, r3
 80011e6:	401a      	ands	r2, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f003 0318 	and.w	r3, r3, #24
 80011ee:	4908      	ldr	r1, [pc, #32]	; (8001210 <LL_ADC_SetChannelSingleDiff+0x44>)
 80011f0:	40d9      	lsrs	r1, r3
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	400b      	ands	r3, r1
 80011f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011fa:	431a      	orrs	r2, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001202:	bf00      	nop
 8001204:	3714      	adds	r7, #20
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	0007ffff 	.word	0x0007ffff

08001214 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001224:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	6093      	str	r3, [r2, #8]
}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001248:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800124c:	d101      	bne.n	8001252 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800124e:	2301      	movs	r3, #1
 8001250:	e000      	b.n	8001254 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001252:	2300      	movs	r3, #0
}
 8001254:	4618      	mov	r0, r3
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001270:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001274:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001298:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800129c:	d101      	bne.n	80012a2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800129e:	2301      	movs	r3, #1
 80012a0:	e000      	b.n	80012a4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80012a2:	2300      	movs	r3, #0
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	f003 0301 	and.w	r3, r3, #1
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d101      	bne.n	80012c8 <LL_ADC_IsEnabled+0x18>
 80012c4:	2301      	movs	r3, #1
 80012c6:	e000      	b.n	80012ca <LL_ADC_IsEnabled+0x1a>
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr

080012d6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80012d6:	b480      	push	{r7}
 80012d8:	b083      	sub	sp, #12
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	f003 0304 	and.w	r3, r3, #4
 80012e6:	2b04      	cmp	r3, #4
 80012e8:	d101      	bne.n	80012ee <LL_ADC_REG_IsConversionOngoing+0x18>
 80012ea:	2301      	movs	r3, #1
 80012ec:	e000      	b.n	80012f0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80012ee:	2300      	movs	r3, #0
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	f003 0308 	and.w	r3, r3, #8
 800130c:	2b08      	cmp	r3, #8
 800130e:	d101      	bne.n	8001314 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001310:	2301      	movs	r3, #1
 8001312:	e000      	b.n	8001316 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
	...

08001324 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001324:	b590      	push	{r4, r7, lr}
 8001326:	b089      	sub	sp, #36	; 0x24
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800132c:	2300      	movs	r3, #0
 800132e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001330:	2300      	movs	r3, #0
 8001332:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d101      	bne.n	800133e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e136      	b.n	80015ac <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	691b      	ldr	r3, [r3, #16]
 8001342:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001348:	2b00      	cmp	r3, #0
 800134a:	d109      	bne.n	8001360 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f7ff fc27 	bl	8000ba0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2200      	movs	r2, #0
 8001356:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2200      	movs	r2, #0
 800135c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff ff67 	bl	8001238 <LL_ADC_IsDeepPowerDownEnabled>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d004      	beq.n	800137a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff ff4d 	bl	8001214 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff ff82 	bl	8001288 <LL_ADC_IsInternalRegulatorEnabled>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d115      	bne.n	80013b6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff ff66 	bl	8001260 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001394:	4b87      	ldr	r3, [pc, #540]	; (80015b4 <HAL_ADC_Init+0x290>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	099b      	lsrs	r3, r3, #6
 800139a:	4a87      	ldr	r2, [pc, #540]	; (80015b8 <HAL_ADC_Init+0x294>)
 800139c:	fba2 2303 	umull	r2, r3, r2, r3
 80013a0:	099b      	lsrs	r3, r3, #6
 80013a2:	3301      	adds	r3, #1
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80013a8:	e002      	b.n	80013b0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	3b01      	subs	r3, #1
 80013ae:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d1f9      	bne.n	80013aa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff ff64 	bl	8001288 <LL_ADC_IsInternalRegulatorEnabled>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d10d      	bne.n	80013e2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ca:	f043 0210 	orr.w	r2, r3, #16
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d6:	f043 0201 	orr.w	r2, r3, #1
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff ff75 	bl	80012d6 <LL_ADC_REG_IsConversionOngoing>
 80013ec:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f2:	f003 0310 	and.w	r3, r3, #16
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	f040 80cf 	bne.w	800159a <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	f040 80cb 	bne.w	800159a <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001408:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800140c:	f043 0202 	orr.w	r2, r3, #2
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff ff49 	bl	80012b0 <LL_ADC_IsEnabled>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d115      	bne.n	8001450 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001424:	4865      	ldr	r0, [pc, #404]	; (80015bc <HAL_ADC_Init+0x298>)
 8001426:	f7ff ff43 	bl	80012b0 <LL_ADC_IsEnabled>
 800142a:	4604      	mov	r4, r0
 800142c:	4864      	ldr	r0, [pc, #400]	; (80015c0 <HAL_ADC_Init+0x29c>)
 800142e:	f7ff ff3f 	bl	80012b0 <LL_ADC_IsEnabled>
 8001432:	4603      	mov	r3, r0
 8001434:	431c      	orrs	r4, r3
 8001436:	4863      	ldr	r0, [pc, #396]	; (80015c4 <HAL_ADC_Init+0x2a0>)
 8001438:	f7ff ff3a 	bl	80012b0 <LL_ADC_IsEnabled>
 800143c:	4603      	mov	r3, r0
 800143e:	4323      	orrs	r3, r4
 8001440:	2b00      	cmp	r3, #0
 8001442:	d105      	bne.n	8001450 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	4619      	mov	r1, r3
 800144a:	485f      	ldr	r0, [pc, #380]	; (80015c8 <HAL_ADC_Init+0x2a4>)
 800144c:	f7ff fdde 	bl	800100c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	7e5b      	ldrb	r3, [r3, #25]
 8001454:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800145a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001460:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001466:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800146e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001470:	4313      	orrs	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f893 3020 	ldrb.w	r3, [r3, #32]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d106      	bne.n	800148c <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001482:	3b01      	subs	r3, #1
 8001484:	045b      	lsls	r3, r3, #17
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4313      	orrs	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001490:	2b00      	cmp	r3, #0
 8001492:	d009      	beq.n	80014a8 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001498:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	68da      	ldr	r2, [r3, #12]
 80014ae:	4b47      	ldr	r3, [pc, #284]	; (80015cc <HAL_ADC_Init+0x2a8>)
 80014b0:	4013      	ands	r3, r2
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	6812      	ldr	r2, [r2, #0]
 80014b6:	69b9      	ldr	r1, [r7, #24]
 80014b8:	430b      	orrs	r3, r1
 80014ba:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff ff08 	bl	80012d6 <LL_ADC_REG_IsConversionOngoing>
 80014c6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ff15 	bl	80012fc <LL_ADC_INJ_IsConversionOngoing>
 80014d2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d13d      	bne.n	8001556 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d13a      	bne.n	8001556 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80014e4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014ec:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80014ee:	4313      	orrs	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80014fc:	f023 0302 	bic.w	r3, r3, #2
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	6812      	ldr	r2, [r2, #0]
 8001504:	69b9      	ldr	r1, [r7, #24]
 8001506:	430b      	orrs	r3, r1
 8001508:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001510:	2b01      	cmp	r3, #1
 8001512:	d118      	bne.n	8001546 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	691b      	ldr	r3, [r3, #16]
 800151a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800151e:	f023 0304 	bic.w	r3, r3, #4
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800152a:	4311      	orrs	r1, r2
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001530:	4311      	orrs	r1, r2
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001536:	430a      	orrs	r2, r1
 8001538:	431a      	orrs	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f042 0201 	orr.w	r2, r2, #1
 8001542:	611a      	str	r2, [r3, #16]
 8001544:	e007      	b.n	8001556 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	691a      	ldr	r2, [r3, #16]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f022 0201 	bic.w	r2, r2, #1
 8001554:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	691b      	ldr	r3, [r3, #16]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d10c      	bne.n	8001578 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001564:	f023 010f 	bic.w	r1, r3, #15
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	69db      	ldr	r3, [r3, #28]
 800156c:	1e5a      	subs	r2, r3, #1
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	430a      	orrs	r2, r1
 8001574:	631a      	str	r2, [r3, #48]	; 0x30
 8001576:	e007      	b.n	8001588 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f022 020f 	bic.w	r2, r2, #15
 8001586:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800158c:	f023 0303 	bic.w	r3, r3, #3
 8001590:	f043 0201 	orr.w	r2, r3, #1
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	655a      	str	r2, [r3, #84]	; 0x54
 8001598:	e007      	b.n	80015aa <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800159e:	f043 0210 	orr.w	r2, r3, #16
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80015aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3724      	adds	r7, #36	; 0x24
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd90      	pop	{r4, r7, pc}
 80015b4:	20000000 	.word	0x20000000
 80015b8:	053e2d63 	.word	0x053e2d63
 80015bc:	50040000 	.word	0x50040000
 80015c0:	50040100 	.word	0x50040100
 80015c4:	50040200 	.word	0x50040200
 80015c8:	50040300 	.word	0x50040300
 80015cc:	fff0c007 	.word	0xfff0c007

080015d0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b0b6      	sub	sp, #216	; 0xd8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015da:	2300      	movs	r3, #0
 80015dc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d101      	bne.n	80015f2 <HAL_ADC_ConfigChannel+0x22>
 80015ee:	2302      	movs	r3, #2
 80015f0:	e3c7      	b.n	8001d82 <HAL_ADC_ConfigChannel+0x7b2>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2201      	movs	r2, #1
 80015f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff fe69 	bl	80012d6 <LL_ADC_REG_IsConversionOngoing>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	f040 83a8 	bne.w	8001d5c <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	2b05      	cmp	r3, #5
 8001612:	d824      	bhi.n	800165e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	3b02      	subs	r3, #2
 800161a:	2b03      	cmp	r3, #3
 800161c:	d81b      	bhi.n	8001656 <HAL_ADC_ConfigChannel+0x86>
 800161e:	a201      	add	r2, pc, #4	; (adr r2, 8001624 <HAL_ADC_ConfigChannel+0x54>)
 8001620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001624:	08001635 	.word	0x08001635
 8001628:	0800163d 	.word	0x0800163d
 800162c:	08001645 	.word	0x08001645
 8001630:	0800164d 	.word	0x0800164d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	220c      	movs	r2, #12
 8001638:	605a      	str	r2, [r3, #4]
          break;
 800163a:	e011      	b.n	8001660 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	2212      	movs	r2, #18
 8001640:	605a      	str	r2, [r3, #4]
          break;
 8001642:	e00d      	b.n	8001660 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	2218      	movs	r2, #24
 8001648:	605a      	str	r2, [r3, #4]
          break;
 800164a:	e009      	b.n	8001660 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001652:	605a      	str	r2, [r3, #4]
          break;
 8001654:	e004      	b.n	8001660 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	2206      	movs	r2, #6
 800165a:	605a      	str	r2, [r3, #4]
          break;
 800165c:	e000      	b.n	8001660 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800165e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6818      	ldr	r0, [r3, #0]
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	6859      	ldr	r1, [r3, #4]
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	461a      	mov	r2, r3
 800166e:	f7ff fd56 	bl	800111e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff fe2d 	bl	80012d6 <LL_ADC_REG_IsConversionOngoing>
 800167c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff fe39 	bl	80012fc <LL_ADC_INJ_IsConversionOngoing>
 800168a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800168e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001692:	2b00      	cmp	r3, #0
 8001694:	f040 81a6 	bne.w	80019e4 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001698:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800169c:	2b00      	cmp	r3, #0
 800169e:	f040 81a1 	bne.w	80019e4 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6818      	ldr	r0, [r3, #0]
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	6819      	ldr	r1, [r3, #0]
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	461a      	mov	r2, r3
 80016b0:	f7ff fd61 	bl	8001176 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	695a      	ldr	r2, [r3, #20]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	08db      	lsrs	r3, r3, #3
 80016c0:	f003 0303 	and.w	r3, r3, #3
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	691b      	ldr	r3, [r3, #16]
 80016d2:	2b04      	cmp	r3, #4
 80016d4:	d00a      	beq.n	80016ec <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6818      	ldr	r0, [r3, #0]
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	6919      	ldr	r1, [r3, #16]
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80016e6:	f7ff fcc5 	bl	8001074 <LL_ADC_SetOffset>
 80016ea:	e17b      	b.n	80019e4 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2100      	movs	r1, #0
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff fce2 	bl	80010bc <LL_ADC_GetOffsetChannel>
 80016f8:	4603      	mov	r3, r0
 80016fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d10a      	bne.n	8001718 <HAL_ADC_ConfigChannel+0x148>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2100      	movs	r1, #0
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff fcd7 	bl	80010bc <LL_ADC_GetOffsetChannel>
 800170e:	4603      	mov	r3, r0
 8001710:	0e9b      	lsrs	r3, r3, #26
 8001712:	f003 021f 	and.w	r2, r3, #31
 8001716:	e01e      	b.n	8001756 <HAL_ADC_ConfigChannel+0x186>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2100      	movs	r1, #0
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff fccc 	bl	80010bc <LL_ADC_GetOffsetChannel>
 8001724:	4603      	mov	r3, r0
 8001726:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800172a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800172e:	fa93 f3a3 	rbit	r3, r3
 8001732:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001736:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800173a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800173e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d101      	bne.n	800174a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001746:	2320      	movs	r3, #32
 8001748:	e004      	b.n	8001754 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800174a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800174e:	fab3 f383 	clz	r3, r3
 8001752:	b2db      	uxtb	r3, r3
 8001754:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800175e:	2b00      	cmp	r3, #0
 8001760:	d105      	bne.n	800176e <HAL_ADC_ConfigChannel+0x19e>
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	0e9b      	lsrs	r3, r3, #26
 8001768:	f003 031f 	and.w	r3, r3, #31
 800176c:	e018      	b.n	80017a0 <HAL_ADC_ConfigChannel+0x1d0>
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001776:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800177a:	fa93 f3a3 	rbit	r3, r3
 800177e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001782:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001786:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800178a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800178e:	2b00      	cmp	r3, #0
 8001790:	d101      	bne.n	8001796 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001792:	2320      	movs	r3, #32
 8001794:	e004      	b.n	80017a0 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001796:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800179a:	fab3 f383 	clz	r3, r3
 800179e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d106      	bne.n	80017b2 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2200      	movs	r2, #0
 80017aa:	2100      	movs	r1, #0
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff fc9b 	bl	80010e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2101      	movs	r1, #1
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff fc7f 	bl	80010bc <LL_ADC_GetOffsetChannel>
 80017be:	4603      	mov	r3, r0
 80017c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d10a      	bne.n	80017de <HAL_ADC_ConfigChannel+0x20e>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2101      	movs	r1, #1
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff fc74 	bl	80010bc <LL_ADC_GetOffsetChannel>
 80017d4:	4603      	mov	r3, r0
 80017d6:	0e9b      	lsrs	r3, r3, #26
 80017d8:	f003 021f 	and.w	r2, r3, #31
 80017dc:	e01e      	b.n	800181c <HAL_ADC_ConfigChannel+0x24c>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2101      	movs	r1, #1
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff fc69 	bl	80010bc <LL_ADC_GetOffsetChannel>
 80017ea:	4603      	mov	r3, r0
 80017ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80017f4:	fa93 f3a3 	rbit	r3, r3
 80017f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80017fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001800:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001804:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001808:	2b00      	cmp	r3, #0
 800180a:	d101      	bne.n	8001810 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 800180c:	2320      	movs	r3, #32
 800180e:	e004      	b.n	800181a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001810:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001814:	fab3 f383 	clz	r3, r3
 8001818:	b2db      	uxtb	r3, r3
 800181a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001824:	2b00      	cmp	r3, #0
 8001826:	d105      	bne.n	8001834 <HAL_ADC_ConfigChannel+0x264>
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	0e9b      	lsrs	r3, r3, #26
 800182e:	f003 031f 	and.w	r3, r3, #31
 8001832:	e018      	b.n	8001866 <HAL_ADC_ConfigChannel+0x296>
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800183c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001840:	fa93 f3a3 	rbit	r3, r3
 8001844:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001848:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800184c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001850:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001854:	2b00      	cmp	r3, #0
 8001856:	d101      	bne.n	800185c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001858:	2320      	movs	r3, #32
 800185a:	e004      	b.n	8001866 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 800185c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001860:	fab3 f383 	clz	r3, r3
 8001864:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001866:	429a      	cmp	r2, r3
 8001868:	d106      	bne.n	8001878 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2200      	movs	r2, #0
 8001870:	2101      	movs	r1, #1
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff fc38 	bl	80010e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2102      	movs	r1, #2
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff fc1c 	bl	80010bc <LL_ADC_GetOffsetChannel>
 8001884:	4603      	mov	r3, r0
 8001886:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800188a:	2b00      	cmp	r3, #0
 800188c:	d10a      	bne.n	80018a4 <HAL_ADC_ConfigChannel+0x2d4>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2102      	movs	r1, #2
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff fc11 	bl	80010bc <LL_ADC_GetOffsetChannel>
 800189a:	4603      	mov	r3, r0
 800189c:	0e9b      	lsrs	r3, r3, #26
 800189e:	f003 021f 	and.w	r2, r3, #31
 80018a2:	e01e      	b.n	80018e2 <HAL_ADC_ConfigChannel+0x312>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2102      	movs	r1, #2
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff fc06 	bl	80010bc <LL_ADC_GetOffsetChannel>
 80018b0:	4603      	mov	r3, r0
 80018b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80018ba:	fa93 f3a3 	rbit	r3, r3
 80018be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80018c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80018c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80018ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d101      	bne.n	80018d6 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80018d2:	2320      	movs	r3, #32
 80018d4:	e004      	b.n	80018e0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80018d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80018da:	fab3 f383 	clz	r3, r3
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d105      	bne.n	80018fa <HAL_ADC_ConfigChannel+0x32a>
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	0e9b      	lsrs	r3, r3, #26
 80018f4:	f003 031f 	and.w	r3, r3, #31
 80018f8:	e016      	b.n	8001928 <HAL_ADC_ConfigChannel+0x358>
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001902:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001906:	fa93 f3a3 	rbit	r3, r3
 800190a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800190c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800190e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001912:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001916:	2b00      	cmp	r3, #0
 8001918:	d101      	bne.n	800191e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800191a:	2320      	movs	r3, #32
 800191c:	e004      	b.n	8001928 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800191e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001922:	fab3 f383 	clz	r3, r3
 8001926:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001928:	429a      	cmp	r2, r3
 800192a:	d106      	bne.n	800193a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2200      	movs	r2, #0
 8001932:	2102      	movs	r1, #2
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff fbd7 	bl	80010e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2103      	movs	r1, #3
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff fbbb 	bl	80010bc <LL_ADC_GetOffsetChannel>
 8001946:	4603      	mov	r3, r0
 8001948:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800194c:	2b00      	cmp	r3, #0
 800194e:	d10a      	bne.n	8001966 <HAL_ADC_ConfigChannel+0x396>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2103      	movs	r1, #3
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff fbb0 	bl	80010bc <LL_ADC_GetOffsetChannel>
 800195c:	4603      	mov	r3, r0
 800195e:	0e9b      	lsrs	r3, r3, #26
 8001960:	f003 021f 	and.w	r2, r3, #31
 8001964:	e017      	b.n	8001996 <HAL_ADC_ConfigChannel+0x3c6>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2103      	movs	r1, #3
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff fba5 	bl	80010bc <LL_ADC_GetOffsetChannel>
 8001972:	4603      	mov	r3, r0
 8001974:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001976:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001978:	fa93 f3a3 	rbit	r3, r3
 800197c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800197e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001980:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001982:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001984:	2b00      	cmp	r3, #0
 8001986:	d101      	bne.n	800198c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001988:	2320      	movs	r3, #32
 800198a:	e003      	b.n	8001994 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 800198c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800198e:	fab3 f383 	clz	r3, r3
 8001992:	b2db      	uxtb	r3, r3
 8001994:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d105      	bne.n	80019ae <HAL_ADC_ConfigChannel+0x3de>
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	0e9b      	lsrs	r3, r3, #26
 80019a8:	f003 031f 	and.w	r3, r3, #31
 80019ac:	e011      	b.n	80019d2 <HAL_ADC_ConfigChannel+0x402>
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80019b6:	fa93 f3a3 	rbit	r3, r3
 80019ba:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80019bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80019be:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80019c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d101      	bne.n	80019ca <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80019c6:	2320      	movs	r3, #32
 80019c8:	e003      	b.n	80019d2 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80019ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80019cc:	fab3 f383 	clz	r3, r3
 80019d0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d106      	bne.n	80019e4 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2200      	movs	r2, #0
 80019dc:	2103      	movs	r1, #3
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff fb82 	bl	80010e8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff fc61 	bl	80012b0 <LL_ADC_IsEnabled>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	f040 813f 	bne.w	8001c74 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6818      	ldr	r0, [r3, #0]
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	6819      	ldr	r1, [r3, #0]
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	461a      	mov	r2, r3
 8001a04:	f7ff fbe2 	bl	80011cc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	4a8e      	ldr	r2, [pc, #568]	; (8001c48 <HAL_ADC_ConfigChannel+0x678>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	f040 8130 	bne.w	8001c74 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d10b      	bne.n	8001a3c <HAL_ADC_ConfigChannel+0x46c>
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	0e9b      	lsrs	r3, r3, #26
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	f003 031f 	and.w	r3, r3, #31
 8001a30:	2b09      	cmp	r3, #9
 8001a32:	bf94      	ite	ls
 8001a34:	2301      	movls	r3, #1
 8001a36:	2300      	movhi	r3, #0
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	e019      	b.n	8001a70 <HAL_ADC_ConfigChannel+0x4a0>
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a44:	fa93 f3a3 	rbit	r3, r3
 8001a48:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001a4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a4c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001a4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d101      	bne.n	8001a58 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001a54:	2320      	movs	r3, #32
 8001a56:	e003      	b.n	8001a60 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001a58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a5a:	fab3 f383 	clz	r3, r3
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	3301      	adds	r3, #1
 8001a62:	f003 031f 	and.w	r3, r3, #31
 8001a66:	2b09      	cmp	r3, #9
 8001a68:	bf94      	ite	ls
 8001a6a:	2301      	movls	r3, #1
 8001a6c:	2300      	movhi	r3, #0
 8001a6e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d079      	beq.n	8001b68 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d107      	bne.n	8001a90 <HAL_ADC_ConfigChannel+0x4c0>
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	0e9b      	lsrs	r3, r3, #26
 8001a86:	3301      	adds	r3, #1
 8001a88:	069b      	lsls	r3, r3, #26
 8001a8a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a8e:	e015      	b.n	8001abc <HAL_ADC_ConfigChannel+0x4ec>
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a98:	fa93 f3a3 	rbit	r3, r3
 8001a9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001a9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001aa0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001aa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d101      	bne.n	8001aac <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001aa8:	2320      	movs	r3, #32
 8001aaa:	e003      	b.n	8001ab4 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001aac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aae:	fab3 f383 	clz	r3, r3
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	069b      	lsls	r3, r3, #26
 8001ab8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d109      	bne.n	8001adc <HAL_ADC_ConfigChannel+0x50c>
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	0e9b      	lsrs	r3, r3, #26
 8001ace:	3301      	adds	r3, #1
 8001ad0:	f003 031f 	and.w	r3, r3, #31
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8001ada:	e017      	b.n	8001b0c <HAL_ADC_ConfigChannel+0x53c>
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ae4:	fa93 f3a3 	rbit	r3, r3
 8001ae8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001aea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001aec:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001aee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d101      	bne.n	8001af8 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001af4:	2320      	movs	r3, #32
 8001af6:	e003      	b.n	8001b00 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001af8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001afa:	fab3 f383 	clz	r3, r3
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	3301      	adds	r3, #1
 8001b02:	f003 031f 	and.w	r3, r3, #31
 8001b06:	2101      	movs	r1, #1
 8001b08:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0c:	ea42 0103 	orr.w	r1, r2, r3
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d10a      	bne.n	8001b32 <HAL_ADC_ConfigChannel+0x562>
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	0e9b      	lsrs	r3, r3, #26
 8001b22:	3301      	adds	r3, #1
 8001b24:	f003 021f 	and.w	r2, r3, #31
 8001b28:	4613      	mov	r3, r2
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	4413      	add	r3, r2
 8001b2e:	051b      	lsls	r3, r3, #20
 8001b30:	e018      	b.n	8001b64 <HAL_ADC_ConfigChannel+0x594>
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b3a:	fa93 f3a3 	rbit	r3, r3
 8001b3e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b42:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001b44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d101      	bne.n	8001b4e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001b4a:	2320      	movs	r3, #32
 8001b4c:	e003      	b.n	8001b56 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001b4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b50:	fab3 f383 	clz	r3, r3
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	3301      	adds	r3, #1
 8001b58:	f003 021f 	and.w	r2, r3, #31
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	4413      	add	r3, r2
 8001b62:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b64:	430b      	orrs	r3, r1
 8001b66:	e080      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d107      	bne.n	8001b84 <HAL_ADC_ConfigChannel+0x5b4>
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	0e9b      	lsrs	r3, r3, #26
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	069b      	lsls	r3, r3, #26
 8001b7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b82:	e015      	b.n	8001bb0 <HAL_ADC_ConfigChannel+0x5e0>
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b8c:	fa93 f3a3 	rbit	r3, r3
 8001b90:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b94:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d101      	bne.n	8001ba0 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001b9c:	2320      	movs	r3, #32
 8001b9e:	e003      	b.n	8001ba8 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ba2:	fab3 f383 	clz	r3, r3
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	3301      	adds	r3, #1
 8001baa:	069b      	lsls	r3, r3, #26
 8001bac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d109      	bne.n	8001bd0 <HAL_ADC_ConfigChannel+0x600>
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	0e9b      	lsrs	r3, r3, #26
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	f003 031f 	and.w	r3, r3, #31
 8001bc8:	2101      	movs	r1, #1
 8001bca:	fa01 f303 	lsl.w	r3, r1, r3
 8001bce:	e017      	b.n	8001c00 <HAL_ADC_ConfigChannel+0x630>
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd6:	6a3b      	ldr	r3, [r7, #32]
 8001bd8:	fa93 f3a3 	rbit	r3, r3
 8001bdc:	61fb      	str	r3, [r7, #28]
  return result;
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d101      	bne.n	8001bec <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001be8:	2320      	movs	r3, #32
 8001bea:	e003      	b.n	8001bf4 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bee:	fab3 f383 	clz	r3, r3
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	f003 031f 	and.w	r3, r3, #31
 8001bfa:	2101      	movs	r1, #1
 8001bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001c00:	ea42 0103 	orr.w	r1, r2, r3
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d10d      	bne.n	8001c2c <HAL_ADC_ConfigChannel+0x65c>
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	0e9b      	lsrs	r3, r3, #26
 8001c16:	3301      	adds	r3, #1
 8001c18:	f003 021f 	and.w	r2, r3, #31
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	4413      	add	r3, r2
 8001c22:	3b1e      	subs	r3, #30
 8001c24:	051b      	lsls	r3, r3, #20
 8001c26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c2a:	e01d      	b.n	8001c68 <HAL_ADC_ConfigChannel+0x698>
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	fa93 f3a3 	rbit	r3, r3
 8001c38:	613b      	str	r3, [r7, #16]
  return result;
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d103      	bne.n	8001c4c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001c44:	2320      	movs	r3, #32
 8001c46:	e005      	b.n	8001c54 <HAL_ADC_ConfigChannel+0x684>
 8001c48:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	fab3 f383 	clz	r3, r3
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	3301      	adds	r3, #1
 8001c56:	f003 021f 	and.w	r2, r3, #31
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	4413      	add	r3, r2
 8001c60:	3b1e      	subs	r3, #30
 8001c62:	051b      	lsls	r3, r3, #20
 8001c64:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c68:	430b      	orrs	r3, r1
 8001c6a:	683a      	ldr	r2, [r7, #0]
 8001c6c:	6892      	ldr	r2, [r2, #8]
 8001c6e:	4619      	mov	r1, r3
 8001c70:	f7ff fa81 	bl	8001176 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	4b44      	ldr	r3, [pc, #272]	; (8001d8c <HAL_ADC_ConfigChannel+0x7bc>)
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d07a      	beq.n	8001d76 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c80:	4843      	ldr	r0, [pc, #268]	; (8001d90 <HAL_ADC_ConfigChannel+0x7c0>)
 8001c82:	f7ff f9e9 	bl	8001058 <LL_ADC_GetCommonPathInternalCh>
 8001c86:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a41      	ldr	r2, [pc, #260]	; (8001d94 <HAL_ADC_ConfigChannel+0x7c4>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d12c      	bne.n	8001cee <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001c94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d126      	bne.n	8001cee <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a3c      	ldr	r2, [pc, #240]	; (8001d98 <HAL_ADC_ConfigChannel+0x7c8>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d004      	beq.n	8001cb4 <HAL_ADC_ConfigChannel+0x6e4>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a3b      	ldr	r2, [pc, #236]	; (8001d9c <HAL_ADC_ConfigChannel+0x7cc>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d15d      	bne.n	8001d70 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cb4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001cb8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4834      	ldr	r0, [pc, #208]	; (8001d90 <HAL_ADC_ConfigChannel+0x7c0>)
 8001cc0:	f7ff f9b7 	bl	8001032 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001cc4:	4b36      	ldr	r3, [pc, #216]	; (8001da0 <HAL_ADC_ConfigChannel+0x7d0>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	099b      	lsrs	r3, r3, #6
 8001cca:	4a36      	ldr	r2, [pc, #216]	; (8001da4 <HAL_ADC_ConfigChannel+0x7d4>)
 8001ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd0:	099b      	lsrs	r3, r3, #6
 8001cd2:	1c5a      	adds	r2, r3, #1
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	4413      	add	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001cde:	e002      	b.n	8001ce6 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1f9      	bne.n	8001ce0 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001cec:	e040      	b.n	8001d70 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a2d      	ldr	r2, [pc, #180]	; (8001da8 <HAL_ADC_ConfigChannel+0x7d8>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d118      	bne.n	8001d2a <HAL_ADC_ConfigChannel+0x75a>
 8001cf8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001cfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d112      	bne.n	8001d2a <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a23      	ldr	r2, [pc, #140]	; (8001d98 <HAL_ADC_ConfigChannel+0x7c8>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d004      	beq.n	8001d18 <HAL_ADC_ConfigChannel+0x748>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a22      	ldr	r2, [pc, #136]	; (8001d9c <HAL_ADC_ConfigChannel+0x7cc>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d12d      	bne.n	8001d74 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d20:	4619      	mov	r1, r3
 8001d22:	481b      	ldr	r0, [pc, #108]	; (8001d90 <HAL_ADC_ConfigChannel+0x7c0>)
 8001d24:	f7ff f985 	bl	8001032 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d28:	e024      	b.n	8001d74 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a1f      	ldr	r2, [pc, #124]	; (8001dac <HAL_ADC_ConfigChannel+0x7dc>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d120      	bne.n	8001d76 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001d34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d11a      	bne.n	8001d76 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a14      	ldr	r2, [pc, #80]	; (8001d98 <HAL_ADC_ConfigChannel+0x7c8>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d115      	bne.n	8001d76 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d4e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d52:	4619      	mov	r1, r3
 8001d54:	480e      	ldr	r0, [pc, #56]	; (8001d90 <HAL_ADC_ConfigChannel+0x7c0>)
 8001d56:	f7ff f96c 	bl	8001032 <LL_ADC_SetCommonPathInternalCh>
 8001d5a:	e00c      	b.n	8001d76 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d60:	f043 0220 	orr.w	r2, r3, #32
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001d6e:	e002      	b.n	8001d76 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d70:	bf00      	nop
 8001d72:	e000      	b.n	8001d76 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d74:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001d7e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	37d8      	adds	r7, #216	; 0xd8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	80080000 	.word	0x80080000
 8001d90:	50040300 	.word	0x50040300
 8001d94:	c7520000 	.word	0xc7520000
 8001d98:	50040000 	.word	0x50040000
 8001d9c:	50040200 	.word	0x50040200
 8001da0:	20000000 	.word	0x20000000
 8001da4:	053e2d63 	.word	0x053e2d63
 8001da8:	cb840000 	.word	0xcb840000
 8001dac:	80000001 	.word	0x80000001

08001db0 <LL_ADC_IsEnabled>:
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f003 0301 	and.w	r3, r3, #1
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d101      	bne.n	8001dc8 <LL_ADC_IsEnabled+0x18>
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e000      	b.n	8001dca <LL_ADC_IsEnabled+0x1a>
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <LL_ADC_REG_IsConversionOngoing>:
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b083      	sub	sp, #12
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f003 0304 	and.w	r3, r3, #4
 8001de6:	2b04      	cmp	r3, #4
 8001de8:	d101      	bne.n	8001dee <LL_ADC_REG_IsConversionOngoing+0x18>
 8001dea:	2301      	movs	r3, #1
 8001dec:	e000      	b.n	8001df0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001dfc:	b590      	push	{r4, r7, lr}
 8001dfe:	b09f      	sub	sp, #124	; 0x7c
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e06:	2300      	movs	r3, #0
 8001e08:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d101      	bne.n	8001e1a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001e16:	2302      	movs	r3, #2
 8001e18:	e093      	b.n	8001f42 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8001e22:	2300      	movs	r3, #0
 8001e24:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8001e26:	2300      	movs	r3, #0
 8001e28:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a47      	ldr	r2, [pc, #284]	; (8001f4c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d102      	bne.n	8001e3a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001e34:	4b46      	ldr	r3, [pc, #280]	; (8001f50 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001e36:	60bb      	str	r3, [r7, #8]
 8001e38:	e001      	b.n	8001e3e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d10b      	bne.n	8001e5c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e48:	f043 0220 	orr.w	r2, r3, #32
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e072      	b.n	8001f42 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff ffb9 	bl	8001dd6 <LL_ADC_REG_IsConversionOngoing>
 8001e64:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff ffb3 	bl	8001dd6 <LL_ADC_REG_IsConversionOngoing>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d154      	bne.n	8001f20 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001e76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d151      	bne.n	8001f20 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001e7c:	4b35      	ldr	r3, [pc, #212]	; (8001f54 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8001e7e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d02c      	beq.n	8001ee2 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001e88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	6859      	ldr	r1, [r3, #4]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e9a:	035b      	lsls	r3, r3, #13
 8001e9c:	430b      	orrs	r3, r1
 8001e9e:	431a      	orrs	r2, r3
 8001ea0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ea2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ea4:	4829      	ldr	r0, [pc, #164]	; (8001f4c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001ea6:	f7ff ff83 	bl	8001db0 <LL_ADC_IsEnabled>
 8001eaa:	4604      	mov	r4, r0
 8001eac:	4828      	ldr	r0, [pc, #160]	; (8001f50 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001eae:	f7ff ff7f 	bl	8001db0 <LL_ADC_IsEnabled>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	431c      	orrs	r4, r3
 8001eb6:	4828      	ldr	r0, [pc, #160]	; (8001f58 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001eb8:	f7ff ff7a 	bl	8001db0 <LL_ADC_IsEnabled>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	4323      	orrs	r3, r4
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d137      	bne.n	8001f34 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001ec4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001ecc:	f023 030f 	bic.w	r3, r3, #15
 8001ed0:	683a      	ldr	r2, [r7, #0]
 8001ed2:	6811      	ldr	r1, [r2, #0]
 8001ed4:	683a      	ldr	r2, [r7, #0]
 8001ed6:	6892      	ldr	r2, [r2, #8]
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	431a      	orrs	r2, r3
 8001edc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ede:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ee0:	e028      	b.n	8001f34 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001ee2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001eea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001eec:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001eee:	4817      	ldr	r0, [pc, #92]	; (8001f4c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001ef0:	f7ff ff5e 	bl	8001db0 <LL_ADC_IsEnabled>
 8001ef4:	4604      	mov	r4, r0
 8001ef6:	4816      	ldr	r0, [pc, #88]	; (8001f50 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001ef8:	f7ff ff5a 	bl	8001db0 <LL_ADC_IsEnabled>
 8001efc:	4603      	mov	r3, r0
 8001efe:	431c      	orrs	r4, r3
 8001f00:	4815      	ldr	r0, [pc, #84]	; (8001f58 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001f02:	f7ff ff55 	bl	8001db0 <LL_ADC_IsEnabled>
 8001f06:	4603      	mov	r3, r0
 8001f08:	4323      	orrs	r3, r4
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d112      	bne.n	8001f34 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001f0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001f16:	f023 030f 	bic.w	r3, r3, #15
 8001f1a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001f1c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f1e:	e009      	b.n	8001f34 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f24:	f043 0220 	orr.w	r2, r3, #32
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001f32:	e000      	b.n	8001f36 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f34:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001f3e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	377c      	adds	r7, #124	; 0x7c
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd90      	pop	{r4, r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	50040000 	.word	0x50040000
 8001f50:	50040100 	.word	0x50040100
 8001f54:	50040300 	.word	0x50040300
 8001f58:	50040200 	.word	0x50040200

08001f5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f003 0307 	and.w	r3, r3, #7
 8001f6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f6c:	4b0c      	ldr	r3, [pc, #48]	; (8001fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f72:	68ba      	ldr	r2, [r7, #8]
 8001f74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f78:	4013      	ands	r3, r2
 8001f7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f8e:	4a04      	ldr	r2, [pc, #16]	; (8001fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	60d3      	str	r3, [r2, #12]
}
 8001f94:	bf00      	nop
 8001f96:	3714      	adds	r7, #20
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr
 8001fa0:	e000ed00 	.word	0xe000ed00

08001fa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fa8:	4b04      	ldr	r3, [pc, #16]	; (8001fbc <__NVIC_GetPriorityGrouping+0x18>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	0a1b      	lsrs	r3, r3, #8
 8001fae:	f003 0307 	and.w	r3, r3, #7
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	e000ed00 	.word	0xe000ed00

08001fc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	6039      	str	r1, [r7, #0]
 8001fca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	db0a      	blt.n	8001fea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	b2da      	uxtb	r2, r3
 8001fd8:	490c      	ldr	r1, [pc, #48]	; (800200c <__NVIC_SetPriority+0x4c>)
 8001fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fde:	0112      	lsls	r2, r2, #4
 8001fe0:	b2d2      	uxtb	r2, r2
 8001fe2:	440b      	add	r3, r1
 8001fe4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fe8:	e00a      	b.n	8002000 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	b2da      	uxtb	r2, r3
 8001fee:	4908      	ldr	r1, [pc, #32]	; (8002010 <__NVIC_SetPriority+0x50>)
 8001ff0:	79fb      	ldrb	r3, [r7, #7]
 8001ff2:	f003 030f 	and.w	r3, r3, #15
 8001ff6:	3b04      	subs	r3, #4
 8001ff8:	0112      	lsls	r2, r2, #4
 8001ffa:	b2d2      	uxtb	r2, r2
 8001ffc:	440b      	add	r3, r1
 8001ffe:	761a      	strb	r2, [r3, #24]
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	e000e100 	.word	0xe000e100
 8002010:	e000ed00 	.word	0xe000ed00

08002014 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002014:	b480      	push	{r7}
 8002016:	b089      	sub	sp, #36	; 0x24
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f003 0307 	and.w	r3, r3, #7
 8002026:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	f1c3 0307 	rsb	r3, r3, #7
 800202e:	2b04      	cmp	r3, #4
 8002030:	bf28      	it	cs
 8002032:	2304      	movcs	r3, #4
 8002034:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	3304      	adds	r3, #4
 800203a:	2b06      	cmp	r3, #6
 800203c:	d902      	bls.n	8002044 <NVIC_EncodePriority+0x30>
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	3b03      	subs	r3, #3
 8002042:	e000      	b.n	8002046 <NVIC_EncodePriority+0x32>
 8002044:	2300      	movs	r3, #0
 8002046:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002048:	f04f 32ff 	mov.w	r2, #4294967295
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	43da      	mvns	r2, r3
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	401a      	ands	r2, r3
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800205c:	f04f 31ff 	mov.w	r1, #4294967295
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	fa01 f303 	lsl.w	r3, r1, r3
 8002066:	43d9      	mvns	r1, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800206c:	4313      	orrs	r3, r2
         );
}
 800206e:	4618      	mov	r0, r3
 8002070:	3724      	adds	r7, #36	; 0x24
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
	...

0800207c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	3b01      	subs	r3, #1
 8002088:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800208c:	d301      	bcc.n	8002092 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800208e:	2301      	movs	r3, #1
 8002090:	e00f      	b.n	80020b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002092:	4a0a      	ldr	r2, [pc, #40]	; (80020bc <SysTick_Config+0x40>)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3b01      	subs	r3, #1
 8002098:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800209a:	210f      	movs	r1, #15
 800209c:	f04f 30ff 	mov.w	r0, #4294967295
 80020a0:	f7ff ff8e 	bl	8001fc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020a4:	4b05      	ldr	r3, [pc, #20]	; (80020bc <SysTick_Config+0x40>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020aa:	4b04      	ldr	r3, [pc, #16]	; (80020bc <SysTick_Config+0x40>)
 80020ac:	2207      	movs	r2, #7
 80020ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	e000e010 	.word	0xe000e010

080020c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f7ff ff47 	bl	8001f5c <__NVIC_SetPriorityGrouping>
}
 80020ce:	bf00      	nop
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b086      	sub	sp, #24
 80020da:	af00      	add	r7, sp, #0
 80020dc:	4603      	mov	r3, r0
 80020de:	60b9      	str	r1, [r7, #8]
 80020e0:	607a      	str	r2, [r7, #4]
 80020e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020e4:	2300      	movs	r3, #0
 80020e6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020e8:	f7ff ff5c 	bl	8001fa4 <__NVIC_GetPriorityGrouping>
 80020ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	68b9      	ldr	r1, [r7, #8]
 80020f2:	6978      	ldr	r0, [r7, #20]
 80020f4:	f7ff ff8e 	bl	8002014 <NVIC_EncodePriority>
 80020f8:	4602      	mov	r2, r0
 80020fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020fe:	4611      	mov	r1, r2
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff ff5d 	bl	8001fc0 <__NVIC_SetPriority>
}
 8002106:	bf00      	nop
 8002108:	3718      	adds	r7, #24
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b082      	sub	sp, #8
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f7ff ffb0 	bl	800207c <SysTick_Config>
 800211c:	4603      	mov	r3, r0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
	...

08002128 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002128:	b480      	push	{r7}
 800212a:	b087      	sub	sp, #28
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002132:	2300      	movs	r3, #0
 8002134:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002136:	e17f      	b.n	8002438 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	2101      	movs	r1, #1
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	fa01 f303 	lsl.w	r3, r1, r3
 8002144:	4013      	ands	r3, r2
 8002146:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2b00      	cmp	r3, #0
 800214c:	f000 8171 	beq.w	8002432 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f003 0303 	and.w	r3, r3, #3
 8002158:	2b01      	cmp	r3, #1
 800215a:	d005      	beq.n	8002168 <HAL_GPIO_Init+0x40>
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f003 0303 	and.w	r3, r3, #3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d130      	bne.n	80021ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	2203      	movs	r2, #3
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	43db      	mvns	r3, r3
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	4013      	ands	r3, r2
 800217e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	68da      	ldr	r2, [r3, #12]
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	4313      	orrs	r3, r2
 8002190:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800219e:	2201      	movs	r2, #1
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	fa02 f303 	lsl.w	r3, r2, r3
 80021a6:	43db      	mvns	r3, r3
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	4013      	ands	r3, r2
 80021ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	091b      	lsrs	r3, r3, #4
 80021b4:	f003 0201 	and.w	r2, r3, #1
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f003 0303 	and.w	r3, r3, #3
 80021d2:	2b03      	cmp	r3, #3
 80021d4:	d118      	bne.n	8002208 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80021dc:	2201      	movs	r2, #1
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	43db      	mvns	r3, r3
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	4013      	ands	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	08db      	lsrs	r3, r3, #3
 80021f2:	f003 0201 	and.w	r2, r3, #1
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	4313      	orrs	r3, r2
 8002200:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f003 0303 	and.w	r3, r3, #3
 8002210:	2b03      	cmp	r3, #3
 8002212:	d017      	beq.n	8002244 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	2203      	movs	r2, #3
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	43db      	mvns	r3, r3
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	4013      	ands	r3, r2
 800222a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	689a      	ldr	r2, [r3, #8]
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	4313      	orrs	r3, r2
 800223c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f003 0303 	and.w	r3, r3, #3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d123      	bne.n	8002298 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	08da      	lsrs	r2, r3, #3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	3208      	adds	r2, #8
 8002258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800225c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	f003 0307 	and.w	r3, r3, #7
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	220f      	movs	r2, #15
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	43db      	mvns	r3, r3
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	4013      	ands	r3, r2
 8002272:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	691a      	ldr	r2, [r3, #16]
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	f003 0307 	and.w	r3, r3, #7
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	4313      	orrs	r3, r2
 8002288:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	08da      	lsrs	r2, r3, #3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	3208      	adds	r2, #8
 8002292:	6939      	ldr	r1, [r7, #16]
 8002294:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	2203      	movs	r2, #3
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	43db      	mvns	r3, r3
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	4013      	ands	r3, r2
 80022ae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f003 0203 	and.w	r2, r3, #3
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	f000 80ac 	beq.w	8002432 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022da:	4b5f      	ldr	r3, [pc, #380]	; (8002458 <HAL_GPIO_Init+0x330>)
 80022dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022de:	4a5e      	ldr	r2, [pc, #376]	; (8002458 <HAL_GPIO_Init+0x330>)
 80022e0:	f043 0301 	orr.w	r3, r3, #1
 80022e4:	6613      	str	r3, [r2, #96]	; 0x60
 80022e6:	4b5c      	ldr	r3, [pc, #368]	; (8002458 <HAL_GPIO_Init+0x330>)
 80022e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	60bb      	str	r3, [r7, #8]
 80022f0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80022f2:	4a5a      	ldr	r2, [pc, #360]	; (800245c <HAL_GPIO_Init+0x334>)
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	089b      	lsrs	r3, r3, #2
 80022f8:	3302      	adds	r3, #2
 80022fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	f003 0303 	and.w	r3, r3, #3
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	220f      	movs	r2, #15
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	43db      	mvns	r3, r3
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	4013      	ands	r3, r2
 8002314:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800231c:	d025      	beq.n	800236a <HAL_GPIO_Init+0x242>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a4f      	ldr	r2, [pc, #316]	; (8002460 <HAL_GPIO_Init+0x338>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d01f      	beq.n	8002366 <HAL_GPIO_Init+0x23e>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a4e      	ldr	r2, [pc, #312]	; (8002464 <HAL_GPIO_Init+0x33c>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d019      	beq.n	8002362 <HAL_GPIO_Init+0x23a>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a4d      	ldr	r2, [pc, #308]	; (8002468 <HAL_GPIO_Init+0x340>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d013      	beq.n	800235e <HAL_GPIO_Init+0x236>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a4c      	ldr	r2, [pc, #304]	; (800246c <HAL_GPIO_Init+0x344>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d00d      	beq.n	800235a <HAL_GPIO_Init+0x232>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a4b      	ldr	r2, [pc, #300]	; (8002470 <HAL_GPIO_Init+0x348>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d007      	beq.n	8002356 <HAL_GPIO_Init+0x22e>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a4a      	ldr	r2, [pc, #296]	; (8002474 <HAL_GPIO_Init+0x34c>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d101      	bne.n	8002352 <HAL_GPIO_Init+0x22a>
 800234e:	2306      	movs	r3, #6
 8002350:	e00c      	b.n	800236c <HAL_GPIO_Init+0x244>
 8002352:	2307      	movs	r3, #7
 8002354:	e00a      	b.n	800236c <HAL_GPIO_Init+0x244>
 8002356:	2305      	movs	r3, #5
 8002358:	e008      	b.n	800236c <HAL_GPIO_Init+0x244>
 800235a:	2304      	movs	r3, #4
 800235c:	e006      	b.n	800236c <HAL_GPIO_Init+0x244>
 800235e:	2303      	movs	r3, #3
 8002360:	e004      	b.n	800236c <HAL_GPIO_Init+0x244>
 8002362:	2302      	movs	r3, #2
 8002364:	e002      	b.n	800236c <HAL_GPIO_Init+0x244>
 8002366:	2301      	movs	r3, #1
 8002368:	e000      	b.n	800236c <HAL_GPIO_Init+0x244>
 800236a:	2300      	movs	r3, #0
 800236c:	697a      	ldr	r2, [r7, #20]
 800236e:	f002 0203 	and.w	r2, r2, #3
 8002372:	0092      	lsls	r2, r2, #2
 8002374:	4093      	lsls	r3, r2
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	4313      	orrs	r3, r2
 800237a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800237c:	4937      	ldr	r1, [pc, #220]	; (800245c <HAL_GPIO_Init+0x334>)
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	089b      	lsrs	r3, r3, #2
 8002382:	3302      	adds	r3, #2
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800238a:	4b3b      	ldr	r3, [pc, #236]	; (8002478 <HAL_GPIO_Init+0x350>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	43db      	mvns	r3, r3
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	4013      	ands	r3, r2
 8002398:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d003      	beq.n	80023ae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80023ae:	4a32      	ldr	r2, [pc, #200]	; (8002478 <HAL_GPIO_Init+0x350>)
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80023b4:	4b30      	ldr	r3, [pc, #192]	; (8002478 <HAL_GPIO_Init+0x350>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	43db      	mvns	r3, r3
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	4013      	ands	r3, r2
 80023c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d003      	beq.n	80023d8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80023d8:	4a27      	ldr	r2, [pc, #156]	; (8002478 <HAL_GPIO_Init+0x350>)
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80023de:	4b26      	ldr	r3, [pc, #152]	; (8002478 <HAL_GPIO_Init+0x350>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	43db      	mvns	r3, r3
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	4013      	ands	r3, r2
 80023ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	4313      	orrs	r3, r2
 8002400:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002402:	4a1d      	ldr	r2, [pc, #116]	; (8002478 <HAL_GPIO_Init+0x350>)
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002408:	4b1b      	ldr	r3, [pc, #108]	; (8002478 <HAL_GPIO_Init+0x350>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	43db      	mvns	r3, r3
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	4013      	ands	r3, r2
 8002416:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d003      	beq.n	800242c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	4313      	orrs	r3, r2
 800242a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800242c:	4a12      	ldr	r2, [pc, #72]	; (8002478 <HAL_GPIO_Init+0x350>)
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	3301      	adds	r3, #1
 8002436:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	fa22 f303 	lsr.w	r3, r2, r3
 8002442:	2b00      	cmp	r3, #0
 8002444:	f47f ae78 	bne.w	8002138 <HAL_GPIO_Init+0x10>
  }
}
 8002448:	bf00      	nop
 800244a:	bf00      	nop
 800244c:	371c      	adds	r7, #28
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	40021000 	.word	0x40021000
 800245c:	40010000 	.word	0x40010000
 8002460:	48000400 	.word	0x48000400
 8002464:	48000800 	.word	0x48000800
 8002468:	48000c00 	.word	0x48000c00
 800246c:	48001000 	.word	0x48001000
 8002470:	48001400 	.word	0x48001400
 8002474:	48001800 	.word	0x48001800
 8002478:	40010400 	.word	0x40010400

0800247c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	460b      	mov	r3, r1
 8002486:	807b      	strh	r3, [r7, #2]
 8002488:	4613      	mov	r3, r2
 800248a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800248c:	787b      	ldrb	r3, [r7, #1]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d003      	beq.n	800249a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002492:	887a      	ldrh	r2, [r7, #2]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002498:	e002      	b.n	80024a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800249a:	887a      	ldrh	r2, [r7, #2]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	460b      	mov	r3, r1
 80024b6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	695b      	ldr	r3, [r3, #20]
 80024bc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024be:	887a      	ldrh	r2, [r7, #2]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	4013      	ands	r3, r2
 80024c4:	041a      	lsls	r2, r3, #16
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	43d9      	mvns	r1, r3
 80024ca:	887b      	ldrh	r3, [r7, #2]
 80024cc:	400b      	ands	r3, r1
 80024ce:	431a      	orrs	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	619a      	str	r2, [r3, #24]
}
 80024d4:	bf00      	nop
 80024d6:	3714      	adds	r7, #20
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80024e4:	4b04      	ldr	r3, [pc, #16]	; (80024f8 <HAL_PWREx_GetVoltageRange+0x18>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	40007000 	.word	0x40007000

080024fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800250a:	d130      	bne.n	800256e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800250c:	4b23      	ldr	r3, [pc, #140]	; (800259c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002514:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002518:	d038      	beq.n	800258c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800251a:	4b20      	ldr	r3, [pc, #128]	; (800259c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002522:	4a1e      	ldr	r2, [pc, #120]	; (800259c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002524:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002528:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800252a:	4b1d      	ldr	r3, [pc, #116]	; (80025a0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2232      	movs	r2, #50	; 0x32
 8002530:	fb02 f303 	mul.w	r3, r2, r3
 8002534:	4a1b      	ldr	r2, [pc, #108]	; (80025a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002536:	fba2 2303 	umull	r2, r3, r2, r3
 800253a:	0c9b      	lsrs	r3, r3, #18
 800253c:	3301      	adds	r3, #1
 800253e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002540:	e002      	b.n	8002548 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	3b01      	subs	r3, #1
 8002546:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002548:	4b14      	ldr	r3, [pc, #80]	; (800259c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800254a:	695b      	ldr	r3, [r3, #20]
 800254c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002550:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002554:	d102      	bne.n	800255c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1f2      	bne.n	8002542 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800255c:	4b0f      	ldr	r3, [pc, #60]	; (800259c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800255e:	695b      	ldr	r3, [r3, #20]
 8002560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002564:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002568:	d110      	bne.n	800258c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e00f      	b.n	800258e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800256e:	4b0b      	ldr	r3, [pc, #44]	; (800259c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002576:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800257a:	d007      	beq.n	800258c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800257c:	4b07      	ldr	r3, [pc, #28]	; (800259c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002584:	4a05      	ldr	r2, [pc, #20]	; (800259c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002586:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800258a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3714      	adds	r7, #20
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	40007000 	.word	0x40007000
 80025a0:	20000000 	.word	0x20000000
 80025a4:	431bde83 	.word	0x431bde83

080025a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b088      	sub	sp, #32
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d101      	bne.n	80025ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e3d4      	b.n	8002d64 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025ba:	4ba1      	ldr	r3, [pc, #644]	; (8002840 <HAL_RCC_OscConfig+0x298>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 030c 	and.w	r3, r3, #12
 80025c2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025c4:	4b9e      	ldr	r3, [pc, #632]	; (8002840 <HAL_RCC_OscConfig+0x298>)
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	f003 0303 	and.w	r3, r3, #3
 80025cc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0310 	and.w	r3, r3, #16
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	f000 80e4 	beq.w	80027a4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d007      	beq.n	80025f2 <HAL_RCC_OscConfig+0x4a>
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	2b0c      	cmp	r3, #12
 80025e6:	f040 808b 	bne.w	8002700 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	f040 8087 	bne.w	8002700 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025f2:	4b93      	ldr	r3, [pc, #588]	; (8002840 <HAL_RCC_OscConfig+0x298>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d005      	beq.n	800260a <HAL_RCC_OscConfig+0x62>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e3ac      	b.n	8002d64 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a1a      	ldr	r2, [r3, #32]
 800260e:	4b8c      	ldr	r3, [pc, #560]	; (8002840 <HAL_RCC_OscConfig+0x298>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0308 	and.w	r3, r3, #8
 8002616:	2b00      	cmp	r3, #0
 8002618:	d004      	beq.n	8002624 <HAL_RCC_OscConfig+0x7c>
 800261a:	4b89      	ldr	r3, [pc, #548]	; (8002840 <HAL_RCC_OscConfig+0x298>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002622:	e005      	b.n	8002630 <HAL_RCC_OscConfig+0x88>
 8002624:	4b86      	ldr	r3, [pc, #536]	; (8002840 <HAL_RCC_OscConfig+0x298>)
 8002626:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800262a:	091b      	lsrs	r3, r3, #4
 800262c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002630:	4293      	cmp	r3, r2
 8002632:	d223      	bcs.n	800267c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a1b      	ldr	r3, [r3, #32]
 8002638:	4618      	mov	r0, r3
 800263a:	f000 fd41 	bl	80030c0 <RCC_SetFlashLatencyFromMSIRange>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e38d      	b.n	8002d64 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002648:	4b7d      	ldr	r3, [pc, #500]	; (8002840 <HAL_RCC_OscConfig+0x298>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a7c      	ldr	r2, [pc, #496]	; (8002840 <HAL_RCC_OscConfig+0x298>)
 800264e:	f043 0308 	orr.w	r3, r3, #8
 8002652:	6013      	str	r3, [r2, #0]
 8002654:	4b7a      	ldr	r3, [pc, #488]	; (8002840 <HAL_RCC_OscConfig+0x298>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a1b      	ldr	r3, [r3, #32]
 8002660:	4977      	ldr	r1, [pc, #476]	; (8002840 <HAL_RCC_OscConfig+0x298>)
 8002662:	4313      	orrs	r3, r2
 8002664:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002666:	4b76      	ldr	r3, [pc, #472]	; (8002840 <HAL_RCC_OscConfig+0x298>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	021b      	lsls	r3, r3, #8
 8002674:	4972      	ldr	r1, [pc, #456]	; (8002840 <HAL_RCC_OscConfig+0x298>)
 8002676:	4313      	orrs	r3, r2
 8002678:	604b      	str	r3, [r1, #4]
 800267a:	e025      	b.n	80026c8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800267c:	4b70      	ldr	r3, [pc, #448]	; (8002840 <HAL_RCC_OscConfig+0x298>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a6f      	ldr	r2, [pc, #444]	; (8002840 <HAL_RCC_OscConfig+0x298>)
 8002682:	f043 0308 	orr.w	r3, r3, #8
 8002686:	6013      	str	r3, [r2, #0]
 8002688:	4b6d      	ldr	r3, [pc, #436]	; (8002840 <HAL_RCC_OscConfig+0x298>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	496a      	ldr	r1, [pc, #424]	; (8002840 <HAL_RCC_OscConfig+0x298>)
 8002696:	4313      	orrs	r3, r2
 8002698:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800269a:	4b69      	ldr	r3, [pc, #420]	; (8002840 <HAL_RCC_OscConfig+0x298>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	021b      	lsls	r3, r3, #8
 80026a8:	4965      	ldr	r1, [pc, #404]	; (8002840 <HAL_RCC_OscConfig+0x298>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d109      	bne.n	80026c8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f000 fd01 	bl	80030c0 <RCC_SetFlashLatencyFromMSIRange>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e34d      	b.n	8002d64 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026c8:	f000 fc36 	bl	8002f38 <HAL_RCC_GetSysClockFreq>
 80026cc:	4602      	mov	r2, r0
 80026ce:	4b5c      	ldr	r3, [pc, #368]	; (8002840 <HAL_RCC_OscConfig+0x298>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	091b      	lsrs	r3, r3, #4
 80026d4:	f003 030f 	and.w	r3, r3, #15
 80026d8:	495a      	ldr	r1, [pc, #360]	; (8002844 <HAL_RCC_OscConfig+0x29c>)
 80026da:	5ccb      	ldrb	r3, [r1, r3]
 80026dc:	f003 031f 	and.w	r3, r3, #31
 80026e0:	fa22 f303 	lsr.w	r3, r2, r3
 80026e4:	4a58      	ldr	r2, [pc, #352]	; (8002848 <HAL_RCC_OscConfig+0x2a0>)
 80026e6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80026e8:	4b58      	ldr	r3, [pc, #352]	; (800284c <HAL_RCC_OscConfig+0x2a4>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7fe fc0d 	bl	8000f0c <HAL_InitTick>
 80026f2:	4603      	mov	r3, r0
 80026f4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80026f6:	7bfb      	ldrb	r3, [r7, #15]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d052      	beq.n	80027a2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80026fc:	7bfb      	ldrb	r3, [r7, #15]
 80026fe:	e331      	b.n	8002d64 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d032      	beq.n	800276e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002708:	4b4d      	ldr	r3, [pc, #308]	; (8002840 <HAL_RCC_OscConfig+0x298>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a4c      	ldr	r2, [pc, #304]	; (8002840 <HAL_RCC_OscConfig+0x298>)
 800270e:	f043 0301 	orr.w	r3, r3, #1
 8002712:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002714:	f7fe fc4a 	bl	8000fac <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800271c:	f7fe fc46 	bl	8000fac <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e31a      	b.n	8002d64 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800272e:	4b44      	ldr	r3, [pc, #272]	; (8002840 <HAL_RCC_OscConfig+0x298>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d0f0      	beq.n	800271c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800273a:	4b41      	ldr	r3, [pc, #260]	; (8002840 <HAL_RCC_OscConfig+0x298>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a40      	ldr	r2, [pc, #256]	; (8002840 <HAL_RCC_OscConfig+0x298>)
 8002740:	f043 0308 	orr.w	r3, r3, #8
 8002744:	6013      	str	r3, [r2, #0]
 8002746:	4b3e      	ldr	r3, [pc, #248]	; (8002840 <HAL_RCC_OscConfig+0x298>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a1b      	ldr	r3, [r3, #32]
 8002752:	493b      	ldr	r1, [pc, #236]	; (8002840 <HAL_RCC_OscConfig+0x298>)
 8002754:	4313      	orrs	r3, r2
 8002756:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002758:	4b39      	ldr	r3, [pc, #228]	; (8002840 <HAL_RCC_OscConfig+0x298>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	69db      	ldr	r3, [r3, #28]
 8002764:	021b      	lsls	r3, r3, #8
 8002766:	4936      	ldr	r1, [pc, #216]	; (8002840 <HAL_RCC_OscConfig+0x298>)
 8002768:	4313      	orrs	r3, r2
 800276a:	604b      	str	r3, [r1, #4]
 800276c:	e01a      	b.n	80027a4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800276e:	4b34      	ldr	r3, [pc, #208]	; (8002840 <HAL_RCC_OscConfig+0x298>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a33      	ldr	r2, [pc, #204]	; (8002840 <HAL_RCC_OscConfig+0x298>)
 8002774:	f023 0301 	bic.w	r3, r3, #1
 8002778:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800277a:	f7fe fc17 	bl	8000fac <HAL_GetTick>
 800277e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002780:	e008      	b.n	8002794 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002782:	f7fe fc13 	bl	8000fac <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b02      	cmp	r3, #2
 800278e:	d901      	bls.n	8002794 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e2e7      	b.n	8002d64 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002794:	4b2a      	ldr	r3, [pc, #168]	; (8002840 <HAL_RCC_OscConfig+0x298>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0302 	and.w	r3, r3, #2
 800279c:	2b00      	cmp	r3, #0
 800279e:	d1f0      	bne.n	8002782 <HAL_RCC_OscConfig+0x1da>
 80027a0:	e000      	b.n	80027a4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027a2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0301 	and.w	r3, r3, #1
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d074      	beq.n	800289a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	2b08      	cmp	r3, #8
 80027b4:	d005      	beq.n	80027c2 <HAL_RCC_OscConfig+0x21a>
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	2b0c      	cmp	r3, #12
 80027ba:	d10e      	bne.n	80027da <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	2b03      	cmp	r3, #3
 80027c0:	d10b      	bne.n	80027da <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027c2:	4b1f      	ldr	r3, [pc, #124]	; (8002840 <HAL_RCC_OscConfig+0x298>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d064      	beq.n	8002898 <HAL_RCC_OscConfig+0x2f0>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d160      	bne.n	8002898 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e2c4      	b.n	8002d64 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027e2:	d106      	bne.n	80027f2 <HAL_RCC_OscConfig+0x24a>
 80027e4:	4b16      	ldr	r3, [pc, #88]	; (8002840 <HAL_RCC_OscConfig+0x298>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a15      	ldr	r2, [pc, #84]	; (8002840 <HAL_RCC_OscConfig+0x298>)
 80027ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ee:	6013      	str	r3, [r2, #0]
 80027f0:	e01d      	b.n	800282e <HAL_RCC_OscConfig+0x286>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027fa:	d10c      	bne.n	8002816 <HAL_RCC_OscConfig+0x26e>
 80027fc:	4b10      	ldr	r3, [pc, #64]	; (8002840 <HAL_RCC_OscConfig+0x298>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a0f      	ldr	r2, [pc, #60]	; (8002840 <HAL_RCC_OscConfig+0x298>)
 8002802:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002806:	6013      	str	r3, [r2, #0]
 8002808:	4b0d      	ldr	r3, [pc, #52]	; (8002840 <HAL_RCC_OscConfig+0x298>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a0c      	ldr	r2, [pc, #48]	; (8002840 <HAL_RCC_OscConfig+0x298>)
 800280e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002812:	6013      	str	r3, [r2, #0]
 8002814:	e00b      	b.n	800282e <HAL_RCC_OscConfig+0x286>
 8002816:	4b0a      	ldr	r3, [pc, #40]	; (8002840 <HAL_RCC_OscConfig+0x298>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a09      	ldr	r2, [pc, #36]	; (8002840 <HAL_RCC_OscConfig+0x298>)
 800281c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002820:	6013      	str	r3, [r2, #0]
 8002822:	4b07      	ldr	r3, [pc, #28]	; (8002840 <HAL_RCC_OscConfig+0x298>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a06      	ldr	r2, [pc, #24]	; (8002840 <HAL_RCC_OscConfig+0x298>)
 8002828:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800282c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d01c      	beq.n	8002870 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002836:	f7fe fbb9 	bl	8000fac <HAL_GetTick>
 800283a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800283c:	e011      	b.n	8002862 <HAL_RCC_OscConfig+0x2ba>
 800283e:	bf00      	nop
 8002840:	40021000 	.word	0x40021000
 8002844:	08005884 	.word	0x08005884
 8002848:	20000000 	.word	0x20000000
 800284c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002850:	f7fe fbac 	bl	8000fac <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b64      	cmp	r3, #100	; 0x64
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e280      	b.n	8002d64 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002862:	4baf      	ldr	r3, [pc, #700]	; (8002b20 <HAL_RCC_OscConfig+0x578>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d0f0      	beq.n	8002850 <HAL_RCC_OscConfig+0x2a8>
 800286e:	e014      	b.n	800289a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002870:	f7fe fb9c 	bl	8000fac <HAL_GetTick>
 8002874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002878:	f7fe fb98 	bl	8000fac <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b64      	cmp	r3, #100	; 0x64
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e26c      	b.n	8002d64 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800288a:	4ba5      	ldr	r3, [pc, #660]	; (8002b20 <HAL_RCC_OscConfig+0x578>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1f0      	bne.n	8002878 <HAL_RCC_OscConfig+0x2d0>
 8002896:	e000      	b.n	800289a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002898:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d060      	beq.n	8002968 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	2b04      	cmp	r3, #4
 80028aa:	d005      	beq.n	80028b8 <HAL_RCC_OscConfig+0x310>
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	2b0c      	cmp	r3, #12
 80028b0:	d119      	bne.n	80028e6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d116      	bne.n	80028e6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028b8:	4b99      	ldr	r3, [pc, #612]	; (8002b20 <HAL_RCC_OscConfig+0x578>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d005      	beq.n	80028d0 <HAL_RCC_OscConfig+0x328>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d101      	bne.n	80028d0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e249      	b.n	8002d64 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028d0:	4b93      	ldr	r3, [pc, #588]	; (8002b20 <HAL_RCC_OscConfig+0x578>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	061b      	lsls	r3, r3, #24
 80028de:	4990      	ldr	r1, [pc, #576]	; (8002b20 <HAL_RCC_OscConfig+0x578>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028e4:	e040      	b.n	8002968 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d023      	beq.n	8002936 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028ee:	4b8c      	ldr	r3, [pc, #560]	; (8002b20 <HAL_RCC_OscConfig+0x578>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a8b      	ldr	r2, [pc, #556]	; (8002b20 <HAL_RCC_OscConfig+0x578>)
 80028f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028fa:	f7fe fb57 	bl	8000fac <HAL_GetTick>
 80028fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002900:	e008      	b.n	8002914 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002902:	f7fe fb53 	bl	8000fac <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b02      	cmp	r3, #2
 800290e:	d901      	bls.n	8002914 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e227      	b.n	8002d64 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002914:	4b82      	ldr	r3, [pc, #520]	; (8002b20 <HAL_RCC_OscConfig+0x578>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800291c:	2b00      	cmp	r3, #0
 800291e:	d0f0      	beq.n	8002902 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002920:	4b7f      	ldr	r3, [pc, #508]	; (8002b20 <HAL_RCC_OscConfig+0x578>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	061b      	lsls	r3, r3, #24
 800292e:	497c      	ldr	r1, [pc, #496]	; (8002b20 <HAL_RCC_OscConfig+0x578>)
 8002930:	4313      	orrs	r3, r2
 8002932:	604b      	str	r3, [r1, #4]
 8002934:	e018      	b.n	8002968 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002936:	4b7a      	ldr	r3, [pc, #488]	; (8002b20 <HAL_RCC_OscConfig+0x578>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a79      	ldr	r2, [pc, #484]	; (8002b20 <HAL_RCC_OscConfig+0x578>)
 800293c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002940:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002942:	f7fe fb33 	bl	8000fac <HAL_GetTick>
 8002946:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002948:	e008      	b.n	800295c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800294a:	f7fe fb2f 	bl	8000fac <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	2b02      	cmp	r3, #2
 8002956:	d901      	bls.n	800295c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e203      	b.n	8002d64 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800295c:	4b70      	ldr	r3, [pc, #448]	; (8002b20 <HAL_RCC_OscConfig+0x578>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002964:	2b00      	cmp	r3, #0
 8002966:	d1f0      	bne.n	800294a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0308 	and.w	r3, r3, #8
 8002970:	2b00      	cmp	r3, #0
 8002972:	d03c      	beq.n	80029ee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	695b      	ldr	r3, [r3, #20]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d01c      	beq.n	80029b6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800297c:	4b68      	ldr	r3, [pc, #416]	; (8002b20 <HAL_RCC_OscConfig+0x578>)
 800297e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002982:	4a67      	ldr	r2, [pc, #412]	; (8002b20 <HAL_RCC_OscConfig+0x578>)
 8002984:	f043 0301 	orr.w	r3, r3, #1
 8002988:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800298c:	f7fe fb0e 	bl	8000fac <HAL_GetTick>
 8002990:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002994:	f7fe fb0a 	bl	8000fac <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e1de      	b.n	8002d64 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029a6:	4b5e      	ldr	r3, [pc, #376]	; (8002b20 <HAL_RCC_OscConfig+0x578>)
 80029a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029ac:	f003 0302 	and.w	r3, r3, #2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d0ef      	beq.n	8002994 <HAL_RCC_OscConfig+0x3ec>
 80029b4:	e01b      	b.n	80029ee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029b6:	4b5a      	ldr	r3, [pc, #360]	; (8002b20 <HAL_RCC_OscConfig+0x578>)
 80029b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029bc:	4a58      	ldr	r2, [pc, #352]	; (8002b20 <HAL_RCC_OscConfig+0x578>)
 80029be:	f023 0301 	bic.w	r3, r3, #1
 80029c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c6:	f7fe faf1 	bl	8000fac <HAL_GetTick>
 80029ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029cc:	e008      	b.n	80029e0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029ce:	f7fe faed 	bl	8000fac <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e1c1      	b.n	8002d64 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029e0:	4b4f      	ldr	r3, [pc, #316]	; (8002b20 <HAL_RCC_OscConfig+0x578>)
 80029e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1ef      	bne.n	80029ce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0304 	and.w	r3, r3, #4
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f000 80a6 	beq.w	8002b48 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029fc:	2300      	movs	r3, #0
 80029fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002a00:	4b47      	ldr	r3, [pc, #284]	; (8002b20 <HAL_RCC_OscConfig+0x578>)
 8002a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d10d      	bne.n	8002a28 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a0c:	4b44      	ldr	r3, [pc, #272]	; (8002b20 <HAL_RCC_OscConfig+0x578>)
 8002a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a10:	4a43      	ldr	r2, [pc, #268]	; (8002b20 <HAL_RCC_OscConfig+0x578>)
 8002a12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a16:	6593      	str	r3, [r2, #88]	; 0x58
 8002a18:	4b41      	ldr	r3, [pc, #260]	; (8002b20 <HAL_RCC_OscConfig+0x578>)
 8002a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a20:	60bb      	str	r3, [r7, #8]
 8002a22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a24:	2301      	movs	r3, #1
 8002a26:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a28:	4b3e      	ldr	r3, [pc, #248]	; (8002b24 <HAL_RCC_OscConfig+0x57c>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d118      	bne.n	8002a66 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a34:	4b3b      	ldr	r3, [pc, #236]	; (8002b24 <HAL_RCC_OscConfig+0x57c>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a3a      	ldr	r2, [pc, #232]	; (8002b24 <HAL_RCC_OscConfig+0x57c>)
 8002a3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a3e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a40:	f7fe fab4 	bl	8000fac <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a48:	f7fe fab0 	bl	8000fac <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e184      	b.n	8002d64 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a5a:	4b32      	ldr	r3, [pc, #200]	; (8002b24 <HAL_RCC_OscConfig+0x57c>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d0f0      	beq.n	8002a48 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d108      	bne.n	8002a80 <HAL_RCC_OscConfig+0x4d8>
 8002a6e:	4b2c      	ldr	r3, [pc, #176]	; (8002b20 <HAL_RCC_OscConfig+0x578>)
 8002a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a74:	4a2a      	ldr	r2, [pc, #168]	; (8002b20 <HAL_RCC_OscConfig+0x578>)
 8002a76:	f043 0301 	orr.w	r3, r3, #1
 8002a7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a7e:	e024      	b.n	8002aca <HAL_RCC_OscConfig+0x522>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	2b05      	cmp	r3, #5
 8002a86:	d110      	bne.n	8002aaa <HAL_RCC_OscConfig+0x502>
 8002a88:	4b25      	ldr	r3, [pc, #148]	; (8002b20 <HAL_RCC_OscConfig+0x578>)
 8002a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a8e:	4a24      	ldr	r2, [pc, #144]	; (8002b20 <HAL_RCC_OscConfig+0x578>)
 8002a90:	f043 0304 	orr.w	r3, r3, #4
 8002a94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a98:	4b21      	ldr	r3, [pc, #132]	; (8002b20 <HAL_RCC_OscConfig+0x578>)
 8002a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a9e:	4a20      	ldr	r2, [pc, #128]	; (8002b20 <HAL_RCC_OscConfig+0x578>)
 8002aa0:	f043 0301 	orr.w	r3, r3, #1
 8002aa4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002aa8:	e00f      	b.n	8002aca <HAL_RCC_OscConfig+0x522>
 8002aaa:	4b1d      	ldr	r3, [pc, #116]	; (8002b20 <HAL_RCC_OscConfig+0x578>)
 8002aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab0:	4a1b      	ldr	r2, [pc, #108]	; (8002b20 <HAL_RCC_OscConfig+0x578>)
 8002ab2:	f023 0301 	bic.w	r3, r3, #1
 8002ab6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002aba:	4b19      	ldr	r3, [pc, #100]	; (8002b20 <HAL_RCC_OscConfig+0x578>)
 8002abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac0:	4a17      	ldr	r2, [pc, #92]	; (8002b20 <HAL_RCC_OscConfig+0x578>)
 8002ac2:	f023 0304 	bic.w	r3, r3, #4
 8002ac6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d016      	beq.n	8002b00 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad2:	f7fe fa6b 	bl	8000fac <HAL_GetTick>
 8002ad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ad8:	e00a      	b.n	8002af0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ada:	f7fe fa67 	bl	8000fac <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d901      	bls.n	8002af0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e139      	b.n	8002d64 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002af0:	4b0b      	ldr	r3, [pc, #44]	; (8002b20 <HAL_RCC_OscConfig+0x578>)
 8002af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d0ed      	beq.n	8002ada <HAL_RCC_OscConfig+0x532>
 8002afe:	e01a      	b.n	8002b36 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b00:	f7fe fa54 	bl	8000fac <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b06:	e00f      	b.n	8002b28 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b08:	f7fe fa50 	bl	8000fac <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d906      	bls.n	8002b28 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e122      	b.n	8002d64 <HAL_RCC_OscConfig+0x7bc>
 8002b1e:	bf00      	nop
 8002b20:	40021000 	.word	0x40021000
 8002b24:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b28:	4b90      	ldr	r3, [pc, #576]	; (8002d6c <HAL_RCC_OscConfig+0x7c4>)
 8002b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1e8      	bne.n	8002b08 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b36:	7ffb      	ldrb	r3, [r7, #31]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d105      	bne.n	8002b48 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b3c:	4b8b      	ldr	r3, [pc, #556]	; (8002d6c <HAL_RCC_OscConfig+0x7c4>)
 8002b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b40:	4a8a      	ldr	r2, [pc, #552]	; (8002d6c <HAL_RCC_OscConfig+0x7c4>)
 8002b42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b46:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f000 8108 	beq.w	8002d62 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	f040 80d0 	bne.w	8002cfc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002b5c:	4b83      	ldr	r3, [pc, #524]	; (8002d6c <HAL_RCC_OscConfig+0x7c4>)
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	f003 0203 	and.w	r2, r3, #3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d130      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d127      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b8c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d11f      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b9c:	2a07      	cmp	r2, #7
 8002b9e:	bf14      	ite	ne
 8002ba0:	2201      	movne	r2, #1
 8002ba2:	2200      	moveq	r2, #0
 8002ba4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d113      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb4:	085b      	lsrs	r3, r3, #1
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d109      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc8:	085b      	lsrs	r3, r3, #1
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d06e      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	2b0c      	cmp	r3, #12
 8002bd6:	d069      	beq.n	8002cac <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002bd8:	4b64      	ldr	r3, [pc, #400]	; (8002d6c <HAL_RCC_OscConfig+0x7c4>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d105      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002be4:	4b61      	ldr	r3, [pc, #388]	; (8002d6c <HAL_RCC_OscConfig+0x7c4>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d001      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e0b7      	b.n	8002d64 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002bf4:	4b5d      	ldr	r3, [pc, #372]	; (8002d6c <HAL_RCC_OscConfig+0x7c4>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a5c      	ldr	r2, [pc, #368]	; (8002d6c <HAL_RCC_OscConfig+0x7c4>)
 8002bfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bfe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c00:	f7fe f9d4 	bl	8000fac <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c06:	e008      	b.n	8002c1a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c08:	f7fe f9d0 	bl	8000fac <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e0a4      	b.n	8002d64 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c1a:	4b54      	ldr	r3, [pc, #336]	; (8002d6c <HAL_RCC_OscConfig+0x7c4>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d1f0      	bne.n	8002c08 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c26:	4b51      	ldr	r3, [pc, #324]	; (8002d6c <HAL_RCC_OscConfig+0x7c4>)
 8002c28:	68da      	ldr	r2, [r3, #12]
 8002c2a:	4b51      	ldr	r3, [pc, #324]	; (8002d70 <HAL_RCC_OscConfig+0x7c8>)
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002c36:	3a01      	subs	r2, #1
 8002c38:	0112      	lsls	r2, r2, #4
 8002c3a:	4311      	orrs	r1, r2
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c40:	0212      	lsls	r2, r2, #8
 8002c42:	4311      	orrs	r1, r2
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c48:	0852      	lsrs	r2, r2, #1
 8002c4a:	3a01      	subs	r2, #1
 8002c4c:	0552      	lsls	r2, r2, #21
 8002c4e:	4311      	orrs	r1, r2
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c54:	0852      	lsrs	r2, r2, #1
 8002c56:	3a01      	subs	r2, #1
 8002c58:	0652      	lsls	r2, r2, #25
 8002c5a:	4311      	orrs	r1, r2
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c60:	0912      	lsrs	r2, r2, #4
 8002c62:	0452      	lsls	r2, r2, #17
 8002c64:	430a      	orrs	r2, r1
 8002c66:	4941      	ldr	r1, [pc, #260]	; (8002d6c <HAL_RCC_OscConfig+0x7c4>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c6c:	4b3f      	ldr	r3, [pc, #252]	; (8002d6c <HAL_RCC_OscConfig+0x7c4>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a3e      	ldr	r2, [pc, #248]	; (8002d6c <HAL_RCC_OscConfig+0x7c4>)
 8002c72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c76:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c78:	4b3c      	ldr	r3, [pc, #240]	; (8002d6c <HAL_RCC_OscConfig+0x7c4>)
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	4a3b      	ldr	r2, [pc, #236]	; (8002d6c <HAL_RCC_OscConfig+0x7c4>)
 8002c7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c82:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c84:	f7fe f992 	bl	8000fac <HAL_GetTick>
 8002c88:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c8a:	e008      	b.n	8002c9e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c8c:	f7fe f98e 	bl	8000fac <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e062      	b.n	8002d64 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c9e:	4b33      	ldr	r3, [pc, #204]	; (8002d6c <HAL_RCC_OscConfig+0x7c4>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d0f0      	beq.n	8002c8c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002caa:	e05a      	b.n	8002d62 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e059      	b.n	8002d64 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cb0:	4b2e      	ldr	r3, [pc, #184]	; (8002d6c <HAL_RCC_OscConfig+0x7c4>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d152      	bne.n	8002d62 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002cbc:	4b2b      	ldr	r3, [pc, #172]	; (8002d6c <HAL_RCC_OscConfig+0x7c4>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a2a      	ldr	r2, [pc, #168]	; (8002d6c <HAL_RCC_OscConfig+0x7c4>)
 8002cc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cc6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cc8:	4b28      	ldr	r3, [pc, #160]	; (8002d6c <HAL_RCC_OscConfig+0x7c4>)
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	4a27      	ldr	r2, [pc, #156]	; (8002d6c <HAL_RCC_OscConfig+0x7c4>)
 8002cce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cd2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002cd4:	f7fe f96a 	bl	8000fac <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cda:	e008      	b.n	8002cee <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cdc:	f7fe f966 	bl	8000fac <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e03a      	b.n	8002d64 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cee:	4b1f      	ldr	r3, [pc, #124]	; (8002d6c <HAL_RCC_OscConfig+0x7c4>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d0f0      	beq.n	8002cdc <HAL_RCC_OscConfig+0x734>
 8002cfa:	e032      	b.n	8002d62 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	2b0c      	cmp	r3, #12
 8002d00:	d02d      	beq.n	8002d5e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d02:	4b1a      	ldr	r3, [pc, #104]	; (8002d6c <HAL_RCC_OscConfig+0x7c4>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a19      	ldr	r2, [pc, #100]	; (8002d6c <HAL_RCC_OscConfig+0x7c4>)
 8002d08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d0c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002d0e:	4b17      	ldr	r3, [pc, #92]	; (8002d6c <HAL_RCC_OscConfig+0x7c4>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d105      	bne.n	8002d26 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002d1a:	4b14      	ldr	r3, [pc, #80]	; (8002d6c <HAL_RCC_OscConfig+0x7c4>)
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	4a13      	ldr	r2, [pc, #76]	; (8002d6c <HAL_RCC_OscConfig+0x7c4>)
 8002d20:	f023 0303 	bic.w	r3, r3, #3
 8002d24:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002d26:	4b11      	ldr	r3, [pc, #68]	; (8002d6c <HAL_RCC_OscConfig+0x7c4>)
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	4a10      	ldr	r2, [pc, #64]	; (8002d6c <HAL_RCC_OscConfig+0x7c4>)
 8002d2c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002d30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d34:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d36:	f7fe f939 	bl	8000fac <HAL_GetTick>
 8002d3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d3c:	e008      	b.n	8002d50 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d3e:	f7fe f935 	bl	8000fac <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e009      	b.n	8002d64 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d50:	4b06      	ldr	r3, [pc, #24]	; (8002d6c <HAL_RCC_OscConfig+0x7c4>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d1f0      	bne.n	8002d3e <HAL_RCC_OscConfig+0x796>
 8002d5c:	e001      	b.n	8002d62 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e000      	b.n	8002d64 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3720      	adds	r7, #32
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	40021000 	.word	0x40021000
 8002d70:	f99d808c 	.word	0xf99d808c

08002d74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d101      	bne.n	8002d88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e0c8      	b.n	8002f1a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d88:	4b66      	ldr	r3, [pc, #408]	; (8002f24 <HAL_RCC_ClockConfig+0x1b0>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0307 	and.w	r3, r3, #7
 8002d90:	683a      	ldr	r2, [r7, #0]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d910      	bls.n	8002db8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d96:	4b63      	ldr	r3, [pc, #396]	; (8002f24 <HAL_RCC_ClockConfig+0x1b0>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f023 0207 	bic.w	r2, r3, #7
 8002d9e:	4961      	ldr	r1, [pc, #388]	; (8002f24 <HAL_RCC_ClockConfig+0x1b0>)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002da6:	4b5f      	ldr	r3, [pc, #380]	; (8002f24 <HAL_RCC_ClockConfig+0x1b0>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0307 	and.w	r3, r3, #7
 8002dae:	683a      	ldr	r2, [r7, #0]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d001      	beq.n	8002db8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e0b0      	b.n	8002f1a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0301 	and.w	r3, r3, #1
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d04c      	beq.n	8002e5e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	2b03      	cmp	r3, #3
 8002dca:	d107      	bne.n	8002ddc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dcc:	4b56      	ldr	r3, [pc, #344]	; (8002f28 <HAL_RCC_ClockConfig+0x1b4>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d121      	bne.n	8002e1c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e09e      	b.n	8002f1a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d107      	bne.n	8002df4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002de4:	4b50      	ldr	r3, [pc, #320]	; (8002f28 <HAL_RCC_ClockConfig+0x1b4>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d115      	bne.n	8002e1c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e092      	b.n	8002f1a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d107      	bne.n	8002e0c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002dfc:	4b4a      	ldr	r3, [pc, #296]	; (8002f28 <HAL_RCC_ClockConfig+0x1b4>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d109      	bne.n	8002e1c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e086      	b.n	8002f1a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e0c:	4b46      	ldr	r3, [pc, #280]	; (8002f28 <HAL_RCC_ClockConfig+0x1b4>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d101      	bne.n	8002e1c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e07e      	b.n	8002f1a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e1c:	4b42      	ldr	r3, [pc, #264]	; (8002f28 <HAL_RCC_ClockConfig+0x1b4>)
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f023 0203 	bic.w	r2, r3, #3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	493f      	ldr	r1, [pc, #252]	; (8002f28 <HAL_RCC_ClockConfig+0x1b4>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e2e:	f7fe f8bd 	bl	8000fac <HAL_GetTick>
 8002e32:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e34:	e00a      	b.n	8002e4c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e36:	f7fe f8b9 	bl	8000fac <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d901      	bls.n	8002e4c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e066      	b.n	8002f1a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e4c:	4b36      	ldr	r3, [pc, #216]	; (8002f28 <HAL_RCC_ClockConfig+0x1b4>)
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f003 020c 	and.w	r2, r3, #12
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d1eb      	bne.n	8002e36 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d008      	beq.n	8002e7c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e6a:	4b2f      	ldr	r3, [pc, #188]	; (8002f28 <HAL_RCC_ClockConfig+0x1b4>)
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	492c      	ldr	r1, [pc, #176]	; (8002f28 <HAL_RCC_ClockConfig+0x1b4>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e7c:	4b29      	ldr	r3, [pc, #164]	; (8002f24 <HAL_RCC_ClockConfig+0x1b0>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0307 	and.w	r3, r3, #7
 8002e84:	683a      	ldr	r2, [r7, #0]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d210      	bcs.n	8002eac <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e8a:	4b26      	ldr	r3, [pc, #152]	; (8002f24 <HAL_RCC_ClockConfig+0x1b0>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f023 0207 	bic.w	r2, r3, #7
 8002e92:	4924      	ldr	r1, [pc, #144]	; (8002f24 <HAL_RCC_ClockConfig+0x1b0>)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e9a:	4b22      	ldr	r3, [pc, #136]	; (8002f24 <HAL_RCC_ClockConfig+0x1b0>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0307 	and.w	r3, r3, #7
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d001      	beq.n	8002eac <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e036      	b.n	8002f1a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0304 	and.w	r3, r3, #4
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d008      	beq.n	8002eca <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002eb8:	4b1b      	ldr	r3, [pc, #108]	; (8002f28 <HAL_RCC_ClockConfig+0x1b4>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	4918      	ldr	r1, [pc, #96]	; (8002f28 <HAL_RCC_ClockConfig+0x1b4>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0308 	and.w	r3, r3, #8
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d009      	beq.n	8002eea <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ed6:	4b14      	ldr	r3, [pc, #80]	; (8002f28 <HAL_RCC_ClockConfig+0x1b4>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	4910      	ldr	r1, [pc, #64]	; (8002f28 <HAL_RCC_ClockConfig+0x1b4>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002eea:	f000 f825 	bl	8002f38 <HAL_RCC_GetSysClockFreq>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	4b0d      	ldr	r3, [pc, #52]	; (8002f28 <HAL_RCC_ClockConfig+0x1b4>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	091b      	lsrs	r3, r3, #4
 8002ef6:	f003 030f 	and.w	r3, r3, #15
 8002efa:	490c      	ldr	r1, [pc, #48]	; (8002f2c <HAL_RCC_ClockConfig+0x1b8>)
 8002efc:	5ccb      	ldrb	r3, [r1, r3]
 8002efe:	f003 031f 	and.w	r3, r3, #31
 8002f02:	fa22 f303 	lsr.w	r3, r2, r3
 8002f06:	4a0a      	ldr	r2, [pc, #40]	; (8002f30 <HAL_RCC_ClockConfig+0x1bc>)
 8002f08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f0a:	4b0a      	ldr	r3, [pc, #40]	; (8002f34 <HAL_RCC_ClockConfig+0x1c0>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7fd fffc 	bl	8000f0c <HAL_InitTick>
 8002f14:	4603      	mov	r3, r0
 8002f16:	72fb      	strb	r3, [r7, #11]

  return status;
 8002f18:	7afb      	ldrb	r3, [r7, #11]
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3710      	adds	r7, #16
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	40022000 	.word	0x40022000
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	08005884 	.word	0x08005884
 8002f30:	20000000 	.word	0x20000000
 8002f34:	20000004 	.word	0x20000004

08002f38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b089      	sub	sp, #36	; 0x24
 8002f3c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	61fb      	str	r3, [r7, #28]
 8002f42:	2300      	movs	r3, #0
 8002f44:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f46:	4b3e      	ldr	r3, [pc, #248]	; (8003040 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f003 030c 	and.w	r3, r3, #12
 8002f4e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f50:	4b3b      	ldr	r3, [pc, #236]	; (8003040 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	f003 0303 	and.w	r3, r3, #3
 8002f58:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d005      	beq.n	8002f6c <HAL_RCC_GetSysClockFreq+0x34>
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	2b0c      	cmp	r3, #12
 8002f64:	d121      	bne.n	8002faa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d11e      	bne.n	8002faa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002f6c:	4b34      	ldr	r3, [pc, #208]	; (8003040 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0308 	and.w	r3, r3, #8
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d107      	bne.n	8002f88 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f78:	4b31      	ldr	r3, [pc, #196]	; (8003040 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f7e:	0a1b      	lsrs	r3, r3, #8
 8002f80:	f003 030f 	and.w	r3, r3, #15
 8002f84:	61fb      	str	r3, [r7, #28]
 8002f86:	e005      	b.n	8002f94 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f88:	4b2d      	ldr	r3, [pc, #180]	; (8003040 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	091b      	lsrs	r3, r3, #4
 8002f8e:	f003 030f 	and.w	r3, r3, #15
 8002f92:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f94:	4a2b      	ldr	r2, [pc, #172]	; (8003044 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f9c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d10d      	bne.n	8002fc0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fa8:	e00a      	b.n	8002fc0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	2b04      	cmp	r3, #4
 8002fae:	d102      	bne.n	8002fb6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002fb0:	4b25      	ldr	r3, [pc, #148]	; (8003048 <HAL_RCC_GetSysClockFreq+0x110>)
 8002fb2:	61bb      	str	r3, [r7, #24]
 8002fb4:	e004      	b.n	8002fc0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	2b08      	cmp	r3, #8
 8002fba:	d101      	bne.n	8002fc0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002fbc:	4b23      	ldr	r3, [pc, #140]	; (800304c <HAL_RCC_GetSysClockFreq+0x114>)
 8002fbe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	2b0c      	cmp	r3, #12
 8002fc4:	d134      	bne.n	8003030 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002fc6:	4b1e      	ldr	r3, [pc, #120]	; (8003040 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	f003 0303 	and.w	r3, r3, #3
 8002fce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d003      	beq.n	8002fde <HAL_RCC_GetSysClockFreq+0xa6>
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	2b03      	cmp	r3, #3
 8002fda:	d003      	beq.n	8002fe4 <HAL_RCC_GetSysClockFreq+0xac>
 8002fdc:	e005      	b.n	8002fea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002fde:	4b1a      	ldr	r3, [pc, #104]	; (8003048 <HAL_RCC_GetSysClockFreq+0x110>)
 8002fe0:	617b      	str	r3, [r7, #20]
      break;
 8002fe2:	e005      	b.n	8002ff0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002fe4:	4b19      	ldr	r3, [pc, #100]	; (800304c <HAL_RCC_GetSysClockFreq+0x114>)
 8002fe6:	617b      	str	r3, [r7, #20]
      break;
 8002fe8:	e002      	b.n	8002ff0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	617b      	str	r3, [r7, #20]
      break;
 8002fee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ff0:	4b13      	ldr	r3, [pc, #76]	; (8003040 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	091b      	lsrs	r3, r3, #4
 8002ff6:	f003 0307 	and.w	r3, r3, #7
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ffe:	4b10      	ldr	r3, [pc, #64]	; (8003040 <HAL_RCC_GetSysClockFreq+0x108>)
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	0a1b      	lsrs	r3, r3, #8
 8003004:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003008:	697a      	ldr	r2, [r7, #20]
 800300a:	fb02 f203 	mul.w	r2, r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	fbb2 f3f3 	udiv	r3, r2, r3
 8003014:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003016:	4b0a      	ldr	r3, [pc, #40]	; (8003040 <HAL_RCC_GetSysClockFreq+0x108>)
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	0e5b      	lsrs	r3, r3, #25
 800301c:	f003 0303 	and.w	r3, r3, #3
 8003020:	3301      	adds	r3, #1
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003026:	697a      	ldr	r2, [r7, #20]
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	fbb2 f3f3 	udiv	r3, r2, r3
 800302e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003030:	69bb      	ldr	r3, [r7, #24]
}
 8003032:	4618      	mov	r0, r3
 8003034:	3724      	adds	r7, #36	; 0x24
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	40021000 	.word	0x40021000
 8003044:	0800589c 	.word	0x0800589c
 8003048:	00f42400 	.word	0x00f42400
 800304c:	007a1200 	.word	0x007a1200

08003050 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003054:	4b03      	ldr	r3, [pc, #12]	; (8003064 <HAL_RCC_GetHCLKFreq+0x14>)
 8003056:	681b      	ldr	r3, [r3, #0]
}
 8003058:	4618      	mov	r0, r3
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	20000000 	.word	0x20000000

08003068 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800306c:	f7ff fff0 	bl	8003050 <HAL_RCC_GetHCLKFreq>
 8003070:	4602      	mov	r2, r0
 8003072:	4b06      	ldr	r3, [pc, #24]	; (800308c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	0a1b      	lsrs	r3, r3, #8
 8003078:	f003 0307 	and.w	r3, r3, #7
 800307c:	4904      	ldr	r1, [pc, #16]	; (8003090 <HAL_RCC_GetPCLK1Freq+0x28>)
 800307e:	5ccb      	ldrb	r3, [r1, r3]
 8003080:	f003 031f 	and.w	r3, r3, #31
 8003084:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003088:	4618      	mov	r0, r3
 800308a:	bd80      	pop	{r7, pc}
 800308c:	40021000 	.word	0x40021000
 8003090:	08005894 	.word	0x08005894

08003094 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003098:	f7ff ffda 	bl	8003050 <HAL_RCC_GetHCLKFreq>
 800309c:	4602      	mov	r2, r0
 800309e:	4b06      	ldr	r3, [pc, #24]	; (80030b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	0adb      	lsrs	r3, r3, #11
 80030a4:	f003 0307 	and.w	r3, r3, #7
 80030a8:	4904      	ldr	r1, [pc, #16]	; (80030bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80030aa:	5ccb      	ldrb	r3, [r1, r3]
 80030ac:	f003 031f 	and.w	r3, r3, #31
 80030b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	40021000 	.word	0x40021000
 80030bc:	08005894 	.word	0x08005894

080030c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b086      	sub	sp, #24
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80030c8:	2300      	movs	r3, #0
 80030ca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80030cc:	4b2a      	ldr	r3, [pc, #168]	; (8003178 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d003      	beq.n	80030e0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80030d8:	f7ff fa02 	bl	80024e0 <HAL_PWREx_GetVoltageRange>
 80030dc:	6178      	str	r0, [r7, #20]
 80030de:	e014      	b.n	800310a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80030e0:	4b25      	ldr	r3, [pc, #148]	; (8003178 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e4:	4a24      	ldr	r2, [pc, #144]	; (8003178 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ea:	6593      	str	r3, [r2, #88]	; 0x58
 80030ec:	4b22      	ldr	r3, [pc, #136]	; (8003178 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f4:	60fb      	str	r3, [r7, #12]
 80030f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80030f8:	f7ff f9f2 	bl	80024e0 <HAL_PWREx_GetVoltageRange>
 80030fc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80030fe:	4b1e      	ldr	r3, [pc, #120]	; (8003178 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003102:	4a1d      	ldr	r2, [pc, #116]	; (8003178 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003104:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003108:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003110:	d10b      	bne.n	800312a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2b80      	cmp	r3, #128	; 0x80
 8003116:	d919      	bls.n	800314c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2ba0      	cmp	r3, #160	; 0xa0
 800311c:	d902      	bls.n	8003124 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800311e:	2302      	movs	r3, #2
 8003120:	613b      	str	r3, [r7, #16]
 8003122:	e013      	b.n	800314c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003124:	2301      	movs	r3, #1
 8003126:	613b      	str	r3, [r7, #16]
 8003128:	e010      	b.n	800314c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2b80      	cmp	r3, #128	; 0x80
 800312e:	d902      	bls.n	8003136 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003130:	2303      	movs	r3, #3
 8003132:	613b      	str	r3, [r7, #16]
 8003134:	e00a      	b.n	800314c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2b80      	cmp	r3, #128	; 0x80
 800313a:	d102      	bne.n	8003142 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800313c:	2302      	movs	r3, #2
 800313e:	613b      	str	r3, [r7, #16]
 8003140:	e004      	b.n	800314c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2b70      	cmp	r3, #112	; 0x70
 8003146:	d101      	bne.n	800314c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003148:	2301      	movs	r3, #1
 800314a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800314c:	4b0b      	ldr	r3, [pc, #44]	; (800317c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f023 0207 	bic.w	r2, r3, #7
 8003154:	4909      	ldr	r1, [pc, #36]	; (800317c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	4313      	orrs	r3, r2
 800315a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800315c:	4b07      	ldr	r3, [pc, #28]	; (800317c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0307 	and.w	r3, r3, #7
 8003164:	693a      	ldr	r2, [r7, #16]
 8003166:	429a      	cmp	r2, r3
 8003168:	d001      	beq.n	800316e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e000      	b.n	8003170 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	3718      	adds	r7, #24
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	40021000 	.word	0x40021000
 800317c:	40022000 	.word	0x40022000

08003180 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003188:	2300      	movs	r3, #0
 800318a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800318c:	2300      	movs	r3, #0
 800318e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003198:	2b00      	cmp	r3, #0
 800319a:	d041      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031a0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80031a4:	d02a      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80031a6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80031aa:	d824      	bhi.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80031ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80031b0:	d008      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80031b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80031b6:	d81e      	bhi.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00a      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80031bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031c0:	d010      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80031c2:	e018      	b.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80031c4:	4b86      	ldr	r3, [pc, #536]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	4a85      	ldr	r2, [pc, #532]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031ce:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031d0:	e015      	b.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	3304      	adds	r3, #4
 80031d6:	2100      	movs	r1, #0
 80031d8:	4618      	mov	r0, r3
 80031da:	f000 fabb 	bl	8003754 <RCCEx_PLLSAI1_Config>
 80031de:	4603      	mov	r3, r0
 80031e0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031e2:	e00c      	b.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	3320      	adds	r3, #32
 80031e8:	2100      	movs	r1, #0
 80031ea:	4618      	mov	r0, r3
 80031ec:	f000 fba6 	bl	800393c <RCCEx_PLLSAI2_Config>
 80031f0:	4603      	mov	r3, r0
 80031f2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031f4:	e003      	b.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	74fb      	strb	r3, [r7, #19]
      break;
 80031fa:	e000      	b.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80031fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031fe:	7cfb      	ldrb	r3, [r7, #19]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d10b      	bne.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003204:	4b76      	ldr	r3, [pc, #472]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800320a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003212:	4973      	ldr	r1, [pc, #460]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003214:	4313      	orrs	r3, r2
 8003216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800321a:	e001      	b.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800321c:	7cfb      	ldrb	r3, [r7, #19]
 800321e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d041      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003230:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003234:	d02a      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003236:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800323a:	d824      	bhi.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800323c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003240:	d008      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003242:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003246:	d81e      	bhi.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003248:	2b00      	cmp	r3, #0
 800324a:	d00a      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800324c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003250:	d010      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003252:	e018      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003254:	4b62      	ldr	r3, [pc, #392]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	4a61      	ldr	r2, [pc, #388]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800325a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800325e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003260:	e015      	b.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	3304      	adds	r3, #4
 8003266:	2100      	movs	r1, #0
 8003268:	4618      	mov	r0, r3
 800326a:	f000 fa73 	bl	8003754 <RCCEx_PLLSAI1_Config>
 800326e:	4603      	mov	r3, r0
 8003270:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003272:	e00c      	b.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	3320      	adds	r3, #32
 8003278:	2100      	movs	r1, #0
 800327a:	4618      	mov	r0, r3
 800327c:	f000 fb5e 	bl	800393c <RCCEx_PLLSAI2_Config>
 8003280:	4603      	mov	r3, r0
 8003282:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003284:	e003      	b.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	74fb      	strb	r3, [r7, #19]
      break;
 800328a:	e000      	b.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800328c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800328e:	7cfb      	ldrb	r3, [r7, #19]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d10b      	bne.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003294:	4b52      	ldr	r3, [pc, #328]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800329a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032a2:	494f      	ldr	r1, [pc, #316]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80032aa:	e001      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ac:	7cfb      	ldrb	r3, [r7, #19]
 80032ae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	f000 80a0 	beq.w	80033fe <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032be:	2300      	movs	r3, #0
 80032c0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80032c2:	4b47      	ldr	r3, [pc, #284]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80032ce:	2301      	movs	r3, #1
 80032d0:	e000      	b.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80032d2:	2300      	movs	r3, #0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d00d      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032d8:	4b41      	ldr	r3, [pc, #260]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032dc:	4a40      	ldr	r2, [pc, #256]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032e2:	6593      	str	r3, [r2, #88]	; 0x58
 80032e4:	4b3e      	ldr	r3, [pc, #248]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ec:	60bb      	str	r3, [r7, #8]
 80032ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032f0:	2301      	movs	r3, #1
 80032f2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032f4:	4b3b      	ldr	r3, [pc, #236]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a3a      	ldr	r2, [pc, #232]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003300:	f7fd fe54 	bl	8000fac <HAL_GetTick>
 8003304:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003306:	e009      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003308:	f7fd fe50 	bl	8000fac <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	2b02      	cmp	r3, #2
 8003314:	d902      	bls.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	74fb      	strb	r3, [r7, #19]
        break;
 800331a:	e005      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800331c:	4b31      	ldr	r3, [pc, #196]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003324:	2b00      	cmp	r3, #0
 8003326:	d0ef      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003328:	7cfb      	ldrb	r3, [r7, #19]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d15c      	bne.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800332e:	4b2c      	ldr	r3, [pc, #176]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003334:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003338:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d01f      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	429a      	cmp	r2, r3
 800334a:	d019      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800334c:	4b24      	ldr	r3, [pc, #144]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800334e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003352:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003356:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003358:	4b21      	ldr	r3, [pc, #132]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800335a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800335e:	4a20      	ldr	r2, [pc, #128]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003364:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003368:	4b1d      	ldr	r3, [pc, #116]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800336a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800336e:	4a1c      	ldr	r2, [pc, #112]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003370:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003374:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003378:	4a19      	ldr	r2, [pc, #100]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b00      	cmp	r3, #0
 8003388:	d016      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800338a:	f7fd fe0f 	bl	8000fac <HAL_GetTick>
 800338e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003390:	e00b      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003392:	f7fd fe0b 	bl	8000fac <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	f241 3288 	movw	r2, #5000	; 0x1388
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d902      	bls.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	74fb      	strb	r3, [r7, #19]
            break;
 80033a8:	e006      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033aa:	4b0d      	ldr	r3, [pc, #52]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b0:	f003 0302 	and.w	r3, r3, #2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d0ec      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80033b8:	7cfb      	ldrb	r3, [r7, #19]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10c      	bne.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033be:	4b08      	ldr	r3, [pc, #32]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033ce:	4904      	ldr	r1, [pc, #16]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80033d6:	e009      	b.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80033d8:	7cfb      	ldrb	r3, [r7, #19]
 80033da:	74bb      	strb	r3, [r7, #18]
 80033dc:	e006      	b.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80033de:	bf00      	nop
 80033e0:	40021000 	.word	0x40021000
 80033e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033e8:	7cfb      	ldrb	r3, [r7, #19]
 80033ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033ec:	7c7b      	ldrb	r3, [r7, #17]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d105      	bne.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033f2:	4b9e      	ldr	r3, [pc, #632]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f6:	4a9d      	ldr	r2, [pc, #628]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033fc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0301 	and.w	r3, r3, #1
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00a      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800340a:	4b98      	ldr	r3, [pc, #608]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800340c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003410:	f023 0203 	bic.w	r2, r3, #3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003418:	4994      	ldr	r1, [pc, #592]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800341a:	4313      	orrs	r3, r2
 800341c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d00a      	beq.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800342c:	4b8f      	ldr	r3, [pc, #572]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800342e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003432:	f023 020c 	bic.w	r2, r3, #12
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800343a:	498c      	ldr	r1, [pc, #560]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800343c:	4313      	orrs	r3, r2
 800343e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0304 	and.w	r3, r3, #4
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00a      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800344e:	4b87      	ldr	r3, [pc, #540]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003454:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345c:	4983      	ldr	r1, [pc, #524]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800345e:	4313      	orrs	r3, r2
 8003460:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0308 	and.w	r3, r3, #8
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00a      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003470:	4b7e      	ldr	r3, [pc, #504]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003476:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347e:	497b      	ldr	r1, [pc, #492]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003480:	4313      	orrs	r3, r2
 8003482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0310 	and.w	r3, r3, #16
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00a      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003492:	4b76      	ldr	r3, [pc, #472]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003498:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034a0:	4972      	ldr	r1, [pc, #456]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0320 	and.w	r3, r3, #32
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d00a      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034b4:	4b6d      	ldr	r3, [pc, #436]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034c2:	496a      	ldr	r1, [pc, #424]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00a      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034d6:	4b65      	ldr	r3, [pc, #404]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e4:	4961      	ldr	r1, [pc, #388]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00a      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80034f8:	4b5c      	ldr	r3, [pc, #368]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003506:	4959      	ldr	r1, [pc, #356]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003508:	4313      	orrs	r3, r2
 800350a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00a      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800351a:	4b54      	ldr	r3, [pc, #336]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800351c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003520:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003528:	4950      	ldr	r1, [pc, #320]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800352a:	4313      	orrs	r3, r2
 800352c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00a      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800353c:	4b4b      	ldr	r3, [pc, #300]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800353e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003542:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800354a:	4948      	ldr	r1, [pc, #288]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800354c:	4313      	orrs	r3, r2
 800354e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00a      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800355e:	4b43      	ldr	r3, [pc, #268]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003564:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800356c:	493f      	ldr	r1, [pc, #252]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800356e:	4313      	orrs	r3, r2
 8003570:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d028      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003580:	4b3a      	ldr	r3, [pc, #232]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003586:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800358e:	4937      	ldr	r1, [pc, #220]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003590:	4313      	orrs	r3, r2
 8003592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800359a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800359e:	d106      	bne.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035a0:	4b32      	ldr	r3, [pc, #200]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	4a31      	ldr	r2, [pc, #196]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035aa:	60d3      	str	r3, [r2, #12]
 80035ac:	e011      	b.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035b6:	d10c      	bne.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	3304      	adds	r3, #4
 80035bc:	2101      	movs	r1, #1
 80035be:	4618      	mov	r0, r3
 80035c0:	f000 f8c8 	bl	8003754 <RCCEx_PLLSAI1_Config>
 80035c4:	4603      	mov	r3, r0
 80035c6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80035c8:	7cfb      	ldrb	r3, [r7, #19]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80035ce:	7cfb      	ldrb	r3, [r7, #19]
 80035d0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d028      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80035de:	4b23      	ldr	r3, [pc, #140]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ec:	491f      	ldr	r1, [pc, #124]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035fc:	d106      	bne.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035fe:	4b1b      	ldr	r3, [pc, #108]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	4a1a      	ldr	r2, [pc, #104]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003604:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003608:	60d3      	str	r3, [r2, #12]
 800360a:	e011      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003610:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003614:	d10c      	bne.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	3304      	adds	r3, #4
 800361a:	2101      	movs	r1, #1
 800361c:	4618      	mov	r0, r3
 800361e:	f000 f899 	bl	8003754 <RCCEx_PLLSAI1_Config>
 8003622:	4603      	mov	r3, r0
 8003624:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003626:	7cfb      	ldrb	r3, [r7, #19]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d001      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800362c:	7cfb      	ldrb	r3, [r7, #19]
 800362e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d02b      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800363c:	4b0b      	ldr	r3, [pc, #44]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800363e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003642:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800364a:	4908      	ldr	r1, [pc, #32]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800364c:	4313      	orrs	r3, r2
 800364e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003656:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800365a:	d109      	bne.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800365c:	4b03      	ldr	r3, [pc, #12]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	4a02      	ldr	r2, [pc, #8]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003662:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003666:	60d3      	str	r3, [r2, #12]
 8003668:	e014      	b.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800366a:	bf00      	nop
 800366c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003674:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003678:	d10c      	bne.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	3304      	adds	r3, #4
 800367e:	2101      	movs	r1, #1
 8003680:	4618      	mov	r0, r3
 8003682:	f000 f867 	bl	8003754 <RCCEx_PLLSAI1_Config>
 8003686:	4603      	mov	r3, r0
 8003688:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800368a:	7cfb      	ldrb	r3, [r7, #19]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d001      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003690:	7cfb      	ldrb	r3, [r7, #19]
 8003692:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d02f      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036a0:	4b2b      	ldr	r3, [pc, #172]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036ae:	4928      	ldr	r1, [pc, #160]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036be:	d10d      	bne.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	3304      	adds	r3, #4
 80036c4:	2102      	movs	r1, #2
 80036c6:	4618      	mov	r0, r3
 80036c8:	f000 f844 	bl	8003754 <RCCEx_PLLSAI1_Config>
 80036cc:	4603      	mov	r3, r0
 80036ce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036d0:	7cfb      	ldrb	r3, [r7, #19]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d014      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80036d6:	7cfb      	ldrb	r3, [r7, #19]
 80036d8:	74bb      	strb	r3, [r7, #18]
 80036da:	e011      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036e4:	d10c      	bne.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	3320      	adds	r3, #32
 80036ea:	2102      	movs	r1, #2
 80036ec:	4618      	mov	r0, r3
 80036ee:	f000 f925 	bl	800393c <RCCEx_PLLSAI2_Config>
 80036f2:	4603      	mov	r3, r0
 80036f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036f6:	7cfb      	ldrb	r3, [r7, #19]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d001      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80036fc:	7cfb      	ldrb	r3, [r7, #19]
 80036fe:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00a      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800370c:	4b10      	ldr	r3, [pc, #64]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800370e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003712:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800371a:	490d      	ldr	r1, [pc, #52]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800371c:	4313      	orrs	r3, r2
 800371e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00b      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800372e:	4b08      	ldr	r3, [pc, #32]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003734:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800373e:	4904      	ldr	r1, [pc, #16]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003740:	4313      	orrs	r3, r2
 8003742:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003746:	7cbb      	ldrb	r3, [r7, #18]
}
 8003748:	4618      	mov	r0, r3
 800374a:	3718      	adds	r7, #24
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	40021000 	.word	0x40021000

08003754 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800375e:	2300      	movs	r3, #0
 8003760:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003762:	4b75      	ldr	r3, [pc, #468]	; (8003938 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	f003 0303 	and.w	r3, r3, #3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d018      	beq.n	80037a0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800376e:	4b72      	ldr	r3, [pc, #456]	; (8003938 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	f003 0203 	and.w	r2, r3, #3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	429a      	cmp	r2, r3
 800377c:	d10d      	bne.n	800379a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
       ||
 8003782:	2b00      	cmp	r3, #0
 8003784:	d009      	beq.n	800379a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003786:	4b6c      	ldr	r3, [pc, #432]	; (8003938 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	091b      	lsrs	r3, r3, #4
 800378c:	f003 0307 	and.w	r3, r3, #7
 8003790:	1c5a      	adds	r2, r3, #1
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
       ||
 8003796:	429a      	cmp	r2, r3
 8003798:	d047      	beq.n	800382a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	73fb      	strb	r3, [r7, #15]
 800379e:	e044      	b.n	800382a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2b03      	cmp	r3, #3
 80037a6:	d018      	beq.n	80037da <RCCEx_PLLSAI1_Config+0x86>
 80037a8:	2b03      	cmp	r3, #3
 80037aa:	d825      	bhi.n	80037f8 <RCCEx_PLLSAI1_Config+0xa4>
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d002      	beq.n	80037b6 <RCCEx_PLLSAI1_Config+0x62>
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d009      	beq.n	80037c8 <RCCEx_PLLSAI1_Config+0x74>
 80037b4:	e020      	b.n	80037f8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037b6:	4b60      	ldr	r3, [pc, #384]	; (8003938 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d11d      	bne.n	80037fe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037c6:	e01a      	b.n	80037fe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80037c8:	4b5b      	ldr	r3, [pc, #364]	; (8003938 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d116      	bne.n	8003802 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037d8:	e013      	b.n	8003802 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80037da:	4b57      	ldr	r3, [pc, #348]	; (8003938 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d10f      	bne.n	8003806 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80037e6:	4b54      	ldr	r3, [pc, #336]	; (8003938 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d109      	bne.n	8003806 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80037f6:	e006      	b.n	8003806 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	73fb      	strb	r3, [r7, #15]
      break;
 80037fc:	e004      	b.n	8003808 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037fe:	bf00      	nop
 8003800:	e002      	b.n	8003808 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003802:	bf00      	nop
 8003804:	e000      	b.n	8003808 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003806:	bf00      	nop
    }

    if(status == HAL_OK)
 8003808:	7bfb      	ldrb	r3, [r7, #15]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d10d      	bne.n	800382a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800380e:	4b4a      	ldr	r3, [pc, #296]	; (8003938 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6819      	ldr	r1, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	3b01      	subs	r3, #1
 8003820:	011b      	lsls	r3, r3, #4
 8003822:	430b      	orrs	r3, r1
 8003824:	4944      	ldr	r1, [pc, #272]	; (8003938 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003826:	4313      	orrs	r3, r2
 8003828:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800382a:	7bfb      	ldrb	r3, [r7, #15]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d17d      	bne.n	800392c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003830:	4b41      	ldr	r3, [pc, #260]	; (8003938 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a40      	ldr	r2, [pc, #256]	; (8003938 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003836:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800383a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800383c:	f7fd fbb6 	bl	8000fac <HAL_GetTick>
 8003840:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003842:	e009      	b.n	8003858 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003844:	f7fd fbb2 	bl	8000fac <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d902      	bls.n	8003858 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	73fb      	strb	r3, [r7, #15]
        break;
 8003856:	e005      	b.n	8003864 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003858:	4b37      	ldr	r3, [pc, #220]	; (8003938 <RCCEx_PLLSAI1_Config+0x1e4>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d1ef      	bne.n	8003844 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003864:	7bfb      	ldrb	r3, [r7, #15]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d160      	bne.n	800392c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d111      	bne.n	8003894 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003870:	4b31      	ldr	r3, [pc, #196]	; (8003938 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003878:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	6892      	ldr	r2, [r2, #8]
 8003880:	0211      	lsls	r1, r2, #8
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	68d2      	ldr	r2, [r2, #12]
 8003886:	0912      	lsrs	r2, r2, #4
 8003888:	0452      	lsls	r2, r2, #17
 800388a:	430a      	orrs	r2, r1
 800388c:	492a      	ldr	r1, [pc, #168]	; (8003938 <RCCEx_PLLSAI1_Config+0x1e4>)
 800388e:	4313      	orrs	r3, r2
 8003890:	610b      	str	r3, [r1, #16]
 8003892:	e027      	b.n	80038e4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d112      	bne.n	80038c0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800389a:	4b27      	ldr	r3, [pc, #156]	; (8003938 <RCCEx_PLLSAI1_Config+0x1e4>)
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80038a2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	6892      	ldr	r2, [r2, #8]
 80038aa:	0211      	lsls	r1, r2, #8
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	6912      	ldr	r2, [r2, #16]
 80038b0:	0852      	lsrs	r2, r2, #1
 80038b2:	3a01      	subs	r2, #1
 80038b4:	0552      	lsls	r2, r2, #21
 80038b6:	430a      	orrs	r2, r1
 80038b8:	491f      	ldr	r1, [pc, #124]	; (8003938 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	610b      	str	r3, [r1, #16]
 80038be:	e011      	b.n	80038e4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038c0:	4b1d      	ldr	r3, [pc, #116]	; (8003938 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80038c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	6892      	ldr	r2, [r2, #8]
 80038d0:	0211      	lsls	r1, r2, #8
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	6952      	ldr	r2, [r2, #20]
 80038d6:	0852      	lsrs	r2, r2, #1
 80038d8:	3a01      	subs	r2, #1
 80038da:	0652      	lsls	r2, r2, #25
 80038dc:	430a      	orrs	r2, r1
 80038de:	4916      	ldr	r1, [pc, #88]	; (8003938 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80038e4:	4b14      	ldr	r3, [pc, #80]	; (8003938 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a13      	ldr	r2, [pc, #76]	; (8003938 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80038ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f0:	f7fd fb5c 	bl	8000fac <HAL_GetTick>
 80038f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038f6:	e009      	b.n	800390c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038f8:	f7fd fb58 	bl	8000fac <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b02      	cmp	r3, #2
 8003904:	d902      	bls.n	800390c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	73fb      	strb	r3, [r7, #15]
          break;
 800390a:	e005      	b.n	8003918 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800390c:	4b0a      	ldr	r3, [pc, #40]	; (8003938 <RCCEx_PLLSAI1_Config+0x1e4>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d0ef      	beq.n	80038f8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003918:	7bfb      	ldrb	r3, [r7, #15]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d106      	bne.n	800392c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800391e:	4b06      	ldr	r3, [pc, #24]	; (8003938 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003920:	691a      	ldr	r2, [r3, #16]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	4904      	ldr	r1, [pc, #16]	; (8003938 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003928:	4313      	orrs	r3, r2
 800392a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800392c:	7bfb      	ldrb	r3, [r7, #15]
}
 800392e:	4618      	mov	r0, r3
 8003930:	3710      	adds	r7, #16
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	40021000 	.word	0x40021000

0800393c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003946:	2300      	movs	r3, #0
 8003948:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800394a:	4b6a      	ldr	r3, [pc, #424]	; (8003af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	f003 0303 	and.w	r3, r3, #3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d018      	beq.n	8003988 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003956:	4b67      	ldr	r3, [pc, #412]	; (8003af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	f003 0203 	and.w	r2, r3, #3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	429a      	cmp	r2, r3
 8003964:	d10d      	bne.n	8003982 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
       ||
 800396a:	2b00      	cmp	r3, #0
 800396c:	d009      	beq.n	8003982 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800396e:	4b61      	ldr	r3, [pc, #388]	; (8003af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	091b      	lsrs	r3, r3, #4
 8003974:	f003 0307 	and.w	r3, r3, #7
 8003978:	1c5a      	adds	r2, r3, #1
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
       ||
 800397e:	429a      	cmp	r2, r3
 8003980:	d047      	beq.n	8003a12 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	73fb      	strb	r3, [r7, #15]
 8003986:	e044      	b.n	8003a12 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2b03      	cmp	r3, #3
 800398e:	d018      	beq.n	80039c2 <RCCEx_PLLSAI2_Config+0x86>
 8003990:	2b03      	cmp	r3, #3
 8003992:	d825      	bhi.n	80039e0 <RCCEx_PLLSAI2_Config+0xa4>
 8003994:	2b01      	cmp	r3, #1
 8003996:	d002      	beq.n	800399e <RCCEx_PLLSAI2_Config+0x62>
 8003998:	2b02      	cmp	r3, #2
 800399a:	d009      	beq.n	80039b0 <RCCEx_PLLSAI2_Config+0x74>
 800399c:	e020      	b.n	80039e0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800399e:	4b55      	ldr	r3, [pc, #340]	; (8003af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d11d      	bne.n	80039e6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039ae:	e01a      	b.n	80039e6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80039b0:	4b50      	ldr	r3, [pc, #320]	; (8003af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d116      	bne.n	80039ea <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039c0:	e013      	b.n	80039ea <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80039c2:	4b4c      	ldr	r3, [pc, #304]	; (8003af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d10f      	bne.n	80039ee <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80039ce:	4b49      	ldr	r3, [pc, #292]	; (8003af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d109      	bne.n	80039ee <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80039de:	e006      	b.n	80039ee <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	73fb      	strb	r3, [r7, #15]
      break;
 80039e4:	e004      	b.n	80039f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80039e6:	bf00      	nop
 80039e8:	e002      	b.n	80039f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80039ea:	bf00      	nop
 80039ec:	e000      	b.n	80039f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80039ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80039f0:	7bfb      	ldrb	r3, [r7, #15]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10d      	bne.n	8003a12 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80039f6:	4b3f      	ldr	r3, [pc, #252]	; (8003af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6819      	ldr	r1, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	3b01      	subs	r3, #1
 8003a08:	011b      	lsls	r3, r3, #4
 8003a0a:	430b      	orrs	r3, r1
 8003a0c:	4939      	ldr	r1, [pc, #228]	; (8003af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a12:	7bfb      	ldrb	r3, [r7, #15]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d167      	bne.n	8003ae8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003a18:	4b36      	ldr	r3, [pc, #216]	; (8003af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a35      	ldr	r2, [pc, #212]	; (8003af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a24:	f7fd fac2 	bl	8000fac <HAL_GetTick>
 8003a28:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a2a:	e009      	b.n	8003a40 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a2c:	f7fd fabe 	bl	8000fac <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d902      	bls.n	8003a40 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	73fb      	strb	r3, [r7, #15]
        break;
 8003a3e:	e005      	b.n	8003a4c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a40:	4b2c      	ldr	r3, [pc, #176]	; (8003af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1ef      	bne.n	8003a2c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003a4c:	7bfb      	ldrb	r3, [r7, #15]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d14a      	bne.n	8003ae8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d111      	bne.n	8003a7c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a58:	4b26      	ldr	r3, [pc, #152]	; (8003af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003a60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	6892      	ldr	r2, [r2, #8]
 8003a68:	0211      	lsls	r1, r2, #8
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	68d2      	ldr	r2, [r2, #12]
 8003a6e:	0912      	lsrs	r2, r2, #4
 8003a70:	0452      	lsls	r2, r2, #17
 8003a72:	430a      	orrs	r2, r1
 8003a74:	491f      	ldr	r1, [pc, #124]	; (8003af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	614b      	str	r3, [r1, #20]
 8003a7a:	e011      	b.n	8003aa0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a7c:	4b1d      	ldr	r3, [pc, #116]	; (8003af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a7e:	695b      	ldr	r3, [r3, #20]
 8003a80:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003a84:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	6892      	ldr	r2, [r2, #8]
 8003a8c:	0211      	lsls	r1, r2, #8
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	6912      	ldr	r2, [r2, #16]
 8003a92:	0852      	lsrs	r2, r2, #1
 8003a94:	3a01      	subs	r2, #1
 8003a96:	0652      	lsls	r2, r2, #25
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	4916      	ldr	r1, [pc, #88]	; (8003af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003aa0:	4b14      	ldr	r3, [pc, #80]	; (8003af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a13      	ldr	r2, [pc, #76]	; (8003af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aaa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aac:	f7fd fa7e 	bl	8000fac <HAL_GetTick>
 8003ab0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ab2:	e009      	b.n	8003ac8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ab4:	f7fd fa7a 	bl	8000fac <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d902      	bls.n	8003ac8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	73fb      	strb	r3, [r7, #15]
          break;
 8003ac6:	e005      	b.n	8003ad4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ac8:	4b0a      	ldr	r3, [pc, #40]	; (8003af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d0ef      	beq.n	8003ab4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003ad4:	7bfb      	ldrb	r3, [r7, #15]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d106      	bne.n	8003ae8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003ada:	4b06      	ldr	r3, [pc, #24]	; (8003af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003adc:	695a      	ldr	r2, [r3, #20]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	695b      	ldr	r3, [r3, #20]
 8003ae2:	4904      	ldr	r1, [pc, #16]	; (8003af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	40021000 	.word	0x40021000

08003af8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d101      	bne.n	8003b0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e049      	b.n	8003b9e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d106      	bne.n	8003b24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f7fd f8a6 	bl	8000c70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2202      	movs	r2, #2
 8003b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	3304      	adds	r3, #4
 8003b34:	4619      	mov	r1, r3
 8003b36:	4610      	mov	r0, r2
 8003b38:	f000 fb7a 	bl	8004230 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3708      	adds	r7, #8
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b082      	sub	sp, #8
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d101      	bne.n	8003bb8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e049      	b.n	8003c4c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d106      	bne.n	8003bd2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f000 f841 	bl	8003c54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2202      	movs	r2, #2
 8003bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	3304      	adds	r3, #4
 8003be2:	4619      	mov	r1, r3
 8003be4:	4610      	mov	r0, r2
 8003be6:	f000 fb23 	bl	8004230 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c4a:	2300      	movs	r3, #0
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3708      	adds	r7, #8
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d109      	bne.n	8003c8c <HAL_TIM_PWM_Start+0x24>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	bf14      	ite	ne
 8003c84:	2301      	movne	r3, #1
 8003c86:	2300      	moveq	r3, #0
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	e03c      	b.n	8003d06 <HAL_TIM_PWM_Start+0x9e>
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	2b04      	cmp	r3, #4
 8003c90:	d109      	bne.n	8003ca6 <HAL_TIM_PWM_Start+0x3e>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	bf14      	ite	ne
 8003c9e:	2301      	movne	r3, #1
 8003ca0:	2300      	moveq	r3, #0
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	e02f      	b.n	8003d06 <HAL_TIM_PWM_Start+0x9e>
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	2b08      	cmp	r3, #8
 8003caa:	d109      	bne.n	8003cc0 <HAL_TIM_PWM_Start+0x58>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	bf14      	ite	ne
 8003cb8:	2301      	movne	r3, #1
 8003cba:	2300      	moveq	r3, #0
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	e022      	b.n	8003d06 <HAL_TIM_PWM_Start+0x9e>
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	2b0c      	cmp	r3, #12
 8003cc4:	d109      	bne.n	8003cda <HAL_TIM_PWM_Start+0x72>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	bf14      	ite	ne
 8003cd2:	2301      	movne	r3, #1
 8003cd4:	2300      	moveq	r3, #0
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	e015      	b.n	8003d06 <HAL_TIM_PWM_Start+0x9e>
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	2b10      	cmp	r3, #16
 8003cde:	d109      	bne.n	8003cf4 <HAL_TIM_PWM_Start+0x8c>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	bf14      	ite	ne
 8003cec:	2301      	movne	r3, #1
 8003cee:	2300      	moveq	r3, #0
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	e008      	b.n	8003d06 <HAL_TIM_PWM_Start+0x9e>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	bf14      	ite	ne
 8003d00:	2301      	movne	r3, #1
 8003d02:	2300      	moveq	r3, #0
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d001      	beq.n	8003d0e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e09c      	b.n	8003e48 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d104      	bne.n	8003d1e <HAL_TIM_PWM_Start+0xb6>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2202      	movs	r2, #2
 8003d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d1c:	e023      	b.n	8003d66 <HAL_TIM_PWM_Start+0xfe>
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	2b04      	cmp	r3, #4
 8003d22:	d104      	bne.n	8003d2e <HAL_TIM_PWM_Start+0xc6>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2202      	movs	r2, #2
 8003d28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d2c:	e01b      	b.n	8003d66 <HAL_TIM_PWM_Start+0xfe>
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	2b08      	cmp	r3, #8
 8003d32:	d104      	bne.n	8003d3e <HAL_TIM_PWM_Start+0xd6>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2202      	movs	r2, #2
 8003d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d3c:	e013      	b.n	8003d66 <HAL_TIM_PWM_Start+0xfe>
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	2b0c      	cmp	r3, #12
 8003d42:	d104      	bne.n	8003d4e <HAL_TIM_PWM_Start+0xe6>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2202      	movs	r2, #2
 8003d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d4c:	e00b      	b.n	8003d66 <HAL_TIM_PWM_Start+0xfe>
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	2b10      	cmp	r3, #16
 8003d52:	d104      	bne.n	8003d5e <HAL_TIM_PWM_Start+0xf6>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2202      	movs	r2, #2
 8003d58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d5c:	e003      	b.n	8003d66 <HAL_TIM_PWM_Start+0xfe>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2202      	movs	r2, #2
 8003d62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	6839      	ldr	r1, [r7, #0]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 fe68 	bl	8004a44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a35      	ldr	r2, [pc, #212]	; (8003e50 <HAL_TIM_PWM_Start+0x1e8>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d013      	beq.n	8003da6 <HAL_TIM_PWM_Start+0x13e>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a34      	ldr	r2, [pc, #208]	; (8003e54 <HAL_TIM_PWM_Start+0x1ec>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d00e      	beq.n	8003da6 <HAL_TIM_PWM_Start+0x13e>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a32      	ldr	r2, [pc, #200]	; (8003e58 <HAL_TIM_PWM_Start+0x1f0>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d009      	beq.n	8003da6 <HAL_TIM_PWM_Start+0x13e>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a31      	ldr	r2, [pc, #196]	; (8003e5c <HAL_TIM_PWM_Start+0x1f4>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d004      	beq.n	8003da6 <HAL_TIM_PWM_Start+0x13e>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a2f      	ldr	r2, [pc, #188]	; (8003e60 <HAL_TIM_PWM_Start+0x1f8>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d101      	bne.n	8003daa <HAL_TIM_PWM_Start+0x142>
 8003da6:	2301      	movs	r3, #1
 8003da8:	e000      	b.n	8003dac <HAL_TIM_PWM_Start+0x144>
 8003daa:	2300      	movs	r3, #0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d007      	beq.n	8003dc0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003dbe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a22      	ldr	r2, [pc, #136]	; (8003e50 <HAL_TIM_PWM_Start+0x1e8>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d01d      	beq.n	8003e06 <HAL_TIM_PWM_Start+0x19e>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dd2:	d018      	beq.n	8003e06 <HAL_TIM_PWM_Start+0x19e>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a22      	ldr	r2, [pc, #136]	; (8003e64 <HAL_TIM_PWM_Start+0x1fc>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d013      	beq.n	8003e06 <HAL_TIM_PWM_Start+0x19e>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a21      	ldr	r2, [pc, #132]	; (8003e68 <HAL_TIM_PWM_Start+0x200>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d00e      	beq.n	8003e06 <HAL_TIM_PWM_Start+0x19e>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a1f      	ldr	r2, [pc, #124]	; (8003e6c <HAL_TIM_PWM_Start+0x204>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d009      	beq.n	8003e06 <HAL_TIM_PWM_Start+0x19e>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a17      	ldr	r2, [pc, #92]	; (8003e54 <HAL_TIM_PWM_Start+0x1ec>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d004      	beq.n	8003e06 <HAL_TIM_PWM_Start+0x19e>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a15      	ldr	r2, [pc, #84]	; (8003e58 <HAL_TIM_PWM_Start+0x1f0>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d115      	bne.n	8003e32 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	689a      	ldr	r2, [r3, #8]
 8003e0c:	4b18      	ldr	r3, [pc, #96]	; (8003e70 <HAL_TIM_PWM_Start+0x208>)
 8003e0e:	4013      	ands	r3, r2
 8003e10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2b06      	cmp	r3, #6
 8003e16:	d015      	beq.n	8003e44 <HAL_TIM_PWM_Start+0x1dc>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e1e:	d011      	beq.n	8003e44 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f042 0201 	orr.w	r2, r2, #1
 8003e2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e30:	e008      	b.n	8003e44 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f042 0201 	orr.w	r2, r2, #1
 8003e40:	601a      	str	r2, [r3, #0]
 8003e42:	e000      	b.n	8003e46 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e44:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3710      	adds	r7, #16
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	40012c00 	.word	0x40012c00
 8003e54:	40013400 	.word	0x40013400
 8003e58:	40014000 	.word	0x40014000
 8003e5c:	40014400 	.word	0x40014400
 8003e60:	40014800 	.word	0x40014800
 8003e64:	40000400 	.word	0x40000400
 8003e68:	40000800 	.word	0x40000800
 8003e6c:	40000c00 	.word	0x40000c00
 8003e70:	00010007 	.word	0x00010007

08003e74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b086      	sub	sp, #24
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e80:	2300      	movs	r3, #0
 8003e82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d101      	bne.n	8003e92 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e8e:	2302      	movs	r3, #2
 8003e90:	e0ff      	b.n	8004092 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2201      	movs	r2, #1
 8003e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2b14      	cmp	r3, #20
 8003e9e:	f200 80f0 	bhi.w	8004082 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003ea2:	a201      	add	r2, pc, #4	; (adr r2, 8003ea8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea8:	08003efd 	.word	0x08003efd
 8003eac:	08004083 	.word	0x08004083
 8003eb0:	08004083 	.word	0x08004083
 8003eb4:	08004083 	.word	0x08004083
 8003eb8:	08003f3d 	.word	0x08003f3d
 8003ebc:	08004083 	.word	0x08004083
 8003ec0:	08004083 	.word	0x08004083
 8003ec4:	08004083 	.word	0x08004083
 8003ec8:	08003f7f 	.word	0x08003f7f
 8003ecc:	08004083 	.word	0x08004083
 8003ed0:	08004083 	.word	0x08004083
 8003ed4:	08004083 	.word	0x08004083
 8003ed8:	08003fbf 	.word	0x08003fbf
 8003edc:	08004083 	.word	0x08004083
 8003ee0:	08004083 	.word	0x08004083
 8003ee4:	08004083 	.word	0x08004083
 8003ee8:	08004001 	.word	0x08004001
 8003eec:	08004083 	.word	0x08004083
 8003ef0:	08004083 	.word	0x08004083
 8003ef4:	08004083 	.word	0x08004083
 8003ef8:	08004041 	.word	0x08004041
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68b9      	ldr	r1, [r7, #8]
 8003f02:	4618      	mov	r0, r3
 8003f04:	f000 fa2e 	bl	8004364 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	699a      	ldr	r2, [r3, #24]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f042 0208 	orr.w	r2, r2, #8
 8003f16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	699a      	ldr	r2, [r3, #24]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f022 0204 	bic.w	r2, r2, #4
 8003f26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	6999      	ldr	r1, [r3, #24]
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	691a      	ldr	r2, [r3, #16]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	430a      	orrs	r2, r1
 8003f38:	619a      	str	r2, [r3, #24]
      break;
 8003f3a:	e0a5      	b.n	8004088 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68b9      	ldr	r1, [r7, #8]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f000 fa9e 	bl	8004484 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	699a      	ldr	r2, [r3, #24]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	699a      	ldr	r2, [r3, #24]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	6999      	ldr	r1, [r3, #24]
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	021a      	lsls	r2, r3, #8
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	619a      	str	r2, [r3, #24]
      break;
 8003f7c:	e084      	b.n	8004088 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68b9      	ldr	r1, [r7, #8]
 8003f84:	4618      	mov	r0, r3
 8003f86:	f000 fb07 	bl	8004598 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	69da      	ldr	r2, [r3, #28]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f042 0208 	orr.w	r2, r2, #8
 8003f98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	69da      	ldr	r2, [r3, #28]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f022 0204 	bic.w	r2, r2, #4
 8003fa8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	69d9      	ldr	r1, [r3, #28]
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	691a      	ldr	r2, [r3, #16]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	430a      	orrs	r2, r1
 8003fba:	61da      	str	r2, [r3, #28]
      break;
 8003fbc:	e064      	b.n	8004088 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68b9      	ldr	r1, [r7, #8]
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f000 fb6f 	bl	80046a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	69da      	ldr	r2, [r3, #28]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	69da      	ldr	r2, [r3, #28]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fe8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	69d9      	ldr	r1, [r3, #28]
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	021a      	lsls	r2, r3, #8
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	430a      	orrs	r2, r1
 8003ffc:	61da      	str	r2, [r3, #28]
      break;
 8003ffe:	e043      	b.n	8004088 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68b9      	ldr	r1, [r7, #8]
 8004006:	4618      	mov	r0, r3
 8004008:	f000 fbb8 	bl	800477c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f042 0208 	orr.w	r2, r2, #8
 800401a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f022 0204 	bic.w	r2, r2, #4
 800402a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	691a      	ldr	r2, [r3, #16]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	430a      	orrs	r2, r1
 800403c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800403e:	e023      	b.n	8004088 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68b9      	ldr	r1, [r7, #8]
 8004046:	4618      	mov	r0, r3
 8004048:	f000 fbfc 	bl	8004844 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800405a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800406a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	021a      	lsls	r2, r3, #8
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	430a      	orrs	r2, r1
 800407e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004080:	e002      	b.n	8004088 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	75fb      	strb	r3, [r7, #23]
      break;
 8004086:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004090:	7dfb      	ldrb	r3, [r7, #23]
}
 8004092:	4618      	mov	r0, r3
 8004094:	3718      	adds	r7, #24
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop

0800409c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040a6:	2300      	movs	r3, #0
 80040a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d101      	bne.n	80040b8 <HAL_TIM_ConfigClockSource+0x1c>
 80040b4:	2302      	movs	r3, #2
 80040b6:	e0b6      	b.n	8004226 <HAL_TIM_ConfigClockSource+0x18a>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2202      	movs	r2, #2
 80040c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80040da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68ba      	ldr	r2, [r7, #8]
 80040ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040f4:	d03e      	beq.n	8004174 <HAL_TIM_ConfigClockSource+0xd8>
 80040f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040fa:	f200 8087 	bhi.w	800420c <HAL_TIM_ConfigClockSource+0x170>
 80040fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004102:	f000 8086 	beq.w	8004212 <HAL_TIM_ConfigClockSource+0x176>
 8004106:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800410a:	d87f      	bhi.n	800420c <HAL_TIM_ConfigClockSource+0x170>
 800410c:	2b70      	cmp	r3, #112	; 0x70
 800410e:	d01a      	beq.n	8004146 <HAL_TIM_ConfigClockSource+0xaa>
 8004110:	2b70      	cmp	r3, #112	; 0x70
 8004112:	d87b      	bhi.n	800420c <HAL_TIM_ConfigClockSource+0x170>
 8004114:	2b60      	cmp	r3, #96	; 0x60
 8004116:	d050      	beq.n	80041ba <HAL_TIM_ConfigClockSource+0x11e>
 8004118:	2b60      	cmp	r3, #96	; 0x60
 800411a:	d877      	bhi.n	800420c <HAL_TIM_ConfigClockSource+0x170>
 800411c:	2b50      	cmp	r3, #80	; 0x50
 800411e:	d03c      	beq.n	800419a <HAL_TIM_ConfigClockSource+0xfe>
 8004120:	2b50      	cmp	r3, #80	; 0x50
 8004122:	d873      	bhi.n	800420c <HAL_TIM_ConfigClockSource+0x170>
 8004124:	2b40      	cmp	r3, #64	; 0x40
 8004126:	d058      	beq.n	80041da <HAL_TIM_ConfigClockSource+0x13e>
 8004128:	2b40      	cmp	r3, #64	; 0x40
 800412a:	d86f      	bhi.n	800420c <HAL_TIM_ConfigClockSource+0x170>
 800412c:	2b30      	cmp	r3, #48	; 0x30
 800412e:	d064      	beq.n	80041fa <HAL_TIM_ConfigClockSource+0x15e>
 8004130:	2b30      	cmp	r3, #48	; 0x30
 8004132:	d86b      	bhi.n	800420c <HAL_TIM_ConfigClockSource+0x170>
 8004134:	2b20      	cmp	r3, #32
 8004136:	d060      	beq.n	80041fa <HAL_TIM_ConfigClockSource+0x15e>
 8004138:	2b20      	cmp	r3, #32
 800413a:	d867      	bhi.n	800420c <HAL_TIM_ConfigClockSource+0x170>
 800413c:	2b00      	cmp	r3, #0
 800413e:	d05c      	beq.n	80041fa <HAL_TIM_ConfigClockSource+0x15e>
 8004140:	2b10      	cmp	r3, #16
 8004142:	d05a      	beq.n	80041fa <HAL_TIM_ConfigClockSource+0x15e>
 8004144:	e062      	b.n	800420c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6818      	ldr	r0, [r3, #0]
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	6899      	ldr	r1, [r3, #8]
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	685a      	ldr	r2, [r3, #4]
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	f000 fc55 	bl	8004a04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004168:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68ba      	ldr	r2, [r7, #8]
 8004170:	609a      	str	r2, [r3, #8]
      break;
 8004172:	e04f      	b.n	8004214 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6818      	ldr	r0, [r3, #0]
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	6899      	ldr	r1, [r3, #8]
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	f000 fc3e 	bl	8004a04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	689a      	ldr	r2, [r3, #8]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004196:	609a      	str	r2, [r3, #8]
      break;
 8004198:	e03c      	b.n	8004214 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6818      	ldr	r0, [r3, #0]
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	6859      	ldr	r1, [r3, #4]
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	461a      	mov	r2, r3
 80041a8:	f000 fbb2 	bl	8004910 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2150      	movs	r1, #80	; 0x50
 80041b2:	4618      	mov	r0, r3
 80041b4:	f000 fc0b 	bl	80049ce <TIM_ITRx_SetConfig>
      break;
 80041b8:	e02c      	b.n	8004214 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6818      	ldr	r0, [r3, #0]
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	6859      	ldr	r1, [r3, #4]
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	461a      	mov	r2, r3
 80041c8:	f000 fbd1 	bl	800496e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2160      	movs	r1, #96	; 0x60
 80041d2:	4618      	mov	r0, r3
 80041d4:	f000 fbfb 	bl	80049ce <TIM_ITRx_SetConfig>
      break;
 80041d8:	e01c      	b.n	8004214 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6818      	ldr	r0, [r3, #0]
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	6859      	ldr	r1, [r3, #4]
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	461a      	mov	r2, r3
 80041e8:	f000 fb92 	bl	8004910 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2140      	movs	r1, #64	; 0x40
 80041f2:	4618      	mov	r0, r3
 80041f4:	f000 fbeb 	bl	80049ce <TIM_ITRx_SetConfig>
      break;
 80041f8:	e00c      	b.n	8004214 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4619      	mov	r1, r3
 8004204:	4610      	mov	r0, r2
 8004206:	f000 fbe2 	bl	80049ce <TIM_ITRx_SetConfig>
      break;
 800420a:	e003      	b.n	8004214 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	73fb      	strb	r3, [r7, #15]
      break;
 8004210:	e000      	b.n	8004214 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004212:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004224:	7bfb      	ldrb	r3, [r7, #15]
}
 8004226:	4618      	mov	r0, r3
 8004228:	3710      	adds	r7, #16
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
	...

08004230 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004230:	b480      	push	{r7}
 8004232:	b085      	sub	sp, #20
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a40      	ldr	r2, [pc, #256]	; (8004344 <TIM_Base_SetConfig+0x114>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d013      	beq.n	8004270 <TIM_Base_SetConfig+0x40>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800424e:	d00f      	beq.n	8004270 <TIM_Base_SetConfig+0x40>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a3d      	ldr	r2, [pc, #244]	; (8004348 <TIM_Base_SetConfig+0x118>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d00b      	beq.n	8004270 <TIM_Base_SetConfig+0x40>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a3c      	ldr	r2, [pc, #240]	; (800434c <TIM_Base_SetConfig+0x11c>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d007      	beq.n	8004270 <TIM_Base_SetConfig+0x40>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a3b      	ldr	r2, [pc, #236]	; (8004350 <TIM_Base_SetConfig+0x120>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d003      	beq.n	8004270 <TIM_Base_SetConfig+0x40>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a3a      	ldr	r2, [pc, #232]	; (8004354 <TIM_Base_SetConfig+0x124>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d108      	bne.n	8004282 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004276:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	4313      	orrs	r3, r2
 8004280:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a2f      	ldr	r2, [pc, #188]	; (8004344 <TIM_Base_SetConfig+0x114>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d01f      	beq.n	80042ca <TIM_Base_SetConfig+0x9a>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004290:	d01b      	beq.n	80042ca <TIM_Base_SetConfig+0x9a>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a2c      	ldr	r2, [pc, #176]	; (8004348 <TIM_Base_SetConfig+0x118>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d017      	beq.n	80042ca <TIM_Base_SetConfig+0x9a>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a2b      	ldr	r2, [pc, #172]	; (800434c <TIM_Base_SetConfig+0x11c>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d013      	beq.n	80042ca <TIM_Base_SetConfig+0x9a>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a2a      	ldr	r2, [pc, #168]	; (8004350 <TIM_Base_SetConfig+0x120>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d00f      	beq.n	80042ca <TIM_Base_SetConfig+0x9a>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a29      	ldr	r2, [pc, #164]	; (8004354 <TIM_Base_SetConfig+0x124>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d00b      	beq.n	80042ca <TIM_Base_SetConfig+0x9a>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a28      	ldr	r2, [pc, #160]	; (8004358 <TIM_Base_SetConfig+0x128>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d007      	beq.n	80042ca <TIM_Base_SetConfig+0x9a>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a27      	ldr	r2, [pc, #156]	; (800435c <TIM_Base_SetConfig+0x12c>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d003      	beq.n	80042ca <TIM_Base_SetConfig+0x9a>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a26      	ldr	r2, [pc, #152]	; (8004360 <TIM_Base_SetConfig+0x130>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d108      	bne.n	80042dc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	4313      	orrs	r3, r2
 80042da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	695b      	ldr	r3, [r3, #20]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	689a      	ldr	r2, [r3, #8]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a10      	ldr	r2, [pc, #64]	; (8004344 <TIM_Base_SetConfig+0x114>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d00f      	beq.n	8004328 <TIM_Base_SetConfig+0xf8>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a12      	ldr	r2, [pc, #72]	; (8004354 <TIM_Base_SetConfig+0x124>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d00b      	beq.n	8004328 <TIM_Base_SetConfig+0xf8>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a11      	ldr	r2, [pc, #68]	; (8004358 <TIM_Base_SetConfig+0x128>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d007      	beq.n	8004328 <TIM_Base_SetConfig+0xf8>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a10      	ldr	r2, [pc, #64]	; (800435c <TIM_Base_SetConfig+0x12c>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d003      	beq.n	8004328 <TIM_Base_SetConfig+0xf8>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4a0f      	ldr	r2, [pc, #60]	; (8004360 <TIM_Base_SetConfig+0x130>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d103      	bne.n	8004330 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	691a      	ldr	r2, [r3, #16]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	615a      	str	r2, [r3, #20]
}
 8004336:	bf00      	nop
 8004338:	3714      	adds	r7, #20
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	40012c00 	.word	0x40012c00
 8004348:	40000400 	.word	0x40000400
 800434c:	40000800 	.word	0x40000800
 8004350:	40000c00 	.word	0x40000c00
 8004354:	40013400 	.word	0x40013400
 8004358:	40014000 	.word	0x40014000
 800435c:	40014400 	.word	0x40014400
 8004360:	40014800 	.word	0x40014800

08004364 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004364:	b480      	push	{r7}
 8004366:	b087      	sub	sp, #28
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	f023 0201 	bic.w	r2, r3, #1
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a1b      	ldr	r3, [r3, #32]
 800437e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f023 0303 	bic.w	r3, r3, #3
 800439e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68fa      	ldr	r2, [r7, #12]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	f023 0302 	bic.w	r3, r3, #2
 80043b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	697a      	ldr	r2, [r7, #20]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a2c      	ldr	r2, [pc, #176]	; (8004470 <TIM_OC1_SetConfig+0x10c>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d00f      	beq.n	80043e4 <TIM_OC1_SetConfig+0x80>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a2b      	ldr	r2, [pc, #172]	; (8004474 <TIM_OC1_SetConfig+0x110>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d00b      	beq.n	80043e4 <TIM_OC1_SetConfig+0x80>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4a2a      	ldr	r2, [pc, #168]	; (8004478 <TIM_OC1_SetConfig+0x114>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d007      	beq.n	80043e4 <TIM_OC1_SetConfig+0x80>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4a29      	ldr	r2, [pc, #164]	; (800447c <TIM_OC1_SetConfig+0x118>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d003      	beq.n	80043e4 <TIM_OC1_SetConfig+0x80>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a28      	ldr	r2, [pc, #160]	; (8004480 <TIM_OC1_SetConfig+0x11c>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d10c      	bne.n	80043fe <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	f023 0308 	bic.w	r3, r3, #8
 80043ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	697a      	ldr	r2, [r7, #20]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	f023 0304 	bic.w	r3, r3, #4
 80043fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a1b      	ldr	r2, [pc, #108]	; (8004470 <TIM_OC1_SetConfig+0x10c>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d00f      	beq.n	8004426 <TIM_OC1_SetConfig+0xc2>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a1a      	ldr	r2, [pc, #104]	; (8004474 <TIM_OC1_SetConfig+0x110>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d00b      	beq.n	8004426 <TIM_OC1_SetConfig+0xc2>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a19      	ldr	r2, [pc, #100]	; (8004478 <TIM_OC1_SetConfig+0x114>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d007      	beq.n	8004426 <TIM_OC1_SetConfig+0xc2>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a18      	ldr	r2, [pc, #96]	; (800447c <TIM_OC1_SetConfig+0x118>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d003      	beq.n	8004426 <TIM_OC1_SetConfig+0xc2>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a17      	ldr	r2, [pc, #92]	; (8004480 <TIM_OC1_SetConfig+0x11c>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d111      	bne.n	800444a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800442c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004434:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	693a      	ldr	r2, [r7, #16]
 800443c:	4313      	orrs	r3, r2
 800443e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	4313      	orrs	r3, r2
 8004448:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	693a      	ldr	r2, [r7, #16]
 800444e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	685a      	ldr	r2, [r3, #4]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	621a      	str	r2, [r3, #32]
}
 8004464:	bf00      	nop
 8004466:	371c      	adds	r7, #28
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr
 8004470:	40012c00 	.word	0x40012c00
 8004474:	40013400 	.word	0x40013400
 8004478:	40014000 	.word	0x40014000
 800447c:	40014400 	.word	0x40014400
 8004480:	40014800 	.word	0x40014800

08004484 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004484:	b480      	push	{r7}
 8004486:	b087      	sub	sp, #28
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	f023 0210 	bic.w	r2, r3, #16
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a1b      	ldr	r3, [r3, #32]
 800449e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	021b      	lsls	r3, r3, #8
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	f023 0320 	bic.w	r3, r3, #32
 80044d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	011b      	lsls	r3, r3, #4
 80044da:	697a      	ldr	r2, [r7, #20]
 80044dc:	4313      	orrs	r3, r2
 80044de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a28      	ldr	r2, [pc, #160]	; (8004584 <TIM_OC2_SetConfig+0x100>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d003      	beq.n	80044f0 <TIM_OC2_SetConfig+0x6c>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a27      	ldr	r2, [pc, #156]	; (8004588 <TIM_OC2_SetConfig+0x104>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d10d      	bne.n	800450c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	011b      	lsls	r3, r3, #4
 80044fe:	697a      	ldr	r2, [r7, #20]
 8004500:	4313      	orrs	r3, r2
 8004502:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800450a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a1d      	ldr	r2, [pc, #116]	; (8004584 <TIM_OC2_SetConfig+0x100>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d00f      	beq.n	8004534 <TIM_OC2_SetConfig+0xb0>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a1c      	ldr	r2, [pc, #112]	; (8004588 <TIM_OC2_SetConfig+0x104>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d00b      	beq.n	8004534 <TIM_OC2_SetConfig+0xb0>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a1b      	ldr	r2, [pc, #108]	; (800458c <TIM_OC2_SetConfig+0x108>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d007      	beq.n	8004534 <TIM_OC2_SetConfig+0xb0>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a1a      	ldr	r2, [pc, #104]	; (8004590 <TIM_OC2_SetConfig+0x10c>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d003      	beq.n	8004534 <TIM_OC2_SetConfig+0xb0>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a19      	ldr	r2, [pc, #100]	; (8004594 <TIM_OC2_SetConfig+0x110>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d113      	bne.n	800455c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800453a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004542:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	695b      	ldr	r3, [r3, #20]
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	4313      	orrs	r3, r2
 800454e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	693a      	ldr	r2, [r7, #16]
 8004558:	4313      	orrs	r3, r2
 800455a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	693a      	ldr	r2, [r7, #16]
 8004560:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	685a      	ldr	r2, [r3, #4]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	697a      	ldr	r2, [r7, #20]
 8004574:	621a      	str	r2, [r3, #32]
}
 8004576:	bf00      	nop
 8004578:	371c      	adds	r7, #28
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	40012c00 	.word	0x40012c00
 8004588:	40013400 	.word	0x40013400
 800458c:	40014000 	.word	0x40014000
 8004590:	40014400 	.word	0x40014400
 8004594:	40014800 	.word	0x40014800

08004598 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004598:	b480      	push	{r7}
 800459a:	b087      	sub	sp, #28
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a1b      	ldr	r3, [r3, #32]
 80045a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	69db      	ldr	r3, [r3, #28]
 80045be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f023 0303 	bic.w	r3, r3, #3
 80045d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	4313      	orrs	r3, r2
 80045dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	021b      	lsls	r3, r3, #8
 80045ec:	697a      	ldr	r2, [r7, #20]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a27      	ldr	r2, [pc, #156]	; (8004694 <TIM_OC3_SetConfig+0xfc>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d003      	beq.n	8004602 <TIM_OC3_SetConfig+0x6a>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a26      	ldr	r2, [pc, #152]	; (8004698 <TIM_OC3_SetConfig+0x100>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d10d      	bne.n	800461e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004608:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	021b      	lsls	r3, r3, #8
 8004610:	697a      	ldr	r2, [r7, #20]
 8004612:	4313      	orrs	r3, r2
 8004614:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800461c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a1c      	ldr	r2, [pc, #112]	; (8004694 <TIM_OC3_SetConfig+0xfc>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d00f      	beq.n	8004646 <TIM_OC3_SetConfig+0xae>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a1b      	ldr	r2, [pc, #108]	; (8004698 <TIM_OC3_SetConfig+0x100>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d00b      	beq.n	8004646 <TIM_OC3_SetConfig+0xae>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a1a      	ldr	r2, [pc, #104]	; (800469c <TIM_OC3_SetConfig+0x104>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d007      	beq.n	8004646 <TIM_OC3_SetConfig+0xae>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a19      	ldr	r2, [pc, #100]	; (80046a0 <TIM_OC3_SetConfig+0x108>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d003      	beq.n	8004646 <TIM_OC3_SetConfig+0xae>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a18      	ldr	r2, [pc, #96]	; (80046a4 <TIM_OC3_SetConfig+0x10c>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d113      	bne.n	800466e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800464c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004654:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	011b      	lsls	r3, r3, #4
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	4313      	orrs	r3, r2
 8004660:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	011b      	lsls	r3, r3, #4
 8004668:	693a      	ldr	r2, [r7, #16]
 800466a:	4313      	orrs	r3, r2
 800466c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	693a      	ldr	r2, [r7, #16]
 8004672:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	685a      	ldr	r2, [r3, #4]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	697a      	ldr	r2, [r7, #20]
 8004686:	621a      	str	r2, [r3, #32]
}
 8004688:	bf00      	nop
 800468a:	371c      	adds	r7, #28
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr
 8004694:	40012c00 	.word	0x40012c00
 8004698:	40013400 	.word	0x40013400
 800469c:	40014000 	.word	0x40014000
 80046a0:	40014400 	.word	0x40014400
 80046a4:	40014800 	.word	0x40014800

080046a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b087      	sub	sp, #28
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a1b      	ldr	r3, [r3, #32]
 80046b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a1b      	ldr	r3, [r3, #32]
 80046c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	69db      	ldr	r3, [r3, #28]
 80046ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	021b      	lsls	r3, r3, #8
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	031b      	lsls	r3, r3, #12
 80046fe:	693a      	ldr	r2, [r7, #16]
 8004700:	4313      	orrs	r3, r2
 8004702:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a18      	ldr	r2, [pc, #96]	; (8004768 <TIM_OC4_SetConfig+0xc0>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d00f      	beq.n	800472c <TIM_OC4_SetConfig+0x84>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a17      	ldr	r2, [pc, #92]	; (800476c <TIM_OC4_SetConfig+0xc4>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d00b      	beq.n	800472c <TIM_OC4_SetConfig+0x84>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a16      	ldr	r2, [pc, #88]	; (8004770 <TIM_OC4_SetConfig+0xc8>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d007      	beq.n	800472c <TIM_OC4_SetConfig+0x84>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4a15      	ldr	r2, [pc, #84]	; (8004774 <TIM_OC4_SetConfig+0xcc>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d003      	beq.n	800472c <TIM_OC4_SetConfig+0x84>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a14      	ldr	r2, [pc, #80]	; (8004778 <TIM_OC4_SetConfig+0xd0>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d109      	bne.n	8004740 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004732:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	695b      	ldr	r3, [r3, #20]
 8004738:	019b      	lsls	r3, r3, #6
 800473a:	697a      	ldr	r2, [r7, #20]
 800473c:	4313      	orrs	r3, r2
 800473e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	697a      	ldr	r2, [r7, #20]
 8004744:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	685a      	ldr	r2, [r3, #4]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	693a      	ldr	r2, [r7, #16]
 8004758:	621a      	str	r2, [r3, #32]
}
 800475a:	bf00      	nop
 800475c:	371c      	adds	r7, #28
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop
 8004768:	40012c00 	.word	0x40012c00
 800476c:	40013400 	.word	0x40013400
 8004770:	40014000 	.word	0x40014000
 8004774:	40014400 	.word	0x40014400
 8004778:	40014800 	.word	0x40014800

0800477c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800477c:	b480      	push	{r7}
 800477e:	b087      	sub	sp, #28
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a1b      	ldr	r3, [r3, #32]
 800478a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a1b      	ldr	r3, [r3, #32]
 8004796:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80047c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	041b      	lsls	r3, r3, #16
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a17      	ldr	r2, [pc, #92]	; (8004830 <TIM_OC5_SetConfig+0xb4>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d00f      	beq.n	80047f6 <TIM_OC5_SetConfig+0x7a>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a16      	ldr	r2, [pc, #88]	; (8004834 <TIM_OC5_SetConfig+0xb8>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d00b      	beq.n	80047f6 <TIM_OC5_SetConfig+0x7a>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a15      	ldr	r2, [pc, #84]	; (8004838 <TIM_OC5_SetConfig+0xbc>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d007      	beq.n	80047f6 <TIM_OC5_SetConfig+0x7a>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a14      	ldr	r2, [pc, #80]	; (800483c <TIM_OC5_SetConfig+0xc0>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d003      	beq.n	80047f6 <TIM_OC5_SetConfig+0x7a>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a13      	ldr	r2, [pc, #76]	; (8004840 <TIM_OC5_SetConfig+0xc4>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d109      	bne.n	800480a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	021b      	lsls	r3, r3, #8
 8004804:	697a      	ldr	r2, [r7, #20]
 8004806:	4313      	orrs	r3, r2
 8004808:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	697a      	ldr	r2, [r7, #20]
 800480e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	685a      	ldr	r2, [r3, #4]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	621a      	str	r2, [r3, #32]
}
 8004824:	bf00      	nop
 8004826:	371c      	adds	r7, #28
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr
 8004830:	40012c00 	.word	0x40012c00
 8004834:	40013400 	.word	0x40013400
 8004838:	40014000 	.word	0x40014000
 800483c:	40014400 	.word	0x40014400
 8004840:	40014800 	.word	0x40014800

08004844 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004844:	b480      	push	{r7}
 8004846:	b087      	sub	sp, #28
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a1b      	ldr	r3, [r3, #32]
 8004852:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800486a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004872:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004876:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	021b      	lsls	r3, r3, #8
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	4313      	orrs	r3, r2
 8004882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800488a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	051b      	lsls	r3, r3, #20
 8004892:	693a      	ldr	r2, [r7, #16]
 8004894:	4313      	orrs	r3, r2
 8004896:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4a18      	ldr	r2, [pc, #96]	; (80048fc <TIM_OC6_SetConfig+0xb8>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d00f      	beq.n	80048c0 <TIM_OC6_SetConfig+0x7c>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a17      	ldr	r2, [pc, #92]	; (8004900 <TIM_OC6_SetConfig+0xbc>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d00b      	beq.n	80048c0 <TIM_OC6_SetConfig+0x7c>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a16      	ldr	r2, [pc, #88]	; (8004904 <TIM_OC6_SetConfig+0xc0>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d007      	beq.n	80048c0 <TIM_OC6_SetConfig+0x7c>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a15      	ldr	r2, [pc, #84]	; (8004908 <TIM_OC6_SetConfig+0xc4>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d003      	beq.n	80048c0 <TIM_OC6_SetConfig+0x7c>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a14      	ldr	r2, [pc, #80]	; (800490c <TIM_OC6_SetConfig+0xc8>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d109      	bne.n	80048d4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	695b      	ldr	r3, [r3, #20]
 80048cc:	029b      	lsls	r3, r3, #10
 80048ce:	697a      	ldr	r2, [r7, #20]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	685a      	ldr	r2, [r3, #4]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	693a      	ldr	r2, [r7, #16]
 80048ec:	621a      	str	r2, [r3, #32]
}
 80048ee:	bf00      	nop
 80048f0:	371c      	adds	r7, #28
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	40012c00 	.word	0x40012c00
 8004900:	40013400 	.word	0x40013400
 8004904:	40014000 	.word	0x40014000
 8004908:	40014400 	.word	0x40014400
 800490c:	40014800 	.word	0x40014800

08004910 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004910:	b480      	push	{r7}
 8004912:	b087      	sub	sp, #28
 8004914:	af00      	add	r7, sp, #0
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6a1b      	ldr	r3, [r3, #32]
 8004920:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6a1b      	ldr	r3, [r3, #32]
 8004926:	f023 0201 	bic.w	r2, r3, #1
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800493a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	011b      	lsls	r3, r3, #4
 8004940:	693a      	ldr	r2, [r7, #16]
 8004942:	4313      	orrs	r3, r2
 8004944:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	f023 030a 	bic.w	r3, r3, #10
 800494c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800494e:	697a      	ldr	r2, [r7, #20]
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	4313      	orrs	r3, r2
 8004954:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	693a      	ldr	r2, [r7, #16]
 800495a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	697a      	ldr	r2, [r7, #20]
 8004960:	621a      	str	r2, [r3, #32]
}
 8004962:	bf00      	nop
 8004964:	371c      	adds	r7, #28
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr

0800496e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800496e:	b480      	push	{r7}
 8004970:	b087      	sub	sp, #28
 8004972:	af00      	add	r7, sp, #0
 8004974:	60f8      	str	r0, [r7, #12]
 8004976:	60b9      	str	r1, [r7, #8]
 8004978:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6a1b      	ldr	r3, [r3, #32]
 800497e:	f023 0210 	bic.w	r2, r3, #16
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6a1b      	ldr	r3, [r3, #32]
 8004990:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004998:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	031b      	lsls	r3, r3, #12
 800499e:	697a      	ldr	r2, [r7, #20]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80049aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	011b      	lsls	r3, r3, #4
 80049b0:	693a      	ldr	r2, [r7, #16]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	697a      	ldr	r2, [r7, #20]
 80049ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	693a      	ldr	r2, [r7, #16]
 80049c0:	621a      	str	r2, [r3, #32]
}
 80049c2:	bf00      	nop
 80049c4:	371c      	adds	r7, #28
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr

080049ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049ce:	b480      	push	{r7}
 80049d0:	b085      	sub	sp, #20
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
 80049d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049e6:	683a      	ldr	r2, [r7, #0]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	f043 0307 	orr.w	r3, r3, #7
 80049f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	609a      	str	r2, [r3, #8]
}
 80049f8:	bf00      	nop
 80049fa:	3714      	adds	r7, #20
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b087      	sub	sp, #28
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	607a      	str	r2, [r7, #4]
 8004a10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	021a      	lsls	r2, r3, #8
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	431a      	orrs	r2, r3
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	697a      	ldr	r2, [r7, #20]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	697a      	ldr	r2, [r7, #20]
 8004a36:	609a      	str	r2, [r3, #8]
}
 8004a38:	bf00      	nop
 8004a3a:	371c      	adds	r7, #28
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b087      	sub	sp, #28
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	f003 031f 	and.w	r3, r3, #31
 8004a56:	2201      	movs	r2, #1
 8004a58:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6a1a      	ldr	r2, [r3, #32]
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	43db      	mvns	r3, r3
 8004a66:	401a      	ands	r2, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6a1a      	ldr	r2, [r3, #32]
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	f003 031f 	and.w	r3, r3, #31
 8004a76:	6879      	ldr	r1, [r7, #4]
 8004a78:	fa01 f303 	lsl.w	r3, r1, r3
 8004a7c:	431a      	orrs	r2, r3
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	621a      	str	r2, [r3, #32]
}
 8004a82:	bf00      	nop
 8004a84:	371c      	adds	r7, #28
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr
	...

08004a90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b085      	sub	sp, #20
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d101      	bne.n	8004aa8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004aa4:	2302      	movs	r3, #2
 8004aa6:	e068      	b.n	8004b7a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a2e      	ldr	r2, [pc, #184]	; (8004b88 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d004      	beq.n	8004adc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a2d      	ldr	r2, [pc, #180]	; (8004b8c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d108      	bne.n	8004aee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004ae2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004af4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68fa      	ldr	r2, [r7, #12]
 8004b06:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a1e      	ldr	r2, [pc, #120]	; (8004b88 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d01d      	beq.n	8004b4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b1a:	d018      	beq.n	8004b4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a1b      	ldr	r2, [pc, #108]	; (8004b90 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d013      	beq.n	8004b4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a1a      	ldr	r2, [pc, #104]	; (8004b94 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d00e      	beq.n	8004b4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a18      	ldr	r2, [pc, #96]	; (8004b98 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d009      	beq.n	8004b4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a13      	ldr	r2, [pc, #76]	; (8004b8c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d004      	beq.n	8004b4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a14      	ldr	r2, [pc, #80]	; (8004b9c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d10c      	bne.n	8004b68 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	68ba      	ldr	r2, [r7, #8]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68ba      	ldr	r2, [r7, #8]
 8004b66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3714      	adds	r7, #20
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	40012c00 	.word	0x40012c00
 8004b8c:	40013400 	.word	0x40013400
 8004b90:	40000400 	.word	0x40000400
 8004b94:	40000800 	.word	0x40000800
 8004b98:	40000c00 	.word	0x40000c00
 8004b9c:	40014000 	.word	0x40014000

08004ba0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d101      	bne.n	8004bb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e040      	b.n	8004c34 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d106      	bne.n	8004bc8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f7fc f8aa 	bl	8000d1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2224      	movs	r2, #36	; 0x24
 8004bcc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f022 0201 	bic.w	r2, r2, #1
 8004bdc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 f992 	bl	8004f08 <UART_SetConfig>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d101      	bne.n	8004bee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e022      	b.n	8004c34 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d002      	beq.n	8004bfc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 fc10 	bl	800541c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	685a      	ldr	r2, [r3, #4]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	689a      	ldr	r2, [r3, #8]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f042 0201 	orr.w	r2, r2, #1
 8004c2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 fc97 	bl	8005560 <UART_CheckIdleState>
 8004c32:	4603      	mov	r3, r0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3708      	adds	r7, #8
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b08a      	sub	sp, #40	; 0x28
 8004c40:	af02      	add	r7, sp, #8
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	603b      	str	r3, [r7, #0]
 8004c48:	4613      	mov	r3, r2
 8004c4a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c50:	2b20      	cmp	r3, #32
 8004c52:	f040 8082 	bne.w	8004d5a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d002      	beq.n	8004c62 <HAL_UART_Transmit+0x26>
 8004c5c:	88fb      	ldrh	r3, [r7, #6]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d101      	bne.n	8004c66 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e07a      	b.n	8004d5c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d101      	bne.n	8004c74 <HAL_UART_Transmit+0x38>
 8004c70:	2302      	movs	r3, #2
 8004c72:	e073      	b.n	8004d5c <HAL_UART_Transmit+0x120>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2221      	movs	r2, #33	; 0x21
 8004c88:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c8a:	f7fc f98f 	bl	8000fac <HAL_GetTick>
 8004c8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	88fa      	ldrh	r2, [r7, #6]
 8004c94:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	88fa      	ldrh	r2, [r7, #6]
 8004c9c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ca8:	d108      	bne.n	8004cbc <HAL_UART_Transmit+0x80>
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d104      	bne.n	8004cbc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	61bb      	str	r3, [r7, #24]
 8004cba:	e003      	b.n	8004cc4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004ccc:	e02d      	b.n	8004d2a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	9300      	str	r3, [sp, #0]
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	2180      	movs	r1, #128	; 0x80
 8004cd8:	68f8      	ldr	r0, [r7, #12]
 8004cda:	f000 fc8a 	bl	80055f2 <UART_WaitOnFlagUntilTimeout>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d001      	beq.n	8004ce8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e039      	b.n	8004d5c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d10b      	bne.n	8004d06 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	881a      	ldrh	r2, [r3, #0]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cfa:	b292      	uxth	r2, r2
 8004cfc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	3302      	adds	r3, #2
 8004d02:	61bb      	str	r3, [r7, #24]
 8004d04:	e008      	b.n	8004d18 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	781a      	ldrb	r2, [r3, #0]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	b292      	uxth	r2, r2
 8004d10:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	3301      	adds	r3, #1
 8004d16:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	3b01      	subs	r3, #1
 8004d22:	b29a      	uxth	r2, r3
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1cb      	bne.n	8004cce <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	9300      	str	r3, [sp, #0]
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	2140      	movs	r1, #64	; 0x40
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	f000 fc56 	bl	80055f2 <UART_WaitOnFlagUntilTimeout>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d001      	beq.n	8004d50 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e005      	b.n	8004d5c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2220      	movs	r2, #32
 8004d54:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004d56:	2300      	movs	r3, #0
 8004d58:	e000      	b.n	8004d5c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004d5a:	2302      	movs	r3, #2
  }
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3720      	adds	r7, #32
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b08a      	sub	sp, #40	; 0x28
 8004d68:	af02      	add	r7, sp, #8
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	603b      	str	r3, [r7, #0]
 8004d70:	4613      	mov	r3, r2
 8004d72:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d78:	2b20      	cmp	r3, #32
 8004d7a:	f040 80bf 	bne.w	8004efc <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d002      	beq.n	8004d8a <HAL_UART_Receive+0x26>
 8004d84:	88fb      	ldrh	r3, [r7, #6]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d101      	bne.n	8004d8e <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e0b7      	b.n	8004efe <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d101      	bne.n	8004d9c <HAL_UART_Receive+0x38>
 8004d98:	2302      	movs	r3, #2
 8004d9a:	e0b0      	b.n	8004efe <HAL_UART_Receive+0x19a>
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2222      	movs	r2, #34	; 0x22
 8004db0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2200      	movs	r2, #0
 8004db6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004db8:	f7fc f8f8 	bl	8000fac <HAL_GetTick>
 8004dbc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	88fa      	ldrh	r2, [r7, #6]
 8004dc2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	88fa      	ldrh	r2, [r7, #6]
 8004dca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dd6:	d10e      	bne.n	8004df6 <HAL_UART_Receive+0x92>
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d105      	bne.n	8004dec <HAL_UART_Receive+0x88>
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004de6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004dea:	e02d      	b.n	8004e48 <HAL_UART_Receive+0xe4>
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	22ff      	movs	r2, #255	; 0xff
 8004df0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004df4:	e028      	b.n	8004e48 <HAL_UART_Receive+0xe4>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d10d      	bne.n	8004e1a <HAL_UART_Receive+0xb6>
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d104      	bne.n	8004e10 <HAL_UART_Receive+0xac>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	22ff      	movs	r2, #255	; 0xff
 8004e0a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e0e:	e01b      	b.n	8004e48 <HAL_UART_Receive+0xe4>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	227f      	movs	r2, #127	; 0x7f
 8004e14:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e18:	e016      	b.n	8004e48 <HAL_UART_Receive+0xe4>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e22:	d10d      	bne.n	8004e40 <HAL_UART_Receive+0xdc>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d104      	bne.n	8004e36 <HAL_UART_Receive+0xd2>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	227f      	movs	r2, #127	; 0x7f
 8004e30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e34:	e008      	b.n	8004e48 <HAL_UART_Receive+0xe4>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	223f      	movs	r2, #63	; 0x3f
 8004e3a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e3e:	e003      	b.n	8004e48 <HAL_UART_Receive+0xe4>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004e4e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e58:	d108      	bne.n	8004e6c <HAL_UART_Receive+0x108>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d104      	bne.n	8004e6c <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8004e62:	2300      	movs	r3, #0
 8004e64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	61bb      	str	r3, [r7, #24]
 8004e6a:	e003      	b.n	8004e74 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e70:	2300      	movs	r3, #0
 8004e72:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004e7c:	e033      	b.n	8004ee6 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	9300      	str	r3, [sp, #0]
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	2200      	movs	r2, #0
 8004e86:	2120      	movs	r1, #32
 8004e88:	68f8      	ldr	r0, [r7, #12]
 8004e8a:	f000 fbb2 	bl	80055f2 <UART_WaitOnFlagUntilTimeout>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d001      	beq.n	8004e98 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8004e94:	2303      	movs	r3, #3
 8004e96:	e032      	b.n	8004efe <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d10c      	bne.n	8004eb8 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004ea4:	b29a      	uxth	r2, r3
 8004ea6:	8a7b      	ldrh	r3, [r7, #18]
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	b29a      	uxth	r2, r3
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	3302      	adds	r3, #2
 8004eb4:	61bb      	str	r3, [r7, #24]
 8004eb6:	e00d      	b.n	8004ed4 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	b2da      	uxtb	r2, r3
 8004ec2:	8a7b      	ldrh	r3, [r7, #18]
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	b2da      	uxtb	r2, r3
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	3301      	adds	r3, #1
 8004ed2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	3b01      	subs	r3, #1
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1c5      	bne.n	8004e7e <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2220      	movs	r2, #32
 8004ef6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	e000      	b.n	8004efe <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8004efc:	2302      	movs	r3, #2
  }
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3720      	adds	r7, #32
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
	...

08004f08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f08:	b5b0      	push	{r4, r5, r7, lr}
 8004f0a:	b088      	sub	sp, #32
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f10:	2300      	movs	r3, #0
 8004f12:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	689a      	ldr	r2, [r3, #8]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	691b      	ldr	r3, [r3, #16]
 8004f1c:	431a      	orrs	r2, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	431a      	orrs	r2, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	69db      	ldr	r3, [r3, #28]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	4bad      	ldr	r3, [pc, #692]	; (80051e8 <UART_SetConfig+0x2e0>)
 8004f34:	4013      	ands	r3, r2
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	6812      	ldr	r2, [r2, #0]
 8004f3a:	69f9      	ldr	r1, [r7, #28]
 8004f3c:	430b      	orrs	r3, r1
 8004f3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	68da      	ldr	r2, [r3, #12]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	430a      	orrs	r2, r1
 8004f54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4aa2      	ldr	r2, [pc, #648]	; (80051ec <UART_SetConfig+0x2e4>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d004      	beq.n	8004f70 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	69fa      	ldr	r2, [r7, #28]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	69fa      	ldr	r2, [r7, #28]
 8004f80:	430a      	orrs	r2, r1
 8004f82:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a99      	ldr	r2, [pc, #612]	; (80051f0 <UART_SetConfig+0x2e8>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d121      	bne.n	8004fd2 <UART_SetConfig+0xca>
 8004f8e:	4b99      	ldr	r3, [pc, #612]	; (80051f4 <UART_SetConfig+0x2ec>)
 8004f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f94:	f003 0303 	and.w	r3, r3, #3
 8004f98:	2b03      	cmp	r3, #3
 8004f9a:	d817      	bhi.n	8004fcc <UART_SetConfig+0xc4>
 8004f9c:	a201      	add	r2, pc, #4	; (adr r2, 8004fa4 <UART_SetConfig+0x9c>)
 8004f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa2:	bf00      	nop
 8004fa4:	08004fb5 	.word	0x08004fb5
 8004fa8:	08004fc1 	.word	0x08004fc1
 8004fac:	08004fbb 	.word	0x08004fbb
 8004fb0:	08004fc7 	.word	0x08004fc7
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	76fb      	strb	r3, [r7, #27]
 8004fb8:	e0e7      	b.n	800518a <UART_SetConfig+0x282>
 8004fba:	2302      	movs	r3, #2
 8004fbc:	76fb      	strb	r3, [r7, #27]
 8004fbe:	e0e4      	b.n	800518a <UART_SetConfig+0x282>
 8004fc0:	2304      	movs	r3, #4
 8004fc2:	76fb      	strb	r3, [r7, #27]
 8004fc4:	e0e1      	b.n	800518a <UART_SetConfig+0x282>
 8004fc6:	2308      	movs	r3, #8
 8004fc8:	76fb      	strb	r3, [r7, #27]
 8004fca:	e0de      	b.n	800518a <UART_SetConfig+0x282>
 8004fcc:	2310      	movs	r3, #16
 8004fce:	76fb      	strb	r3, [r7, #27]
 8004fd0:	e0db      	b.n	800518a <UART_SetConfig+0x282>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a88      	ldr	r2, [pc, #544]	; (80051f8 <UART_SetConfig+0x2f0>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d132      	bne.n	8005042 <UART_SetConfig+0x13a>
 8004fdc:	4b85      	ldr	r3, [pc, #532]	; (80051f4 <UART_SetConfig+0x2ec>)
 8004fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fe2:	f003 030c 	and.w	r3, r3, #12
 8004fe6:	2b0c      	cmp	r3, #12
 8004fe8:	d828      	bhi.n	800503c <UART_SetConfig+0x134>
 8004fea:	a201      	add	r2, pc, #4	; (adr r2, 8004ff0 <UART_SetConfig+0xe8>)
 8004fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff0:	08005025 	.word	0x08005025
 8004ff4:	0800503d 	.word	0x0800503d
 8004ff8:	0800503d 	.word	0x0800503d
 8004ffc:	0800503d 	.word	0x0800503d
 8005000:	08005031 	.word	0x08005031
 8005004:	0800503d 	.word	0x0800503d
 8005008:	0800503d 	.word	0x0800503d
 800500c:	0800503d 	.word	0x0800503d
 8005010:	0800502b 	.word	0x0800502b
 8005014:	0800503d 	.word	0x0800503d
 8005018:	0800503d 	.word	0x0800503d
 800501c:	0800503d 	.word	0x0800503d
 8005020:	08005037 	.word	0x08005037
 8005024:	2300      	movs	r3, #0
 8005026:	76fb      	strb	r3, [r7, #27]
 8005028:	e0af      	b.n	800518a <UART_SetConfig+0x282>
 800502a:	2302      	movs	r3, #2
 800502c:	76fb      	strb	r3, [r7, #27]
 800502e:	e0ac      	b.n	800518a <UART_SetConfig+0x282>
 8005030:	2304      	movs	r3, #4
 8005032:	76fb      	strb	r3, [r7, #27]
 8005034:	e0a9      	b.n	800518a <UART_SetConfig+0x282>
 8005036:	2308      	movs	r3, #8
 8005038:	76fb      	strb	r3, [r7, #27]
 800503a:	e0a6      	b.n	800518a <UART_SetConfig+0x282>
 800503c:	2310      	movs	r3, #16
 800503e:	76fb      	strb	r3, [r7, #27]
 8005040:	e0a3      	b.n	800518a <UART_SetConfig+0x282>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a6d      	ldr	r2, [pc, #436]	; (80051fc <UART_SetConfig+0x2f4>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d120      	bne.n	800508e <UART_SetConfig+0x186>
 800504c:	4b69      	ldr	r3, [pc, #420]	; (80051f4 <UART_SetConfig+0x2ec>)
 800504e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005052:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005056:	2b30      	cmp	r3, #48	; 0x30
 8005058:	d013      	beq.n	8005082 <UART_SetConfig+0x17a>
 800505a:	2b30      	cmp	r3, #48	; 0x30
 800505c:	d814      	bhi.n	8005088 <UART_SetConfig+0x180>
 800505e:	2b20      	cmp	r3, #32
 8005060:	d009      	beq.n	8005076 <UART_SetConfig+0x16e>
 8005062:	2b20      	cmp	r3, #32
 8005064:	d810      	bhi.n	8005088 <UART_SetConfig+0x180>
 8005066:	2b00      	cmp	r3, #0
 8005068:	d002      	beq.n	8005070 <UART_SetConfig+0x168>
 800506a:	2b10      	cmp	r3, #16
 800506c:	d006      	beq.n	800507c <UART_SetConfig+0x174>
 800506e:	e00b      	b.n	8005088 <UART_SetConfig+0x180>
 8005070:	2300      	movs	r3, #0
 8005072:	76fb      	strb	r3, [r7, #27]
 8005074:	e089      	b.n	800518a <UART_SetConfig+0x282>
 8005076:	2302      	movs	r3, #2
 8005078:	76fb      	strb	r3, [r7, #27]
 800507a:	e086      	b.n	800518a <UART_SetConfig+0x282>
 800507c:	2304      	movs	r3, #4
 800507e:	76fb      	strb	r3, [r7, #27]
 8005080:	e083      	b.n	800518a <UART_SetConfig+0x282>
 8005082:	2308      	movs	r3, #8
 8005084:	76fb      	strb	r3, [r7, #27]
 8005086:	e080      	b.n	800518a <UART_SetConfig+0x282>
 8005088:	2310      	movs	r3, #16
 800508a:	76fb      	strb	r3, [r7, #27]
 800508c:	e07d      	b.n	800518a <UART_SetConfig+0x282>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a5b      	ldr	r2, [pc, #364]	; (8005200 <UART_SetConfig+0x2f8>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d120      	bne.n	80050da <UART_SetConfig+0x1d2>
 8005098:	4b56      	ldr	r3, [pc, #344]	; (80051f4 <UART_SetConfig+0x2ec>)
 800509a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800509e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80050a2:	2bc0      	cmp	r3, #192	; 0xc0
 80050a4:	d013      	beq.n	80050ce <UART_SetConfig+0x1c6>
 80050a6:	2bc0      	cmp	r3, #192	; 0xc0
 80050a8:	d814      	bhi.n	80050d4 <UART_SetConfig+0x1cc>
 80050aa:	2b80      	cmp	r3, #128	; 0x80
 80050ac:	d009      	beq.n	80050c2 <UART_SetConfig+0x1ba>
 80050ae:	2b80      	cmp	r3, #128	; 0x80
 80050b0:	d810      	bhi.n	80050d4 <UART_SetConfig+0x1cc>
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d002      	beq.n	80050bc <UART_SetConfig+0x1b4>
 80050b6:	2b40      	cmp	r3, #64	; 0x40
 80050b8:	d006      	beq.n	80050c8 <UART_SetConfig+0x1c0>
 80050ba:	e00b      	b.n	80050d4 <UART_SetConfig+0x1cc>
 80050bc:	2300      	movs	r3, #0
 80050be:	76fb      	strb	r3, [r7, #27]
 80050c0:	e063      	b.n	800518a <UART_SetConfig+0x282>
 80050c2:	2302      	movs	r3, #2
 80050c4:	76fb      	strb	r3, [r7, #27]
 80050c6:	e060      	b.n	800518a <UART_SetConfig+0x282>
 80050c8:	2304      	movs	r3, #4
 80050ca:	76fb      	strb	r3, [r7, #27]
 80050cc:	e05d      	b.n	800518a <UART_SetConfig+0x282>
 80050ce:	2308      	movs	r3, #8
 80050d0:	76fb      	strb	r3, [r7, #27]
 80050d2:	e05a      	b.n	800518a <UART_SetConfig+0x282>
 80050d4:	2310      	movs	r3, #16
 80050d6:	76fb      	strb	r3, [r7, #27]
 80050d8:	e057      	b.n	800518a <UART_SetConfig+0x282>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a49      	ldr	r2, [pc, #292]	; (8005204 <UART_SetConfig+0x2fc>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d125      	bne.n	8005130 <UART_SetConfig+0x228>
 80050e4:	4b43      	ldr	r3, [pc, #268]	; (80051f4 <UART_SetConfig+0x2ec>)
 80050e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050f2:	d017      	beq.n	8005124 <UART_SetConfig+0x21c>
 80050f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050f8:	d817      	bhi.n	800512a <UART_SetConfig+0x222>
 80050fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050fe:	d00b      	beq.n	8005118 <UART_SetConfig+0x210>
 8005100:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005104:	d811      	bhi.n	800512a <UART_SetConfig+0x222>
 8005106:	2b00      	cmp	r3, #0
 8005108:	d003      	beq.n	8005112 <UART_SetConfig+0x20a>
 800510a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800510e:	d006      	beq.n	800511e <UART_SetConfig+0x216>
 8005110:	e00b      	b.n	800512a <UART_SetConfig+0x222>
 8005112:	2300      	movs	r3, #0
 8005114:	76fb      	strb	r3, [r7, #27]
 8005116:	e038      	b.n	800518a <UART_SetConfig+0x282>
 8005118:	2302      	movs	r3, #2
 800511a:	76fb      	strb	r3, [r7, #27]
 800511c:	e035      	b.n	800518a <UART_SetConfig+0x282>
 800511e:	2304      	movs	r3, #4
 8005120:	76fb      	strb	r3, [r7, #27]
 8005122:	e032      	b.n	800518a <UART_SetConfig+0x282>
 8005124:	2308      	movs	r3, #8
 8005126:	76fb      	strb	r3, [r7, #27]
 8005128:	e02f      	b.n	800518a <UART_SetConfig+0x282>
 800512a:	2310      	movs	r3, #16
 800512c:	76fb      	strb	r3, [r7, #27]
 800512e:	e02c      	b.n	800518a <UART_SetConfig+0x282>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a2d      	ldr	r2, [pc, #180]	; (80051ec <UART_SetConfig+0x2e4>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d125      	bne.n	8005186 <UART_SetConfig+0x27e>
 800513a:	4b2e      	ldr	r3, [pc, #184]	; (80051f4 <UART_SetConfig+0x2ec>)
 800513c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005140:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005144:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005148:	d017      	beq.n	800517a <UART_SetConfig+0x272>
 800514a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800514e:	d817      	bhi.n	8005180 <UART_SetConfig+0x278>
 8005150:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005154:	d00b      	beq.n	800516e <UART_SetConfig+0x266>
 8005156:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800515a:	d811      	bhi.n	8005180 <UART_SetConfig+0x278>
 800515c:	2b00      	cmp	r3, #0
 800515e:	d003      	beq.n	8005168 <UART_SetConfig+0x260>
 8005160:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005164:	d006      	beq.n	8005174 <UART_SetConfig+0x26c>
 8005166:	e00b      	b.n	8005180 <UART_SetConfig+0x278>
 8005168:	2300      	movs	r3, #0
 800516a:	76fb      	strb	r3, [r7, #27]
 800516c:	e00d      	b.n	800518a <UART_SetConfig+0x282>
 800516e:	2302      	movs	r3, #2
 8005170:	76fb      	strb	r3, [r7, #27]
 8005172:	e00a      	b.n	800518a <UART_SetConfig+0x282>
 8005174:	2304      	movs	r3, #4
 8005176:	76fb      	strb	r3, [r7, #27]
 8005178:	e007      	b.n	800518a <UART_SetConfig+0x282>
 800517a:	2308      	movs	r3, #8
 800517c:	76fb      	strb	r3, [r7, #27]
 800517e:	e004      	b.n	800518a <UART_SetConfig+0x282>
 8005180:	2310      	movs	r3, #16
 8005182:	76fb      	strb	r3, [r7, #27]
 8005184:	e001      	b.n	800518a <UART_SetConfig+0x282>
 8005186:	2310      	movs	r3, #16
 8005188:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a17      	ldr	r2, [pc, #92]	; (80051ec <UART_SetConfig+0x2e4>)
 8005190:	4293      	cmp	r3, r2
 8005192:	f040 8087 	bne.w	80052a4 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005196:	7efb      	ldrb	r3, [r7, #27]
 8005198:	2b08      	cmp	r3, #8
 800519a:	d837      	bhi.n	800520c <UART_SetConfig+0x304>
 800519c:	a201      	add	r2, pc, #4	; (adr r2, 80051a4 <UART_SetConfig+0x29c>)
 800519e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a2:	bf00      	nop
 80051a4:	080051c9 	.word	0x080051c9
 80051a8:	0800520d 	.word	0x0800520d
 80051ac:	080051d1 	.word	0x080051d1
 80051b0:	0800520d 	.word	0x0800520d
 80051b4:	080051d7 	.word	0x080051d7
 80051b8:	0800520d 	.word	0x0800520d
 80051bc:	0800520d 	.word	0x0800520d
 80051c0:	0800520d 	.word	0x0800520d
 80051c4:	080051df 	.word	0x080051df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051c8:	f7fd ff4e 	bl	8003068 <HAL_RCC_GetPCLK1Freq>
 80051cc:	6178      	str	r0, [r7, #20]
        break;
 80051ce:	e022      	b.n	8005216 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051d0:	4b0d      	ldr	r3, [pc, #52]	; (8005208 <UART_SetConfig+0x300>)
 80051d2:	617b      	str	r3, [r7, #20]
        break;
 80051d4:	e01f      	b.n	8005216 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051d6:	f7fd feaf 	bl	8002f38 <HAL_RCC_GetSysClockFreq>
 80051da:	6178      	str	r0, [r7, #20]
        break;
 80051dc:	e01b      	b.n	8005216 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051e2:	617b      	str	r3, [r7, #20]
        break;
 80051e4:	e017      	b.n	8005216 <UART_SetConfig+0x30e>
 80051e6:	bf00      	nop
 80051e8:	efff69f3 	.word	0xefff69f3
 80051ec:	40008000 	.word	0x40008000
 80051f0:	40013800 	.word	0x40013800
 80051f4:	40021000 	.word	0x40021000
 80051f8:	40004400 	.word	0x40004400
 80051fc:	40004800 	.word	0x40004800
 8005200:	40004c00 	.word	0x40004c00
 8005204:	40005000 	.word	0x40005000
 8005208:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800520c:	2300      	movs	r3, #0
 800520e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	76bb      	strb	r3, [r7, #26]
        break;
 8005214:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	2b00      	cmp	r3, #0
 800521a:	f000 80f1 	beq.w	8005400 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	685a      	ldr	r2, [r3, #4]
 8005222:	4613      	mov	r3, r2
 8005224:	005b      	lsls	r3, r3, #1
 8005226:	4413      	add	r3, r2
 8005228:	697a      	ldr	r2, [r7, #20]
 800522a:	429a      	cmp	r2, r3
 800522c:	d305      	bcc.n	800523a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005234:	697a      	ldr	r2, [r7, #20]
 8005236:	429a      	cmp	r2, r3
 8005238:	d902      	bls.n	8005240 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	76bb      	strb	r3, [r7, #26]
 800523e:	e0df      	b.n	8005400 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	4618      	mov	r0, r3
 8005244:	f04f 0100 	mov.w	r1, #0
 8005248:	f04f 0200 	mov.w	r2, #0
 800524c:	f04f 0300 	mov.w	r3, #0
 8005250:	020b      	lsls	r3, r1, #8
 8005252:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005256:	0202      	lsls	r2, r0, #8
 8005258:	6879      	ldr	r1, [r7, #4]
 800525a:	6849      	ldr	r1, [r1, #4]
 800525c:	0849      	lsrs	r1, r1, #1
 800525e:	4608      	mov	r0, r1
 8005260:	f04f 0100 	mov.w	r1, #0
 8005264:	1814      	adds	r4, r2, r0
 8005266:	eb43 0501 	adc.w	r5, r3, r1
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	461a      	mov	r2, r3
 8005270:	f04f 0300 	mov.w	r3, #0
 8005274:	4620      	mov	r0, r4
 8005276:	4629      	mov	r1, r5
 8005278:	f7fa ffa6 	bl	80001c8 <__aeabi_uldivmod>
 800527c:	4602      	mov	r2, r0
 800527e:	460b      	mov	r3, r1
 8005280:	4613      	mov	r3, r2
 8005282:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800528a:	d308      	bcc.n	800529e <UART_SetConfig+0x396>
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005292:	d204      	bcs.n	800529e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	693a      	ldr	r2, [r7, #16]
 800529a:	60da      	str	r2, [r3, #12]
 800529c:	e0b0      	b.n	8005400 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	76bb      	strb	r3, [r7, #26]
 80052a2:	e0ad      	b.n	8005400 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	69db      	ldr	r3, [r3, #28]
 80052a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052ac:	d15b      	bne.n	8005366 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 80052ae:	7efb      	ldrb	r3, [r7, #27]
 80052b0:	2b08      	cmp	r3, #8
 80052b2:	d828      	bhi.n	8005306 <UART_SetConfig+0x3fe>
 80052b4:	a201      	add	r2, pc, #4	; (adr r2, 80052bc <UART_SetConfig+0x3b4>)
 80052b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ba:	bf00      	nop
 80052bc:	080052e1 	.word	0x080052e1
 80052c0:	080052e9 	.word	0x080052e9
 80052c4:	080052f1 	.word	0x080052f1
 80052c8:	08005307 	.word	0x08005307
 80052cc:	080052f7 	.word	0x080052f7
 80052d0:	08005307 	.word	0x08005307
 80052d4:	08005307 	.word	0x08005307
 80052d8:	08005307 	.word	0x08005307
 80052dc:	080052ff 	.word	0x080052ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052e0:	f7fd fec2 	bl	8003068 <HAL_RCC_GetPCLK1Freq>
 80052e4:	6178      	str	r0, [r7, #20]
        break;
 80052e6:	e013      	b.n	8005310 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052e8:	f7fd fed4 	bl	8003094 <HAL_RCC_GetPCLK2Freq>
 80052ec:	6178      	str	r0, [r7, #20]
        break;
 80052ee:	e00f      	b.n	8005310 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052f0:	4b49      	ldr	r3, [pc, #292]	; (8005418 <UART_SetConfig+0x510>)
 80052f2:	617b      	str	r3, [r7, #20]
        break;
 80052f4:	e00c      	b.n	8005310 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052f6:	f7fd fe1f 	bl	8002f38 <HAL_RCC_GetSysClockFreq>
 80052fa:	6178      	str	r0, [r7, #20]
        break;
 80052fc:	e008      	b.n	8005310 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005302:	617b      	str	r3, [r7, #20]
        break;
 8005304:	e004      	b.n	8005310 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005306:	2300      	movs	r3, #0
 8005308:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	76bb      	strb	r3, [r7, #26]
        break;
 800530e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d074      	beq.n	8005400 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	005a      	lsls	r2, r3, #1
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	085b      	lsrs	r3, r3, #1
 8005320:	441a      	add	r2, r3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	fbb2 f3f3 	udiv	r3, r2, r3
 800532a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	2b0f      	cmp	r3, #15
 8005330:	d916      	bls.n	8005360 <UART_SetConfig+0x458>
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005338:	d212      	bcs.n	8005360 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	b29b      	uxth	r3, r3
 800533e:	f023 030f 	bic.w	r3, r3, #15
 8005342:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	085b      	lsrs	r3, r3, #1
 8005348:	b29b      	uxth	r3, r3
 800534a:	f003 0307 	and.w	r3, r3, #7
 800534e:	b29a      	uxth	r2, r3
 8005350:	89fb      	ldrh	r3, [r7, #14]
 8005352:	4313      	orrs	r3, r2
 8005354:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	89fa      	ldrh	r2, [r7, #14]
 800535c:	60da      	str	r2, [r3, #12]
 800535e:	e04f      	b.n	8005400 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	76bb      	strb	r3, [r7, #26]
 8005364:	e04c      	b.n	8005400 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005366:	7efb      	ldrb	r3, [r7, #27]
 8005368:	2b08      	cmp	r3, #8
 800536a:	d828      	bhi.n	80053be <UART_SetConfig+0x4b6>
 800536c:	a201      	add	r2, pc, #4	; (adr r2, 8005374 <UART_SetConfig+0x46c>)
 800536e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005372:	bf00      	nop
 8005374:	08005399 	.word	0x08005399
 8005378:	080053a1 	.word	0x080053a1
 800537c:	080053a9 	.word	0x080053a9
 8005380:	080053bf 	.word	0x080053bf
 8005384:	080053af 	.word	0x080053af
 8005388:	080053bf 	.word	0x080053bf
 800538c:	080053bf 	.word	0x080053bf
 8005390:	080053bf 	.word	0x080053bf
 8005394:	080053b7 	.word	0x080053b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005398:	f7fd fe66 	bl	8003068 <HAL_RCC_GetPCLK1Freq>
 800539c:	6178      	str	r0, [r7, #20]
        break;
 800539e:	e013      	b.n	80053c8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053a0:	f7fd fe78 	bl	8003094 <HAL_RCC_GetPCLK2Freq>
 80053a4:	6178      	str	r0, [r7, #20]
        break;
 80053a6:	e00f      	b.n	80053c8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053a8:	4b1b      	ldr	r3, [pc, #108]	; (8005418 <UART_SetConfig+0x510>)
 80053aa:	617b      	str	r3, [r7, #20]
        break;
 80053ac:	e00c      	b.n	80053c8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053ae:	f7fd fdc3 	bl	8002f38 <HAL_RCC_GetSysClockFreq>
 80053b2:	6178      	str	r0, [r7, #20]
        break;
 80053b4:	e008      	b.n	80053c8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053ba:	617b      	str	r3, [r7, #20]
        break;
 80053bc:	e004      	b.n	80053c8 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80053be:	2300      	movs	r3, #0
 80053c0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	76bb      	strb	r3, [r7, #26]
        break;
 80053c6:	bf00      	nop
    }

    if (pclk != 0U)
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d018      	beq.n	8005400 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	085a      	lsrs	r2, r3, #1
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	441a      	add	r2, r3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	2b0f      	cmp	r3, #15
 80053e6:	d909      	bls.n	80053fc <UART_SetConfig+0x4f4>
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053ee:	d205      	bcs.n	80053fc <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	b29a      	uxth	r2, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	60da      	str	r2, [r3, #12]
 80053fa:	e001      	b.n	8005400 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800540c:	7ebb      	ldrb	r3, [r7, #26]
}
 800540e:	4618      	mov	r0, r3
 8005410:	3720      	adds	r7, #32
 8005412:	46bd      	mov	sp, r7
 8005414:	bdb0      	pop	{r4, r5, r7, pc}
 8005416:	bf00      	nop
 8005418:	00f42400 	.word	0x00f42400

0800541c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005428:	f003 0301 	and.w	r3, r3, #1
 800542c:	2b00      	cmp	r3, #0
 800542e:	d00a      	beq.n	8005446 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	430a      	orrs	r2, r1
 8005444:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544a:	f003 0302 	and.w	r3, r3, #2
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00a      	beq.n	8005468 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	430a      	orrs	r2, r1
 8005466:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546c:	f003 0304 	and.w	r3, r3, #4
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00a      	beq.n	800548a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	430a      	orrs	r2, r1
 8005488:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548e:	f003 0308 	and.w	r3, r3, #8
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00a      	beq.n	80054ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	430a      	orrs	r2, r1
 80054aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b0:	f003 0310 	and.w	r3, r3, #16
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00a      	beq.n	80054ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	430a      	orrs	r2, r1
 80054cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d2:	f003 0320 	and.w	r3, r3, #32
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00a      	beq.n	80054f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	430a      	orrs	r2, r1
 80054ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d01a      	beq.n	8005532 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	430a      	orrs	r2, r1
 8005510:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005516:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800551a:	d10a      	bne.n	8005532 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	430a      	orrs	r2, r1
 8005530:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00a      	beq.n	8005554 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	430a      	orrs	r2, r1
 8005552:	605a      	str	r2, [r3, #4]
  }
}
 8005554:	bf00      	nop
 8005556:	370c      	adds	r7, #12
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b086      	sub	sp, #24
 8005564:	af02      	add	r7, sp, #8
 8005566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005570:	f7fb fd1c 	bl	8000fac <HAL_GetTick>
 8005574:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0308 	and.w	r3, r3, #8
 8005580:	2b08      	cmp	r3, #8
 8005582:	d10e      	bne.n	80055a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005584:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005588:	9300      	str	r3, [sp, #0]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2200      	movs	r2, #0
 800558e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 f82d 	bl	80055f2 <UART_WaitOnFlagUntilTimeout>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d001      	beq.n	80055a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e023      	b.n	80055ea <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0304 	and.w	r3, r3, #4
 80055ac:	2b04      	cmp	r3, #4
 80055ae:	d10e      	bne.n	80055ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055b4:	9300      	str	r3, [sp, #0]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 f817 	bl	80055f2 <UART_WaitOnFlagUntilTimeout>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d001      	beq.n	80055ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	e00d      	b.n	80055ea <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2220      	movs	r2, #32
 80055d2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2220      	movs	r2, #32
 80055d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3710      	adds	r7, #16
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}

080055f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055f2:	b580      	push	{r7, lr}
 80055f4:	b09c      	sub	sp, #112	; 0x70
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	60f8      	str	r0, [r7, #12]
 80055fa:	60b9      	str	r1, [r7, #8]
 80055fc:	603b      	str	r3, [r7, #0]
 80055fe:	4613      	mov	r3, r2
 8005600:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005602:	e0a5      	b.n	8005750 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005604:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800560a:	f000 80a1 	beq.w	8005750 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800560e:	f7fb fccd 	bl	8000fac <HAL_GetTick>
 8005612:	4602      	mov	r2, r0
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	1ad3      	subs	r3, r2, r3
 8005618:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800561a:	429a      	cmp	r2, r3
 800561c:	d302      	bcc.n	8005624 <UART_WaitOnFlagUntilTimeout+0x32>
 800561e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005620:	2b00      	cmp	r3, #0
 8005622:	d13e      	bne.n	80056a2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800562a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800562c:	e853 3f00 	ldrex	r3, [r3]
 8005630:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005634:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005638:	667b      	str	r3, [r7, #100]	; 0x64
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	461a      	mov	r2, r3
 8005640:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005642:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005644:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005646:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005648:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800564a:	e841 2300 	strex	r3, r2, [r1]
 800564e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005650:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005652:	2b00      	cmp	r3, #0
 8005654:	d1e6      	bne.n	8005624 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	3308      	adds	r3, #8
 800565c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800565e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005660:	e853 3f00 	ldrex	r3, [r3]
 8005664:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005668:	f023 0301 	bic.w	r3, r3, #1
 800566c:	663b      	str	r3, [r7, #96]	; 0x60
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	3308      	adds	r3, #8
 8005674:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005676:	64ba      	str	r2, [r7, #72]	; 0x48
 8005678:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800567a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800567c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800567e:	e841 2300 	strex	r3, r2, [r1]
 8005682:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005684:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005686:	2b00      	cmp	r3, #0
 8005688:	d1e5      	bne.n	8005656 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2220      	movs	r2, #32
 800568e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2220      	movs	r2, #32
 8005694:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e067      	b.n	8005772 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0304 	and.w	r3, r3, #4
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d04f      	beq.n	8005750 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	69db      	ldr	r3, [r3, #28]
 80056b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056be:	d147      	bne.n	8005750 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056c8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d2:	e853 3f00 	ldrex	r3, [r3]
 80056d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80056de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	461a      	mov	r2, r3
 80056e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056e8:	637b      	str	r3, [r7, #52]	; 0x34
 80056ea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056f0:	e841 2300 	strex	r3, r2, [r1]
 80056f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80056f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d1e6      	bne.n	80056ca <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	3308      	adds	r3, #8
 8005702:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	e853 3f00 	ldrex	r3, [r3]
 800570a:	613b      	str	r3, [r7, #16]
   return(result);
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	f023 0301 	bic.w	r3, r3, #1
 8005712:	66bb      	str	r3, [r7, #104]	; 0x68
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	3308      	adds	r3, #8
 800571a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800571c:	623a      	str	r2, [r7, #32]
 800571e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005720:	69f9      	ldr	r1, [r7, #28]
 8005722:	6a3a      	ldr	r2, [r7, #32]
 8005724:	e841 2300 	strex	r3, r2, [r1]
 8005728:	61bb      	str	r3, [r7, #24]
   return(result);
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d1e5      	bne.n	80056fc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2220      	movs	r2, #32
 8005734:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2220      	movs	r2, #32
 800573a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2220      	movs	r2, #32
 8005740:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2200      	movs	r2, #0
 8005748:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800574c:	2303      	movs	r3, #3
 800574e:	e010      	b.n	8005772 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	69da      	ldr	r2, [r3, #28]
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	4013      	ands	r3, r2
 800575a:	68ba      	ldr	r2, [r7, #8]
 800575c:	429a      	cmp	r2, r3
 800575e:	bf0c      	ite	eq
 8005760:	2301      	moveq	r3, #1
 8005762:	2300      	movne	r3, #0
 8005764:	b2db      	uxtb	r3, r3
 8005766:	461a      	mov	r2, r3
 8005768:	79fb      	ldrb	r3, [r7, #7]
 800576a:	429a      	cmp	r2, r3
 800576c:	f43f af4a 	beq.w	8005604 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3770      	adds	r7, #112	; 0x70
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
	...

0800577c <__libc_init_array>:
 800577c:	b570      	push	{r4, r5, r6, lr}
 800577e:	4d0d      	ldr	r5, [pc, #52]	; (80057b4 <__libc_init_array+0x38>)
 8005780:	4c0d      	ldr	r4, [pc, #52]	; (80057b8 <__libc_init_array+0x3c>)
 8005782:	1b64      	subs	r4, r4, r5
 8005784:	10a4      	asrs	r4, r4, #2
 8005786:	2600      	movs	r6, #0
 8005788:	42a6      	cmp	r6, r4
 800578a:	d109      	bne.n	80057a0 <__libc_init_array+0x24>
 800578c:	4d0b      	ldr	r5, [pc, #44]	; (80057bc <__libc_init_array+0x40>)
 800578e:	4c0c      	ldr	r4, [pc, #48]	; (80057c0 <__libc_init_array+0x44>)
 8005790:	f000 f820 	bl	80057d4 <_init>
 8005794:	1b64      	subs	r4, r4, r5
 8005796:	10a4      	asrs	r4, r4, #2
 8005798:	2600      	movs	r6, #0
 800579a:	42a6      	cmp	r6, r4
 800579c:	d105      	bne.n	80057aa <__libc_init_array+0x2e>
 800579e:	bd70      	pop	{r4, r5, r6, pc}
 80057a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80057a4:	4798      	blx	r3
 80057a6:	3601      	adds	r6, #1
 80057a8:	e7ee      	b.n	8005788 <__libc_init_array+0xc>
 80057aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80057ae:	4798      	blx	r3
 80057b0:	3601      	adds	r6, #1
 80057b2:	e7f2      	b.n	800579a <__libc_init_array+0x1e>
 80057b4:	080058d4 	.word	0x080058d4
 80057b8:	080058d4 	.word	0x080058d4
 80057bc:	080058d4 	.word	0x080058d4
 80057c0:	080058d8 	.word	0x080058d8

080057c4 <memset>:
 80057c4:	4402      	add	r2, r0
 80057c6:	4603      	mov	r3, r0
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d100      	bne.n	80057ce <memset+0xa>
 80057cc:	4770      	bx	lr
 80057ce:	f803 1b01 	strb.w	r1, [r3], #1
 80057d2:	e7f9      	b.n	80057c8 <memset+0x4>

080057d4 <_init>:
 80057d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057d6:	bf00      	nop
 80057d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057da:	bc08      	pop	{r3}
 80057dc:	469e      	mov	lr, r3
 80057de:	4770      	bx	lr

080057e0 <_fini>:
 80057e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057e2:	bf00      	nop
 80057e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057e6:	bc08      	pop	{r3}
 80057e8:	469e      	mov	lr, r3
 80057ea:	4770      	bx	lr
