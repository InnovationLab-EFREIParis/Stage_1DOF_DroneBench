
1DOF_Bench.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055f0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08005778  08005778  00015778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005858  08005858  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005858  08005858  00015858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005860  08005860  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005860  08005860  00015860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005864  08005864  00015864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005868  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  2000000c  08005874  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  08005874  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a0c5  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002981  00000000  00000000  0003a101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c0  00000000  00000000  0003ca88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011c8  00000000  00000000  0003dd48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029ac9  00000000  00000000  0003ef10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015b60  00000000  00000000  000689d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108cd0  00000000  00000000  0007e539  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00187209  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005000  00000000  00000000  0018725c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005760 	.word	0x08005760

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005760 	.word	0x08005760

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
		enum states etat;
		etat = idle_mode;
 80004c6:	2300      	movs	r3, #0
 80004c8:	71fb      	strb	r3, [r7, #7]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004ca:	f000 fcc5 	bl	8000e58 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004ce:	f000 f869 	bl	80005a4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004d2:	f000 f9d7 	bl	8000884 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80004d6:	f000 f9a5 	bl	8000824 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 80004da:	f000 f8b5 	bl	8000648 <MX_ADC1_Init>
	MX_TIM3_Init();
 80004de:	f000 f929 	bl	8000734 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	// Light up green led
	setGreenLed();
 80004e2:	f000 fa3a 	bl	800095a <setGreenLed>
	// blink green led
	blinkGreenLed(10, 100);
 80004e6:	2164      	movs	r1, #100	; 0x64
 80004e8:	200a      	movs	r0, #10
 80004ea:	f000 fa40 	bl	800096e <blinkGreenLed>
	// Welcome message on UART
	//sendWelcomeMsgRS232(&huart2);
	//la fonction au dessus pose des soucis
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80004ee:	2104      	movs	r1, #4
 80004f0:	4828      	ldr	r0, [pc, #160]	; (8000594 <main+0xd4>)
 80004f2:	f003 fb7f 	bl	8003bf4 <HAL_TIM_PWM_Start>
	TIM3->CCR2 = 1512;
 80004f6:	4b28      	ldr	r3, [pc, #160]	; (8000598 <main+0xd8>)
 80004f8:	f44f 62bd 	mov.w	r2, #1512	; 0x5e8
 80004fc:	639a      	str	r2, [r3, #56]	; 0x38
	y_print(&huart2, " 0 to 6 to change state \n");
 80004fe:	4927      	ldr	r1, [pc, #156]	; (800059c <main+0xdc>)
 8000500:	4827      	ldr	r0, [pc, #156]	; (80005a0 <main+0xe0>)
 8000502:	f000 fbcb 	bl	8000c9c <y_print>
	HAL_Delay(5000);
 8000506:	f241 3088 	movw	r0, #5000	; 0x1388
 800050a:	f000 fd21 	bl	8000f50 <HAL_Delay>

					//differents etats qu'on peut avoir
				//idle_mode,init_uc,init_motor,motor_ready,manual_mode,auto_mode,info_mode

		//---------changement d'etat-------
				display_state(etat, &huart2);
 800050e:	79fb      	ldrb	r3, [r7, #7]
 8000510:	4923      	ldr	r1, [pc, #140]	; (80005a0 <main+0xe0>)
 8000512:	4618      	mov	r0, r3
 8000514:	f000 fbd6 	bl	8000cc4 <display_state>
				__HAL_UART_CLEAR_OREFLAG(&huart2);//fonction qui change l'etat dans Yann.c
 8000518:	4b21      	ldr	r3, [pc, #132]	; (80005a0 <main+0xe0>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	2208      	movs	r2, #8
 800051e:	621a      	str	r2, [r3, #32]
						HAL_UART_Transmit(&huart2,(uint8_t*) r_buffer, 2, 10);
						HAL_Delay(50);

					}*/
				//idle_mode,init_uc,init_motor,motor_ready,manual_mode,auto_mode,info_mode
					 HAL_UART_Receive(&huart2,(uint8_t*) r_buffer, 2, 10);
 8000520:	1d39      	adds	r1, r7, #4
 8000522:	230a      	movs	r3, #10
 8000524:	2202      	movs	r2, #2
 8000526:	481e      	ldr	r0, [pc, #120]	; (80005a0 <main+0xe0>)
 8000528:	f004 fbe2 	bl	8004cf0 <HAL_UART_Receive>
					 HAL_Delay(50);
 800052c:	2032      	movs	r0, #50	; 0x32
 800052e:	f000 fd0f 	bl	8000f50 <HAL_Delay>
					 HAL_UART_Transmit(&huart2,(uint8_t*) r_buffer, 2, 10);
 8000532:	1d39      	adds	r1, r7, #4
 8000534:	230a      	movs	r3, #10
 8000536:	2202      	movs	r2, #2
 8000538:	4819      	ldr	r0, [pc, #100]	; (80005a0 <main+0xe0>)
 800053a:	f004 fb45 	bl	8004bc8 <HAL_UART_Transmit>
					 HAL_Delay(50);
 800053e:	2032      	movs	r0, #50	; 0x32
 8000540:	f000 fd06 	bl	8000f50 <HAL_Delay>
						if(r_buffer[0]=='0') etat=idle_mode;
 8000544:	793b      	ldrb	r3, [r7, #4]
 8000546:	2b30      	cmp	r3, #48	; 0x30
 8000548:	d101      	bne.n	800054e <main+0x8e>
 800054a:	2300      	movs	r3, #0
 800054c:	71fb      	strb	r3, [r7, #7]
						if(r_buffer[0]=='1') etat=init_uc;
 800054e:	793b      	ldrb	r3, [r7, #4]
 8000550:	2b31      	cmp	r3, #49	; 0x31
 8000552:	d101      	bne.n	8000558 <main+0x98>
 8000554:	2301      	movs	r3, #1
 8000556:	71fb      	strb	r3, [r7, #7]
						if(r_buffer[0]=='2') etat=init_motor;
 8000558:	793b      	ldrb	r3, [r7, #4]
 800055a:	2b32      	cmp	r3, #50	; 0x32
 800055c:	d101      	bne.n	8000562 <main+0xa2>
 800055e:	2302      	movs	r3, #2
 8000560:	71fb      	strb	r3, [r7, #7]
						if(r_buffer[0]=='3') etat=motor_ready;
 8000562:	793b      	ldrb	r3, [r7, #4]
 8000564:	2b33      	cmp	r3, #51	; 0x33
 8000566:	d101      	bne.n	800056c <main+0xac>
 8000568:	2303      	movs	r3, #3
 800056a:	71fb      	strb	r3, [r7, #7]
						if(r_buffer[0]=='4') etat=manual_mode;
 800056c:	793b      	ldrb	r3, [r7, #4]
 800056e:	2b34      	cmp	r3, #52	; 0x34
 8000570:	d101      	bne.n	8000576 <main+0xb6>
 8000572:	2304      	movs	r3, #4
 8000574:	71fb      	strb	r3, [r7, #7]
						if(r_buffer[0]=='5') etat=auto_mode;
 8000576:	793b      	ldrb	r3, [r7, #4]
 8000578:	2b35      	cmp	r3, #53	; 0x35
 800057a:	d101      	bne.n	8000580 <main+0xc0>
 800057c:	2305      	movs	r3, #5
 800057e:	71fb      	strb	r3, [r7, #7]
						if(r_buffer[0]=='6') etat=info_mode;
 8000580:	793b      	ldrb	r3, [r7, #4]
 8000582:	2b36      	cmp	r3, #54	; 0x36
 8000584:	d101      	bne.n	800058a <main+0xca>
 8000586:	2306      	movs	r3, #6
 8000588:	71fb      	strb	r3, [r7, #7]

						__HAL_UART_CLEAR_OREFLAG(&huart2);
 800058a:	4b05      	ldr	r3, [pc, #20]	; (80005a0 <main+0xe0>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	2208      	movs	r2, #8
 8000590:	621a      	str	r2, [r3, #32]
				display_state(etat, &huart2);
 8000592:	e7bc      	b.n	800050e <main+0x4e>
 8000594:	200000ac 	.word	0x200000ac
 8000598:	40000400 	.word	0x40000400
 800059c:	08005778 	.word	0x08005778
 80005a0:	20000028 	.word	0x20000028

080005a4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b096      	sub	sp, #88	; 0x58
 80005a8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80005aa:	f107 0314 	add.w	r3, r7, #20
 80005ae:	2244      	movs	r2, #68	; 0x44
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f005 f8cc 	bl	8005750 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80005b8:	463b      	mov	r3, r7
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
 80005c2:	60da      	str	r2, [r3, #12]
 80005c4:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 80005c6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005ca:	f001 ff5d 	bl	8002488 <HAL_PWREx_ControlVoltageScaling>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 80005d4:	f000 f9bc 	bl	8000950 <Error_Handler>
	}
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d8:	2302      	movs	r3, #2
 80005da:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005e0:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e2:	2310      	movs	r3, #16
 80005e4:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e6:	2302      	movs	r3, #2
 80005e8:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ea:	2302      	movs	r3, #2
 80005ec:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 80005ee:	2301      	movs	r3, #1
 80005f0:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 80005f2:	230a      	movs	r3, #10
 80005f4:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005f6:	2307      	movs	r3, #7
 80005f8:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005fa:	2302      	movs	r3, #2
 80005fc:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005fe:	2302      	movs	r3, #2
 8000600:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000602:	f107 0314 	add.w	r3, r7, #20
 8000606:	4618      	mov	r0, r3
 8000608:	f001 ff94 	bl	8002534 <HAL_RCC_OscConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0x72>
		Error_Handler();
 8000612:	f000 f99d 	bl	8000950 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000616:	230f      	movs	r3, #15
 8000618:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061a:	2303      	movs	r3, #3
 800061c:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061e:	2300      	movs	r3, #0
 8000620:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000622:	2300      	movs	r3, #0
 8000624:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000626:	2300      	movs	r3, #0
 8000628:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 800062a:	463b      	mov	r3, r7
 800062c:	2104      	movs	r1, #4
 800062e:	4618      	mov	r0, r3
 8000630:	f002 fb66 	bl	8002d00 <HAL_RCC_ClockConfig>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0x9a>
		Error_Handler();
 800063a:	f000 f989 	bl	8000950 <Error_Handler>
	}
}
 800063e:	bf00      	nop
 8000640:	3758      	adds	r7, #88	; 0x58
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
	...

08000648 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b08a      	sub	sp, #40	; 0x28
 800064c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 800064e:	f107 031c 	add.w	r3, r7, #28
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]
 8000658:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]
 8000668:	615a      	str	r2, [r3, #20]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 800066a:	4b2f      	ldr	r3, [pc, #188]	; (8000728 <MX_ADC1_Init+0xe0>)
 800066c:	4a2f      	ldr	r2, [pc, #188]	; (800072c <MX_ADC1_Init+0xe4>)
 800066e:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000670:	4b2d      	ldr	r3, [pc, #180]	; (8000728 <MX_ADC1_Init+0xe0>)
 8000672:	2200      	movs	r2, #0
 8000674:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000676:	4b2c      	ldr	r3, [pc, #176]	; (8000728 <MX_ADC1_Init+0xe0>)
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800067c:	4b2a      	ldr	r3, [pc, #168]	; (8000728 <MX_ADC1_Init+0xe0>)
 800067e:	2200      	movs	r2, #0
 8000680:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000682:	4b29      	ldr	r3, [pc, #164]	; (8000728 <MX_ADC1_Init+0xe0>)
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000688:	4b27      	ldr	r3, [pc, #156]	; (8000728 <MX_ADC1_Init+0xe0>)
 800068a:	2204      	movs	r2, #4
 800068c:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 800068e:	4b26      	ldr	r3, [pc, #152]	; (8000728 <MX_ADC1_Init+0xe0>)
 8000690:	2200      	movs	r2, #0
 8000692:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000694:	4b24      	ldr	r3, [pc, #144]	; (8000728 <MX_ADC1_Init+0xe0>)
 8000696:	2200      	movs	r2, #0
 8000698:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 800069a:	4b23      	ldr	r3, [pc, #140]	; (8000728 <MX_ADC1_Init+0xe0>)
 800069c:	2201      	movs	r2, #1
 800069e:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006a0:	4b21      	ldr	r3, [pc, #132]	; (8000728 <MX_ADC1_Init+0xe0>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006a8:	4b1f      	ldr	r3, [pc, #124]	; (8000728 <MX_ADC1_Init+0xe0>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006ae:	4b1e      	ldr	r3, [pc, #120]	; (8000728 <MX_ADC1_Init+0xe0>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80006b4:	4b1c      	ldr	r3, [pc, #112]	; (8000728 <MX_ADC1_Init+0xe0>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006bc:	4b1a      	ldr	r3, [pc, #104]	; (8000728 <MX_ADC1_Init+0xe0>)
 80006be:	2200      	movs	r2, #0
 80006c0:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 80006c2:	4b19      	ldr	r3, [pc, #100]	; (8000728 <MX_ADC1_Init+0xe0>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80006ca:	4817      	ldr	r0, [pc, #92]	; (8000728 <MX_ADC1_Init+0xe0>)
 80006cc:	f000 fdf0 	bl	80012b0 <HAL_ADC_Init>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_ADC1_Init+0x92>
		Error_Handler();
 80006d6:	f000 f93b 	bl	8000950 <Error_Handler>
	}
	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 80006da:	2300      	movs	r3, #0
 80006dc:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 80006de:	f107 031c 	add.w	r3, r7, #28
 80006e2:	4619      	mov	r1, r3
 80006e4:	4810      	ldr	r0, [pc, #64]	; (8000728 <MX_ADC1_Init+0xe0>)
 80006e6:	f001 fb4f 	bl	8001d88 <HAL_ADCEx_MultiModeConfigChannel>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_ADC1_Init+0xac>
		Error_Handler();
 80006f0:	f000 f92e 	bl	8000950 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 80006f4:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <MX_ADC1_Init+0xe8>)
 80006f6:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80006f8:	2306      	movs	r3, #6
 80006fa:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006fc:	2300      	movs	r3, #0
 80006fe:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000700:	237f      	movs	r3, #127	; 0x7f
 8000702:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000704:	2304      	movs	r3, #4
 8000706:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8000708:	2300      	movs	r3, #0
 800070a:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	4619      	mov	r1, r3
 8000710:	4805      	ldr	r0, [pc, #20]	; (8000728 <MX_ADC1_Init+0xe0>)
 8000712:	f000 ff23 	bl	800155c <HAL_ADC_ConfigChannel>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_ADC1_Init+0xd8>
		Error_Handler();
 800071c:	f000 f918 	bl	8000950 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000720:	bf00      	nop
 8000722:	3728      	adds	r7, #40	; 0x28
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	200000fc 	.word	0x200000fc
 800072c:	50040000 	.word	0x50040000
 8000730:	14f00020 	.word	0x14f00020

08000734 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000734:	b580      	push	{r7, lr}
 8000736:	b08e      	sub	sp, #56	; 0x38
 8000738:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800073a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000748:	f107 031c 	add.w	r3, r7, #28
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000754:	463b      	mov	r3, r7
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
 8000760:	611a      	str	r2, [r3, #16]
 8000762:	615a      	str	r2, [r3, #20]
 8000764:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000766:	4b2d      	ldr	r3, [pc, #180]	; (800081c <MX_TIM3_Init+0xe8>)
 8000768:	4a2d      	ldr	r2, [pc, #180]	; (8000820 <MX_TIM3_Init+0xec>)
 800076a:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 38;	  		//38
 800076c:	4b2b      	ldr	r3, [pc, #172]	; (800081c <MX_TIM3_Init+0xe8>)
 800076e:	2226      	movs	r2, #38	; 0x26
 8000770:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000772:	4b2a      	ldr	r3, [pc, #168]	; (800081c <MX_TIM3_Init+0xe8>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 4096;
 8000778:	4b28      	ldr	r3, [pc, #160]	; (800081c <MX_TIM3_Init+0xe8>)
 800077a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800077e:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000780:	4b26      	ldr	r3, [pc, #152]	; (800081c <MX_TIM3_Init+0xe8>)
 8000782:	2200      	movs	r2, #0
 8000784:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000786:	4b25      	ldr	r3, [pc, #148]	; (800081c <MX_TIM3_Init+0xe8>)
 8000788:	2200      	movs	r2, #0
 800078a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 800078c:	4823      	ldr	r0, [pc, #140]	; (800081c <MX_TIM3_Init+0xe8>)
 800078e:	f003 f979 	bl	8003a84 <HAL_TIM_Base_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_TIM3_Init+0x68>
		Error_Handler();
 8000798:	f000 f8da 	bl	8000950 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800079c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a0:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80007a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007a6:	4619      	mov	r1, r3
 80007a8:	481c      	ldr	r0, [pc, #112]	; (800081c <MX_TIM3_Init+0xe8>)
 80007aa:	f003 fc3d 	bl	8004028 <HAL_TIM_ConfigClockSource>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_TIM3_Init+0x84>
		Error_Handler();
 80007b4:	f000 f8cc 	bl	8000950 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 80007b8:	4818      	ldr	r0, [pc, #96]	; (800081c <MX_TIM3_Init+0xe8>)
 80007ba:	f003 f9ba 	bl	8003b32 <HAL_TIM_PWM_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_TIM3_Init+0x94>
		Error_Handler();
 80007c4:	f000 f8c4 	bl	8000950 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007cc:	2300      	movs	r3, #0
 80007ce:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80007d0:	f107 031c 	add.w	r3, r7, #28
 80007d4:	4619      	mov	r1, r3
 80007d6:	4811      	ldr	r0, [pc, #68]	; (800081c <MX_TIM3_Init+0xe8>)
 80007d8:	f004 f920 	bl	8004a1c <HAL_TIMEx_MasterConfigSynchronization>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_TIM3_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 80007e2:	f000 f8b5 	bl	8000950 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007e6:	2360      	movs	r3, #96	; 0x60
 80007e8:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007ee:	2300      	movs	r3, #0
 80007f0:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007f2:	2300      	movs	r3, #0
 80007f4:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 80007f6:	463b      	mov	r3, r7
 80007f8:	2204      	movs	r2, #4
 80007fa:	4619      	mov	r1, r3
 80007fc:	4807      	ldr	r0, [pc, #28]	; (800081c <MX_TIM3_Init+0xe8>)
 80007fe:	f003 faff 	bl	8003e00 <HAL_TIM_PWM_ConfigChannel>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_TIM3_Init+0xd8>
			!= HAL_OK) {
		Error_Handler();
 8000808:	f000 f8a2 	bl	8000950 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 800080c:	4803      	ldr	r0, [pc, #12]	; (800081c <MX_TIM3_Init+0xe8>)
 800080e:	f000 f977 	bl	8000b00 <HAL_TIM_MspPostInit>

}
 8000812:	bf00      	nop
 8000814:	3738      	adds	r7, #56	; 0x38
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	200000ac 	.word	0x200000ac
 8000820:	40000400 	.word	0x40000400

08000824 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000828:	4b14      	ldr	r3, [pc, #80]	; (800087c <MX_USART2_UART_Init+0x58>)
 800082a:	4a15      	ldr	r2, [pc, #84]	; (8000880 <MX_USART2_UART_Init+0x5c>)
 800082c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800082e:	4b13      	ldr	r3, [pc, #76]	; (800087c <MX_USART2_UART_Init+0x58>)
 8000830:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000834:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000836:	4b11      	ldr	r3, [pc, #68]	; (800087c <MX_USART2_UART_Init+0x58>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800083c:	4b0f      	ldr	r3, [pc, #60]	; (800087c <MX_USART2_UART_Init+0x58>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <MX_USART2_UART_Init+0x58>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000848:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MX_USART2_UART_Init+0x58>)
 800084a:	220c      	movs	r2, #12
 800084c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <MX_USART2_UART_Init+0x58>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000854:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_USART2_UART_Init+0x58>)
 8000856:	2200      	movs	r2, #0
 8000858:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <MX_USART2_UART_Init+0x58>)
 800085c:	2200      	movs	r2, #0
 800085e:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <MX_USART2_UART_Init+0x58>)
 8000862:	2200      	movs	r2, #0
 8000864:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000866:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_USART2_UART_Init+0x58>)
 8000868:	f004 f960 	bl	8004b2c <HAL_UART_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 8000872:	f000 f86d 	bl	8000950 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000028 	.word	0x20000028
 8000880:	40004400 	.word	0x40004400

08000884 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b08a      	sub	sp, #40	; 0x28
 8000888:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800088a:	f107 0314 	add.w	r3, r7, #20
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]
 8000898:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800089a:	4b2b      	ldr	r3, [pc, #172]	; (8000948 <MX_GPIO_Init+0xc4>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089e:	4a2a      	ldr	r2, [pc, #168]	; (8000948 <MX_GPIO_Init+0xc4>)
 80008a0:	f043 0304 	orr.w	r3, r3, #4
 80008a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008a6:	4b28      	ldr	r3, [pc, #160]	; (8000948 <MX_GPIO_Init+0xc4>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008aa:	f003 0304 	and.w	r3, r3, #4
 80008ae:	613b      	str	r3, [r7, #16]
 80008b0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80008b2:	4b25      	ldr	r3, [pc, #148]	; (8000948 <MX_GPIO_Init+0xc4>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b6:	4a24      	ldr	r2, [pc, #144]	; (8000948 <MX_GPIO_Init+0xc4>)
 80008b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008be:	4b22      	ldr	r3, [pc, #136]	; (8000948 <MX_GPIO_Init+0xc4>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008ca:	4b1f      	ldr	r3, [pc, #124]	; (8000948 <MX_GPIO_Init+0xc4>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ce:	4a1e      	ldr	r2, [pc, #120]	; (8000948 <MX_GPIO_Init+0xc4>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008d6:	4b1c      	ldr	r3, [pc, #112]	; (8000948 <MX_GPIO_Init+0xc4>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	60bb      	str	r3, [r7, #8]
 80008e0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80008e2:	4b19      	ldr	r3, [pc, #100]	; (8000948 <MX_GPIO_Init+0xc4>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e6:	4a18      	ldr	r2, [pc, #96]	; (8000948 <MX_GPIO_Init+0xc4>)
 80008e8:	f043 0302 	orr.w	r3, r3, #2
 80008ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ee:	4b16      	ldr	r3, [pc, #88]	; (8000948 <MX_GPIO_Init+0xc4>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f2:	f003 0302 	and.w	r3, r3, #2
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2120      	movs	r1, #32
 80008fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000902:	f001 fd81 	bl	8002408 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000906:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800090a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800090c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000910:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000916:	f107 0314 	add.w	r3, r7, #20
 800091a:	4619      	mov	r1, r3
 800091c:	480b      	ldr	r0, [pc, #44]	; (800094c <MX_GPIO_Init+0xc8>)
 800091e:	f001 fbc9 	bl	80020b4 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000922:	2320      	movs	r3, #32
 8000924:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000926:	2301      	movs	r3, #1
 8000928:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000932:	f107 0314 	add.w	r3, r7, #20
 8000936:	4619      	mov	r1, r3
 8000938:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800093c:	f001 fbba 	bl	80020b4 <HAL_GPIO_Init>

}
 8000940:	bf00      	nop
 8000942:	3728      	adds	r7, #40	; 0x28
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40021000 	.word	0x40021000
 800094c:	48000800 	.word	0x48000800

08000950 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000954:	b672      	cpsid	i
}
 8000956:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000958:	e7fe      	b.n	8000958 <Error_Handler+0x8>

0800095a <setGreenLed>:
#include  <stdio.h>
#include  <errno.h>
#include  <sys/unistd.h> // STDOUT_FILENO, STDERR_FILENO

// On board green LED On
void setGreenLed() {
 800095a:	b580      	push	{r7, lr}
 800095c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 800095e:	2201      	movs	r2, #1
 8000960:	2120      	movs	r1, #32
 8000962:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000966:	f001 fd4f 	bl	8002408 <HAL_GPIO_WritePin>
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}

0800096e <blinkGreenLed>:

// On board green LED blink
void blinkGreenLed(int nb, int delay) {
 800096e:	b580      	push	{r7, lr}
 8000970:	b084      	sub	sp, #16
 8000972:	af00      	add	r7, sp, #0
 8000974:	6078      	str	r0, [r7, #4]
 8000976:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < nb; i++) {
 8000978:	2300      	movs	r3, #0
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	e00b      	b.n	8000996 <blinkGreenLed+0x28>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800097e:	2120      	movs	r1, #32
 8000980:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000984:	f001 fd58 	bl	8002438 <HAL_GPIO_TogglePin>
		HAL_Delay(delay);
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	4618      	mov	r0, r3
 800098c:	f000 fae0 	bl	8000f50 <HAL_Delay>
	for (int i = 0; i < nb; i++) {
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	3301      	adds	r3, #1
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	68fa      	ldr	r2, [r7, #12]
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	429a      	cmp	r2, r3
 800099c:	dbef      	blt.n	800097e <blinkGreenLed+0x10>
	}
}
 800099e:	bf00      	nop
 80009a0:	bf00      	nop
 80009a2:	3710      	adds	r7, #16
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ae:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <HAL_MspInit+0x44>)
 80009b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009b2:	4a0e      	ldr	r2, [pc, #56]	; (80009ec <HAL_MspInit+0x44>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	6613      	str	r3, [r2, #96]	; 0x60
 80009ba:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <HAL_MspInit+0x44>)
 80009bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	607b      	str	r3, [r7, #4]
 80009c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c6:	4b09      	ldr	r3, [pc, #36]	; (80009ec <HAL_MspInit+0x44>)
 80009c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ca:	4a08      	ldr	r2, [pc, #32]	; (80009ec <HAL_MspInit+0x44>)
 80009cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d0:	6593      	str	r3, [r2, #88]	; 0x58
 80009d2:	4b06      	ldr	r3, [pc, #24]	; (80009ec <HAL_MspInit+0x44>)
 80009d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009da:	603b      	str	r3, [r7, #0]
 80009dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009de:	bf00      	nop
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	40021000 	.word	0x40021000

080009f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b0ac      	sub	sp, #176	; 0xb0
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
 8000a06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	2288      	movs	r2, #136	; 0x88
 8000a0e:	2100      	movs	r1, #0
 8000a10:	4618      	mov	r0, r3
 8000a12:	f004 fe9d 	bl	8005750 <memset>
  if(hadc->Instance==ADC1)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4a27      	ldr	r2, [pc, #156]	; (8000ab8 <HAL_ADC_MspInit+0xc8>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d147      	bne.n	8000ab0 <HAL_ADC_MspInit+0xc0>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a20:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a24:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000a26:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000a32:	2301      	movs	r3, #1
 8000a34:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000a36:	2308      	movs	r3, #8
 8000a38:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000a3a:	2307      	movs	r3, #7
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000a42:	2302      	movs	r3, #2
 8000a44:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000a46:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a4a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a4c:	f107 0314 	add.w	r3, r7, #20
 8000a50:	4618      	mov	r0, r3
 8000a52:	f002 fb5b 	bl	800310c <HAL_RCCEx_PeriphCLKConfig>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000a5c:	f7ff ff78 	bl	8000950 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000a60:	4b16      	ldr	r3, [pc, #88]	; (8000abc <HAL_ADC_MspInit+0xcc>)
 8000a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a64:	4a15      	ldr	r2, [pc, #84]	; (8000abc <HAL_ADC_MspInit+0xcc>)
 8000a66:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a6c:	4b13      	ldr	r3, [pc, #76]	; (8000abc <HAL_ADC_MspInit+0xcc>)
 8000a6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a74:	613b      	str	r3, [r7, #16]
 8000a76:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a78:	4b10      	ldr	r3, [pc, #64]	; (8000abc <HAL_ADC_MspInit+0xcc>)
 8000a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7c:	4a0f      	ldr	r2, [pc, #60]	; (8000abc <HAL_ADC_MspInit+0xcc>)
 8000a7e:	f043 0301 	orr.w	r3, r3, #1
 8000a82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a84:	4b0d      	ldr	r3, [pc, #52]	; (8000abc <HAL_ADC_MspInit+0xcc>)
 8000a86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a88:	f003 0301 	and.w	r3, r3, #1
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a90:	2301      	movs	r3, #1
 8000a92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a96:	230b      	movs	r3, #11
 8000a98:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aac:	f001 fb02 	bl	80020b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ab0:	bf00      	nop
 8000ab2:	37b0      	adds	r7, #176	; 0xb0
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	50040000 	.word	0x50040000
 8000abc:	40021000 	.word	0x40021000

08000ac0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b085      	sub	sp, #20
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a0a      	ldr	r2, [pc, #40]	; (8000af8 <HAL_TIM_Base_MspInit+0x38>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d10b      	bne.n	8000aea <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ad2:	4b0a      	ldr	r3, [pc, #40]	; (8000afc <HAL_TIM_Base_MspInit+0x3c>)
 8000ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ad6:	4a09      	ldr	r2, [pc, #36]	; (8000afc <HAL_TIM_Base_MspInit+0x3c>)
 8000ad8:	f043 0302 	orr.w	r3, r3, #2
 8000adc:	6593      	str	r3, [r2, #88]	; 0x58
 8000ade:	4b07      	ldr	r3, [pc, #28]	; (8000afc <HAL_TIM_Base_MspInit+0x3c>)
 8000ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ae2:	f003 0302 	and.w	r3, r3, #2
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000aea:	bf00      	nop
 8000aec:	3714      	adds	r7, #20
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	40000400 	.word	0x40000400
 8000afc:	40021000 	.word	0x40021000

08000b00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b088      	sub	sp, #32
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	f107 030c 	add.w	r3, r7, #12
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a11      	ldr	r2, [pc, #68]	; (8000b64 <HAL_TIM_MspPostInit+0x64>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d11c      	bne.n	8000b5c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b22:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <HAL_TIM_MspPostInit+0x68>)
 8000b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b26:	4a10      	ldr	r2, [pc, #64]	; (8000b68 <HAL_TIM_MspPostInit+0x68>)
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <HAL_TIM_MspPostInit+0x68>)
 8000b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	60bb      	str	r3, [r7, #8]
 8000b38:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b3a:	2380      	movs	r3, #128	; 0x80
 8000b3c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b46:	2300      	movs	r3, #0
 8000b48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4e:	f107 030c 	add.w	r3, r7, #12
 8000b52:	4619      	mov	r1, r3
 8000b54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b58:	f001 faac 	bl	80020b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000b5c:	bf00      	nop
 8000b5e:	3720      	adds	r7, #32
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40000400 	.word	0x40000400
 8000b68:	40021000 	.word	0x40021000

08000b6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b0ac      	sub	sp, #176	; 0xb0
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	2288      	movs	r2, #136	; 0x88
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f004 fddf 	bl	8005750 <memset>
  if(huart->Instance==USART2)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a21      	ldr	r2, [pc, #132]	; (8000c1c <HAL_UART_MspInit+0xb0>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d13b      	bne.n	8000c14 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f002 faaf 	bl	800310c <HAL_RCCEx_PeriphCLKConfig>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000bb4:	f7ff fecc 	bl	8000950 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bb8:	4b19      	ldr	r3, [pc, #100]	; (8000c20 <HAL_UART_MspInit+0xb4>)
 8000bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bbc:	4a18      	ldr	r2, [pc, #96]	; (8000c20 <HAL_UART_MspInit+0xb4>)
 8000bbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc2:	6593      	str	r3, [r2, #88]	; 0x58
 8000bc4:	4b16      	ldr	r3, [pc, #88]	; (8000c20 <HAL_UART_MspInit+0xb4>)
 8000bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bcc:	613b      	str	r3, [r7, #16]
 8000bce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd0:	4b13      	ldr	r3, [pc, #76]	; (8000c20 <HAL_UART_MspInit+0xb4>)
 8000bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd4:	4a12      	ldr	r2, [pc, #72]	; (8000c20 <HAL_UART_MspInit+0xb4>)
 8000bd6:	f043 0301 	orr.w	r3, r3, #1
 8000bda:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bdc:	4b10      	ldr	r3, [pc, #64]	; (8000c20 <HAL_UART_MspInit+0xb4>)
 8000bde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be0:	f003 0301 	and.w	r3, r3, #1
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000be8:	230c      	movs	r3, #12
 8000bea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c00:	2307      	movs	r3, #7
 8000c02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c06:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c10:	f001 fa50 	bl	80020b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c14:	bf00      	nop
 8000c16:	37b0      	adds	r7, #176	; 0xb0
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40004400 	.word	0x40004400
 8000c20:	40021000 	.word	0x40021000

08000c24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c28:	e7fe      	b.n	8000c28 <NMI_Handler+0x4>

08000c2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c2e:	e7fe      	b.n	8000c2e <HardFault_Handler+0x4>

08000c30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <MemManage_Handler+0x4>

08000c36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c3a:	e7fe      	b.n	8000c3a <BusFault_Handler+0x4>

08000c3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <UsageFault_Handler+0x4>

08000c42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr

08000c5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c70:	f000 f94e 	bl	8000f10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c7c:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <SystemInit+0x20>)
 8000c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c82:	4a05      	ldr	r2, [pc, #20]	; (8000c98 <SystemInit+0x20>)
 8000c84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <y_print>:
void load_pwm(TIM_HandleTypeDef htimX, int val) {

	htimX.Instance->CCR2 = val;
}

void y_print(UART_HandleTypeDef *huart, char *mess) {
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	6039      	str	r1, [r7, #0]

	if (HAL_UART_Transmit(huart, (uint8_t*) mess,30, 100) != HAL_OK)
 8000ca6:	2364      	movs	r3, #100	; 0x64
 8000ca8:	221e      	movs	r2, #30
 8000caa:	6839      	ldr	r1, [r7, #0]
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f003 ff8b 	bl	8004bc8 <HAL_UART_Transmit>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <y_print+0x20>
		Error_Handler();
 8000cb8:	f7ff fe4a 	bl	8000950 <Error_Handler>
}
 8000cbc:	bf00      	nop
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <display_state>:

void display_state(enum states etat, UART_HandleTypeDef *huart) {
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	6039      	str	r1, [r7, #0]
 8000cce:	71fb      	strb	r3, [r7, #7]
	switch (etat) {
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	2b06      	cmp	r3, #6
 8000cd4:	f200 8082 	bhi.w	8000ddc <display_state+0x118>
 8000cd8:	a201      	add	r2, pc, #4	; (adr r2, 8000ce0 <display_state+0x1c>)
 8000cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cde:	bf00      	nop
 8000ce0:	08000cfd 	.word	0x08000cfd
 8000ce4:	08000d3d 	.word	0x08000d3d
 8000ce8:	08000d5d 	.word	0x08000d5d
 8000cec:	08000d7d 	.word	0x08000d7d
 8000cf0:	08000dbd 	.word	0x08000dbd
 8000cf4:	08000d9d 	.word	0x08000d9d
 8000cf8:	08000d1d 	.word	0x08000d1d

	case idle_mode:
		if (HAL_UART_Transmit(huart, (uint8_t*) "Idle mode \n\r", 15, 100)
 8000cfc:	2364      	movs	r3, #100	; 0x64
 8000cfe:	220f      	movs	r2, #15
 8000d00:	4939      	ldr	r1, [pc, #228]	; (8000de8 <display_state+0x124>)
 8000d02:	6838      	ldr	r0, [r7, #0]
 8000d04:	f003 ff60 	bl	8004bc8 <HAL_UART_Transmit>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <display_state+0x4e>
				!= HAL_OK)
			Error_Handler();
 8000d0e:	f7ff fe1f 	bl	8000950 <Error_Handler>
		HAL_Delay(3000);
 8000d12:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000d16:	f000 f91b 	bl	8000f50 <HAL_Delay>

		break;
 8000d1a:	e060      	b.n	8000dde <display_state+0x11a>
	case info_mode:
		if (HAL_UART_Transmit(huart, (uint8_t*) "Info mode\n\r", 15, 100)
 8000d1c:	2364      	movs	r3, #100	; 0x64
 8000d1e:	220f      	movs	r2, #15
 8000d20:	4932      	ldr	r1, [pc, #200]	; (8000dec <display_state+0x128>)
 8000d22:	6838      	ldr	r0, [r7, #0]
 8000d24:	f003 ff50 	bl	8004bc8 <HAL_UART_Transmit>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <display_state+0x6e>
				!= HAL_OK)
			Error_Handler();
 8000d2e:	f7ff fe0f 	bl	8000950 <Error_Handler>
		HAL_Delay(3000);
 8000d32:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000d36:	f000 f90b 	bl	8000f50 <HAL_Delay>

		break;
 8000d3a:	e050      	b.n	8000dde <display_state+0x11a>
	case init_uc:
		if (HAL_UART_Transmit(huart, (uint8_t*) "UC Initialization \n\r", 25,
 8000d3c:	2364      	movs	r3, #100	; 0x64
 8000d3e:	2219      	movs	r2, #25
 8000d40:	492b      	ldr	r1, [pc, #172]	; (8000df0 <display_state+0x12c>)
 8000d42:	6838      	ldr	r0, [r7, #0]
 8000d44:	f003 ff40 	bl	8004bc8 <HAL_UART_Transmit>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <display_state+0x8e>
				100) != HAL_OK)
			Error_Handler();
 8000d4e:	f7ff fdff 	bl	8000950 <Error_Handler>
		HAL_Delay(3000);
 8000d52:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000d56:	f000 f8fb 	bl	8000f50 <HAL_Delay>
		break;
 8000d5a:	e040      	b.n	8000dde <display_state+0x11a>
	case init_motor:
		if (HAL_UART_Transmit(huart, (uint8_t*) "Motor Initialization \n\r", 27,
 8000d5c:	2364      	movs	r3, #100	; 0x64
 8000d5e:	221b      	movs	r2, #27
 8000d60:	4924      	ldr	r1, [pc, #144]	; (8000df4 <display_state+0x130>)
 8000d62:	6838      	ldr	r0, [r7, #0]
 8000d64:	f003 ff30 	bl	8004bc8 <HAL_UART_Transmit>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <display_state+0xae>
				100) != HAL_OK)
			Error_Handler();
 8000d6e:	f7ff fdef 	bl	8000950 <Error_Handler>
		HAL_Delay(3000);
 8000d72:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000d76:	f000 f8eb 	bl	8000f50 <HAL_Delay>
		break;
 8000d7a:	e030      	b.n	8000dde <display_state+0x11a>
	case motor_ready:
		if (HAL_UART_Transmit(huart, (uint8_t*) "Motor ready \n\r", 15, 100)
 8000d7c:	2364      	movs	r3, #100	; 0x64
 8000d7e:	220f      	movs	r2, #15
 8000d80:	491d      	ldr	r1, [pc, #116]	; (8000df8 <display_state+0x134>)
 8000d82:	6838      	ldr	r0, [r7, #0]
 8000d84:	f003 ff20 	bl	8004bc8 <HAL_UART_Transmit>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <display_state+0xce>
				!= HAL_OK)
			Error_Handler();
 8000d8e:	f7ff fddf 	bl	8000950 <Error_Handler>
		HAL_Delay(3000);
 8000d92:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000d96:	f000 f8db 	bl	8000f50 <HAL_Delay>

		break;
 8000d9a:	e020      	b.n	8000dde <display_state+0x11a>
	case auto_mode:
		if (HAL_UART_Transmit(huart, (uint8_t*) "Auto mode \n\r", 15, 100)
 8000d9c:	2364      	movs	r3, #100	; 0x64
 8000d9e:	220f      	movs	r2, #15
 8000da0:	4916      	ldr	r1, [pc, #88]	; (8000dfc <display_state+0x138>)
 8000da2:	6838      	ldr	r0, [r7, #0]
 8000da4:	f003 ff10 	bl	8004bc8 <HAL_UART_Transmit>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <display_state+0xee>
				!= HAL_OK)
			Error_Handler();
 8000dae:	f7ff fdcf 	bl	8000950 <Error_Handler>
		HAL_Delay(3000);
 8000db2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000db6:	f000 f8cb 	bl	8000f50 <HAL_Delay>

		break;
 8000dba:	e010      	b.n	8000dde <display_state+0x11a>
	case manual_mode:
		if (HAL_UART_Transmit(huart, (uint8_t*) "Manual mode \n\r", 15, 100)
 8000dbc:	2364      	movs	r3, #100	; 0x64
 8000dbe:	220f      	movs	r2, #15
 8000dc0:	490f      	ldr	r1, [pc, #60]	; (8000e00 <display_state+0x13c>)
 8000dc2:	6838      	ldr	r0, [r7, #0]
 8000dc4:	f003 ff00 	bl	8004bc8 <HAL_UART_Transmit>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <display_state+0x10e>
				!= HAL_OK)
			Error_Handler();
 8000dce:	f7ff fdbf 	bl	8000950 <Error_Handler>
		HAL_Delay(3000);
 8000dd2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000dd6:	f000 f8bb 	bl	8000f50 <HAL_Delay>

		break;
 8000dda:	e000      	b.n	8000dde <display_state+0x11a>
	default:
		break;
 8000ddc:	bf00      	nop

	}

}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	08005794 	.word	0x08005794
 8000dec:	080057a4 	.word	0x080057a4
 8000df0:	080057b0 	.word	0x080057b0
 8000df4:	080057c8 	.word	0x080057c8
 8000df8:	080057e0 	.word	0x080057e0
 8000dfc:	080057f0 	.word	0x080057f0
 8000e00:	08005800 	.word	0x08005800

08000e04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e3c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e08:	f7ff ff36 	bl	8000c78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e0c:	480c      	ldr	r0, [pc, #48]	; (8000e40 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e0e:	490d      	ldr	r1, [pc, #52]	; (8000e44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e10:	4a0d      	ldr	r2, [pc, #52]	; (8000e48 <LoopForever+0xe>)
  movs r3, #0
 8000e12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e14:	e002      	b.n	8000e1c <LoopCopyDataInit>

08000e16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e1a:	3304      	adds	r3, #4

08000e1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e20:	d3f9      	bcc.n	8000e16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e22:	4a0a      	ldr	r2, [pc, #40]	; (8000e4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e24:	4c0a      	ldr	r4, [pc, #40]	; (8000e50 <LoopForever+0x16>)
  movs r3, #0
 8000e26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e28:	e001      	b.n	8000e2e <LoopFillZerobss>

08000e2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e2c:	3204      	adds	r2, #4

08000e2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e30:	d3fb      	bcc.n	8000e2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e32:	f004 fc69 	bl	8005708 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e36:	f7ff fb43 	bl	80004c0 <main>

08000e3a <LoopForever>:

LoopForever:
    b LoopForever
 8000e3a:	e7fe      	b.n	8000e3a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e3c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e44:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e48:	08005868 	.word	0x08005868
  ldr r2, =_sbss
 8000e4c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e50:	20000168 	.word	0x20000168

08000e54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e54:	e7fe      	b.n	8000e54 <ADC1_2_IRQHandler>
	...

08000e58 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e62:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <HAL_Init+0x3c>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a0b      	ldr	r2, [pc, #44]	; (8000e94 <HAL_Init+0x3c>)
 8000e68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e6c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e6e:	2003      	movs	r0, #3
 8000e70:	f001 f8ec 	bl	800204c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e74:	2000      	movs	r0, #0
 8000e76:	f000 f80f 	bl	8000e98 <HAL_InitTick>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d002      	beq.n	8000e86 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e80:	2301      	movs	r3, #1
 8000e82:	71fb      	strb	r3, [r7, #7]
 8000e84:	e001      	b.n	8000e8a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e86:	f7ff fd8f 	bl	80009a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40022000 	.word	0x40022000

08000e98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ea4:	4b17      	ldr	r3, [pc, #92]	; (8000f04 <HAL_InitTick+0x6c>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d023      	beq.n	8000ef4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000eac:	4b16      	ldr	r3, [pc, #88]	; (8000f08 <HAL_InitTick+0x70>)
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <HAL_InitTick+0x6c>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f001 f8e9 	bl	800209a <HAL_SYSTICK_Config>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d10f      	bne.n	8000eee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2b0f      	cmp	r3, #15
 8000ed2:	d809      	bhi.n	8000ee8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	6879      	ldr	r1, [r7, #4]
 8000ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8000edc:	f001 f8c1 	bl	8002062 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ee0:	4a0a      	ldr	r2, [pc, #40]	; (8000f0c <HAL_InitTick+0x74>)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6013      	str	r3, [r2, #0]
 8000ee6:	e007      	b.n	8000ef8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	73fb      	strb	r3, [r7, #15]
 8000eec:	e004      	b.n	8000ef8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	73fb      	strb	r3, [r7, #15]
 8000ef2:	e001      	b.n	8000ef8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000008 	.word	0x20000008
 8000f08:	20000000 	.word	0x20000000
 8000f0c:	20000004 	.word	0x20000004

08000f10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <HAL_IncTick+0x20>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <HAL_IncTick+0x24>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4413      	add	r3, r2
 8000f20:	4a04      	ldr	r2, [pc, #16]	; (8000f34 <HAL_IncTick+0x24>)
 8000f22:	6013      	str	r3, [r2, #0]
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	20000008 	.word	0x20000008
 8000f34:	20000164 	.word	0x20000164

08000f38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f3c:	4b03      	ldr	r3, [pc, #12]	; (8000f4c <HAL_GetTick+0x14>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	20000164 	.word	0x20000164

08000f50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f58:	f7ff ffee 	bl	8000f38 <HAL_GetTick>
 8000f5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f68:	d005      	beq.n	8000f76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f6a:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <HAL_Delay+0x44>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	4413      	add	r3, r2
 8000f74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f76:	bf00      	nop
 8000f78:	f7ff ffde 	bl	8000f38 <HAL_GetTick>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	68fa      	ldr	r2, [r7, #12]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d8f7      	bhi.n	8000f78 <HAL_Delay+0x28>
  {
  }
}
 8000f88:	bf00      	nop
 8000f8a:	bf00      	nop
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000008 	.word	0x20000008

08000f98 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	431a      	orrs	r2, r3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
}
 8000fb2:	bf00      	nop
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	b083      	sub	sp, #12
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
 8000fc6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001000:	b480      	push	{r7}
 8001002:	b087      	sub	sp, #28
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
 800100c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	3360      	adds	r3, #96	; 0x60
 8001012:	461a      	mov	r2, r3
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	4413      	add	r3, r2
 800101a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	4b08      	ldr	r3, [pc, #32]	; (8001044 <LL_ADC_SetOffset+0x44>)
 8001022:	4013      	ands	r3, r2
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800102a:	683a      	ldr	r2, [r7, #0]
 800102c:	430a      	orrs	r2, r1
 800102e:	4313      	orrs	r3, r2
 8001030:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001038:	bf00      	nop
 800103a:	371c      	adds	r7, #28
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	03fff000 	.word	0x03fff000

08001048 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3360      	adds	r3, #96	; 0x60
 8001056:	461a      	mov	r2, r3
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	4413      	add	r3, r2
 800105e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001068:	4618      	mov	r0, r3
 800106a:	3714      	adds	r7, #20
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001074:	b480      	push	{r7}
 8001076:	b087      	sub	sp, #28
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	3360      	adds	r3, #96	; 0x60
 8001084:	461a      	mov	r2, r3
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	4413      	add	r3, r2
 800108c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	431a      	orrs	r2, r3
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800109e:	bf00      	nop
 80010a0:	371c      	adds	r7, #28
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80010aa:	b480      	push	{r7}
 80010ac:	b087      	sub	sp, #28
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	60f8      	str	r0, [r7, #12]
 80010b2:	60b9      	str	r1, [r7, #8]
 80010b4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	3330      	adds	r3, #48	; 0x30
 80010ba:	461a      	mov	r2, r3
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	0a1b      	lsrs	r3, r3, #8
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	f003 030c 	and.w	r3, r3, #12
 80010c6:	4413      	add	r3, r2
 80010c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	f003 031f 	and.w	r3, r3, #31
 80010d4:	211f      	movs	r1, #31
 80010d6:	fa01 f303 	lsl.w	r3, r1, r3
 80010da:	43db      	mvns	r3, r3
 80010dc:	401a      	ands	r2, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	0e9b      	lsrs	r3, r3, #26
 80010e2:	f003 011f 	and.w	r1, r3, #31
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	f003 031f 	and.w	r3, r3, #31
 80010ec:	fa01 f303 	lsl.w	r3, r1, r3
 80010f0:	431a      	orrs	r2, r3
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80010f6:	bf00      	nop
 80010f8:	371c      	adds	r7, #28
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001102:	b480      	push	{r7}
 8001104:	b087      	sub	sp, #28
 8001106:	af00      	add	r7, sp, #0
 8001108:	60f8      	str	r0, [r7, #12]
 800110a:	60b9      	str	r1, [r7, #8]
 800110c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	3314      	adds	r3, #20
 8001112:	461a      	mov	r2, r3
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	0e5b      	lsrs	r3, r3, #25
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	f003 0304 	and.w	r3, r3, #4
 800111e:	4413      	add	r3, r2
 8001120:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	0d1b      	lsrs	r3, r3, #20
 800112a:	f003 031f 	and.w	r3, r3, #31
 800112e:	2107      	movs	r1, #7
 8001130:	fa01 f303 	lsl.w	r3, r1, r3
 8001134:	43db      	mvns	r3, r3
 8001136:	401a      	ands	r2, r3
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	0d1b      	lsrs	r3, r3, #20
 800113c:	f003 031f 	and.w	r3, r3, #31
 8001140:	6879      	ldr	r1, [r7, #4]
 8001142:	fa01 f303 	lsl.w	r3, r1, r3
 8001146:	431a      	orrs	r2, r3
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800114c:	bf00      	nop
 800114e:	371c      	adds	r7, #28
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001170:	43db      	mvns	r3, r3
 8001172:	401a      	ands	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f003 0318 	and.w	r3, r3, #24
 800117a:	4908      	ldr	r1, [pc, #32]	; (800119c <LL_ADC_SetChannelSingleDiff+0x44>)
 800117c:	40d9      	lsrs	r1, r3
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	400b      	ands	r3, r1
 8001182:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001186:	431a      	orrs	r2, r3
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800118e:	bf00      	nop
 8001190:	3714      	adds	r7, #20
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	0007ffff 	.word	0x0007ffff

080011a0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80011b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	6093      	str	r3, [r2, #8]
}
 80011b8:	bf00      	nop
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80011d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80011d8:	d101      	bne.n	80011de <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80011da:	2301      	movs	r3, #1
 80011dc:	e000      	b.n	80011e0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80011de:	2300      	movs	r3, #0
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80011fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001200:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001224:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001228:	d101      	bne.n	800122e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800122a:	2301      	movs	r3, #1
 800122c:	e000      	b.n	8001230 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800122e:	2300      	movs	r3, #0
}
 8001230:	4618      	mov	r0, r3
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	f003 0301 	and.w	r3, r3, #1
 800124c:	2b01      	cmp	r3, #1
 800124e:	d101      	bne.n	8001254 <LL_ADC_IsEnabled+0x18>
 8001250:	2301      	movs	r3, #1
 8001252:	e000      	b.n	8001256 <LL_ADC_IsEnabled+0x1a>
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001262:	b480      	push	{r7}
 8001264:	b083      	sub	sp, #12
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	f003 0304 	and.w	r3, r3, #4
 8001272:	2b04      	cmp	r3, #4
 8001274:	d101      	bne.n	800127a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001276:	2301      	movs	r3, #1
 8001278:	e000      	b.n	800127c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800127a:	2300      	movs	r3, #0
}
 800127c:	4618      	mov	r0, r3
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	f003 0308 	and.w	r3, r3, #8
 8001298:	2b08      	cmp	r3, #8
 800129a:	d101      	bne.n	80012a0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800129c:	2301      	movs	r3, #1
 800129e:	e000      	b.n	80012a2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
	...

080012b0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80012b0:	b590      	push	{r4, r7, lr}
 80012b2:	b089      	sub	sp, #36	; 0x24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012b8:	2300      	movs	r3, #0
 80012ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80012bc:	2300      	movs	r3, #0
 80012be:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d101      	bne.n	80012ca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e136      	b.n	8001538 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	691b      	ldr	r3, [r3, #16]
 80012ce:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d109      	bne.n	80012ec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f7ff fb89 	bl	80009f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2200      	movs	r2, #0
 80012e2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2200      	movs	r2, #0
 80012e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff ff67 	bl	80011c4 <LL_ADC_IsDeepPowerDownEnabled>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d004      	beq.n	8001306 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff ff4d 	bl	80011a0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff ff82 	bl	8001214 <LL_ADC_IsInternalRegulatorEnabled>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d115      	bne.n	8001342 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff ff66 	bl	80011ec <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001320:	4b87      	ldr	r3, [pc, #540]	; (8001540 <HAL_ADC_Init+0x290>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	099b      	lsrs	r3, r3, #6
 8001326:	4a87      	ldr	r2, [pc, #540]	; (8001544 <HAL_ADC_Init+0x294>)
 8001328:	fba2 2303 	umull	r2, r3, r2, r3
 800132c:	099b      	lsrs	r3, r3, #6
 800132e:	3301      	adds	r3, #1
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001334:	e002      	b.n	800133c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	3b01      	subs	r3, #1
 800133a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1f9      	bne.n	8001336 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff ff64 	bl	8001214 <LL_ADC_IsInternalRegulatorEnabled>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d10d      	bne.n	800136e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001356:	f043 0210 	orr.w	r2, r3, #16
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001362:	f043 0201 	orr.w	r2, r3, #1
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff ff75 	bl	8001262 <LL_ADC_REG_IsConversionOngoing>
 8001378:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800137e:	f003 0310 	and.w	r3, r3, #16
 8001382:	2b00      	cmp	r3, #0
 8001384:	f040 80cf 	bne.w	8001526 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	2b00      	cmp	r3, #0
 800138c:	f040 80cb 	bne.w	8001526 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001394:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001398:	f043 0202 	orr.w	r2, r3, #2
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff ff49 	bl	800123c <LL_ADC_IsEnabled>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d115      	bne.n	80013dc <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80013b0:	4865      	ldr	r0, [pc, #404]	; (8001548 <HAL_ADC_Init+0x298>)
 80013b2:	f7ff ff43 	bl	800123c <LL_ADC_IsEnabled>
 80013b6:	4604      	mov	r4, r0
 80013b8:	4864      	ldr	r0, [pc, #400]	; (800154c <HAL_ADC_Init+0x29c>)
 80013ba:	f7ff ff3f 	bl	800123c <LL_ADC_IsEnabled>
 80013be:	4603      	mov	r3, r0
 80013c0:	431c      	orrs	r4, r3
 80013c2:	4863      	ldr	r0, [pc, #396]	; (8001550 <HAL_ADC_Init+0x2a0>)
 80013c4:	f7ff ff3a 	bl	800123c <LL_ADC_IsEnabled>
 80013c8:	4603      	mov	r3, r0
 80013ca:	4323      	orrs	r3, r4
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d105      	bne.n	80013dc <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	4619      	mov	r1, r3
 80013d6:	485f      	ldr	r0, [pc, #380]	; (8001554 <HAL_ADC_Init+0x2a4>)
 80013d8:	f7ff fdde 	bl	8000f98 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	7e5b      	ldrb	r3, [r3, #25]
 80013e0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013e6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80013ec:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80013f2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013fa:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013fc:	4313      	orrs	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d106      	bne.n	8001418 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140e:	3b01      	subs	r3, #1
 8001410:	045b      	lsls	r3, r3, #17
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	4313      	orrs	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800141c:	2b00      	cmp	r3, #0
 800141e:	d009      	beq.n	8001434 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001424:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800142c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4313      	orrs	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	68da      	ldr	r2, [r3, #12]
 800143a:	4b47      	ldr	r3, [pc, #284]	; (8001558 <HAL_ADC_Init+0x2a8>)
 800143c:	4013      	ands	r3, r2
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	6812      	ldr	r2, [r2, #0]
 8001442:	69b9      	ldr	r1, [r7, #24]
 8001444:	430b      	orrs	r3, r1
 8001446:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff ff08 	bl	8001262 <LL_ADC_REG_IsConversionOngoing>
 8001452:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff ff15 	bl	8001288 <LL_ADC_INJ_IsConversionOngoing>
 800145e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d13d      	bne.n	80014e2 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d13a      	bne.n	80014e2 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001470:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001478:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800147a:	4313      	orrs	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001488:	f023 0302 	bic.w	r3, r3, #2
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	6812      	ldr	r2, [r2, #0]
 8001490:	69b9      	ldr	r1, [r7, #24]
 8001492:	430b      	orrs	r3, r1
 8001494:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800149c:	2b01      	cmp	r3, #1
 800149e:	d118      	bne.n	80014d2 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	691b      	ldr	r3, [r3, #16]
 80014a6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80014aa:	f023 0304 	bic.w	r3, r3, #4
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80014b6:	4311      	orrs	r1, r2
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80014bc:	4311      	orrs	r1, r2
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80014c2:	430a      	orrs	r2, r1
 80014c4:	431a      	orrs	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f042 0201 	orr.w	r2, r2, #1
 80014ce:	611a      	str	r2, [r3, #16]
 80014d0:	e007      	b.n	80014e2 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	691a      	ldr	r2, [r3, #16]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f022 0201 	bic.w	r2, r2, #1
 80014e0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	691b      	ldr	r3, [r3, #16]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d10c      	bne.n	8001504 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f0:	f023 010f 	bic.w	r1, r3, #15
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	69db      	ldr	r3, [r3, #28]
 80014f8:	1e5a      	subs	r2, r3, #1
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	430a      	orrs	r2, r1
 8001500:	631a      	str	r2, [r3, #48]	; 0x30
 8001502:	e007      	b.n	8001514 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f022 020f 	bic.w	r2, r2, #15
 8001512:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001518:	f023 0303 	bic.w	r3, r3, #3
 800151c:	f043 0201 	orr.w	r2, r3, #1
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	655a      	str	r2, [r3, #84]	; 0x54
 8001524:	e007      	b.n	8001536 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800152a:	f043 0210 	orr.w	r2, r3, #16
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001536:	7ffb      	ldrb	r3, [r7, #31]
}
 8001538:	4618      	mov	r0, r3
 800153a:	3724      	adds	r7, #36	; 0x24
 800153c:	46bd      	mov	sp, r7
 800153e:	bd90      	pop	{r4, r7, pc}
 8001540:	20000000 	.word	0x20000000
 8001544:	053e2d63 	.word	0x053e2d63
 8001548:	50040000 	.word	0x50040000
 800154c:	50040100 	.word	0x50040100
 8001550:	50040200 	.word	0x50040200
 8001554:	50040300 	.word	0x50040300
 8001558:	fff0c007 	.word	0xfff0c007

0800155c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b0b6      	sub	sp, #216	; 0xd8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001566:	2300      	movs	r3, #0
 8001568:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800156c:	2300      	movs	r3, #0
 800156e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001576:	2b01      	cmp	r3, #1
 8001578:	d101      	bne.n	800157e <HAL_ADC_ConfigChannel+0x22>
 800157a:	2302      	movs	r3, #2
 800157c:	e3c7      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x7b2>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2201      	movs	r2, #1
 8001582:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff fe69 	bl	8001262 <LL_ADC_REG_IsConversionOngoing>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	f040 83a8 	bne.w	8001ce8 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	2b05      	cmp	r3, #5
 800159e:	d824      	bhi.n	80015ea <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	3b02      	subs	r3, #2
 80015a6:	2b03      	cmp	r3, #3
 80015a8:	d81b      	bhi.n	80015e2 <HAL_ADC_ConfigChannel+0x86>
 80015aa:	a201      	add	r2, pc, #4	; (adr r2, 80015b0 <HAL_ADC_ConfigChannel+0x54>)
 80015ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015b0:	080015c1 	.word	0x080015c1
 80015b4:	080015c9 	.word	0x080015c9
 80015b8:	080015d1 	.word	0x080015d1
 80015bc:	080015d9 	.word	0x080015d9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	220c      	movs	r2, #12
 80015c4:	605a      	str	r2, [r3, #4]
          break;
 80015c6:	e011      	b.n	80015ec <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	2212      	movs	r2, #18
 80015cc:	605a      	str	r2, [r3, #4]
          break;
 80015ce:	e00d      	b.n	80015ec <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	2218      	movs	r2, #24
 80015d4:	605a      	str	r2, [r3, #4]
          break;
 80015d6:	e009      	b.n	80015ec <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015de:	605a      	str	r2, [r3, #4]
          break;
 80015e0:	e004      	b.n	80015ec <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	2206      	movs	r2, #6
 80015e6:	605a      	str	r2, [r3, #4]
          break;
 80015e8:	e000      	b.n	80015ec <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80015ea:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6818      	ldr	r0, [r3, #0]
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	6859      	ldr	r1, [r3, #4]
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	461a      	mov	r2, r3
 80015fa:	f7ff fd56 	bl	80010aa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff fe2d 	bl	8001262 <LL_ADC_REG_IsConversionOngoing>
 8001608:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff fe39 	bl	8001288 <LL_ADC_INJ_IsConversionOngoing>
 8001616:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800161a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800161e:	2b00      	cmp	r3, #0
 8001620:	f040 81a6 	bne.w	8001970 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001624:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001628:	2b00      	cmp	r3, #0
 800162a:	f040 81a1 	bne.w	8001970 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6818      	ldr	r0, [r3, #0]
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	6819      	ldr	r1, [r3, #0]
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	461a      	mov	r2, r3
 800163c:	f7ff fd61 	bl	8001102 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	695a      	ldr	r2, [r3, #20]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	08db      	lsrs	r3, r3, #3
 800164c:	f003 0303 	and.w	r3, r3, #3
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	691b      	ldr	r3, [r3, #16]
 800165e:	2b04      	cmp	r3, #4
 8001660:	d00a      	beq.n	8001678 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6818      	ldr	r0, [r3, #0]
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	6919      	ldr	r1, [r3, #16]
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001672:	f7ff fcc5 	bl	8001000 <LL_ADC_SetOffset>
 8001676:	e17b      	b.n	8001970 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2100      	movs	r1, #0
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff fce2 	bl	8001048 <LL_ADC_GetOffsetChannel>
 8001684:	4603      	mov	r3, r0
 8001686:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800168a:	2b00      	cmp	r3, #0
 800168c:	d10a      	bne.n	80016a4 <HAL_ADC_ConfigChannel+0x148>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2100      	movs	r1, #0
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff fcd7 	bl	8001048 <LL_ADC_GetOffsetChannel>
 800169a:	4603      	mov	r3, r0
 800169c:	0e9b      	lsrs	r3, r3, #26
 800169e:	f003 021f 	and.w	r2, r3, #31
 80016a2:	e01e      	b.n	80016e2 <HAL_ADC_ConfigChannel+0x186>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2100      	movs	r1, #0
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff fccc 	bl	8001048 <LL_ADC_GetOffsetChannel>
 80016b0:	4603      	mov	r3, r0
 80016b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80016ba:	fa93 f3a3 	rbit	r3, r3
 80016be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80016c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80016c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80016ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d101      	bne.n	80016d6 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80016d2:	2320      	movs	r3, #32
 80016d4:	e004      	b.n	80016e0 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80016d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80016da:	fab3 f383 	clz	r3, r3
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d105      	bne.n	80016fa <HAL_ADC_ConfigChannel+0x19e>
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	0e9b      	lsrs	r3, r3, #26
 80016f4:	f003 031f 	and.w	r3, r3, #31
 80016f8:	e018      	b.n	800172c <HAL_ADC_ConfigChannel+0x1d0>
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001702:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001706:	fa93 f3a3 	rbit	r3, r3
 800170a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800170e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001712:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001716:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800171a:	2b00      	cmp	r3, #0
 800171c:	d101      	bne.n	8001722 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800171e:	2320      	movs	r3, #32
 8001720:	e004      	b.n	800172c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001722:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001726:	fab3 f383 	clz	r3, r3
 800172a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800172c:	429a      	cmp	r2, r3
 800172e:	d106      	bne.n	800173e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2200      	movs	r2, #0
 8001736:	2100      	movs	r1, #0
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff fc9b 	bl	8001074 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2101      	movs	r1, #1
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff fc7f 	bl	8001048 <LL_ADC_GetOffsetChannel>
 800174a:	4603      	mov	r3, r0
 800174c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001750:	2b00      	cmp	r3, #0
 8001752:	d10a      	bne.n	800176a <HAL_ADC_ConfigChannel+0x20e>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2101      	movs	r1, #1
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff fc74 	bl	8001048 <LL_ADC_GetOffsetChannel>
 8001760:	4603      	mov	r3, r0
 8001762:	0e9b      	lsrs	r3, r3, #26
 8001764:	f003 021f 	and.w	r2, r3, #31
 8001768:	e01e      	b.n	80017a8 <HAL_ADC_ConfigChannel+0x24c>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2101      	movs	r1, #1
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff fc69 	bl	8001048 <LL_ADC_GetOffsetChannel>
 8001776:	4603      	mov	r3, r0
 8001778:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800177c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001780:	fa93 f3a3 	rbit	r3, r3
 8001784:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001788:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800178c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001790:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001794:	2b00      	cmp	r3, #0
 8001796:	d101      	bne.n	800179c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001798:	2320      	movs	r3, #32
 800179a:	e004      	b.n	80017a6 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 800179c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80017a0:	fab3 f383 	clz	r3, r3
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d105      	bne.n	80017c0 <HAL_ADC_ConfigChannel+0x264>
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	0e9b      	lsrs	r3, r3, #26
 80017ba:	f003 031f 	and.w	r3, r3, #31
 80017be:	e018      	b.n	80017f2 <HAL_ADC_ConfigChannel+0x296>
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80017cc:	fa93 f3a3 	rbit	r3, r3
 80017d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80017d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80017d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80017dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d101      	bne.n	80017e8 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80017e4:	2320      	movs	r3, #32
 80017e6:	e004      	b.n	80017f2 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80017e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80017ec:	fab3 f383 	clz	r3, r3
 80017f0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d106      	bne.n	8001804 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2200      	movs	r2, #0
 80017fc:	2101      	movs	r1, #1
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff fc38 	bl	8001074 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2102      	movs	r1, #2
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff fc1c 	bl	8001048 <LL_ADC_GetOffsetChannel>
 8001810:	4603      	mov	r3, r0
 8001812:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001816:	2b00      	cmp	r3, #0
 8001818:	d10a      	bne.n	8001830 <HAL_ADC_ConfigChannel+0x2d4>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2102      	movs	r1, #2
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff fc11 	bl	8001048 <LL_ADC_GetOffsetChannel>
 8001826:	4603      	mov	r3, r0
 8001828:	0e9b      	lsrs	r3, r3, #26
 800182a:	f003 021f 	and.w	r2, r3, #31
 800182e:	e01e      	b.n	800186e <HAL_ADC_ConfigChannel+0x312>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2102      	movs	r1, #2
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff fc06 	bl	8001048 <LL_ADC_GetOffsetChannel>
 800183c:	4603      	mov	r3, r0
 800183e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001842:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001846:	fa93 f3a3 	rbit	r3, r3
 800184a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800184e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001852:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001856:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800185e:	2320      	movs	r3, #32
 8001860:	e004      	b.n	800186c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001862:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001866:	fab3 f383 	clz	r3, r3
 800186a:	b2db      	uxtb	r3, r3
 800186c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001876:	2b00      	cmp	r3, #0
 8001878:	d105      	bne.n	8001886 <HAL_ADC_ConfigChannel+0x32a>
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	0e9b      	lsrs	r3, r3, #26
 8001880:	f003 031f 	and.w	r3, r3, #31
 8001884:	e016      	b.n	80018b4 <HAL_ADC_ConfigChannel+0x358>
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800188e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001892:	fa93 f3a3 	rbit	r3, r3
 8001896:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001898:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800189a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800189e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d101      	bne.n	80018aa <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80018a6:	2320      	movs	r3, #32
 80018a8:	e004      	b.n	80018b4 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80018aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80018ae:	fab3 f383 	clz	r3, r3
 80018b2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d106      	bne.n	80018c6 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2200      	movs	r2, #0
 80018be:	2102      	movs	r1, #2
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff fbd7 	bl	8001074 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2103      	movs	r1, #3
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff fbbb 	bl	8001048 <LL_ADC_GetOffsetChannel>
 80018d2:	4603      	mov	r3, r0
 80018d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d10a      	bne.n	80018f2 <HAL_ADC_ConfigChannel+0x396>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2103      	movs	r1, #3
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff fbb0 	bl	8001048 <LL_ADC_GetOffsetChannel>
 80018e8:	4603      	mov	r3, r0
 80018ea:	0e9b      	lsrs	r3, r3, #26
 80018ec:	f003 021f 	and.w	r2, r3, #31
 80018f0:	e017      	b.n	8001922 <HAL_ADC_ConfigChannel+0x3c6>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2103      	movs	r1, #3
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff fba5 	bl	8001048 <LL_ADC_GetOffsetChannel>
 80018fe:	4603      	mov	r3, r0
 8001900:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001902:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001904:	fa93 f3a3 	rbit	r3, r3
 8001908:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800190a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800190c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800190e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001910:	2b00      	cmp	r3, #0
 8001912:	d101      	bne.n	8001918 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001914:	2320      	movs	r3, #32
 8001916:	e003      	b.n	8001920 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001918:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800191a:	fab3 f383 	clz	r3, r3
 800191e:	b2db      	uxtb	r3, r3
 8001920:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800192a:	2b00      	cmp	r3, #0
 800192c:	d105      	bne.n	800193a <HAL_ADC_ConfigChannel+0x3de>
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	0e9b      	lsrs	r3, r3, #26
 8001934:	f003 031f 	and.w	r3, r3, #31
 8001938:	e011      	b.n	800195e <HAL_ADC_ConfigChannel+0x402>
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001940:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001942:	fa93 f3a3 	rbit	r3, r3
 8001946:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001948:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800194a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800194c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800194e:	2b00      	cmp	r3, #0
 8001950:	d101      	bne.n	8001956 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001952:	2320      	movs	r3, #32
 8001954:	e003      	b.n	800195e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001956:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001958:	fab3 f383 	clz	r3, r3
 800195c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800195e:	429a      	cmp	r2, r3
 8001960:	d106      	bne.n	8001970 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2200      	movs	r2, #0
 8001968:	2103      	movs	r1, #3
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff fb82 	bl	8001074 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff fc61 	bl	800123c <LL_ADC_IsEnabled>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	f040 813f 	bne.w	8001c00 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6818      	ldr	r0, [r3, #0]
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	6819      	ldr	r1, [r3, #0]
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	461a      	mov	r2, r3
 8001990:	f7ff fbe2 	bl	8001158 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	4a8e      	ldr	r2, [pc, #568]	; (8001bd4 <HAL_ADC_ConfigChannel+0x678>)
 800199a:	4293      	cmp	r3, r2
 800199c:	f040 8130 	bne.w	8001c00 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d10b      	bne.n	80019c8 <HAL_ADC_ConfigChannel+0x46c>
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	0e9b      	lsrs	r3, r3, #26
 80019b6:	3301      	adds	r3, #1
 80019b8:	f003 031f 	and.w	r3, r3, #31
 80019bc:	2b09      	cmp	r3, #9
 80019be:	bf94      	ite	ls
 80019c0:	2301      	movls	r3, #1
 80019c2:	2300      	movhi	r3, #0
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	e019      	b.n	80019fc <HAL_ADC_ConfigChannel+0x4a0>
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019d0:	fa93 f3a3 	rbit	r3, r3
 80019d4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80019d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019d8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80019da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d101      	bne.n	80019e4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80019e0:	2320      	movs	r3, #32
 80019e2:	e003      	b.n	80019ec <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80019e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80019e6:	fab3 f383 	clz	r3, r3
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	3301      	adds	r3, #1
 80019ee:	f003 031f 	and.w	r3, r3, #31
 80019f2:	2b09      	cmp	r3, #9
 80019f4:	bf94      	ite	ls
 80019f6:	2301      	movls	r3, #1
 80019f8:	2300      	movhi	r3, #0
 80019fa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d079      	beq.n	8001af4 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d107      	bne.n	8001a1c <HAL_ADC_ConfigChannel+0x4c0>
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	0e9b      	lsrs	r3, r3, #26
 8001a12:	3301      	adds	r3, #1
 8001a14:	069b      	lsls	r3, r3, #26
 8001a16:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a1a:	e015      	b.n	8001a48 <HAL_ADC_ConfigChannel+0x4ec>
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a24:	fa93 f3a3 	rbit	r3, r3
 8001a28:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001a2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a2c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001a2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d101      	bne.n	8001a38 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001a34:	2320      	movs	r3, #32
 8001a36:	e003      	b.n	8001a40 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001a38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a3a:	fab3 f383 	clz	r3, r3
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	3301      	adds	r3, #1
 8001a42:	069b      	lsls	r3, r3, #26
 8001a44:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d109      	bne.n	8001a68 <HAL_ADC_ConfigChannel+0x50c>
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	0e9b      	lsrs	r3, r3, #26
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	f003 031f 	and.w	r3, r3, #31
 8001a60:	2101      	movs	r1, #1
 8001a62:	fa01 f303 	lsl.w	r3, r1, r3
 8001a66:	e017      	b.n	8001a98 <HAL_ADC_ConfigChannel+0x53c>
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a70:	fa93 f3a3 	rbit	r3, r3
 8001a74:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001a76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a78:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001a7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d101      	bne.n	8001a84 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001a80:	2320      	movs	r3, #32
 8001a82:	e003      	b.n	8001a8c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001a84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a86:	fab3 f383 	clz	r3, r3
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	f003 031f 	and.w	r3, r3, #31
 8001a92:	2101      	movs	r1, #1
 8001a94:	fa01 f303 	lsl.w	r3, r1, r3
 8001a98:	ea42 0103 	orr.w	r1, r2, r3
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d10a      	bne.n	8001abe <HAL_ADC_ConfigChannel+0x562>
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	0e9b      	lsrs	r3, r3, #26
 8001aae:	3301      	adds	r3, #1
 8001ab0:	f003 021f 	and.w	r2, r3, #31
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	4413      	add	r3, r2
 8001aba:	051b      	lsls	r3, r3, #20
 8001abc:	e018      	b.n	8001af0 <HAL_ADC_ConfigChannel+0x594>
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ac6:	fa93 f3a3 	rbit	r3, r3
 8001aca:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ace:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001ad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001ad6:	2320      	movs	r3, #32
 8001ad8:	e003      	b.n	8001ae2 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001ada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001adc:	fab3 f383 	clz	r3, r3
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	f003 021f 	and.w	r2, r3, #31
 8001ae8:	4613      	mov	r3, r2
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	4413      	add	r3, r2
 8001aee:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001af0:	430b      	orrs	r3, r1
 8001af2:	e080      	b.n	8001bf6 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d107      	bne.n	8001b10 <HAL_ADC_ConfigChannel+0x5b4>
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	0e9b      	lsrs	r3, r3, #26
 8001b06:	3301      	adds	r3, #1
 8001b08:	069b      	lsls	r3, r3, #26
 8001b0a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b0e:	e015      	b.n	8001b3c <HAL_ADC_ConfigChannel+0x5e0>
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b18:	fa93 f3a3 	rbit	r3, r3
 8001b1c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b20:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d101      	bne.n	8001b2c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001b28:	2320      	movs	r3, #32
 8001b2a:	e003      	b.n	8001b34 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b2e:	fab3 f383 	clz	r3, r3
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	3301      	adds	r3, #1
 8001b36:	069b      	lsls	r3, r3, #26
 8001b38:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d109      	bne.n	8001b5c <HAL_ADC_ConfigChannel+0x600>
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	0e9b      	lsrs	r3, r3, #26
 8001b4e:	3301      	adds	r3, #1
 8001b50:	f003 031f 	and.w	r3, r3, #31
 8001b54:	2101      	movs	r1, #1
 8001b56:	fa01 f303 	lsl.w	r3, r1, r3
 8001b5a:	e017      	b.n	8001b8c <HAL_ADC_ConfigChannel+0x630>
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b62:	6a3b      	ldr	r3, [r7, #32]
 8001b64:	fa93 f3a3 	rbit	r3, r3
 8001b68:	61fb      	str	r3, [r7, #28]
  return result;
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d101      	bne.n	8001b78 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001b74:	2320      	movs	r3, #32
 8001b76:	e003      	b.n	8001b80 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7a:	fab3 f383 	clz	r3, r3
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	3301      	adds	r3, #1
 8001b82:	f003 031f 	and.w	r3, r3, #31
 8001b86:	2101      	movs	r1, #1
 8001b88:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8c:	ea42 0103 	orr.w	r1, r2, r3
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d10d      	bne.n	8001bb8 <HAL_ADC_ConfigChannel+0x65c>
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	0e9b      	lsrs	r3, r3, #26
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	f003 021f 	and.w	r2, r3, #31
 8001ba8:	4613      	mov	r3, r2
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	4413      	add	r3, r2
 8001bae:	3b1e      	subs	r3, #30
 8001bb0:	051b      	lsls	r3, r3, #20
 8001bb2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bb6:	e01d      	b.n	8001bf4 <HAL_ADC_ConfigChannel+0x698>
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	fa93 f3a3 	rbit	r3, r3
 8001bc4:	613b      	str	r3, [r7, #16]
  return result;
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d103      	bne.n	8001bd8 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001bd0:	2320      	movs	r3, #32
 8001bd2:	e005      	b.n	8001be0 <HAL_ADC_ConfigChannel+0x684>
 8001bd4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	fab3 f383 	clz	r3, r3
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	3301      	adds	r3, #1
 8001be2:	f003 021f 	and.w	r2, r3, #31
 8001be6:	4613      	mov	r3, r2
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	4413      	add	r3, r2
 8001bec:	3b1e      	subs	r3, #30
 8001bee:	051b      	lsls	r3, r3, #20
 8001bf0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bf4:	430b      	orrs	r3, r1
 8001bf6:	683a      	ldr	r2, [r7, #0]
 8001bf8:	6892      	ldr	r2, [r2, #8]
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	f7ff fa81 	bl	8001102 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	4b44      	ldr	r3, [pc, #272]	; (8001d18 <HAL_ADC_ConfigChannel+0x7bc>)
 8001c06:	4013      	ands	r3, r2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d07a      	beq.n	8001d02 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c0c:	4843      	ldr	r0, [pc, #268]	; (8001d1c <HAL_ADC_ConfigChannel+0x7c0>)
 8001c0e:	f7ff f9e9 	bl	8000fe4 <LL_ADC_GetCommonPathInternalCh>
 8001c12:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a41      	ldr	r2, [pc, #260]	; (8001d20 <HAL_ADC_ConfigChannel+0x7c4>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d12c      	bne.n	8001c7a <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001c20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d126      	bne.n	8001c7a <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a3c      	ldr	r2, [pc, #240]	; (8001d24 <HAL_ADC_ConfigChannel+0x7c8>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d004      	beq.n	8001c40 <HAL_ADC_ConfigChannel+0x6e4>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a3b      	ldr	r2, [pc, #236]	; (8001d28 <HAL_ADC_ConfigChannel+0x7cc>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d15d      	bne.n	8001cfc <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4834      	ldr	r0, [pc, #208]	; (8001d1c <HAL_ADC_ConfigChannel+0x7c0>)
 8001c4c:	f7ff f9b7 	bl	8000fbe <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c50:	4b36      	ldr	r3, [pc, #216]	; (8001d2c <HAL_ADC_ConfigChannel+0x7d0>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	099b      	lsrs	r3, r3, #6
 8001c56:	4a36      	ldr	r2, [pc, #216]	; (8001d30 <HAL_ADC_ConfigChannel+0x7d4>)
 8001c58:	fba2 2303 	umull	r2, r3, r2, r3
 8001c5c:	099b      	lsrs	r3, r3, #6
 8001c5e:	1c5a      	adds	r2, r3, #1
 8001c60:	4613      	mov	r3, r2
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	4413      	add	r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001c6a:	e002      	b.n	8001c72 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d1f9      	bne.n	8001c6c <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c78:	e040      	b.n	8001cfc <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a2d      	ldr	r2, [pc, #180]	; (8001d34 <HAL_ADC_ConfigChannel+0x7d8>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d118      	bne.n	8001cb6 <HAL_ADC_ConfigChannel+0x75a>
 8001c84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d112      	bne.n	8001cb6 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a23      	ldr	r2, [pc, #140]	; (8001d24 <HAL_ADC_ConfigChannel+0x7c8>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d004      	beq.n	8001ca4 <HAL_ADC_ConfigChannel+0x748>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a22      	ldr	r2, [pc, #136]	; (8001d28 <HAL_ADC_ConfigChannel+0x7cc>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d12d      	bne.n	8001d00 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ca4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ca8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cac:	4619      	mov	r1, r3
 8001cae:	481b      	ldr	r0, [pc, #108]	; (8001d1c <HAL_ADC_ConfigChannel+0x7c0>)
 8001cb0:	f7ff f985 	bl	8000fbe <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001cb4:	e024      	b.n	8001d00 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a1f      	ldr	r2, [pc, #124]	; (8001d38 <HAL_ADC_ConfigChannel+0x7dc>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d120      	bne.n	8001d02 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001cc0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001cc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d11a      	bne.n	8001d02 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a14      	ldr	r2, [pc, #80]	; (8001d24 <HAL_ADC_ConfigChannel+0x7c8>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d115      	bne.n	8001d02 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cd6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001cda:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001cde:	4619      	mov	r1, r3
 8001ce0:	480e      	ldr	r0, [pc, #56]	; (8001d1c <HAL_ADC_ConfigChannel+0x7c0>)
 8001ce2:	f7ff f96c 	bl	8000fbe <LL_ADC_SetCommonPathInternalCh>
 8001ce6:	e00c      	b.n	8001d02 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cec:	f043 0220 	orr.w	r2, r3, #32
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001cfa:	e002      	b.n	8001d02 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001cfc:	bf00      	nop
 8001cfe:	e000      	b.n	8001d02 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d00:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001d0a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	37d8      	adds	r7, #216	; 0xd8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	80080000 	.word	0x80080000
 8001d1c:	50040300 	.word	0x50040300
 8001d20:	c7520000 	.word	0xc7520000
 8001d24:	50040000 	.word	0x50040000
 8001d28:	50040200 	.word	0x50040200
 8001d2c:	20000000 	.word	0x20000000
 8001d30:	053e2d63 	.word	0x053e2d63
 8001d34:	cb840000 	.word	0xcb840000
 8001d38:	80000001 	.word	0x80000001

08001d3c <LL_ADC_IsEnabled>:
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d101      	bne.n	8001d54 <LL_ADC_IsEnabled+0x18>
 8001d50:	2301      	movs	r3, #1
 8001d52:	e000      	b.n	8001d56 <LL_ADC_IsEnabled+0x1a>
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <LL_ADC_REG_IsConversionOngoing>:
{
 8001d62:	b480      	push	{r7}
 8001d64:	b083      	sub	sp, #12
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f003 0304 	and.w	r3, r3, #4
 8001d72:	2b04      	cmp	r3, #4
 8001d74:	d101      	bne.n	8001d7a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d76:	2301      	movs	r3, #1
 8001d78:	e000      	b.n	8001d7c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001d88:	b590      	push	{r4, r7, lr}
 8001d8a:	b09f      	sub	sp, #124	; 0x7c
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d92:	2300      	movs	r3, #0
 8001d94:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d101      	bne.n	8001da6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001da2:	2302      	movs	r3, #2
 8001da4:	e093      	b.n	8001ece <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2201      	movs	r2, #1
 8001daa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8001dae:	2300      	movs	r3, #0
 8001db0:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8001db2:	2300      	movs	r3, #0
 8001db4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a47      	ldr	r2, [pc, #284]	; (8001ed8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d102      	bne.n	8001dc6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001dc0:	4b46      	ldr	r3, [pc, #280]	; (8001edc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001dc2:	60bb      	str	r3, [r7, #8]
 8001dc4:	e001      	b.n	8001dca <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d10b      	bne.n	8001de8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd4:	f043 0220 	orr.w	r2, r3, #32
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e072      	b.n	8001ece <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff ffb9 	bl	8001d62 <LL_ADC_REG_IsConversionOngoing>
 8001df0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff ffb3 	bl	8001d62 <LL_ADC_REG_IsConversionOngoing>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d154      	bne.n	8001eac <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001e02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d151      	bne.n	8001eac <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001e08:	4b35      	ldr	r3, [pc, #212]	; (8001ee0 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8001e0a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d02c      	beq.n	8001e6e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001e14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	6859      	ldr	r1, [r3, #4]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e26:	035b      	lsls	r3, r3, #13
 8001e28:	430b      	orrs	r3, r1
 8001e2a:	431a      	orrs	r2, r3
 8001e2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e2e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e30:	4829      	ldr	r0, [pc, #164]	; (8001ed8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001e32:	f7ff ff83 	bl	8001d3c <LL_ADC_IsEnabled>
 8001e36:	4604      	mov	r4, r0
 8001e38:	4828      	ldr	r0, [pc, #160]	; (8001edc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001e3a:	f7ff ff7f 	bl	8001d3c <LL_ADC_IsEnabled>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	431c      	orrs	r4, r3
 8001e42:	4828      	ldr	r0, [pc, #160]	; (8001ee4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001e44:	f7ff ff7a 	bl	8001d3c <LL_ADC_IsEnabled>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	4323      	orrs	r3, r4
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d137      	bne.n	8001ec0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001e50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001e58:	f023 030f 	bic.w	r3, r3, #15
 8001e5c:	683a      	ldr	r2, [r7, #0]
 8001e5e:	6811      	ldr	r1, [r2, #0]
 8001e60:	683a      	ldr	r2, [r7, #0]
 8001e62:	6892      	ldr	r2, [r2, #8]
 8001e64:	430a      	orrs	r2, r1
 8001e66:	431a      	orrs	r2, r3
 8001e68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e6a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e6c:	e028      	b.n	8001ec0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001e6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e78:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e7a:	4817      	ldr	r0, [pc, #92]	; (8001ed8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001e7c:	f7ff ff5e 	bl	8001d3c <LL_ADC_IsEnabled>
 8001e80:	4604      	mov	r4, r0
 8001e82:	4816      	ldr	r0, [pc, #88]	; (8001edc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001e84:	f7ff ff5a 	bl	8001d3c <LL_ADC_IsEnabled>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	431c      	orrs	r4, r3
 8001e8c:	4815      	ldr	r0, [pc, #84]	; (8001ee4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001e8e:	f7ff ff55 	bl	8001d3c <LL_ADC_IsEnabled>
 8001e92:	4603      	mov	r3, r0
 8001e94:	4323      	orrs	r3, r4
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d112      	bne.n	8001ec0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001e9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001ea2:	f023 030f 	bic.w	r3, r3, #15
 8001ea6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001ea8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001eaa:	e009      	b.n	8001ec0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb0:	f043 0220 	orr.w	r2, r3, #32
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001ebe:	e000      	b.n	8001ec2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ec0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001eca:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	377c      	adds	r7, #124	; 0x7c
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd90      	pop	{r4, r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	50040000 	.word	0x50040000
 8001edc:	50040100 	.word	0x50040100
 8001ee0:	50040300 	.word	0x50040300
 8001ee4:	50040200 	.word	0x50040200

08001ee8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f003 0307 	and.w	r3, r3, #7
 8001ef6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ef8:	4b0c      	ldr	r3, [pc, #48]	; (8001f2c <__NVIC_SetPriorityGrouping+0x44>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001efe:	68ba      	ldr	r2, [r7, #8]
 8001f00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f04:	4013      	ands	r3, r2
 8001f06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f1a:	4a04      	ldr	r2, [pc, #16]	; (8001f2c <__NVIC_SetPriorityGrouping+0x44>)
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	60d3      	str	r3, [r2, #12]
}
 8001f20:	bf00      	nop
 8001f22:	3714      	adds	r7, #20
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	e000ed00 	.word	0xe000ed00

08001f30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f34:	4b04      	ldr	r3, [pc, #16]	; (8001f48 <__NVIC_GetPriorityGrouping+0x18>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	0a1b      	lsrs	r3, r3, #8
 8001f3a:	f003 0307 	and.w	r3, r3, #7
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	e000ed00 	.word	0xe000ed00

08001f4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	6039      	str	r1, [r7, #0]
 8001f56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	db0a      	blt.n	8001f76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	b2da      	uxtb	r2, r3
 8001f64:	490c      	ldr	r1, [pc, #48]	; (8001f98 <__NVIC_SetPriority+0x4c>)
 8001f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6a:	0112      	lsls	r2, r2, #4
 8001f6c:	b2d2      	uxtb	r2, r2
 8001f6e:	440b      	add	r3, r1
 8001f70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f74:	e00a      	b.n	8001f8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	b2da      	uxtb	r2, r3
 8001f7a:	4908      	ldr	r1, [pc, #32]	; (8001f9c <__NVIC_SetPriority+0x50>)
 8001f7c:	79fb      	ldrb	r3, [r7, #7]
 8001f7e:	f003 030f 	and.w	r3, r3, #15
 8001f82:	3b04      	subs	r3, #4
 8001f84:	0112      	lsls	r2, r2, #4
 8001f86:	b2d2      	uxtb	r2, r2
 8001f88:	440b      	add	r3, r1
 8001f8a:	761a      	strb	r2, [r3, #24]
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	e000e100 	.word	0xe000e100
 8001f9c:	e000ed00 	.word	0xe000ed00

08001fa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b089      	sub	sp, #36	; 0x24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f003 0307 	and.w	r3, r3, #7
 8001fb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	f1c3 0307 	rsb	r3, r3, #7
 8001fba:	2b04      	cmp	r3, #4
 8001fbc:	bf28      	it	cs
 8001fbe:	2304      	movcs	r3, #4
 8001fc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	3304      	adds	r3, #4
 8001fc6:	2b06      	cmp	r3, #6
 8001fc8:	d902      	bls.n	8001fd0 <NVIC_EncodePriority+0x30>
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	3b03      	subs	r3, #3
 8001fce:	e000      	b.n	8001fd2 <NVIC_EncodePriority+0x32>
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	43da      	mvns	r2, r3
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	401a      	ands	r2, r3
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fe8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff2:	43d9      	mvns	r1, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff8:	4313      	orrs	r3, r2
         );
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3724      	adds	r7, #36	; 0x24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
	...

08002008 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3b01      	subs	r3, #1
 8002014:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002018:	d301      	bcc.n	800201e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800201a:	2301      	movs	r3, #1
 800201c:	e00f      	b.n	800203e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800201e:	4a0a      	ldr	r2, [pc, #40]	; (8002048 <SysTick_Config+0x40>)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	3b01      	subs	r3, #1
 8002024:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002026:	210f      	movs	r1, #15
 8002028:	f04f 30ff 	mov.w	r0, #4294967295
 800202c:	f7ff ff8e 	bl	8001f4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002030:	4b05      	ldr	r3, [pc, #20]	; (8002048 <SysTick_Config+0x40>)
 8002032:	2200      	movs	r2, #0
 8002034:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002036:	4b04      	ldr	r3, [pc, #16]	; (8002048 <SysTick_Config+0x40>)
 8002038:	2207      	movs	r2, #7
 800203a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	e000e010 	.word	0xe000e010

0800204c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f7ff ff47 	bl	8001ee8 <__NVIC_SetPriorityGrouping>
}
 800205a:	bf00      	nop
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b086      	sub	sp, #24
 8002066:	af00      	add	r7, sp, #0
 8002068:	4603      	mov	r3, r0
 800206a:	60b9      	str	r1, [r7, #8]
 800206c:	607a      	str	r2, [r7, #4]
 800206e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002070:	2300      	movs	r3, #0
 8002072:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002074:	f7ff ff5c 	bl	8001f30 <__NVIC_GetPriorityGrouping>
 8002078:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	68b9      	ldr	r1, [r7, #8]
 800207e:	6978      	ldr	r0, [r7, #20]
 8002080:	f7ff ff8e 	bl	8001fa0 <NVIC_EncodePriority>
 8002084:	4602      	mov	r2, r0
 8002086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800208a:	4611      	mov	r1, r2
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff ff5d 	bl	8001f4c <__NVIC_SetPriority>
}
 8002092:	bf00      	nop
 8002094:	3718      	adds	r7, #24
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b082      	sub	sp, #8
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f7ff ffb0 	bl	8002008 <SysTick_Config>
 80020a8:	4603      	mov	r3, r0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
	...

080020b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b087      	sub	sp, #28
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020be:	2300      	movs	r3, #0
 80020c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020c2:	e17f      	b.n	80023c4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	2101      	movs	r1, #1
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	fa01 f303 	lsl.w	r3, r1, r3
 80020d0:	4013      	ands	r3, r2
 80020d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	f000 8171 	beq.w	80023be <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f003 0303 	and.w	r3, r3, #3
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d005      	beq.n	80020f4 <HAL_GPIO_Init+0x40>
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f003 0303 	and.w	r3, r3, #3
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d130      	bne.n	8002156 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	2203      	movs	r2, #3
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	43db      	mvns	r3, r3
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	4013      	ands	r3, r2
 800210a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	68da      	ldr	r2, [r3, #12]
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	693a      	ldr	r2, [r7, #16]
 800211a:	4313      	orrs	r3, r2
 800211c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800212a:	2201      	movs	r2, #1
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	43db      	mvns	r3, r3
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	4013      	ands	r3, r2
 8002138:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	091b      	lsrs	r3, r3, #4
 8002140:	f003 0201 	and.w	r2, r3, #1
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	4313      	orrs	r3, r2
 800214e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f003 0303 	and.w	r3, r3, #3
 800215e:	2b03      	cmp	r3, #3
 8002160:	d118      	bne.n	8002194 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002166:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002168:	2201      	movs	r2, #1
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	43db      	mvns	r3, r3
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	4013      	ands	r3, r2
 8002176:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	08db      	lsrs	r3, r3, #3
 800217e:	f003 0201 	and.w	r2, r3, #1
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	4313      	orrs	r3, r2
 800218c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	693a      	ldr	r2, [r7, #16]
 8002192:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f003 0303 	and.w	r3, r3, #3
 800219c:	2b03      	cmp	r3, #3
 800219e:	d017      	beq.n	80021d0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	2203      	movs	r2, #3
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	43db      	mvns	r3, r3
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	4013      	ands	r3, r2
 80021b6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	689a      	ldr	r2, [r3, #8]
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f003 0303 	and.w	r3, r3, #3
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d123      	bne.n	8002224 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	08da      	lsrs	r2, r3, #3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	3208      	adds	r2, #8
 80021e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	f003 0307 	and.w	r3, r3, #7
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	220f      	movs	r2, #15
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	43db      	mvns	r3, r3
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	4013      	ands	r3, r2
 80021fe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	691a      	ldr	r2, [r3, #16]
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	f003 0307 	and.w	r3, r3, #7
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	4313      	orrs	r3, r2
 8002214:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	08da      	lsrs	r2, r3, #3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	3208      	adds	r2, #8
 800221e:	6939      	ldr	r1, [r7, #16]
 8002220:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	2203      	movs	r2, #3
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	43db      	mvns	r3, r3
 8002236:	693a      	ldr	r2, [r7, #16]
 8002238:	4013      	ands	r3, r2
 800223a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f003 0203 	and.w	r2, r3, #3
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	4313      	orrs	r3, r2
 8002250:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002260:	2b00      	cmp	r3, #0
 8002262:	f000 80ac 	beq.w	80023be <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002266:	4b5f      	ldr	r3, [pc, #380]	; (80023e4 <HAL_GPIO_Init+0x330>)
 8002268:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800226a:	4a5e      	ldr	r2, [pc, #376]	; (80023e4 <HAL_GPIO_Init+0x330>)
 800226c:	f043 0301 	orr.w	r3, r3, #1
 8002270:	6613      	str	r3, [r2, #96]	; 0x60
 8002272:	4b5c      	ldr	r3, [pc, #368]	; (80023e4 <HAL_GPIO_Init+0x330>)
 8002274:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	60bb      	str	r3, [r7, #8]
 800227c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800227e:	4a5a      	ldr	r2, [pc, #360]	; (80023e8 <HAL_GPIO_Init+0x334>)
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	089b      	lsrs	r3, r3, #2
 8002284:	3302      	adds	r3, #2
 8002286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800228a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	f003 0303 	and.w	r3, r3, #3
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	220f      	movs	r2, #15
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	43db      	mvns	r3, r3
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	4013      	ands	r3, r2
 80022a0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80022a8:	d025      	beq.n	80022f6 <HAL_GPIO_Init+0x242>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a4f      	ldr	r2, [pc, #316]	; (80023ec <HAL_GPIO_Init+0x338>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d01f      	beq.n	80022f2 <HAL_GPIO_Init+0x23e>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a4e      	ldr	r2, [pc, #312]	; (80023f0 <HAL_GPIO_Init+0x33c>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d019      	beq.n	80022ee <HAL_GPIO_Init+0x23a>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a4d      	ldr	r2, [pc, #308]	; (80023f4 <HAL_GPIO_Init+0x340>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d013      	beq.n	80022ea <HAL_GPIO_Init+0x236>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a4c      	ldr	r2, [pc, #304]	; (80023f8 <HAL_GPIO_Init+0x344>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d00d      	beq.n	80022e6 <HAL_GPIO_Init+0x232>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a4b      	ldr	r2, [pc, #300]	; (80023fc <HAL_GPIO_Init+0x348>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d007      	beq.n	80022e2 <HAL_GPIO_Init+0x22e>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a4a      	ldr	r2, [pc, #296]	; (8002400 <HAL_GPIO_Init+0x34c>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d101      	bne.n	80022de <HAL_GPIO_Init+0x22a>
 80022da:	2306      	movs	r3, #6
 80022dc:	e00c      	b.n	80022f8 <HAL_GPIO_Init+0x244>
 80022de:	2307      	movs	r3, #7
 80022e0:	e00a      	b.n	80022f8 <HAL_GPIO_Init+0x244>
 80022e2:	2305      	movs	r3, #5
 80022e4:	e008      	b.n	80022f8 <HAL_GPIO_Init+0x244>
 80022e6:	2304      	movs	r3, #4
 80022e8:	e006      	b.n	80022f8 <HAL_GPIO_Init+0x244>
 80022ea:	2303      	movs	r3, #3
 80022ec:	e004      	b.n	80022f8 <HAL_GPIO_Init+0x244>
 80022ee:	2302      	movs	r3, #2
 80022f0:	e002      	b.n	80022f8 <HAL_GPIO_Init+0x244>
 80022f2:	2301      	movs	r3, #1
 80022f4:	e000      	b.n	80022f8 <HAL_GPIO_Init+0x244>
 80022f6:	2300      	movs	r3, #0
 80022f8:	697a      	ldr	r2, [r7, #20]
 80022fa:	f002 0203 	and.w	r2, r2, #3
 80022fe:	0092      	lsls	r2, r2, #2
 8002300:	4093      	lsls	r3, r2
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	4313      	orrs	r3, r2
 8002306:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002308:	4937      	ldr	r1, [pc, #220]	; (80023e8 <HAL_GPIO_Init+0x334>)
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	089b      	lsrs	r3, r3, #2
 800230e:	3302      	adds	r3, #2
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002316:	4b3b      	ldr	r3, [pc, #236]	; (8002404 <HAL_GPIO_Init+0x350>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	43db      	mvns	r3, r3
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	4013      	ands	r3, r2
 8002324:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	4313      	orrs	r3, r2
 8002338:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800233a:	4a32      	ldr	r2, [pc, #200]	; (8002404 <HAL_GPIO_Init+0x350>)
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002340:	4b30      	ldr	r3, [pc, #192]	; (8002404 <HAL_GPIO_Init+0x350>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	43db      	mvns	r3, r3
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	4013      	ands	r3, r2
 800234e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d003      	beq.n	8002364 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	4313      	orrs	r3, r2
 8002362:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002364:	4a27      	ldr	r2, [pc, #156]	; (8002404 <HAL_GPIO_Init+0x350>)
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800236a:	4b26      	ldr	r3, [pc, #152]	; (8002404 <HAL_GPIO_Init+0x350>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	43db      	mvns	r3, r3
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	4013      	ands	r3, r2
 8002378:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d003      	beq.n	800238e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	4313      	orrs	r3, r2
 800238c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800238e:	4a1d      	ldr	r2, [pc, #116]	; (8002404 <HAL_GPIO_Init+0x350>)
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002394:	4b1b      	ldr	r3, [pc, #108]	; (8002404 <HAL_GPIO_Init+0x350>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	43db      	mvns	r3, r3
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	4013      	ands	r3, r2
 80023a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d003      	beq.n	80023b8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80023b8:	4a12      	ldr	r2, [pc, #72]	; (8002404 <HAL_GPIO_Init+0x350>)
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	3301      	adds	r3, #1
 80023c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	fa22 f303 	lsr.w	r3, r2, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	f47f ae78 	bne.w	80020c4 <HAL_GPIO_Init+0x10>
  }
}
 80023d4:	bf00      	nop
 80023d6:	bf00      	nop
 80023d8:	371c      	adds	r7, #28
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	40021000 	.word	0x40021000
 80023e8:	40010000 	.word	0x40010000
 80023ec:	48000400 	.word	0x48000400
 80023f0:	48000800 	.word	0x48000800
 80023f4:	48000c00 	.word	0x48000c00
 80023f8:	48001000 	.word	0x48001000
 80023fc:	48001400 	.word	0x48001400
 8002400:	48001800 	.word	0x48001800
 8002404:	40010400 	.word	0x40010400

08002408 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	460b      	mov	r3, r1
 8002412:	807b      	strh	r3, [r7, #2]
 8002414:	4613      	mov	r3, r2
 8002416:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002418:	787b      	ldrb	r3, [r7, #1]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800241e:	887a      	ldrh	r2, [r7, #2]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002424:	e002      	b.n	800242c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002426:	887a      	ldrh	r2, [r7, #2]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800242c:	bf00      	nop
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	460b      	mov	r3, r1
 8002442:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	695b      	ldr	r3, [r3, #20]
 8002448:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800244a:	887a      	ldrh	r2, [r7, #2]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	4013      	ands	r3, r2
 8002450:	041a      	lsls	r2, r3, #16
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	43d9      	mvns	r1, r3
 8002456:	887b      	ldrh	r3, [r7, #2]
 8002458:	400b      	ands	r3, r1
 800245a:	431a      	orrs	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	619a      	str	r2, [r3, #24]
}
 8002460:	bf00      	nop
 8002462:	3714      	adds	r7, #20
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002470:	4b04      	ldr	r3, [pc, #16]	; (8002484 <HAL_PWREx_GetVoltageRange+0x18>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002478:	4618      	mov	r0, r3
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	40007000 	.word	0x40007000

08002488 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002488:	b480      	push	{r7}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002496:	d130      	bne.n	80024fa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002498:	4b23      	ldr	r3, [pc, #140]	; (8002528 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80024a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024a4:	d038      	beq.n	8002518 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80024a6:	4b20      	ldr	r3, [pc, #128]	; (8002528 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024ae:	4a1e      	ldr	r2, [pc, #120]	; (8002528 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024b4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80024b6:	4b1d      	ldr	r3, [pc, #116]	; (800252c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2232      	movs	r2, #50	; 0x32
 80024bc:	fb02 f303 	mul.w	r3, r2, r3
 80024c0:	4a1b      	ldr	r2, [pc, #108]	; (8002530 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80024c2:	fba2 2303 	umull	r2, r3, r2, r3
 80024c6:	0c9b      	lsrs	r3, r3, #18
 80024c8:	3301      	adds	r3, #1
 80024ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024cc:	e002      	b.n	80024d4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	3b01      	subs	r3, #1
 80024d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024d4:	4b14      	ldr	r3, [pc, #80]	; (8002528 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024d6:	695b      	ldr	r3, [r3, #20]
 80024d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024e0:	d102      	bne.n	80024e8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1f2      	bne.n	80024ce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024e8:	4b0f      	ldr	r3, [pc, #60]	; (8002528 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024ea:	695b      	ldr	r3, [r3, #20]
 80024ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024f4:	d110      	bne.n	8002518 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e00f      	b.n	800251a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80024fa:	4b0b      	ldr	r3, [pc, #44]	; (8002528 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002502:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002506:	d007      	beq.n	8002518 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002508:	4b07      	ldr	r3, [pc, #28]	; (8002528 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002510:	4a05      	ldr	r2, [pc, #20]	; (8002528 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002512:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002516:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3714      	adds	r7, #20
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	40007000 	.word	0x40007000
 800252c:	20000000 	.word	0x20000000
 8002530:	431bde83 	.word	0x431bde83

08002534 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b088      	sub	sp, #32
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e3d4      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002546:	4ba1      	ldr	r3, [pc, #644]	; (80027cc <HAL_RCC_OscConfig+0x298>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f003 030c 	and.w	r3, r3, #12
 800254e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002550:	4b9e      	ldr	r3, [pc, #632]	; (80027cc <HAL_RCC_OscConfig+0x298>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	f003 0303 	and.w	r3, r3, #3
 8002558:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0310 	and.w	r3, r3, #16
 8002562:	2b00      	cmp	r3, #0
 8002564:	f000 80e4 	beq.w	8002730 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d007      	beq.n	800257e <HAL_RCC_OscConfig+0x4a>
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	2b0c      	cmp	r3, #12
 8002572:	f040 808b 	bne.w	800268c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	2b01      	cmp	r3, #1
 800257a:	f040 8087 	bne.w	800268c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800257e:	4b93      	ldr	r3, [pc, #588]	; (80027cc <HAL_RCC_OscConfig+0x298>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d005      	beq.n	8002596 <HAL_RCC_OscConfig+0x62>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e3ac      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a1a      	ldr	r2, [r3, #32]
 800259a:	4b8c      	ldr	r3, [pc, #560]	; (80027cc <HAL_RCC_OscConfig+0x298>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0308 	and.w	r3, r3, #8
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d004      	beq.n	80025b0 <HAL_RCC_OscConfig+0x7c>
 80025a6:	4b89      	ldr	r3, [pc, #548]	; (80027cc <HAL_RCC_OscConfig+0x298>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025ae:	e005      	b.n	80025bc <HAL_RCC_OscConfig+0x88>
 80025b0:	4b86      	ldr	r3, [pc, #536]	; (80027cc <HAL_RCC_OscConfig+0x298>)
 80025b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025b6:	091b      	lsrs	r3, r3, #4
 80025b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025bc:	4293      	cmp	r3, r2
 80025be:	d223      	bcs.n	8002608 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a1b      	ldr	r3, [r3, #32]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f000 fd41 	bl	800304c <RCC_SetFlashLatencyFromMSIRange>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e38d      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025d4:	4b7d      	ldr	r3, [pc, #500]	; (80027cc <HAL_RCC_OscConfig+0x298>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a7c      	ldr	r2, [pc, #496]	; (80027cc <HAL_RCC_OscConfig+0x298>)
 80025da:	f043 0308 	orr.w	r3, r3, #8
 80025de:	6013      	str	r3, [r2, #0]
 80025e0:	4b7a      	ldr	r3, [pc, #488]	; (80027cc <HAL_RCC_OscConfig+0x298>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a1b      	ldr	r3, [r3, #32]
 80025ec:	4977      	ldr	r1, [pc, #476]	; (80027cc <HAL_RCC_OscConfig+0x298>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025f2:	4b76      	ldr	r3, [pc, #472]	; (80027cc <HAL_RCC_OscConfig+0x298>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	69db      	ldr	r3, [r3, #28]
 80025fe:	021b      	lsls	r3, r3, #8
 8002600:	4972      	ldr	r1, [pc, #456]	; (80027cc <HAL_RCC_OscConfig+0x298>)
 8002602:	4313      	orrs	r3, r2
 8002604:	604b      	str	r3, [r1, #4]
 8002606:	e025      	b.n	8002654 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002608:	4b70      	ldr	r3, [pc, #448]	; (80027cc <HAL_RCC_OscConfig+0x298>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a6f      	ldr	r2, [pc, #444]	; (80027cc <HAL_RCC_OscConfig+0x298>)
 800260e:	f043 0308 	orr.w	r3, r3, #8
 8002612:	6013      	str	r3, [r2, #0]
 8002614:	4b6d      	ldr	r3, [pc, #436]	; (80027cc <HAL_RCC_OscConfig+0x298>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a1b      	ldr	r3, [r3, #32]
 8002620:	496a      	ldr	r1, [pc, #424]	; (80027cc <HAL_RCC_OscConfig+0x298>)
 8002622:	4313      	orrs	r3, r2
 8002624:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002626:	4b69      	ldr	r3, [pc, #420]	; (80027cc <HAL_RCC_OscConfig+0x298>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	021b      	lsls	r3, r3, #8
 8002634:	4965      	ldr	r1, [pc, #404]	; (80027cc <HAL_RCC_OscConfig+0x298>)
 8002636:	4313      	orrs	r3, r2
 8002638:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d109      	bne.n	8002654 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	4618      	mov	r0, r3
 8002646:	f000 fd01 	bl	800304c <RCC_SetFlashLatencyFromMSIRange>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e34d      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002654:	f000 fc36 	bl	8002ec4 <HAL_RCC_GetSysClockFreq>
 8002658:	4602      	mov	r2, r0
 800265a:	4b5c      	ldr	r3, [pc, #368]	; (80027cc <HAL_RCC_OscConfig+0x298>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	091b      	lsrs	r3, r3, #4
 8002660:	f003 030f 	and.w	r3, r3, #15
 8002664:	495a      	ldr	r1, [pc, #360]	; (80027d0 <HAL_RCC_OscConfig+0x29c>)
 8002666:	5ccb      	ldrb	r3, [r1, r3]
 8002668:	f003 031f 	and.w	r3, r3, #31
 800266c:	fa22 f303 	lsr.w	r3, r2, r3
 8002670:	4a58      	ldr	r2, [pc, #352]	; (80027d4 <HAL_RCC_OscConfig+0x2a0>)
 8002672:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002674:	4b58      	ldr	r3, [pc, #352]	; (80027d8 <HAL_RCC_OscConfig+0x2a4>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4618      	mov	r0, r3
 800267a:	f7fe fc0d 	bl	8000e98 <HAL_InitTick>
 800267e:	4603      	mov	r3, r0
 8002680:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002682:	7bfb      	ldrb	r3, [r7, #15]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d052      	beq.n	800272e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002688:	7bfb      	ldrb	r3, [r7, #15]
 800268a:	e331      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d032      	beq.n	80026fa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002694:	4b4d      	ldr	r3, [pc, #308]	; (80027cc <HAL_RCC_OscConfig+0x298>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a4c      	ldr	r2, [pc, #304]	; (80027cc <HAL_RCC_OscConfig+0x298>)
 800269a:	f043 0301 	orr.w	r3, r3, #1
 800269e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026a0:	f7fe fc4a 	bl	8000f38 <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026a8:	f7fe fc46 	bl	8000f38 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e31a      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026ba:	4b44      	ldr	r3, [pc, #272]	; (80027cc <HAL_RCC_OscConfig+0x298>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d0f0      	beq.n	80026a8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026c6:	4b41      	ldr	r3, [pc, #260]	; (80027cc <HAL_RCC_OscConfig+0x298>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a40      	ldr	r2, [pc, #256]	; (80027cc <HAL_RCC_OscConfig+0x298>)
 80026cc:	f043 0308 	orr.w	r3, r3, #8
 80026d0:	6013      	str	r3, [r2, #0]
 80026d2:	4b3e      	ldr	r3, [pc, #248]	; (80027cc <HAL_RCC_OscConfig+0x298>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a1b      	ldr	r3, [r3, #32]
 80026de:	493b      	ldr	r1, [pc, #236]	; (80027cc <HAL_RCC_OscConfig+0x298>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026e4:	4b39      	ldr	r3, [pc, #228]	; (80027cc <HAL_RCC_OscConfig+0x298>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	69db      	ldr	r3, [r3, #28]
 80026f0:	021b      	lsls	r3, r3, #8
 80026f2:	4936      	ldr	r1, [pc, #216]	; (80027cc <HAL_RCC_OscConfig+0x298>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	604b      	str	r3, [r1, #4]
 80026f8:	e01a      	b.n	8002730 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80026fa:	4b34      	ldr	r3, [pc, #208]	; (80027cc <HAL_RCC_OscConfig+0x298>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a33      	ldr	r2, [pc, #204]	; (80027cc <HAL_RCC_OscConfig+0x298>)
 8002700:	f023 0301 	bic.w	r3, r3, #1
 8002704:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002706:	f7fe fc17 	bl	8000f38 <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800270c:	e008      	b.n	8002720 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800270e:	f7fe fc13 	bl	8000f38 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e2e7      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002720:	4b2a      	ldr	r3, [pc, #168]	; (80027cc <HAL_RCC_OscConfig+0x298>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1f0      	bne.n	800270e <HAL_RCC_OscConfig+0x1da>
 800272c:	e000      	b.n	8002730 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800272e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0301 	and.w	r3, r3, #1
 8002738:	2b00      	cmp	r3, #0
 800273a:	d074      	beq.n	8002826 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	2b08      	cmp	r3, #8
 8002740:	d005      	beq.n	800274e <HAL_RCC_OscConfig+0x21a>
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	2b0c      	cmp	r3, #12
 8002746:	d10e      	bne.n	8002766 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	2b03      	cmp	r3, #3
 800274c:	d10b      	bne.n	8002766 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800274e:	4b1f      	ldr	r3, [pc, #124]	; (80027cc <HAL_RCC_OscConfig+0x298>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d064      	beq.n	8002824 <HAL_RCC_OscConfig+0x2f0>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d160      	bne.n	8002824 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e2c4      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800276e:	d106      	bne.n	800277e <HAL_RCC_OscConfig+0x24a>
 8002770:	4b16      	ldr	r3, [pc, #88]	; (80027cc <HAL_RCC_OscConfig+0x298>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a15      	ldr	r2, [pc, #84]	; (80027cc <HAL_RCC_OscConfig+0x298>)
 8002776:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800277a:	6013      	str	r3, [r2, #0]
 800277c:	e01d      	b.n	80027ba <HAL_RCC_OscConfig+0x286>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002786:	d10c      	bne.n	80027a2 <HAL_RCC_OscConfig+0x26e>
 8002788:	4b10      	ldr	r3, [pc, #64]	; (80027cc <HAL_RCC_OscConfig+0x298>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a0f      	ldr	r2, [pc, #60]	; (80027cc <HAL_RCC_OscConfig+0x298>)
 800278e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002792:	6013      	str	r3, [r2, #0]
 8002794:	4b0d      	ldr	r3, [pc, #52]	; (80027cc <HAL_RCC_OscConfig+0x298>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a0c      	ldr	r2, [pc, #48]	; (80027cc <HAL_RCC_OscConfig+0x298>)
 800279a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800279e:	6013      	str	r3, [r2, #0]
 80027a0:	e00b      	b.n	80027ba <HAL_RCC_OscConfig+0x286>
 80027a2:	4b0a      	ldr	r3, [pc, #40]	; (80027cc <HAL_RCC_OscConfig+0x298>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a09      	ldr	r2, [pc, #36]	; (80027cc <HAL_RCC_OscConfig+0x298>)
 80027a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ac:	6013      	str	r3, [r2, #0]
 80027ae:	4b07      	ldr	r3, [pc, #28]	; (80027cc <HAL_RCC_OscConfig+0x298>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a06      	ldr	r2, [pc, #24]	; (80027cc <HAL_RCC_OscConfig+0x298>)
 80027b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027b8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d01c      	beq.n	80027fc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c2:	f7fe fbb9 	bl	8000f38 <HAL_GetTick>
 80027c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027c8:	e011      	b.n	80027ee <HAL_RCC_OscConfig+0x2ba>
 80027ca:	bf00      	nop
 80027cc:	40021000 	.word	0x40021000
 80027d0:	08005810 	.word	0x08005810
 80027d4:	20000000 	.word	0x20000000
 80027d8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027dc:	f7fe fbac 	bl	8000f38 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b64      	cmp	r3, #100	; 0x64
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e280      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027ee:	4baf      	ldr	r3, [pc, #700]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d0f0      	beq.n	80027dc <HAL_RCC_OscConfig+0x2a8>
 80027fa:	e014      	b.n	8002826 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fc:	f7fe fb9c 	bl	8000f38 <HAL_GetTick>
 8002800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002802:	e008      	b.n	8002816 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002804:	f7fe fb98 	bl	8000f38 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b64      	cmp	r3, #100	; 0x64
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e26c      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002816:	4ba5      	ldr	r3, [pc, #660]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d1f0      	bne.n	8002804 <HAL_RCC_OscConfig+0x2d0>
 8002822:	e000      	b.n	8002826 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002824:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d060      	beq.n	80028f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	2b04      	cmp	r3, #4
 8002836:	d005      	beq.n	8002844 <HAL_RCC_OscConfig+0x310>
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	2b0c      	cmp	r3, #12
 800283c:	d119      	bne.n	8002872 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	2b02      	cmp	r3, #2
 8002842:	d116      	bne.n	8002872 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002844:	4b99      	ldr	r3, [pc, #612]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800284c:	2b00      	cmp	r3, #0
 800284e:	d005      	beq.n	800285c <HAL_RCC_OscConfig+0x328>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d101      	bne.n	800285c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e249      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800285c:	4b93      	ldr	r3, [pc, #588]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	061b      	lsls	r3, r3, #24
 800286a:	4990      	ldr	r1, [pc, #576]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 800286c:	4313      	orrs	r3, r2
 800286e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002870:	e040      	b.n	80028f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d023      	beq.n	80028c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800287a:	4b8c      	ldr	r3, [pc, #560]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a8b      	ldr	r2, [pc, #556]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 8002880:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002884:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002886:	f7fe fb57 	bl	8000f38 <HAL_GetTick>
 800288a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800288c:	e008      	b.n	80028a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800288e:	f7fe fb53 	bl	8000f38 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e227      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028a0:	4b82      	ldr	r3, [pc, #520]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d0f0      	beq.n	800288e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ac:	4b7f      	ldr	r3, [pc, #508]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	061b      	lsls	r3, r3, #24
 80028ba:	497c      	ldr	r1, [pc, #496]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	604b      	str	r3, [r1, #4]
 80028c0:	e018      	b.n	80028f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028c2:	4b7a      	ldr	r3, [pc, #488]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a79      	ldr	r2, [pc, #484]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 80028c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ce:	f7fe fb33 	bl	8000f38 <HAL_GetTick>
 80028d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028d4:	e008      	b.n	80028e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028d6:	f7fe fb2f 	bl	8000f38 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d901      	bls.n	80028e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e203      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028e8:	4b70      	ldr	r3, [pc, #448]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d1f0      	bne.n	80028d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0308 	and.w	r3, r3, #8
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d03c      	beq.n	800297a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	695b      	ldr	r3, [r3, #20]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d01c      	beq.n	8002942 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002908:	4b68      	ldr	r3, [pc, #416]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 800290a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800290e:	4a67      	ldr	r2, [pc, #412]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 8002910:	f043 0301 	orr.w	r3, r3, #1
 8002914:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002918:	f7fe fb0e 	bl	8000f38 <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002920:	f7fe fb0a 	bl	8000f38 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e1de      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002932:	4b5e      	ldr	r3, [pc, #376]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 8002934:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d0ef      	beq.n	8002920 <HAL_RCC_OscConfig+0x3ec>
 8002940:	e01b      	b.n	800297a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002942:	4b5a      	ldr	r3, [pc, #360]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 8002944:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002948:	4a58      	ldr	r2, [pc, #352]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 800294a:	f023 0301 	bic.w	r3, r3, #1
 800294e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002952:	f7fe faf1 	bl	8000f38 <HAL_GetTick>
 8002956:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002958:	e008      	b.n	800296c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800295a:	f7fe faed 	bl	8000f38 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d901      	bls.n	800296c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e1c1      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800296c:	4b4f      	ldr	r3, [pc, #316]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 800296e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1ef      	bne.n	800295a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0304 	and.w	r3, r3, #4
 8002982:	2b00      	cmp	r3, #0
 8002984:	f000 80a6 	beq.w	8002ad4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002988:	2300      	movs	r3, #0
 800298a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800298c:	4b47      	ldr	r3, [pc, #284]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 800298e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d10d      	bne.n	80029b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002998:	4b44      	ldr	r3, [pc, #272]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 800299a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800299c:	4a43      	ldr	r2, [pc, #268]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 800299e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029a2:	6593      	str	r3, [r2, #88]	; 0x58
 80029a4:	4b41      	ldr	r3, [pc, #260]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 80029a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ac:	60bb      	str	r3, [r7, #8]
 80029ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029b0:	2301      	movs	r3, #1
 80029b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029b4:	4b3e      	ldr	r3, [pc, #248]	; (8002ab0 <HAL_RCC_OscConfig+0x57c>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d118      	bne.n	80029f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029c0:	4b3b      	ldr	r3, [pc, #236]	; (8002ab0 <HAL_RCC_OscConfig+0x57c>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a3a      	ldr	r2, [pc, #232]	; (8002ab0 <HAL_RCC_OscConfig+0x57c>)
 80029c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029cc:	f7fe fab4 	bl	8000f38 <HAL_GetTick>
 80029d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029d2:	e008      	b.n	80029e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029d4:	f7fe fab0 	bl	8000f38 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e184      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029e6:	4b32      	ldr	r3, [pc, #200]	; (8002ab0 <HAL_RCC_OscConfig+0x57c>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d0f0      	beq.n	80029d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d108      	bne.n	8002a0c <HAL_RCC_OscConfig+0x4d8>
 80029fa:	4b2c      	ldr	r3, [pc, #176]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 80029fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a00:	4a2a      	ldr	r2, [pc, #168]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 8002a02:	f043 0301 	orr.w	r3, r3, #1
 8002a06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a0a:	e024      	b.n	8002a56 <HAL_RCC_OscConfig+0x522>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	2b05      	cmp	r3, #5
 8002a12:	d110      	bne.n	8002a36 <HAL_RCC_OscConfig+0x502>
 8002a14:	4b25      	ldr	r3, [pc, #148]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 8002a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a1a:	4a24      	ldr	r2, [pc, #144]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 8002a1c:	f043 0304 	orr.w	r3, r3, #4
 8002a20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a24:	4b21      	ldr	r3, [pc, #132]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 8002a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a2a:	4a20      	ldr	r2, [pc, #128]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a34:	e00f      	b.n	8002a56 <HAL_RCC_OscConfig+0x522>
 8002a36:	4b1d      	ldr	r3, [pc, #116]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 8002a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a3c:	4a1b      	ldr	r2, [pc, #108]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 8002a3e:	f023 0301 	bic.w	r3, r3, #1
 8002a42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a46:	4b19      	ldr	r3, [pc, #100]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 8002a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a4c:	4a17      	ldr	r2, [pc, #92]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 8002a4e:	f023 0304 	bic.w	r3, r3, #4
 8002a52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d016      	beq.n	8002a8c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a5e:	f7fe fa6b 	bl	8000f38 <HAL_GetTick>
 8002a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a64:	e00a      	b.n	8002a7c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a66:	f7fe fa67 	bl	8000f38 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d901      	bls.n	8002a7c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e139      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a7c:	4b0b      	ldr	r3, [pc, #44]	; (8002aac <HAL_RCC_OscConfig+0x578>)
 8002a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d0ed      	beq.n	8002a66 <HAL_RCC_OscConfig+0x532>
 8002a8a:	e01a      	b.n	8002ac2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a8c:	f7fe fa54 	bl	8000f38 <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a92:	e00f      	b.n	8002ab4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a94:	f7fe fa50 	bl	8000f38 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d906      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e122      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7bc>
 8002aaa:	bf00      	nop
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ab4:	4b90      	ldr	r3, [pc, #576]	; (8002cf8 <HAL_RCC_OscConfig+0x7c4>)
 8002ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1e8      	bne.n	8002a94 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ac2:	7ffb      	ldrb	r3, [r7, #31]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d105      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ac8:	4b8b      	ldr	r3, [pc, #556]	; (8002cf8 <HAL_RCC_OscConfig+0x7c4>)
 8002aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002acc:	4a8a      	ldr	r2, [pc, #552]	; (8002cf8 <HAL_RCC_OscConfig+0x7c4>)
 8002ace:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ad2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f000 8108 	beq.w	8002cee <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	f040 80d0 	bne.w	8002c88 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002ae8:	4b83      	ldr	r3, [pc, #524]	; (8002cf8 <HAL_RCC_OscConfig+0x7c4>)
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	f003 0203 	and.w	r2, r3, #3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d130      	bne.n	8002b5e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b06:	3b01      	subs	r3, #1
 8002b08:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d127      	bne.n	8002b5e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b18:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d11f      	bne.n	8002b5e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b28:	2a07      	cmp	r2, #7
 8002b2a:	bf14      	ite	ne
 8002b2c:	2201      	movne	r2, #1
 8002b2e:	2200      	moveq	r2, #0
 8002b30:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d113      	bne.n	8002b5e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b40:	085b      	lsrs	r3, r3, #1
 8002b42:	3b01      	subs	r3, #1
 8002b44:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d109      	bne.n	8002b5e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b54:	085b      	lsrs	r3, r3, #1
 8002b56:	3b01      	subs	r3, #1
 8002b58:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d06e      	beq.n	8002c3c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	2b0c      	cmp	r3, #12
 8002b62:	d069      	beq.n	8002c38 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b64:	4b64      	ldr	r3, [pc, #400]	; (8002cf8 <HAL_RCC_OscConfig+0x7c4>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d105      	bne.n	8002b7c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002b70:	4b61      	ldr	r3, [pc, #388]	; (8002cf8 <HAL_RCC_OscConfig+0x7c4>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e0b7      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b80:	4b5d      	ldr	r3, [pc, #372]	; (8002cf8 <HAL_RCC_OscConfig+0x7c4>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a5c      	ldr	r2, [pc, #368]	; (8002cf8 <HAL_RCC_OscConfig+0x7c4>)
 8002b86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b8a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b8c:	f7fe f9d4 	bl	8000f38 <HAL_GetTick>
 8002b90:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b94:	f7fe f9d0 	bl	8000f38 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e0a4      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ba6:	4b54      	ldr	r3, [pc, #336]	; (8002cf8 <HAL_RCC_OscConfig+0x7c4>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1f0      	bne.n	8002b94 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bb2:	4b51      	ldr	r3, [pc, #324]	; (8002cf8 <HAL_RCC_OscConfig+0x7c4>)
 8002bb4:	68da      	ldr	r2, [r3, #12]
 8002bb6:	4b51      	ldr	r3, [pc, #324]	; (8002cfc <HAL_RCC_OscConfig+0x7c8>)
 8002bb8:	4013      	ands	r3, r2
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002bc2:	3a01      	subs	r2, #1
 8002bc4:	0112      	lsls	r2, r2, #4
 8002bc6:	4311      	orrs	r1, r2
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002bcc:	0212      	lsls	r2, r2, #8
 8002bce:	4311      	orrs	r1, r2
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002bd4:	0852      	lsrs	r2, r2, #1
 8002bd6:	3a01      	subs	r2, #1
 8002bd8:	0552      	lsls	r2, r2, #21
 8002bda:	4311      	orrs	r1, r2
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002be0:	0852      	lsrs	r2, r2, #1
 8002be2:	3a01      	subs	r2, #1
 8002be4:	0652      	lsls	r2, r2, #25
 8002be6:	4311      	orrs	r1, r2
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002bec:	0912      	lsrs	r2, r2, #4
 8002bee:	0452      	lsls	r2, r2, #17
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	4941      	ldr	r1, [pc, #260]	; (8002cf8 <HAL_RCC_OscConfig+0x7c4>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002bf8:	4b3f      	ldr	r3, [pc, #252]	; (8002cf8 <HAL_RCC_OscConfig+0x7c4>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a3e      	ldr	r2, [pc, #248]	; (8002cf8 <HAL_RCC_OscConfig+0x7c4>)
 8002bfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c02:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c04:	4b3c      	ldr	r3, [pc, #240]	; (8002cf8 <HAL_RCC_OscConfig+0x7c4>)
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	4a3b      	ldr	r2, [pc, #236]	; (8002cf8 <HAL_RCC_OscConfig+0x7c4>)
 8002c0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c0e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c10:	f7fe f992 	bl	8000f38 <HAL_GetTick>
 8002c14:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c16:	e008      	b.n	8002c2a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c18:	f7fe f98e 	bl	8000f38 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e062      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c2a:	4b33      	ldr	r3, [pc, #204]	; (8002cf8 <HAL_RCC_OscConfig+0x7c4>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d0f0      	beq.n	8002c18 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c36:	e05a      	b.n	8002cee <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e059      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c3c:	4b2e      	ldr	r3, [pc, #184]	; (8002cf8 <HAL_RCC_OscConfig+0x7c4>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d152      	bne.n	8002cee <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002c48:	4b2b      	ldr	r3, [pc, #172]	; (8002cf8 <HAL_RCC_OscConfig+0x7c4>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a2a      	ldr	r2, [pc, #168]	; (8002cf8 <HAL_RCC_OscConfig+0x7c4>)
 8002c4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c52:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c54:	4b28      	ldr	r3, [pc, #160]	; (8002cf8 <HAL_RCC_OscConfig+0x7c4>)
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	4a27      	ldr	r2, [pc, #156]	; (8002cf8 <HAL_RCC_OscConfig+0x7c4>)
 8002c5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c5e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c60:	f7fe f96a 	bl	8000f38 <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c68:	f7fe f966 	bl	8000f38 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e03a      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c7a:	4b1f      	ldr	r3, [pc, #124]	; (8002cf8 <HAL_RCC_OscConfig+0x7c4>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d0f0      	beq.n	8002c68 <HAL_RCC_OscConfig+0x734>
 8002c86:	e032      	b.n	8002cee <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	2b0c      	cmp	r3, #12
 8002c8c:	d02d      	beq.n	8002cea <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c8e:	4b1a      	ldr	r3, [pc, #104]	; (8002cf8 <HAL_RCC_OscConfig+0x7c4>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a19      	ldr	r2, [pc, #100]	; (8002cf8 <HAL_RCC_OscConfig+0x7c4>)
 8002c94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c98:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002c9a:	4b17      	ldr	r3, [pc, #92]	; (8002cf8 <HAL_RCC_OscConfig+0x7c4>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d105      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002ca6:	4b14      	ldr	r3, [pc, #80]	; (8002cf8 <HAL_RCC_OscConfig+0x7c4>)
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	4a13      	ldr	r2, [pc, #76]	; (8002cf8 <HAL_RCC_OscConfig+0x7c4>)
 8002cac:	f023 0303 	bic.w	r3, r3, #3
 8002cb0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002cb2:	4b11      	ldr	r3, [pc, #68]	; (8002cf8 <HAL_RCC_OscConfig+0x7c4>)
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	4a10      	ldr	r2, [pc, #64]	; (8002cf8 <HAL_RCC_OscConfig+0x7c4>)
 8002cb8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002cbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cc0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc2:	f7fe f939 	bl	8000f38 <HAL_GetTick>
 8002cc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cc8:	e008      	b.n	8002cdc <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cca:	f7fe f935 	bl	8000f38 <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d901      	bls.n	8002cdc <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e009      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cdc:	4b06      	ldr	r3, [pc, #24]	; (8002cf8 <HAL_RCC_OscConfig+0x7c4>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1f0      	bne.n	8002cca <HAL_RCC_OscConfig+0x796>
 8002ce8:	e001      	b.n	8002cee <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e000      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3720      	adds	r7, #32
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	f99d808c 	.word	0xf99d808c

08002d00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d101      	bne.n	8002d14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e0c8      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d14:	4b66      	ldr	r3, [pc, #408]	; (8002eb0 <HAL_RCC_ClockConfig+0x1b0>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0307 	and.w	r3, r3, #7
 8002d1c:	683a      	ldr	r2, [r7, #0]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d910      	bls.n	8002d44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d22:	4b63      	ldr	r3, [pc, #396]	; (8002eb0 <HAL_RCC_ClockConfig+0x1b0>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f023 0207 	bic.w	r2, r3, #7
 8002d2a:	4961      	ldr	r1, [pc, #388]	; (8002eb0 <HAL_RCC_ClockConfig+0x1b0>)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d32:	4b5f      	ldr	r3, [pc, #380]	; (8002eb0 <HAL_RCC_ClockConfig+0x1b0>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0307 	and.w	r3, r3, #7
 8002d3a:	683a      	ldr	r2, [r7, #0]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d001      	beq.n	8002d44 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e0b0      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0301 	and.w	r3, r3, #1
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d04c      	beq.n	8002dea <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	2b03      	cmp	r3, #3
 8002d56:	d107      	bne.n	8002d68 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d58:	4b56      	ldr	r3, [pc, #344]	; (8002eb4 <HAL_RCC_ClockConfig+0x1b4>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d121      	bne.n	8002da8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e09e      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d107      	bne.n	8002d80 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d70:	4b50      	ldr	r3, [pc, #320]	; (8002eb4 <HAL_RCC_ClockConfig+0x1b4>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d115      	bne.n	8002da8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e092      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d107      	bne.n	8002d98 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d88:	4b4a      	ldr	r3, [pc, #296]	; (8002eb4 <HAL_RCC_ClockConfig+0x1b4>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0302 	and.w	r3, r3, #2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d109      	bne.n	8002da8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e086      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d98:	4b46      	ldr	r3, [pc, #280]	; (8002eb4 <HAL_RCC_ClockConfig+0x1b4>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d101      	bne.n	8002da8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e07e      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002da8:	4b42      	ldr	r3, [pc, #264]	; (8002eb4 <HAL_RCC_ClockConfig+0x1b4>)
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f023 0203 	bic.w	r2, r3, #3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	493f      	ldr	r1, [pc, #252]	; (8002eb4 <HAL_RCC_ClockConfig+0x1b4>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dba:	f7fe f8bd 	bl	8000f38 <HAL_GetTick>
 8002dbe:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dc0:	e00a      	b.n	8002dd8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dc2:	f7fe f8b9 	bl	8000f38 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e066      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dd8:	4b36      	ldr	r3, [pc, #216]	; (8002eb4 <HAL_RCC_ClockConfig+0x1b4>)
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f003 020c 	and.w	r2, r3, #12
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d1eb      	bne.n	8002dc2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d008      	beq.n	8002e08 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002df6:	4b2f      	ldr	r3, [pc, #188]	; (8002eb4 <HAL_RCC_ClockConfig+0x1b4>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	492c      	ldr	r1, [pc, #176]	; (8002eb4 <HAL_RCC_ClockConfig+0x1b4>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e08:	4b29      	ldr	r3, [pc, #164]	; (8002eb0 <HAL_RCC_ClockConfig+0x1b0>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0307 	and.w	r3, r3, #7
 8002e10:	683a      	ldr	r2, [r7, #0]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d210      	bcs.n	8002e38 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e16:	4b26      	ldr	r3, [pc, #152]	; (8002eb0 <HAL_RCC_ClockConfig+0x1b0>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f023 0207 	bic.w	r2, r3, #7
 8002e1e:	4924      	ldr	r1, [pc, #144]	; (8002eb0 <HAL_RCC_ClockConfig+0x1b0>)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e26:	4b22      	ldr	r3, [pc, #136]	; (8002eb0 <HAL_RCC_ClockConfig+0x1b0>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0307 	and.w	r3, r3, #7
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d001      	beq.n	8002e38 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e036      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0304 	and.w	r3, r3, #4
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d008      	beq.n	8002e56 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e44:	4b1b      	ldr	r3, [pc, #108]	; (8002eb4 <HAL_RCC_ClockConfig+0x1b4>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	4918      	ldr	r1, [pc, #96]	; (8002eb4 <HAL_RCC_ClockConfig+0x1b4>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0308 	and.w	r3, r3, #8
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d009      	beq.n	8002e76 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e62:	4b14      	ldr	r3, [pc, #80]	; (8002eb4 <HAL_RCC_ClockConfig+0x1b4>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	4910      	ldr	r1, [pc, #64]	; (8002eb4 <HAL_RCC_ClockConfig+0x1b4>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e76:	f000 f825 	bl	8002ec4 <HAL_RCC_GetSysClockFreq>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	4b0d      	ldr	r3, [pc, #52]	; (8002eb4 <HAL_RCC_ClockConfig+0x1b4>)
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	091b      	lsrs	r3, r3, #4
 8002e82:	f003 030f 	and.w	r3, r3, #15
 8002e86:	490c      	ldr	r1, [pc, #48]	; (8002eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e88:	5ccb      	ldrb	r3, [r1, r3]
 8002e8a:	f003 031f 	and.w	r3, r3, #31
 8002e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e92:	4a0a      	ldr	r2, [pc, #40]	; (8002ebc <HAL_RCC_ClockConfig+0x1bc>)
 8002e94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e96:	4b0a      	ldr	r3, [pc, #40]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7fd fffc 	bl	8000e98 <HAL_InitTick>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	72fb      	strb	r3, [r7, #11]

  return status;
 8002ea4:	7afb      	ldrb	r3, [r7, #11]
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	40022000 	.word	0x40022000
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	08005810 	.word	0x08005810
 8002ebc:	20000000 	.word	0x20000000
 8002ec0:	20000004 	.word	0x20000004

08002ec4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b089      	sub	sp, #36	; 0x24
 8002ec8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	61fb      	str	r3, [r7, #28]
 8002ece:	2300      	movs	r3, #0
 8002ed0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ed2:	4b3e      	ldr	r3, [pc, #248]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x108>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f003 030c 	and.w	r3, r3, #12
 8002eda:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002edc:	4b3b      	ldr	r3, [pc, #236]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x108>)
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	f003 0303 	and.w	r3, r3, #3
 8002ee4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d005      	beq.n	8002ef8 <HAL_RCC_GetSysClockFreq+0x34>
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	2b0c      	cmp	r3, #12
 8002ef0:	d121      	bne.n	8002f36 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d11e      	bne.n	8002f36 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ef8:	4b34      	ldr	r3, [pc, #208]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x108>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0308 	and.w	r3, r3, #8
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d107      	bne.n	8002f14 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f04:	4b31      	ldr	r3, [pc, #196]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x108>)
 8002f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f0a:	0a1b      	lsrs	r3, r3, #8
 8002f0c:	f003 030f 	and.w	r3, r3, #15
 8002f10:	61fb      	str	r3, [r7, #28]
 8002f12:	e005      	b.n	8002f20 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f14:	4b2d      	ldr	r3, [pc, #180]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x108>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	091b      	lsrs	r3, r3, #4
 8002f1a:	f003 030f 	and.w	r3, r3, #15
 8002f1e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f20:	4a2b      	ldr	r2, [pc, #172]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f28:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d10d      	bne.n	8002f4c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f34:	e00a      	b.n	8002f4c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	2b04      	cmp	r3, #4
 8002f3a:	d102      	bne.n	8002f42 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f3c:	4b25      	ldr	r3, [pc, #148]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f3e:	61bb      	str	r3, [r7, #24]
 8002f40:	e004      	b.n	8002f4c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	2b08      	cmp	r3, #8
 8002f46:	d101      	bne.n	8002f4c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f48:	4b23      	ldr	r3, [pc, #140]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f4a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	2b0c      	cmp	r3, #12
 8002f50:	d134      	bne.n	8002fbc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f52:	4b1e      	ldr	r3, [pc, #120]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x108>)
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	f003 0303 	and.w	r3, r3, #3
 8002f5a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d003      	beq.n	8002f6a <HAL_RCC_GetSysClockFreq+0xa6>
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	2b03      	cmp	r3, #3
 8002f66:	d003      	beq.n	8002f70 <HAL_RCC_GetSysClockFreq+0xac>
 8002f68:	e005      	b.n	8002f76 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002f6a:	4b1a      	ldr	r3, [pc, #104]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f6c:	617b      	str	r3, [r7, #20]
      break;
 8002f6e:	e005      	b.n	8002f7c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002f70:	4b19      	ldr	r3, [pc, #100]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f72:	617b      	str	r3, [r7, #20]
      break;
 8002f74:	e002      	b.n	8002f7c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	617b      	str	r3, [r7, #20]
      break;
 8002f7a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f7c:	4b13      	ldr	r3, [pc, #76]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x108>)
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	091b      	lsrs	r3, r3, #4
 8002f82:	f003 0307 	and.w	r3, r3, #7
 8002f86:	3301      	adds	r3, #1
 8002f88:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f8a:	4b10      	ldr	r3, [pc, #64]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x108>)
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	0a1b      	lsrs	r3, r3, #8
 8002f90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f94:	697a      	ldr	r2, [r7, #20]
 8002f96:	fb02 f203 	mul.w	r2, r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002fa2:	4b0a      	ldr	r3, [pc, #40]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x108>)
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	0e5b      	lsrs	r3, r3, #25
 8002fa8:	f003 0303 	and.w	r3, r3, #3
 8002fac:	3301      	adds	r3, #1
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002fb2:	697a      	ldr	r2, [r7, #20]
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002fbc:	69bb      	ldr	r3, [r7, #24]
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3724      	adds	r7, #36	; 0x24
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	40021000 	.word	0x40021000
 8002fd0:	08005828 	.word	0x08005828
 8002fd4:	00f42400 	.word	0x00f42400
 8002fd8:	007a1200 	.word	0x007a1200

08002fdc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fe0:	4b03      	ldr	r3, [pc, #12]	; (8002ff0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	20000000 	.word	0x20000000

08002ff4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ff8:	f7ff fff0 	bl	8002fdc <HAL_RCC_GetHCLKFreq>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	4b06      	ldr	r3, [pc, #24]	; (8003018 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	0a1b      	lsrs	r3, r3, #8
 8003004:	f003 0307 	and.w	r3, r3, #7
 8003008:	4904      	ldr	r1, [pc, #16]	; (800301c <HAL_RCC_GetPCLK1Freq+0x28>)
 800300a:	5ccb      	ldrb	r3, [r1, r3]
 800300c:	f003 031f 	and.w	r3, r3, #31
 8003010:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003014:	4618      	mov	r0, r3
 8003016:	bd80      	pop	{r7, pc}
 8003018:	40021000 	.word	0x40021000
 800301c:	08005820 	.word	0x08005820

08003020 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003024:	f7ff ffda 	bl	8002fdc <HAL_RCC_GetHCLKFreq>
 8003028:	4602      	mov	r2, r0
 800302a:	4b06      	ldr	r3, [pc, #24]	; (8003044 <HAL_RCC_GetPCLK2Freq+0x24>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	0adb      	lsrs	r3, r3, #11
 8003030:	f003 0307 	and.w	r3, r3, #7
 8003034:	4904      	ldr	r1, [pc, #16]	; (8003048 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003036:	5ccb      	ldrb	r3, [r1, r3]
 8003038:	f003 031f 	and.w	r3, r3, #31
 800303c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003040:	4618      	mov	r0, r3
 8003042:	bd80      	pop	{r7, pc}
 8003044:	40021000 	.word	0x40021000
 8003048:	08005820 	.word	0x08005820

0800304c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003054:	2300      	movs	r3, #0
 8003056:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003058:	4b2a      	ldr	r3, [pc, #168]	; (8003104 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800305a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800305c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d003      	beq.n	800306c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003064:	f7ff fa02 	bl	800246c <HAL_PWREx_GetVoltageRange>
 8003068:	6178      	str	r0, [r7, #20]
 800306a:	e014      	b.n	8003096 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800306c:	4b25      	ldr	r3, [pc, #148]	; (8003104 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800306e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003070:	4a24      	ldr	r2, [pc, #144]	; (8003104 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003072:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003076:	6593      	str	r3, [r2, #88]	; 0x58
 8003078:	4b22      	ldr	r3, [pc, #136]	; (8003104 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800307a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800307c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003080:	60fb      	str	r3, [r7, #12]
 8003082:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003084:	f7ff f9f2 	bl	800246c <HAL_PWREx_GetVoltageRange>
 8003088:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800308a:	4b1e      	ldr	r3, [pc, #120]	; (8003104 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800308c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800308e:	4a1d      	ldr	r2, [pc, #116]	; (8003104 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003090:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003094:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800309c:	d10b      	bne.n	80030b6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2b80      	cmp	r3, #128	; 0x80
 80030a2:	d919      	bls.n	80030d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2ba0      	cmp	r3, #160	; 0xa0
 80030a8:	d902      	bls.n	80030b0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030aa:	2302      	movs	r3, #2
 80030ac:	613b      	str	r3, [r7, #16]
 80030ae:	e013      	b.n	80030d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030b0:	2301      	movs	r3, #1
 80030b2:	613b      	str	r3, [r7, #16]
 80030b4:	e010      	b.n	80030d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2b80      	cmp	r3, #128	; 0x80
 80030ba:	d902      	bls.n	80030c2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80030bc:	2303      	movs	r3, #3
 80030be:	613b      	str	r3, [r7, #16]
 80030c0:	e00a      	b.n	80030d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b80      	cmp	r3, #128	; 0x80
 80030c6:	d102      	bne.n	80030ce <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030c8:	2302      	movs	r3, #2
 80030ca:	613b      	str	r3, [r7, #16]
 80030cc:	e004      	b.n	80030d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2b70      	cmp	r3, #112	; 0x70
 80030d2:	d101      	bne.n	80030d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030d4:	2301      	movs	r3, #1
 80030d6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80030d8:	4b0b      	ldr	r3, [pc, #44]	; (8003108 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f023 0207 	bic.w	r2, r3, #7
 80030e0:	4909      	ldr	r1, [pc, #36]	; (8003108 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80030e8:	4b07      	ldr	r3, [pc, #28]	; (8003108 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0307 	and.w	r3, r3, #7
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d001      	beq.n	80030fa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e000      	b.n	80030fc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3718      	adds	r7, #24
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	40021000 	.word	0x40021000
 8003108:	40022000 	.word	0x40022000

0800310c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b086      	sub	sp, #24
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003114:	2300      	movs	r3, #0
 8003116:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003118:	2300      	movs	r3, #0
 800311a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003124:	2b00      	cmp	r3, #0
 8003126:	d041      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800312c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003130:	d02a      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003132:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003136:	d824      	bhi.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003138:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800313c:	d008      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800313e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003142:	d81e      	bhi.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00a      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003148:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800314c:	d010      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800314e:	e018      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003150:	4b86      	ldr	r3, [pc, #536]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	4a85      	ldr	r2, [pc, #532]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003156:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800315a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800315c:	e015      	b.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	3304      	adds	r3, #4
 8003162:	2100      	movs	r1, #0
 8003164:	4618      	mov	r0, r3
 8003166:	f000 fabb 	bl	80036e0 <RCCEx_PLLSAI1_Config>
 800316a:	4603      	mov	r3, r0
 800316c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800316e:	e00c      	b.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	3320      	adds	r3, #32
 8003174:	2100      	movs	r1, #0
 8003176:	4618      	mov	r0, r3
 8003178:	f000 fba6 	bl	80038c8 <RCCEx_PLLSAI2_Config>
 800317c:	4603      	mov	r3, r0
 800317e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003180:	e003      	b.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	74fb      	strb	r3, [r7, #19]
      break;
 8003186:	e000      	b.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003188:	bf00      	nop
    }

    if(ret == HAL_OK)
 800318a:	7cfb      	ldrb	r3, [r7, #19]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d10b      	bne.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003190:	4b76      	ldr	r3, [pc, #472]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003196:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800319e:	4973      	ldr	r1, [pc, #460]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80031a6:	e001      	b.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031a8:	7cfb      	ldrb	r3, [r7, #19]
 80031aa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d041      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031bc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80031c0:	d02a      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80031c2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80031c6:	d824      	bhi.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80031c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80031cc:	d008      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80031ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80031d2:	d81e      	bhi.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d00a      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80031d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031dc:	d010      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80031de:	e018      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80031e0:	4b62      	ldr	r3, [pc, #392]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	4a61      	ldr	r2, [pc, #388]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031ea:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031ec:	e015      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	3304      	adds	r3, #4
 80031f2:	2100      	movs	r1, #0
 80031f4:	4618      	mov	r0, r3
 80031f6:	f000 fa73 	bl	80036e0 <RCCEx_PLLSAI1_Config>
 80031fa:	4603      	mov	r3, r0
 80031fc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031fe:	e00c      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	3320      	adds	r3, #32
 8003204:	2100      	movs	r1, #0
 8003206:	4618      	mov	r0, r3
 8003208:	f000 fb5e 	bl	80038c8 <RCCEx_PLLSAI2_Config>
 800320c:	4603      	mov	r3, r0
 800320e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003210:	e003      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	74fb      	strb	r3, [r7, #19]
      break;
 8003216:	e000      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003218:	bf00      	nop
    }

    if(ret == HAL_OK)
 800321a:	7cfb      	ldrb	r3, [r7, #19]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d10b      	bne.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003220:	4b52      	ldr	r3, [pc, #328]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003226:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800322e:	494f      	ldr	r1, [pc, #316]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003230:	4313      	orrs	r3, r2
 8003232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003236:	e001      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003238:	7cfb      	ldrb	r3, [r7, #19]
 800323a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003244:	2b00      	cmp	r3, #0
 8003246:	f000 80a0 	beq.w	800338a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800324a:	2300      	movs	r3, #0
 800324c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800324e:	4b47      	ldr	r3, [pc, #284]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800325a:	2301      	movs	r3, #1
 800325c:	e000      	b.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800325e:	2300      	movs	r3, #0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00d      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003264:	4b41      	ldr	r3, [pc, #260]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003268:	4a40      	ldr	r2, [pc, #256]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800326a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800326e:	6593      	str	r3, [r2, #88]	; 0x58
 8003270:	4b3e      	ldr	r3, [pc, #248]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003278:	60bb      	str	r3, [r7, #8]
 800327a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800327c:	2301      	movs	r3, #1
 800327e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003280:	4b3b      	ldr	r3, [pc, #236]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a3a      	ldr	r2, [pc, #232]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003286:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800328a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800328c:	f7fd fe54 	bl	8000f38 <HAL_GetTick>
 8003290:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003292:	e009      	b.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003294:	f7fd fe50 	bl	8000f38 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d902      	bls.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	74fb      	strb	r3, [r7, #19]
        break;
 80032a6:	e005      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80032a8:	4b31      	ldr	r3, [pc, #196]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d0ef      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80032b4:	7cfb      	ldrb	r3, [r7, #19]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d15c      	bne.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80032ba:	4b2c      	ldr	r3, [pc, #176]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032c4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d01f      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032d2:	697a      	ldr	r2, [r7, #20]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d019      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80032d8:	4b24      	ldr	r3, [pc, #144]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032e2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80032e4:	4b21      	ldr	r3, [pc, #132]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ea:	4a20      	ldr	r2, [pc, #128]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032f4:	4b1d      	ldr	r3, [pc, #116]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032fa:	4a1c      	ldr	r2, [pc, #112]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003300:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003304:	4a19      	ldr	r2, [pc, #100]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	2b00      	cmp	r3, #0
 8003314:	d016      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003316:	f7fd fe0f 	bl	8000f38 <HAL_GetTick>
 800331a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800331c:	e00b      	b.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800331e:	f7fd fe0b 	bl	8000f38 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	f241 3288 	movw	r2, #5000	; 0x1388
 800332c:	4293      	cmp	r3, r2
 800332e:	d902      	bls.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	74fb      	strb	r3, [r7, #19]
            break;
 8003334:	e006      	b.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003336:	4b0d      	ldr	r3, [pc, #52]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d0ec      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003344:	7cfb      	ldrb	r3, [r7, #19]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d10c      	bne.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800334a:	4b08      	ldr	r3, [pc, #32]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800334c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003350:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800335a:	4904      	ldr	r1, [pc, #16]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800335c:	4313      	orrs	r3, r2
 800335e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003362:	e009      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003364:	7cfb      	ldrb	r3, [r7, #19]
 8003366:	74bb      	strb	r3, [r7, #18]
 8003368:	e006      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800336a:	bf00      	nop
 800336c:	40021000 	.word	0x40021000
 8003370:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003374:	7cfb      	ldrb	r3, [r7, #19]
 8003376:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003378:	7c7b      	ldrb	r3, [r7, #17]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d105      	bne.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800337e:	4b9e      	ldr	r3, [pc, #632]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003382:	4a9d      	ldr	r2, [pc, #628]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003384:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003388:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0301 	and.w	r3, r3, #1
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00a      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003396:	4b98      	ldr	r3, [pc, #608]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800339c:	f023 0203 	bic.w	r2, r3, #3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a4:	4994      	ldr	r1, [pc, #592]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0302 	and.w	r3, r3, #2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00a      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033b8:	4b8f      	ldr	r3, [pc, #572]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033be:	f023 020c 	bic.w	r2, r3, #12
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c6:	498c      	ldr	r1, [pc, #560]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0304 	and.w	r3, r3, #4
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00a      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033da:	4b87      	ldr	r3, [pc, #540]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e8:	4983      	ldr	r1, [pc, #524]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0308 	and.w	r3, r3, #8
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d00a      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033fc:	4b7e      	ldr	r3, [pc, #504]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003402:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340a:	497b      	ldr	r1, [pc, #492]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800340c:	4313      	orrs	r3, r2
 800340e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0310 	and.w	r3, r3, #16
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00a      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800341e:	4b76      	ldr	r3, [pc, #472]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003424:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800342c:	4972      	ldr	r1, [pc, #456]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800342e:	4313      	orrs	r3, r2
 8003430:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0320 	and.w	r3, r3, #32
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00a      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003440:	4b6d      	ldr	r3, [pc, #436]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003446:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800344e:	496a      	ldr	r1, [pc, #424]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003450:	4313      	orrs	r3, r2
 8003452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00a      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003462:	4b65      	ldr	r3, [pc, #404]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003468:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003470:	4961      	ldr	r1, [pc, #388]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003472:	4313      	orrs	r3, r2
 8003474:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00a      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003484:	4b5c      	ldr	r3, [pc, #368]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800348a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003492:	4959      	ldr	r1, [pc, #356]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003494:	4313      	orrs	r3, r2
 8003496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00a      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034a6:	4b54      	ldr	r3, [pc, #336]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034b4:	4950      	ldr	r1, [pc, #320]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d00a      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034c8:	4b4b      	ldr	r3, [pc, #300]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034d6:	4948      	ldr	r1, [pc, #288]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00a      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034ea:	4b43      	ldr	r3, [pc, #268]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034f8:	493f      	ldr	r1, [pc, #252]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d028      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800350c:	4b3a      	ldr	r3, [pc, #232]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800350e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003512:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800351a:	4937      	ldr	r1, [pc, #220]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800351c:	4313      	orrs	r3, r2
 800351e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003526:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800352a:	d106      	bne.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800352c:	4b32      	ldr	r3, [pc, #200]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	4a31      	ldr	r2, [pc, #196]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003532:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003536:	60d3      	str	r3, [r2, #12]
 8003538:	e011      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800353e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003542:	d10c      	bne.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	3304      	adds	r3, #4
 8003548:	2101      	movs	r1, #1
 800354a:	4618      	mov	r0, r3
 800354c:	f000 f8c8 	bl	80036e0 <RCCEx_PLLSAI1_Config>
 8003550:	4603      	mov	r3, r0
 8003552:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003554:	7cfb      	ldrb	r3, [r7, #19]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800355a:	7cfb      	ldrb	r3, [r7, #19]
 800355c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d028      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800356a:	4b23      	ldr	r3, [pc, #140]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800356c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003570:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003578:	491f      	ldr	r1, [pc, #124]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800357a:	4313      	orrs	r3, r2
 800357c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003584:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003588:	d106      	bne.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800358a:	4b1b      	ldr	r3, [pc, #108]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	4a1a      	ldr	r2, [pc, #104]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003590:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003594:	60d3      	str	r3, [r2, #12]
 8003596:	e011      	b.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035a0:	d10c      	bne.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	3304      	adds	r3, #4
 80035a6:	2101      	movs	r1, #1
 80035a8:	4618      	mov	r0, r3
 80035aa:	f000 f899 	bl	80036e0 <RCCEx_PLLSAI1_Config>
 80035ae:	4603      	mov	r3, r0
 80035b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035b2:	7cfb      	ldrb	r3, [r7, #19]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d001      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80035b8:	7cfb      	ldrb	r3, [r7, #19]
 80035ba:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d02b      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035c8:	4b0b      	ldr	r3, [pc, #44]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035d6:	4908      	ldr	r1, [pc, #32]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035e6:	d109      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035e8:	4b03      	ldr	r3, [pc, #12]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	4a02      	ldr	r2, [pc, #8]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035f2:	60d3      	str	r3, [r2, #12]
 80035f4:	e014      	b.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80035f6:	bf00      	nop
 80035f8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003600:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003604:	d10c      	bne.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	3304      	adds	r3, #4
 800360a:	2101      	movs	r1, #1
 800360c:	4618      	mov	r0, r3
 800360e:	f000 f867 	bl	80036e0 <RCCEx_PLLSAI1_Config>
 8003612:	4603      	mov	r3, r0
 8003614:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003616:	7cfb      	ldrb	r3, [r7, #19]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d001      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800361c:	7cfb      	ldrb	r3, [r7, #19]
 800361e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d02f      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800362c:	4b2b      	ldr	r3, [pc, #172]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800362e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003632:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800363a:	4928      	ldr	r1, [pc, #160]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800363c:	4313      	orrs	r3, r2
 800363e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003646:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800364a:	d10d      	bne.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	3304      	adds	r3, #4
 8003650:	2102      	movs	r1, #2
 8003652:	4618      	mov	r0, r3
 8003654:	f000 f844 	bl	80036e0 <RCCEx_PLLSAI1_Config>
 8003658:	4603      	mov	r3, r0
 800365a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800365c:	7cfb      	ldrb	r3, [r7, #19]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d014      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003662:	7cfb      	ldrb	r3, [r7, #19]
 8003664:	74bb      	strb	r3, [r7, #18]
 8003666:	e011      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800366c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003670:	d10c      	bne.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	3320      	adds	r3, #32
 8003676:	2102      	movs	r1, #2
 8003678:	4618      	mov	r0, r3
 800367a:	f000 f925 	bl	80038c8 <RCCEx_PLLSAI2_Config>
 800367e:	4603      	mov	r3, r0
 8003680:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003682:	7cfb      	ldrb	r3, [r7, #19]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003688:	7cfb      	ldrb	r3, [r7, #19]
 800368a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00a      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003698:	4b10      	ldr	r3, [pc, #64]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800369a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800369e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036a6:	490d      	ldr	r1, [pc, #52]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00b      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80036ba:	4b08      	ldr	r3, [pc, #32]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036ca:	4904      	ldr	r1, [pc, #16]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80036d2:	7cbb      	ldrb	r3, [r7, #18]
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3718      	adds	r7, #24
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	40021000 	.word	0x40021000

080036e0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036ea:	2300      	movs	r3, #0
 80036ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80036ee:	4b75      	ldr	r3, [pc, #468]	; (80038c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	f003 0303 	and.w	r3, r3, #3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d018      	beq.n	800372c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80036fa:	4b72      	ldr	r3, [pc, #456]	; (80038c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	f003 0203 	and.w	r2, r3, #3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	429a      	cmp	r2, r3
 8003708:	d10d      	bne.n	8003726 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
       ||
 800370e:	2b00      	cmp	r3, #0
 8003710:	d009      	beq.n	8003726 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003712:	4b6c      	ldr	r3, [pc, #432]	; (80038c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	091b      	lsrs	r3, r3, #4
 8003718:	f003 0307 	and.w	r3, r3, #7
 800371c:	1c5a      	adds	r2, r3, #1
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
       ||
 8003722:	429a      	cmp	r2, r3
 8003724:	d047      	beq.n	80037b6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	73fb      	strb	r3, [r7, #15]
 800372a:	e044      	b.n	80037b6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2b03      	cmp	r3, #3
 8003732:	d018      	beq.n	8003766 <RCCEx_PLLSAI1_Config+0x86>
 8003734:	2b03      	cmp	r3, #3
 8003736:	d825      	bhi.n	8003784 <RCCEx_PLLSAI1_Config+0xa4>
 8003738:	2b01      	cmp	r3, #1
 800373a:	d002      	beq.n	8003742 <RCCEx_PLLSAI1_Config+0x62>
 800373c:	2b02      	cmp	r3, #2
 800373e:	d009      	beq.n	8003754 <RCCEx_PLLSAI1_Config+0x74>
 8003740:	e020      	b.n	8003784 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003742:	4b60      	ldr	r3, [pc, #384]	; (80038c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d11d      	bne.n	800378a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003752:	e01a      	b.n	800378a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003754:	4b5b      	ldr	r3, [pc, #364]	; (80038c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800375c:	2b00      	cmp	r3, #0
 800375e:	d116      	bne.n	800378e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003764:	e013      	b.n	800378e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003766:	4b57      	ldr	r3, [pc, #348]	; (80038c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10f      	bne.n	8003792 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003772:	4b54      	ldr	r3, [pc, #336]	; (80038c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d109      	bne.n	8003792 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003782:	e006      	b.n	8003792 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	73fb      	strb	r3, [r7, #15]
      break;
 8003788:	e004      	b.n	8003794 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800378a:	bf00      	nop
 800378c:	e002      	b.n	8003794 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800378e:	bf00      	nop
 8003790:	e000      	b.n	8003794 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003792:	bf00      	nop
    }

    if(status == HAL_OK)
 8003794:	7bfb      	ldrb	r3, [r7, #15]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d10d      	bne.n	80037b6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800379a:	4b4a      	ldr	r3, [pc, #296]	; (80038c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6819      	ldr	r1, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	3b01      	subs	r3, #1
 80037ac:	011b      	lsls	r3, r3, #4
 80037ae:	430b      	orrs	r3, r1
 80037b0:	4944      	ldr	r1, [pc, #272]	; (80038c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80037b6:	7bfb      	ldrb	r3, [r7, #15]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d17d      	bne.n	80038b8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80037bc:	4b41      	ldr	r3, [pc, #260]	; (80038c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a40      	ldr	r2, [pc, #256]	; (80038c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80037c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037c8:	f7fd fbb6 	bl	8000f38 <HAL_GetTick>
 80037cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037ce:	e009      	b.n	80037e4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037d0:	f7fd fbb2 	bl	8000f38 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d902      	bls.n	80037e4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	73fb      	strb	r3, [r7, #15]
        break;
 80037e2:	e005      	b.n	80037f0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037e4:	4b37      	ldr	r3, [pc, #220]	; (80038c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d1ef      	bne.n	80037d0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80037f0:	7bfb      	ldrb	r3, [r7, #15]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d160      	bne.n	80038b8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d111      	bne.n	8003820 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037fc:	4b31      	ldr	r3, [pc, #196]	; (80038c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003804:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	6892      	ldr	r2, [r2, #8]
 800380c:	0211      	lsls	r1, r2, #8
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	68d2      	ldr	r2, [r2, #12]
 8003812:	0912      	lsrs	r2, r2, #4
 8003814:	0452      	lsls	r2, r2, #17
 8003816:	430a      	orrs	r2, r1
 8003818:	492a      	ldr	r1, [pc, #168]	; (80038c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800381a:	4313      	orrs	r3, r2
 800381c:	610b      	str	r3, [r1, #16]
 800381e:	e027      	b.n	8003870 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	2b01      	cmp	r3, #1
 8003824:	d112      	bne.n	800384c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003826:	4b27      	ldr	r3, [pc, #156]	; (80038c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800382e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	6892      	ldr	r2, [r2, #8]
 8003836:	0211      	lsls	r1, r2, #8
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	6912      	ldr	r2, [r2, #16]
 800383c:	0852      	lsrs	r2, r2, #1
 800383e:	3a01      	subs	r2, #1
 8003840:	0552      	lsls	r2, r2, #21
 8003842:	430a      	orrs	r2, r1
 8003844:	491f      	ldr	r1, [pc, #124]	; (80038c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003846:	4313      	orrs	r3, r2
 8003848:	610b      	str	r3, [r1, #16]
 800384a:	e011      	b.n	8003870 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800384c:	4b1d      	ldr	r3, [pc, #116]	; (80038c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003854:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	6892      	ldr	r2, [r2, #8]
 800385c:	0211      	lsls	r1, r2, #8
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	6952      	ldr	r2, [r2, #20]
 8003862:	0852      	lsrs	r2, r2, #1
 8003864:	3a01      	subs	r2, #1
 8003866:	0652      	lsls	r2, r2, #25
 8003868:	430a      	orrs	r2, r1
 800386a:	4916      	ldr	r1, [pc, #88]	; (80038c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800386c:	4313      	orrs	r3, r2
 800386e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003870:	4b14      	ldr	r3, [pc, #80]	; (80038c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a13      	ldr	r2, [pc, #76]	; (80038c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003876:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800387a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800387c:	f7fd fb5c 	bl	8000f38 <HAL_GetTick>
 8003880:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003882:	e009      	b.n	8003898 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003884:	f7fd fb58 	bl	8000f38 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	2b02      	cmp	r3, #2
 8003890:	d902      	bls.n	8003898 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	73fb      	strb	r3, [r7, #15]
          break;
 8003896:	e005      	b.n	80038a4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003898:	4b0a      	ldr	r3, [pc, #40]	; (80038c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d0ef      	beq.n	8003884 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80038a4:	7bfb      	ldrb	r3, [r7, #15]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d106      	bne.n	80038b8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80038aa:	4b06      	ldr	r3, [pc, #24]	; (80038c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ac:	691a      	ldr	r2, [r3, #16]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	4904      	ldr	r1, [pc, #16]	; (80038c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80038b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3710      	adds	r7, #16
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	40021000 	.word	0x40021000

080038c8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038d2:	2300      	movs	r3, #0
 80038d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80038d6:	4b6a      	ldr	r3, [pc, #424]	; (8003a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	f003 0303 	and.w	r3, r3, #3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d018      	beq.n	8003914 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80038e2:	4b67      	ldr	r3, [pc, #412]	; (8003a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	f003 0203 	and.w	r2, r3, #3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d10d      	bne.n	800390e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
       ||
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d009      	beq.n	800390e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80038fa:	4b61      	ldr	r3, [pc, #388]	; (8003a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	091b      	lsrs	r3, r3, #4
 8003900:	f003 0307 	and.w	r3, r3, #7
 8003904:	1c5a      	adds	r2, r3, #1
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
       ||
 800390a:	429a      	cmp	r2, r3
 800390c:	d047      	beq.n	800399e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	73fb      	strb	r3, [r7, #15]
 8003912:	e044      	b.n	800399e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2b03      	cmp	r3, #3
 800391a:	d018      	beq.n	800394e <RCCEx_PLLSAI2_Config+0x86>
 800391c:	2b03      	cmp	r3, #3
 800391e:	d825      	bhi.n	800396c <RCCEx_PLLSAI2_Config+0xa4>
 8003920:	2b01      	cmp	r3, #1
 8003922:	d002      	beq.n	800392a <RCCEx_PLLSAI2_Config+0x62>
 8003924:	2b02      	cmp	r3, #2
 8003926:	d009      	beq.n	800393c <RCCEx_PLLSAI2_Config+0x74>
 8003928:	e020      	b.n	800396c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800392a:	4b55      	ldr	r3, [pc, #340]	; (8003a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d11d      	bne.n	8003972 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800393a:	e01a      	b.n	8003972 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800393c:	4b50      	ldr	r3, [pc, #320]	; (8003a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003944:	2b00      	cmp	r3, #0
 8003946:	d116      	bne.n	8003976 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800394c:	e013      	b.n	8003976 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800394e:	4b4c      	ldr	r3, [pc, #304]	; (8003a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d10f      	bne.n	800397a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800395a:	4b49      	ldr	r3, [pc, #292]	; (8003a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d109      	bne.n	800397a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800396a:	e006      	b.n	800397a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	73fb      	strb	r3, [r7, #15]
      break;
 8003970:	e004      	b.n	800397c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003972:	bf00      	nop
 8003974:	e002      	b.n	800397c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003976:	bf00      	nop
 8003978:	e000      	b.n	800397c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800397a:	bf00      	nop
    }

    if(status == HAL_OK)
 800397c:	7bfb      	ldrb	r3, [r7, #15]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10d      	bne.n	800399e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003982:	4b3f      	ldr	r3, [pc, #252]	; (8003a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6819      	ldr	r1, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	3b01      	subs	r3, #1
 8003994:	011b      	lsls	r3, r3, #4
 8003996:	430b      	orrs	r3, r1
 8003998:	4939      	ldr	r1, [pc, #228]	; (8003a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 800399a:	4313      	orrs	r3, r2
 800399c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800399e:	7bfb      	ldrb	r3, [r7, #15]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d167      	bne.n	8003a74 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80039a4:	4b36      	ldr	r3, [pc, #216]	; (8003a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a35      	ldr	r2, [pc, #212]	; (8003a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039b0:	f7fd fac2 	bl	8000f38 <HAL_GetTick>
 80039b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80039b6:	e009      	b.n	80039cc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80039b8:	f7fd fabe 	bl	8000f38 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d902      	bls.n	80039cc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	73fb      	strb	r3, [r7, #15]
        break;
 80039ca:	e005      	b.n	80039d8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80039cc:	4b2c      	ldr	r3, [pc, #176]	; (8003a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d1ef      	bne.n	80039b8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80039d8:	7bfb      	ldrb	r3, [r7, #15]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d14a      	bne.n	8003a74 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d111      	bne.n	8003a08 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80039e4:	4b26      	ldr	r3, [pc, #152]	; (8003a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039e6:	695b      	ldr	r3, [r3, #20]
 80039e8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80039ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	6892      	ldr	r2, [r2, #8]
 80039f4:	0211      	lsls	r1, r2, #8
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	68d2      	ldr	r2, [r2, #12]
 80039fa:	0912      	lsrs	r2, r2, #4
 80039fc:	0452      	lsls	r2, r2, #17
 80039fe:	430a      	orrs	r2, r1
 8003a00:	491f      	ldr	r1, [pc, #124]	; (8003a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	614b      	str	r3, [r1, #20]
 8003a06:	e011      	b.n	8003a2c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a08:	4b1d      	ldr	r3, [pc, #116]	; (8003a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003a10:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	6892      	ldr	r2, [r2, #8]
 8003a18:	0211      	lsls	r1, r2, #8
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	6912      	ldr	r2, [r2, #16]
 8003a1e:	0852      	lsrs	r2, r2, #1
 8003a20:	3a01      	subs	r2, #1
 8003a22:	0652      	lsls	r2, r2, #25
 8003a24:	430a      	orrs	r2, r1
 8003a26:	4916      	ldr	r1, [pc, #88]	; (8003a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003a2c:	4b14      	ldr	r3, [pc, #80]	; (8003a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a13      	ldr	r2, [pc, #76]	; (8003a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a36:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a38:	f7fd fa7e 	bl	8000f38 <HAL_GetTick>
 8003a3c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a3e:	e009      	b.n	8003a54 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a40:	f7fd fa7a 	bl	8000f38 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d902      	bls.n	8003a54 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	73fb      	strb	r3, [r7, #15]
          break;
 8003a52:	e005      	b.n	8003a60 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a54:	4b0a      	ldr	r3, [pc, #40]	; (8003a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d0ef      	beq.n	8003a40 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003a60:	7bfb      	ldrb	r3, [r7, #15]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d106      	bne.n	8003a74 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003a66:	4b06      	ldr	r3, [pc, #24]	; (8003a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a68:	695a      	ldr	r2, [r3, #20]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	4904      	ldr	r1, [pc, #16]	; (8003a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3710      	adds	r7, #16
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	40021000 	.word	0x40021000

08003a84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e049      	b.n	8003b2a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d106      	bne.n	8003ab0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f7fd f808 	bl	8000ac0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2202      	movs	r2, #2
 8003ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	3304      	adds	r3, #4
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	4610      	mov	r0, r2
 8003ac4:	f000 fb7a 	bl	80041bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3708      	adds	r7, #8
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b082      	sub	sp, #8
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d101      	bne.n	8003b44 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e049      	b.n	8003bd8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d106      	bne.n	8003b5e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f000 f841 	bl	8003be0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2202      	movs	r2, #2
 8003b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	3304      	adds	r3, #4
 8003b6e:	4619      	mov	r1, r3
 8003b70:	4610      	mov	r0, r2
 8003b72:	f000 fb23 	bl	80041bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3708      	adds	r7, #8
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d109      	bne.n	8003c18 <HAL_TIM_PWM_Start+0x24>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	bf14      	ite	ne
 8003c10:	2301      	movne	r3, #1
 8003c12:	2300      	moveq	r3, #0
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	e03c      	b.n	8003c92 <HAL_TIM_PWM_Start+0x9e>
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	2b04      	cmp	r3, #4
 8003c1c:	d109      	bne.n	8003c32 <HAL_TIM_PWM_Start+0x3e>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	bf14      	ite	ne
 8003c2a:	2301      	movne	r3, #1
 8003c2c:	2300      	moveq	r3, #0
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	e02f      	b.n	8003c92 <HAL_TIM_PWM_Start+0x9e>
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	2b08      	cmp	r3, #8
 8003c36:	d109      	bne.n	8003c4c <HAL_TIM_PWM_Start+0x58>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	bf14      	ite	ne
 8003c44:	2301      	movne	r3, #1
 8003c46:	2300      	moveq	r3, #0
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	e022      	b.n	8003c92 <HAL_TIM_PWM_Start+0x9e>
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	2b0c      	cmp	r3, #12
 8003c50:	d109      	bne.n	8003c66 <HAL_TIM_PWM_Start+0x72>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	bf14      	ite	ne
 8003c5e:	2301      	movne	r3, #1
 8003c60:	2300      	moveq	r3, #0
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	e015      	b.n	8003c92 <HAL_TIM_PWM_Start+0x9e>
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	2b10      	cmp	r3, #16
 8003c6a:	d109      	bne.n	8003c80 <HAL_TIM_PWM_Start+0x8c>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	bf14      	ite	ne
 8003c78:	2301      	movne	r3, #1
 8003c7a:	2300      	moveq	r3, #0
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	e008      	b.n	8003c92 <HAL_TIM_PWM_Start+0x9e>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	bf14      	ite	ne
 8003c8c:	2301      	movne	r3, #1
 8003c8e:	2300      	moveq	r3, #0
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d001      	beq.n	8003c9a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e09c      	b.n	8003dd4 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d104      	bne.n	8003caa <HAL_TIM_PWM_Start+0xb6>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2202      	movs	r2, #2
 8003ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ca8:	e023      	b.n	8003cf2 <HAL_TIM_PWM_Start+0xfe>
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	2b04      	cmp	r3, #4
 8003cae:	d104      	bne.n	8003cba <HAL_TIM_PWM_Start+0xc6>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2202      	movs	r2, #2
 8003cb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cb8:	e01b      	b.n	8003cf2 <HAL_TIM_PWM_Start+0xfe>
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	2b08      	cmp	r3, #8
 8003cbe:	d104      	bne.n	8003cca <HAL_TIM_PWM_Start+0xd6>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cc8:	e013      	b.n	8003cf2 <HAL_TIM_PWM_Start+0xfe>
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	2b0c      	cmp	r3, #12
 8003cce:	d104      	bne.n	8003cda <HAL_TIM_PWM_Start+0xe6>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2202      	movs	r2, #2
 8003cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003cd8:	e00b      	b.n	8003cf2 <HAL_TIM_PWM_Start+0xfe>
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	2b10      	cmp	r3, #16
 8003cde:	d104      	bne.n	8003cea <HAL_TIM_PWM_Start+0xf6>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ce8:	e003      	b.n	8003cf2 <HAL_TIM_PWM_Start+0xfe>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2202      	movs	r2, #2
 8003cee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	6839      	ldr	r1, [r7, #0]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f000 fe68 	bl	80049d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a35      	ldr	r2, [pc, #212]	; (8003ddc <HAL_TIM_PWM_Start+0x1e8>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d013      	beq.n	8003d32 <HAL_TIM_PWM_Start+0x13e>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a34      	ldr	r2, [pc, #208]	; (8003de0 <HAL_TIM_PWM_Start+0x1ec>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d00e      	beq.n	8003d32 <HAL_TIM_PWM_Start+0x13e>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a32      	ldr	r2, [pc, #200]	; (8003de4 <HAL_TIM_PWM_Start+0x1f0>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d009      	beq.n	8003d32 <HAL_TIM_PWM_Start+0x13e>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a31      	ldr	r2, [pc, #196]	; (8003de8 <HAL_TIM_PWM_Start+0x1f4>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d004      	beq.n	8003d32 <HAL_TIM_PWM_Start+0x13e>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a2f      	ldr	r2, [pc, #188]	; (8003dec <HAL_TIM_PWM_Start+0x1f8>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d101      	bne.n	8003d36 <HAL_TIM_PWM_Start+0x142>
 8003d32:	2301      	movs	r3, #1
 8003d34:	e000      	b.n	8003d38 <HAL_TIM_PWM_Start+0x144>
 8003d36:	2300      	movs	r3, #0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d007      	beq.n	8003d4c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d4a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a22      	ldr	r2, [pc, #136]	; (8003ddc <HAL_TIM_PWM_Start+0x1e8>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d01d      	beq.n	8003d92 <HAL_TIM_PWM_Start+0x19e>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d5e:	d018      	beq.n	8003d92 <HAL_TIM_PWM_Start+0x19e>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a22      	ldr	r2, [pc, #136]	; (8003df0 <HAL_TIM_PWM_Start+0x1fc>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d013      	beq.n	8003d92 <HAL_TIM_PWM_Start+0x19e>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a21      	ldr	r2, [pc, #132]	; (8003df4 <HAL_TIM_PWM_Start+0x200>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d00e      	beq.n	8003d92 <HAL_TIM_PWM_Start+0x19e>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a1f      	ldr	r2, [pc, #124]	; (8003df8 <HAL_TIM_PWM_Start+0x204>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d009      	beq.n	8003d92 <HAL_TIM_PWM_Start+0x19e>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a17      	ldr	r2, [pc, #92]	; (8003de0 <HAL_TIM_PWM_Start+0x1ec>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d004      	beq.n	8003d92 <HAL_TIM_PWM_Start+0x19e>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a15      	ldr	r2, [pc, #84]	; (8003de4 <HAL_TIM_PWM_Start+0x1f0>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d115      	bne.n	8003dbe <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	689a      	ldr	r2, [r3, #8]
 8003d98:	4b18      	ldr	r3, [pc, #96]	; (8003dfc <HAL_TIM_PWM_Start+0x208>)
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2b06      	cmp	r3, #6
 8003da2:	d015      	beq.n	8003dd0 <HAL_TIM_PWM_Start+0x1dc>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003daa:	d011      	beq.n	8003dd0 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f042 0201 	orr.w	r2, r2, #1
 8003dba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dbc:	e008      	b.n	8003dd0 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f042 0201 	orr.w	r2, r2, #1
 8003dcc:	601a      	str	r2, [r3, #0]
 8003dce:	e000      	b.n	8003dd2 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dd0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3710      	adds	r7, #16
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	40012c00 	.word	0x40012c00
 8003de0:	40013400 	.word	0x40013400
 8003de4:	40014000 	.word	0x40014000
 8003de8:	40014400 	.word	0x40014400
 8003dec:	40014800 	.word	0x40014800
 8003df0:	40000400 	.word	0x40000400
 8003df4:	40000800 	.word	0x40000800
 8003df8:	40000c00 	.word	0x40000c00
 8003dfc:	00010007 	.word	0x00010007

08003e00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b086      	sub	sp, #24
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d101      	bne.n	8003e1e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	e0ff      	b.n	800401e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2b14      	cmp	r3, #20
 8003e2a:	f200 80f0 	bhi.w	800400e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003e2e:	a201      	add	r2, pc, #4	; (adr r2, 8003e34 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e34:	08003e89 	.word	0x08003e89
 8003e38:	0800400f 	.word	0x0800400f
 8003e3c:	0800400f 	.word	0x0800400f
 8003e40:	0800400f 	.word	0x0800400f
 8003e44:	08003ec9 	.word	0x08003ec9
 8003e48:	0800400f 	.word	0x0800400f
 8003e4c:	0800400f 	.word	0x0800400f
 8003e50:	0800400f 	.word	0x0800400f
 8003e54:	08003f0b 	.word	0x08003f0b
 8003e58:	0800400f 	.word	0x0800400f
 8003e5c:	0800400f 	.word	0x0800400f
 8003e60:	0800400f 	.word	0x0800400f
 8003e64:	08003f4b 	.word	0x08003f4b
 8003e68:	0800400f 	.word	0x0800400f
 8003e6c:	0800400f 	.word	0x0800400f
 8003e70:	0800400f 	.word	0x0800400f
 8003e74:	08003f8d 	.word	0x08003f8d
 8003e78:	0800400f 	.word	0x0800400f
 8003e7c:	0800400f 	.word	0x0800400f
 8003e80:	0800400f 	.word	0x0800400f
 8003e84:	08003fcd 	.word	0x08003fcd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68b9      	ldr	r1, [r7, #8]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f000 fa2e 	bl	80042f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	699a      	ldr	r2, [r3, #24]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f042 0208 	orr.w	r2, r2, #8
 8003ea2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	699a      	ldr	r2, [r3, #24]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f022 0204 	bic.w	r2, r2, #4
 8003eb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	6999      	ldr	r1, [r3, #24]
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	691a      	ldr	r2, [r3, #16]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	619a      	str	r2, [r3, #24]
      break;
 8003ec6:	e0a5      	b.n	8004014 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68b9      	ldr	r1, [r7, #8]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f000 fa9e 	bl	8004410 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	699a      	ldr	r2, [r3, #24]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ee2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	699a      	ldr	r2, [r3, #24]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ef2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	6999      	ldr	r1, [r3, #24]
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	021a      	lsls	r2, r3, #8
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	430a      	orrs	r2, r1
 8003f06:	619a      	str	r2, [r3, #24]
      break;
 8003f08:	e084      	b.n	8004014 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	68b9      	ldr	r1, [r7, #8]
 8003f10:	4618      	mov	r0, r3
 8003f12:	f000 fb07 	bl	8004524 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	69da      	ldr	r2, [r3, #28]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f042 0208 	orr.w	r2, r2, #8
 8003f24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	69da      	ldr	r2, [r3, #28]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f022 0204 	bic.w	r2, r2, #4
 8003f34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	69d9      	ldr	r1, [r3, #28]
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	691a      	ldr	r2, [r3, #16]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	430a      	orrs	r2, r1
 8003f46:	61da      	str	r2, [r3, #28]
      break;
 8003f48:	e064      	b.n	8004014 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68b9      	ldr	r1, [r7, #8]
 8003f50:	4618      	mov	r0, r3
 8003f52:	f000 fb6f 	bl	8004634 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	69da      	ldr	r2, [r3, #28]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	69da      	ldr	r2, [r3, #28]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	69d9      	ldr	r1, [r3, #28]
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	021a      	lsls	r2, r3, #8
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	430a      	orrs	r2, r1
 8003f88:	61da      	str	r2, [r3, #28]
      break;
 8003f8a:	e043      	b.n	8004014 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68b9      	ldr	r1, [r7, #8]
 8003f92:	4618      	mov	r0, r3
 8003f94:	f000 fbb8 	bl	8004708 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f042 0208 	orr.w	r2, r2, #8
 8003fa6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f022 0204 	bic.w	r2, r2, #4
 8003fb6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	691a      	ldr	r2, [r3, #16]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003fca:	e023      	b.n	8004014 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68b9      	ldr	r1, [r7, #8]
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f000 fbfc 	bl	80047d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fe6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ff6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	021a      	lsls	r2, r3, #8
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	430a      	orrs	r2, r1
 800400a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800400c:	e002      	b.n	8004014 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	75fb      	strb	r3, [r7, #23]
      break;
 8004012:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800401c:	7dfb      	ldrb	r3, [r7, #23]
}
 800401e:	4618      	mov	r0, r3
 8004020:	3718      	adds	r7, #24
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop

08004028 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004032:	2300      	movs	r3, #0
 8004034:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800403c:	2b01      	cmp	r3, #1
 800403e:	d101      	bne.n	8004044 <HAL_TIM_ConfigClockSource+0x1c>
 8004040:	2302      	movs	r3, #2
 8004042:	e0b6      	b.n	80041b2 <HAL_TIM_ConfigClockSource+0x18a>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2202      	movs	r2, #2
 8004050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004062:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004066:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800406e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68ba      	ldr	r2, [r7, #8]
 8004076:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004080:	d03e      	beq.n	8004100 <HAL_TIM_ConfigClockSource+0xd8>
 8004082:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004086:	f200 8087 	bhi.w	8004198 <HAL_TIM_ConfigClockSource+0x170>
 800408a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800408e:	f000 8086 	beq.w	800419e <HAL_TIM_ConfigClockSource+0x176>
 8004092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004096:	d87f      	bhi.n	8004198 <HAL_TIM_ConfigClockSource+0x170>
 8004098:	2b70      	cmp	r3, #112	; 0x70
 800409a:	d01a      	beq.n	80040d2 <HAL_TIM_ConfigClockSource+0xaa>
 800409c:	2b70      	cmp	r3, #112	; 0x70
 800409e:	d87b      	bhi.n	8004198 <HAL_TIM_ConfigClockSource+0x170>
 80040a0:	2b60      	cmp	r3, #96	; 0x60
 80040a2:	d050      	beq.n	8004146 <HAL_TIM_ConfigClockSource+0x11e>
 80040a4:	2b60      	cmp	r3, #96	; 0x60
 80040a6:	d877      	bhi.n	8004198 <HAL_TIM_ConfigClockSource+0x170>
 80040a8:	2b50      	cmp	r3, #80	; 0x50
 80040aa:	d03c      	beq.n	8004126 <HAL_TIM_ConfigClockSource+0xfe>
 80040ac:	2b50      	cmp	r3, #80	; 0x50
 80040ae:	d873      	bhi.n	8004198 <HAL_TIM_ConfigClockSource+0x170>
 80040b0:	2b40      	cmp	r3, #64	; 0x40
 80040b2:	d058      	beq.n	8004166 <HAL_TIM_ConfigClockSource+0x13e>
 80040b4:	2b40      	cmp	r3, #64	; 0x40
 80040b6:	d86f      	bhi.n	8004198 <HAL_TIM_ConfigClockSource+0x170>
 80040b8:	2b30      	cmp	r3, #48	; 0x30
 80040ba:	d064      	beq.n	8004186 <HAL_TIM_ConfigClockSource+0x15e>
 80040bc:	2b30      	cmp	r3, #48	; 0x30
 80040be:	d86b      	bhi.n	8004198 <HAL_TIM_ConfigClockSource+0x170>
 80040c0:	2b20      	cmp	r3, #32
 80040c2:	d060      	beq.n	8004186 <HAL_TIM_ConfigClockSource+0x15e>
 80040c4:	2b20      	cmp	r3, #32
 80040c6:	d867      	bhi.n	8004198 <HAL_TIM_ConfigClockSource+0x170>
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d05c      	beq.n	8004186 <HAL_TIM_ConfigClockSource+0x15e>
 80040cc:	2b10      	cmp	r3, #16
 80040ce:	d05a      	beq.n	8004186 <HAL_TIM_ConfigClockSource+0x15e>
 80040d0:	e062      	b.n	8004198 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6818      	ldr	r0, [r3, #0]
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	6899      	ldr	r1, [r3, #8]
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	685a      	ldr	r2, [r3, #4]
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	f000 fc55 	bl	8004990 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80040f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68ba      	ldr	r2, [r7, #8]
 80040fc:	609a      	str	r2, [r3, #8]
      break;
 80040fe:	e04f      	b.n	80041a0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6818      	ldr	r0, [r3, #0]
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	6899      	ldr	r1, [r3, #8]
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	685a      	ldr	r2, [r3, #4]
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	f000 fc3e 	bl	8004990 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	689a      	ldr	r2, [r3, #8]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004122:	609a      	str	r2, [r3, #8]
      break;
 8004124:	e03c      	b.n	80041a0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6818      	ldr	r0, [r3, #0]
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	6859      	ldr	r1, [r3, #4]
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	461a      	mov	r2, r3
 8004134:	f000 fbb2 	bl	800489c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2150      	movs	r1, #80	; 0x50
 800413e:	4618      	mov	r0, r3
 8004140:	f000 fc0b 	bl	800495a <TIM_ITRx_SetConfig>
      break;
 8004144:	e02c      	b.n	80041a0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6818      	ldr	r0, [r3, #0]
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	6859      	ldr	r1, [r3, #4]
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	461a      	mov	r2, r3
 8004154:	f000 fbd1 	bl	80048fa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2160      	movs	r1, #96	; 0x60
 800415e:	4618      	mov	r0, r3
 8004160:	f000 fbfb 	bl	800495a <TIM_ITRx_SetConfig>
      break;
 8004164:	e01c      	b.n	80041a0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6818      	ldr	r0, [r3, #0]
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	6859      	ldr	r1, [r3, #4]
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	461a      	mov	r2, r3
 8004174:	f000 fb92 	bl	800489c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2140      	movs	r1, #64	; 0x40
 800417e:	4618      	mov	r0, r3
 8004180:	f000 fbeb 	bl	800495a <TIM_ITRx_SetConfig>
      break;
 8004184:	e00c      	b.n	80041a0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4619      	mov	r1, r3
 8004190:	4610      	mov	r0, r2
 8004192:	f000 fbe2 	bl	800495a <TIM_ITRx_SetConfig>
      break;
 8004196:	e003      	b.n	80041a0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	73fb      	strb	r3, [r7, #15]
      break;
 800419c:	e000      	b.n	80041a0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800419e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3710      	adds	r7, #16
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
	...

080041bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a40      	ldr	r2, [pc, #256]	; (80042d0 <TIM_Base_SetConfig+0x114>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d013      	beq.n	80041fc <TIM_Base_SetConfig+0x40>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041da:	d00f      	beq.n	80041fc <TIM_Base_SetConfig+0x40>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a3d      	ldr	r2, [pc, #244]	; (80042d4 <TIM_Base_SetConfig+0x118>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d00b      	beq.n	80041fc <TIM_Base_SetConfig+0x40>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a3c      	ldr	r2, [pc, #240]	; (80042d8 <TIM_Base_SetConfig+0x11c>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d007      	beq.n	80041fc <TIM_Base_SetConfig+0x40>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a3b      	ldr	r2, [pc, #236]	; (80042dc <TIM_Base_SetConfig+0x120>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d003      	beq.n	80041fc <TIM_Base_SetConfig+0x40>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a3a      	ldr	r2, [pc, #232]	; (80042e0 <TIM_Base_SetConfig+0x124>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d108      	bne.n	800420e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004202:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	68fa      	ldr	r2, [r7, #12]
 800420a:	4313      	orrs	r3, r2
 800420c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a2f      	ldr	r2, [pc, #188]	; (80042d0 <TIM_Base_SetConfig+0x114>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d01f      	beq.n	8004256 <TIM_Base_SetConfig+0x9a>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800421c:	d01b      	beq.n	8004256 <TIM_Base_SetConfig+0x9a>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a2c      	ldr	r2, [pc, #176]	; (80042d4 <TIM_Base_SetConfig+0x118>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d017      	beq.n	8004256 <TIM_Base_SetConfig+0x9a>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a2b      	ldr	r2, [pc, #172]	; (80042d8 <TIM_Base_SetConfig+0x11c>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d013      	beq.n	8004256 <TIM_Base_SetConfig+0x9a>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a2a      	ldr	r2, [pc, #168]	; (80042dc <TIM_Base_SetConfig+0x120>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d00f      	beq.n	8004256 <TIM_Base_SetConfig+0x9a>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a29      	ldr	r2, [pc, #164]	; (80042e0 <TIM_Base_SetConfig+0x124>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d00b      	beq.n	8004256 <TIM_Base_SetConfig+0x9a>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a28      	ldr	r2, [pc, #160]	; (80042e4 <TIM_Base_SetConfig+0x128>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d007      	beq.n	8004256 <TIM_Base_SetConfig+0x9a>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a27      	ldr	r2, [pc, #156]	; (80042e8 <TIM_Base_SetConfig+0x12c>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d003      	beq.n	8004256 <TIM_Base_SetConfig+0x9a>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a26      	ldr	r2, [pc, #152]	; (80042ec <TIM_Base_SetConfig+0x130>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d108      	bne.n	8004268 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800425c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	4313      	orrs	r3, r2
 8004266:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	4313      	orrs	r3, r2
 8004274:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	689a      	ldr	r2, [r3, #8]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a10      	ldr	r2, [pc, #64]	; (80042d0 <TIM_Base_SetConfig+0x114>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d00f      	beq.n	80042b4 <TIM_Base_SetConfig+0xf8>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a12      	ldr	r2, [pc, #72]	; (80042e0 <TIM_Base_SetConfig+0x124>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d00b      	beq.n	80042b4 <TIM_Base_SetConfig+0xf8>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a11      	ldr	r2, [pc, #68]	; (80042e4 <TIM_Base_SetConfig+0x128>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d007      	beq.n	80042b4 <TIM_Base_SetConfig+0xf8>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a10      	ldr	r2, [pc, #64]	; (80042e8 <TIM_Base_SetConfig+0x12c>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d003      	beq.n	80042b4 <TIM_Base_SetConfig+0xf8>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a0f      	ldr	r2, [pc, #60]	; (80042ec <TIM_Base_SetConfig+0x130>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d103      	bne.n	80042bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	691a      	ldr	r2, [r3, #16]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	615a      	str	r2, [r3, #20]
}
 80042c2:	bf00      	nop
 80042c4:	3714      	adds	r7, #20
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	40012c00 	.word	0x40012c00
 80042d4:	40000400 	.word	0x40000400
 80042d8:	40000800 	.word	0x40000800
 80042dc:	40000c00 	.word	0x40000c00
 80042e0:	40013400 	.word	0x40013400
 80042e4:	40014000 	.word	0x40014000
 80042e8:	40014400 	.word	0x40014400
 80042ec:	40014800 	.word	0x40014800

080042f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b087      	sub	sp, #28
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a1b      	ldr	r3, [r3, #32]
 80042fe:	f023 0201 	bic.w	r2, r3, #1
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800431e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004322:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f023 0303 	bic.w	r3, r3, #3
 800432a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	4313      	orrs	r3, r2
 8004334:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	f023 0302 	bic.w	r3, r3, #2
 800433c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	4313      	orrs	r3, r2
 8004346:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a2c      	ldr	r2, [pc, #176]	; (80043fc <TIM_OC1_SetConfig+0x10c>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d00f      	beq.n	8004370 <TIM_OC1_SetConfig+0x80>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a2b      	ldr	r2, [pc, #172]	; (8004400 <TIM_OC1_SetConfig+0x110>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d00b      	beq.n	8004370 <TIM_OC1_SetConfig+0x80>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a2a      	ldr	r2, [pc, #168]	; (8004404 <TIM_OC1_SetConfig+0x114>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d007      	beq.n	8004370 <TIM_OC1_SetConfig+0x80>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a29      	ldr	r2, [pc, #164]	; (8004408 <TIM_OC1_SetConfig+0x118>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d003      	beq.n	8004370 <TIM_OC1_SetConfig+0x80>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a28      	ldr	r2, [pc, #160]	; (800440c <TIM_OC1_SetConfig+0x11c>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d10c      	bne.n	800438a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	f023 0308 	bic.w	r3, r3, #8
 8004376:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	697a      	ldr	r2, [r7, #20]
 800437e:	4313      	orrs	r3, r2
 8004380:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	f023 0304 	bic.w	r3, r3, #4
 8004388:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a1b      	ldr	r2, [pc, #108]	; (80043fc <TIM_OC1_SetConfig+0x10c>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d00f      	beq.n	80043b2 <TIM_OC1_SetConfig+0xc2>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a1a      	ldr	r2, [pc, #104]	; (8004400 <TIM_OC1_SetConfig+0x110>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d00b      	beq.n	80043b2 <TIM_OC1_SetConfig+0xc2>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a19      	ldr	r2, [pc, #100]	; (8004404 <TIM_OC1_SetConfig+0x114>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d007      	beq.n	80043b2 <TIM_OC1_SetConfig+0xc2>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a18      	ldr	r2, [pc, #96]	; (8004408 <TIM_OC1_SetConfig+0x118>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d003      	beq.n	80043b2 <TIM_OC1_SetConfig+0xc2>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a17      	ldr	r2, [pc, #92]	; (800440c <TIM_OC1_SetConfig+0x11c>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d111      	bne.n	80043d6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80043c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	693a      	ldr	r2, [r7, #16]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	685a      	ldr	r2, [r3, #4]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	697a      	ldr	r2, [r7, #20]
 80043ee:	621a      	str	r2, [r3, #32]
}
 80043f0:	bf00      	nop
 80043f2:	371c      	adds	r7, #28
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr
 80043fc:	40012c00 	.word	0x40012c00
 8004400:	40013400 	.word	0x40013400
 8004404:	40014000 	.word	0x40014000
 8004408:	40014400 	.word	0x40014400
 800440c:	40014800 	.word	0x40014800

08004410 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004410:	b480      	push	{r7}
 8004412:	b087      	sub	sp, #28
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a1b      	ldr	r3, [r3, #32]
 800441e:	f023 0210 	bic.w	r2, r3, #16
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800443e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004442:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800444a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	021b      	lsls	r3, r3, #8
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	4313      	orrs	r3, r2
 8004456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	f023 0320 	bic.w	r3, r3, #32
 800445e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	011b      	lsls	r3, r3, #4
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	4313      	orrs	r3, r2
 800446a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a28      	ldr	r2, [pc, #160]	; (8004510 <TIM_OC2_SetConfig+0x100>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d003      	beq.n	800447c <TIM_OC2_SetConfig+0x6c>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a27      	ldr	r2, [pc, #156]	; (8004514 <TIM_OC2_SetConfig+0x104>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d10d      	bne.n	8004498 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004482:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	011b      	lsls	r3, r3, #4
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	4313      	orrs	r3, r2
 800448e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004496:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4a1d      	ldr	r2, [pc, #116]	; (8004510 <TIM_OC2_SetConfig+0x100>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d00f      	beq.n	80044c0 <TIM_OC2_SetConfig+0xb0>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a1c      	ldr	r2, [pc, #112]	; (8004514 <TIM_OC2_SetConfig+0x104>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d00b      	beq.n	80044c0 <TIM_OC2_SetConfig+0xb0>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4a1b      	ldr	r2, [pc, #108]	; (8004518 <TIM_OC2_SetConfig+0x108>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d007      	beq.n	80044c0 <TIM_OC2_SetConfig+0xb0>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a1a      	ldr	r2, [pc, #104]	; (800451c <TIM_OC2_SetConfig+0x10c>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d003      	beq.n	80044c0 <TIM_OC2_SetConfig+0xb0>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a19      	ldr	r2, [pc, #100]	; (8004520 <TIM_OC2_SetConfig+0x110>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d113      	bne.n	80044e8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	695b      	ldr	r3, [r3, #20]
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	693a      	ldr	r2, [r7, #16]
 80044d8:	4313      	orrs	r3, r2
 80044da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	693a      	ldr	r2, [r7, #16]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	685a      	ldr	r2, [r3, #4]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	697a      	ldr	r2, [r7, #20]
 8004500:	621a      	str	r2, [r3, #32]
}
 8004502:	bf00      	nop
 8004504:	371c      	adds	r7, #28
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	40012c00 	.word	0x40012c00
 8004514:	40013400 	.word	0x40013400
 8004518:	40014000 	.word	0x40014000
 800451c:	40014400 	.word	0x40014400
 8004520:	40014800 	.word	0x40014800

08004524 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004524:	b480      	push	{r7}
 8004526:	b087      	sub	sp, #28
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a1b      	ldr	r3, [r3, #32]
 8004532:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	69db      	ldr	r3, [r3, #28]
 800454a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004556:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f023 0303 	bic.w	r3, r3, #3
 800455e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	4313      	orrs	r3, r2
 8004568:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004570:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	021b      	lsls	r3, r3, #8
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	4313      	orrs	r3, r2
 800457c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a27      	ldr	r2, [pc, #156]	; (8004620 <TIM_OC3_SetConfig+0xfc>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d003      	beq.n	800458e <TIM_OC3_SetConfig+0x6a>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a26      	ldr	r2, [pc, #152]	; (8004624 <TIM_OC3_SetConfig+0x100>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d10d      	bne.n	80045aa <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004594:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	021b      	lsls	r3, r3, #8
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	4313      	orrs	r3, r2
 80045a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a1c      	ldr	r2, [pc, #112]	; (8004620 <TIM_OC3_SetConfig+0xfc>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d00f      	beq.n	80045d2 <TIM_OC3_SetConfig+0xae>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a1b      	ldr	r2, [pc, #108]	; (8004624 <TIM_OC3_SetConfig+0x100>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d00b      	beq.n	80045d2 <TIM_OC3_SetConfig+0xae>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a1a      	ldr	r2, [pc, #104]	; (8004628 <TIM_OC3_SetConfig+0x104>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d007      	beq.n	80045d2 <TIM_OC3_SetConfig+0xae>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a19      	ldr	r2, [pc, #100]	; (800462c <TIM_OC3_SetConfig+0x108>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d003      	beq.n	80045d2 <TIM_OC3_SetConfig+0xae>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a18      	ldr	r2, [pc, #96]	; (8004630 <TIM_OC3_SetConfig+0x10c>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d113      	bne.n	80045fa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	011b      	lsls	r3, r3, #4
 80045e8:	693a      	ldr	r2, [r7, #16]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	011b      	lsls	r3, r3, #4
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	693a      	ldr	r2, [r7, #16]
 80045fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	685a      	ldr	r2, [r3, #4]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	697a      	ldr	r2, [r7, #20]
 8004612:	621a      	str	r2, [r3, #32]
}
 8004614:	bf00      	nop
 8004616:	371c      	adds	r7, #28
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr
 8004620:	40012c00 	.word	0x40012c00
 8004624:	40013400 	.word	0x40013400
 8004628:	40014000 	.word	0x40014000
 800462c:	40014400 	.word	0x40014400
 8004630:	40014800 	.word	0x40014800

08004634 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004634:	b480      	push	{r7}
 8004636:	b087      	sub	sp, #28
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a1b      	ldr	r3, [r3, #32]
 8004642:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a1b      	ldr	r3, [r3, #32]
 800464e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	69db      	ldr	r3, [r3, #28]
 800465a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004662:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800466e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	021b      	lsls	r3, r3, #8
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	4313      	orrs	r3, r2
 800467a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004682:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	031b      	lsls	r3, r3, #12
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	4313      	orrs	r3, r2
 800468e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a18      	ldr	r2, [pc, #96]	; (80046f4 <TIM_OC4_SetConfig+0xc0>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d00f      	beq.n	80046b8 <TIM_OC4_SetConfig+0x84>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a17      	ldr	r2, [pc, #92]	; (80046f8 <TIM_OC4_SetConfig+0xc4>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d00b      	beq.n	80046b8 <TIM_OC4_SetConfig+0x84>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a16      	ldr	r2, [pc, #88]	; (80046fc <TIM_OC4_SetConfig+0xc8>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d007      	beq.n	80046b8 <TIM_OC4_SetConfig+0x84>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a15      	ldr	r2, [pc, #84]	; (8004700 <TIM_OC4_SetConfig+0xcc>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d003      	beq.n	80046b8 <TIM_OC4_SetConfig+0x84>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a14      	ldr	r2, [pc, #80]	; (8004704 <TIM_OC4_SetConfig+0xd0>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d109      	bne.n	80046cc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	695b      	ldr	r3, [r3, #20]
 80046c4:	019b      	lsls	r3, r3, #6
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	697a      	ldr	r2, [r7, #20]
 80046d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	685a      	ldr	r2, [r3, #4]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	621a      	str	r2, [r3, #32]
}
 80046e6:	bf00      	nop
 80046e8:	371c      	adds	r7, #28
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	40012c00 	.word	0x40012c00
 80046f8:	40013400 	.word	0x40013400
 80046fc:	40014000 	.word	0x40014000
 8004700:	40014400 	.word	0x40014400
 8004704:	40014800 	.word	0x40014800

08004708 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004708:	b480      	push	{r7}
 800470a:	b087      	sub	sp, #28
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a1b      	ldr	r3, [r3, #32]
 8004722:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800472e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800473a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68fa      	ldr	r2, [r7, #12]
 8004742:	4313      	orrs	r3, r2
 8004744:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800474c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	041b      	lsls	r3, r3, #16
 8004754:	693a      	ldr	r2, [r7, #16]
 8004756:	4313      	orrs	r3, r2
 8004758:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a17      	ldr	r2, [pc, #92]	; (80047bc <TIM_OC5_SetConfig+0xb4>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d00f      	beq.n	8004782 <TIM_OC5_SetConfig+0x7a>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a16      	ldr	r2, [pc, #88]	; (80047c0 <TIM_OC5_SetConfig+0xb8>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d00b      	beq.n	8004782 <TIM_OC5_SetConfig+0x7a>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a15      	ldr	r2, [pc, #84]	; (80047c4 <TIM_OC5_SetConfig+0xbc>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d007      	beq.n	8004782 <TIM_OC5_SetConfig+0x7a>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a14      	ldr	r2, [pc, #80]	; (80047c8 <TIM_OC5_SetConfig+0xc0>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d003      	beq.n	8004782 <TIM_OC5_SetConfig+0x7a>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a13      	ldr	r2, [pc, #76]	; (80047cc <TIM_OC5_SetConfig+0xc4>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d109      	bne.n	8004796 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004788:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	021b      	lsls	r3, r3, #8
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	4313      	orrs	r3, r2
 8004794:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	697a      	ldr	r2, [r7, #20]
 800479a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	685a      	ldr	r2, [r3, #4]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	693a      	ldr	r2, [r7, #16]
 80047ae:	621a      	str	r2, [r3, #32]
}
 80047b0:	bf00      	nop
 80047b2:	371c      	adds	r7, #28
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr
 80047bc:	40012c00 	.word	0x40012c00
 80047c0:	40013400 	.word	0x40013400
 80047c4:	40014000 	.word	0x40014000
 80047c8:	40014400 	.word	0x40014400
 80047cc:	40014800 	.word	0x40014800

080047d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b087      	sub	sp, #28
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a1b      	ldr	r3, [r3, #32]
 80047de:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a1b      	ldr	r3, [r3, #32]
 80047ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004802:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	021b      	lsls	r3, r3, #8
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	4313      	orrs	r3, r2
 800480e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004816:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	051b      	lsls	r3, r3, #20
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	4313      	orrs	r3, r2
 8004822:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a18      	ldr	r2, [pc, #96]	; (8004888 <TIM_OC6_SetConfig+0xb8>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d00f      	beq.n	800484c <TIM_OC6_SetConfig+0x7c>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a17      	ldr	r2, [pc, #92]	; (800488c <TIM_OC6_SetConfig+0xbc>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d00b      	beq.n	800484c <TIM_OC6_SetConfig+0x7c>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a16      	ldr	r2, [pc, #88]	; (8004890 <TIM_OC6_SetConfig+0xc0>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d007      	beq.n	800484c <TIM_OC6_SetConfig+0x7c>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a15      	ldr	r2, [pc, #84]	; (8004894 <TIM_OC6_SetConfig+0xc4>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d003      	beq.n	800484c <TIM_OC6_SetConfig+0x7c>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4a14      	ldr	r2, [pc, #80]	; (8004898 <TIM_OC6_SetConfig+0xc8>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d109      	bne.n	8004860 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004852:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	695b      	ldr	r3, [r3, #20]
 8004858:	029b      	lsls	r3, r3, #10
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	4313      	orrs	r3, r2
 800485e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	68fa      	ldr	r2, [r7, #12]
 800486a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	685a      	ldr	r2, [r3, #4]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	693a      	ldr	r2, [r7, #16]
 8004878:	621a      	str	r2, [r3, #32]
}
 800487a:	bf00      	nop
 800487c:	371c      	adds	r7, #28
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	40012c00 	.word	0x40012c00
 800488c:	40013400 	.word	0x40013400
 8004890:	40014000 	.word	0x40014000
 8004894:	40014400 	.word	0x40014400
 8004898:	40014800 	.word	0x40014800

0800489c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800489c:	b480      	push	{r7}
 800489e:	b087      	sub	sp, #28
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6a1b      	ldr	r3, [r3, #32]
 80048ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6a1b      	ldr	r3, [r3, #32]
 80048b2:	f023 0201 	bic.w	r2, r3, #1
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	011b      	lsls	r3, r3, #4
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	f023 030a 	bic.w	r3, r3, #10
 80048d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048da:	697a      	ldr	r2, [r7, #20]
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	4313      	orrs	r3, r2
 80048e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	693a      	ldr	r2, [r7, #16]
 80048e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	697a      	ldr	r2, [r7, #20]
 80048ec:	621a      	str	r2, [r3, #32]
}
 80048ee:	bf00      	nop
 80048f0:	371c      	adds	r7, #28
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr

080048fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048fa:	b480      	push	{r7}
 80048fc:	b087      	sub	sp, #28
 80048fe:	af00      	add	r7, sp, #0
 8004900:	60f8      	str	r0, [r7, #12]
 8004902:	60b9      	str	r1, [r7, #8]
 8004904:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	f023 0210 	bic.w	r2, r3, #16
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	699b      	ldr	r3, [r3, #24]
 8004916:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6a1b      	ldr	r3, [r3, #32]
 800491c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004924:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	031b      	lsls	r3, r3, #12
 800492a:	697a      	ldr	r2, [r7, #20]
 800492c:	4313      	orrs	r3, r2
 800492e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004936:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	011b      	lsls	r3, r3, #4
 800493c:	693a      	ldr	r2, [r7, #16]
 800493e:	4313      	orrs	r3, r2
 8004940:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	697a      	ldr	r2, [r7, #20]
 8004946:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	693a      	ldr	r2, [r7, #16]
 800494c:	621a      	str	r2, [r3, #32]
}
 800494e:	bf00      	nop
 8004950:	371c      	adds	r7, #28
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr

0800495a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800495a:	b480      	push	{r7}
 800495c:	b085      	sub	sp, #20
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
 8004962:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004970:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004972:	683a      	ldr	r2, [r7, #0]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	4313      	orrs	r3, r2
 8004978:	f043 0307 	orr.w	r3, r3, #7
 800497c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	609a      	str	r2, [r3, #8]
}
 8004984:	bf00      	nop
 8004986:	3714      	adds	r7, #20
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004990:	b480      	push	{r7}
 8004992:	b087      	sub	sp, #28
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	607a      	str	r2, [r7, #4]
 800499c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	021a      	lsls	r2, r3, #8
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	431a      	orrs	r2, r3
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	697a      	ldr	r2, [r7, #20]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	697a      	ldr	r2, [r7, #20]
 80049c2:	609a      	str	r2, [r3, #8]
}
 80049c4:	bf00      	nop
 80049c6:	371c      	adds	r7, #28
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b087      	sub	sp, #28
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	f003 031f 	and.w	r3, r3, #31
 80049e2:	2201      	movs	r2, #1
 80049e4:	fa02 f303 	lsl.w	r3, r2, r3
 80049e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6a1a      	ldr	r2, [r3, #32]
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	43db      	mvns	r3, r3
 80049f2:	401a      	ands	r2, r3
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6a1a      	ldr	r2, [r3, #32]
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	f003 031f 	and.w	r3, r3, #31
 8004a02:	6879      	ldr	r1, [r7, #4]
 8004a04:	fa01 f303 	lsl.w	r3, r1, r3
 8004a08:	431a      	orrs	r2, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	621a      	str	r2, [r3, #32]
}
 8004a0e:	bf00      	nop
 8004a10:	371c      	adds	r7, #28
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
	...

08004a1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d101      	bne.n	8004a34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a30:	2302      	movs	r3, #2
 8004a32:	e068      	b.n	8004b06 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2202      	movs	r2, #2
 8004a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a2e      	ldr	r2, [pc, #184]	; (8004b14 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d004      	beq.n	8004a68 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a2d      	ldr	r2, [pc, #180]	; (8004b18 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d108      	bne.n	8004a7a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004a6e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a80:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a1e      	ldr	r2, [pc, #120]	; (8004b14 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d01d      	beq.n	8004ada <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aa6:	d018      	beq.n	8004ada <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a1b      	ldr	r2, [pc, #108]	; (8004b1c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d013      	beq.n	8004ada <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a1a      	ldr	r2, [pc, #104]	; (8004b20 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d00e      	beq.n	8004ada <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a18      	ldr	r2, [pc, #96]	; (8004b24 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d009      	beq.n	8004ada <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a13      	ldr	r2, [pc, #76]	; (8004b18 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d004      	beq.n	8004ada <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a14      	ldr	r2, [pc, #80]	; (8004b28 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d10c      	bne.n	8004af4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ae0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	68ba      	ldr	r2, [r7, #8]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68ba      	ldr	r2, [r7, #8]
 8004af2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3714      	adds	r7, #20
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	40012c00 	.word	0x40012c00
 8004b18:	40013400 	.word	0x40013400
 8004b1c:	40000400 	.word	0x40000400
 8004b20:	40000800 	.word	0x40000800
 8004b24:	40000c00 	.word	0x40000c00
 8004b28:	40014000 	.word	0x40014000

08004b2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d101      	bne.n	8004b3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e040      	b.n	8004bc0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d106      	bne.n	8004b54 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f7fc f80c 	bl	8000b6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2224      	movs	r2, #36	; 0x24
 8004b58:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f022 0201 	bic.w	r2, r2, #1
 8004b68:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 f992 	bl	8004e94 <UART_SetConfig>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d101      	bne.n	8004b7a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e022      	b.n	8004bc0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d002      	beq.n	8004b88 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 fc10 	bl	80053a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	685a      	ldr	r2, [r3, #4]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	689a      	ldr	r2, [r3, #8]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ba6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f042 0201 	orr.w	r2, r2, #1
 8004bb6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f000 fc97 	bl	80054ec <UART_CheckIdleState>
 8004bbe:	4603      	mov	r3, r0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3708      	adds	r7, #8
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b08a      	sub	sp, #40	; 0x28
 8004bcc:	af02      	add	r7, sp, #8
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	603b      	str	r3, [r7, #0]
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bdc:	2b20      	cmp	r3, #32
 8004bde:	f040 8082 	bne.w	8004ce6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d002      	beq.n	8004bee <HAL_UART_Transmit+0x26>
 8004be8:	88fb      	ldrh	r3, [r7, #6]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d101      	bne.n	8004bf2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e07a      	b.n	8004ce8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d101      	bne.n	8004c00 <HAL_UART_Transmit+0x38>
 8004bfc:	2302      	movs	r3, #2
 8004bfe:	e073      	b.n	8004ce8 <HAL_UART_Transmit+0x120>
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2221      	movs	r2, #33	; 0x21
 8004c14:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c16:	f7fc f98f 	bl	8000f38 <HAL_GetTick>
 8004c1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	88fa      	ldrh	r2, [r7, #6]
 8004c20:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	88fa      	ldrh	r2, [r7, #6]
 8004c28:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c34:	d108      	bne.n	8004c48 <HAL_UART_Transmit+0x80>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d104      	bne.n	8004c48 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	61bb      	str	r3, [r7, #24]
 8004c46:	e003      	b.n	8004c50 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004c58:	e02d      	b.n	8004cb6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	9300      	str	r3, [sp, #0]
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	2200      	movs	r2, #0
 8004c62:	2180      	movs	r1, #128	; 0x80
 8004c64:	68f8      	ldr	r0, [r7, #12]
 8004c66:	f000 fc8a 	bl	800557e <UART_WaitOnFlagUntilTimeout>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d001      	beq.n	8004c74 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004c70:	2303      	movs	r3, #3
 8004c72:	e039      	b.n	8004ce8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d10b      	bne.n	8004c92 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	881a      	ldrh	r2, [r3, #0]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c86:	b292      	uxth	r2, r2
 8004c88:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	3302      	adds	r3, #2
 8004c8e:	61bb      	str	r3, [r7, #24]
 8004c90:	e008      	b.n	8004ca4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	781a      	ldrb	r2, [r3, #0]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	b292      	uxth	r2, r2
 8004c9c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	3b01      	subs	r3, #1
 8004cae:	b29a      	uxth	r2, r3
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1cb      	bne.n	8004c5a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	9300      	str	r3, [sp, #0]
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	2140      	movs	r1, #64	; 0x40
 8004ccc:	68f8      	ldr	r0, [r7, #12]
 8004cce:	f000 fc56 	bl	800557e <UART_WaitOnFlagUntilTimeout>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d001      	beq.n	8004cdc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e005      	b.n	8004ce8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2220      	movs	r2, #32
 8004ce0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	e000      	b.n	8004ce8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004ce6:	2302      	movs	r3, #2
  }
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3720      	adds	r7, #32
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b08a      	sub	sp, #40	; 0x28
 8004cf4:	af02      	add	r7, sp, #8
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	603b      	str	r3, [r7, #0]
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d04:	2b20      	cmp	r3, #32
 8004d06:	f040 80bf 	bne.w	8004e88 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d002      	beq.n	8004d16 <HAL_UART_Receive+0x26>
 8004d10:	88fb      	ldrh	r3, [r7, #6]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d101      	bne.n	8004d1a <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e0b7      	b.n	8004e8a <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d101      	bne.n	8004d28 <HAL_UART_Receive+0x38>
 8004d24:	2302      	movs	r3, #2
 8004d26:	e0b0      	b.n	8004e8a <HAL_UART_Receive+0x19a>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2222      	movs	r2, #34	; 0x22
 8004d3c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d44:	f7fc f8f8 	bl	8000f38 <HAL_GetTick>
 8004d48:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	88fa      	ldrh	r2, [r7, #6]
 8004d4e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	88fa      	ldrh	r2, [r7, #6]
 8004d56:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d62:	d10e      	bne.n	8004d82 <HAL_UART_Receive+0x92>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	691b      	ldr	r3, [r3, #16]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d105      	bne.n	8004d78 <HAL_UART_Receive+0x88>
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004d72:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d76:	e02d      	b.n	8004dd4 <HAL_UART_Receive+0xe4>
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	22ff      	movs	r2, #255	; 0xff
 8004d7c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d80:	e028      	b.n	8004dd4 <HAL_UART_Receive+0xe4>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d10d      	bne.n	8004da6 <HAL_UART_Receive+0xb6>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d104      	bne.n	8004d9c <HAL_UART_Receive+0xac>
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	22ff      	movs	r2, #255	; 0xff
 8004d96:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d9a:	e01b      	b.n	8004dd4 <HAL_UART_Receive+0xe4>
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	227f      	movs	r2, #127	; 0x7f
 8004da0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004da4:	e016      	b.n	8004dd4 <HAL_UART_Receive+0xe4>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004dae:	d10d      	bne.n	8004dcc <HAL_UART_Receive+0xdc>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d104      	bne.n	8004dc2 <HAL_UART_Receive+0xd2>
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	227f      	movs	r2, #127	; 0x7f
 8004dbc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004dc0:	e008      	b.n	8004dd4 <HAL_UART_Receive+0xe4>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	223f      	movs	r2, #63	; 0x3f
 8004dc6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004dca:	e003      	b.n	8004dd4 <HAL_UART_Receive+0xe4>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004dda:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004de4:	d108      	bne.n	8004df8 <HAL_UART_Receive+0x108>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d104      	bne.n	8004df8 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8004dee:	2300      	movs	r3, #0
 8004df0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	61bb      	str	r3, [r7, #24]
 8004df6:	e003      	b.n	8004e00 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004e08:	e033      	b.n	8004e72 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	9300      	str	r3, [sp, #0]
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	2200      	movs	r2, #0
 8004e12:	2120      	movs	r1, #32
 8004e14:	68f8      	ldr	r0, [r7, #12]
 8004e16:	f000 fbb2 	bl	800557e <UART_WaitOnFlagUntilTimeout>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d001      	beq.n	8004e24 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e032      	b.n	8004e8a <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d10c      	bne.n	8004e44 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004e30:	b29a      	uxth	r2, r3
 8004e32:	8a7b      	ldrh	r3, [r7, #18]
 8004e34:	4013      	ands	r3, r2
 8004e36:	b29a      	uxth	r2, r3
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	3302      	adds	r3, #2
 8004e40:	61bb      	str	r3, [r7, #24]
 8004e42:	e00d      	b.n	8004e60 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	b2da      	uxtb	r2, r3
 8004e4e:	8a7b      	ldrh	r3, [r7, #18]
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	4013      	ands	r3, r2
 8004e54:	b2da      	uxtb	r2, r3
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	3b01      	subs	r3, #1
 8004e6a:	b29a      	uxth	r2, r3
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1c5      	bne.n	8004e0a <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2220      	movs	r2, #32
 8004e82:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004e84:	2300      	movs	r3, #0
 8004e86:	e000      	b.n	8004e8a <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8004e88:	2302      	movs	r3, #2
  }
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3720      	adds	r7, #32
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
	...

08004e94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e94:	b5b0      	push	{r4, r5, r7, lr}
 8004e96:	b088      	sub	sp, #32
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	689a      	ldr	r2, [r3, #8]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	691b      	ldr	r3, [r3, #16]
 8004ea8:	431a      	orrs	r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	431a      	orrs	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	69db      	ldr	r3, [r3, #28]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	4bad      	ldr	r3, [pc, #692]	; (8005174 <UART_SetConfig+0x2e0>)
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	6812      	ldr	r2, [r2, #0]
 8004ec6:	69f9      	ldr	r1, [r7, #28]
 8004ec8:	430b      	orrs	r3, r1
 8004eca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	68da      	ldr	r2, [r3, #12]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	430a      	orrs	r2, r1
 8004ee0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	699b      	ldr	r3, [r3, #24]
 8004ee6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4aa2      	ldr	r2, [pc, #648]	; (8005178 <UART_SetConfig+0x2e4>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d004      	beq.n	8004efc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a1b      	ldr	r3, [r3, #32]
 8004ef6:	69fa      	ldr	r2, [r7, #28]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	69fa      	ldr	r2, [r7, #28]
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a99      	ldr	r2, [pc, #612]	; (800517c <UART_SetConfig+0x2e8>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d121      	bne.n	8004f5e <UART_SetConfig+0xca>
 8004f1a:	4b99      	ldr	r3, [pc, #612]	; (8005180 <UART_SetConfig+0x2ec>)
 8004f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f20:	f003 0303 	and.w	r3, r3, #3
 8004f24:	2b03      	cmp	r3, #3
 8004f26:	d817      	bhi.n	8004f58 <UART_SetConfig+0xc4>
 8004f28:	a201      	add	r2, pc, #4	; (adr r2, 8004f30 <UART_SetConfig+0x9c>)
 8004f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f2e:	bf00      	nop
 8004f30:	08004f41 	.word	0x08004f41
 8004f34:	08004f4d 	.word	0x08004f4d
 8004f38:	08004f47 	.word	0x08004f47
 8004f3c:	08004f53 	.word	0x08004f53
 8004f40:	2301      	movs	r3, #1
 8004f42:	76fb      	strb	r3, [r7, #27]
 8004f44:	e0e7      	b.n	8005116 <UART_SetConfig+0x282>
 8004f46:	2302      	movs	r3, #2
 8004f48:	76fb      	strb	r3, [r7, #27]
 8004f4a:	e0e4      	b.n	8005116 <UART_SetConfig+0x282>
 8004f4c:	2304      	movs	r3, #4
 8004f4e:	76fb      	strb	r3, [r7, #27]
 8004f50:	e0e1      	b.n	8005116 <UART_SetConfig+0x282>
 8004f52:	2308      	movs	r3, #8
 8004f54:	76fb      	strb	r3, [r7, #27]
 8004f56:	e0de      	b.n	8005116 <UART_SetConfig+0x282>
 8004f58:	2310      	movs	r3, #16
 8004f5a:	76fb      	strb	r3, [r7, #27]
 8004f5c:	e0db      	b.n	8005116 <UART_SetConfig+0x282>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a88      	ldr	r2, [pc, #544]	; (8005184 <UART_SetConfig+0x2f0>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d132      	bne.n	8004fce <UART_SetConfig+0x13a>
 8004f68:	4b85      	ldr	r3, [pc, #532]	; (8005180 <UART_SetConfig+0x2ec>)
 8004f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f6e:	f003 030c 	and.w	r3, r3, #12
 8004f72:	2b0c      	cmp	r3, #12
 8004f74:	d828      	bhi.n	8004fc8 <UART_SetConfig+0x134>
 8004f76:	a201      	add	r2, pc, #4	; (adr r2, 8004f7c <UART_SetConfig+0xe8>)
 8004f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f7c:	08004fb1 	.word	0x08004fb1
 8004f80:	08004fc9 	.word	0x08004fc9
 8004f84:	08004fc9 	.word	0x08004fc9
 8004f88:	08004fc9 	.word	0x08004fc9
 8004f8c:	08004fbd 	.word	0x08004fbd
 8004f90:	08004fc9 	.word	0x08004fc9
 8004f94:	08004fc9 	.word	0x08004fc9
 8004f98:	08004fc9 	.word	0x08004fc9
 8004f9c:	08004fb7 	.word	0x08004fb7
 8004fa0:	08004fc9 	.word	0x08004fc9
 8004fa4:	08004fc9 	.word	0x08004fc9
 8004fa8:	08004fc9 	.word	0x08004fc9
 8004fac:	08004fc3 	.word	0x08004fc3
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	76fb      	strb	r3, [r7, #27]
 8004fb4:	e0af      	b.n	8005116 <UART_SetConfig+0x282>
 8004fb6:	2302      	movs	r3, #2
 8004fb8:	76fb      	strb	r3, [r7, #27]
 8004fba:	e0ac      	b.n	8005116 <UART_SetConfig+0x282>
 8004fbc:	2304      	movs	r3, #4
 8004fbe:	76fb      	strb	r3, [r7, #27]
 8004fc0:	e0a9      	b.n	8005116 <UART_SetConfig+0x282>
 8004fc2:	2308      	movs	r3, #8
 8004fc4:	76fb      	strb	r3, [r7, #27]
 8004fc6:	e0a6      	b.n	8005116 <UART_SetConfig+0x282>
 8004fc8:	2310      	movs	r3, #16
 8004fca:	76fb      	strb	r3, [r7, #27]
 8004fcc:	e0a3      	b.n	8005116 <UART_SetConfig+0x282>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a6d      	ldr	r2, [pc, #436]	; (8005188 <UART_SetConfig+0x2f4>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d120      	bne.n	800501a <UART_SetConfig+0x186>
 8004fd8:	4b69      	ldr	r3, [pc, #420]	; (8005180 <UART_SetConfig+0x2ec>)
 8004fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fde:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004fe2:	2b30      	cmp	r3, #48	; 0x30
 8004fe4:	d013      	beq.n	800500e <UART_SetConfig+0x17a>
 8004fe6:	2b30      	cmp	r3, #48	; 0x30
 8004fe8:	d814      	bhi.n	8005014 <UART_SetConfig+0x180>
 8004fea:	2b20      	cmp	r3, #32
 8004fec:	d009      	beq.n	8005002 <UART_SetConfig+0x16e>
 8004fee:	2b20      	cmp	r3, #32
 8004ff0:	d810      	bhi.n	8005014 <UART_SetConfig+0x180>
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d002      	beq.n	8004ffc <UART_SetConfig+0x168>
 8004ff6:	2b10      	cmp	r3, #16
 8004ff8:	d006      	beq.n	8005008 <UART_SetConfig+0x174>
 8004ffa:	e00b      	b.n	8005014 <UART_SetConfig+0x180>
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	76fb      	strb	r3, [r7, #27]
 8005000:	e089      	b.n	8005116 <UART_SetConfig+0x282>
 8005002:	2302      	movs	r3, #2
 8005004:	76fb      	strb	r3, [r7, #27]
 8005006:	e086      	b.n	8005116 <UART_SetConfig+0x282>
 8005008:	2304      	movs	r3, #4
 800500a:	76fb      	strb	r3, [r7, #27]
 800500c:	e083      	b.n	8005116 <UART_SetConfig+0x282>
 800500e:	2308      	movs	r3, #8
 8005010:	76fb      	strb	r3, [r7, #27]
 8005012:	e080      	b.n	8005116 <UART_SetConfig+0x282>
 8005014:	2310      	movs	r3, #16
 8005016:	76fb      	strb	r3, [r7, #27]
 8005018:	e07d      	b.n	8005116 <UART_SetConfig+0x282>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a5b      	ldr	r2, [pc, #364]	; (800518c <UART_SetConfig+0x2f8>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d120      	bne.n	8005066 <UART_SetConfig+0x1d2>
 8005024:	4b56      	ldr	r3, [pc, #344]	; (8005180 <UART_SetConfig+0x2ec>)
 8005026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800502a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800502e:	2bc0      	cmp	r3, #192	; 0xc0
 8005030:	d013      	beq.n	800505a <UART_SetConfig+0x1c6>
 8005032:	2bc0      	cmp	r3, #192	; 0xc0
 8005034:	d814      	bhi.n	8005060 <UART_SetConfig+0x1cc>
 8005036:	2b80      	cmp	r3, #128	; 0x80
 8005038:	d009      	beq.n	800504e <UART_SetConfig+0x1ba>
 800503a:	2b80      	cmp	r3, #128	; 0x80
 800503c:	d810      	bhi.n	8005060 <UART_SetConfig+0x1cc>
 800503e:	2b00      	cmp	r3, #0
 8005040:	d002      	beq.n	8005048 <UART_SetConfig+0x1b4>
 8005042:	2b40      	cmp	r3, #64	; 0x40
 8005044:	d006      	beq.n	8005054 <UART_SetConfig+0x1c0>
 8005046:	e00b      	b.n	8005060 <UART_SetConfig+0x1cc>
 8005048:	2300      	movs	r3, #0
 800504a:	76fb      	strb	r3, [r7, #27]
 800504c:	e063      	b.n	8005116 <UART_SetConfig+0x282>
 800504e:	2302      	movs	r3, #2
 8005050:	76fb      	strb	r3, [r7, #27]
 8005052:	e060      	b.n	8005116 <UART_SetConfig+0x282>
 8005054:	2304      	movs	r3, #4
 8005056:	76fb      	strb	r3, [r7, #27]
 8005058:	e05d      	b.n	8005116 <UART_SetConfig+0x282>
 800505a:	2308      	movs	r3, #8
 800505c:	76fb      	strb	r3, [r7, #27]
 800505e:	e05a      	b.n	8005116 <UART_SetConfig+0x282>
 8005060:	2310      	movs	r3, #16
 8005062:	76fb      	strb	r3, [r7, #27]
 8005064:	e057      	b.n	8005116 <UART_SetConfig+0x282>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a49      	ldr	r2, [pc, #292]	; (8005190 <UART_SetConfig+0x2fc>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d125      	bne.n	80050bc <UART_SetConfig+0x228>
 8005070:	4b43      	ldr	r3, [pc, #268]	; (8005180 <UART_SetConfig+0x2ec>)
 8005072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005076:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800507a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800507e:	d017      	beq.n	80050b0 <UART_SetConfig+0x21c>
 8005080:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005084:	d817      	bhi.n	80050b6 <UART_SetConfig+0x222>
 8005086:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800508a:	d00b      	beq.n	80050a4 <UART_SetConfig+0x210>
 800508c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005090:	d811      	bhi.n	80050b6 <UART_SetConfig+0x222>
 8005092:	2b00      	cmp	r3, #0
 8005094:	d003      	beq.n	800509e <UART_SetConfig+0x20a>
 8005096:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800509a:	d006      	beq.n	80050aa <UART_SetConfig+0x216>
 800509c:	e00b      	b.n	80050b6 <UART_SetConfig+0x222>
 800509e:	2300      	movs	r3, #0
 80050a0:	76fb      	strb	r3, [r7, #27]
 80050a2:	e038      	b.n	8005116 <UART_SetConfig+0x282>
 80050a4:	2302      	movs	r3, #2
 80050a6:	76fb      	strb	r3, [r7, #27]
 80050a8:	e035      	b.n	8005116 <UART_SetConfig+0x282>
 80050aa:	2304      	movs	r3, #4
 80050ac:	76fb      	strb	r3, [r7, #27]
 80050ae:	e032      	b.n	8005116 <UART_SetConfig+0x282>
 80050b0:	2308      	movs	r3, #8
 80050b2:	76fb      	strb	r3, [r7, #27]
 80050b4:	e02f      	b.n	8005116 <UART_SetConfig+0x282>
 80050b6:	2310      	movs	r3, #16
 80050b8:	76fb      	strb	r3, [r7, #27]
 80050ba:	e02c      	b.n	8005116 <UART_SetConfig+0x282>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a2d      	ldr	r2, [pc, #180]	; (8005178 <UART_SetConfig+0x2e4>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d125      	bne.n	8005112 <UART_SetConfig+0x27e>
 80050c6:	4b2e      	ldr	r3, [pc, #184]	; (8005180 <UART_SetConfig+0x2ec>)
 80050c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80050d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050d4:	d017      	beq.n	8005106 <UART_SetConfig+0x272>
 80050d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050da:	d817      	bhi.n	800510c <UART_SetConfig+0x278>
 80050dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050e0:	d00b      	beq.n	80050fa <UART_SetConfig+0x266>
 80050e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050e6:	d811      	bhi.n	800510c <UART_SetConfig+0x278>
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d003      	beq.n	80050f4 <UART_SetConfig+0x260>
 80050ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050f0:	d006      	beq.n	8005100 <UART_SetConfig+0x26c>
 80050f2:	e00b      	b.n	800510c <UART_SetConfig+0x278>
 80050f4:	2300      	movs	r3, #0
 80050f6:	76fb      	strb	r3, [r7, #27]
 80050f8:	e00d      	b.n	8005116 <UART_SetConfig+0x282>
 80050fa:	2302      	movs	r3, #2
 80050fc:	76fb      	strb	r3, [r7, #27]
 80050fe:	e00a      	b.n	8005116 <UART_SetConfig+0x282>
 8005100:	2304      	movs	r3, #4
 8005102:	76fb      	strb	r3, [r7, #27]
 8005104:	e007      	b.n	8005116 <UART_SetConfig+0x282>
 8005106:	2308      	movs	r3, #8
 8005108:	76fb      	strb	r3, [r7, #27]
 800510a:	e004      	b.n	8005116 <UART_SetConfig+0x282>
 800510c:	2310      	movs	r3, #16
 800510e:	76fb      	strb	r3, [r7, #27]
 8005110:	e001      	b.n	8005116 <UART_SetConfig+0x282>
 8005112:	2310      	movs	r3, #16
 8005114:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a17      	ldr	r2, [pc, #92]	; (8005178 <UART_SetConfig+0x2e4>)
 800511c:	4293      	cmp	r3, r2
 800511e:	f040 8087 	bne.w	8005230 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005122:	7efb      	ldrb	r3, [r7, #27]
 8005124:	2b08      	cmp	r3, #8
 8005126:	d837      	bhi.n	8005198 <UART_SetConfig+0x304>
 8005128:	a201      	add	r2, pc, #4	; (adr r2, 8005130 <UART_SetConfig+0x29c>)
 800512a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800512e:	bf00      	nop
 8005130:	08005155 	.word	0x08005155
 8005134:	08005199 	.word	0x08005199
 8005138:	0800515d 	.word	0x0800515d
 800513c:	08005199 	.word	0x08005199
 8005140:	08005163 	.word	0x08005163
 8005144:	08005199 	.word	0x08005199
 8005148:	08005199 	.word	0x08005199
 800514c:	08005199 	.word	0x08005199
 8005150:	0800516b 	.word	0x0800516b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005154:	f7fd ff4e 	bl	8002ff4 <HAL_RCC_GetPCLK1Freq>
 8005158:	6178      	str	r0, [r7, #20]
        break;
 800515a:	e022      	b.n	80051a2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800515c:	4b0d      	ldr	r3, [pc, #52]	; (8005194 <UART_SetConfig+0x300>)
 800515e:	617b      	str	r3, [r7, #20]
        break;
 8005160:	e01f      	b.n	80051a2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005162:	f7fd feaf 	bl	8002ec4 <HAL_RCC_GetSysClockFreq>
 8005166:	6178      	str	r0, [r7, #20]
        break;
 8005168:	e01b      	b.n	80051a2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800516a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800516e:	617b      	str	r3, [r7, #20]
        break;
 8005170:	e017      	b.n	80051a2 <UART_SetConfig+0x30e>
 8005172:	bf00      	nop
 8005174:	efff69f3 	.word	0xefff69f3
 8005178:	40008000 	.word	0x40008000
 800517c:	40013800 	.word	0x40013800
 8005180:	40021000 	.word	0x40021000
 8005184:	40004400 	.word	0x40004400
 8005188:	40004800 	.word	0x40004800
 800518c:	40004c00 	.word	0x40004c00
 8005190:	40005000 	.word	0x40005000
 8005194:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005198:	2300      	movs	r3, #0
 800519a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	76bb      	strb	r3, [r7, #26]
        break;
 80051a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	f000 80f1 	beq.w	800538c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685a      	ldr	r2, [r3, #4]
 80051ae:	4613      	mov	r3, r2
 80051b0:	005b      	lsls	r3, r3, #1
 80051b2:	4413      	add	r3, r2
 80051b4:	697a      	ldr	r2, [r7, #20]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d305      	bcc.n	80051c6 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80051c0:	697a      	ldr	r2, [r7, #20]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d902      	bls.n	80051cc <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	76bb      	strb	r3, [r7, #26]
 80051ca:	e0df      	b.n	800538c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f04f 0100 	mov.w	r1, #0
 80051d4:	f04f 0200 	mov.w	r2, #0
 80051d8:	f04f 0300 	mov.w	r3, #0
 80051dc:	020b      	lsls	r3, r1, #8
 80051de:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80051e2:	0202      	lsls	r2, r0, #8
 80051e4:	6879      	ldr	r1, [r7, #4]
 80051e6:	6849      	ldr	r1, [r1, #4]
 80051e8:	0849      	lsrs	r1, r1, #1
 80051ea:	4608      	mov	r0, r1
 80051ec:	f04f 0100 	mov.w	r1, #0
 80051f0:	1814      	adds	r4, r2, r0
 80051f2:	eb43 0501 	adc.w	r5, r3, r1
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	461a      	mov	r2, r3
 80051fc:	f04f 0300 	mov.w	r3, #0
 8005200:	4620      	mov	r0, r4
 8005202:	4629      	mov	r1, r5
 8005204:	f7fa ffe0 	bl	80001c8 <__aeabi_uldivmod>
 8005208:	4602      	mov	r2, r0
 800520a:	460b      	mov	r3, r1
 800520c:	4613      	mov	r3, r2
 800520e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005216:	d308      	bcc.n	800522a <UART_SetConfig+0x396>
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800521e:	d204      	bcs.n	800522a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	693a      	ldr	r2, [r7, #16]
 8005226:	60da      	str	r2, [r3, #12]
 8005228:	e0b0      	b.n	800538c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	76bb      	strb	r3, [r7, #26]
 800522e:	e0ad      	b.n	800538c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	69db      	ldr	r3, [r3, #28]
 8005234:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005238:	d15b      	bne.n	80052f2 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800523a:	7efb      	ldrb	r3, [r7, #27]
 800523c:	2b08      	cmp	r3, #8
 800523e:	d828      	bhi.n	8005292 <UART_SetConfig+0x3fe>
 8005240:	a201      	add	r2, pc, #4	; (adr r2, 8005248 <UART_SetConfig+0x3b4>)
 8005242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005246:	bf00      	nop
 8005248:	0800526d 	.word	0x0800526d
 800524c:	08005275 	.word	0x08005275
 8005250:	0800527d 	.word	0x0800527d
 8005254:	08005293 	.word	0x08005293
 8005258:	08005283 	.word	0x08005283
 800525c:	08005293 	.word	0x08005293
 8005260:	08005293 	.word	0x08005293
 8005264:	08005293 	.word	0x08005293
 8005268:	0800528b 	.word	0x0800528b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800526c:	f7fd fec2 	bl	8002ff4 <HAL_RCC_GetPCLK1Freq>
 8005270:	6178      	str	r0, [r7, #20]
        break;
 8005272:	e013      	b.n	800529c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005274:	f7fd fed4 	bl	8003020 <HAL_RCC_GetPCLK2Freq>
 8005278:	6178      	str	r0, [r7, #20]
        break;
 800527a:	e00f      	b.n	800529c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800527c:	4b49      	ldr	r3, [pc, #292]	; (80053a4 <UART_SetConfig+0x510>)
 800527e:	617b      	str	r3, [r7, #20]
        break;
 8005280:	e00c      	b.n	800529c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005282:	f7fd fe1f 	bl	8002ec4 <HAL_RCC_GetSysClockFreq>
 8005286:	6178      	str	r0, [r7, #20]
        break;
 8005288:	e008      	b.n	800529c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800528a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800528e:	617b      	str	r3, [r7, #20]
        break;
 8005290:	e004      	b.n	800529c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005292:	2300      	movs	r3, #0
 8005294:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	76bb      	strb	r3, [r7, #26]
        break;
 800529a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d074      	beq.n	800538c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	005a      	lsls	r2, r3, #1
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	085b      	lsrs	r3, r3, #1
 80052ac:	441a      	add	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052b6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	2b0f      	cmp	r3, #15
 80052bc:	d916      	bls.n	80052ec <UART_SetConfig+0x458>
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052c4:	d212      	bcs.n	80052ec <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	f023 030f 	bic.w	r3, r3, #15
 80052ce:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	085b      	lsrs	r3, r3, #1
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	f003 0307 	and.w	r3, r3, #7
 80052da:	b29a      	uxth	r2, r3
 80052dc:	89fb      	ldrh	r3, [r7, #14]
 80052de:	4313      	orrs	r3, r2
 80052e0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	89fa      	ldrh	r2, [r7, #14]
 80052e8:	60da      	str	r2, [r3, #12]
 80052ea:	e04f      	b.n	800538c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	76bb      	strb	r3, [r7, #26]
 80052f0:	e04c      	b.n	800538c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80052f2:	7efb      	ldrb	r3, [r7, #27]
 80052f4:	2b08      	cmp	r3, #8
 80052f6:	d828      	bhi.n	800534a <UART_SetConfig+0x4b6>
 80052f8:	a201      	add	r2, pc, #4	; (adr r2, 8005300 <UART_SetConfig+0x46c>)
 80052fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052fe:	bf00      	nop
 8005300:	08005325 	.word	0x08005325
 8005304:	0800532d 	.word	0x0800532d
 8005308:	08005335 	.word	0x08005335
 800530c:	0800534b 	.word	0x0800534b
 8005310:	0800533b 	.word	0x0800533b
 8005314:	0800534b 	.word	0x0800534b
 8005318:	0800534b 	.word	0x0800534b
 800531c:	0800534b 	.word	0x0800534b
 8005320:	08005343 	.word	0x08005343
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005324:	f7fd fe66 	bl	8002ff4 <HAL_RCC_GetPCLK1Freq>
 8005328:	6178      	str	r0, [r7, #20]
        break;
 800532a:	e013      	b.n	8005354 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800532c:	f7fd fe78 	bl	8003020 <HAL_RCC_GetPCLK2Freq>
 8005330:	6178      	str	r0, [r7, #20]
        break;
 8005332:	e00f      	b.n	8005354 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005334:	4b1b      	ldr	r3, [pc, #108]	; (80053a4 <UART_SetConfig+0x510>)
 8005336:	617b      	str	r3, [r7, #20]
        break;
 8005338:	e00c      	b.n	8005354 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800533a:	f7fd fdc3 	bl	8002ec4 <HAL_RCC_GetSysClockFreq>
 800533e:	6178      	str	r0, [r7, #20]
        break;
 8005340:	e008      	b.n	8005354 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005342:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005346:	617b      	str	r3, [r7, #20]
        break;
 8005348:	e004      	b.n	8005354 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800534a:	2300      	movs	r3, #0
 800534c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	76bb      	strb	r3, [r7, #26]
        break;
 8005352:	bf00      	nop
    }

    if (pclk != 0U)
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d018      	beq.n	800538c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	085a      	lsrs	r2, r3, #1
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	441a      	add	r2, r3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	fbb2 f3f3 	udiv	r3, r2, r3
 800536c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	2b0f      	cmp	r3, #15
 8005372:	d909      	bls.n	8005388 <UART_SetConfig+0x4f4>
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800537a:	d205      	bcs.n	8005388 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	b29a      	uxth	r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	60da      	str	r2, [r3, #12]
 8005386:	e001      	b.n	800538c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005398:	7ebb      	ldrb	r3, [r7, #26]
}
 800539a:	4618      	mov	r0, r3
 800539c:	3720      	adds	r7, #32
 800539e:	46bd      	mov	sp, r7
 80053a0:	bdb0      	pop	{r4, r5, r7, pc}
 80053a2:	bf00      	nop
 80053a4:	00f42400 	.word	0x00f42400

080053a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b4:	f003 0301 	and.w	r3, r3, #1
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d00a      	beq.n	80053d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	430a      	orrs	r2, r1
 80053d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d6:	f003 0302 	and.w	r3, r3, #2
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00a      	beq.n	80053f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	430a      	orrs	r2, r1
 80053f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f8:	f003 0304 	and.w	r3, r3, #4
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d00a      	beq.n	8005416 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	430a      	orrs	r2, r1
 8005414:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541a:	f003 0308 	and.w	r3, r3, #8
 800541e:	2b00      	cmp	r3, #0
 8005420:	d00a      	beq.n	8005438 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	430a      	orrs	r2, r1
 8005436:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543c:	f003 0310 	and.w	r3, r3, #16
 8005440:	2b00      	cmp	r3, #0
 8005442:	d00a      	beq.n	800545a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	430a      	orrs	r2, r1
 8005458:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545e:	f003 0320 	and.w	r3, r3, #32
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00a      	beq.n	800547c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	430a      	orrs	r2, r1
 800547a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005484:	2b00      	cmp	r3, #0
 8005486:	d01a      	beq.n	80054be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	430a      	orrs	r2, r1
 800549c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054a6:	d10a      	bne.n	80054be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	430a      	orrs	r2, r1
 80054bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00a      	beq.n	80054e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	430a      	orrs	r2, r1
 80054de:	605a      	str	r2, [r3, #4]
  }
}
 80054e0:	bf00      	nop
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b086      	sub	sp, #24
 80054f0:	af02      	add	r7, sp, #8
 80054f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80054fc:	f7fb fd1c 	bl	8000f38 <HAL_GetTick>
 8005500:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0308 	and.w	r3, r3, #8
 800550c:	2b08      	cmp	r3, #8
 800550e:	d10e      	bne.n	800552e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005510:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005514:	9300      	str	r3, [sp, #0]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2200      	movs	r2, #0
 800551a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 f82d 	bl	800557e <UART_WaitOnFlagUntilTimeout>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d001      	beq.n	800552e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800552a:	2303      	movs	r3, #3
 800552c:	e023      	b.n	8005576 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 0304 	and.w	r3, r3, #4
 8005538:	2b04      	cmp	r3, #4
 800553a:	d10e      	bne.n	800555a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800553c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005540:	9300      	str	r3, [sp, #0]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2200      	movs	r2, #0
 8005546:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 f817 	bl	800557e <UART_WaitOnFlagUntilTimeout>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d001      	beq.n	800555a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e00d      	b.n	8005576 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2220      	movs	r2, #32
 800555e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2220      	movs	r2, #32
 8005564:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3710      	adds	r7, #16
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}

0800557e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800557e:	b580      	push	{r7, lr}
 8005580:	b09c      	sub	sp, #112	; 0x70
 8005582:	af00      	add	r7, sp, #0
 8005584:	60f8      	str	r0, [r7, #12]
 8005586:	60b9      	str	r1, [r7, #8]
 8005588:	603b      	str	r3, [r7, #0]
 800558a:	4613      	mov	r3, r2
 800558c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800558e:	e0a5      	b.n	80056dc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005590:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005596:	f000 80a1 	beq.w	80056dc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800559a:	f7fb fccd 	bl	8000f38 <HAL_GetTick>
 800559e:	4602      	mov	r2, r0
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d302      	bcc.n	80055b0 <UART_WaitOnFlagUntilTimeout+0x32>
 80055aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d13e      	bne.n	800562e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055b8:	e853 3f00 	ldrex	r3, [r3]
 80055bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80055be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80055c4:	667b      	str	r3, [r7, #100]	; 0x64
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	461a      	mov	r2, r3
 80055cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055d0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80055d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80055d6:	e841 2300 	strex	r3, r2, [r1]
 80055da:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80055dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d1e6      	bne.n	80055b0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	3308      	adds	r3, #8
 80055e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055ec:	e853 3f00 	ldrex	r3, [r3]
 80055f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f4:	f023 0301 	bic.w	r3, r3, #1
 80055f8:	663b      	str	r3, [r7, #96]	; 0x60
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	3308      	adds	r3, #8
 8005600:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005602:	64ba      	str	r2, [r7, #72]	; 0x48
 8005604:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005606:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005608:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800560a:	e841 2300 	strex	r3, r2, [r1]
 800560e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005610:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005612:	2b00      	cmp	r3, #0
 8005614:	d1e5      	bne.n	80055e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2220      	movs	r2, #32
 800561a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2220      	movs	r2, #32
 8005620:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e067      	b.n	80056fe <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0304 	and.w	r3, r3, #4
 8005638:	2b00      	cmp	r3, #0
 800563a:	d04f      	beq.n	80056dc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	69db      	ldr	r3, [r3, #28]
 8005642:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005646:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800564a:	d147      	bne.n	80056dc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005654:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800565c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800565e:	e853 3f00 	ldrex	r3, [r3]
 8005662:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005666:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800566a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	461a      	mov	r2, r3
 8005672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005674:	637b      	str	r3, [r7, #52]	; 0x34
 8005676:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005678:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800567a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800567c:	e841 2300 	strex	r3, r2, [r1]
 8005680:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005684:	2b00      	cmp	r3, #0
 8005686:	d1e6      	bne.n	8005656 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	3308      	adds	r3, #8
 800568e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	e853 3f00 	ldrex	r3, [r3]
 8005696:	613b      	str	r3, [r7, #16]
   return(result);
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	f023 0301 	bic.w	r3, r3, #1
 800569e:	66bb      	str	r3, [r7, #104]	; 0x68
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	3308      	adds	r3, #8
 80056a6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80056a8:	623a      	str	r2, [r7, #32]
 80056aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ac:	69f9      	ldr	r1, [r7, #28]
 80056ae:	6a3a      	ldr	r2, [r7, #32]
 80056b0:	e841 2300 	strex	r3, r2, [r1]
 80056b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d1e5      	bne.n	8005688 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2220      	movs	r2, #32
 80056c0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2220      	movs	r2, #32
 80056c6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2220      	movs	r2, #32
 80056cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	e010      	b.n	80056fe <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	69da      	ldr	r2, [r3, #28]
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	4013      	ands	r3, r2
 80056e6:	68ba      	ldr	r2, [r7, #8]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	bf0c      	ite	eq
 80056ec:	2301      	moveq	r3, #1
 80056ee:	2300      	movne	r3, #0
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	461a      	mov	r2, r3
 80056f4:	79fb      	ldrb	r3, [r7, #7]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	f43f af4a 	beq.w	8005590 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3770      	adds	r7, #112	; 0x70
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
	...

08005708 <__libc_init_array>:
 8005708:	b570      	push	{r4, r5, r6, lr}
 800570a:	4d0d      	ldr	r5, [pc, #52]	; (8005740 <__libc_init_array+0x38>)
 800570c:	4c0d      	ldr	r4, [pc, #52]	; (8005744 <__libc_init_array+0x3c>)
 800570e:	1b64      	subs	r4, r4, r5
 8005710:	10a4      	asrs	r4, r4, #2
 8005712:	2600      	movs	r6, #0
 8005714:	42a6      	cmp	r6, r4
 8005716:	d109      	bne.n	800572c <__libc_init_array+0x24>
 8005718:	4d0b      	ldr	r5, [pc, #44]	; (8005748 <__libc_init_array+0x40>)
 800571a:	4c0c      	ldr	r4, [pc, #48]	; (800574c <__libc_init_array+0x44>)
 800571c:	f000 f820 	bl	8005760 <_init>
 8005720:	1b64      	subs	r4, r4, r5
 8005722:	10a4      	asrs	r4, r4, #2
 8005724:	2600      	movs	r6, #0
 8005726:	42a6      	cmp	r6, r4
 8005728:	d105      	bne.n	8005736 <__libc_init_array+0x2e>
 800572a:	bd70      	pop	{r4, r5, r6, pc}
 800572c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005730:	4798      	blx	r3
 8005732:	3601      	adds	r6, #1
 8005734:	e7ee      	b.n	8005714 <__libc_init_array+0xc>
 8005736:	f855 3b04 	ldr.w	r3, [r5], #4
 800573a:	4798      	blx	r3
 800573c:	3601      	adds	r6, #1
 800573e:	e7f2      	b.n	8005726 <__libc_init_array+0x1e>
 8005740:	08005860 	.word	0x08005860
 8005744:	08005860 	.word	0x08005860
 8005748:	08005860 	.word	0x08005860
 800574c:	08005864 	.word	0x08005864

08005750 <memset>:
 8005750:	4402      	add	r2, r0
 8005752:	4603      	mov	r3, r0
 8005754:	4293      	cmp	r3, r2
 8005756:	d100      	bne.n	800575a <memset+0xa>
 8005758:	4770      	bx	lr
 800575a:	f803 1b01 	strb.w	r1, [r3], #1
 800575e:	e7f9      	b.n	8005754 <memset+0x4>

08005760 <_init>:
 8005760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005762:	bf00      	nop
 8005764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005766:	bc08      	pop	{r3}
 8005768:	469e      	mov	lr, r3
 800576a:	4770      	bx	lr

0800576c <_fini>:
 800576c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800576e:	bf00      	nop
 8005770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005772:	bc08      	pop	{r3}
 8005774:	469e      	mov	lr, r3
 8005776:	4770      	bx	lr
