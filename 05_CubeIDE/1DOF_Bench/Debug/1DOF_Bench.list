
1DOF_Bench.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08006a34  08006a34  00016a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b58  08006b58  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006b58  08006b58  00016b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b60  08006b60  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b60  08006b60  00016b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b64  08006b64  00016b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006b68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  20000070  08006bd8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e8  08006bd8  000201e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000197a1  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a61  00000000  00000000  00039841  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001330  00000000  00000000  0003c2a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001228  00000000  00000000  0003d5d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029ce0  00000000  00000000  0003e800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015bb7  00000000  00000000  000684e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00109f2f  00000000  00000000  0007e097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00187fc6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059bc  00000000  00000000  0018801c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006a1c 	.word	0x08006a1c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08006a1c 	.word	0x08006a1c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800056a:	b097      	sub	sp, #92	; 0x5c
 800056c:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f000 fcdf 	bl	8000f30 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000572:	f000 f84d 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000576:	f000 f9bb 	bl	80008f0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800057a:	f000 f989 	bl	8000890 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800057e:	f000 f899 	bl	80006b4 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000582:	f000 f90d 	bl	80007a0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	// Light up green led
	setGreenLed();
 8000586:	f000 fa1e 	bl	80009c6 <setGreenLed>
	// blink green led
	blinkGreenLed(10, 100);
 800058a:	2164      	movs	r1, #100	; 0x64
 800058c:	200a      	movs	r0, #10
 800058e:	f000 fa24 	bl	80009da <blinkGreenLed>
	// Welcome message on UART
	sendWelcomeMsgRS232(&huart2);
 8000592:	481a      	ldr	r0, [pc, #104]	; (80005fc <main+0x94>)
 8000594:	f000 fa3e 	bl	8000a14 <sendWelcomeMsgRS232>
	printf("Hello from main\n\r");
 8000598:	4819      	ldr	r0, [pc, #100]	; (8000600 <main+0x98>)
 800059a:	f005 fae9 	bl	8005b70 <iprintf>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2 );
 800059e:	2104      	movs	r1, #4
 80005a0:	4818      	ldr	r0, [pc, #96]	; (8000604 <main+0x9c>)
 80005a2:	f003 fded 	bl	8004180 <HAL_TIM_PWM_Start>
	TIM3->CCR2 = 1512;
 80005a6:	4b18      	ldr	r3, [pc, #96]	; (8000608 <main+0xa0>)
 80005a8:	f44f 62bd 	mov.w	r2, #1512	; 0x5e8
 80005ac:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(5000);
 80005ae:	f241 3088 	movw	r0, #5000	; 0x1388
 80005b2:	f000 fd39 	bl	8001028 <HAL_Delay>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  //
	  load_pwm(htim3, load_adc(hadc1, 5));
 80005b6:	4c15      	ldr	r4, [pc, #84]	; (800060c <main+0xa4>)
 80005b8:	2305      	movs	r3, #5
 80005ba:	9315      	str	r3, [sp, #84]	; 0x54
 80005bc:	4668      	mov	r0, sp
 80005be:	f104 0310 	add.w	r3, r4, #16
 80005c2:	2254      	movs	r2, #84	; 0x54
 80005c4:	4619      	mov	r1, r3
 80005c6:	f005 fabd 	bl	8005b44 <memcpy>
 80005ca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80005ce:	f000 fc59 	bl	8000e84 <load_adc>
 80005d2:	4603      	mov	r3, r0
 80005d4:	4e0b      	ldr	r6, [pc, #44]	; (8000604 <main+0x9c>)
 80005d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80005d8:	466d      	mov	r5, sp
 80005da:	f106 0410 	add.w	r4, r6, #16
 80005de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005ea:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80005ee:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80005f2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80005f6:	f000 fc61 	bl	8000ebc <load_pwm>
 80005fa:	e7dc      	b.n	80005b6 <main+0x4e>
 80005fc:	20000150 	.word	0x20000150
 8000600:	08006a34 	.word	0x08006a34
 8000604:	20000098 	.word	0x20000098
 8000608:	40000400 	.word	0x40000400
 800060c:	200000e8 	.word	0x200000e8

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b096      	sub	sp, #88	; 0x58
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	2244      	movs	r2, #68	; 0x44
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f005 fa9e 	bl	8005b60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	463b      	mov	r3, r7
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	60da      	str	r2, [r3, #12]
 8000630:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000632:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000636:	f002 f9ed 	bl	8002a14 <HAL_PWREx_ControlVoltageScaling>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000640:	f000 f9bc 	bl	80009bc <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000644:	2302      	movs	r3, #2
 8000646:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000648:	f44f 7380 	mov.w	r3, #256	; 0x100
 800064c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800064e:	2310      	movs	r3, #16
 8000650:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000652:	2302      	movs	r3, #2
 8000654:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000656:	2302      	movs	r3, #2
 8000658:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800065a:	2301      	movs	r3, #1
 800065c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800065e:	230a      	movs	r3, #10
 8000660:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000662:	2307      	movs	r3, #7
 8000664:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000666:	2302      	movs	r3, #2
 8000668:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800066a:	2302      	movs	r3, #2
 800066c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066e:	f107 0314 	add.w	r3, r7, #20
 8000672:	4618      	mov	r0, r3
 8000674:	f002 fa24 	bl	8002ac0 <HAL_RCC_OscConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800067e:	f000 f99d 	bl	80009bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000682:	230f      	movs	r3, #15
 8000684:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000686:	2303      	movs	r3, #3
 8000688:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000696:	463b      	mov	r3, r7
 8000698:	2104      	movs	r1, #4
 800069a:	4618      	mov	r0, r3
 800069c:	f002 fdf6 	bl	800328c <HAL_RCC_ClockConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006a6:	f000 f989 	bl	80009bc <Error_Handler>
  }
}
 80006aa:	bf00      	nop
 80006ac:	3758      	adds	r7, #88	; 0x58
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
	...

080006b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b08a      	sub	sp, #40	; 0x28
 80006b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006ba:	f107 031c 	add.w	r3, r7, #28
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
 80006d2:	611a      	str	r2, [r3, #16]
 80006d4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80006d6:	4b2f      	ldr	r3, [pc, #188]	; (8000794 <MX_ADC1_Init+0xe0>)
 80006d8:	4a2f      	ldr	r2, [pc, #188]	; (8000798 <MX_ADC1_Init+0xe4>)
 80006da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006dc:	4b2d      	ldr	r3, [pc, #180]	; (8000794 <MX_ADC1_Init+0xe0>)
 80006de:	2200      	movs	r2, #0
 80006e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006e2:	4b2c      	ldr	r3, [pc, #176]	; (8000794 <MX_ADC1_Init+0xe0>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006e8:	4b2a      	ldr	r3, [pc, #168]	; (8000794 <MX_ADC1_Init+0xe0>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <MX_ADC1_Init+0xe0>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006f4:	4b27      	ldr	r3, [pc, #156]	; (8000794 <MX_ADC1_Init+0xe0>)
 80006f6:	2204      	movs	r2, #4
 80006f8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <MX_ADC1_Init+0xe0>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000700:	4b24      	ldr	r3, [pc, #144]	; (8000794 <MX_ADC1_Init+0xe0>)
 8000702:	2200      	movs	r2, #0
 8000704:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000706:	4b23      	ldr	r3, [pc, #140]	; (8000794 <MX_ADC1_Init+0xe0>)
 8000708:	2201      	movs	r2, #1
 800070a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800070c:	4b21      	ldr	r3, [pc, #132]	; (8000794 <MX_ADC1_Init+0xe0>)
 800070e:	2200      	movs	r2, #0
 8000710:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000714:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <MX_ADC1_Init+0xe0>)
 8000716:	2200      	movs	r2, #0
 8000718:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800071a:	4b1e      	ldr	r3, [pc, #120]	; (8000794 <MX_ADC1_Init+0xe0>)
 800071c:	2200      	movs	r2, #0
 800071e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000720:	4b1c      	ldr	r3, [pc, #112]	; (8000794 <MX_ADC1_Init+0xe0>)
 8000722:	2200      	movs	r2, #0
 8000724:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000728:	4b1a      	ldr	r3, [pc, #104]	; (8000794 <MX_ADC1_Init+0xe0>)
 800072a:	2200      	movs	r2, #0
 800072c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800072e:	4b19      	ldr	r3, [pc, #100]	; (8000794 <MX_ADC1_Init+0xe0>)
 8000730:	2200      	movs	r2, #0
 8000732:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000736:	4817      	ldr	r0, [pc, #92]	; (8000794 <MX_ADC1_Init+0xe0>)
 8000738:	f000 fe7e 	bl	8001438 <HAL_ADC_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000742:	f000 f93b 	bl	80009bc <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000746:	2300      	movs	r3, #0
 8000748:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800074a:	f107 031c 	add.w	r3, r7, #28
 800074e:	4619      	mov	r1, r3
 8000750:	4810      	ldr	r0, [pc, #64]	; (8000794 <MX_ADC1_Init+0xe0>)
 8000752:	f001 fddf 	bl	8002314 <HAL_ADCEx_MultiModeConfigChannel>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800075c:	f000 f92e 	bl	80009bc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000760:	4b0e      	ldr	r3, [pc, #56]	; (800079c <MX_ADC1_Init+0xe8>)
 8000762:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000764:	2306      	movs	r3, #6
 8000766:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000768:	2300      	movs	r3, #0
 800076a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800076c:	237f      	movs	r3, #127	; 0x7f
 800076e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000770:	2304      	movs	r3, #4
 8000772:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000774:	2300      	movs	r3, #0
 8000776:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000778:	1d3b      	adds	r3, r7, #4
 800077a:	4619      	mov	r1, r3
 800077c:	4805      	ldr	r0, [pc, #20]	; (8000794 <MX_ADC1_Init+0xe0>)
 800077e:	f001 f951 	bl	8001a24 <HAL_ADC_ConfigChannel>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000788:	f000 f918 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800078c:	bf00      	nop
 800078e:	3728      	adds	r7, #40	; 0x28
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	200000e8 	.word	0x200000e8
 8000798:	50040000 	.word	0x50040000
 800079c:	14f00020 	.word	0x14f00020

080007a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08e      	sub	sp, #56	; 0x38
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007b4:	f107 031c 	add.w	r3, r7, #28
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007c0:	463b      	mov	r3, r7
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
 80007cc:	611a      	str	r2, [r3, #16]
 80007ce:	615a      	str	r2, [r3, #20]
 80007d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007d2:	4b2d      	ldr	r3, [pc, #180]	; (8000888 <MX_TIM3_Init+0xe8>)
 80007d4:	4a2d      	ldr	r2, [pc, #180]	; (800088c <MX_TIM3_Init+0xec>)
 80007d6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 38;//38
 80007d8:	4b2b      	ldr	r3, [pc, #172]	; (8000888 <MX_TIM3_Init+0xe8>)
 80007da:	2226      	movs	r2, #38	; 0x26
 80007dc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007de:	4b2a      	ldr	r3, [pc, #168]	; (8000888 <MX_TIM3_Init+0xe8>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4096;
 80007e4:	4b28      	ldr	r3, [pc, #160]	; (8000888 <MX_TIM3_Init+0xe8>)
 80007e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ec:	4b26      	ldr	r3, [pc, #152]	; (8000888 <MX_TIM3_Init+0xe8>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007f2:	4b25      	ldr	r3, [pc, #148]	; (8000888 <MX_TIM3_Init+0xe8>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007f8:	4823      	ldr	r0, [pc, #140]	; (8000888 <MX_TIM3_Init+0xe8>)
 80007fa:	f003 fc09 	bl	8004010 <HAL_TIM_Base_Init>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000804:	f000 f8da 	bl	80009bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000808:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800080c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800080e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000812:	4619      	mov	r1, r3
 8000814:	481c      	ldr	r0, [pc, #112]	; (8000888 <MX_TIM3_Init+0xe8>)
 8000816:	f003 fecd 	bl	80045b4 <HAL_TIM_ConfigClockSource>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000820:	f000 f8cc 	bl	80009bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000824:	4818      	ldr	r0, [pc, #96]	; (8000888 <MX_TIM3_Init+0xe8>)
 8000826:	f003 fc4a 	bl	80040be <HAL_TIM_PWM_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000830:	f000 f8c4 	bl	80009bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000834:	2300      	movs	r3, #0
 8000836:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000838:	2300      	movs	r3, #0
 800083a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800083c:	f107 031c 	add.w	r3, r7, #28
 8000840:	4619      	mov	r1, r3
 8000842:	4811      	ldr	r0, [pc, #68]	; (8000888 <MX_TIM3_Init+0xe8>)
 8000844:	f004 fbb0 	bl	8004fa8 <HAL_TIMEx_MasterConfigSynchronization>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800084e:	f000 f8b5 	bl	80009bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000852:	2360      	movs	r3, #96	; 0x60
 8000854:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800085a:	2300      	movs	r3, #0
 800085c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800085e:	2300      	movs	r3, #0
 8000860:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000862:	463b      	mov	r3, r7
 8000864:	2204      	movs	r2, #4
 8000866:	4619      	mov	r1, r3
 8000868:	4807      	ldr	r0, [pc, #28]	; (8000888 <MX_TIM3_Init+0xe8>)
 800086a:	f003 fd8f 	bl	800438c <HAL_TIM_PWM_ConfigChannel>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000874:	f000 f8a2 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000878:	4803      	ldr	r0, [pc, #12]	; (8000888 <MX_TIM3_Init+0xe8>)
 800087a:	f000 f991 	bl	8000ba0 <HAL_TIM_MspPostInit>

}
 800087e:	bf00      	nop
 8000880:	3738      	adds	r7, #56	; 0x38
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000098 	.word	0x20000098
 800088c:	40000400 	.word	0x40000400

08000890 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000894:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 8000896:	4a15      	ldr	r2, [pc, #84]	; (80008ec <MX_USART2_UART_Init+0x5c>)
 8000898:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800089a:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 800089c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008a2:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008a8:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008b4:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008b6:	220c      	movs	r2, #12
 80008b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c0:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008c6:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008d2:	4805      	ldr	r0, [pc, #20]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008d4:	f004 fbf0 	bl	80050b8 <HAL_UART_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008de:	f000 f86d 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000150 	.word	0x20000150
 80008ec:	40004400 	.word	0x40004400

080008f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08a      	sub	sp, #40	; 0x28
 80008f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f6:	f107 0314 	add.w	r3, r7, #20
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
 8000904:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000906:	4b2b      	ldr	r3, [pc, #172]	; (80009b4 <MX_GPIO_Init+0xc4>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090a:	4a2a      	ldr	r2, [pc, #168]	; (80009b4 <MX_GPIO_Init+0xc4>)
 800090c:	f043 0304 	orr.w	r3, r3, #4
 8000910:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000912:	4b28      	ldr	r3, [pc, #160]	; (80009b4 <MX_GPIO_Init+0xc4>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000916:	f003 0304 	and.w	r3, r3, #4
 800091a:	613b      	str	r3, [r7, #16]
 800091c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800091e:	4b25      	ldr	r3, [pc, #148]	; (80009b4 <MX_GPIO_Init+0xc4>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000922:	4a24      	ldr	r2, [pc, #144]	; (80009b4 <MX_GPIO_Init+0xc4>)
 8000924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000928:	64d3      	str	r3, [r2, #76]	; 0x4c
 800092a:	4b22      	ldr	r3, [pc, #136]	; (80009b4 <MX_GPIO_Init+0xc4>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000936:	4b1f      	ldr	r3, [pc, #124]	; (80009b4 <MX_GPIO_Init+0xc4>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093a:	4a1e      	ldr	r2, [pc, #120]	; (80009b4 <MX_GPIO_Init+0xc4>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000942:	4b1c      	ldr	r3, [pc, #112]	; (80009b4 <MX_GPIO_Init+0xc4>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	60bb      	str	r3, [r7, #8]
 800094c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800094e:	4b19      	ldr	r3, [pc, #100]	; (80009b4 <MX_GPIO_Init+0xc4>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000952:	4a18      	ldr	r2, [pc, #96]	; (80009b4 <MX_GPIO_Init+0xc4>)
 8000954:	f043 0302 	orr.w	r3, r3, #2
 8000958:	64d3      	str	r3, [r2, #76]	; 0x4c
 800095a:	4b16      	ldr	r3, [pc, #88]	; (80009b4 <MX_GPIO_Init+0xc4>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	f003 0302 	and.w	r3, r3, #2
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	2120      	movs	r1, #32
 800096a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800096e:	f002 f811 	bl	8002994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000972:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000976:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000978:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800097c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000982:	f107 0314 	add.w	r3, r7, #20
 8000986:	4619      	mov	r1, r3
 8000988:	480b      	ldr	r0, [pc, #44]	; (80009b8 <MX_GPIO_Init+0xc8>)
 800098a:	f001 fe59 	bl	8002640 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800098e:	2320      	movs	r3, #32
 8000990:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000992:	2301      	movs	r3, #1
 8000994:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2300      	movs	r3, #0
 800099c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800099e:	f107 0314 	add.w	r3, r7, #20
 80009a2:	4619      	mov	r1, r3
 80009a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a8:	f001 fe4a 	bl	8002640 <HAL_GPIO_Init>

}
 80009ac:	bf00      	nop
 80009ae:	3728      	adds	r7, #40	; 0x28
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40021000 	.word	0x40021000
 80009b8:	48000800 	.word	0x48000800

080009bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c0:	b672      	cpsid	i
}
 80009c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80009c4:	e7fe      	b.n	80009c4 <Error_Handler+0x8>

080009c6 <setGreenLed>:
 */

#include "remi.h"

// On board green LED On
void setGreenLed() {
 80009c6:	b580      	push	{r7, lr}
 80009c8:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 80009ca:	2201      	movs	r2, #1
 80009cc:	2120      	movs	r1, #32
 80009ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009d2:	f001 ffdf 	bl	8002994 <HAL_GPIO_WritePin>
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}

080009da <blinkGreenLed>:

// On board green LED blink
void blinkGreenLed(int nb, int delay) {
 80009da:	b580      	push	{r7, lr}
 80009dc:	b084      	sub	sp, #16
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
 80009e2:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < nb; i++) {
 80009e4:	2300      	movs	r3, #0
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	e00b      	b.n	8000a02 <blinkGreenLed+0x28>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80009ea:	2120      	movs	r1, #32
 80009ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f0:	f001 ffe8 	bl	80029c4 <HAL_GPIO_TogglePin>
		HAL_Delay(delay);
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	4618      	mov	r0, r3
 80009f8:	f000 fb16 	bl	8001028 <HAL_Delay>
	for (int i = 0; i < nb; i++) {
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	3301      	adds	r3, #1
 8000a00:	60fb      	str	r3, [r7, #12]
 8000a02:	68fa      	ldr	r2, [r7, #12]
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	429a      	cmp	r2, r3
 8000a08:	dbef      	blt.n	80009ea <blinkGreenLed+0x10>
	}
}
 8000a0a:	bf00      	nop
 8000a0c:	bf00      	nop
 8000a0e:	3710      	adds	r7, #16
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <sendWelcomeMsgRS232>:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);

}

// Welcome Message On RS232
void sendWelcomeMsgRS232(UART_HandleTypeDef *huart) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
	printf("Hello from remi\n\r");
 8000a1c:	4808      	ldr	r0, [pc, #32]	; (8000a40 <sendWelcomeMsgRS232+0x2c>)
 8000a1e:	f005 f8a7 	bl	8005b70 <iprintf>
	//pointer targets in passing argument 2 of 'HAL_UART_Transmit' differ in signedness [-Wpointer-sign]
	//if (HAL_UART_Transmit(huart, "Nucleo L476RG connected\n\r", 25, 100)
	//modification au niveau du formatage du message
	if (HAL_UART_Transmit(huart, (uint8_t*)"Nucleo L476RG connected\n\r", 25, 100)
 8000a22:	2364      	movs	r3, #100	; 0x64
 8000a24:	2219      	movs	r2, #25
 8000a26:	4907      	ldr	r1, [pc, #28]	; (8000a44 <sendWelcomeMsgRS232+0x30>)
 8000a28:	6878      	ldr	r0, [r7, #4]
 8000a2a:	f004 fb93 	bl	8005154 <HAL_UART_Transmit>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <sendWelcomeMsgRS232+0x24>
			!= HAL_OK)
		Error_Handler();
 8000a34:	f7ff ffc2 	bl	80009bc <Error_Handler>
}
 8000a38:	bf00      	nop
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	08006a48 	.word	0x08006a48
 8000a44:	08006a5c 	.word	0x08006a5c

08000a48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <HAL_MspInit+0x44>)
 8000a50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a52:	4a0e      	ldr	r2, [pc, #56]	; (8000a8c <HAL_MspInit+0x44>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	6613      	str	r3, [r2, #96]	; 0x60
 8000a5a:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <HAL_MspInit+0x44>)
 8000a5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a66:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <HAL_MspInit+0x44>)
 8000a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a6a:	4a08      	ldr	r2, [pc, #32]	; (8000a8c <HAL_MspInit+0x44>)
 8000a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a70:	6593      	str	r3, [r2, #88]	; 0x58
 8000a72:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <HAL_MspInit+0x44>)
 8000a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7a:	603b      	str	r3, [r7, #0]
 8000a7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	40021000 	.word	0x40021000

08000a90 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b0ac      	sub	sp, #176	; 0xb0
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a98:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	2288      	movs	r2, #136	; 0x88
 8000aae:	2100      	movs	r1, #0
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f005 f855 	bl	8005b60 <memset>
  if(hadc->Instance==ADC1)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4a27      	ldr	r2, [pc, #156]	; (8000b58 <HAL_ADC_MspInit+0xc8>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d147      	bne.n	8000b50 <HAL_ADC_MspInit+0xc0>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000ac0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ac4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000ac6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000aca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000ad6:	2308      	movs	r3, #8
 8000ad8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000ada:	2307      	movs	r3, #7
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000ae6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000aea:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	4618      	mov	r0, r3
 8000af2:	f002 fdd1 	bl	8003698 <HAL_RCCEx_PeriphCLKConfig>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000afc:	f7ff ff5e 	bl	80009bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000b00:	4b16      	ldr	r3, [pc, #88]	; (8000b5c <HAL_ADC_MspInit+0xcc>)
 8000b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b04:	4a15      	ldr	r2, [pc, #84]	; (8000b5c <HAL_ADC_MspInit+0xcc>)
 8000b06:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b0c:	4b13      	ldr	r3, [pc, #76]	; (8000b5c <HAL_ADC_MspInit+0xcc>)
 8000b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b14:	613b      	str	r3, [r7, #16]
 8000b16:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b18:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <HAL_ADC_MspInit+0xcc>)
 8000b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1c:	4a0f      	ldr	r2, [pc, #60]	; (8000b5c <HAL_ADC_MspInit+0xcc>)
 8000b1e:	f043 0301 	orr.w	r3, r3, #1
 8000b22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b24:	4b0d      	ldr	r3, [pc, #52]	; (8000b5c <HAL_ADC_MspInit+0xcc>)
 8000b26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b28:	f003 0301 	and.w	r3, r3, #1
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b30:	2301      	movs	r3, #1
 8000b32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b36:	230b      	movs	r3, #11
 8000b38:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b42:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b46:	4619      	mov	r1, r3
 8000b48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b4c:	f001 fd78 	bl	8002640 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b50:	bf00      	nop
 8000b52:	37b0      	adds	r7, #176	; 0xb0
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	50040000 	.word	0x50040000
 8000b5c:	40021000 	.word	0x40021000

08000b60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a0a      	ldr	r2, [pc, #40]	; (8000b98 <HAL_TIM_Base_MspInit+0x38>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d10b      	bne.n	8000b8a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b72:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <HAL_TIM_Base_MspInit+0x3c>)
 8000b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b76:	4a09      	ldr	r2, [pc, #36]	; (8000b9c <HAL_TIM_Base_MspInit+0x3c>)
 8000b78:	f043 0302 	orr.w	r3, r3, #2
 8000b7c:	6593      	str	r3, [r2, #88]	; 0x58
 8000b7e:	4b07      	ldr	r3, [pc, #28]	; (8000b9c <HAL_TIM_Base_MspInit+0x3c>)
 8000b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b82:	f003 0302 	and.w	r3, r3, #2
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000b8a:	bf00      	nop
 8000b8c:	3714      	adds	r7, #20
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	40000400 	.word	0x40000400
 8000b9c:	40021000 	.word	0x40021000

08000ba0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b088      	sub	sp, #32
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	f107 030c 	add.w	r3, r7, #12
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a11      	ldr	r2, [pc, #68]	; (8000c04 <HAL_TIM_MspPostInit+0x64>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d11c      	bne.n	8000bfc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc2:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <HAL_TIM_MspPostInit+0x68>)
 8000bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc6:	4a10      	ldr	r2, [pc, #64]	; (8000c08 <HAL_TIM_MspPostInit+0x68>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bce:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <HAL_TIM_MspPostInit+0x68>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	60bb      	str	r3, [r7, #8]
 8000bd8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000bda:	2380      	movs	r3, #128	; 0x80
 8000bdc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bde:	2302      	movs	r3, #2
 8000be0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000bea:	2302      	movs	r3, #2
 8000bec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bee:	f107 030c 	add.w	r3, r7, #12
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf8:	f001 fd22 	bl	8002640 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000bfc:	bf00      	nop
 8000bfe:	3720      	adds	r7, #32
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40000400 	.word	0x40000400
 8000c08:	40021000 	.word	0x40021000

08000c0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b0ac      	sub	sp, #176	; 0xb0
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c14:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
 8000c22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	2288      	movs	r2, #136	; 0x88
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f004 ff97 	bl	8005b60 <memset>
  if(huart->Instance==USART2)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a21      	ldr	r2, [pc, #132]	; (8000cbc <HAL_UART_MspInit+0xb0>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d13b      	bne.n	8000cb4 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c40:	2300      	movs	r3, #0
 8000c42:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f002 fd25 	bl	8003698 <HAL_RCCEx_PeriphCLKConfig>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c54:	f7ff feb2 	bl	80009bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c58:	4b19      	ldr	r3, [pc, #100]	; (8000cc0 <HAL_UART_MspInit+0xb4>)
 8000c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c5c:	4a18      	ldr	r2, [pc, #96]	; (8000cc0 <HAL_UART_MspInit+0xb4>)
 8000c5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c62:	6593      	str	r3, [r2, #88]	; 0x58
 8000c64:	4b16      	ldr	r3, [pc, #88]	; (8000cc0 <HAL_UART_MspInit+0xb4>)
 8000c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c6c:	613b      	str	r3, [r7, #16]
 8000c6e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c70:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <HAL_UART_MspInit+0xb4>)
 8000c72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c74:	4a12      	ldr	r2, [pc, #72]	; (8000cc0 <HAL_UART_MspInit+0xb4>)
 8000c76:	f043 0301 	orr.w	r3, r3, #1
 8000c7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c7c:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <HAL_UART_MspInit+0xb4>)
 8000c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c80:	f003 0301 	and.w	r3, r3, #1
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c88:	230c      	movs	r3, #12
 8000c8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9a:	2303      	movs	r3, #3
 8000c9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ca0:	2307      	movs	r3, #7
 8000ca2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000caa:	4619      	mov	r1, r3
 8000cac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb0:	f001 fcc6 	bl	8002640 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cb4:	bf00      	nop
 8000cb6:	37b0      	adds	r7, #176	; 0xb0
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40004400 	.word	0x40004400
 8000cc0:	40021000 	.word	0x40021000

08000cc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <NMI_Handler+0x4>

08000cca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cce:	e7fe      	b.n	8000cce <HardFault_Handler+0x4>

08000cd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <MemManage_Handler+0x4>

08000cd6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cda:	e7fe      	b.n	8000cda <BusFault_Handler+0x4>

08000cdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <UsageFault_Handler+0x4>

08000ce2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d10:	f000 f96a 	bl	8000fe8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d14:	bf00      	nop
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b086      	sub	sp, #24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]
 8000d28:	e00a      	b.n	8000d40 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d2a:	f3af 8000 	nop.w
 8000d2e:	4601      	mov	r1, r0
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	1c5a      	adds	r2, r3, #1
 8000d34:	60ba      	str	r2, [r7, #8]
 8000d36:	b2ca      	uxtb	r2, r1
 8000d38:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	617b      	str	r3, [r7, #20]
 8000d40:	697a      	ldr	r2, [r7, #20]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	dbf0      	blt.n	8000d2a <_read+0x12>
	}

return len;
 8000d48:	687b      	ldr	r3, [r7, #4]
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3718      	adds	r7, #24
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b086      	sub	sp, #24
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	60f8      	str	r0, [r7, #12]
 8000d5a:	60b9      	str	r1, [r7, #8]
 8000d5c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d5e:	2300      	movs	r3, #0
 8000d60:	617b      	str	r3, [r7, #20]
 8000d62:	e009      	b.n	8000d78 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	1c5a      	adds	r2, r3, #1
 8000d68:	60ba      	str	r2, [r7, #8]
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	3301      	adds	r3, #1
 8000d76:	617b      	str	r3, [r7, #20]
 8000d78:	697a      	ldr	r2, [r7, #20]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	dbf1      	blt.n	8000d64 <_write+0x12>
	}
	return len;
 8000d80:	687b      	ldr	r3, [r7, #4]
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3718      	adds	r7, #24
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <_close>:

int _close(int file)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	b083      	sub	sp, #12
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
	return -1;
 8000d92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr

08000da2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000da2:	b480      	push	{r7}
 8000da4:	b083      	sub	sp, #12
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
 8000daa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000db2:	605a      	str	r2, [r3, #4]
	return 0;
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <_isatty>:

int _isatty(int file)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	b083      	sub	sp, #12
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
	return 1;
 8000dca:	2301      	movs	r3, #1
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
	return 0;
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3714      	adds	r7, #20
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
	...

08000df4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dfc:	4a14      	ldr	r2, [pc, #80]	; (8000e50 <_sbrk+0x5c>)
 8000dfe:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <_sbrk+0x60>)
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e08:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <_sbrk+0x64>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d102      	bne.n	8000e16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e10:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <_sbrk+0x64>)
 8000e12:	4a12      	ldr	r2, [pc, #72]	; (8000e5c <_sbrk+0x68>)
 8000e14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e16:	4b10      	ldr	r3, [pc, #64]	; (8000e58 <_sbrk+0x64>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d207      	bcs.n	8000e34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e24:	f004 fe64 	bl	8005af0 <__errno>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	220c      	movs	r2, #12
 8000e2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e32:	e009      	b.n	8000e48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e34:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <_sbrk+0x64>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e3a:	4b07      	ldr	r3, [pc, #28]	; (8000e58 <_sbrk+0x64>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4413      	add	r3, r2
 8000e42:	4a05      	ldr	r2, [pc, #20]	; (8000e58 <_sbrk+0x64>)
 8000e44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e46:	68fb      	ldr	r3, [r7, #12]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3718      	adds	r7, #24
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20018000 	.word	0x20018000
 8000e54:	00000400 	.word	0x00000400
 8000e58:	2000008c 	.word	0x2000008c
 8000e5c:	200001e8 	.word	0x200001e8

08000e60 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e64:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <SystemInit+0x20>)
 8000e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e6a:	4a05      	ldr	r2, [pc, #20]	; (8000e80 <SystemInit+0x20>)
 8000e6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <load_adc>:

#include "yann.h"



int load_adc(ADC_HandleTypeDef hadc,int polTime){
 8000e84:	b084      	sub	sp, #16
 8000e86:	b580      	push	{r7, lr}
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	f107 0c08 	add.w	ip, r7, #8
 8000e8e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	HAL_ADC_Start(&hadc);
 8000e92:	f107 0008 	add.w	r0, r7, #8
 8000e96:	f000 fc25 	bl	80016e4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, polTime);
 8000e9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	f107 0008 	add.w	r0, r7, #8
 8000ea2:	f000 fcd9 	bl	8001858 <HAL_ADC_PollForConversion>
	//if(HAL_ADC_GetValue(&hadc)==0)
		//return 1;
	return  HAL_ADC_GetValue(&hadc);
 8000ea6:	f107 0008 	add.w	r0, r7, #8
 8000eaa:	f000 fdad 	bl	8001a08 <HAL_ADC_GetValue>
 8000eae:	4603      	mov	r3, r0

}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000eb8:	b004      	add	sp, #16
 8000eba:	4770      	bx	lr

08000ebc <load_pwm>:

void load_pwm(TIM_HandleTypeDef htimX,int val){
 8000ebc:	b084      	sub	sp, #16
 8000ebe:	b490      	push	{r4, r7}
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	f107 0408 	add.w	r4, r7, #8
 8000ec6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	htimX.Instance->CCR2=val ;
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000ece:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bc90      	pop	{r4, r7}
 8000ed6:	b004      	add	sp, #16
 8000ed8:	4770      	bx	lr
	...

08000edc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000edc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f14 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ee0:	f7ff ffbe 	bl	8000e60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ee4:	480c      	ldr	r0, [pc, #48]	; (8000f18 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ee6:	490d      	ldr	r1, [pc, #52]	; (8000f1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ee8:	4a0d      	ldr	r2, [pc, #52]	; (8000f20 <LoopForever+0xe>)
  movs r3, #0
 8000eea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eec:	e002      	b.n	8000ef4 <LoopCopyDataInit>

08000eee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ef0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ef2:	3304      	adds	r3, #4

08000ef4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ef4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ef6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef8:	d3f9      	bcc.n	8000eee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000efa:	4a0a      	ldr	r2, [pc, #40]	; (8000f24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000efc:	4c0a      	ldr	r4, [pc, #40]	; (8000f28 <LoopForever+0x16>)
  movs r3, #0
 8000efe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f00:	e001      	b.n	8000f06 <LoopFillZerobss>

08000f02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f04:	3204      	adds	r2, #4

08000f06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f08:	d3fb      	bcc.n	8000f02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f0a:	f004 fdf7 	bl	8005afc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f0e:	f7ff fb2b 	bl	8000568 <main>

08000f12 <LoopForever>:

LoopForever:
    b LoopForever
 8000f12:	e7fe      	b.n	8000f12 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f14:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f1c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f20:	08006b68 	.word	0x08006b68
  ldr r2, =_sbss
 8000f24:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f28:	200001e8 	.word	0x200001e8

08000f2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f2c:	e7fe      	b.n	8000f2c <ADC1_2_IRQHandler>
	...

08000f30 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f36:	2300      	movs	r3, #0
 8000f38:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f3a:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <HAL_Init+0x3c>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a0b      	ldr	r2, [pc, #44]	; (8000f6c <HAL_Init+0x3c>)
 8000f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f44:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f46:	2003      	movs	r0, #3
 8000f48:	f001 fb46 	bl	80025d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	f000 f80f 	bl	8000f70 <HAL_InitTick>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d002      	beq.n	8000f5e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	71fb      	strb	r3, [r7, #7]
 8000f5c:	e001      	b.n	8000f62 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f5e:	f7ff fd73 	bl	8000a48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f62:	79fb      	ldrb	r3, [r7, #7]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40022000 	.word	0x40022000

08000f70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f7c:	4b17      	ldr	r3, [pc, #92]	; (8000fdc <HAL_InitTick+0x6c>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d023      	beq.n	8000fcc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f84:	4b16      	ldr	r3, [pc, #88]	; (8000fe0 <HAL_InitTick+0x70>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <HAL_InitTick+0x6c>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f001 fb43 	bl	8002626 <HAL_SYSTICK_Config>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d10f      	bne.n	8000fc6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2b0f      	cmp	r3, #15
 8000faa:	d809      	bhi.n	8000fc0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fac:	2200      	movs	r2, #0
 8000fae:	6879      	ldr	r1, [r7, #4]
 8000fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb4:	f001 fb1b 	bl	80025ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fb8:	4a0a      	ldr	r2, [pc, #40]	; (8000fe4 <HAL_InitTick+0x74>)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6013      	str	r3, [r2, #0]
 8000fbe:	e007      	b.n	8000fd0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	73fb      	strb	r3, [r7, #15]
 8000fc4:	e004      	b.n	8000fd0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	73fb      	strb	r3, [r7, #15]
 8000fca:	e001      	b.n	8000fd0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000008 	.word	0x20000008
 8000fe0:	20000000 	.word	0x20000000
 8000fe4:	20000004 	.word	0x20000004

08000fe8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <HAL_IncTick+0x20>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_IncTick+0x24>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	4a04      	ldr	r2, [pc, #16]	; (800100c <HAL_IncTick+0x24>)
 8000ffa:	6013      	str	r3, [r2, #0]
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	20000008 	.word	0x20000008
 800100c:	200001d4 	.word	0x200001d4

08001010 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  return uwTick;
 8001014:	4b03      	ldr	r3, [pc, #12]	; (8001024 <HAL_GetTick+0x14>)
 8001016:	681b      	ldr	r3, [r3, #0]
}
 8001018:	4618      	mov	r0, r3
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	200001d4 	.word	0x200001d4

08001028 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001030:	f7ff ffee 	bl	8001010 <HAL_GetTick>
 8001034:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001040:	d005      	beq.n	800104e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001042:	4b0a      	ldr	r3, [pc, #40]	; (800106c <HAL_Delay+0x44>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	461a      	mov	r2, r3
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	4413      	add	r3, r2
 800104c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800104e:	bf00      	nop
 8001050:	f7ff ffde 	bl	8001010 <HAL_GetTick>
 8001054:	4602      	mov	r2, r0
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	68fa      	ldr	r2, [r7, #12]
 800105c:	429a      	cmp	r2, r3
 800105e:	d8f7      	bhi.n	8001050 <HAL_Delay+0x28>
  {
  }
}
 8001060:	bf00      	nop
 8001062:	bf00      	nop
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20000008 	.word	0x20000008

08001070 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	431a      	orrs	r2, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	609a      	str	r2, [r3, #8]
}
 800108a:	bf00      	nop
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001096:	b480      	push	{r7}
 8001098:	b083      	sub	sp, #12
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
 800109e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	431a      	orrs	r2, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	609a      	str	r2, [r3, #8]
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80010d8:	b480      	push	{r7}
 80010da:	b087      	sub	sp, #28
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
 80010e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	3360      	adds	r3, #96	; 0x60
 80010ea:	461a      	mov	r2, r3
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	4413      	add	r3, r2
 80010f2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	4b08      	ldr	r3, [pc, #32]	; (800111c <LL_ADC_SetOffset+0x44>)
 80010fa:	4013      	ands	r3, r2
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001102:	683a      	ldr	r2, [r7, #0]
 8001104:	430a      	orrs	r2, r1
 8001106:	4313      	orrs	r3, r2
 8001108:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001110:	bf00      	nop
 8001112:	371c      	adds	r7, #28
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	03fff000 	.word	0x03fff000

08001120 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	3360      	adds	r3, #96	; 0x60
 800112e:	461a      	mov	r2, r3
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	4413      	add	r3, r2
 8001136:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001140:	4618      	mov	r0, r3
 8001142:	3714      	adds	r7, #20
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800114c:	b480      	push	{r7}
 800114e:	b087      	sub	sp, #28
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	3360      	adds	r3, #96	; 0x60
 800115c:	461a      	mov	r2, r3
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	4413      	add	r3, r2
 8001164:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	431a      	orrs	r2, r3
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001176:	bf00      	nop
 8001178:	371c      	adds	r7, #28
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr

08001182 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001182:	b480      	push	{r7}
 8001184:	b083      	sub	sp, #12
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	68db      	ldr	r3, [r3, #12]
 800118e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001192:	2b00      	cmp	r3, #0
 8001194:	d101      	bne.n	800119a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001196:	2301      	movs	r3, #1
 8001198:	e000      	b.n	800119c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800119a:	2300      	movs	r3, #0
}
 800119c:	4618      	mov	r0, r3
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b087      	sub	sp, #28
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	3330      	adds	r3, #48	; 0x30
 80011b8:	461a      	mov	r2, r3
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	0a1b      	lsrs	r3, r3, #8
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	f003 030c 	and.w	r3, r3, #12
 80011c4:	4413      	add	r3, r2
 80011c6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	f003 031f 	and.w	r3, r3, #31
 80011d2:	211f      	movs	r1, #31
 80011d4:	fa01 f303 	lsl.w	r3, r1, r3
 80011d8:	43db      	mvns	r3, r3
 80011da:	401a      	ands	r2, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	0e9b      	lsrs	r3, r3, #26
 80011e0:	f003 011f 	and.w	r1, r3, #31
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	f003 031f 	and.w	r3, r3, #31
 80011ea:	fa01 f303 	lsl.w	r3, r1, r3
 80011ee:	431a      	orrs	r2, r3
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80011f4:	bf00      	nop
 80011f6:	371c      	adds	r7, #28
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001200:	b480      	push	{r7}
 8001202:	b087      	sub	sp, #28
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	3314      	adds	r3, #20
 8001210:	461a      	mov	r2, r3
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	0e5b      	lsrs	r3, r3, #25
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	f003 0304 	and.w	r3, r3, #4
 800121c:	4413      	add	r3, r2
 800121e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	0d1b      	lsrs	r3, r3, #20
 8001228:	f003 031f 	and.w	r3, r3, #31
 800122c:	2107      	movs	r1, #7
 800122e:	fa01 f303 	lsl.w	r3, r1, r3
 8001232:	43db      	mvns	r3, r3
 8001234:	401a      	ands	r2, r3
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	0d1b      	lsrs	r3, r3, #20
 800123a:	f003 031f 	and.w	r3, r3, #31
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	fa01 f303 	lsl.w	r3, r1, r3
 8001244:	431a      	orrs	r2, r3
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800124a:	bf00      	nop
 800124c:	371c      	adds	r7, #28
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
	...

08001258 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001270:	43db      	mvns	r3, r3
 8001272:	401a      	ands	r2, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f003 0318 	and.w	r3, r3, #24
 800127a:	4908      	ldr	r1, [pc, #32]	; (800129c <LL_ADC_SetChannelSingleDiff+0x44>)
 800127c:	40d9      	lsrs	r1, r3
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	400b      	ands	r3, r1
 8001282:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001286:	431a      	orrs	r2, r3
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800128e:	bf00      	nop
 8001290:	3714      	adds	r7, #20
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	0007ffff 	.word	0x0007ffff

080012a0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	f003 031f 	and.w	r3, r3, #31
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80012e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	6093      	str	r3, [r2, #8]
}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800130c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001310:	d101      	bne.n	8001316 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001312:	2301      	movs	r3, #1
 8001314:	e000      	b.n	8001318 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001316:	2300      	movs	r3, #0
}
 8001318:	4618      	mov	r0, r3
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001334:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001338:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001360:	d101      	bne.n	8001366 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001362:	2301      	movs	r3, #1
 8001364:	e000      	b.n	8001368 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001366:	2300      	movs	r3, #0
}
 8001368:	4618      	mov	r0, r3
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001384:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001388:	f043 0201 	orr.w	r2, r3, #1
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f003 0301 	and.w	r3, r3, #1
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d101      	bne.n	80013b4 <LL_ADC_IsEnabled+0x18>
 80013b0:	2301      	movs	r3, #1
 80013b2:	e000      	b.n	80013b6 <LL_ADC_IsEnabled+0x1a>
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr

080013c2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80013c2:	b480      	push	{r7}
 80013c4:	b083      	sub	sp, #12
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80013d2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013d6:	f043 0204 	orr.w	r2, r3, #4
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80013de:	bf00      	nop
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80013ea:	b480      	push	{r7}
 80013ec:	b083      	sub	sp, #12
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	f003 0304 	and.w	r3, r3, #4
 80013fa:	2b04      	cmp	r3, #4
 80013fc:	d101      	bne.n	8001402 <LL_ADC_REG_IsConversionOngoing+0x18>
 80013fe:	2301      	movs	r3, #1
 8001400:	e000      	b.n	8001404 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001402:	2300      	movs	r3, #0
}
 8001404:	4618      	mov	r0, r3
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f003 0308 	and.w	r3, r3, #8
 8001420:	2b08      	cmp	r3, #8
 8001422:	d101      	bne.n	8001428 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001424:	2301      	movs	r3, #1
 8001426:	e000      	b.n	800142a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
	...

08001438 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001438:	b590      	push	{r4, r7, lr}
 800143a:	b089      	sub	sp, #36	; 0x24
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001440:	2300      	movs	r3, #0
 8001442:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001444:	2300      	movs	r3, #0
 8001446:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d101      	bne.n	8001452 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e136      	b.n	80016c0 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	691b      	ldr	r3, [r3, #16]
 8001456:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800145c:	2b00      	cmp	r3, #0
 800145e:	d109      	bne.n	8001474 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f7ff fb15 	bl	8000a90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2200      	movs	r2, #0
 800146a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2200      	movs	r2, #0
 8001470:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff ff3f 	bl	80012fc <LL_ADC_IsDeepPowerDownEnabled>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d004      	beq.n	800148e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff ff25 	bl	80012d8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff ff5a 	bl	800134c <LL_ADC_IsInternalRegulatorEnabled>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d115      	bne.n	80014ca <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff ff3e 	bl	8001324 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80014a8:	4b87      	ldr	r3, [pc, #540]	; (80016c8 <HAL_ADC_Init+0x290>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	099b      	lsrs	r3, r3, #6
 80014ae:	4a87      	ldr	r2, [pc, #540]	; (80016cc <HAL_ADC_Init+0x294>)
 80014b0:	fba2 2303 	umull	r2, r3, r2, r3
 80014b4:	099b      	lsrs	r3, r3, #6
 80014b6:	3301      	adds	r3, #1
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80014bc:	e002      	b.n	80014c4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	3b01      	subs	r3, #1
 80014c2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1f9      	bne.n	80014be <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff ff3c 	bl	800134c <LL_ADC_IsInternalRegulatorEnabled>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d10d      	bne.n	80014f6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014de:	f043 0210 	orr.w	r2, r3, #16
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ea:	f043 0201 	orr.w	r2, r3, #1
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff ff75 	bl	80013ea <LL_ADC_REG_IsConversionOngoing>
 8001500:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001506:	f003 0310 	and.w	r3, r3, #16
 800150a:	2b00      	cmp	r3, #0
 800150c:	f040 80cf 	bne.w	80016ae <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	2b00      	cmp	r3, #0
 8001514:	f040 80cb 	bne.w	80016ae <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800151c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001520:	f043 0202 	orr.w	r2, r3, #2
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff ff35 	bl	800139c <LL_ADC_IsEnabled>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d115      	bne.n	8001564 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001538:	4865      	ldr	r0, [pc, #404]	; (80016d0 <HAL_ADC_Init+0x298>)
 800153a:	f7ff ff2f 	bl	800139c <LL_ADC_IsEnabled>
 800153e:	4604      	mov	r4, r0
 8001540:	4864      	ldr	r0, [pc, #400]	; (80016d4 <HAL_ADC_Init+0x29c>)
 8001542:	f7ff ff2b 	bl	800139c <LL_ADC_IsEnabled>
 8001546:	4603      	mov	r3, r0
 8001548:	431c      	orrs	r4, r3
 800154a:	4863      	ldr	r0, [pc, #396]	; (80016d8 <HAL_ADC_Init+0x2a0>)
 800154c:	f7ff ff26 	bl	800139c <LL_ADC_IsEnabled>
 8001550:	4603      	mov	r3, r0
 8001552:	4323      	orrs	r3, r4
 8001554:	2b00      	cmp	r3, #0
 8001556:	d105      	bne.n	8001564 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	4619      	mov	r1, r3
 800155e:	485f      	ldr	r0, [pc, #380]	; (80016dc <HAL_ADC_Init+0x2a4>)
 8001560:	f7ff fd86 	bl	8001070 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	7e5b      	ldrb	r3, [r3, #25]
 8001568:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800156e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001574:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800157a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001582:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001584:	4313      	orrs	r3, r2
 8001586:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d106      	bne.n	80015a0 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001596:	3b01      	subs	r3, #1
 8001598:	045b      	lsls	r3, r3, #17
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4313      	orrs	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d009      	beq.n	80015bc <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ac:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	68da      	ldr	r2, [r3, #12]
 80015c2:	4b47      	ldr	r3, [pc, #284]	; (80016e0 <HAL_ADC_Init+0x2a8>)
 80015c4:	4013      	ands	r3, r2
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	6812      	ldr	r2, [r2, #0]
 80015ca:	69b9      	ldr	r1, [r7, #24]
 80015cc:	430b      	orrs	r3, r1
 80015ce:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff ff08 	bl	80013ea <LL_ADC_REG_IsConversionOngoing>
 80015da:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff ff15 	bl	8001410 <LL_ADC_INJ_IsConversionOngoing>
 80015e6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d13d      	bne.n	800166a <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d13a      	bne.n	800166a <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80015f8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001600:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001602:	4313      	orrs	r3, r2
 8001604:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001610:	f023 0302 	bic.w	r3, r3, #2
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	6812      	ldr	r2, [r2, #0]
 8001618:	69b9      	ldr	r1, [r7, #24]
 800161a:	430b      	orrs	r3, r1
 800161c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001624:	2b01      	cmp	r3, #1
 8001626:	d118      	bne.n	800165a <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	691b      	ldr	r3, [r3, #16]
 800162e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001632:	f023 0304 	bic.w	r3, r3, #4
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800163e:	4311      	orrs	r1, r2
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001644:	4311      	orrs	r1, r2
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800164a:	430a      	orrs	r2, r1
 800164c:	431a      	orrs	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f042 0201 	orr.w	r2, r2, #1
 8001656:	611a      	str	r2, [r3, #16]
 8001658:	e007      	b.n	800166a <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	691a      	ldr	r2, [r3, #16]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f022 0201 	bic.w	r2, r2, #1
 8001668:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	691b      	ldr	r3, [r3, #16]
 800166e:	2b01      	cmp	r3, #1
 8001670:	d10c      	bne.n	800168c <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001678:	f023 010f 	bic.w	r1, r3, #15
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	69db      	ldr	r3, [r3, #28]
 8001680:	1e5a      	subs	r2, r3, #1
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	430a      	orrs	r2, r1
 8001688:	631a      	str	r2, [r3, #48]	; 0x30
 800168a:	e007      	b.n	800169c <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f022 020f 	bic.w	r2, r2, #15
 800169a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016a0:	f023 0303 	bic.w	r3, r3, #3
 80016a4:	f043 0201 	orr.w	r2, r3, #1
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	655a      	str	r2, [r3, #84]	; 0x54
 80016ac:	e007      	b.n	80016be <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016b2:	f043 0210 	orr.w	r2, r3, #16
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80016be:	7ffb      	ldrb	r3, [r7, #31]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3724      	adds	r7, #36	; 0x24
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd90      	pop	{r4, r7, pc}
 80016c8:	20000000 	.word	0x20000000
 80016cc:	053e2d63 	.word	0x053e2d63
 80016d0:	50040000 	.word	0x50040000
 80016d4:	50040100 	.word	0x50040100
 80016d8:	50040200 	.word	0x50040200
 80016dc:	50040300 	.word	0x50040300
 80016e0:	fff0c007 	.word	0xfff0c007

080016e4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80016ec:	4857      	ldr	r0, [pc, #348]	; (800184c <HAL_ADC_Start+0x168>)
 80016ee:	f7ff fdd7 	bl	80012a0 <LL_ADC_GetMultimode>
 80016f2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff fe76 	bl	80013ea <LL_ADC_REG_IsConversionOngoing>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	f040 809c 	bne.w	800183e <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800170c:	2b01      	cmp	r3, #1
 800170e:	d101      	bne.n	8001714 <HAL_ADC_Start+0x30>
 8001710:	2302      	movs	r3, #2
 8001712:	e097      	b.n	8001844 <HAL_ADC_Start+0x160>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2201      	movs	r2, #1
 8001718:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f000 fd71 	bl	8002204 <ADC_Enable>
 8001722:	4603      	mov	r3, r0
 8001724:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001726:	7dfb      	ldrb	r3, [r7, #23]
 8001728:	2b00      	cmp	r3, #0
 800172a:	f040 8083 	bne.w	8001834 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001732:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001736:	f023 0301 	bic.w	r3, r3, #1
 800173a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a42      	ldr	r2, [pc, #264]	; (8001850 <HAL_ADC_Start+0x16c>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d002      	beq.n	8001752 <HAL_ADC_Start+0x6e>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	e000      	b.n	8001754 <HAL_ADC_Start+0x70>
 8001752:	4b40      	ldr	r3, [pc, #256]	; (8001854 <HAL_ADC_Start+0x170>)
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	6812      	ldr	r2, [r2, #0]
 8001758:	4293      	cmp	r3, r2
 800175a:	d002      	beq.n	8001762 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d105      	bne.n	800176e <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001766:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001772:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800177a:	d106      	bne.n	800178a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001780:	f023 0206 	bic.w	r2, r3, #6
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	659a      	str	r2, [r3, #88]	; 0x58
 8001788:	e002      	b.n	8001790 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	221c      	movs	r2, #28
 8001796:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a2a      	ldr	r2, [pc, #168]	; (8001850 <HAL_ADC_Start+0x16c>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d002      	beq.n	80017b0 <HAL_ADC_Start+0xcc>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	e000      	b.n	80017b2 <HAL_ADC_Start+0xce>
 80017b0:	4b28      	ldr	r3, [pc, #160]	; (8001854 <HAL_ADC_Start+0x170>)
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	6812      	ldr	r2, [r2, #0]
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d008      	beq.n	80017cc <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d005      	beq.n	80017cc <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	2b05      	cmp	r3, #5
 80017c4:	d002      	beq.n	80017cc <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	2b09      	cmp	r3, #9
 80017ca:	d114      	bne.n	80017f6 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d007      	beq.n	80017ea <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017de:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017e2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff fde7 	bl	80013c2 <LL_ADC_REG_StartConversion>
 80017f4:	e025      	b.n	8001842 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a12      	ldr	r2, [pc, #72]	; (8001850 <HAL_ADC_Start+0x16c>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d002      	beq.n	8001812 <HAL_ADC_Start+0x12e>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	e000      	b.n	8001814 <HAL_ADC_Start+0x130>
 8001812:	4b10      	ldr	r3, [pc, #64]	; (8001854 <HAL_ADC_Start+0x170>)
 8001814:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d00f      	beq.n	8001842 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001826:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800182a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	655a      	str	r2, [r3, #84]	; 0x54
 8001832:	e006      	b.n	8001842 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800183c:	e001      	b.n	8001842 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800183e:	2302      	movs	r3, #2
 8001840:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001842:	7dfb      	ldrb	r3, [r7, #23]
}
 8001844:	4618      	mov	r0, r3
 8001846:	3718      	adds	r7, #24
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	50040300 	.word	0x50040300
 8001850:	50040100 	.word	0x50040100
 8001854:	50040000 	.word	0x50040000

08001858 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b088      	sub	sp, #32
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001862:	4866      	ldr	r0, [pc, #408]	; (80019fc <HAL_ADC_PollForConversion+0x1a4>)
 8001864:	f7ff fd1c 	bl	80012a0 <LL_ADC_GetMultimode>
 8001868:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	695b      	ldr	r3, [r3, #20]
 800186e:	2b08      	cmp	r3, #8
 8001870:	d102      	bne.n	8001878 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001872:	2308      	movs	r3, #8
 8001874:	61fb      	str	r3, [r7, #28]
 8001876:	e02a      	b.n	80018ce <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d005      	beq.n	800188a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	2b05      	cmp	r3, #5
 8001882:	d002      	beq.n	800188a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	2b09      	cmp	r3, #9
 8001888:	d111      	bne.n	80018ae <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	f003 0301 	and.w	r3, r3, #1
 8001894:	2b00      	cmp	r3, #0
 8001896:	d007      	beq.n	80018a8 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800189c:	f043 0220 	orr.w	r2, r3, #32
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e0a4      	b.n	80019f2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80018a8:	2304      	movs	r3, #4
 80018aa:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80018ac:	e00f      	b.n	80018ce <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80018ae:	4853      	ldr	r0, [pc, #332]	; (80019fc <HAL_ADC_PollForConversion+0x1a4>)
 80018b0:	f7ff fd04 	bl	80012bc <LL_ADC_GetMultiDMATransfer>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d007      	beq.n	80018ca <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018be:	f043 0220 	orr.w	r2, r3, #32
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e093      	b.n	80019f2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80018ca:	2304      	movs	r3, #4
 80018cc:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80018ce:	f7ff fb9f 	bl	8001010 <HAL_GetTick>
 80018d2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80018d4:	e021      	b.n	800191a <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018dc:	d01d      	beq.n	800191a <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80018de:	f7ff fb97 	bl	8001010 <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d302      	bcc.n	80018f4 <HAL_ADC_PollForConversion+0x9c>
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d112      	bne.n	800191a <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	4013      	ands	r3, r2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d10b      	bne.n	800191a <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001906:	f043 0204 	orr.w	r2, r3, #4
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e06b      	b.n	80019f2 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	4013      	ands	r3, r2
 8001924:	2b00      	cmp	r3, #0
 8001926:	d0d6      	beq.n	80018d6 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800192c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff fc22 	bl	8001182 <LL_ADC_REG_IsTriggerSourceSWStart>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d01c      	beq.n	800197e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	7e5b      	ldrb	r3, [r3, #25]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d118      	bne.n	800197e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0308 	and.w	r3, r3, #8
 8001956:	2b08      	cmp	r3, #8
 8001958:	d111      	bne.n	800197e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800195e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800196a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d105      	bne.n	800197e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001976:	f043 0201 	orr.w	r2, r3, #1
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a1f      	ldr	r2, [pc, #124]	; (8001a00 <HAL_ADC_PollForConversion+0x1a8>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d002      	beq.n	800198e <HAL_ADC_PollForConversion+0x136>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	e000      	b.n	8001990 <HAL_ADC_PollForConversion+0x138>
 800198e:	4b1d      	ldr	r3, [pc, #116]	; (8001a04 <HAL_ADC_PollForConversion+0x1ac>)
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	6812      	ldr	r2, [r2, #0]
 8001994:	4293      	cmp	r3, r2
 8001996:	d008      	beq.n	80019aa <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d005      	beq.n	80019aa <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	2b05      	cmp	r3, #5
 80019a2:	d002      	beq.n	80019aa <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	2b09      	cmp	r3, #9
 80019a8:	d104      	bne.n	80019b4 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	61bb      	str	r3, [r7, #24]
 80019b2:	e00c      	b.n	80019ce <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a11      	ldr	r2, [pc, #68]	; (8001a00 <HAL_ADC_PollForConversion+0x1a8>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d002      	beq.n	80019c4 <HAL_ADC_PollForConversion+0x16c>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	e000      	b.n	80019c6 <HAL_ADC_PollForConversion+0x16e>
 80019c4:	4b0f      	ldr	r3, [pc, #60]	; (8001a04 <HAL_ADC_PollForConversion+0x1ac>)
 80019c6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	2b08      	cmp	r3, #8
 80019d2:	d104      	bne.n	80019de <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2208      	movs	r2, #8
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	e008      	b.n	80019f0 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d103      	bne.n	80019f0 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	220c      	movs	r2, #12
 80019ee:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3720      	adds	r7, #32
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	50040300 	.word	0x50040300
 8001a00:	50040100 	.word	0x50040100
 8001a04:	50040000 	.word	0x50040000

08001a08 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
	...

08001a24 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b0b6      	sub	sp, #216	; 0xd8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001a34:	2300      	movs	r3, #0
 8001a36:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d101      	bne.n	8001a46 <HAL_ADC_ConfigChannel+0x22>
 8001a42:	2302      	movs	r3, #2
 8001a44:	e3c7      	b.n	80021d6 <HAL_ADC_ConfigChannel+0x7b2>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2201      	movs	r2, #1
 8001a4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff fcc9 	bl	80013ea <LL_ADC_REG_IsConversionOngoing>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f040 83a8 	bne.w	80021b0 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	2b05      	cmp	r3, #5
 8001a66:	d824      	bhi.n	8001ab2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	3b02      	subs	r3, #2
 8001a6e:	2b03      	cmp	r3, #3
 8001a70:	d81b      	bhi.n	8001aaa <HAL_ADC_ConfigChannel+0x86>
 8001a72:	a201      	add	r2, pc, #4	; (adr r2, 8001a78 <HAL_ADC_ConfigChannel+0x54>)
 8001a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a78:	08001a89 	.word	0x08001a89
 8001a7c:	08001a91 	.word	0x08001a91
 8001a80:	08001a99 	.word	0x08001a99
 8001a84:	08001aa1 	.word	0x08001aa1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	220c      	movs	r2, #12
 8001a8c:	605a      	str	r2, [r3, #4]
          break;
 8001a8e:	e011      	b.n	8001ab4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	2212      	movs	r2, #18
 8001a94:	605a      	str	r2, [r3, #4]
          break;
 8001a96:	e00d      	b.n	8001ab4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	2218      	movs	r2, #24
 8001a9c:	605a      	str	r2, [r3, #4]
          break;
 8001a9e:	e009      	b.n	8001ab4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001aa6:	605a      	str	r2, [r3, #4]
          break;
 8001aa8:	e004      	b.n	8001ab4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	2206      	movs	r2, #6
 8001aae:	605a      	str	r2, [r3, #4]
          break;
 8001ab0:	e000      	b.n	8001ab4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001ab2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6818      	ldr	r0, [r3, #0]
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	6859      	ldr	r1, [r3, #4]
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	f7ff fb71 	bl	80011a8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff fc8d 	bl	80013ea <LL_ADC_REG_IsConversionOngoing>
 8001ad0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff fc99 	bl	8001410 <LL_ADC_INJ_IsConversionOngoing>
 8001ade:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ae2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	f040 81a6 	bne.w	8001e38 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001aec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	f040 81a1 	bne.w	8001e38 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6818      	ldr	r0, [r3, #0]
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	6819      	ldr	r1, [r3, #0]
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	461a      	mov	r2, r3
 8001b04:	f7ff fb7c 	bl	8001200 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	695a      	ldr	r2, [r3, #20]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	08db      	lsrs	r3, r3, #3
 8001b14:	f003 0303 	and.w	r3, r3, #3
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	2b04      	cmp	r3, #4
 8001b28:	d00a      	beq.n	8001b40 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6818      	ldr	r0, [r3, #0]
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	6919      	ldr	r1, [r3, #16]
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001b3a:	f7ff facd 	bl	80010d8 <LL_ADC_SetOffset>
 8001b3e:	e17b      	b.n	8001e38 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2100      	movs	r1, #0
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff faea 	bl	8001120 <LL_ADC_GetOffsetChannel>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d10a      	bne.n	8001b6c <HAL_ADC_ConfigChannel+0x148>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff fadf 	bl	8001120 <LL_ADC_GetOffsetChannel>
 8001b62:	4603      	mov	r3, r0
 8001b64:	0e9b      	lsrs	r3, r3, #26
 8001b66:	f003 021f 	and.w	r2, r3, #31
 8001b6a:	e01e      	b.n	8001baa <HAL_ADC_ConfigChannel+0x186>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2100      	movs	r1, #0
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff fad4 	bl	8001120 <LL_ADC_GetOffsetChannel>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001b82:	fa93 f3a3 	rbit	r3, r3
 8001b86:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b8a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001b8e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001b92:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d101      	bne.n	8001b9e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001b9a:	2320      	movs	r3, #32
 8001b9c:	e004      	b.n	8001ba8 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001b9e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ba2:	fab3 f383 	clz	r3, r3
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d105      	bne.n	8001bc2 <HAL_ADC_ConfigChannel+0x19e>
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	0e9b      	lsrs	r3, r3, #26
 8001bbc:	f003 031f 	and.w	r3, r3, #31
 8001bc0:	e018      	b.n	8001bf4 <HAL_ADC_ConfigChannel+0x1d0>
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001bce:	fa93 f3a3 	rbit	r3, r3
 8001bd2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001bd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001bda:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001bde:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d101      	bne.n	8001bea <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001be6:	2320      	movs	r3, #32
 8001be8:	e004      	b.n	8001bf4 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001bea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001bee:	fab3 f383 	clz	r3, r3
 8001bf2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d106      	bne.n	8001c06 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	2100      	movs	r1, #0
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff faa3 	bl	800114c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2101      	movs	r1, #1
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff fa87 	bl	8001120 <LL_ADC_GetOffsetChannel>
 8001c12:	4603      	mov	r3, r0
 8001c14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d10a      	bne.n	8001c32 <HAL_ADC_ConfigChannel+0x20e>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2101      	movs	r1, #1
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff fa7c 	bl	8001120 <LL_ADC_GetOffsetChannel>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	0e9b      	lsrs	r3, r3, #26
 8001c2c:	f003 021f 	and.w	r2, r3, #31
 8001c30:	e01e      	b.n	8001c70 <HAL_ADC_ConfigChannel+0x24c>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2101      	movs	r1, #1
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff fa71 	bl	8001120 <LL_ADC_GetOffsetChannel>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c44:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001c48:	fa93 f3a3 	rbit	r3, r3
 8001c4c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001c50:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001c58:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d101      	bne.n	8001c64 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001c60:	2320      	movs	r3, #32
 8001c62:	e004      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001c64:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c68:	fab3 f383 	clz	r3, r3
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d105      	bne.n	8001c88 <HAL_ADC_ConfigChannel+0x264>
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	0e9b      	lsrs	r3, r3, #26
 8001c82:	f003 031f 	and.w	r3, r3, #31
 8001c86:	e018      	b.n	8001cba <HAL_ADC_ConfigChannel+0x296>
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001c94:	fa93 f3a3 	rbit	r3, r3
 8001c98:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001c9c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001ca0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001ca4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d101      	bne.n	8001cb0 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001cac:	2320      	movs	r3, #32
 8001cae:	e004      	b.n	8001cba <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001cb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001cb4:	fab3 f383 	clz	r3, r3
 8001cb8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d106      	bne.n	8001ccc <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff fa40 	bl	800114c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2102      	movs	r1, #2
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff fa24 	bl	8001120 <LL_ADC_GetOffsetChannel>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d10a      	bne.n	8001cf8 <HAL_ADC_ConfigChannel+0x2d4>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2102      	movs	r1, #2
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff fa19 	bl	8001120 <LL_ADC_GetOffsetChannel>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	0e9b      	lsrs	r3, r3, #26
 8001cf2:	f003 021f 	and.w	r2, r3, #31
 8001cf6:	e01e      	b.n	8001d36 <HAL_ADC_ConfigChannel+0x312>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2102      	movs	r1, #2
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff fa0e 	bl	8001120 <LL_ADC_GetOffsetChannel>
 8001d04:	4603      	mov	r3, r0
 8001d06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d0e:	fa93 f3a3 	rbit	r3, r3
 8001d12:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001d16:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001d1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001d26:	2320      	movs	r3, #32
 8001d28:	e004      	b.n	8001d34 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001d2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d2e:	fab3 f383 	clz	r3, r3
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d105      	bne.n	8001d4e <HAL_ADC_ConfigChannel+0x32a>
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	0e9b      	lsrs	r3, r3, #26
 8001d48:	f003 031f 	and.w	r3, r3, #31
 8001d4c:	e016      	b.n	8001d7c <HAL_ADC_ConfigChannel+0x358>
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d56:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d5a:	fa93 f3a3 	rbit	r3, r3
 8001d5e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001d60:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001d66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001d6e:	2320      	movs	r3, #32
 8001d70:	e004      	b.n	8001d7c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001d72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d76:	fab3 f383 	clz	r3, r3
 8001d7a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d106      	bne.n	8001d8e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2200      	movs	r2, #0
 8001d86:	2102      	movs	r1, #2
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff f9df 	bl	800114c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2103      	movs	r1, #3
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff f9c3 	bl	8001120 <LL_ADC_GetOffsetChannel>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d10a      	bne.n	8001dba <HAL_ADC_ConfigChannel+0x396>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2103      	movs	r1, #3
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7ff f9b8 	bl	8001120 <LL_ADC_GetOffsetChannel>
 8001db0:	4603      	mov	r3, r0
 8001db2:	0e9b      	lsrs	r3, r3, #26
 8001db4:	f003 021f 	and.w	r2, r3, #31
 8001db8:	e017      	b.n	8001dea <HAL_ADC_ConfigChannel+0x3c6>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2103      	movs	r1, #3
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff f9ad 	bl	8001120 <LL_ADC_GetOffsetChannel>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001dcc:	fa93 f3a3 	rbit	r3, r3
 8001dd0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001dd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001dd4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001dd6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d101      	bne.n	8001de0 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001ddc:	2320      	movs	r3, #32
 8001dde:	e003      	b.n	8001de8 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001de0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001de2:	fab3 f383 	clz	r3, r3
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d105      	bne.n	8001e02 <HAL_ADC_ConfigChannel+0x3de>
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	0e9b      	lsrs	r3, r3, #26
 8001dfc:	f003 031f 	and.w	r3, r3, #31
 8001e00:	e011      	b.n	8001e26 <HAL_ADC_ConfigChannel+0x402>
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e0a:	fa93 f3a3 	rbit	r3, r3
 8001e0e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001e10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e12:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001e14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001e1a:	2320      	movs	r3, #32
 8001e1c:	e003      	b.n	8001e26 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001e1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e20:	fab3 f383 	clz	r3, r3
 8001e24:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d106      	bne.n	8001e38 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	2103      	movs	r1, #3
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff f98a 	bl	800114c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff faad 	bl	800139c <LL_ADC_IsEnabled>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	f040 813f 	bne.w	80020c8 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6818      	ldr	r0, [r3, #0]
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	6819      	ldr	r1, [r3, #0]
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	461a      	mov	r2, r3
 8001e58:	f7ff f9fe 	bl	8001258 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	4a8e      	ldr	r2, [pc, #568]	; (800209c <HAL_ADC_ConfigChannel+0x678>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	f040 8130 	bne.w	80020c8 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d10b      	bne.n	8001e90 <HAL_ADC_ConfigChannel+0x46c>
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	0e9b      	lsrs	r3, r3, #26
 8001e7e:	3301      	adds	r3, #1
 8001e80:	f003 031f 	and.w	r3, r3, #31
 8001e84:	2b09      	cmp	r3, #9
 8001e86:	bf94      	ite	ls
 8001e88:	2301      	movls	r3, #1
 8001e8a:	2300      	movhi	r3, #0
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	e019      	b.n	8001ec4 <HAL_ADC_ConfigChannel+0x4a0>
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e98:	fa93 f3a3 	rbit	r3, r3
 8001e9c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001e9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ea0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001ea2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d101      	bne.n	8001eac <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001ea8:	2320      	movs	r3, #32
 8001eaa:	e003      	b.n	8001eb4 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001eac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001eae:	fab3 f383 	clz	r3, r3
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	f003 031f 	and.w	r3, r3, #31
 8001eba:	2b09      	cmp	r3, #9
 8001ebc:	bf94      	ite	ls
 8001ebe:	2301      	movls	r3, #1
 8001ec0:	2300      	movhi	r3, #0
 8001ec2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d079      	beq.n	8001fbc <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d107      	bne.n	8001ee4 <HAL_ADC_ConfigChannel+0x4c0>
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	0e9b      	lsrs	r3, r3, #26
 8001eda:	3301      	adds	r3, #1
 8001edc:	069b      	lsls	r3, r3, #26
 8001ede:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ee2:	e015      	b.n	8001f10 <HAL_ADC_ConfigChannel+0x4ec>
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001eec:	fa93 f3a3 	rbit	r3, r3
 8001ef0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001ef2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ef4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001ef6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d101      	bne.n	8001f00 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001efc:	2320      	movs	r3, #32
 8001efe:	e003      	b.n	8001f08 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001f00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f02:	fab3 f383 	clz	r3, r3
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	3301      	adds	r3, #1
 8001f0a:	069b      	lsls	r3, r3, #26
 8001f0c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d109      	bne.n	8001f30 <HAL_ADC_ConfigChannel+0x50c>
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	0e9b      	lsrs	r3, r3, #26
 8001f22:	3301      	adds	r3, #1
 8001f24:	f003 031f 	and.w	r3, r3, #31
 8001f28:	2101      	movs	r1, #1
 8001f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f2e:	e017      	b.n	8001f60 <HAL_ADC_ConfigChannel+0x53c>
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f38:	fa93 f3a3 	rbit	r3, r3
 8001f3c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001f3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f40:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001f42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d101      	bne.n	8001f4c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001f48:	2320      	movs	r3, #32
 8001f4a:	e003      	b.n	8001f54 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001f4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f4e:	fab3 f383 	clz	r3, r3
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	3301      	adds	r3, #1
 8001f56:	f003 031f 	and.w	r3, r3, #31
 8001f5a:	2101      	movs	r1, #1
 8001f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f60:	ea42 0103 	orr.w	r1, r2, r3
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d10a      	bne.n	8001f86 <HAL_ADC_ConfigChannel+0x562>
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	0e9b      	lsrs	r3, r3, #26
 8001f76:	3301      	adds	r3, #1
 8001f78:	f003 021f 	and.w	r2, r3, #31
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	4413      	add	r3, r2
 8001f82:	051b      	lsls	r3, r3, #20
 8001f84:	e018      	b.n	8001fb8 <HAL_ADC_ConfigChannel+0x594>
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f8e:	fa93 f3a3 	rbit	r3, r3
 8001f92:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f96:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001f98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d101      	bne.n	8001fa2 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001f9e:	2320      	movs	r3, #32
 8001fa0:	e003      	b.n	8001faa <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001fa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fa4:	fab3 f383 	clz	r3, r3
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	3301      	adds	r3, #1
 8001fac:	f003 021f 	and.w	r2, r3, #31
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	4413      	add	r3, r2
 8001fb6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fb8:	430b      	orrs	r3, r1
 8001fba:	e080      	b.n	80020be <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d107      	bne.n	8001fd8 <HAL_ADC_ConfigChannel+0x5b4>
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	0e9b      	lsrs	r3, r3, #26
 8001fce:	3301      	adds	r3, #1
 8001fd0:	069b      	lsls	r3, r3, #26
 8001fd2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fd6:	e015      	b.n	8002004 <HAL_ADC_ConfigChannel+0x5e0>
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fe0:	fa93 f3a3 	rbit	r3, r3
 8001fe4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d101      	bne.n	8001ff4 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001ff0:	2320      	movs	r3, #32
 8001ff2:	e003      	b.n	8001ffc <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ff6:	fab3 f383 	clz	r3, r3
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	069b      	lsls	r3, r3, #26
 8002000:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800200c:	2b00      	cmp	r3, #0
 800200e:	d109      	bne.n	8002024 <HAL_ADC_ConfigChannel+0x600>
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	0e9b      	lsrs	r3, r3, #26
 8002016:	3301      	adds	r3, #1
 8002018:	f003 031f 	and.w	r3, r3, #31
 800201c:	2101      	movs	r1, #1
 800201e:	fa01 f303 	lsl.w	r3, r1, r3
 8002022:	e017      	b.n	8002054 <HAL_ADC_ConfigChannel+0x630>
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202a:	6a3b      	ldr	r3, [r7, #32]
 800202c:	fa93 f3a3 	rbit	r3, r3
 8002030:	61fb      	str	r3, [r7, #28]
  return result;
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002038:	2b00      	cmp	r3, #0
 800203a:	d101      	bne.n	8002040 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 800203c:	2320      	movs	r3, #32
 800203e:	e003      	b.n	8002048 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002042:	fab3 f383 	clz	r3, r3
 8002046:	b2db      	uxtb	r3, r3
 8002048:	3301      	adds	r3, #1
 800204a:	f003 031f 	and.w	r3, r3, #31
 800204e:	2101      	movs	r1, #1
 8002050:	fa01 f303 	lsl.w	r3, r1, r3
 8002054:	ea42 0103 	orr.w	r1, r2, r3
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002060:	2b00      	cmp	r3, #0
 8002062:	d10d      	bne.n	8002080 <HAL_ADC_ConfigChannel+0x65c>
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	0e9b      	lsrs	r3, r3, #26
 800206a:	3301      	adds	r3, #1
 800206c:	f003 021f 	and.w	r2, r3, #31
 8002070:	4613      	mov	r3, r2
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	4413      	add	r3, r2
 8002076:	3b1e      	subs	r3, #30
 8002078:	051b      	lsls	r3, r3, #20
 800207a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800207e:	e01d      	b.n	80020bc <HAL_ADC_ConfigChannel+0x698>
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	fa93 f3a3 	rbit	r3, r3
 800208c:	613b      	str	r3, [r7, #16]
  return result;
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d103      	bne.n	80020a0 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002098:	2320      	movs	r3, #32
 800209a:	e005      	b.n	80020a8 <HAL_ADC_ConfigChannel+0x684>
 800209c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	fab3 f383 	clz	r3, r3
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	3301      	adds	r3, #1
 80020aa:	f003 021f 	and.w	r2, r3, #31
 80020ae:	4613      	mov	r3, r2
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	4413      	add	r3, r2
 80020b4:	3b1e      	subs	r3, #30
 80020b6:	051b      	lsls	r3, r3, #20
 80020b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020bc:	430b      	orrs	r3, r1
 80020be:	683a      	ldr	r2, [r7, #0]
 80020c0:	6892      	ldr	r2, [r2, #8]
 80020c2:	4619      	mov	r1, r3
 80020c4:	f7ff f89c 	bl	8001200 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	4b44      	ldr	r3, [pc, #272]	; (80021e0 <HAL_ADC_ConfigChannel+0x7bc>)
 80020ce:	4013      	ands	r3, r2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d07a      	beq.n	80021ca <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020d4:	4843      	ldr	r0, [pc, #268]	; (80021e4 <HAL_ADC_ConfigChannel+0x7c0>)
 80020d6:	f7fe fff1 	bl	80010bc <LL_ADC_GetCommonPathInternalCh>
 80020da:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a41      	ldr	r2, [pc, #260]	; (80021e8 <HAL_ADC_ConfigChannel+0x7c4>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d12c      	bne.n	8002142 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80020e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d126      	bne.n	8002142 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a3c      	ldr	r2, [pc, #240]	; (80021ec <HAL_ADC_ConfigChannel+0x7c8>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d004      	beq.n	8002108 <HAL_ADC_ConfigChannel+0x6e4>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a3b      	ldr	r2, [pc, #236]	; (80021f0 <HAL_ADC_ConfigChannel+0x7cc>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d15d      	bne.n	80021c4 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002108:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800210c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002110:	4619      	mov	r1, r3
 8002112:	4834      	ldr	r0, [pc, #208]	; (80021e4 <HAL_ADC_ConfigChannel+0x7c0>)
 8002114:	f7fe ffbf 	bl	8001096 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002118:	4b36      	ldr	r3, [pc, #216]	; (80021f4 <HAL_ADC_ConfigChannel+0x7d0>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	099b      	lsrs	r3, r3, #6
 800211e:	4a36      	ldr	r2, [pc, #216]	; (80021f8 <HAL_ADC_ConfigChannel+0x7d4>)
 8002120:	fba2 2303 	umull	r2, r3, r2, r3
 8002124:	099b      	lsrs	r3, r3, #6
 8002126:	1c5a      	adds	r2, r3, #1
 8002128:	4613      	mov	r3, r2
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	4413      	add	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002132:	e002      	b.n	800213a <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	3b01      	subs	r3, #1
 8002138:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d1f9      	bne.n	8002134 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002140:	e040      	b.n	80021c4 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a2d      	ldr	r2, [pc, #180]	; (80021fc <HAL_ADC_ConfigChannel+0x7d8>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d118      	bne.n	800217e <HAL_ADC_ConfigChannel+0x75a>
 800214c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002150:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d112      	bne.n	800217e <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a23      	ldr	r2, [pc, #140]	; (80021ec <HAL_ADC_ConfigChannel+0x7c8>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d004      	beq.n	800216c <HAL_ADC_ConfigChannel+0x748>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a22      	ldr	r2, [pc, #136]	; (80021f0 <HAL_ADC_ConfigChannel+0x7cc>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d12d      	bne.n	80021c8 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800216c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002170:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002174:	4619      	mov	r1, r3
 8002176:	481b      	ldr	r0, [pc, #108]	; (80021e4 <HAL_ADC_ConfigChannel+0x7c0>)
 8002178:	f7fe ff8d 	bl	8001096 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800217c:	e024      	b.n	80021c8 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a1f      	ldr	r2, [pc, #124]	; (8002200 <HAL_ADC_ConfigChannel+0x7dc>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d120      	bne.n	80021ca <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002188:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800218c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d11a      	bne.n	80021ca <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a14      	ldr	r2, [pc, #80]	; (80021ec <HAL_ADC_ConfigChannel+0x7c8>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d115      	bne.n	80021ca <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800219e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021a6:	4619      	mov	r1, r3
 80021a8:	480e      	ldr	r0, [pc, #56]	; (80021e4 <HAL_ADC_ConfigChannel+0x7c0>)
 80021aa:	f7fe ff74 	bl	8001096 <LL_ADC_SetCommonPathInternalCh>
 80021ae:	e00c      	b.n	80021ca <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021b4:	f043 0220 	orr.w	r2, r3, #32
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80021c2:	e002      	b.n	80021ca <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021c4:	bf00      	nop
 80021c6:	e000      	b.n	80021ca <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80021c8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80021d2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	37d8      	adds	r7, #216	; 0xd8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	80080000 	.word	0x80080000
 80021e4:	50040300 	.word	0x50040300
 80021e8:	c7520000 	.word	0xc7520000
 80021ec:	50040000 	.word	0x50040000
 80021f0:	50040200 	.word	0x50040200
 80021f4:	20000000 	.word	0x20000000
 80021f8:	053e2d63 	.word	0x053e2d63
 80021fc:	cb840000 	.word	0xcb840000
 8002200:	80000001 	.word	0x80000001

08002204 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff f8c3 	bl	800139c <LL_ADC_IsEnabled>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d14d      	bne.n	80022b8 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	689a      	ldr	r2, [r3, #8]
 8002222:	4b28      	ldr	r3, [pc, #160]	; (80022c4 <ADC_Enable+0xc0>)
 8002224:	4013      	ands	r3, r2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00d      	beq.n	8002246 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800222e:	f043 0210 	orr.w	r2, r3, #16
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800223a:	f043 0201 	orr.w	r2, r3, #1
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e039      	b.n	80022ba <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4618      	mov	r0, r3
 800224c:	f7ff f892 	bl	8001374 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002250:	f7fe fede 	bl	8001010 <HAL_GetTick>
 8002254:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002256:	e028      	b.n	80022aa <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff f89d 	bl	800139c <LL_ADC_IsEnabled>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d104      	bne.n	8002272 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff f881 	bl	8001374 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002272:	f7fe fecd 	bl	8001010 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d914      	bls.n	80022aa <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	2b01      	cmp	r3, #1
 800228c:	d00d      	beq.n	80022aa <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002292:	f043 0210 	orr.w	r2, r3, #16
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800229e:	f043 0201 	orr.w	r2, r3, #1
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e007      	b.n	80022ba <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0301 	and.w	r3, r3, #1
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d1cf      	bne.n	8002258 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	8000003f 	.word	0x8000003f

080022c8 <LL_ADC_IsEnabled>:
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d101      	bne.n	80022e0 <LL_ADC_IsEnabled+0x18>
 80022dc:	2301      	movs	r3, #1
 80022de:	e000      	b.n	80022e2 <LL_ADC_IsEnabled+0x1a>
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <LL_ADC_REG_IsConversionOngoing>:
{
 80022ee:	b480      	push	{r7}
 80022f0:	b083      	sub	sp, #12
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f003 0304 	and.w	r3, r3, #4
 80022fe:	2b04      	cmp	r3, #4
 8002300:	d101      	bne.n	8002306 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002302:	2301      	movs	r3, #1
 8002304:	e000      	b.n	8002308 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002314:	b590      	push	{r4, r7, lr}
 8002316:	b09f      	sub	sp, #124	; 0x7c
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800231e:	2300      	movs	r3, #0
 8002320:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800232a:	2b01      	cmp	r3, #1
 800232c:	d101      	bne.n	8002332 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800232e:	2302      	movs	r3, #2
 8002330:	e093      	b.n	800245a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2201      	movs	r2, #1
 8002336:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800233a:	2300      	movs	r3, #0
 800233c:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800233e:	2300      	movs	r3, #0
 8002340:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a47      	ldr	r2, [pc, #284]	; (8002464 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d102      	bne.n	8002352 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800234c:	4b46      	ldr	r3, [pc, #280]	; (8002468 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800234e:	60bb      	str	r3, [r7, #8]
 8002350:	e001      	b.n	8002356 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002352:	2300      	movs	r3, #0
 8002354:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d10b      	bne.n	8002374 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002360:	f043 0220 	orr.w	r2, r3, #32
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e072      	b.n	800245a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff ffb9 	bl	80022ee <LL_ADC_REG_IsConversionOngoing>
 800237c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff ffb3 	bl	80022ee <LL_ADC_REG_IsConversionOngoing>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d154      	bne.n	8002438 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800238e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002390:	2b00      	cmp	r3, #0
 8002392:	d151      	bne.n	8002438 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002394:	4b35      	ldr	r3, [pc, #212]	; (800246c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002396:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d02c      	beq.n	80023fa <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80023a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	6859      	ldr	r1, [r3, #4]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023b2:	035b      	lsls	r3, r3, #13
 80023b4:	430b      	orrs	r3, r1
 80023b6:	431a      	orrs	r2, r3
 80023b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023ba:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023bc:	4829      	ldr	r0, [pc, #164]	; (8002464 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80023be:	f7ff ff83 	bl	80022c8 <LL_ADC_IsEnabled>
 80023c2:	4604      	mov	r4, r0
 80023c4:	4828      	ldr	r0, [pc, #160]	; (8002468 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80023c6:	f7ff ff7f 	bl	80022c8 <LL_ADC_IsEnabled>
 80023ca:	4603      	mov	r3, r0
 80023cc:	431c      	orrs	r4, r3
 80023ce:	4828      	ldr	r0, [pc, #160]	; (8002470 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80023d0:	f7ff ff7a 	bl	80022c8 <LL_ADC_IsEnabled>
 80023d4:	4603      	mov	r3, r0
 80023d6:	4323      	orrs	r3, r4
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d137      	bne.n	800244c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80023dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80023e4:	f023 030f 	bic.w	r3, r3, #15
 80023e8:	683a      	ldr	r2, [r7, #0]
 80023ea:	6811      	ldr	r1, [r2, #0]
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	6892      	ldr	r2, [r2, #8]
 80023f0:	430a      	orrs	r2, r1
 80023f2:	431a      	orrs	r2, r3
 80023f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023f6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80023f8:	e028      	b.n	800244c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80023fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002402:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002404:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002406:	4817      	ldr	r0, [pc, #92]	; (8002464 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002408:	f7ff ff5e 	bl	80022c8 <LL_ADC_IsEnabled>
 800240c:	4604      	mov	r4, r0
 800240e:	4816      	ldr	r0, [pc, #88]	; (8002468 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002410:	f7ff ff5a 	bl	80022c8 <LL_ADC_IsEnabled>
 8002414:	4603      	mov	r3, r0
 8002416:	431c      	orrs	r4, r3
 8002418:	4815      	ldr	r0, [pc, #84]	; (8002470 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800241a:	f7ff ff55 	bl	80022c8 <LL_ADC_IsEnabled>
 800241e:	4603      	mov	r3, r0
 8002420:	4323      	orrs	r3, r4
 8002422:	2b00      	cmp	r3, #0
 8002424:	d112      	bne.n	800244c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002426:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800242e:	f023 030f 	bic.w	r3, r3, #15
 8002432:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002434:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002436:	e009      	b.n	800244c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800243c:	f043 0220 	orr.w	r2, r3, #32
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800244a:	e000      	b.n	800244e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800244c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002456:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800245a:	4618      	mov	r0, r3
 800245c:	377c      	adds	r7, #124	; 0x7c
 800245e:	46bd      	mov	sp, r7
 8002460:	bd90      	pop	{r4, r7, pc}
 8002462:	bf00      	nop
 8002464:	50040000 	.word	0x50040000
 8002468:	50040100 	.word	0x50040100
 800246c:	50040300 	.word	0x50040300
 8002470:	50040200 	.word	0x50040200

08002474 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f003 0307 	and.w	r3, r3, #7
 8002482:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002484:	4b0c      	ldr	r3, [pc, #48]	; (80024b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800248a:	68ba      	ldr	r2, [r7, #8]
 800248c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002490:	4013      	ands	r3, r2
 8002492:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800249c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024a6:	4a04      	ldr	r2, [pc, #16]	; (80024b8 <__NVIC_SetPriorityGrouping+0x44>)
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	60d3      	str	r3, [r2, #12]
}
 80024ac:	bf00      	nop
 80024ae:	3714      	adds	r7, #20
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr
 80024b8:	e000ed00 	.word	0xe000ed00

080024bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024c0:	4b04      	ldr	r3, [pc, #16]	; (80024d4 <__NVIC_GetPriorityGrouping+0x18>)
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	0a1b      	lsrs	r3, r3, #8
 80024c6:	f003 0307 	and.w	r3, r3, #7
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	e000ed00 	.word	0xe000ed00

080024d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	4603      	mov	r3, r0
 80024e0:	6039      	str	r1, [r7, #0]
 80024e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	db0a      	blt.n	8002502 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	b2da      	uxtb	r2, r3
 80024f0:	490c      	ldr	r1, [pc, #48]	; (8002524 <__NVIC_SetPriority+0x4c>)
 80024f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f6:	0112      	lsls	r2, r2, #4
 80024f8:	b2d2      	uxtb	r2, r2
 80024fa:	440b      	add	r3, r1
 80024fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002500:	e00a      	b.n	8002518 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	b2da      	uxtb	r2, r3
 8002506:	4908      	ldr	r1, [pc, #32]	; (8002528 <__NVIC_SetPriority+0x50>)
 8002508:	79fb      	ldrb	r3, [r7, #7]
 800250a:	f003 030f 	and.w	r3, r3, #15
 800250e:	3b04      	subs	r3, #4
 8002510:	0112      	lsls	r2, r2, #4
 8002512:	b2d2      	uxtb	r2, r2
 8002514:	440b      	add	r3, r1
 8002516:	761a      	strb	r2, [r3, #24]
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr
 8002524:	e000e100 	.word	0xe000e100
 8002528:	e000ed00 	.word	0xe000ed00

0800252c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800252c:	b480      	push	{r7}
 800252e:	b089      	sub	sp, #36	; 0x24
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f003 0307 	and.w	r3, r3, #7
 800253e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	f1c3 0307 	rsb	r3, r3, #7
 8002546:	2b04      	cmp	r3, #4
 8002548:	bf28      	it	cs
 800254a:	2304      	movcs	r3, #4
 800254c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	3304      	adds	r3, #4
 8002552:	2b06      	cmp	r3, #6
 8002554:	d902      	bls.n	800255c <NVIC_EncodePriority+0x30>
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	3b03      	subs	r3, #3
 800255a:	e000      	b.n	800255e <NVIC_EncodePriority+0x32>
 800255c:	2300      	movs	r3, #0
 800255e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002560:	f04f 32ff 	mov.w	r2, #4294967295
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	43da      	mvns	r2, r3
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	401a      	ands	r2, r3
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002574:	f04f 31ff 	mov.w	r1, #4294967295
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	fa01 f303 	lsl.w	r3, r1, r3
 800257e:	43d9      	mvns	r1, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002584:	4313      	orrs	r3, r2
         );
}
 8002586:	4618      	mov	r0, r3
 8002588:	3724      	adds	r7, #36	; 0x24
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
	...

08002594 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	3b01      	subs	r3, #1
 80025a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025a4:	d301      	bcc.n	80025aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025a6:	2301      	movs	r3, #1
 80025a8:	e00f      	b.n	80025ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025aa:	4a0a      	ldr	r2, [pc, #40]	; (80025d4 <SysTick_Config+0x40>)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	3b01      	subs	r3, #1
 80025b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025b2:	210f      	movs	r1, #15
 80025b4:	f04f 30ff 	mov.w	r0, #4294967295
 80025b8:	f7ff ff8e 	bl	80024d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025bc:	4b05      	ldr	r3, [pc, #20]	; (80025d4 <SysTick_Config+0x40>)
 80025be:	2200      	movs	r2, #0
 80025c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025c2:	4b04      	ldr	r3, [pc, #16]	; (80025d4 <SysTick_Config+0x40>)
 80025c4:	2207      	movs	r2, #7
 80025c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	e000e010 	.word	0xe000e010

080025d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f7ff ff47 	bl	8002474 <__NVIC_SetPriorityGrouping>
}
 80025e6:	bf00      	nop
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b086      	sub	sp, #24
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	4603      	mov	r3, r0
 80025f6:	60b9      	str	r1, [r7, #8]
 80025f8:	607a      	str	r2, [r7, #4]
 80025fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80025fc:	2300      	movs	r3, #0
 80025fe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002600:	f7ff ff5c 	bl	80024bc <__NVIC_GetPriorityGrouping>
 8002604:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	68b9      	ldr	r1, [r7, #8]
 800260a:	6978      	ldr	r0, [r7, #20]
 800260c:	f7ff ff8e 	bl	800252c <NVIC_EncodePriority>
 8002610:	4602      	mov	r2, r0
 8002612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002616:	4611      	mov	r1, r2
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff ff5d 	bl	80024d8 <__NVIC_SetPriority>
}
 800261e:	bf00      	nop
 8002620:	3718      	adds	r7, #24
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002626:	b580      	push	{r7, lr}
 8002628:	b082      	sub	sp, #8
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f7ff ffb0 	bl	8002594 <SysTick_Config>
 8002634:	4603      	mov	r3, r0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
	...

08002640 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002640:	b480      	push	{r7}
 8002642:	b087      	sub	sp, #28
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800264a:	2300      	movs	r3, #0
 800264c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800264e:	e17f      	b.n	8002950 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	2101      	movs	r1, #1
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	fa01 f303 	lsl.w	r3, r1, r3
 800265c:	4013      	ands	r3, r2
 800265e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2b00      	cmp	r3, #0
 8002664:	f000 8171 	beq.w	800294a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f003 0303 	and.w	r3, r3, #3
 8002670:	2b01      	cmp	r3, #1
 8002672:	d005      	beq.n	8002680 <HAL_GPIO_Init+0x40>
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f003 0303 	and.w	r3, r3, #3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d130      	bne.n	80026e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	2203      	movs	r2, #3
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	43db      	mvns	r3, r3
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	4013      	ands	r3, r2
 8002696:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	68da      	ldr	r2, [r3, #12]
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026b6:	2201      	movs	r2, #1
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	fa02 f303 	lsl.w	r3, r2, r3
 80026be:	43db      	mvns	r3, r3
 80026c0:	693a      	ldr	r2, [r7, #16]
 80026c2:	4013      	ands	r3, r2
 80026c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	091b      	lsrs	r3, r3, #4
 80026cc:	f003 0201 	and.w	r2, r3, #1
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	4313      	orrs	r3, r2
 80026da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f003 0303 	and.w	r3, r3, #3
 80026ea:	2b03      	cmp	r3, #3
 80026ec:	d118      	bne.n	8002720 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80026f4:	2201      	movs	r2, #1
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	43db      	mvns	r3, r3
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	4013      	ands	r3, r2
 8002702:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	08db      	lsrs	r3, r3, #3
 800270a:	f003 0201 	and.w	r2, r3, #1
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	4313      	orrs	r3, r2
 8002718:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f003 0303 	and.w	r3, r3, #3
 8002728:	2b03      	cmp	r3, #3
 800272a:	d017      	beq.n	800275c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	2203      	movs	r2, #3
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	43db      	mvns	r3, r3
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	4013      	ands	r3, r2
 8002742:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	4313      	orrs	r3, r2
 8002754:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f003 0303 	and.w	r3, r3, #3
 8002764:	2b02      	cmp	r3, #2
 8002766:	d123      	bne.n	80027b0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	08da      	lsrs	r2, r3, #3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	3208      	adds	r2, #8
 8002770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002774:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	f003 0307 	and.w	r3, r3, #7
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	220f      	movs	r2, #15
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	43db      	mvns	r3, r3
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	4013      	ands	r3, r2
 800278a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	691a      	ldr	r2, [r3, #16]
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	f003 0307 	and.w	r3, r3, #7
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	4313      	orrs	r3, r2
 80027a0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	08da      	lsrs	r2, r3, #3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	3208      	adds	r2, #8
 80027aa:	6939      	ldr	r1, [r7, #16]
 80027ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	2203      	movs	r2, #3
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	43db      	mvns	r3, r3
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	4013      	ands	r3, r2
 80027c6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f003 0203 	and.w	r2, r3, #3
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	693a      	ldr	r2, [r7, #16]
 80027da:	4313      	orrs	r3, r2
 80027dc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f000 80ac 	beq.w	800294a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027f2:	4b5f      	ldr	r3, [pc, #380]	; (8002970 <HAL_GPIO_Init+0x330>)
 80027f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027f6:	4a5e      	ldr	r2, [pc, #376]	; (8002970 <HAL_GPIO_Init+0x330>)
 80027f8:	f043 0301 	orr.w	r3, r3, #1
 80027fc:	6613      	str	r3, [r2, #96]	; 0x60
 80027fe:	4b5c      	ldr	r3, [pc, #368]	; (8002970 <HAL_GPIO_Init+0x330>)
 8002800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	60bb      	str	r3, [r7, #8]
 8002808:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800280a:	4a5a      	ldr	r2, [pc, #360]	; (8002974 <HAL_GPIO_Init+0x334>)
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	089b      	lsrs	r3, r3, #2
 8002810:	3302      	adds	r3, #2
 8002812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002816:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	f003 0303 	and.w	r3, r3, #3
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	220f      	movs	r2, #15
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	43db      	mvns	r3, r3
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	4013      	ands	r3, r2
 800282c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002834:	d025      	beq.n	8002882 <HAL_GPIO_Init+0x242>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a4f      	ldr	r2, [pc, #316]	; (8002978 <HAL_GPIO_Init+0x338>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d01f      	beq.n	800287e <HAL_GPIO_Init+0x23e>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a4e      	ldr	r2, [pc, #312]	; (800297c <HAL_GPIO_Init+0x33c>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d019      	beq.n	800287a <HAL_GPIO_Init+0x23a>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a4d      	ldr	r2, [pc, #308]	; (8002980 <HAL_GPIO_Init+0x340>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d013      	beq.n	8002876 <HAL_GPIO_Init+0x236>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a4c      	ldr	r2, [pc, #304]	; (8002984 <HAL_GPIO_Init+0x344>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d00d      	beq.n	8002872 <HAL_GPIO_Init+0x232>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a4b      	ldr	r2, [pc, #300]	; (8002988 <HAL_GPIO_Init+0x348>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d007      	beq.n	800286e <HAL_GPIO_Init+0x22e>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a4a      	ldr	r2, [pc, #296]	; (800298c <HAL_GPIO_Init+0x34c>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d101      	bne.n	800286a <HAL_GPIO_Init+0x22a>
 8002866:	2306      	movs	r3, #6
 8002868:	e00c      	b.n	8002884 <HAL_GPIO_Init+0x244>
 800286a:	2307      	movs	r3, #7
 800286c:	e00a      	b.n	8002884 <HAL_GPIO_Init+0x244>
 800286e:	2305      	movs	r3, #5
 8002870:	e008      	b.n	8002884 <HAL_GPIO_Init+0x244>
 8002872:	2304      	movs	r3, #4
 8002874:	e006      	b.n	8002884 <HAL_GPIO_Init+0x244>
 8002876:	2303      	movs	r3, #3
 8002878:	e004      	b.n	8002884 <HAL_GPIO_Init+0x244>
 800287a:	2302      	movs	r3, #2
 800287c:	e002      	b.n	8002884 <HAL_GPIO_Init+0x244>
 800287e:	2301      	movs	r3, #1
 8002880:	e000      	b.n	8002884 <HAL_GPIO_Init+0x244>
 8002882:	2300      	movs	r3, #0
 8002884:	697a      	ldr	r2, [r7, #20]
 8002886:	f002 0203 	and.w	r2, r2, #3
 800288a:	0092      	lsls	r2, r2, #2
 800288c:	4093      	lsls	r3, r2
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	4313      	orrs	r3, r2
 8002892:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002894:	4937      	ldr	r1, [pc, #220]	; (8002974 <HAL_GPIO_Init+0x334>)
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	089b      	lsrs	r3, r3, #2
 800289a:	3302      	adds	r3, #2
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028a2:	4b3b      	ldr	r3, [pc, #236]	; (8002990 <HAL_GPIO_Init+0x350>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	43db      	mvns	r3, r3
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	4013      	ands	r3, r2
 80028b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d003      	beq.n	80028c6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80028c6:	4a32      	ldr	r2, [pc, #200]	; (8002990 <HAL_GPIO_Init+0x350>)
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80028cc:	4b30      	ldr	r3, [pc, #192]	; (8002990 <HAL_GPIO_Init+0x350>)
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	43db      	mvns	r3, r3
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	4013      	ands	r3, r2
 80028da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d003      	beq.n	80028f0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80028f0:	4a27      	ldr	r2, [pc, #156]	; (8002990 <HAL_GPIO_Init+0x350>)
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80028f6:	4b26      	ldr	r3, [pc, #152]	; (8002990 <HAL_GPIO_Init+0x350>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	43db      	mvns	r3, r3
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	4013      	ands	r3, r2
 8002904:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d003      	beq.n	800291a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	4313      	orrs	r3, r2
 8002918:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800291a:	4a1d      	ldr	r2, [pc, #116]	; (8002990 <HAL_GPIO_Init+0x350>)
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002920:	4b1b      	ldr	r3, [pc, #108]	; (8002990 <HAL_GPIO_Init+0x350>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	43db      	mvns	r3, r3
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	4013      	ands	r3, r2
 800292e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d003      	beq.n	8002944 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	4313      	orrs	r3, r2
 8002942:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002944:	4a12      	ldr	r2, [pc, #72]	; (8002990 <HAL_GPIO_Init+0x350>)
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	3301      	adds	r3, #1
 800294e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	fa22 f303 	lsr.w	r3, r2, r3
 800295a:	2b00      	cmp	r3, #0
 800295c:	f47f ae78 	bne.w	8002650 <HAL_GPIO_Init+0x10>
  }
}
 8002960:	bf00      	nop
 8002962:	bf00      	nop
 8002964:	371c      	adds	r7, #28
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	40021000 	.word	0x40021000
 8002974:	40010000 	.word	0x40010000
 8002978:	48000400 	.word	0x48000400
 800297c:	48000800 	.word	0x48000800
 8002980:	48000c00 	.word	0x48000c00
 8002984:	48001000 	.word	0x48001000
 8002988:	48001400 	.word	0x48001400
 800298c:	48001800 	.word	0x48001800
 8002990:	40010400 	.word	0x40010400

08002994 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	460b      	mov	r3, r1
 800299e:	807b      	strh	r3, [r7, #2]
 80029a0:	4613      	mov	r3, r2
 80029a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029a4:	787b      	ldrb	r3, [r7, #1]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d003      	beq.n	80029b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029aa:	887a      	ldrh	r2, [r7, #2]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029b0:	e002      	b.n	80029b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029b2:	887a      	ldrh	r2, [r7, #2]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	460b      	mov	r3, r1
 80029ce:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	695b      	ldr	r3, [r3, #20]
 80029d4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80029d6:	887a      	ldrh	r2, [r7, #2]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	4013      	ands	r3, r2
 80029dc:	041a      	lsls	r2, r3, #16
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	43d9      	mvns	r1, r3
 80029e2:	887b      	ldrh	r3, [r7, #2]
 80029e4:	400b      	ands	r3, r1
 80029e6:	431a      	orrs	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	619a      	str	r2, [r3, #24]
}
 80029ec:	bf00      	nop
 80029ee:	3714      	adds	r7, #20
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80029fc:	4b04      	ldr	r3, [pc, #16]	; (8002a10 <HAL_PWREx_GetVoltageRange+0x18>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	40007000 	.word	0x40007000

08002a14 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a22:	d130      	bne.n	8002a86 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a24:	4b23      	ldr	r3, [pc, #140]	; (8002ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a30:	d038      	beq.n	8002aa4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a32:	4b20      	ldr	r3, [pc, #128]	; (8002ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a3a:	4a1e      	ldr	r2, [pc, #120]	; (8002ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a40:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a42:	4b1d      	ldr	r3, [pc, #116]	; (8002ab8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2232      	movs	r2, #50	; 0x32
 8002a48:	fb02 f303 	mul.w	r3, r2, r3
 8002a4c:	4a1b      	ldr	r2, [pc, #108]	; (8002abc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a52:	0c9b      	lsrs	r3, r3, #18
 8002a54:	3301      	adds	r3, #1
 8002a56:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a58:	e002      	b.n	8002a60 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a60:	4b14      	ldr	r3, [pc, #80]	; (8002ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a62:	695b      	ldr	r3, [r3, #20]
 8002a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a6c:	d102      	bne.n	8002a74 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1f2      	bne.n	8002a5a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a74:	4b0f      	ldr	r3, [pc, #60]	; (8002ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a76:	695b      	ldr	r3, [r3, #20]
 8002a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a80:	d110      	bne.n	8002aa4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e00f      	b.n	8002aa6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a86:	4b0b      	ldr	r3, [pc, #44]	; (8002ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a92:	d007      	beq.n	8002aa4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a94:	4b07      	ldr	r3, [pc, #28]	; (8002ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a9c:	4a05      	ldr	r2, [pc, #20]	; (8002ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002aa2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3714      	adds	r7, #20
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	40007000 	.word	0x40007000
 8002ab8:	20000000 	.word	0x20000000
 8002abc:	431bde83 	.word	0x431bde83

08002ac0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b088      	sub	sp, #32
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e3d4      	b.n	800327c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ad2:	4ba1      	ldr	r3, [pc, #644]	; (8002d58 <HAL_RCC_OscConfig+0x298>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 030c 	and.w	r3, r3, #12
 8002ada:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002adc:	4b9e      	ldr	r3, [pc, #632]	; (8002d58 <HAL_RCC_OscConfig+0x298>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	f003 0303 	and.w	r3, r3, #3
 8002ae4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0310 	and.w	r3, r3, #16
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f000 80e4 	beq.w	8002cbc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d007      	beq.n	8002b0a <HAL_RCC_OscConfig+0x4a>
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	2b0c      	cmp	r3, #12
 8002afe:	f040 808b 	bne.w	8002c18 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	f040 8087 	bne.w	8002c18 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b0a:	4b93      	ldr	r3, [pc, #588]	; (8002d58 <HAL_RCC_OscConfig+0x298>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d005      	beq.n	8002b22 <HAL_RCC_OscConfig+0x62>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e3ac      	b.n	800327c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a1a      	ldr	r2, [r3, #32]
 8002b26:	4b8c      	ldr	r3, [pc, #560]	; (8002d58 <HAL_RCC_OscConfig+0x298>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0308 	and.w	r3, r3, #8
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d004      	beq.n	8002b3c <HAL_RCC_OscConfig+0x7c>
 8002b32:	4b89      	ldr	r3, [pc, #548]	; (8002d58 <HAL_RCC_OscConfig+0x298>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b3a:	e005      	b.n	8002b48 <HAL_RCC_OscConfig+0x88>
 8002b3c:	4b86      	ldr	r3, [pc, #536]	; (8002d58 <HAL_RCC_OscConfig+0x298>)
 8002b3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b42:	091b      	lsrs	r3, r3, #4
 8002b44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d223      	bcs.n	8002b94 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a1b      	ldr	r3, [r3, #32]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f000 fd41 	bl	80035d8 <RCC_SetFlashLatencyFromMSIRange>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e38d      	b.n	800327c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b60:	4b7d      	ldr	r3, [pc, #500]	; (8002d58 <HAL_RCC_OscConfig+0x298>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a7c      	ldr	r2, [pc, #496]	; (8002d58 <HAL_RCC_OscConfig+0x298>)
 8002b66:	f043 0308 	orr.w	r3, r3, #8
 8002b6a:	6013      	str	r3, [r2, #0]
 8002b6c:	4b7a      	ldr	r3, [pc, #488]	; (8002d58 <HAL_RCC_OscConfig+0x298>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a1b      	ldr	r3, [r3, #32]
 8002b78:	4977      	ldr	r1, [pc, #476]	; (8002d58 <HAL_RCC_OscConfig+0x298>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b7e:	4b76      	ldr	r3, [pc, #472]	; (8002d58 <HAL_RCC_OscConfig+0x298>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	69db      	ldr	r3, [r3, #28]
 8002b8a:	021b      	lsls	r3, r3, #8
 8002b8c:	4972      	ldr	r1, [pc, #456]	; (8002d58 <HAL_RCC_OscConfig+0x298>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	604b      	str	r3, [r1, #4]
 8002b92:	e025      	b.n	8002be0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b94:	4b70      	ldr	r3, [pc, #448]	; (8002d58 <HAL_RCC_OscConfig+0x298>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a6f      	ldr	r2, [pc, #444]	; (8002d58 <HAL_RCC_OscConfig+0x298>)
 8002b9a:	f043 0308 	orr.w	r3, r3, #8
 8002b9e:	6013      	str	r3, [r2, #0]
 8002ba0:	4b6d      	ldr	r3, [pc, #436]	; (8002d58 <HAL_RCC_OscConfig+0x298>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	496a      	ldr	r1, [pc, #424]	; (8002d58 <HAL_RCC_OscConfig+0x298>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bb2:	4b69      	ldr	r3, [pc, #420]	; (8002d58 <HAL_RCC_OscConfig+0x298>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	69db      	ldr	r3, [r3, #28]
 8002bbe:	021b      	lsls	r3, r3, #8
 8002bc0:	4965      	ldr	r1, [pc, #404]	; (8002d58 <HAL_RCC_OscConfig+0x298>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d109      	bne.n	8002be0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a1b      	ldr	r3, [r3, #32]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f000 fd01 	bl	80035d8 <RCC_SetFlashLatencyFromMSIRange>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e34d      	b.n	800327c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002be0:	f000 fc36 	bl	8003450 <HAL_RCC_GetSysClockFreq>
 8002be4:	4602      	mov	r2, r0
 8002be6:	4b5c      	ldr	r3, [pc, #368]	; (8002d58 <HAL_RCC_OscConfig+0x298>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	091b      	lsrs	r3, r3, #4
 8002bec:	f003 030f 	and.w	r3, r3, #15
 8002bf0:	495a      	ldr	r1, [pc, #360]	; (8002d5c <HAL_RCC_OscConfig+0x29c>)
 8002bf2:	5ccb      	ldrb	r3, [r1, r3]
 8002bf4:	f003 031f 	and.w	r3, r3, #31
 8002bf8:	fa22 f303 	lsr.w	r3, r2, r3
 8002bfc:	4a58      	ldr	r2, [pc, #352]	; (8002d60 <HAL_RCC_OscConfig+0x2a0>)
 8002bfe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002c00:	4b58      	ldr	r3, [pc, #352]	; (8002d64 <HAL_RCC_OscConfig+0x2a4>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7fe f9b3 	bl	8000f70 <HAL_InitTick>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002c0e:	7bfb      	ldrb	r3, [r7, #15]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d052      	beq.n	8002cba <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002c14:	7bfb      	ldrb	r3, [r7, #15]
 8002c16:	e331      	b.n	800327c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d032      	beq.n	8002c86 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002c20:	4b4d      	ldr	r3, [pc, #308]	; (8002d58 <HAL_RCC_OscConfig+0x298>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a4c      	ldr	r2, [pc, #304]	; (8002d58 <HAL_RCC_OscConfig+0x298>)
 8002c26:	f043 0301 	orr.w	r3, r3, #1
 8002c2a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c2c:	f7fe f9f0 	bl	8001010 <HAL_GetTick>
 8002c30:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c34:	f7fe f9ec 	bl	8001010 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e31a      	b.n	800327c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c46:	4b44      	ldr	r3, [pc, #272]	; (8002d58 <HAL_RCC_OscConfig+0x298>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d0f0      	beq.n	8002c34 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c52:	4b41      	ldr	r3, [pc, #260]	; (8002d58 <HAL_RCC_OscConfig+0x298>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a40      	ldr	r2, [pc, #256]	; (8002d58 <HAL_RCC_OscConfig+0x298>)
 8002c58:	f043 0308 	orr.w	r3, r3, #8
 8002c5c:	6013      	str	r3, [r2, #0]
 8002c5e:	4b3e      	ldr	r3, [pc, #248]	; (8002d58 <HAL_RCC_OscConfig+0x298>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a1b      	ldr	r3, [r3, #32]
 8002c6a:	493b      	ldr	r1, [pc, #236]	; (8002d58 <HAL_RCC_OscConfig+0x298>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c70:	4b39      	ldr	r3, [pc, #228]	; (8002d58 <HAL_RCC_OscConfig+0x298>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	69db      	ldr	r3, [r3, #28]
 8002c7c:	021b      	lsls	r3, r3, #8
 8002c7e:	4936      	ldr	r1, [pc, #216]	; (8002d58 <HAL_RCC_OscConfig+0x298>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	604b      	str	r3, [r1, #4]
 8002c84:	e01a      	b.n	8002cbc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c86:	4b34      	ldr	r3, [pc, #208]	; (8002d58 <HAL_RCC_OscConfig+0x298>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a33      	ldr	r2, [pc, #204]	; (8002d58 <HAL_RCC_OscConfig+0x298>)
 8002c8c:	f023 0301 	bic.w	r3, r3, #1
 8002c90:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c92:	f7fe f9bd 	bl	8001010 <HAL_GetTick>
 8002c96:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c98:	e008      	b.n	8002cac <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c9a:	f7fe f9b9 	bl	8001010 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d901      	bls.n	8002cac <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e2e7      	b.n	800327c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002cac:	4b2a      	ldr	r3, [pc, #168]	; (8002d58 <HAL_RCC_OscConfig+0x298>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d1f0      	bne.n	8002c9a <HAL_RCC_OscConfig+0x1da>
 8002cb8:	e000      	b.n	8002cbc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002cba:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0301 	and.w	r3, r3, #1
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d074      	beq.n	8002db2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	2b08      	cmp	r3, #8
 8002ccc:	d005      	beq.n	8002cda <HAL_RCC_OscConfig+0x21a>
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	2b0c      	cmp	r3, #12
 8002cd2:	d10e      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	2b03      	cmp	r3, #3
 8002cd8:	d10b      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cda:	4b1f      	ldr	r3, [pc, #124]	; (8002d58 <HAL_RCC_OscConfig+0x298>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d064      	beq.n	8002db0 <HAL_RCC_OscConfig+0x2f0>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d160      	bne.n	8002db0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e2c4      	b.n	800327c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cfa:	d106      	bne.n	8002d0a <HAL_RCC_OscConfig+0x24a>
 8002cfc:	4b16      	ldr	r3, [pc, #88]	; (8002d58 <HAL_RCC_OscConfig+0x298>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a15      	ldr	r2, [pc, #84]	; (8002d58 <HAL_RCC_OscConfig+0x298>)
 8002d02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d06:	6013      	str	r3, [r2, #0]
 8002d08:	e01d      	b.n	8002d46 <HAL_RCC_OscConfig+0x286>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d12:	d10c      	bne.n	8002d2e <HAL_RCC_OscConfig+0x26e>
 8002d14:	4b10      	ldr	r3, [pc, #64]	; (8002d58 <HAL_RCC_OscConfig+0x298>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a0f      	ldr	r2, [pc, #60]	; (8002d58 <HAL_RCC_OscConfig+0x298>)
 8002d1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d1e:	6013      	str	r3, [r2, #0]
 8002d20:	4b0d      	ldr	r3, [pc, #52]	; (8002d58 <HAL_RCC_OscConfig+0x298>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a0c      	ldr	r2, [pc, #48]	; (8002d58 <HAL_RCC_OscConfig+0x298>)
 8002d26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d2a:	6013      	str	r3, [r2, #0]
 8002d2c:	e00b      	b.n	8002d46 <HAL_RCC_OscConfig+0x286>
 8002d2e:	4b0a      	ldr	r3, [pc, #40]	; (8002d58 <HAL_RCC_OscConfig+0x298>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a09      	ldr	r2, [pc, #36]	; (8002d58 <HAL_RCC_OscConfig+0x298>)
 8002d34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d38:	6013      	str	r3, [r2, #0]
 8002d3a:	4b07      	ldr	r3, [pc, #28]	; (8002d58 <HAL_RCC_OscConfig+0x298>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a06      	ldr	r2, [pc, #24]	; (8002d58 <HAL_RCC_OscConfig+0x298>)
 8002d40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d44:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d01c      	beq.n	8002d88 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d4e:	f7fe f95f 	bl	8001010 <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d54:	e011      	b.n	8002d7a <HAL_RCC_OscConfig+0x2ba>
 8002d56:	bf00      	nop
 8002d58:	40021000 	.word	0x40021000
 8002d5c:	08006a78 	.word	0x08006a78
 8002d60:	20000000 	.word	0x20000000
 8002d64:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d68:	f7fe f952 	bl	8001010 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b64      	cmp	r3, #100	; 0x64
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e280      	b.n	800327c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d7a:	4baf      	ldr	r3, [pc, #700]	; (8003038 <HAL_RCC_OscConfig+0x578>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d0f0      	beq.n	8002d68 <HAL_RCC_OscConfig+0x2a8>
 8002d86:	e014      	b.n	8002db2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d88:	f7fe f942 	bl	8001010 <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d90:	f7fe f93e 	bl	8001010 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b64      	cmp	r3, #100	; 0x64
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e26c      	b.n	800327c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002da2:	4ba5      	ldr	r3, [pc, #660]	; (8003038 <HAL_RCC_OscConfig+0x578>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1f0      	bne.n	8002d90 <HAL_RCC_OscConfig+0x2d0>
 8002dae:	e000      	b.n	8002db2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d060      	beq.n	8002e80 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	2b04      	cmp	r3, #4
 8002dc2:	d005      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x310>
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	2b0c      	cmp	r3, #12
 8002dc8:	d119      	bne.n	8002dfe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d116      	bne.n	8002dfe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dd0:	4b99      	ldr	r3, [pc, #612]	; (8003038 <HAL_RCC_OscConfig+0x578>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d005      	beq.n	8002de8 <HAL_RCC_OscConfig+0x328>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d101      	bne.n	8002de8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e249      	b.n	800327c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002de8:	4b93      	ldr	r3, [pc, #588]	; (8003038 <HAL_RCC_OscConfig+0x578>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	061b      	lsls	r3, r3, #24
 8002df6:	4990      	ldr	r1, [pc, #576]	; (8003038 <HAL_RCC_OscConfig+0x578>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dfc:	e040      	b.n	8002e80 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d023      	beq.n	8002e4e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e06:	4b8c      	ldr	r3, [pc, #560]	; (8003038 <HAL_RCC_OscConfig+0x578>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a8b      	ldr	r2, [pc, #556]	; (8003038 <HAL_RCC_OscConfig+0x578>)
 8002e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e12:	f7fe f8fd 	bl	8001010 <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e18:	e008      	b.n	8002e2c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e1a:	f7fe f8f9 	bl	8001010 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e227      	b.n	800327c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e2c:	4b82      	ldr	r3, [pc, #520]	; (8003038 <HAL_RCC_OscConfig+0x578>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0f0      	beq.n	8002e1a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e38:	4b7f      	ldr	r3, [pc, #508]	; (8003038 <HAL_RCC_OscConfig+0x578>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	691b      	ldr	r3, [r3, #16]
 8002e44:	061b      	lsls	r3, r3, #24
 8002e46:	497c      	ldr	r1, [pc, #496]	; (8003038 <HAL_RCC_OscConfig+0x578>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	604b      	str	r3, [r1, #4]
 8002e4c:	e018      	b.n	8002e80 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e4e:	4b7a      	ldr	r3, [pc, #488]	; (8003038 <HAL_RCC_OscConfig+0x578>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a79      	ldr	r2, [pc, #484]	; (8003038 <HAL_RCC_OscConfig+0x578>)
 8002e54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e5a:	f7fe f8d9 	bl	8001010 <HAL_GetTick>
 8002e5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e60:	e008      	b.n	8002e74 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e62:	f7fe f8d5 	bl	8001010 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d901      	bls.n	8002e74 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e203      	b.n	800327c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e74:	4b70      	ldr	r3, [pc, #448]	; (8003038 <HAL_RCC_OscConfig+0x578>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1f0      	bne.n	8002e62 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0308 	and.w	r3, r3, #8
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d03c      	beq.n	8002f06 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	695b      	ldr	r3, [r3, #20]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d01c      	beq.n	8002ece <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e94:	4b68      	ldr	r3, [pc, #416]	; (8003038 <HAL_RCC_OscConfig+0x578>)
 8002e96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e9a:	4a67      	ldr	r2, [pc, #412]	; (8003038 <HAL_RCC_OscConfig+0x578>)
 8002e9c:	f043 0301 	orr.w	r3, r3, #1
 8002ea0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea4:	f7fe f8b4 	bl	8001010 <HAL_GetTick>
 8002ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eac:	f7fe f8b0 	bl	8001010 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e1de      	b.n	800327c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ebe:	4b5e      	ldr	r3, [pc, #376]	; (8003038 <HAL_RCC_OscConfig+0x578>)
 8002ec0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d0ef      	beq.n	8002eac <HAL_RCC_OscConfig+0x3ec>
 8002ecc:	e01b      	b.n	8002f06 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ece:	4b5a      	ldr	r3, [pc, #360]	; (8003038 <HAL_RCC_OscConfig+0x578>)
 8002ed0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ed4:	4a58      	ldr	r2, [pc, #352]	; (8003038 <HAL_RCC_OscConfig+0x578>)
 8002ed6:	f023 0301 	bic.w	r3, r3, #1
 8002eda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ede:	f7fe f897 	bl	8001010 <HAL_GetTick>
 8002ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ee4:	e008      	b.n	8002ef8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ee6:	f7fe f893 	bl	8001010 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d901      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e1c1      	b.n	800327c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ef8:	4b4f      	ldr	r3, [pc, #316]	; (8003038 <HAL_RCC_OscConfig+0x578>)
 8002efa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1ef      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0304 	and.w	r3, r3, #4
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f000 80a6 	beq.w	8003060 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f14:	2300      	movs	r3, #0
 8002f16:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002f18:	4b47      	ldr	r3, [pc, #284]	; (8003038 <HAL_RCC_OscConfig+0x578>)
 8002f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d10d      	bne.n	8002f40 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f24:	4b44      	ldr	r3, [pc, #272]	; (8003038 <HAL_RCC_OscConfig+0x578>)
 8002f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f28:	4a43      	ldr	r2, [pc, #268]	; (8003038 <HAL_RCC_OscConfig+0x578>)
 8002f2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f2e:	6593      	str	r3, [r2, #88]	; 0x58
 8002f30:	4b41      	ldr	r3, [pc, #260]	; (8003038 <HAL_RCC_OscConfig+0x578>)
 8002f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f38:	60bb      	str	r3, [r7, #8]
 8002f3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f40:	4b3e      	ldr	r3, [pc, #248]	; (800303c <HAL_RCC_OscConfig+0x57c>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d118      	bne.n	8002f7e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f4c:	4b3b      	ldr	r3, [pc, #236]	; (800303c <HAL_RCC_OscConfig+0x57c>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a3a      	ldr	r2, [pc, #232]	; (800303c <HAL_RCC_OscConfig+0x57c>)
 8002f52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f56:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f58:	f7fe f85a 	bl	8001010 <HAL_GetTick>
 8002f5c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f5e:	e008      	b.n	8002f72 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f60:	f7fe f856 	bl	8001010 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e184      	b.n	800327c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f72:	4b32      	ldr	r3, [pc, #200]	; (800303c <HAL_RCC_OscConfig+0x57c>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d0f0      	beq.n	8002f60 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d108      	bne.n	8002f98 <HAL_RCC_OscConfig+0x4d8>
 8002f86:	4b2c      	ldr	r3, [pc, #176]	; (8003038 <HAL_RCC_OscConfig+0x578>)
 8002f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f8c:	4a2a      	ldr	r2, [pc, #168]	; (8003038 <HAL_RCC_OscConfig+0x578>)
 8002f8e:	f043 0301 	orr.w	r3, r3, #1
 8002f92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f96:	e024      	b.n	8002fe2 <HAL_RCC_OscConfig+0x522>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	2b05      	cmp	r3, #5
 8002f9e:	d110      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x502>
 8002fa0:	4b25      	ldr	r3, [pc, #148]	; (8003038 <HAL_RCC_OscConfig+0x578>)
 8002fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa6:	4a24      	ldr	r2, [pc, #144]	; (8003038 <HAL_RCC_OscConfig+0x578>)
 8002fa8:	f043 0304 	orr.w	r3, r3, #4
 8002fac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fb0:	4b21      	ldr	r3, [pc, #132]	; (8003038 <HAL_RCC_OscConfig+0x578>)
 8002fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb6:	4a20      	ldr	r2, [pc, #128]	; (8003038 <HAL_RCC_OscConfig+0x578>)
 8002fb8:	f043 0301 	orr.w	r3, r3, #1
 8002fbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fc0:	e00f      	b.n	8002fe2 <HAL_RCC_OscConfig+0x522>
 8002fc2:	4b1d      	ldr	r3, [pc, #116]	; (8003038 <HAL_RCC_OscConfig+0x578>)
 8002fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc8:	4a1b      	ldr	r2, [pc, #108]	; (8003038 <HAL_RCC_OscConfig+0x578>)
 8002fca:	f023 0301 	bic.w	r3, r3, #1
 8002fce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fd2:	4b19      	ldr	r3, [pc, #100]	; (8003038 <HAL_RCC_OscConfig+0x578>)
 8002fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd8:	4a17      	ldr	r2, [pc, #92]	; (8003038 <HAL_RCC_OscConfig+0x578>)
 8002fda:	f023 0304 	bic.w	r3, r3, #4
 8002fde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d016      	beq.n	8003018 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fea:	f7fe f811 	bl	8001010 <HAL_GetTick>
 8002fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ff0:	e00a      	b.n	8003008 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ff2:	f7fe f80d 	bl	8001010 <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003000:	4293      	cmp	r3, r2
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e139      	b.n	800327c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003008:	4b0b      	ldr	r3, [pc, #44]	; (8003038 <HAL_RCC_OscConfig+0x578>)
 800300a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d0ed      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x532>
 8003016:	e01a      	b.n	800304e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003018:	f7fd fffa 	bl	8001010 <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800301e:	e00f      	b.n	8003040 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003020:	f7fd fff6 	bl	8001010 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	f241 3288 	movw	r2, #5000	; 0x1388
 800302e:	4293      	cmp	r3, r2
 8003030:	d906      	bls.n	8003040 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e122      	b.n	800327c <HAL_RCC_OscConfig+0x7bc>
 8003036:	bf00      	nop
 8003038:	40021000 	.word	0x40021000
 800303c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003040:	4b90      	ldr	r3, [pc, #576]	; (8003284 <HAL_RCC_OscConfig+0x7c4>)
 8003042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1e8      	bne.n	8003020 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800304e:	7ffb      	ldrb	r3, [r7, #31]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d105      	bne.n	8003060 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003054:	4b8b      	ldr	r3, [pc, #556]	; (8003284 <HAL_RCC_OscConfig+0x7c4>)
 8003056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003058:	4a8a      	ldr	r2, [pc, #552]	; (8003284 <HAL_RCC_OscConfig+0x7c4>)
 800305a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800305e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003064:	2b00      	cmp	r3, #0
 8003066:	f000 8108 	beq.w	800327a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306e:	2b02      	cmp	r3, #2
 8003070:	f040 80d0 	bne.w	8003214 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003074:	4b83      	ldr	r3, [pc, #524]	; (8003284 <HAL_RCC_OscConfig+0x7c4>)
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	f003 0203 	and.w	r2, r3, #3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003084:	429a      	cmp	r2, r3
 8003086:	d130      	bne.n	80030ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003092:	3b01      	subs	r3, #1
 8003094:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003096:	429a      	cmp	r2, r3
 8003098:	d127      	bne.n	80030ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030a4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d11f      	bne.n	80030ea <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80030b4:	2a07      	cmp	r2, #7
 80030b6:	bf14      	ite	ne
 80030b8:	2201      	movne	r2, #1
 80030ba:	2200      	moveq	r2, #0
 80030bc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030be:	4293      	cmp	r3, r2
 80030c0:	d113      	bne.n	80030ea <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030cc:	085b      	lsrs	r3, r3, #1
 80030ce:	3b01      	subs	r3, #1
 80030d0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d109      	bne.n	80030ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e0:	085b      	lsrs	r3, r3, #1
 80030e2:	3b01      	subs	r3, #1
 80030e4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d06e      	beq.n	80031c8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	2b0c      	cmp	r3, #12
 80030ee:	d069      	beq.n	80031c4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80030f0:	4b64      	ldr	r3, [pc, #400]	; (8003284 <HAL_RCC_OscConfig+0x7c4>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d105      	bne.n	8003108 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80030fc:	4b61      	ldr	r3, [pc, #388]	; (8003284 <HAL_RCC_OscConfig+0x7c4>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e0b7      	b.n	800327c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800310c:	4b5d      	ldr	r3, [pc, #372]	; (8003284 <HAL_RCC_OscConfig+0x7c4>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a5c      	ldr	r2, [pc, #368]	; (8003284 <HAL_RCC_OscConfig+0x7c4>)
 8003112:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003116:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003118:	f7fd ff7a 	bl	8001010 <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800311e:	e008      	b.n	8003132 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003120:	f7fd ff76 	bl	8001010 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b02      	cmp	r3, #2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e0a4      	b.n	800327c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003132:	4b54      	ldr	r3, [pc, #336]	; (8003284 <HAL_RCC_OscConfig+0x7c4>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1f0      	bne.n	8003120 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800313e:	4b51      	ldr	r3, [pc, #324]	; (8003284 <HAL_RCC_OscConfig+0x7c4>)
 8003140:	68da      	ldr	r2, [r3, #12]
 8003142:	4b51      	ldr	r3, [pc, #324]	; (8003288 <HAL_RCC_OscConfig+0x7c8>)
 8003144:	4013      	ands	r3, r2
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800314e:	3a01      	subs	r2, #1
 8003150:	0112      	lsls	r2, r2, #4
 8003152:	4311      	orrs	r1, r2
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003158:	0212      	lsls	r2, r2, #8
 800315a:	4311      	orrs	r1, r2
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003160:	0852      	lsrs	r2, r2, #1
 8003162:	3a01      	subs	r2, #1
 8003164:	0552      	lsls	r2, r2, #21
 8003166:	4311      	orrs	r1, r2
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800316c:	0852      	lsrs	r2, r2, #1
 800316e:	3a01      	subs	r2, #1
 8003170:	0652      	lsls	r2, r2, #25
 8003172:	4311      	orrs	r1, r2
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003178:	0912      	lsrs	r2, r2, #4
 800317a:	0452      	lsls	r2, r2, #17
 800317c:	430a      	orrs	r2, r1
 800317e:	4941      	ldr	r1, [pc, #260]	; (8003284 <HAL_RCC_OscConfig+0x7c4>)
 8003180:	4313      	orrs	r3, r2
 8003182:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003184:	4b3f      	ldr	r3, [pc, #252]	; (8003284 <HAL_RCC_OscConfig+0x7c4>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a3e      	ldr	r2, [pc, #248]	; (8003284 <HAL_RCC_OscConfig+0x7c4>)
 800318a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800318e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003190:	4b3c      	ldr	r3, [pc, #240]	; (8003284 <HAL_RCC_OscConfig+0x7c4>)
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	4a3b      	ldr	r2, [pc, #236]	; (8003284 <HAL_RCC_OscConfig+0x7c4>)
 8003196:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800319a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800319c:	f7fd ff38 	bl	8001010 <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031a2:	e008      	b.n	80031b6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031a4:	f7fd ff34 	bl	8001010 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e062      	b.n	800327c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031b6:	4b33      	ldr	r3, [pc, #204]	; (8003284 <HAL_RCC_OscConfig+0x7c4>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d0f0      	beq.n	80031a4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031c2:	e05a      	b.n	800327a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e059      	b.n	800327c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031c8:	4b2e      	ldr	r3, [pc, #184]	; (8003284 <HAL_RCC_OscConfig+0x7c4>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d152      	bne.n	800327a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80031d4:	4b2b      	ldr	r3, [pc, #172]	; (8003284 <HAL_RCC_OscConfig+0x7c4>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a2a      	ldr	r2, [pc, #168]	; (8003284 <HAL_RCC_OscConfig+0x7c4>)
 80031da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031de:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031e0:	4b28      	ldr	r3, [pc, #160]	; (8003284 <HAL_RCC_OscConfig+0x7c4>)
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	4a27      	ldr	r2, [pc, #156]	; (8003284 <HAL_RCC_OscConfig+0x7c4>)
 80031e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031ea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80031ec:	f7fd ff10 	bl	8001010 <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031f4:	f7fd ff0c 	bl	8001010 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e03a      	b.n	800327c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003206:	4b1f      	ldr	r3, [pc, #124]	; (8003284 <HAL_RCC_OscConfig+0x7c4>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d0f0      	beq.n	80031f4 <HAL_RCC_OscConfig+0x734>
 8003212:	e032      	b.n	800327a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	2b0c      	cmp	r3, #12
 8003218:	d02d      	beq.n	8003276 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800321a:	4b1a      	ldr	r3, [pc, #104]	; (8003284 <HAL_RCC_OscConfig+0x7c4>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a19      	ldr	r2, [pc, #100]	; (8003284 <HAL_RCC_OscConfig+0x7c4>)
 8003220:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003224:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003226:	4b17      	ldr	r3, [pc, #92]	; (8003284 <HAL_RCC_OscConfig+0x7c4>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d105      	bne.n	800323e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003232:	4b14      	ldr	r3, [pc, #80]	; (8003284 <HAL_RCC_OscConfig+0x7c4>)
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	4a13      	ldr	r2, [pc, #76]	; (8003284 <HAL_RCC_OscConfig+0x7c4>)
 8003238:	f023 0303 	bic.w	r3, r3, #3
 800323c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800323e:	4b11      	ldr	r3, [pc, #68]	; (8003284 <HAL_RCC_OscConfig+0x7c4>)
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	4a10      	ldr	r2, [pc, #64]	; (8003284 <HAL_RCC_OscConfig+0x7c4>)
 8003244:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003248:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800324c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800324e:	f7fd fedf 	bl	8001010 <HAL_GetTick>
 8003252:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003254:	e008      	b.n	8003268 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003256:	f7fd fedb 	bl	8001010 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d901      	bls.n	8003268 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e009      	b.n	800327c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003268:	4b06      	ldr	r3, [pc, #24]	; (8003284 <HAL_RCC_OscConfig+0x7c4>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1f0      	bne.n	8003256 <HAL_RCC_OscConfig+0x796>
 8003274:	e001      	b.n	800327a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e000      	b.n	800327c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800327a:	2300      	movs	r3, #0
}
 800327c:	4618      	mov	r0, r3
 800327e:	3720      	adds	r7, #32
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	40021000 	.word	0x40021000
 8003288:	f99d808c 	.word	0xf99d808c

0800328c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d101      	bne.n	80032a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e0c8      	b.n	8003432 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032a0:	4b66      	ldr	r3, [pc, #408]	; (800343c <HAL_RCC_ClockConfig+0x1b0>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0307 	and.w	r3, r3, #7
 80032a8:	683a      	ldr	r2, [r7, #0]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d910      	bls.n	80032d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ae:	4b63      	ldr	r3, [pc, #396]	; (800343c <HAL_RCC_ClockConfig+0x1b0>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f023 0207 	bic.w	r2, r3, #7
 80032b6:	4961      	ldr	r1, [pc, #388]	; (800343c <HAL_RCC_ClockConfig+0x1b0>)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032be:	4b5f      	ldr	r3, [pc, #380]	; (800343c <HAL_RCC_ClockConfig+0x1b0>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0307 	and.w	r3, r3, #7
 80032c6:	683a      	ldr	r2, [r7, #0]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d001      	beq.n	80032d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e0b0      	b.n	8003432 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0301 	and.w	r3, r3, #1
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d04c      	beq.n	8003376 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	2b03      	cmp	r3, #3
 80032e2:	d107      	bne.n	80032f4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032e4:	4b56      	ldr	r3, [pc, #344]	; (8003440 <HAL_RCC_ClockConfig+0x1b4>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d121      	bne.n	8003334 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e09e      	b.n	8003432 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d107      	bne.n	800330c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032fc:	4b50      	ldr	r3, [pc, #320]	; (8003440 <HAL_RCC_ClockConfig+0x1b4>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d115      	bne.n	8003334 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e092      	b.n	8003432 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d107      	bne.n	8003324 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003314:	4b4a      	ldr	r3, [pc, #296]	; (8003440 <HAL_RCC_ClockConfig+0x1b4>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	2b00      	cmp	r3, #0
 800331e:	d109      	bne.n	8003334 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e086      	b.n	8003432 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003324:	4b46      	ldr	r3, [pc, #280]	; (8003440 <HAL_RCC_ClockConfig+0x1b4>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800332c:	2b00      	cmp	r3, #0
 800332e:	d101      	bne.n	8003334 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e07e      	b.n	8003432 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003334:	4b42      	ldr	r3, [pc, #264]	; (8003440 <HAL_RCC_ClockConfig+0x1b4>)
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f023 0203 	bic.w	r2, r3, #3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	493f      	ldr	r1, [pc, #252]	; (8003440 <HAL_RCC_ClockConfig+0x1b4>)
 8003342:	4313      	orrs	r3, r2
 8003344:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003346:	f7fd fe63 	bl	8001010 <HAL_GetTick>
 800334a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800334c:	e00a      	b.n	8003364 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800334e:	f7fd fe5f 	bl	8001010 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	f241 3288 	movw	r2, #5000	; 0x1388
 800335c:	4293      	cmp	r3, r2
 800335e:	d901      	bls.n	8003364 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e066      	b.n	8003432 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003364:	4b36      	ldr	r3, [pc, #216]	; (8003440 <HAL_RCC_ClockConfig+0x1b4>)
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f003 020c 	and.w	r2, r3, #12
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	429a      	cmp	r2, r3
 8003374:	d1eb      	bne.n	800334e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d008      	beq.n	8003394 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003382:	4b2f      	ldr	r3, [pc, #188]	; (8003440 <HAL_RCC_ClockConfig+0x1b4>)
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	492c      	ldr	r1, [pc, #176]	; (8003440 <HAL_RCC_ClockConfig+0x1b4>)
 8003390:	4313      	orrs	r3, r2
 8003392:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003394:	4b29      	ldr	r3, [pc, #164]	; (800343c <HAL_RCC_ClockConfig+0x1b0>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0307 	and.w	r3, r3, #7
 800339c:	683a      	ldr	r2, [r7, #0]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d210      	bcs.n	80033c4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033a2:	4b26      	ldr	r3, [pc, #152]	; (800343c <HAL_RCC_ClockConfig+0x1b0>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f023 0207 	bic.w	r2, r3, #7
 80033aa:	4924      	ldr	r1, [pc, #144]	; (800343c <HAL_RCC_ClockConfig+0x1b0>)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033b2:	4b22      	ldr	r3, [pc, #136]	; (800343c <HAL_RCC_ClockConfig+0x1b0>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0307 	and.w	r3, r3, #7
 80033ba:	683a      	ldr	r2, [r7, #0]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d001      	beq.n	80033c4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e036      	b.n	8003432 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0304 	and.w	r3, r3, #4
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d008      	beq.n	80033e2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033d0:	4b1b      	ldr	r3, [pc, #108]	; (8003440 <HAL_RCC_ClockConfig+0x1b4>)
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	4918      	ldr	r1, [pc, #96]	; (8003440 <HAL_RCC_ClockConfig+0x1b4>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0308 	and.w	r3, r3, #8
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d009      	beq.n	8003402 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033ee:	4b14      	ldr	r3, [pc, #80]	; (8003440 <HAL_RCC_ClockConfig+0x1b4>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	4910      	ldr	r1, [pc, #64]	; (8003440 <HAL_RCC_ClockConfig+0x1b4>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003402:	f000 f825 	bl	8003450 <HAL_RCC_GetSysClockFreq>
 8003406:	4602      	mov	r2, r0
 8003408:	4b0d      	ldr	r3, [pc, #52]	; (8003440 <HAL_RCC_ClockConfig+0x1b4>)
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	091b      	lsrs	r3, r3, #4
 800340e:	f003 030f 	and.w	r3, r3, #15
 8003412:	490c      	ldr	r1, [pc, #48]	; (8003444 <HAL_RCC_ClockConfig+0x1b8>)
 8003414:	5ccb      	ldrb	r3, [r1, r3]
 8003416:	f003 031f 	and.w	r3, r3, #31
 800341a:	fa22 f303 	lsr.w	r3, r2, r3
 800341e:	4a0a      	ldr	r2, [pc, #40]	; (8003448 <HAL_RCC_ClockConfig+0x1bc>)
 8003420:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003422:	4b0a      	ldr	r3, [pc, #40]	; (800344c <HAL_RCC_ClockConfig+0x1c0>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4618      	mov	r0, r3
 8003428:	f7fd fda2 	bl	8000f70 <HAL_InitTick>
 800342c:	4603      	mov	r3, r0
 800342e:	72fb      	strb	r3, [r7, #11]

  return status;
 8003430:	7afb      	ldrb	r3, [r7, #11]
}
 8003432:	4618      	mov	r0, r3
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	40022000 	.word	0x40022000
 8003440:	40021000 	.word	0x40021000
 8003444:	08006a78 	.word	0x08006a78
 8003448:	20000000 	.word	0x20000000
 800344c:	20000004 	.word	0x20000004

08003450 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003450:	b480      	push	{r7}
 8003452:	b089      	sub	sp, #36	; 0x24
 8003454:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003456:	2300      	movs	r3, #0
 8003458:	61fb      	str	r3, [r7, #28]
 800345a:	2300      	movs	r3, #0
 800345c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800345e:	4b3e      	ldr	r3, [pc, #248]	; (8003558 <HAL_RCC_GetSysClockFreq+0x108>)
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f003 030c 	and.w	r3, r3, #12
 8003466:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003468:	4b3b      	ldr	r3, [pc, #236]	; (8003558 <HAL_RCC_GetSysClockFreq+0x108>)
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	f003 0303 	and.w	r3, r3, #3
 8003470:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d005      	beq.n	8003484 <HAL_RCC_GetSysClockFreq+0x34>
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	2b0c      	cmp	r3, #12
 800347c:	d121      	bne.n	80034c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d11e      	bne.n	80034c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003484:	4b34      	ldr	r3, [pc, #208]	; (8003558 <HAL_RCC_GetSysClockFreq+0x108>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0308 	and.w	r3, r3, #8
 800348c:	2b00      	cmp	r3, #0
 800348e:	d107      	bne.n	80034a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003490:	4b31      	ldr	r3, [pc, #196]	; (8003558 <HAL_RCC_GetSysClockFreq+0x108>)
 8003492:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003496:	0a1b      	lsrs	r3, r3, #8
 8003498:	f003 030f 	and.w	r3, r3, #15
 800349c:	61fb      	str	r3, [r7, #28]
 800349e:	e005      	b.n	80034ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80034a0:	4b2d      	ldr	r3, [pc, #180]	; (8003558 <HAL_RCC_GetSysClockFreq+0x108>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	091b      	lsrs	r3, r3, #4
 80034a6:	f003 030f 	and.w	r3, r3, #15
 80034aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80034ac:	4a2b      	ldr	r2, [pc, #172]	; (800355c <HAL_RCC_GetSysClockFreq+0x10c>)
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d10d      	bne.n	80034d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034c0:	e00a      	b.n	80034d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	2b04      	cmp	r3, #4
 80034c6:	d102      	bne.n	80034ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80034c8:	4b25      	ldr	r3, [pc, #148]	; (8003560 <HAL_RCC_GetSysClockFreq+0x110>)
 80034ca:	61bb      	str	r3, [r7, #24]
 80034cc:	e004      	b.n	80034d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	2b08      	cmp	r3, #8
 80034d2:	d101      	bne.n	80034d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80034d4:	4b23      	ldr	r3, [pc, #140]	; (8003564 <HAL_RCC_GetSysClockFreq+0x114>)
 80034d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	2b0c      	cmp	r3, #12
 80034dc:	d134      	bne.n	8003548 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80034de:	4b1e      	ldr	r3, [pc, #120]	; (8003558 <HAL_RCC_GetSysClockFreq+0x108>)
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	f003 0303 	and.w	r3, r3, #3
 80034e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d003      	beq.n	80034f6 <HAL_RCC_GetSysClockFreq+0xa6>
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	2b03      	cmp	r3, #3
 80034f2:	d003      	beq.n	80034fc <HAL_RCC_GetSysClockFreq+0xac>
 80034f4:	e005      	b.n	8003502 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80034f6:	4b1a      	ldr	r3, [pc, #104]	; (8003560 <HAL_RCC_GetSysClockFreq+0x110>)
 80034f8:	617b      	str	r3, [r7, #20]
      break;
 80034fa:	e005      	b.n	8003508 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80034fc:	4b19      	ldr	r3, [pc, #100]	; (8003564 <HAL_RCC_GetSysClockFreq+0x114>)
 80034fe:	617b      	str	r3, [r7, #20]
      break;
 8003500:	e002      	b.n	8003508 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	617b      	str	r3, [r7, #20]
      break;
 8003506:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003508:	4b13      	ldr	r3, [pc, #76]	; (8003558 <HAL_RCC_GetSysClockFreq+0x108>)
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	091b      	lsrs	r3, r3, #4
 800350e:	f003 0307 	and.w	r3, r3, #7
 8003512:	3301      	adds	r3, #1
 8003514:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003516:	4b10      	ldr	r3, [pc, #64]	; (8003558 <HAL_RCC_GetSysClockFreq+0x108>)
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	0a1b      	lsrs	r3, r3, #8
 800351c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	fb02 f203 	mul.w	r2, r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	fbb2 f3f3 	udiv	r3, r2, r3
 800352c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800352e:	4b0a      	ldr	r3, [pc, #40]	; (8003558 <HAL_RCC_GetSysClockFreq+0x108>)
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	0e5b      	lsrs	r3, r3, #25
 8003534:	f003 0303 	and.w	r3, r3, #3
 8003538:	3301      	adds	r3, #1
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	fbb2 f3f3 	udiv	r3, r2, r3
 8003546:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003548:	69bb      	ldr	r3, [r7, #24]
}
 800354a:	4618      	mov	r0, r3
 800354c:	3724      	adds	r7, #36	; 0x24
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	40021000 	.word	0x40021000
 800355c:	08006a90 	.word	0x08006a90
 8003560:	00f42400 	.word	0x00f42400
 8003564:	007a1200 	.word	0x007a1200

08003568 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800356c:	4b03      	ldr	r3, [pc, #12]	; (800357c <HAL_RCC_GetHCLKFreq+0x14>)
 800356e:	681b      	ldr	r3, [r3, #0]
}
 8003570:	4618      	mov	r0, r3
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	20000000 	.word	0x20000000

08003580 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003584:	f7ff fff0 	bl	8003568 <HAL_RCC_GetHCLKFreq>
 8003588:	4602      	mov	r2, r0
 800358a:	4b06      	ldr	r3, [pc, #24]	; (80035a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	0a1b      	lsrs	r3, r3, #8
 8003590:	f003 0307 	and.w	r3, r3, #7
 8003594:	4904      	ldr	r1, [pc, #16]	; (80035a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003596:	5ccb      	ldrb	r3, [r1, r3]
 8003598:	f003 031f 	and.w	r3, r3, #31
 800359c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	40021000 	.word	0x40021000
 80035a8:	08006a88 	.word	0x08006a88

080035ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80035b0:	f7ff ffda 	bl	8003568 <HAL_RCC_GetHCLKFreq>
 80035b4:	4602      	mov	r2, r0
 80035b6:	4b06      	ldr	r3, [pc, #24]	; (80035d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	0adb      	lsrs	r3, r3, #11
 80035bc:	f003 0307 	and.w	r3, r3, #7
 80035c0:	4904      	ldr	r1, [pc, #16]	; (80035d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80035c2:	5ccb      	ldrb	r3, [r1, r3]
 80035c4:	f003 031f 	and.w	r3, r3, #31
 80035c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	40021000 	.word	0x40021000
 80035d4:	08006a88 	.word	0x08006a88

080035d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b086      	sub	sp, #24
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80035e0:	2300      	movs	r3, #0
 80035e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80035e4:	4b2a      	ldr	r3, [pc, #168]	; (8003690 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d003      	beq.n	80035f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80035f0:	f7ff fa02 	bl	80029f8 <HAL_PWREx_GetVoltageRange>
 80035f4:	6178      	str	r0, [r7, #20]
 80035f6:	e014      	b.n	8003622 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80035f8:	4b25      	ldr	r3, [pc, #148]	; (8003690 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035fc:	4a24      	ldr	r2, [pc, #144]	; (8003690 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003602:	6593      	str	r3, [r2, #88]	; 0x58
 8003604:	4b22      	ldr	r3, [pc, #136]	; (8003690 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800360c:	60fb      	str	r3, [r7, #12]
 800360e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003610:	f7ff f9f2 	bl	80029f8 <HAL_PWREx_GetVoltageRange>
 8003614:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003616:	4b1e      	ldr	r3, [pc, #120]	; (8003690 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800361a:	4a1d      	ldr	r2, [pc, #116]	; (8003690 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800361c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003620:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003628:	d10b      	bne.n	8003642 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2b80      	cmp	r3, #128	; 0x80
 800362e:	d919      	bls.n	8003664 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2ba0      	cmp	r3, #160	; 0xa0
 8003634:	d902      	bls.n	800363c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003636:	2302      	movs	r3, #2
 8003638:	613b      	str	r3, [r7, #16]
 800363a:	e013      	b.n	8003664 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800363c:	2301      	movs	r3, #1
 800363e:	613b      	str	r3, [r7, #16]
 8003640:	e010      	b.n	8003664 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2b80      	cmp	r3, #128	; 0x80
 8003646:	d902      	bls.n	800364e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003648:	2303      	movs	r3, #3
 800364a:	613b      	str	r3, [r7, #16]
 800364c:	e00a      	b.n	8003664 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2b80      	cmp	r3, #128	; 0x80
 8003652:	d102      	bne.n	800365a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003654:	2302      	movs	r3, #2
 8003656:	613b      	str	r3, [r7, #16]
 8003658:	e004      	b.n	8003664 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2b70      	cmp	r3, #112	; 0x70
 800365e:	d101      	bne.n	8003664 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003660:	2301      	movs	r3, #1
 8003662:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003664:	4b0b      	ldr	r3, [pc, #44]	; (8003694 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f023 0207 	bic.w	r2, r3, #7
 800366c:	4909      	ldr	r1, [pc, #36]	; (8003694 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	4313      	orrs	r3, r2
 8003672:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003674:	4b07      	ldr	r3, [pc, #28]	; (8003694 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0307 	and.w	r3, r3, #7
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	429a      	cmp	r2, r3
 8003680:	d001      	beq.n	8003686 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e000      	b.n	8003688 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003686:	2300      	movs	r3, #0
}
 8003688:	4618      	mov	r0, r3
 800368a:	3718      	adds	r7, #24
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	40021000 	.word	0x40021000
 8003694:	40022000 	.word	0x40022000

08003698 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b086      	sub	sp, #24
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036a0:	2300      	movs	r3, #0
 80036a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036a4:	2300      	movs	r3, #0
 80036a6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d041      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036b8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80036bc:	d02a      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80036be:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80036c2:	d824      	bhi.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80036c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036c8:	d008      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80036ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036ce:	d81e      	bhi.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00a      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x52>
 80036d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036d8:	d010      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80036da:	e018      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80036dc:	4b86      	ldr	r3, [pc, #536]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	4a85      	ldr	r2, [pc, #532]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036e6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036e8:	e015      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	3304      	adds	r3, #4
 80036ee:	2100      	movs	r1, #0
 80036f0:	4618      	mov	r0, r3
 80036f2:	f000 fabb 	bl	8003c6c <RCCEx_PLLSAI1_Config>
 80036f6:	4603      	mov	r3, r0
 80036f8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036fa:	e00c      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	3320      	adds	r3, #32
 8003700:	2100      	movs	r1, #0
 8003702:	4618      	mov	r0, r3
 8003704:	f000 fba6 	bl	8003e54 <RCCEx_PLLSAI2_Config>
 8003708:	4603      	mov	r3, r0
 800370a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800370c:	e003      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	74fb      	strb	r3, [r7, #19]
      break;
 8003712:	e000      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003714:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003716:	7cfb      	ldrb	r3, [r7, #19]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d10b      	bne.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800371c:	4b76      	ldr	r3, [pc, #472]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800371e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003722:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800372a:	4973      	ldr	r1, [pc, #460]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800372c:	4313      	orrs	r3, r2
 800372e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003732:	e001      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003734:	7cfb      	ldrb	r3, [r7, #19]
 8003736:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d041      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003748:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800374c:	d02a      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800374e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003752:	d824      	bhi.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003754:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003758:	d008      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800375a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800375e:	d81e      	bhi.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00a      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003764:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003768:	d010      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800376a:	e018      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800376c:	4b62      	ldr	r3, [pc, #392]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	4a61      	ldr	r2, [pc, #388]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003772:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003776:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003778:	e015      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	3304      	adds	r3, #4
 800377e:	2100      	movs	r1, #0
 8003780:	4618      	mov	r0, r3
 8003782:	f000 fa73 	bl	8003c6c <RCCEx_PLLSAI1_Config>
 8003786:	4603      	mov	r3, r0
 8003788:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800378a:	e00c      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	3320      	adds	r3, #32
 8003790:	2100      	movs	r1, #0
 8003792:	4618      	mov	r0, r3
 8003794:	f000 fb5e 	bl	8003e54 <RCCEx_PLLSAI2_Config>
 8003798:	4603      	mov	r3, r0
 800379a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800379c:	e003      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	74fb      	strb	r3, [r7, #19]
      break;
 80037a2:	e000      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80037a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037a6:	7cfb      	ldrb	r3, [r7, #19]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d10b      	bne.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80037ac:	4b52      	ldr	r3, [pc, #328]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037ba:	494f      	ldr	r1, [pc, #316]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80037c2:	e001      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037c4:	7cfb      	ldrb	r3, [r7, #19]
 80037c6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	f000 80a0 	beq.w	8003916 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037d6:	2300      	movs	r3, #0
 80037d8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80037da:	4b47      	ldr	r3, [pc, #284]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d101      	bne.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x152>
 80037e6:	2301      	movs	r3, #1
 80037e8:	e000      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x154>
 80037ea:	2300      	movs	r3, #0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d00d      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037f0:	4b41      	ldr	r3, [pc, #260]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f4:	4a40      	ldr	r2, [pc, #256]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037fa:	6593      	str	r3, [r2, #88]	; 0x58
 80037fc:	4b3e      	ldr	r3, [pc, #248]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003804:	60bb      	str	r3, [r7, #8]
 8003806:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003808:	2301      	movs	r3, #1
 800380a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800380c:	4b3b      	ldr	r3, [pc, #236]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a3a      	ldr	r2, [pc, #232]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003812:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003816:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003818:	f7fd fbfa 	bl	8001010 <HAL_GetTick>
 800381c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800381e:	e009      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003820:	f7fd fbf6 	bl	8001010 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b02      	cmp	r3, #2
 800382c:	d902      	bls.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	74fb      	strb	r3, [r7, #19]
        break;
 8003832:	e005      	b.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003834:	4b31      	ldr	r3, [pc, #196]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800383c:	2b00      	cmp	r3, #0
 800383e:	d0ef      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003840:	7cfb      	ldrb	r3, [r7, #19]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d15c      	bne.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003846:	4b2c      	ldr	r3, [pc, #176]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800384c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003850:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d01f      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	429a      	cmp	r2, r3
 8003862:	d019      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003864:	4b24      	ldr	r3, [pc, #144]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800386a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800386e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003870:	4b21      	ldr	r3, [pc, #132]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003876:	4a20      	ldr	r2, [pc, #128]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800387c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003880:	4b1d      	ldr	r3, [pc, #116]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003886:	4a1c      	ldr	r2, [pc, #112]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003888:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800388c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003890:	4a19      	ldr	r2, [pc, #100]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d016      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a2:	f7fd fbb5 	bl	8001010 <HAL_GetTick>
 80038a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038a8:	e00b      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038aa:	f7fd fbb1 	bl	8001010 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d902      	bls.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	74fb      	strb	r3, [r7, #19]
            break;
 80038c0:	e006      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038c2:	4b0d      	ldr	r3, [pc, #52]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c8:	f003 0302 	and.w	r3, r3, #2
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d0ec      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80038d0:	7cfb      	ldrb	r3, [r7, #19]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d10c      	bne.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038d6:	4b08      	ldr	r3, [pc, #32]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038e6:	4904      	ldr	r1, [pc, #16]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80038ee:	e009      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80038f0:	7cfb      	ldrb	r3, [r7, #19]
 80038f2:	74bb      	strb	r3, [r7, #18]
 80038f4:	e006      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80038f6:	bf00      	nop
 80038f8:	40021000 	.word	0x40021000
 80038fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003900:	7cfb      	ldrb	r3, [r7, #19]
 8003902:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003904:	7c7b      	ldrb	r3, [r7, #17]
 8003906:	2b01      	cmp	r3, #1
 8003908:	d105      	bne.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800390a:	4b9e      	ldr	r3, [pc, #632]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800390c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800390e:	4a9d      	ldr	r2, [pc, #628]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003910:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003914:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00a      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003922:	4b98      	ldr	r3, [pc, #608]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003928:	f023 0203 	bic.w	r2, r3, #3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003930:	4994      	ldr	r1, [pc, #592]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003932:	4313      	orrs	r3, r2
 8003934:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0302 	and.w	r3, r3, #2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00a      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003944:	4b8f      	ldr	r3, [pc, #572]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800394a:	f023 020c 	bic.w	r2, r3, #12
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003952:	498c      	ldr	r1, [pc, #560]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003954:	4313      	orrs	r3, r2
 8003956:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0304 	and.w	r3, r3, #4
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00a      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003966:	4b87      	ldr	r3, [pc, #540]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800396c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003974:	4983      	ldr	r1, [pc, #524]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003976:	4313      	orrs	r3, r2
 8003978:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0308 	and.w	r3, r3, #8
 8003984:	2b00      	cmp	r3, #0
 8003986:	d00a      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003988:	4b7e      	ldr	r3, [pc, #504]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800398a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800398e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003996:	497b      	ldr	r1, [pc, #492]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003998:	4313      	orrs	r3, r2
 800399a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0310 	and.w	r3, r3, #16
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00a      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80039aa:	4b76      	ldr	r3, [pc, #472]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039b8:	4972      	ldr	r1, [pc, #456]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0320 	and.w	r3, r3, #32
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d00a      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039cc:	4b6d      	ldr	r3, [pc, #436]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039da:	496a      	ldr	r1, [pc, #424]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00a      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039ee:	4b65      	ldr	r3, [pc, #404]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039fc:	4961      	ldr	r1, [pc, #388]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d00a      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a10:	4b5c      	ldr	r3, [pc, #368]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a1e:	4959      	ldr	r1, [pc, #356]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00a      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a32:	4b54      	ldr	r3, [pc, #336]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a38:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a40:	4950      	ldr	r1, [pc, #320]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00a      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a54:	4b4b      	ldr	r3, [pc, #300]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a5a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a62:	4948      	ldr	r1, [pc, #288]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00a      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a76:	4b43      	ldr	r3, [pc, #268]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a84:	493f      	ldr	r1, [pc, #252]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d028      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a98:	4b3a      	ldr	r3, [pc, #232]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a9e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003aa6:	4937      	ldr	r1, [pc, #220]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ab2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ab6:	d106      	bne.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ab8:	4b32      	ldr	r3, [pc, #200]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	4a31      	ldr	r2, [pc, #196]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003abe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ac2:	60d3      	str	r3, [r2, #12]
 8003ac4:	e011      	b.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003aca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ace:	d10c      	bne.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	3304      	adds	r3, #4
 8003ad4:	2101      	movs	r1, #1
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f000 f8c8 	bl	8003c6c <RCCEx_PLLSAI1_Config>
 8003adc:	4603      	mov	r3, r0
 8003ade:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003ae0:	7cfb      	ldrb	r3, [r7, #19]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003ae6:	7cfb      	ldrb	r3, [r7, #19]
 8003ae8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d028      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003af6:	4b23      	ldr	r3, [pc, #140]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003afc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b04:	491f      	ldr	r1, [pc, #124]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b14:	d106      	bne.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b16:	4b1b      	ldr	r3, [pc, #108]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	4a1a      	ldr	r2, [pc, #104]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b20:	60d3      	str	r3, [r2, #12]
 8003b22:	e011      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b2c:	d10c      	bne.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	3304      	adds	r3, #4
 8003b32:	2101      	movs	r1, #1
 8003b34:	4618      	mov	r0, r3
 8003b36:	f000 f899 	bl	8003c6c <RCCEx_PLLSAI1_Config>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b3e:	7cfb      	ldrb	r3, [r7, #19]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d001      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003b44:	7cfb      	ldrb	r3, [r7, #19]
 8003b46:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d02b      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b54:	4b0b      	ldr	r3, [pc, #44]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b5a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b62:	4908      	ldr	r1, [pc, #32]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b72:	d109      	bne.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b74:	4b03      	ldr	r3, [pc, #12]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	4a02      	ldr	r2, [pc, #8]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b7e:	60d3      	str	r3, [r2, #12]
 8003b80:	e014      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003b82:	bf00      	nop
 8003b84:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b90:	d10c      	bne.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	3304      	adds	r3, #4
 8003b96:	2101      	movs	r1, #1
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f000 f867 	bl	8003c6c <RCCEx_PLLSAI1_Config>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ba2:	7cfb      	ldrb	r3, [r7, #19]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d001      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003ba8:	7cfb      	ldrb	r3, [r7, #19]
 8003baa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d02f      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bb8:	4b2b      	ldr	r3, [pc, #172]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bbe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bc6:	4928      	ldr	r1, [pc, #160]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bd6:	d10d      	bne.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	3304      	adds	r3, #4
 8003bdc:	2102      	movs	r1, #2
 8003bde:	4618      	mov	r0, r3
 8003be0:	f000 f844 	bl	8003c6c <RCCEx_PLLSAI1_Config>
 8003be4:	4603      	mov	r3, r0
 8003be6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003be8:	7cfb      	ldrb	r3, [r7, #19]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d014      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003bee:	7cfb      	ldrb	r3, [r7, #19]
 8003bf0:	74bb      	strb	r3, [r7, #18]
 8003bf2:	e011      	b.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bfc:	d10c      	bne.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	3320      	adds	r3, #32
 8003c02:	2102      	movs	r1, #2
 8003c04:	4618      	mov	r0, r3
 8003c06:	f000 f925 	bl	8003e54 <RCCEx_PLLSAI2_Config>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c0e:	7cfb      	ldrb	r3, [r7, #19]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d001      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003c14:	7cfb      	ldrb	r3, [r7, #19]
 8003c16:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00a      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c24:	4b10      	ldr	r3, [pc, #64]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c2a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c32:	490d      	ldr	r1, [pc, #52]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00b      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c46:	4b08      	ldr	r3, [pc, #32]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c4c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c56:	4904      	ldr	r1, [pc, #16]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003c5e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3718      	adds	r7, #24
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	40021000 	.word	0x40021000

08003c6c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c76:	2300      	movs	r3, #0
 8003c78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c7a:	4b75      	ldr	r3, [pc, #468]	; (8003e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	f003 0303 	and.w	r3, r3, #3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d018      	beq.n	8003cb8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003c86:	4b72      	ldr	r3, [pc, #456]	; (8003e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	f003 0203 	and.w	r2, r3, #3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d10d      	bne.n	8003cb2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
       ||
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d009      	beq.n	8003cb2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003c9e:	4b6c      	ldr	r3, [pc, #432]	; (8003e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	091b      	lsrs	r3, r3, #4
 8003ca4:	f003 0307 	and.w	r3, r3, #7
 8003ca8:	1c5a      	adds	r2, r3, #1
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
       ||
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d047      	beq.n	8003d42 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	73fb      	strb	r3, [r7, #15]
 8003cb6:	e044      	b.n	8003d42 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2b03      	cmp	r3, #3
 8003cbe:	d018      	beq.n	8003cf2 <RCCEx_PLLSAI1_Config+0x86>
 8003cc0:	2b03      	cmp	r3, #3
 8003cc2:	d825      	bhi.n	8003d10 <RCCEx_PLLSAI1_Config+0xa4>
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d002      	beq.n	8003cce <RCCEx_PLLSAI1_Config+0x62>
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d009      	beq.n	8003ce0 <RCCEx_PLLSAI1_Config+0x74>
 8003ccc:	e020      	b.n	8003d10 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003cce:	4b60      	ldr	r3, [pc, #384]	; (8003e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d11d      	bne.n	8003d16 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cde:	e01a      	b.n	8003d16 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ce0:	4b5b      	ldr	r3, [pc, #364]	; (8003e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d116      	bne.n	8003d1a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cf0:	e013      	b.n	8003d1a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003cf2:	4b57      	ldr	r3, [pc, #348]	; (8003e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10f      	bne.n	8003d1e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003cfe:	4b54      	ldr	r3, [pc, #336]	; (8003e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d109      	bne.n	8003d1e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d0e:	e006      	b.n	8003d1e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	73fb      	strb	r3, [r7, #15]
      break;
 8003d14:	e004      	b.n	8003d20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d16:	bf00      	nop
 8003d18:	e002      	b.n	8003d20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d1a:	bf00      	nop
 8003d1c:	e000      	b.n	8003d20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d1e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d20:	7bfb      	ldrb	r3, [r7, #15]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10d      	bne.n	8003d42 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d26:	4b4a      	ldr	r3, [pc, #296]	; (8003e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6819      	ldr	r1, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	3b01      	subs	r3, #1
 8003d38:	011b      	lsls	r3, r3, #4
 8003d3a:	430b      	orrs	r3, r1
 8003d3c:	4944      	ldr	r1, [pc, #272]	; (8003e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d42:	7bfb      	ldrb	r3, [r7, #15]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d17d      	bne.n	8003e44 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003d48:	4b41      	ldr	r3, [pc, #260]	; (8003e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a40      	ldr	r2, [pc, #256]	; (8003e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d4e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d54:	f7fd f95c 	bl	8001010 <HAL_GetTick>
 8003d58:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d5a:	e009      	b.n	8003d70 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d5c:	f7fd f958 	bl	8001010 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d902      	bls.n	8003d70 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	73fb      	strb	r3, [r7, #15]
        break;
 8003d6e:	e005      	b.n	8003d7c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d70:	4b37      	ldr	r3, [pc, #220]	; (8003e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1ef      	bne.n	8003d5c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003d7c:	7bfb      	ldrb	r3, [r7, #15]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d160      	bne.n	8003e44 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d111      	bne.n	8003dac <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d88:	4b31      	ldr	r3, [pc, #196]	; (8003e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003d90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	6892      	ldr	r2, [r2, #8]
 8003d98:	0211      	lsls	r1, r2, #8
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	68d2      	ldr	r2, [r2, #12]
 8003d9e:	0912      	lsrs	r2, r2, #4
 8003da0:	0452      	lsls	r2, r2, #17
 8003da2:	430a      	orrs	r2, r1
 8003da4:	492a      	ldr	r1, [pc, #168]	; (8003e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	610b      	str	r3, [r1, #16]
 8003daa:	e027      	b.n	8003dfc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d112      	bne.n	8003dd8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003db2:	4b27      	ldr	r3, [pc, #156]	; (8003e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003dba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	6892      	ldr	r2, [r2, #8]
 8003dc2:	0211      	lsls	r1, r2, #8
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	6912      	ldr	r2, [r2, #16]
 8003dc8:	0852      	lsrs	r2, r2, #1
 8003dca:	3a01      	subs	r2, #1
 8003dcc:	0552      	lsls	r2, r2, #21
 8003dce:	430a      	orrs	r2, r1
 8003dd0:	491f      	ldr	r1, [pc, #124]	; (8003e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	610b      	str	r3, [r1, #16]
 8003dd6:	e011      	b.n	8003dfc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003dd8:	4b1d      	ldr	r3, [pc, #116]	; (8003e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003de0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	6892      	ldr	r2, [r2, #8]
 8003de8:	0211      	lsls	r1, r2, #8
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	6952      	ldr	r2, [r2, #20]
 8003dee:	0852      	lsrs	r2, r2, #1
 8003df0:	3a01      	subs	r2, #1
 8003df2:	0652      	lsls	r2, r2, #25
 8003df4:	430a      	orrs	r2, r1
 8003df6:	4916      	ldr	r1, [pc, #88]	; (8003e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003dfc:	4b14      	ldr	r3, [pc, #80]	; (8003e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a13      	ldr	r2, [pc, #76]	; (8003e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e02:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e06:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e08:	f7fd f902 	bl	8001010 <HAL_GetTick>
 8003e0c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e0e:	e009      	b.n	8003e24 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e10:	f7fd f8fe 	bl	8001010 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d902      	bls.n	8003e24 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	73fb      	strb	r3, [r7, #15]
          break;
 8003e22:	e005      	b.n	8003e30 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e24:	4b0a      	ldr	r3, [pc, #40]	; (8003e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d0ef      	beq.n	8003e10 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003e30:	7bfb      	ldrb	r3, [r7, #15]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d106      	bne.n	8003e44 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003e36:	4b06      	ldr	r3, [pc, #24]	; (8003e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e38:	691a      	ldr	r2, [r3, #16]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	4904      	ldr	r1, [pc, #16]	; (8003e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	40021000 	.word	0x40021000

08003e54 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e62:	4b6a      	ldr	r3, [pc, #424]	; (800400c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	f003 0303 	and.w	r3, r3, #3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d018      	beq.n	8003ea0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003e6e:	4b67      	ldr	r3, [pc, #412]	; (800400c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	f003 0203 	and.w	r2, r3, #3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d10d      	bne.n	8003e9a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
       ||
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d009      	beq.n	8003e9a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003e86:	4b61      	ldr	r3, [pc, #388]	; (800400c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	091b      	lsrs	r3, r3, #4
 8003e8c:	f003 0307 	and.w	r3, r3, #7
 8003e90:	1c5a      	adds	r2, r3, #1
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
       ||
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d047      	beq.n	8003f2a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	73fb      	strb	r3, [r7, #15]
 8003e9e:	e044      	b.n	8003f2a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2b03      	cmp	r3, #3
 8003ea6:	d018      	beq.n	8003eda <RCCEx_PLLSAI2_Config+0x86>
 8003ea8:	2b03      	cmp	r3, #3
 8003eaa:	d825      	bhi.n	8003ef8 <RCCEx_PLLSAI2_Config+0xa4>
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d002      	beq.n	8003eb6 <RCCEx_PLLSAI2_Config+0x62>
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d009      	beq.n	8003ec8 <RCCEx_PLLSAI2_Config+0x74>
 8003eb4:	e020      	b.n	8003ef8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003eb6:	4b55      	ldr	r3, [pc, #340]	; (800400c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d11d      	bne.n	8003efe <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ec6:	e01a      	b.n	8003efe <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ec8:	4b50      	ldr	r3, [pc, #320]	; (800400c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d116      	bne.n	8003f02 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ed8:	e013      	b.n	8003f02 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003eda:	4b4c      	ldr	r3, [pc, #304]	; (800400c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d10f      	bne.n	8003f06 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003ee6:	4b49      	ldr	r3, [pc, #292]	; (800400c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d109      	bne.n	8003f06 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ef6:	e006      	b.n	8003f06 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	73fb      	strb	r3, [r7, #15]
      break;
 8003efc:	e004      	b.n	8003f08 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003efe:	bf00      	nop
 8003f00:	e002      	b.n	8003f08 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f02:	bf00      	nop
 8003f04:	e000      	b.n	8003f08 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f06:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f08:	7bfb      	ldrb	r3, [r7, #15]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d10d      	bne.n	8003f2a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f0e:	4b3f      	ldr	r3, [pc, #252]	; (800400c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6819      	ldr	r1, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	011b      	lsls	r3, r3, #4
 8003f22:	430b      	orrs	r3, r1
 8003f24:	4939      	ldr	r1, [pc, #228]	; (800400c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f2a:	7bfb      	ldrb	r3, [r7, #15]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d167      	bne.n	8004000 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003f30:	4b36      	ldr	r3, [pc, #216]	; (800400c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a35      	ldr	r2, [pc, #212]	; (800400c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f3c:	f7fd f868 	bl	8001010 <HAL_GetTick>
 8003f40:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f42:	e009      	b.n	8003f58 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f44:	f7fd f864 	bl	8001010 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d902      	bls.n	8003f58 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	73fb      	strb	r3, [r7, #15]
        break;
 8003f56:	e005      	b.n	8003f64 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f58:	4b2c      	ldr	r3, [pc, #176]	; (800400c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1ef      	bne.n	8003f44 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003f64:	7bfb      	ldrb	r3, [r7, #15]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d14a      	bne.n	8004000 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d111      	bne.n	8003f94 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f70:	4b26      	ldr	r3, [pc, #152]	; (800400c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f72:	695b      	ldr	r3, [r3, #20]
 8003f74:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003f78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	6892      	ldr	r2, [r2, #8]
 8003f80:	0211      	lsls	r1, r2, #8
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	68d2      	ldr	r2, [r2, #12]
 8003f86:	0912      	lsrs	r2, r2, #4
 8003f88:	0452      	lsls	r2, r2, #17
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	491f      	ldr	r1, [pc, #124]	; (800400c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	614b      	str	r3, [r1, #20]
 8003f92:	e011      	b.n	8003fb8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f94:	4b1d      	ldr	r3, [pc, #116]	; (800400c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003f9c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	6892      	ldr	r2, [r2, #8]
 8003fa4:	0211      	lsls	r1, r2, #8
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	6912      	ldr	r2, [r2, #16]
 8003faa:	0852      	lsrs	r2, r2, #1
 8003fac:	3a01      	subs	r2, #1
 8003fae:	0652      	lsls	r2, r2, #25
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	4916      	ldr	r1, [pc, #88]	; (800400c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003fb8:	4b14      	ldr	r3, [pc, #80]	; (800400c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a13      	ldr	r2, [pc, #76]	; (800400c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fc2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fc4:	f7fd f824 	bl	8001010 <HAL_GetTick>
 8003fc8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003fca:	e009      	b.n	8003fe0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003fcc:	f7fd f820 	bl	8001010 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d902      	bls.n	8003fe0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	73fb      	strb	r3, [r7, #15]
          break;
 8003fde:	e005      	b.n	8003fec <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003fe0:	4b0a      	ldr	r3, [pc, #40]	; (800400c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d0ef      	beq.n	8003fcc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003fec:	7bfb      	ldrb	r3, [r7, #15]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d106      	bne.n	8004000 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003ff2:	4b06      	ldr	r3, [pc, #24]	; (800400c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ff4:	695a      	ldr	r2, [r3, #20]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	4904      	ldr	r1, [pc, #16]	; (800400c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004000:	7bfb      	ldrb	r3, [r7, #15]
}
 8004002:	4618      	mov	r0, r3
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	40021000 	.word	0x40021000

08004010 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d101      	bne.n	8004022 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e049      	b.n	80040b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d106      	bne.n	800403c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f7fc fd92 	bl	8000b60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2202      	movs	r2, #2
 8004040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	3304      	adds	r3, #4
 800404c:	4619      	mov	r1, r3
 800404e:	4610      	mov	r0, r2
 8004050:	f000 fb7a 	bl	8004748 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}

080040be <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80040be:	b580      	push	{r7, lr}
 80040c0:	b082      	sub	sp, #8
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d101      	bne.n	80040d0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e049      	b.n	8004164 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d106      	bne.n	80040ea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 f841 	bl	800416c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2202      	movs	r2, #2
 80040ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	3304      	adds	r3, #4
 80040fa:	4619      	mov	r1, r3
 80040fc:	4610      	mov	r0, r2
 80040fe:	f000 fb23 	bl	8004748 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2201      	movs	r2, #1
 8004106:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2201      	movs	r2, #1
 800410e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2201      	movs	r2, #1
 8004116:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2201      	movs	r2, #1
 800411e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2201      	movs	r2, #1
 8004126:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2201      	movs	r2, #1
 800412e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2201      	movs	r2, #1
 8004136:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2201      	movs	r2, #1
 800413e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2201      	movs	r2, #1
 800414e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2201      	movs	r2, #1
 800415e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004162:	2300      	movs	r3, #0
}
 8004164:	4618      	mov	r0, r3
 8004166:	3708      	adds	r7, #8
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004174:	bf00      	nop
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d109      	bne.n	80041a4 <HAL_TIM_PWM_Start+0x24>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004196:	b2db      	uxtb	r3, r3
 8004198:	2b01      	cmp	r3, #1
 800419a:	bf14      	ite	ne
 800419c:	2301      	movne	r3, #1
 800419e:	2300      	moveq	r3, #0
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	e03c      	b.n	800421e <HAL_TIM_PWM_Start+0x9e>
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	2b04      	cmp	r3, #4
 80041a8:	d109      	bne.n	80041be <HAL_TIM_PWM_Start+0x3e>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	bf14      	ite	ne
 80041b6:	2301      	movne	r3, #1
 80041b8:	2300      	moveq	r3, #0
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	e02f      	b.n	800421e <HAL_TIM_PWM_Start+0x9e>
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	2b08      	cmp	r3, #8
 80041c2:	d109      	bne.n	80041d8 <HAL_TIM_PWM_Start+0x58>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	bf14      	ite	ne
 80041d0:	2301      	movne	r3, #1
 80041d2:	2300      	moveq	r3, #0
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	e022      	b.n	800421e <HAL_TIM_PWM_Start+0x9e>
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	2b0c      	cmp	r3, #12
 80041dc:	d109      	bne.n	80041f2 <HAL_TIM_PWM_Start+0x72>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	bf14      	ite	ne
 80041ea:	2301      	movne	r3, #1
 80041ec:	2300      	moveq	r3, #0
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	e015      	b.n	800421e <HAL_TIM_PWM_Start+0x9e>
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	2b10      	cmp	r3, #16
 80041f6:	d109      	bne.n	800420c <HAL_TIM_PWM_Start+0x8c>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	2b01      	cmp	r3, #1
 8004202:	bf14      	ite	ne
 8004204:	2301      	movne	r3, #1
 8004206:	2300      	moveq	r3, #0
 8004208:	b2db      	uxtb	r3, r3
 800420a:	e008      	b.n	800421e <HAL_TIM_PWM_Start+0x9e>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004212:	b2db      	uxtb	r3, r3
 8004214:	2b01      	cmp	r3, #1
 8004216:	bf14      	ite	ne
 8004218:	2301      	movne	r3, #1
 800421a:	2300      	moveq	r3, #0
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b00      	cmp	r3, #0
 8004220:	d001      	beq.n	8004226 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e09c      	b.n	8004360 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d104      	bne.n	8004236 <HAL_TIM_PWM_Start+0xb6>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2202      	movs	r2, #2
 8004230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004234:	e023      	b.n	800427e <HAL_TIM_PWM_Start+0xfe>
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	2b04      	cmp	r3, #4
 800423a:	d104      	bne.n	8004246 <HAL_TIM_PWM_Start+0xc6>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2202      	movs	r2, #2
 8004240:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004244:	e01b      	b.n	800427e <HAL_TIM_PWM_Start+0xfe>
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	2b08      	cmp	r3, #8
 800424a:	d104      	bne.n	8004256 <HAL_TIM_PWM_Start+0xd6>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2202      	movs	r2, #2
 8004250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004254:	e013      	b.n	800427e <HAL_TIM_PWM_Start+0xfe>
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	2b0c      	cmp	r3, #12
 800425a:	d104      	bne.n	8004266 <HAL_TIM_PWM_Start+0xe6>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2202      	movs	r2, #2
 8004260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004264:	e00b      	b.n	800427e <HAL_TIM_PWM_Start+0xfe>
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	2b10      	cmp	r3, #16
 800426a:	d104      	bne.n	8004276 <HAL_TIM_PWM_Start+0xf6>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2202      	movs	r2, #2
 8004270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004274:	e003      	b.n	800427e <HAL_TIM_PWM_Start+0xfe>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2202      	movs	r2, #2
 800427a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2201      	movs	r2, #1
 8004284:	6839      	ldr	r1, [r7, #0]
 8004286:	4618      	mov	r0, r3
 8004288:	f000 fe68 	bl	8004f5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a35      	ldr	r2, [pc, #212]	; (8004368 <HAL_TIM_PWM_Start+0x1e8>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d013      	beq.n	80042be <HAL_TIM_PWM_Start+0x13e>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a34      	ldr	r2, [pc, #208]	; (800436c <HAL_TIM_PWM_Start+0x1ec>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d00e      	beq.n	80042be <HAL_TIM_PWM_Start+0x13e>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a32      	ldr	r2, [pc, #200]	; (8004370 <HAL_TIM_PWM_Start+0x1f0>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d009      	beq.n	80042be <HAL_TIM_PWM_Start+0x13e>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a31      	ldr	r2, [pc, #196]	; (8004374 <HAL_TIM_PWM_Start+0x1f4>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d004      	beq.n	80042be <HAL_TIM_PWM_Start+0x13e>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a2f      	ldr	r2, [pc, #188]	; (8004378 <HAL_TIM_PWM_Start+0x1f8>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d101      	bne.n	80042c2 <HAL_TIM_PWM_Start+0x142>
 80042be:	2301      	movs	r3, #1
 80042c0:	e000      	b.n	80042c4 <HAL_TIM_PWM_Start+0x144>
 80042c2:	2300      	movs	r3, #0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d007      	beq.n	80042d8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042d6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a22      	ldr	r2, [pc, #136]	; (8004368 <HAL_TIM_PWM_Start+0x1e8>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d01d      	beq.n	800431e <HAL_TIM_PWM_Start+0x19e>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ea:	d018      	beq.n	800431e <HAL_TIM_PWM_Start+0x19e>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a22      	ldr	r2, [pc, #136]	; (800437c <HAL_TIM_PWM_Start+0x1fc>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d013      	beq.n	800431e <HAL_TIM_PWM_Start+0x19e>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a21      	ldr	r2, [pc, #132]	; (8004380 <HAL_TIM_PWM_Start+0x200>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d00e      	beq.n	800431e <HAL_TIM_PWM_Start+0x19e>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a1f      	ldr	r2, [pc, #124]	; (8004384 <HAL_TIM_PWM_Start+0x204>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d009      	beq.n	800431e <HAL_TIM_PWM_Start+0x19e>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a17      	ldr	r2, [pc, #92]	; (800436c <HAL_TIM_PWM_Start+0x1ec>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d004      	beq.n	800431e <HAL_TIM_PWM_Start+0x19e>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a15      	ldr	r2, [pc, #84]	; (8004370 <HAL_TIM_PWM_Start+0x1f0>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d115      	bne.n	800434a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	689a      	ldr	r2, [r3, #8]
 8004324:	4b18      	ldr	r3, [pc, #96]	; (8004388 <HAL_TIM_PWM_Start+0x208>)
 8004326:	4013      	ands	r3, r2
 8004328:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2b06      	cmp	r3, #6
 800432e:	d015      	beq.n	800435c <HAL_TIM_PWM_Start+0x1dc>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004336:	d011      	beq.n	800435c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f042 0201 	orr.w	r2, r2, #1
 8004346:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004348:	e008      	b.n	800435c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f042 0201 	orr.w	r2, r2, #1
 8004358:	601a      	str	r2, [r3, #0]
 800435a:	e000      	b.n	800435e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800435c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800435e:	2300      	movs	r3, #0
}
 8004360:	4618      	mov	r0, r3
 8004362:	3710      	adds	r7, #16
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}
 8004368:	40012c00 	.word	0x40012c00
 800436c:	40013400 	.word	0x40013400
 8004370:	40014000 	.word	0x40014000
 8004374:	40014400 	.word	0x40014400
 8004378:	40014800 	.word	0x40014800
 800437c:	40000400 	.word	0x40000400
 8004380:	40000800 	.word	0x40000800
 8004384:	40000c00 	.word	0x40000c00
 8004388:	00010007 	.word	0x00010007

0800438c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b086      	sub	sp, #24
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004398:	2300      	movs	r3, #0
 800439a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d101      	bne.n	80043aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80043a6:	2302      	movs	r3, #2
 80043a8:	e0ff      	b.n	80045aa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2201      	movs	r2, #1
 80043ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2b14      	cmp	r3, #20
 80043b6:	f200 80f0 	bhi.w	800459a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80043ba:	a201      	add	r2, pc, #4	; (adr r2, 80043c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80043bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c0:	08004415 	.word	0x08004415
 80043c4:	0800459b 	.word	0x0800459b
 80043c8:	0800459b 	.word	0x0800459b
 80043cc:	0800459b 	.word	0x0800459b
 80043d0:	08004455 	.word	0x08004455
 80043d4:	0800459b 	.word	0x0800459b
 80043d8:	0800459b 	.word	0x0800459b
 80043dc:	0800459b 	.word	0x0800459b
 80043e0:	08004497 	.word	0x08004497
 80043e4:	0800459b 	.word	0x0800459b
 80043e8:	0800459b 	.word	0x0800459b
 80043ec:	0800459b 	.word	0x0800459b
 80043f0:	080044d7 	.word	0x080044d7
 80043f4:	0800459b 	.word	0x0800459b
 80043f8:	0800459b 	.word	0x0800459b
 80043fc:	0800459b 	.word	0x0800459b
 8004400:	08004519 	.word	0x08004519
 8004404:	0800459b 	.word	0x0800459b
 8004408:	0800459b 	.word	0x0800459b
 800440c:	0800459b 	.word	0x0800459b
 8004410:	08004559 	.word	0x08004559
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68b9      	ldr	r1, [r7, #8]
 800441a:	4618      	mov	r0, r3
 800441c:	f000 fa2e 	bl	800487c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	699a      	ldr	r2, [r3, #24]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f042 0208 	orr.w	r2, r2, #8
 800442e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	699a      	ldr	r2, [r3, #24]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f022 0204 	bic.w	r2, r2, #4
 800443e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6999      	ldr	r1, [r3, #24]
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	691a      	ldr	r2, [r3, #16]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	430a      	orrs	r2, r1
 8004450:	619a      	str	r2, [r3, #24]
      break;
 8004452:	e0a5      	b.n	80045a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68b9      	ldr	r1, [r7, #8]
 800445a:	4618      	mov	r0, r3
 800445c:	f000 fa9e 	bl	800499c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	699a      	ldr	r2, [r3, #24]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800446e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	699a      	ldr	r2, [r3, #24]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800447e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	6999      	ldr	r1, [r3, #24]
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	021a      	lsls	r2, r3, #8
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	430a      	orrs	r2, r1
 8004492:	619a      	str	r2, [r3, #24]
      break;
 8004494:	e084      	b.n	80045a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68b9      	ldr	r1, [r7, #8]
 800449c:	4618      	mov	r0, r3
 800449e:	f000 fb07 	bl	8004ab0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	69da      	ldr	r2, [r3, #28]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f042 0208 	orr.w	r2, r2, #8
 80044b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	69da      	ldr	r2, [r3, #28]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f022 0204 	bic.w	r2, r2, #4
 80044c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	69d9      	ldr	r1, [r3, #28]
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	691a      	ldr	r2, [r3, #16]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	430a      	orrs	r2, r1
 80044d2:	61da      	str	r2, [r3, #28]
      break;
 80044d4:	e064      	b.n	80045a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68b9      	ldr	r1, [r7, #8]
 80044dc:	4618      	mov	r0, r3
 80044de:	f000 fb6f 	bl	8004bc0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	69da      	ldr	r2, [r3, #28]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	69da      	ldr	r2, [r3, #28]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004500:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	69d9      	ldr	r1, [r3, #28]
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	021a      	lsls	r2, r3, #8
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	430a      	orrs	r2, r1
 8004514:	61da      	str	r2, [r3, #28]
      break;
 8004516:	e043      	b.n	80045a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68b9      	ldr	r1, [r7, #8]
 800451e:	4618      	mov	r0, r3
 8004520:	f000 fbb8 	bl	8004c94 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f042 0208 	orr.w	r2, r2, #8
 8004532:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f022 0204 	bic.w	r2, r2, #4
 8004542:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	691a      	ldr	r2, [r3, #16]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	430a      	orrs	r2, r1
 8004554:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004556:	e023      	b.n	80045a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68b9      	ldr	r1, [r7, #8]
 800455e:	4618      	mov	r0, r3
 8004560:	f000 fbfc 	bl	8004d5c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004572:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004582:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	021a      	lsls	r2, r3, #8
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	430a      	orrs	r2, r1
 8004596:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004598:	e002      	b.n	80045a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	75fb      	strb	r3, [r7, #23]
      break;
 800459e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3718      	adds	r7, #24
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop

080045b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045be:	2300      	movs	r3, #0
 80045c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d101      	bne.n	80045d0 <HAL_TIM_ConfigClockSource+0x1c>
 80045cc:	2302      	movs	r3, #2
 80045ce:	e0b6      	b.n	800473e <HAL_TIM_ConfigClockSource+0x18a>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2202      	movs	r2, #2
 80045dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80045f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68ba      	ldr	r2, [r7, #8]
 8004602:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800460c:	d03e      	beq.n	800468c <HAL_TIM_ConfigClockSource+0xd8>
 800460e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004612:	f200 8087 	bhi.w	8004724 <HAL_TIM_ConfigClockSource+0x170>
 8004616:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800461a:	f000 8086 	beq.w	800472a <HAL_TIM_ConfigClockSource+0x176>
 800461e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004622:	d87f      	bhi.n	8004724 <HAL_TIM_ConfigClockSource+0x170>
 8004624:	2b70      	cmp	r3, #112	; 0x70
 8004626:	d01a      	beq.n	800465e <HAL_TIM_ConfigClockSource+0xaa>
 8004628:	2b70      	cmp	r3, #112	; 0x70
 800462a:	d87b      	bhi.n	8004724 <HAL_TIM_ConfigClockSource+0x170>
 800462c:	2b60      	cmp	r3, #96	; 0x60
 800462e:	d050      	beq.n	80046d2 <HAL_TIM_ConfigClockSource+0x11e>
 8004630:	2b60      	cmp	r3, #96	; 0x60
 8004632:	d877      	bhi.n	8004724 <HAL_TIM_ConfigClockSource+0x170>
 8004634:	2b50      	cmp	r3, #80	; 0x50
 8004636:	d03c      	beq.n	80046b2 <HAL_TIM_ConfigClockSource+0xfe>
 8004638:	2b50      	cmp	r3, #80	; 0x50
 800463a:	d873      	bhi.n	8004724 <HAL_TIM_ConfigClockSource+0x170>
 800463c:	2b40      	cmp	r3, #64	; 0x40
 800463e:	d058      	beq.n	80046f2 <HAL_TIM_ConfigClockSource+0x13e>
 8004640:	2b40      	cmp	r3, #64	; 0x40
 8004642:	d86f      	bhi.n	8004724 <HAL_TIM_ConfigClockSource+0x170>
 8004644:	2b30      	cmp	r3, #48	; 0x30
 8004646:	d064      	beq.n	8004712 <HAL_TIM_ConfigClockSource+0x15e>
 8004648:	2b30      	cmp	r3, #48	; 0x30
 800464a:	d86b      	bhi.n	8004724 <HAL_TIM_ConfigClockSource+0x170>
 800464c:	2b20      	cmp	r3, #32
 800464e:	d060      	beq.n	8004712 <HAL_TIM_ConfigClockSource+0x15e>
 8004650:	2b20      	cmp	r3, #32
 8004652:	d867      	bhi.n	8004724 <HAL_TIM_ConfigClockSource+0x170>
 8004654:	2b00      	cmp	r3, #0
 8004656:	d05c      	beq.n	8004712 <HAL_TIM_ConfigClockSource+0x15e>
 8004658:	2b10      	cmp	r3, #16
 800465a:	d05a      	beq.n	8004712 <HAL_TIM_ConfigClockSource+0x15e>
 800465c:	e062      	b.n	8004724 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6818      	ldr	r0, [r3, #0]
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	6899      	ldr	r1, [r3, #8]
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	685a      	ldr	r2, [r3, #4]
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	f000 fc55 	bl	8004f1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004680:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68ba      	ldr	r2, [r7, #8]
 8004688:	609a      	str	r2, [r3, #8]
      break;
 800468a:	e04f      	b.n	800472c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6818      	ldr	r0, [r3, #0]
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	6899      	ldr	r1, [r3, #8]
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	685a      	ldr	r2, [r3, #4]
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	f000 fc3e 	bl	8004f1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	689a      	ldr	r2, [r3, #8]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046ae:	609a      	str	r2, [r3, #8]
      break;
 80046b0:	e03c      	b.n	800472c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6818      	ldr	r0, [r3, #0]
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	6859      	ldr	r1, [r3, #4]
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	461a      	mov	r2, r3
 80046c0:	f000 fbb2 	bl	8004e28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2150      	movs	r1, #80	; 0x50
 80046ca:	4618      	mov	r0, r3
 80046cc:	f000 fc0b 	bl	8004ee6 <TIM_ITRx_SetConfig>
      break;
 80046d0:	e02c      	b.n	800472c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6818      	ldr	r0, [r3, #0]
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	6859      	ldr	r1, [r3, #4]
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	461a      	mov	r2, r3
 80046e0:	f000 fbd1 	bl	8004e86 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2160      	movs	r1, #96	; 0x60
 80046ea:	4618      	mov	r0, r3
 80046ec:	f000 fbfb 	bl	8004ee6 <TIM_ITRx_SetConfig>
      break;
 80046f0:	e01c      	b.n	800472c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6818      	ldr	r0, [r3, #0]
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	6859      	ldr	r1, [r3, #4]
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	461a      	mov	r2, r3
 8004700:	f000 fb92 	bl	8004e28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2140      	movs	r1, #64	; 0x40
 800470a:	4618      	mov	r0, r3
 800470c:	f000 fbeb 	bl	8004ee6 <TIM_ITRx_SetConfig>
      break;
 8004710:	e00c      	b.n	800472c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4619      	mov	r1, r3
 800471c:	4610      	mov	r0, r2
 800471e:	f000 fbe2 	bl	8004ee6 <TIM_ITRx_SetConfig>
      break;
 8004722:	e003      	b.n	800472c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	73fb      	strb	r3, [r7, #15]
      break;
 8004728:	e000      	b.n	800472c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800472a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800473c:	7bfb      	ldrb	r3, [r7, #15]
}
 800473e:	4618      	mov	r0, r3
 8004740:	3710      	adds	r7, #16
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
	...

08004748 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004748:	b480      	push	{r7}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a40      	ldr	r2, [pc, #256]	; (800485c <TIM_Base_SetConfig+0x114>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d013      	beq.n	8004788 <TIM_Base_SetConfig+0x40>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004766:	d00f      	beq.n	8004788 <TIM_Base_SetConfig+0x40>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a3d      	ldr	r2, [pc, #244]	; (8004860 <TIM_Base_SetConfig+0x118>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d00b      	beq.n	8004788 <TIM_Base_SetConfig+0x40>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a3c      	ldr	r2, [pc, #240]	; (8004864 <TIM_Base_SetConfig+0x11c>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d007      	beq.n	8004788 <TIM_Base_SetConfig+0x40>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4a3b      	ldr	r2, [pc, #236]	; (8004868 <TIM_Base_SetConfig+0x120>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d003      	beq.n	8004788 <TIM_Base_SetConfig+0x40>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4a3a      	ldr	r2, [pc, #232]	; (800486c <TIM_Base_SetConfig+0x124>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d108      	bne.n	800479a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800478e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	68fa      	ldr	r2, [r7, #12]
 8004796:	4313      	orrs	r3, r2
 8004798:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a2f      	ldr	r2, [pc, #188]	; (800485c <TIM_Base_SetConfig+0x114>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d01f      	beq.n	80047e2 <TIM_Base_SetConfig+0x9a>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047a8:	d01b      	beq.n	80047e2 <TIM_Base_SetConfig+0x9a>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a2c      	ldr	r2, [pc, #176]	; (8004860 <TIM_Base_SetConfig+0x118>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d017      	beq.n	80047e2 <TIM_Base_SetConfig+0x9a>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a2b      	ldr	r2, [pc, #172]	; (8004864 <TIM_Base_SetConfig+0x11c>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d013      	beq.n	80047e2 <TIM_Base_SetConfig+0x9a>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a2a      	ldr	r2, [pc, #168]	; (8004868 <TIM_Base_SetConfig+0x120>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d00f      	beq.n	80047e2 <TIM_Base_SetConfig+0x9a>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a29      	ldr	r2, [pc, #164]	; (800486c <TIM_Base_SetConfig+0x124>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d00b      	beq.n	80047e2 <TIM_Base_SetConfig+0x9a>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a28      	ldr	r2, [pc, #160]	; (8004870 <TIM_Base_SetConfig+0x128>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d007      	beq.n	80047e2 <TIM_Base_SetConfig+0x9a>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a27      	ldr	r2, [pc, #156]	; (8004874 <TIM_Base_SetConfig+0x12c>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d003      	beq.n	80047e2 <TIM_Base_SetConfig+0x9a>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a26      	ldr	r2, [pc, #152]	; (8004878 <TIM_Base_SetConfig+0x130>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d108      	bne.n	80047f4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	4313      	orrs	r3, r2
 8004800:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	689a      	ldr	r2, [r3, #8]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4a10      	ldr	r2, [pc, #64]	; (800485c <TIM_Base_SetConfig+0x114>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d00f      	beq.n	8004840 <TIM_Base_SetConfig+0xf8>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a12      	ldr	r2, [pc, #72]	; (800486c <TIM_Base_SetConfig+0x124>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d00b      	beq.n	8004840 <TIM_Base_SetConfig+0xf8>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a11      	ldr	r2, [pc, #68]	; (8004870 <TIM_Base_SetConfig+0x128>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d007      	beq.n	8004840 <TIM_Base_SetConfig+0xf8>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a10      	ldr	r2, [pc, #64]	; (8004874 <TIM_Base_SetConfig+0x12c>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d003      	beq.n	8004840 <TIM_Base_SetConfig+0xf8>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a0f      	ldr	r2, [pc, #60]	; (8004878 <TIM_Base_SetConfig+0x130>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d103      	bne.n	8004848 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	691a      	ldr	r2, [r3, #16]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	615a      	str	r2, [r3, #20]
}
 800484e:	bf00      	nop
 8004850:	3714      	adds	r7, #20
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	40012c00 	.word	0x40012c00
 8004860:	40000400 	.word	0x40000400
 8004864:	40000800 	.word	0x40000800
 8004868:	40000c00 	.word	0x40000c00
 800486c:	40013400 	.word	0x40013400
 8004870:	40014000 	.word	0x40014000
 8004874:	40014400 	.word	0x40014400
 8004878:	40014800 	.word	0x40014800

0800487c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800487c:	b480      	push	{r7}
 800487e:	b087      	sub	sp, #28
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	f023 0201 	bic.w	r2, r3, #1
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f023 0303 	bic.w	r3, r3, #3
 80048b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	4313      	orrs	r3, r2
 80048c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	f023 0302 	bic.w	r3, r3, #2
 80048c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	697a      	ldr	r2, [r7, #20]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a2c      	ldr	r2, [pc, #176]	; (8004988 <TIM_OC1_SetConfig+0x10c>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d00f      	beq.n	80048fc <TIM_OC1_SetConfig+0x80>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a2b      	ldr	r2, [pc, #172]	; (800498c <TIM_OC1_SetConfig+0x110>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d00b      	beq.n	80048fc <TIM_OC1_SetConfig+0x80>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a2a      	ldr	r2, [pc, #168]	; (8004990 <TIM_OC1_SetConfig+0x114>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d007      	beq.n	80048fc <TIM_OC1_SetConfig+0x80>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a29      	ldr	r2, [pc, #164]	; (8004994 <TIM_OC1_SetConfig+0x118>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d003      	beq.n	80048fc <TIM_OC1_SetConfig+0x80>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a28      	ldr	r2, [pc, #160]	; (8004998 <TIM_OC1_SetConfig+0x11c>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d10c      	bne.n	8004916 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	f023 0308 	bic.w	r3, r3, #8
 8004902:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	697a      	ldr	r2, [r7, #20]
 800490a:	4313      	orrs	r3, r2
 800490c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	f023 0304 	bic.w	r3, r3, #4
 8004914:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a1b      	ldr	r2, [pc, #108]	; (8004988 <TIM_OC1_SetConfig+0x10c>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d00f      	beq.n	800493e <TIM_OC1_SetConfig+0xc2>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a1a      	ldr	r2, [pc, #104]	; (800498c <TIM_OC1_SetConfig+0x110>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d00b      	beq.n	800493e <TIM_OC1_SetConfig+0xc2>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a19      	ldr	r2, [pc, #100]	; (8004990 <TIM_OC1_SetConfig+0x114>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d007      	beq.n	800493e <TIM_OC1_SetConfig+0xc2>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a18      	ldr	r2, [pc, #96]	; (8004994 <TIM_OC1_SetConfig+0x118>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d003      	beq.n	800493e <TIM_OC1_SetConfig+0xc2>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a17      	ldr	r2, [pc, #92]	; (8004998 <TIM_OC1_SetConfig+0x11c>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d111      	bne.n	8004962 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004944:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800494c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	695b      	ldr	r3, [r3, #20]
 8004952:	693a      	ldr	r2, [r7, #16]
 8004954:	4313      	orrs	r3, r2
 8004956:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	699b      	ldr	r3, [r3, #24]
 800495c:	693a      	ldr	r2, [r7, #16]
 800495e:	4313      	orrs	r3, r2
 8004960:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	685a      	ldr	r2, [r3, #4]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	697a      	ldr	r2, [r7, #20]
 800497a:	621a      	str	r2, [r3, #32]
}
 800497c:	bf00      	nop
 800497e:	371c      	adds	r7, #28
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr
 8004988:	40012c00 	.word	0x40012c00
 800498c:	40013400 	.word	0x40013400
 8004990:	40014000 	.word	0x40014000
 8004994:	40014400 	.word	0x40014400
 8004998:	40014800 	.word	0x40014800

0800499c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800499c:	b480      	push	{r7}
 800499e:	b087      	sub	sp, #28
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a1b      	ldr	r3, [r3, #32]
 80049aa:	f023 0210 	bic.w	r2, r3, #16
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a1b      	ldr	r3, [r3, #32]
 80049b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	021b      	lsls	r3, r3, #8
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	f023 0320 	bic.w	r3, r3, #32
 80049ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	011b      	lsls	r3, r3, #4
 80049f2:	697a      	ldr	r2, [r7, #20]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a28      	ldr	r2, [pc, #160]	; (8004a9c <TIM_OC2_SetConfig+0x100>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d003      	beq.n	8004a08 <TIM_OC2_SetConfig+0x6c>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a27      	ldr	r2, [pc, #156]	; (8004aa0 <TIM_OC2_SetConfig+0x104>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d10d      	bne.n	8004a24 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	011b      	lsls	r3, r3, #4
 8004a16:	697a      	ldr	r2, [r7, #20]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a1d      	ldr	r2, [pc, #116]	; (8004a9c <TIM_OC2_SetConfig+0x100>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d00f      	beq.n	8004a4c <TIM_OC2_SetConfig+0xb0>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a1c      	ldr	r2, [pc, #112]	; (8004aa0 <TIM_OC2_SetConfig+0x104>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d00b      	beq.n	8004a4c <TIM_OC2_SetConfig+0xb0>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a1b      	ldr	r2, [pc, #108]	; (8004aa4 <TIM_OC2_SetConfig+0x108>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d007      	beq.n	8004a4c <TIM_OC2_SetConfig+0xb0>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a1a      	ldr	r2, [pc, #104]	; (8004aa8 <TIM_OC2_SetConfig+0x10c>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d003      	beq.n	8004a4c <TIM_OC2_SetConfig+0xb0>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a19      	ldr	r2, [pc, #100]	; (8004aac <TIM_OC2_SetConfig+0x110>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d113      	bne.n	8004a74 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	695b      	ldr	r3, [r3, #20]
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	693a      	ldr	r2, [r7, #16]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	693a      	ldr	r2, [r7, #16]
 8004a78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	685a      	ldr	r2, [r3, #4]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	697a      	ldr	r2, [r7, #20]
 8004a8c:	621a      	str	r2, [r3, #32]
}
 8004a8e:	bf00      	nop
 8004a90:	371c      	adds	r7, #28
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	40012c00 	.word	0x40012c00
 8004aa0:	40013400 	.word	0x40013400
 8004aa4:	40014000 	.word	0x40014000
 8004aa8:	40014400 	.word	0x40014400
 8004aac:	40014800 	.word	0x40014800

08004ab0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b087      	sub	sp, #28
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	69db      	ldr	r3, [r3, #28]
 8004ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ae2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f023 0303 	bic.w	r3, r3, #3
 8004aea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004afc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	021b      	lsls	r3, r3, #8
 8004b04:	697a      	ldr	r2, [r7, #20]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a27      	ldr	r2, [pc, #156]	; (8004bac <TIM_OC3_SetConfig+0xfc>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d003      	beq.n	8004b1a <TIM_OC3_SetConfig+0x6a>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a26      	ldr	r2, [pc, #152]	; (8004bb0 <TIM_OC3_SetConfig+0x100>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d10d      	bne.n	8004b36 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	021b      	lsls	r3, r3, #8
 8004b28:	697a      	ldr	r2, [r7, #20]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a1c      	ldr	r2, [pc, #112]	; (8004bac <TIM_OC3_SetConfig+0xfc>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d00f      	beq.n	8004b5e <TIM_OC3_SetConfig+0xae>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a1b      	ldr	r2, [pc, #108]	; (8004bb0 <TIM_OC3_SetConfig+0x100>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d00b      	beq.n	8004b5e <TIM_OC3_SetConfig+0xae>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a1a      	ldr	r2, [pc, #104]	; (8004bb4 <TIM_OC3_SetConfig+0x104>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d007      	beq.n	8004b5e <TIM_OC3_SetConfig+0xae>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a19      	ldr	r2, [pc, #100]	; (8004bb8 <TIM_OC3_SetConfig+0x108>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d003      	beq.n	8004b5e <TIM_OC3_SetConfig+0xae>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a18      	ldr	r2, [pc, #96]	; (8004bbc <TIM_OC3_SetConfig+0x10c>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d113      	bne.n	8004b86 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	011b      	lsls	r3, r3, #4
 8004b74:	693a      	ldr	r2, [r7, #16]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	011b      	lsls	r3, r3, #4
 8004b80:	693a      	ldr	r2, [r7, #16]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	693a      	ldr	r2, [r7, #16]
 8004b8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	685a      	ldr	r2, [r3, #4]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	621a      	str	r2, [r3, #32]
}
 8004ba0:	bf00      	nop
 8004ba2:	371c      	adds	r7, #28
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr
 8004bac:	40012c00 	.word	0x40012c00
 8004bb0:	40013400 	.word	0x40013400
 8004bb4:	40014000 	.word	0x40014000
 8004bb8:	40014400 	.word	0x40014400
 8004bbc:	40014800 	.word	0x40014800

08004bc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b087      	sub	sp, #28
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a1b      	ldr	r3, [r3, #32]
 8004bce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a1b      	ldr	r3, [r3, #32]
 8004bda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	69db      	ldr	r3, [r3, #28]
 8004be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	021b      	lsls	r3, r3, #8
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	031b      	lsls	r3, r3, #12
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a18      	ldr	r2, [pc, #96]	; (8004c80 <TIM_OC4_SetConfig+0xc0>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d00f      	beq.n	8004c44 <TIM_OC4_SetConfig+0x84>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a17      	ldr	r2, [pc, #92]	; (8004c84 <TIM_OC4_SetConfig+0xc4>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d00b      	beq.n	8004c44 <TIM_OC4_SetConfig+0x84>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a16      	ldr	r2, [pc, #88]	; (8004c88 <TIM_OC4_SetConfig+0xc8>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d007      	beq.n	8004c44 <TIM_OC4_SetConfig+0x84>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4a15      	ldr	r2, [pc, #84]	; (8004c8c <TIM_OC4_SetConfig+0xcc>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d003      	beq.n	8004c44 <TIM_OC4_SetConfig+0x84>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4a14      	ldr	r2, [pc, #80]	; (8004c90 <TIM_OC4_SetConfig+0xd0>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d109      	bne.n	8004c58 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	695b      	ldr	r3, [r3, #20]
 8004c50:	019b      	lsls	r3, r3, #6
 8004c52:	697a      	ldr	r2, [r7, #20]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	697a      	ldr	r2, [r7, #20]
 8004c5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	685a      	ldr	r2, [r3, #4]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	693a      	ldr	r2, [r7, #16]
 8004c70:	621a      	str	r2, [r3, #32]
}
 8004c72:	bf00      	nop
 8004c74:	371c      	adds	r7, #28
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop
 8004c80:	40012c00 	.word	0x40012c00
 8004c84:	40013400 	.word	0x40013400
 8004c88:	40014000 	.word	0x40014000
 8004c8c:	40014400 	.word	0x40014400
 8004c90:	40014800 	.word	0x40014800

08004c94 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b087      	sub	sp, #28
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68fa      	ldr	r2, [r7, #12]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004cd8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	041b      	lsls	r3, r3, #16
 8004ce0:	693a      	ldr	r2, [r7, #16]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a17      	ldr	r2, [pc, #92]	; (8004d48 <TIM_OC5_SetConfig+0xb4>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d00f      	beq.n	8004d0e <TIM_OC5_SetConfig+0x7a>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a16      	ldr	r2, [pc, #88]	; (8004d4c <TIM_OC5_SetConfig+0xb8>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d00b      	beq.n	8004d0e <TIM_OC5_SetConfig+0x7a>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a15      	ldr	r2, [pc, #84]	; (8004d50 <TIM_OC5_SetConfig+0xbc>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d007      	beq.n	8004d0e <TIM_OC5_SetConfig+0x7a>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a14      	ldr	r2, [pc, #80]	; (8004d54 <TIM_OC5_SetConfig+0xc0>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d003      	beq.n	8004d0e <TIM_OC5_SetConfig+0x7a>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a13      	ldr	r2, [pc, #76]	; (8004d58 <TIM_OC5_SetConfig+0xc4>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d109      	bne.n	8004d22 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d14:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	695b      	ldr	r3, [r3, #20]
 8004d1a:	021b      	lsls	r3, r3, #8
 8004d1c:	697a      	ldr	r2, [r7, #20]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	697a      	ldr	r2, [r7, #20]
 8004d26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	685a      	ldr	r2, [r3, #4]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	693a      	ldr	r2, [r7, #16]
 8004d3a:	621a      	str	r2, [r3, #32]
}
 8004d3c:	bf00      	nop
 8004d3e:	371c      	adds	r7, #28
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr
 8004d48:	40012c00 	.word	0x40012c00
 8004d4c:	40013400 	.word	0x40013400
 8004d50:	40014000 	.word	0x40014000
 8004d54:	40014400 	.word	0x40014400
 8004d58:	40014800 	.word	0x40014800

08004d5c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b087      	sub	sp, #28
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a1b      	ldr	r3, [r3, #32]
 8004d76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	021b      	lsls	r3, r3, #8
 8004d96:	68fa      	ldr	r2, [r7, #12]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004da2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	051b      	lsls	r3, r3, #20
 8004daa:	693a      	ldr	r2, [r7, #16]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a18      	ldr	r2, [pc, #96]	; (8004e14 <TIM_OC6_SetConfig+0xb8>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d00f      	beq.n	8004dd8 <TIM_OC6_SetConfig+0x7c>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a17      	ldr	r2, [pc, #92]	; (8004e18 <TIM_OC6_SetConfig+0xbc>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d00b      	beq.n	8004dd8 <TIM_OC6_SetConfig+0x7c>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a16      	ldr	r2, [pc, #88]	; (8004e1c <TIM_OC6_SetConfig+0xc0>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d007      	beq.n	8004dd8 <TIM_OC6_SetConfig+0x7c>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a15      	ldr	r2, [pc, #84]	; (8004e20 <TIM_OC6_SetConfig+0xc4>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d003      	beq.n	8004dd8 <TIM_OC6_SetConfig+0x7c>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a14      	ldr	r2, [pc, #80]	; (8004e24 <TIM_OC6_SetConfig+0xc8>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d109      	bne.n	8004dec <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dde:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	695b      	ldr	r3, [r3, #20]
 8004de4:	029b      	lsls	r3, r3, #10
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	697a      	ldr	r2, [r7, #20]
 8004df0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	685a      	ldr	r2, [r3, #4]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	693a      	ldr	r2, [r7, #16]
 8004e04:	621a      	str	r2, [r3, #32]
}
 8004e06:	bf00      	nop
 8004e08:	371c      	adds	r7, #28
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	40012c00 	.word	0x40012c00
 8004e18:	40013400 	.word	0x40013400
 8004e1c:	40014000 	.word	0x40014000
 8004e20:	40014400 	.word	0x40014400
 8004e24:	40014800 	.word	0x40014800

08004e28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b087      	sub	sp, #28
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6a1b      	ldr	r3, [r3, #32]
 8004e38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6a1b      	ldr	r3, [r3, #32]
 8004e3e:	f023 0201 	bic.w	r2, r3, #1
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	699b      	ldr	r3, [r3, #24]
 8004e4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	011b      	lsls	r3, r3, #4
 8004e58:	693a      	ldr	r2, [r7, #16]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	f023 030a 	bic.w	r3, r3, #10
 8004e64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e66:	697a      	ldr	r2, [r7, #20]
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	693a      	ldr	r2, [r7, #16]
 8004e72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	697a      	ldr	r2, [r7, #20]
 8004e78:	621a      	str	r2, [r3, #32]
}
 8004e7a:	bf00      	nop
 8004e7c:	371c      	adds	r7, #28
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr

08004e86 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e86:	b480      	push	{r7}
 8004e88:	b087      	sub	sp, #28
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	60f8      	str	r0, [r7, #12]
 8004e8e:	60b9      	str	r1, [r7, #8]
 8004e90:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6a1b      	ldr	r3, [r3, #32]
 8004e96:	f023 0210 	bic.w	r2, r3, #16
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6a1b      	ldr	r3, [r3, #32]
 8004ea8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004eb0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	031b      	lsls	r3, r3, #12
 8004eb6:	697a      	ldr	r2, [r7, #20]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ec2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	011b      	lsls	r3, r3, #4
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	697a      	ldr	r2, [r7, #20]
 8004ed2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	693a      	ldr	r2, [r7, #16]
 8004ed8:	621a      	str	r2, [r3, #32]
}
 8004eda:	bf00      	nop
 8004edc:	371c      	adds	r7, #28
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr

08004ee6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ee6:	b480      	push	{r7}
 8004ee8:	b085      	sub	sp, #20
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
 8004eee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004efc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004efe:	683a      	ldr	r2, [r7, #0]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	f043 0307 	orr.w	r3, r3, #7
 8004f08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	609a      	str	r2, [r3, #8]
}
 8004f10:	bf00      	nop
 8004f12:	3714      	adds	r7, #20
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b087      	sub	sp, #28
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	607a      	str	r2, [r7, #4]
 8004f28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	021a      	lsls	r2, r3, #8
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	431a      	orrs	r2, r3
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	697a      	ldr	r2, [r7, #20]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	697a      	ldr	r2, [r7, #20]
 8004f4e:	609a      	str	r2, [r3, #8]
}
 8004f50:	bf00      	nop
 8004f52:	371c      	adds	r7, #28
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b087      	sub	sp, #28
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	f003 031f 	and.w	r3, r3, #31
 8004f6e:	2201      	movs	r2, #1
 8004f70:	fa02 f303 	lsl.w	r3, r2, r3
 8004f74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6a1a      	ldr	r2, [r3, #32]
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	43db      	mvns	r3, r3
 8004f7e:	401a      	ands	r2, r3
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6a1a      	ldr	r2, [r3, #32]
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	f003 031f 	and.w	r3, r3, #31
 8004f8e:	6879      	ldr	r1, [r7, #4]
 8004f90:	fa01 f303 	lsl.w	r3, r1, r3
 8004f94:	431a      	orrs	r2, r3
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	621a      	str	r2, [r3, #32]
}
 8004f9a:	bf00      	nop
 8004f9c:	371c      	adds	r7, #28
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr
	...

08004fa8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b085      	sub	sp, #20
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d101      	bne.n	8004fc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fbc:	2302      	movs	r3, #2
 8004fbe:	e068      	b.n	8005092 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2202      	movs	r2, #2
 8004fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a2e      	ldr	r2, [pc, #184]	; (80050a0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d004      	beq.n	8004ff4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a2d      	ldr	r2, [pc, #180]	; (80050a4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d108      	bne.n	8005006 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004ffa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	4313      	orrs	r3, r2
 8005004:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800500c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	4313      	orrs	r3, r2
 8005016:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a1e      	ldr	r2, [pc, #120]	; (80050a0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d01d      	beq.n	8005066 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005032:	d018      	beq.n	8005066 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a1b      	ldr	r2, [pc, #108]	; (80050a8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d013      	beq.n	8005066 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a1a      	ldr	r2, [pc, #104]	; (80050ac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d00e      	beq.n	8005066 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a18      	ldr	r2, [pc, #96]	; (80050b0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d009      	beq.n	8005066 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a13      	ldr	r2, [pc, #76]	; (80050a4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d004      	beq.n	8005066 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a14      	ldr	r2, [pc, #80]	; (80050b4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d10c      	bne.n	8005080 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800506c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	68ba      	ldr	r2, [r7, #8]
 8005074:	4313      	orrs	r3, r2
 8005076:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68ba      	ldr	r2, [r7, #8]
 800507e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3714      	adds	r7, #20
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop
 80050a0:	40012c00 	.word	0x40012c00
 80050a4:	40013400 	.word	0x40013400
 80050a8:	40000400 	.word	0x40000400
 80050ac:	40000800 	.word	0x40000800
 80050b0:	40000c00 	.word	0x40000c00
 80050b4:	40014000 	.word	0x40014000

080050b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d101      	bne.n	80050ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e040      	b.n	800514c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d106      	bne.n	80050e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f7fb fd96 	bl	8000c0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2224      	movs	r2, #36	; 0x24
 80050e4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f022 0201 	bic.w	r2, r2, #1
 80050f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 f8c0 	bl	800527c <UART_SetConfig>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d101      	bne.n	8005106 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e022      	b.n	800514c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510a:	2b00      	cmp	r3, #0
 800510c:	d002      	beq.n	8005114 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 fb3e 	bl	8005790 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	685a      	ldr	r2, [r3, #4]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005122:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	689a      	ldr	r2, [r3, #8]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005132:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f042 0201 	orr.w	r2, r2, #1
 8005142:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 fbc5 	bl	80058d4 <UART_CheckIdleState>
 800514a:	4603      	mov	r3, r0
}
 800514c:	4618      	mov	r0, r3
 800514e:	3708      	adds	r7, #8
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b08a      	sub	sp, #40	; 0x28
 8005158:	af02      	add	r7, sp, #8
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	603b      	str	r3, [r7, #0]
 8005160:	4613      	mov	r3, r2
 8005162:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005168:	2b20      	cmp	r3, #32
 800516a:	f040 8082 	bne.w	8005272 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d002      	beq.n	800517a <HAL_UART_Transmit+0x26>
 8005174:	88fb      	ldrh	r3, [r7, #6]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d101      	bne.n	800517e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e07a      	b.n	8005274 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005184:	2b01      	cmp	r3, #1
 8005186:	d101      	bne.n	800518c <HAL_UART_Transmit+0x38>
 8005188:	2302      	movs	r3, #2
 800518a:	e073      	b.n	8005274 <HAL_UART_Transmit+0x120>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2200      	movs	r2, #0
 8005198:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2221      	movs	r2, #33	; 0x21
 80051a0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051a2:	f7fb ff35 	bl	8001010 <HAL_GetTick>
 80051a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	88fa      	ldrh	r2, [r7, #6]
 80051ac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	88fa      	ldrh	r2, [r7, #6]
 80051b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051c0:	d108      	bne.n	80051d4 <HAL_UART_Transmit+0x80>
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d104      	bne.n	80051d4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80051ca:	2300      	movs	r3, #0
 80051cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	61bb      	str	r3, [r7, #24]
 80051d2:	e003      	b.n	80051dc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051d8:	2300      	movs	r3, #0
 80051da:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80051e4:	e02d      	b.n	8005242 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	9300      	str	r3, [sp, #0]
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	2200      	movs	r2, #0
 80051ee:	2180      	movs	r1, #128	; 0x80
 80051f0:	68f8      	ldr	r0, [r7, #12]
 80051f2:	f000 fbb8 	bl	8005966 <UART_WaitOnFlagUntilTimeout>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d001      	beq.n	8005200 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80051fc:	2303      	movs	r3, #3
 80051fe:	e039      	b.n	8005274 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d10b      	bne.n	800521e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	881a      	ldrh	r2, [r3, #0]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005212:	b292      	uxth	r2, r2
 8005214:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	3302      	adds	r3, #2
 800521a:	61bb      	str	r3, [r7, #24]
 800521c:	e008      	b.n	8005230 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	781a      	ldrb	r2, [r3, #0]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	b292      	uxth	r2, r2
 8005228:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	3301      	adds	r3, #1
 800522e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005236:	b29b      	uxth	r3, r3
 8005238:	3b01      	subs	r3, #1
 800523a:	b29a      	uxth	r2, r3
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005248:	b29b      	uxth	r3, r3
 800524a:	2b00      	cmp	r3, #0
 800524c:	d1cb      	bne.n	80051e6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	9300      	str	r3, [sp, #0]
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	2200      	movs	r2, #0
 8005256:	2140      	movs	r1, #64	; 0x40
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f000 fb84 	bl	8005966 <UART_WaitOnFlagUntilTimeout>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d001      	beq.n	8005268 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005264:	2303      	movs	r3, #3
 8005266:	e005      	b.n	8005274 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2220      	movs	r2, #32
 800526c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800526e:	2300      	movs	r3, #0
 8005270:	e000      	b.n	8005274 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005272:	2302      	movs	r3, #2
  }
}
 8005274:	4618      	mov	r0, r3
 8005276:	3720      	adds	r7, #32
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800527c:	b5b0      	push	{r4, r5, r7, lr}
 800527e:	b088      	sub	sp, #32
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005284:	2300      	movs	r3, #0
 8005286:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	689a      	ldr	r2, [r3, #8]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	691b      	ldr	r3, [r3, #16]
 8005290:	431a      	orrs	r2, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	695b      	ldr	r3, [r3, #20]
 8005296:	431a      	orrs	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	69db      	ldr	r3, [r3, #28]
 800529c:	4313      	orrs	r3, r2
 800529e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	4bad      	ldr	r3, [pc, #692]	; (800555c <UART_SetConfig+0x2e0>)
 80052a8:	4013      	ands	r3, r2
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	6812      	ldr	r2, [r2, #0]
 80052ae:	69f9      	ldr	r1, [r7, #28]
 80052b0:	430b      	orrs	r3, r1
 80052b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	68da      	ldr	r2, [r3, #12]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	430a      	orrs	r2, r1
 80052c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	699b      	ldr	r3, [r3, #24]
 80052ce:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4aa2      	ldr	r2, [pc, #648]	; (8005560 <UART_SetConfig+0x2e4>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d004      	beq.n	80052e4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a1b      	ldr	r3, [r3, #32]
 80052de:	69fa      	ldr	r2, [r7, #28]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	69fa      	ldr	r2, [r7, #28]
 80052f4:	430a      	orrs	r2, r1
 80052f6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a99      	ldr	r2, [pc, #612]	; (8005564 <UART_SetConfig+0x2e8>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d121      	bne.n	8005346 <UART_SetConfig+0xca>
 8005302:	4b99      	ldr	r3, [pc, #612]	; (8005568 <UART_SetConfig+0x2ec>)
 8005304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005308:	f003 0303 	and.w	r3, r3, #3
 800530c:	2b03      	cmp	r3, #3
 800530e:	d817      	bhi.n	8005340 <UART_SetConfig+0xc4>
 8005310:	a201      	add	r2, pc, #4	; (adr r2, 8005318 <UART_SetConfig+0x9c>)
 8005312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005316:	bf00      	nop
 8005318:	08005329 	.word	0x08005329
 800531c:	08005335 	.word	0x08005335
 8005320:	0800532f 	.word	0x0800532f
 8005324:	0800533b 	.word	0x0800533b
 8005328:	2301      	movs	r3, #1
 800532a:	76fb      	strb	r3, [r7, #27]
 800532c:	e0e7      	b.n	80054fe <UART_SetConfig+0x282>
 800532e:	2302      	movs	r3, #2
 8005330:	76fb      	strb	r3, [r7, #27]
 8005332:	e0e4      	b.n	80054fe <UART_SetConfig+0x282>
 8005334:	2304      	movs	r3, #4
 8005336:	76fb      	strb	r3, [r7, #27]
 8005338:	e0e1      	b.n	80054fe <UART_SetConfig+0x282>
 800533a:	2308      	movs	r3, #8
 800533c:	76fb      	strb	r3, [r7, #27]
 800533e:	e0de      	b.n	80054fe <UART_SetConfig+0x282>
 8005340:	2310      	movs	r3, #16
 8005342:	76fb      	strb	r3, [r7, #27]
 8005344:	e0db      	b.n	80054fe <UART_SetConfig+0x282>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a88      	ldr	r2, [pc, #544]	; (800556c <UART_SetConfig+0x2f0>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d132      	bne.n	80053b6 <UART_SetConfig+0x13a>
 8005350:	4b85      	ldr	r3, [pc, #532]	; (8005568 <UART_SetConfig+0x2ec>)
 8005352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005356:	f003 030c 	and.w	r3, r3, #12
 800535a:	2b0c      	cmp	r3, #12
 800535c:	d828      	bhi.n	80053b0 <UART_SetConfig+0x134>
 800535e:	a201      	add	r2, pc, #4	; (adr r2, 8005364 <UART_SetConfig+0xe8>)
 8005360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005364:	08005399 	.word	0x08005399
 8005368:	080053b1 	.word	0x080053b1
 800536c:	080053b1 	.word	0x080053b1
 8005370:	080053b1 	.word	0x080053b1
 8005374:	080053a5 	.word	0x080053a5
 8005378:	080053b1 	.word	0x080053b1
 800537c:	080053b1 	.word	0x080053b1
 8005380:	080053b1 	.word	0x080053b1
 8005384:	0800539f 	.word	0x0800539f
 8005388:	080053b1 	.word	0x080053b1
 800538c:	080053b1 	.word	0x080053b1
 8005390:	080053b1 	.word	0x080053b1
 8005394:	080053ab 	.word	0x080053ab
 8005398:	2300      	movs	r3, #0
 800539a:	76fb      	strb	r3, [r7, #27]
 800539c:	e0af      	b.n	80054fe <UART_SetConfig+0x282>
 800539e:	2302      	movs	r3, #2
 80053a0:	76fb      	strb	r3, [r7, #27]
 80053a2:	e0ac      	b.n	80054fe <UART_SetConfig+0x282>
 80053a4:	2304      	movs	r3, #4
 80053a6:	76fb      	strb	r3, [r7, #27]
 80053a8:	e0a9      	b.n	80054fe <UART_SetConfig+0x282>
 80053aa:	2308      	movs	r3, #8
 80053ac:	76fb      	strb	r3, [r7, #27]
 80053ae:	e0a6      	b.n	80054fe <UART_SetConfig+0x282>
 80053b0:	2310      	movs	r3, #16
 80053b2:	76fb      	strb	r3, [r7, #27]
 80053b4:	e0a3      	b.n	80054fe <UART_SetConfig+0x282>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a6d      	ldr	r2, [pc, #436]	; (8005570 <UART_SetConfig+0x2f4>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d120      	bne.n	8005402 <UART_SetConfig+0x186>
 80053c0:	4b69      	ldr	r3, [pc, #420]	; (8005568 <UART_SetConfig+0x2ec>)
 80053c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80053ca:	2b30      	cmp	r3, #48	; 0x30
 80053cc:	d013      	beq.n	80053f6 <UART_SetConfig+0x17a>
 80053ce:	2b30      	cmp	r3, #48	; 0x30
 80053d0:	d814      	bhi.n	80053fc <UART_SetConfig+0x180>
 80053d2:	2b20      	cmp	r3, #32
 80053d4:	d009      	beq.n	80053ea <UART_SetConfig+0x16e>
 80053d6:	2b20      	cmp	r3, #32
 80053d8:	d810      	bhi.n	80053fc <UART_SetConfig+0x180>
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d002      	beq.n	80053e4 <UART_SetConfig+0x168>
 80053de:	2b10      	cmp	r3, #16
 80053e0:	d006      	beq.n	80053f0 <UART_SetConfig+0x174>
 80053e2:	e00b      	b.n	80053fc <UART_SetConfig+0x180>
 80053e4:	2300      	movs	r3, #0
 80053e6:	76fb      	strb	r3, [r7, #27]
 80053e8:	e089      	b.n	80054fe <UART_SetConfig+0x282>
 80053ea:	2302      	movs	r3, #2
 80053ec:	76fb      	strb	r3, [r7, #27]
 80053ee:	e086      	b.n	80054fe <UART_SetConfig+0x282>
 80053f0:	2304      	movs	r3, #4
 80053f2:	76fb      	strb	r3, [r7, #27]
 80053f4:	e083      	b.n	80054fe <UART_SetConfig+0x282>
 80053f6:	2308      	movs	r3, #8
 80053f8:	76fb      	strb	r3, [r7, #27]
 80053fa:	e080      	b.n	80054fe <UART_SetConfig+0x282>
 80053fc:	2310      	movs	r3, #16
 80053fe:	76fb      	strb	r3, [r7, #27]
 8005400:	e07d      	b.n	80054fe <UART_SetConfig+0x282>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a5b      	ldr	r2, [pc, #364]	; (8005574 <UART_SetConfig+0x2f8>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d120      	bne.n	800544e <UART_SetConfig+0x1d2>
 800540c:	4b56      	ldr	r3, [pc, #344]	; (8005568 <UART_SetConfig+0x2ec>)
 800540e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005412:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005416:	2bc0      	cmp	r3, #192	; 0xc0
 8005418:	d013      	beq.n	8005442 <UART_SetConfig+0x1c6>
 800541a:	2bc0      	cmp	r3, #192	; 0xc0
 800541c:	d814      	bhi.n	8005448 <UART_SetConfig+0x1cc>
 800541e:	2b80      	cmp	r3, #128	; 0x80
 8005420:	d009      	beq.n	8005436 <UART_SetConfig+0x1ba>
 8005422:	2b80      	cmp	r3, #128	; 0x80
 8005424:	d810      	bhi.n	8005448 <UART_SetConfig+0x1cc>
 8005426:	2b00      	cmp	r3, #0
 8005428:	d002      	beq.n	8005430 <UART_SetConfig+0x1b4>
 800542a:	2b40      	cmp	r3, #64	; 0x40
 800542c:	d006      	beq.n	800543c <UART_SetConfig+0x1c0>
 800542e:	e00b      	b.n	8005448 <UART_SetConfig+0x1cc>
 8005430:	2300      	movs	r3, #0
 8005432:	76fb      	strb	r3, [r7, #27]
 8005434:	e063      	b.n	80054fe <UART_SetConfig+0x282>
 8005436:	2302      	movs	r3, #2
 8005438:	76fb      	strb	r3, [r7, #27]
 800543a:	e060      	b.n	80054fe <UART_SetConfig+0x282>
 800543c:	2304      	movs	r3, #4
 800543e:	76fb      	strb	r3, [r7, #27]
 8005440:	e05d      	b.n	80054fe <UART_SetConfig+0x282>
 8005442:	2308      	movs	r3, #8
 8005444:	76fb      	strb	r3, [r7, #27]
 8005446:	e05a      	b.n	80054fe <UART_SetConfig+0x282>
 8005448:	2310      	movs	r3, #16
 800544a:	76fb      	strb	r3, [r7, #27]
 800544c:	e057      	b.n	80054fe <UART_SetConfig+0x282>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a49      	ldr	r2, [pc, #292]	; (8005578 <UART_SetConfig+0x2fc>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d125      	bne.n	80054a4 <UART_SetConfig+0x228>
 8005458:	4b43      	ldr	r3, [pc, #268]	; (8005568 <UART_SetConfig+0x2ec>)
 800545a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800545e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005462:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005466:	d017      	beq.n	8005498 <UART_SetConfig+0x21c>
 8005468:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800546c:	d817      	bhi.n	800549e <UART_SetConfig+0x222>
 800546e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005472:	d00b      	beq.n	800548c <UART_SetConfig+0x210>
 8005474:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005478:	d811      	bhi.n	800549e <UART_SetConfig+0x222>
 800547a:	2b00      	cmp	r3, #0
 800547c:	d003      	beq.n	8005486 <UART_SetConfig+0x20a>
 800547e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005482:	d006      	beq.n	8005492 <UART_SetConfig+0x216>
 8005484:	e00b      	b.n	800549e <UART_SetConfig+0x222>
 8005486:	2300      	movs	r3, #0
 8005488:	76fb      	strb	r3, [r7, #27]
 800548a:	e038      	b.n	80054fe <UART_SetConfig+0x282>
 800548c:	2302      	movs	r3, #2
 800548e:	76fb      	strb	r3, [r7, #27]
 8005490:	e035      	b.n	80054fe <UART_SetConfig+0x282>
 8005492:	2304      	movs	r3, #4
 8005494:	76fb      	strb	r3, [r7, #27]
 8005496:	e032      	b.n	80054fe <UART_SetConfig+0x282>
 8005498:	2308      	movs	r3, #8
 800549a:	76fb      	strb	r3, [r7, #27]
 800549c:	e02f      	b.n	80054fe <UART_SetConfig+0x282>
 800549e:	2310      	movs	r3, #16
 80054a0:	76fb      	strb	r3, [r7, #27]
 80054a2:	e02c      	b.n	80054fe <UART_SetConfig+0x282>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a2d      	ldr	r2, [pc, #180]	; (8005560 <UART_SetConfig+0x2e4>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d125      	bne.n	80054fa <UART_SetConfig+0x27e>
 80054ae:	4b2e      	ldr	r3, [pc, #184]	; (8005568 <UART_SetConfig+0x2ec>)
 80054b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80054b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054bc:	d017      	beq.n	80054ee <UART_SetConfig+0x272>
 80054be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054c2:	d817      	bhi.n	80054f4 <UART_SetConfig+0x278>
 80054c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054c8:	d00b      	beq.n	80054e2 <UART_SetConfig+0x266>
 80054ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054ce:	d811      	bhi.n	80054f4 <UART_SetConfig+0x278>
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d003      	beq.n	80054dc <UART_SetConfig+0x260>
 80054d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054d8:	d006      	beq.n	80054e8 <UART_SetConfig+0x26c>
 80054da:	e00b      	b.n	80054f4 <UART_SetConfig+0x278>
 80054dc:	2300      	movs	r3, #0
 80054de:	76fb      	strb	r3, [r7, #27]
 80054e0:	e00d      	b.n	80054fe <UART_SetConfig+0x282>
 80054e2:	2302      	movs	r3, #2
 80054e4:	76fb      	strb	r3, [r7, #27]
 80054e6:	e00a      	b.n	80054fe <UART_SetConfig+0x282>
 80054e8:	2304      	movs	r3, #4
 80054ea:	76fb      	strb	r3, [r7, #27]
 80054ec:	e007      	b.n	80054fe <UART_SetConfig+0x282>
 80054ee:	2308      	movs	r3, #8
 80054f0:	76fb      	strb	r3, [r7, #27]
 80054f2:	e004      	b.n	80054fe <UART_SetConfig+0x282>
 80054f4:	2310      	movs	r3, #16
 80054f6:	76fb      	strb	r3, [r7, #27]
 80054f8:	e001      	b.n	80054fe <UART_SetConfig+0x282>
 80054fa:	2310      	movs	r3, #16
 80054fc:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a17      	ldr	r2, [pc, #92]	; (8005560 <UART_SetConfig+0x2e4>)
 8005504:	4293      	cmp	r3, r2
 8005506:	f040 8087 	bne.w	8005618 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800550a:	7efb      	ldrb	r3, [r7, #27]
 800550c:	2b08      	cmp	r3, #8
 800550e:	d837      	bhi.n	8005580 <UART_SetConfig+0x304>
 8005510:	a201      	add	r2, pc, #4	; (adr r2, 8005518 <UART_SetConfig+0x29c>)
 8005512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005516:	bf00      	nop
 8005518:	0800553d 	.word	0x0800553d
 800551c:	08005581 	.word	0x08005581
 8005520:	08005545 	.word	0x08005545
 8005524:	08005581 	.word	0x08005581
 8005528:	0800554b 	.word	0x0800554b
 800552c:	08005581 	.word	0x08005581
 8005530:	08005581 	.word	0x08005581
 8005534:	08005581 	.word	0x08005581
 8005538:	08005553 	.word	0x08005553
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800553c:	f7fe f820 	bl	8003580 <HAL_RCC_GetPCLK1Freq>
 8005540:	6178      	str	r0, [r7, #20]
        break;
 8005542:	e022      	b.n	800558a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005544:	4b0d      	ldr	r3, [pc, #52]	; (800557c <UART_SetConfig+0x300>)
 8005546:	617b      	str	r3, [r7, #20]
        break;
 8005548:	e01f      	b.n	800558a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800554a:	f7fd ff81 	bl	8003450 <HAL_RCC_GetSysClockFreq>
 800554e:	6178      	str	r0, [r7, #20]
        break;
 8005550:	e01b      	b.n	800558a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005552:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005556:	617b      	str	r3, [r7, #20]
        break;
 8005558:	e017      	b.n	800558a <UART_SetConfig+0x30e>
 800555a:	bf00      	nop
 800555c:	efff69f3 	.word	0xefff69f3
 8005560:	40008000 	.word	0x40008000
 8005564:	40013800 	.word	0x40013800
 8005568:	40021000 	.word	0x40021000
 800556c:	40004400 	.word	0x40004400
 8005570:	40004800 	.word	0x40004800
 8005574:	40004c00 	.word	0x40004c00
 8005578:	40005000 	.word	0x40005000
 800557c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005580:	2300      	movs	r3, #0
 8005582:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	76bb      	strb	r3, [r7, #26]
        break;
 8005588:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	2b00      	cmp	r3, #0
 800558e:	f000 80f1 	beq.w	8005774 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	685a      	ldr	r2, [r3, #4]
 8005596:	4613      	mov	r3, r2
 8005598:	005b      	lsls	r3, r3, #1
 800559a:	4413      	add	r3, r2
 800559c:	697a      	ldr	r2, [r7, #20]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d305      	bcc.n	80055ae <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80055a8:	697a      	ldr	r2, [r7, #20]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d902      	bls.n	80055b4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	76bb      	strb	r3, [r7, #26]
 80055b2:	e0df      	b.n	8005774 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	4618      	mov	r0, r3
 80055b8:	f04f 0100 	mov.w	r1, #0
 80055bc:	f04f 0200 	mov.w	r2, #0
 80055c0:	f04f 0300 	mov.w	r3, #0
 80055c4:	020b      	lsls	r3, r1, #8
 80055c6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80055ca:	0202      	lsls	r2, r0, #8
 80055cc:	6879      	ldr	r1, [r7, #4]
 80055ce:	6849      	ldr	r1, [r1, #4]
 80055d0:	0849      	lsrs	r1, r1, #1
 80055d2:	4608      	mov	r0, r1
 80055d4:	f04f 0100 	mov.w	r1, #0
 80055d8:	1814      	adds	r4, r2, r0
 80055da:	eb43 0501 	adc.w	r5, r3, r1
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	461a      	mov	r2, r3
 80055e4:	f04f 0300 	mov.w	r3, #0
 80055e8:	4620      	mov	r0, r4
 80055ea:	4629      	mov	r1, r5
 80055ec:	f7fa fe40 	bl	8000270 <__aeabi_uldivmod>
 80055f0:	4602      	mov	r2, r0
 80055f2:	460b      	mov	r3, r1
 80055f4:	4613      	mov	r3, r2
 80055f6:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055fe:	d308      	bcc.n	8005612 <UART_SetConfig+0x396>
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005606:	d204      	bcs.n	8005612 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	693a      	ldr	r2, [r7, #16]
 800560e:	60da      	str	r2, [r3, #12]
 8005610:	e0b0      	b.n	8005774 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	76bb      	strb	r3, [r7, #26]
 8005616:	e0ad      	b.n	8005774 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	69db      	ldr	r3, [r3, #28]
 800561c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005620:	d15b      	bne.n	80056da <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8005622:	7efb      	ldrb	r3, [r7, #27]
 8005624:	2b08      	cmp	r3, #8
 8005626:	d828      	bhi.n	800567a <UART_SetConfig+0x3fe>
 8005628:	a201      	add	r2, pc, #4	; (adr r2, 8005630 <UART_SetConfig+0x3b4>)
 800562a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800562e:	bf00      	nop
 8005630:	08005655 	.word	0x08005655
 8005634:	0800565d 	.word	0x0800565d
 8005638:	08005665 	.word	0x08005665
 800563c:	0800567b 	.word	0x0800567b
 8005640:	0800566b 	.word	0x0800566b
 8005644:	0800567b 	.word	0x0800567b
 8005648:	0800567b 	.word	0x0800567b
 800564c:	0800567b 	.word	0x0800567b
 8005650:	08005673 	.word	0x08005673
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005654:	f7fd ff94 	bl	8003580 <HAL_RCC_GetPCLK1Freq>
 8005658:	6178      	str	r0, [r7, #20]
        break;
 800565a:	e013      	b.n	8005684 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800565c:	f7fd ffa6 	bl	80035ac <HAL_RCC_GetPCLK2Freq>
 8005660:	6178      	str	r0, [r7, #20]
        break;
 8005662:	e00f      	b.n	8005684 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005664:	4b49      	ldr	r3, [pc, #292]	; (800578c <UART_SetConfig+0x510>)
 8005666:	617b      	str	r3, [r7, #20]
        break;
 8005668:	e00c      	b.n	8005684 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800566a:	f7fd fef1 	bl	8003450 <HAL_RCC_GetSysClockFreq>
 800566e:	6178      	str	r0, [r7, #20]
        break;
 8005670:	e008      	b.n	8005684 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005672:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005676:	617b      	str	r3, [r7, #20]
        break;
 8005678:	e004      	b.n	8005684 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800567a:	2300      	movs	r3, #0
 800567c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	76bb      	strb	r3, [r7, #26]
        break;
 8005682:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d074      	beq.n	8005774 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	005a      	lsls	r2, r3, #1
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	085b      	lsrs	r3, r3, #1
 8005694:	441a      	add	r2, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	fbb2 f3f3 	udiv	r3, r2, r3
 800569e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	2b0f      	cmp	r3, #15
 80056a4:	d916      	bls.n	80056d4 <UART_SetConfig+0x458>
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056ac:	d212      	bcs.n	80056d4 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	f023 030f 	bic.w	r3, r3, #15
 80056b6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	085b      	lsrs	r3, r3, #1
 80056bc:	b29b      	uxth	r3, r3
 80056be:	f003 0307 	and.w	r3, r3, #7
 80056c2:	b29a      	uxth	r2, r3
 80056c4:	89fb      	ldrh	r3, [r7, #14]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	89fa      	ldrh	r2, [r7, #14]
 80056d0:	60da      	str	r2, [r3, #12]
 80056d2:	e04f      	b.n	8005774 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	76bb      	strb	r3, [r7, #26]
 80056d8:	e04c      	b.n	8005774 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80056da:	7efb      	ldrb	r3, [r7, #27]
 80056dc:	2b08      	cmp	r3, #8
 80056de:	d828      	bhi.n	8005732 <UART_SetConfig+0x4b6>
 80056e0:	a201      	add	r2, pc, #4	; (adr r2, 80056e8 <UART_SetConfig+0x46c>)
 80056e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e6:	bf00      	nop
 80056e8:	0800570d 	.word	0x0800570d
 80056ec:	08005715 	.word	0x08005715
 80056f0:	0800571d 	.word	0x0800571d
 80056f4:	08005733 	.word	0x08005733
 80056f8:	08005723 	.word	0x08005723
 80056fc:	08005733 	.word	0x08005733
 8005700:	08005733 	.word	0x08005733
 8005704:	08005733 	.word	0x08005733
 8005708:	0800572b 	.word	0x0800572b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800570c:	f7fd ff38 	bl	8003580 <HAL_RCC_GetPCLK1Freq>
 8005710:	6178      	str	r0, [r7, #20]
        break;
 8005712:	e013      	b.n	800573c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005714:	f7fd ff4a 	bl	80035ac <HAL_RCC_GetPCLK2Freq>
 8005718:	6178      	str	r0, [r7, #20]
        break;
 800571a:	e00f      	b.n	800573c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800571c:	4b1b      	ldr	r3, [pc, #108]	; (800578c <UART_SetConfig+0x510>)
 800571e:	617b      	str	r3, [r7, #20]
        break;
 8005720:	e00c      	b.n	800573c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005722:	f7fd fe95 	bl	8003450 <HAL_RCC_GetSysClockFreq>
 8005726:	6178      	str	r0, [r7, #20]
        break;
 8005728:	e008      	b.n	800573c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800572a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800572e:	617b      	str	r3, [r7, #20]
        break;
 8005730:	e004      	b.n	800573c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8005732:	2300      	movs	r3, #0
 8005734:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	76bb      	strb	r3, [r7, #26]
        break;
 800573a:	bf00      	nop
    }

    if (pclk != 0U)
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d018      	beq.n	8005774 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	085a      	lsrs	r2, r3, #1
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	441a      	add	r2, r3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	fbb2 f3f3 	udiv	r3, r2, r3
 8005754:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	2b0f      	cmp	r3, #15
 800575a:	d909      	bls.n	8005770 <UART_SetConfig+0x4f4>
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005762:	d205      	bcs.n	8005770 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	b29a      	uxth	r2, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	60da      	str	r2, [r3, #12]
 800576e:	e001      	b.n	8005774 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005780:	7ebb      	ldrb	r3, [r7, #26]
}
 8005782:	4618      	mov	r0, r3
 8005784:	3720      	adds	r7, #32
 8005786:	46bd      	mov	sp, r7
 8005788:	bdb0      	pop	{r4, r5, r7, pc}
 800578a:	bf00      	nop
 800578c:	00f42400 	.word	0x00f42400

08005790 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579c:	f003 0301 	and.w	r3, r3, #1
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d00a      	beq.n	80057ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	430a      	orrs	r2, r1
 80057b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057be:	f003 0302 	and.w	r3, r3, #2
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d00a      	beq.n	80057dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	430a      	orrs	r2, r1
 80057da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e0:	f003 0304 	and.w	r3, r3, #4
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d00a      	beq.n	80057fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	430a      	orrs	r2, r1
 80057fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005802:	f003 0308 	and.w	r3, r3, #8
 8005806:	2b00      	cmp	r3, #0
 8005808:	d00a      	beq.n	8005820 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	430a      	orrs	r2, r1
 800581e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005824:	f003 0310 	and.w	r3, r3, #16
 8005828:	2b00      	cmp	r3, #0
 800582a:	d00a      	beq.n	8005842 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	430a      	orrs	r2, r1
 8005840:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005846:	f003 0320 	and.w	r3, r3, #32
 800584a:	2b00      	cmp	r3, #0
 800584c:	d00a      	beq.n	8005864 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	430a      	orrs	r2, r1
 8005862:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800586c:	2b00      	cmp	r3, #0
 800586e:	d01a      	beq.n	80058a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	430a      	orrs	r2, r1
 8005884:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800588e:	d10a      	bne.n	80058a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	430a      	orrs	r2, r1
 80058a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00a      	beq.n	80058c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	430a      	orrs	r2, r1
 80058c6:	605a      	str	r2, [r3, #4]
  }
}
 80058c8:	bf00      	nop
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b086      	sub	sp, #24
 80058d8:	af02      	add	r7, sp, #8
 80058da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80058e4:	f7fb fb94 	bl	8001010 <HAL_GetTick>
 80058e8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 0308 	and.w	r3, r3, #8
 80058f4:	2b08      	cmp	r3, #8
 80058f6:	d10e      	bne.n	8005916 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058fc:	9300      	str	r3, [sp, #0]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2200      	movs	r2, #0
 8005902:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 f82d 	bl	8005966 <UART_WaitOnFlagUntilTimeout>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d001      	beq.n	8005916 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e023      	b.n	800595e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 0304 	and.w	r3, r3, #4
 8005920:	2b04      	cmp	r3, #4
 8005922:	d10e      	bne.n	8005942 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005924:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005928:	9300      	str	r3, [sp, #0]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2200      	movs	r2, #0
 800592e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 f817 	bl	8005966 <UART_WaitOnFlagUntilTimeout>
 8005938:	4603      	mov	r3, r0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d001      	beq.n	8005942 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800593e:	2303      	movs	r3, #3
 8005940:	e00d      	b.n	800595e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2220      	movs	r2, #32
 8005946:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2220      	movs	r2, #32
 800594c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	3710      	adds	r7, #16
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}

08005966 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005966:	b580      	push	{r7, lr}
 8005968:	b09c      	sub	sp, #112	; 0x70
 800596a:	af00      	add	r7, sp, #0
 800596c:	60f8      	str	r0, [r7, #12]
 800596e:	60b9      	str	r1, [r7, #8]
 8005970:	603b      	str	r3, [r7, #0]
 8005972:	4613      	mov	r3, r2
 8005974:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005976:	e0a5      	b.n	8005ac4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005978:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800597a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800597e:	f000 80a1 	beq.w	8005ac4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005982:	f7fb fb45 	bl	8001010 <HAL_GetTick>
 8005986:	4602      	mov	r2, r0
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800598e:	429a      	cmp	r2, r3
 8005990:	d302      	bcc.n	8005998 <UART_WaitOnFlagUntilTimeout+0x32>
 8005992:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005994:	2b00      	cmp	r3, #0
 8005996:	d13e      	bne.n	8005a16 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059a0:	e853 3f00 	ldrex	r3, [r3]
 80059a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80059a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80059ac:	667b      	str	r3, [r7, #100]	; 0x64
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	461a      	mov	r2, r3
 80059b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059b8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80059bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80059be:	e841 2300 	strex	r3, r2, [r1]
 80059c2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80059c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d1e6      	bne.n	8005998 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	3308      	adds	r3, #8
 80059d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059d4:	e853 3f00 	ldrex	r3, [r3]
 80059d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80059da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059dc:	f023 0301 	bic.w	r3, r3, #1
 80059e0:	663b      	str	r3, [r7, #96]	; 0x60
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	3308      	adds	r3, #8
 80059e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80059ea:	64ba      	str	r2, [r7, #72]	; 0x48
 80059ec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80059f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059f2:	e841 2300 	strex	r3, r2, [r1]
 80059f6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80059f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1e5      	bne.n	80059ca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2220      	movs	r2, #32
 8005a02:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2220      	movs	r2, #32
 8005a08:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005a12:	2303      	movs	r3, #3
 8005a14:	e067      	b.n	8005ae6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 0304 	and.w	r3, r3, #4
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d04f      	beq.n	8005ac4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	69db      	ldr	r3, [r3, #28]
 8005a2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a32:	d147      	bne.n	8005ac4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a3c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a46:	e853 3f00 	ldrex	r3, [r3]
 8005a4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a52:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	461a      	mov	r2, r3
 8005a5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a5c:	637b      	str	r3, [r7, #52]	; 0x34
 8005a5e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a64:	e841 2300 	strex	r3, r2, [r1]
 8005a68:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d1e6      	bne.n	8005a3e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	3308      	adds	r3, #8
 8005a76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	e853 3f00 	ldrex	r3, [r3]
 8005a7e:	613b      	str	r3, [r7, #16]
   return(result);
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	f023 0301 	bic.w	r3, r3, #1
 8005a86:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	3308      	adds	r3, #8
 8005a8e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005a90:	623a      	str	r2, [r7, #32]
 8005a92:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a94:	69f9      	ldr	r1, [r7, #28]
 8005a96:	6a3a      	ldr	r2, [r7, #32]
 8005a98:	e841 2300 	strex	r3, r2, [r1]
 8005a9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d1e5      	bne.n	8005a70 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2220      	movs	r2, #32
 8005aa8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2220      	movs	r2, #32
 8005aae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2220      	movs	r2, #32
 8005ab4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005ac0:	2303      	movs	r3, #3
 8005ac2:	e010      	b.n	8005ae6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	69da      	ldr	r2, [r3, #28]
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	4013      	ands	r3, r2
 8005ace:	68ba      	ldr	r2, [r7, #8]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	bf0c      	ite	eq
 8005ad4:	2301      	moveq	r3, #1
 8005ad6:	2300      	movne	r3, #0
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	461a      	mov	r2, r3
 8005adc:	79fb      	ldrb	r3, [r7, #7]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	f43f af4a 	beq.w	8005978 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ae4:	2300      	movs	r3, #0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3770      	adds	r7, #112	; 0x70
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
	...

08005af0 <__errno>:
 8005af0:	4b01      	ldr	r3, [pc, #4]	; (8005af8 <__errno+0x8>)
 8005af2:	6818      	ldr	r0, [r3, #0]
 8005af4:	4770      	bx	lr
 8005af6:	bf00      	nop
 8005af8:	2000000c 	.word	0x2000000c

08005afc <__libc_init_array>:
 8005afc:	b570      	push	{r4, r5, r6, lr}
 8005afe:	4d0d      	ldr	r5, [pc, #52]	; (8005b34 <__libc_init_array+0x38>)
 8005b00:	4c0d      	ldr	r4, [pc, #52]	; (8005b38 <__libc_init_array+0x3c>)
 8005b02:	1b64      	subs	r4, r4, r5
 8005b04:	10a4      	asrs	r4, r4, #2
 8005b06:	2600      	movs	r6, #0
 8005b08:	42a6      	cmp	r6, r4
 8005b0a:	d109      	bne.n	8005b20 <__libc_init_array+0x24>
 8005b0c:	4d0b      	ldr	r5, [pc, #44]	; (8005b3c <__libc_init_array+0x40>)
 8005b0e:	4c0c      	ldr	r4, [pc, #48]	; (8005b40 <__libc_init_array+0x44>)
 8005b10:	f000 ff84 	bl	8006a1c <_init>
 8005b14:	1b64      	subs	r4, r4, r5
 8005b16:	10a4      	asrs	r4, r4, #2
 8005b18:	2600      	movs	r6, #0
 8005b1a:	42a6      	cmp	r6, r4
 8005b1c:	d105      	bne.n	8005b2a <__libc_init_array+0x2e>
 8005b1e:	bd70      	pop	{r4, r5, r6, pc}
 8005b20:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b24:	4798      	blx	r3
 8005b26:	3601      	adds	r6, #1
 8005b28:	e7ee      	b.n	8005b08 <__libc_init_array+0xc>
 8005b2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b2e:	4798      	blx	r3
 8005b30:	3601      	adds	r6, #1
 8005b32:	e7f2      	b.n	8005b1a <__libc_init_array+0x1e>
 8005b34:	08006b60 	.word	0x08006b60
 8005b38:	08006b60 	.word	0x08006b60
 8005b3c:	08006b60 	.word	0x08006b60
 8005b40:	08006b64 	.word	0x08006b64

08005b44 <memcpy>:
 8005b44:	440a      	add	r2, r1
 8005b46:	4291      	cmp	r1, r2
 8005b48:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b4c:	d100      	bne.n	8005b50 <memcpy+0xc>
 8005b4e:	4770      	bx	lr
 8005b50:	b510      	push	{r4, lr}
 8005b52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b5a:	4291      	cmp	r1, r2
 8005b5c:	d1f9      	bne.n	8005b52 <memcpy+0xe>
 8005b5e:	bd10      	pop	{r4, pc}

08005b60 <memset>:
 8005b60:	4402      	add	r2, r0
 8005b62:	4603      	mov	r3, r0
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d100      	bne.n	8005b6a <memset+0xa>
 8005b68:	4770      	bx	lr
 8005b6a:	f803 1b01 	strb.w	r1, [r3], #1
 8005b6e:	e7f9      	b.n	8005b64 <memset+0x4>

08005b70 <iprintf>:
 8005b70:	b40f      	push	{r0, r1, r2, r3}
 8005b72:	4b0a      	ldr	r3, [pc, #40]	; (8005b9c <iprintf+0x2c>)
 8005b74:	b513      	push	{r0, r1, r4, lr}
 8005b76:	681c      	ldr	r4, [r3, #0]
 8005b78:	b124      	cbz	r4, 8005b84 <iprintf+0x14>
 8005b7a:	69a3      	ldr	r3, [r4, #24]
 8005b7c:	b913      	cbnz	r3, 8005b84 <iprintf+0x14>
 8005b7e:	4620      	mov	r0, r4
 8005b80:	f000 f866 	bl	8005c50 <__sinit>
 8005b84:	ab05      	add	r3, sp, #20
 8005b86:	9a04      	ldr	r2, [sp, #16]
 8005b88:	68a1      	ldr	r1, [r4, #8]
 8005b8a:	9301      	str	r3, [sp, #4]
 8005b8c:	4620      	mov	r0, r4
 8005b8e:	f000 f983 	bl	8005e98 <_vfiprintf_r>
 8005b92:	b002      	add	sp, #8
 8005b94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b98:	b004      	add	sp, #16
 8005b9a:	4770      	bx	lr
 8005b9c:	2000000c 	.word	0x2000000c

08005ba0 <std>:
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	b510      	push	{r4, lr}
 8005ba4:	4604      	mov	r4, r0
 8005ba6:	e9c0 3300 	strd	r3, r3, [r0]
 8005baa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005bae:	6083      	str	r3, [r0, #8]
 8005bb0:	8181      	strh	r1, [r0, #12]
 8005bb2:	6643      	str	r3, [r0, #100]	; 0x64
 8005bb4:	81c2      	strh	r2, [r0, #14]
 8005bb6:	6183      	str	r3, [r0, #24]
 8005bb8:	4619      	mov	r1, r3
 8005bba:	2208      	movs	r2, #8
 8005bbc:	305c      	adds	r0, #92	; 0x5c
 8005bbe:	f7ff ffcf 	bl	8005b60 <memset>
 8005bc2:	4b05      	ldr	r3, [pc, #20]	; (8005bd8 <std+0x38>)
 8005bc4:	6263      	str	r3, [r4, #36]	; 0x24
 8005bc6:	4b05      	ldr	r3, [pc, #20]	; (8005bdc <std+0x3c>)
 8005bc8:	62a3      	str	r3, [r4, #40]	; 0x28
 8005bca:	4b05      	ldr	r3, [pc, #20]	; (8005be0 <std+0x40>)
 8005bcc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005bce:	4b05      	ldr	r3, [pc, #20]	; (8005be4 <std+0x44>)
 8005bd0:	6224      	str	r4, [r4, #32]
 8005bd2:	6323      	str	r3, [r4, #48]	; 0x30
 8005bd4:	bd10      	pop	{r4, pc}
 8005bd6:	bf00      	nop
 8005bd8:	08006441 	.word	0x08006441
 8005bdc:	08006463 	.word	0x08006463
 8005be0:	0800649b 	.word	0x0800649b
 8005be4:	080064bf 	.word	0x080064bf

08005be8 <_cleanup_r>:
 8005be8:	4901      	ldr	r1, [pc, #4]	; (8005bf0 <_cleanup_r+0x8>)
 8005bea:	f000 b8af 	b.w	8005d4c <_fwalk_reent>
 8005bee:	bf00      	nop
 8005bf0:	08006799 	.word	0x08006799

08005bf4 <__sfmoreglue>:
 8005bf4:	b570      	push	{r4, r5, r6, lr}
 8005bf6:	1e4a      	subs	r2, r1, #1
 8005bf8:	2568      	movs	r5, #104	; 0x68
 8005bfa:	4355      	muls	r5, r2
 8005bfc:	460e      	mov	r6, r1
 8005bfe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005c02:	f000 f8c5 	bl	8005d90 <_malloc_r>
 8005c06:	4604      	mov	r4, r0
 8005c08:	b140      	cbz	r0, 8005c1c <__sfmoreglue+0x28>
 8005c0a:	2100      	movs	r1, #0
 8005c0c:	e9c0 1600 	strd	r1, r6, [r0]
 8005c10:	300c      	adds	r0, #12
 8005c12:	60a0      	str	r0, [r4, #8]
 8005c14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005c18:	f7ff ffa2 	bl	8005b60 <memset>
 8005c1c:	4620      	mov	r0, r4
 8005c1e:	bd70      	pop	{r4, r5, r6, pc}

08005c20 <__sfp_lock_acquire>:
 8005c20:	4801      	ldr	r0, [pc, #4]	; (8005c28 <__sfp_lock_acquire+0x8>)
 8005c22:	f000 b8b3 	b.w	8005d8c <__retarget_lock_acquire_recursive>
 8005c26:	bf00      	nop
 8005c28:	200001e0 	.word	0x200001e0

08005c2c <__sfp_lock_release>:
 8005c2c:	4801      	ldr	r0, [pc, #4]	; (8005c34 <__sfp_lock_release+0x8>)
 8005c2e:	f000 b8ae 	b.w	8005d8e <__retarget_lock_release_recursive>
 8005c32:	bf00      	nop
 8005c34:	200001e0 	.word	0x200001e0

08005c38 <__sinit_lock_acquire>:
 8005c38:	4801      	ldr	r0, [pc, #4]	; (8005c40 <__sinit_lock_acquire+0x8>)
 8005c3a:	f000 b8a7 	b.w	8005d8c <__retarget_lock_acquire_recursive>
 8005c3e:	bf00      	nop
 8005c40:	200001db 	.word	0x200001db

08005c44 <__sinit_lock_release>:
 8005c44:	4801      	ldr	r0, [pc, #4]	; (8005c4c <__sinit_lock_release+0x8>)
 8005c46:	f000 b8a2 	b.w	8005d8e <__retarget_lock_release_recursive>
 8005c4a:	bf00      	nop
 8005c4c:	200001db 	.word	0x200001db

08005c50 <__sinit>:
 8005c50:	b510      	push	{r4, lr}
 8005c52:	4604      	mov	r4, r0
 8005c54:	f7ff fff0 	bl	8005c38 <__sinit_lock_acquire>
 8005c58:	69a3      	ldr	r3, [r4, #24]
 8005c5a:	b11b      	cbz	r3, 8005c64 <__sinit+0x14>
 8005c5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c60:	f7ff bff0 	b.w	8005c44 <__sinit_lock_release>
 8005c64:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005c68:	6523      	str	r3, [r4, #80]	; 0x50
 8005c6a:	4b13      	ldr	r3, [pc, #76]	; (8005cb8 <__sinit+0x68>)
 8005c6c:	4a13      	ldr	r2, [pc, #76]	; (8005cbc <__sinit+0x6c>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	62a2      	str	r2, [r4, #40]	; 0x28
 8005c72:	42a3      	cmp	r3, r4
 8005c74:	bf04      	itt	eq
 8005c76:	2301      	moveq	r3, #1
 8005c78:	61a3      	streq	r3, [r4, #24]
 8005c7a:	4620      	mov	r0, r4
 8005c7c:	f000 f820 	bl	8005cc0 <__sfp>
 8005c80:	6060      	str	r0, [r4, #4]
 8005c82:	4620      	mov	r0, r4
 8005c84:	f000 f81c 	bl	8005cc0 <__sfp>
 8005c88:	60a0      	str	r0, [r4, #8]
 8005c8a:	4620      	mov	r0, r4
 8005c8c:	f000 f818 	bl	8005cc0 <__sfp>
 8005c90:	2200      	movs	r2, #0
 8005c92:	60e0      	str	r0, [r4, #12]
 8005c94:	2104      	movs	r1, #4
 8005c96:	6860      	ldr	r0, [r4, #4]
 8005c98:	f7ff ff82 	bl	8005ba0 <std>
 8005c9c:	68a0      	ldr	r0, [r4, #8]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	2109      	movs	r1, #9
 8005ca2:	f7ff ff7d 	bl	8005ba0 <std>
 8005ca6:	68e0      	ldr	r0, [r4, #12]
 8005ca8:	2202      	movs	r2, #2
 8005caa:	2112      	movs	r1, #18
 8005cac:	f7ff ff78 	bl	8005ba0 <std>
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	61a3      	str	r3, [r4, #24]
 8005cb4:	e7d2      	b.n	8005c5c <__sinit+0xc>
 8005cb6:	bf00      	nop
 8005cb8:	08006ac0 	.word	0x08006ac0
 8005cbc:	08005be9 	.word	0x08005be9

08005cc0 <__sfp>:
 8005cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cc2:	4607      	mov	r7, r0
 8005cc4:	f7ff ffac 	bl	8005c20 <__sfp_lock_acquire>
 8005cc8:	4b1e      	ldr	r3, [pc, #120]	; (8005d44 <__sfp+0x84>)
 8005cca:	681e      	ldr	r6, [r3, #0]
 8005ccc:	69b3      	ldr	r3, [r6, #24]
 8005cce:	b913      	cbnz	r3, 8005cd6 <__sfp+0x16>
 8005cd0:	4630      	mov	r0, r6
 8005cd2:	f7ff ffbd 	bl	8005c50 <__sinit>
 8005cd6:	3648      	adds	r6, #72	; 0x48
 8005cd8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005cdc:	3b01      	subs	r3, #1
 8005cde:	d503      	bpl.n	8005ce8 <__sfp+0x28>
 8005ce0:	6833      	ldr	r3, [r6, #0]
 8005ce2:	b30b      	cbz	r3, 8005d28 <__sfp+0x68>
 8005ce4:	6836      	ldr	r6, [r6, #0]
 8005ce6:	e7f7      	b.n	8005cd8 <__sfp+0x18>
 8005ce8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005cec:	b9d5      	cbnz	r5, 8005d24 <__sfp+0x64>
 8005cee:	4b16      	ldr	r3, [pc, #88]	; (8005d48 <__sfp+0x88>)
 8005cf0:	60e3      	str	r3, [r4, #12]
 8005cf2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005cf6:	6665      	str	r5, [r4, #100]	; 0x64
 8005cf8:	f000 f847 	bl	8005d8a <__retarget_lock_init_recursive>
 8005cfc:	f7ff ff96 	bl	8005c2c <__sfp_lock_release>
 8005d00:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005d04:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005d08:	6025      	str	r5, [r4, #0]
 8005d0a:	61a5      	str	r5, [r4, #24]
 8005d0c:	2208      	movs	r2, #8
 8005d0e:	4629      	mov	r1, r5
 8005d10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005d14:	f7ff ff24 	bl	8005b60 <memset>
 8005d18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005d1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005d20:	4620      	mov	r0, r4
 8005d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d24:	3468      	adds	r4, #104	; 0x68
 8005d26:	e7d9      	b.n	8005cdc <__sfp+0x1c>
 8005d28:	2104      	movs	r1, #4
 8005d2a:	4638      	mov	r0, r7
 8005d2c:	f7ff ff62 	bl	8005bf4 <__sfmoreglue>
 8005d30:	4604      	mov	r4, r0
 8005d32:	6030      	str	r0, [r6, #0]
 8005d34:	2800      	cmp	r0, #0
 8005d36:	d1d5      	bne.n	8005ce4 <__sfp+0x24>
 8005d38:	f7ff ff78 	bl	8005c2c <__sfp_lock_release>
 8005d3c:	230c      	movs	r3, #12
 8005d3e:	603b      	str	r3, [r7, #0]
 8005d40:	e7ee      	b.n	8005d20 <__sfp+0x60>
 8005d42:	bf00      	nop
 8005d44:	08006ac0 	.word	0x08006ac0
 8005d48:	ffff0001 	.word	0xffff0001

08005d4c <_fwalk_reent>:
 8005d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d50:	4606      	mov	r6, r0
 8005d52:	4688      	mov	r8, r1
 8005d54:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005d58:	2700      	movs	r7, #0
 8005d5a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005d5e:	f1b9 0901 	subs.w	r9, r9, #1
 8005d62:	d505      	bpl.n	8005d70 <_fwalk_reent+0x24>
 8005d64:	6824      	ldr	r4, [r4, #0]
 8005d66:	2c00      	cmp	r4, #0
 8005d68:	d1f7      	bne.n	8005d5a <_fwalk_reent+0xe>
 8005d6a:	4638      	mov	r0, r7
 8005d6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d70:	89ab      	ldrh	r3, [r5, #12]
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d907      	bls.n	8005d86 <_fwalk_reent+0x3a>
 8005d76:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	d003      	beq.n	8005d86 <_fwalk_reent+0x3a>
 8005d7e:	4629      	mov	r1, r5
 8005d80:	4630      	mov	r0, r6
 8005d82:	47c0      	blx	r8
 8005d84:	4307      	orrs	r7, r0
 8005d86:	3568      	adds	r5, #104	; 0x68
 8005d88:	e7e9      	b.n	8005d5e <_fwalk_reent+0x12>

08005d8a <__retarget_lock_init_recursive>:
 8005d8a:	4770      	bx	lr

08005d8c <__retarget_lock_acquire_recursive>:
 8005d8c:	4770      	bx	lr

08005d8e <__retarget_lock_release_recursive>:
 8005d8e:	4770      	bx	lr

08005d90 <_malloc_r>:
 8005d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d92:	1ccd      	adds	r5, r1, #3
 8005d94:	f025 0503 	bic.w	r5, r5, #3
 8005d98:	3508      	adds	r5, #8
 8005d9a:	2d0c      	cmp	r5, #12
 8005d9c:	bf38      	it	cc
 8005d9e:	250c      	movcc	r5, #12
 8005da0:	2d00      	cmp	r5, #0
 8005da2:	4606      	mov	r6, r0
 8005da4:	db01      	blt.n	8005daa <_malloc_r+0x1a>
 8005da6:	42a9      	cmp	r1, r5
 8005da8:	d903      	bls.n	8005db2 <_malloc_r+0x22>
 8005daa:	230c      	movs	r3, #12
 8005dac:	6033      	str	r3, [r6, #0]
 8005dae:	2000      	movs	r0, #0
 8005db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005db2:	f000 fda3 	bl	80068fc <__malloc_lock>
 8005db6:	4921      	ldr	r1, [pc, #132]	; (8005e3c <_malloc_r+0xac>)
 8005db8:	680a      	ldr	r2, [r1, #0]
 8005dba:	4614      	mov	r4, r2
 8005dbc:	b99c      	cbnz	r4, 8005de6 <_malloc_r+0x56>
 8005dbe:	4f20      	ldr	r7, [pc, #128]	; (8005e40 <_malloc_r+0xb0>)
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	b923      	cbnz	r3, 8005dce <_malloc_r+0x3e>
 8005dc4:	4621      	mov	r1, r4
 8005dc6:	4630      	mov	r0, r6
 8005dc8:	f000 fb2a 	bl	8006420 <_sbrk_r>
 8005dcc:	6038      	str	r0, [r7, #0]
 8005dce:	4629      	mov	r1, r5
 8005dd0:	4630      	mov	r0, r6
 8005dd2:	f000 fb25 	bl	8006420 <_sbrk_r>
 8005dd6:	1c43      	adds	r3, r0, #1
 8005dd8:	d123      	bne.n	8005e22 <_malloc_r+0x92>
 8005dda:	230c      	movs	r3, #12
 8005ddc:	6033      	str	r3, [r6, #0]
 8005dde:	4630      	mov	r0, r6
 8005de0:	f000 fd92 	bl	8006908 <__malloc_unlock>
 8005de4:	e7e3      	b.n	8005dae <_malloc_r+0x1e>
 8005de6:	6823      	ldr	r3, [r4, #0]
 8005de8:	1b5b      	subs	r3, r3, r5
 8005dea:	d417      	bmi.n	8005e1c <_malloc_r+0x8c>
 8005dec:	2b0b      	cmp	r3, #11
 8005dee:	d903      	bls.n	8005df8 <_malloc_r+0x68>
 8005df0:	6023      	str	r3, [r4, #0]
 8005df2:	441c      	add	r4, r3
 8005df4:	6025      	str	r5, [r4, #0]
 8005df6:	e004      	b.n	8005e02 <_malloc_r+0x72>
 8005df8:	6863      	ldr	r3, [r4, #4]
 8005dfa:	42a2      	cmp	r2, r4
 8005dfc:	bf0c      	ite	eq
 8005dfe:	600b      	streq	r3, [r1, #0]
 8005e00:	6053      	strne	r3, [r2, #4]
 8005e02:	4630      	mov	r0, r6
 8005e04:	f000 fd80 	bl	8006908 <__malloc_unlock>
 8005e08:	f104 000b 	add.w	r0, r4, #11
 8005e0c:	1d23      	adds	r3, r4, #4
 8005e0e:	f020 0007 	bic.w	r0, r0, #7
 8005e12:	1ac2      	subs	r2, r0, r3
 8005e14:	d0cc      	beq.n	8005db0 <_malloc_r+0x20>
 8005e16:	1a1b      	subs	r3, r3, r0
 8005e18:	50a3      	str	r3, [r4, r2]
 8005e1a:	e7c9      	b.n	8005db0 <_malloc_r+0x20>
 8005e1c:	4622      	mov	r2, r4
 8005e1e:	6864      	ldr	r4, [r4, #4]
 8005e20:	e7cc      	b.n	8005dbc <_malloc_r+0x2c>
 8005e22:	1cc4      	adds	r4, r0, #3
 8005e24:	f024 0403 	bic.w	r4, r4, #3
 8005e28:	42a0      	cmp	r0, r4
 8005e2a:	d0e3      	beq.n	8005df4 <_malloc_r+0x64>
 8005e2c:	1a21      	subs	r1, r4, r0
 8005e2e:	4630      	mov	r0, r6
 8005e30:	f000 faf6 	bl	8006420 <_sbrk_r>
 8005e34:	3001      	adds	r0, #1
 8005e36:	d1dd      	bne.n	8005df4 <_malloc_r+0x64>
 8005e38:	e7cf      	b.n	8005dda <_malloc_r+0x4a>
 8005e3a:	bf00      	nop
 8005e3c:	20000090 	.word	0x20000090
 8005e40:	20000094 	.word	0x20000094

08005e44 <__sfputc_r>:
 8005e44:	6893      	ldr	r3, [r2, #8]
 8005e46:	3b01      	subs	r3, #1
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	b410      	push	{r4}
 8005e4c:	6093      	str	r3, [r2, #8]
 8005e4e:	da08      	bge.n	8005e62 <__sfputc_r+0x1e>
 8005e50:	6994      	ldr	r4, [r2, #24]
 8005e52:	42a3      	cmp	r3, r4
 8005e54:	db01      	blt.n	8005e5a <__sfputc_r+0x16>
 8005e56:	290a      	cmp	r1, #10
 8005e58:	d103      	bne.n	8005e62 <__sfputc_r+0x1e>
 8005e5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e5e:	f000 bb33 	b.w	80064c8 <__swbuf_r>
 8005e62:	6813      	ldr	r3, [r2, #0]
 8005e64:	1c58      	adds	r0, r3, #1
 8005e66:	6010      	str	r0, [r2, #0]
 8005e68:	7019      	strb	r1, [r3, #0]
 8005e6a:	4608      	mov	r0, r1
 8005e6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e70:	4770      	bx	lr

08005e72 <__sfputs_r>:
 8005e72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e74:	4606      	mov	r6, r0
 8005e76:	460f      	mov	r7, r1
 8005e78:	4614      	mov	r4, r2
 8005e7a:	18d5      	adds	r5, r2, r3
 8005e7c:	42ac      	cmp	r4, r5
 8005e7e:	d101      	bne.n	8005e84 <__sfputs_r+0x12>
 8005e80:	2000      	movs	r0, #0
 8005e82:	e007      	b.n	8005e94 <__sfputs_r+0x22>
 8005e84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e88:	463a      	mov	r2, r7
 8005e8a:	4630      	mov	r0, r6
 8005e8c:	f7ff ffda 	bl	8005e44 <__sfputc_r>
 8005e90:	1c43      	adds	r3, r0, #1
 8005e92:	d1f3      	bne.n	8005e7c <__sfputs_r+0xa>
 8005e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005e98 <_vfiprintf_r>:
 8005e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e9c:	460d      	mov	r5, r1
 8005e9e:	b09d      	sub	sp, #116	; 0x74
 8005ea0:	4614      	mov	r4, r2
 8005ea2:	4698      	mov	r8, r3
 8005ea4:	4606      	mov	r6, r0
 8005ea6:	b118      	cbz	r0, 8005eb0 <_vfiprintf_r+0x18>
 8005ea8:	6983      	ldr	r3, [r0, #24]
 8005eaa:	b90b      	cbnz	r3, 8005eb0 <_vfiprintf_r+0x18>
 8005eac:	f7ff fed0 	bl	8005c50 <__sinit>
 8005eb0:	4b89      	ldr	r3, [pc, #548]	; (80060d8 <_vfiprintf_r+0x240>)
 8005eb2:	429d      	cmp	r5, r3
 8005eb4:	d11b      	bne.n	8005eee <_vfiprintf_r+0x56>
 8005eb6:	6875      	ldr	r5, [r6, #4]
 8005eb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005eba:	07d9      	lsls	r1, r3, #31
 8005ebc:	d405      	bmi.n	8005eca <_vfiprintf_r+0x32>
 8005ebe:	89ab      	ldrh	r3, [r5, #12]
 8005ec0:	059a      	lsls	r2, r3, #22
 8005ec2:	d402      	bmi.n	8005eca <_vfiprintf_r+0x32>
 8005ec4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ec6:	f7ff ff61 	bl	8005d8c <__retarget_lock_acquire_recursive>
 8005eca:	89ab      	ldrh	r3, [r5, #12]
 8005ecc:	071b      	lsls	r3, r3, #28
 8005ece:	d501      	bpl.n	8005ed4 <_vfiprintf_r+0x3c>
 8005ed0:	692b      	ldr	r3, [r5, #16]
 8005ed2:	b9eb      	cbnz	r3, 8005f10 <_vfiprintf_r+0x78>
 8005ed4:	4629      	mov	r1, r5
 8005ed6:	4630      	mov	r0, r6
 8005ed8:	f000 fb5a 	bl	8006590 <__swsetup_r>
 8005edc:	b1c0      	cbz	r0, 8005f10 <_vfiprintf_r+0x78>
 8005ede:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ee0:	07dc      	lsls	r4, r3, #31
 8005ee2:	d50e      	bpl.n	8005f02 <_vfiprintf_r+0x6a>
 8005ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ee8:	b01d      	add	sp, #116	; 0x74
 8005eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eee:	4b7b      	ldr	r3, [pc, #492]	; (80060dc <_vfiprintf_r+0x244>)
 8005ef0:	429d      	cmp	r5, r3
 8005ef2:	d101      	bne.n	8005ef8 <_vfiprintf_r+0x60>
 8005ef4:	68b5      	ldr	r5, [r6, #8]
 8005ef6:	e7df      	b.n	8005eb8 <_vfiprintf_r+0x20>
 8005ef8:	4b79      	ldr	r3, [pc, #484]	; (80060e0 <_vfiprintf_r+0x248>)
 8005efa:	429d      	cmp	r5, r3
 8005efc:	bf08      	it	eq
 8005efe:	68f5      	ldreq	r5, [r6, #12]
 8005f00:	e7da      	b.n	8005eb8 <_vfiprintf_r+0x20>
 8005f02:	89ab      	ldrh	r3, [r5, #12]
 8005f04:	0598      	lsls	r0, r3, #22
 8005f06:	d4ed      	bmi.n	8005ee4 <_vfiprintf_r+0x4c>
 8005f08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f0a:	f7ff ff40 	bl	8005d8e <__retarget_lock_release_recursive>
 8005f0e:	e7e9      	b.n	8005ee4 <_vfiprintf_r+0x4c>
 8005f10:	2300      	movs	r3, #0
 8005f12:	9309      	str	r3, [sp, #36]	; 0x24
 8005f14:	2320      	movs	r3, #32
 8005f16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f1e:	2330      	movs	r3, #48	; 0x30
 8005f20:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80060e4 <_vfiprintf_r+0x24c>
 8005f24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f28:	f04f 0901 	mov.w	r9, #1
 8005f2c:	4623      	mov	r3, r4
 8005f2e:	469a      	mov	sl, r3
 8005f30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f34:	b10a      	cbz	r2, 8005f3a <_vfiprintf_r+0xa2>
 8005f36:	2a25      	cmp	r2, #37	; 0x25
 8005f38:	d1f9      	bne.n	8005f2e <_vfiprintf_r+0x96>
 8005f3a:	ebba 0b04 	subs.w	fp, sl, r4
 8005f3e:	d00b      	beq.n	8005f58 <_vfiprintf_r+0xc0>
 8005f40:	465b      	mov	r3, fp
 8005f42:	4622      	mov	r2, r4
 8005f44:	4629      	mov	r1, r5
 8005f46:	4630      	mov	r0, r6
 8005f48:	f7ff ff93 	bl	8005e72 <__sfputs_r>
 8005f4c:	3001      	adds	r0, #1
 8005f4e:	f000 80aa 	beq.w	80060a6 <_vfiprintf_r+0x20e>
 8005f52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f54:	445a      	add	r2, fp
 8005f56:	9209      	str	r2, [sp, #36]	; 0x24
 8005f58:	f89a 3000 	ldrb.w	r3, [sl]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	f000 80a2 	beq.w	80060a6 <_vfiprintf_r+0x20e>
 8005f62:	2300      	movs	r3, #0
 8005f64:	f04f 32ff 	mov.w	r2, #4294967295
 8005f68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f6c:	f10a 0a01 	add.w	sl, sl, #1
 8005f70:	9304      	str	r3, [sp, #16]
 8005f72:	9307      	str	r3, [sp, #28]
 8005f74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f78:	931a      	str	r3, [sp, #104]	; 0x68
 8005f7a:	4654      	mov	r4, sl
 8005f7c:	2205      	movs	r2, #5
 8005f7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f82:	4858      	ldr	r0, [pc, #352]	; (80060e4 <_vfiprintf_r+0x24c>)
 8005f84:	f7fa f924 	bl	80001d0 <memchr>
 8005f88:	9a04      	ldr	r2, [sp, #16]
 8005f8a:	b9d8      	cbnz	r0, 8005fc4 <_vfiprintf_r+0x12c>
 8005f8c:	06d1      	lsls	r1, r2, #27
 8005f8e:	bf44      	itt	mi
 8005f90:	2320      	movmi	r3, #32
 8005f92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f96:	0713      	lsls	r3, r2, #28
 8005f98:	bf44      	itt	mi
 8005f9a:	232b      	movmi	r3, #43	; 0x2b
 8005f9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005fa0:	f89a 3000 	ldrb.w	r3, [sl]
 8005fa4:	2b2a      	cmp	r3, #42	; 0x2a
 8005fa6:	d015      	beq.n	8005fd4 <_vfiprintf_r+0x13c>
 8005fa8:	9a07      	ldr	r2, [sp, #28]
 8005faa:	4654      	mov	r4, sl
 8005fac:	2000      	movs	r0, #0
 8005fae:	f04f 0c0a 	mov.w	ip, #10
 8005fb2:	4621      	mov	r1, r4
 8005fb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005fb8:	3b30      	subs	r3, #48	; 0x30
 8005fba:	2b09      	cmp	r3, #9
 8005fbc:	d94e      	bls.n	800605c <_vfiprintf_r+0x1c4>
 8005fbe:	b1b0      	cbz	r0, 8005fee <_vfiprintf_r+0x156>
 8005fc0:	9207      	str	r2, [sp, #28]
 8005fc2:	e014      	b.n	8005fee <_vfiprintf_r+0x156>
 8005fc4:	eba0 0308 	sub.w	r3, r0, r8
 8005fc8:	fa09 f303 	lsl.w	r3, r9, r3
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	9304      	str	r3, [sp, #16]
 8005fd0:	46a2      	mov	sl, r4
 8005fd2:	e7d2      	b.n	8005f7a <_vfiprintf_r+0xe2>
 8005fd4:	9b03      	ldr	r3, [sp, #12]
 8005fd6:	1d19      	adds	r1, r3, #4
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	9103      	str	r1, [sp, #12]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	bfbb      	ittet	lt
 8005fe0:	425b      	neglt	r3, r3
 8005fe2:	f042 0202 	orrlt.w	r2, r2, #2
 8005fe6:	9307      	strge	r3, [sp, #28]
 8005fe8:	9307      	strlt	r3, [sp, #28]
 8005fea:	bfb8      	it	lt
 8005fec:	9204      	strlt	r2, [sp, #16]
 8005fee:	7823      	ldrb	r3, [r4, #0]
 8005ff0:	2b2e      	cmp	r3, #46	; 0x2e
 8005ff2:	d10c      	bne.n	800600e <_vfiprintf_r+0x176>
 8005ff4:	7863      	ldrb	r3, [r4, #1]
 8005ff6:	2b2a      	cmp	r3, #42	; 0x2a
 8005ff8:	d135      	bne.n	8006066 <_vfiprintf_r+0x1ce>
 8005ffa:	9b03      	ldr	r3, [sp, #12]
 8005ffc:	1d1a      	adds	r2, r3, #4
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	9203      	str	r2, [sp, #12]
 8006002:	2b00      	cmp	r3, #0
 8006004:	bfb8      	it	lt
 8006006:	f04f 33ff 	movlt.w	r3, #4294967295
 800600a:	3402      	adds	r4, #2
 800600c:	9305      	str	r3, [sp, #20]
 800600e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80060f4 <_vfiprintf_r+0x25c>
 8006012:	7821      	ldrb	r1, [r4, #0]
 8006014:	2203      	movs	r2, #3
 8006016:	4650      	mov	r0, sl
 8006018:	f7fa f8da 	bl	80001d0 <memchr>
 800601c:	b140      	cbz	r0, 8006030 <_vfiprintf_r+0x198>
 800601e:	2340      	movs	r3, #64	; 0x40
 8006020:	eba0 000a 	sub.w	r0, r0, sl
 8006024:	fa03 f000 	lsl.w	r0, r3, r0
 8006028:	9b04      	ldr	r3, [sp, #16]
 800602a:	4303      	orrs	r3, r0
 800602c:	3401      	adds	r4, #1
 800602e:	9304      	str	r3, [sp, #16]
 8006030:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006034:	482c      	ldr	r0, [pc, #176]	; (80060e8 <_vfiprintf_r+0x250>)
 8006036:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800603a:	2206      	movs	r2, #6
 800603c:	f7fa f8c8 	bl	80001d0 <memchr>
 8006040:	2800      	cmp	r0, #0
 8006042:	d03f      	beq.n	80060c4 <_vfiprintf_r+0x22c>
 8006044:	4b29      	ldr	r3, [pc, #164]	; (80060ec <_vfiprintf_r+0x254>)
 8006046:	bb1b      	cbnz	r3, 8006090 <_vfiprintf_r+0x1f8>
 8006048:	9b03      	ldr	r3, [sp, #12]
 800604a:	3307      	adds	r3, #7
 800604c:	f023 0307 	bic.w	r3, r3, #7
 8006050:	3308      	adds	r3, #8
 8006052:	9303      	str	r3, [sp, #12]
 8006054:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006056:	443b      	add	r3, r7
 8006058:	9309      	str	r3, [sp, #36]	; 0x24
 800605a:	e767      	b.n	8005f2c <_vfiprintf_r+0x94>
 800605c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006060:	460c      	mov	r4, r1
 8006062:	2001      	movs	r0, #1
 8006064:	e7a5      	b.n	8005fb2 <_vfiprintf_r+0x11a>
 8006066:	2300      	movs	r3, #0
 8006068:	3401      	adds	r4, #1
 800606a:	9305      	str	r3, [sp, #20]
 800606c:	4619      	mov	r1, r3
 800606e:	f04f 0c0a 	mov.w	ip, #10
 8006072:	4620      	mov	r0, r4
 8006074:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006078:	3a30      	subs	r2, #48	; 0x30
 800607a:	2a09      	cmp	r2, #9
 800607c:	d903      	bls.n	8006086 <_vfiprintf_r+0x1ee>
 800607e:	2b00      	cmp	r3, #0
 8006080:	d0c5      	beq.n	800600e <_vfiprintf_r+0x176>
 8006082:	9105      	str	r1, [sp, #20]
 8006084:	e7c3      	b.n	800600e <_vfiprintf_r+0x176>
 8006086:	fb0c 2101 	mla	r1, ip, r1, r2
 800608a:	4604      	mov	r4, r0
 800608c:	2301      	movs	r3, #1
 800608e:	e7f0      	b.n	8006072 <_vfiprintf_r+0x1da>
 8006090:	ab03      	add	r3, sp, #12
 8006092:	9300      	str	r3, [sp, #0]
 8006094:	462a      	mov	r2, r5
 8006096:	4b16      	ldr	r3, [pc, #88]	; (80060f0 <_vfiprintf_r+0x258>)
 8006098:	a904      	add	r1, sp, #16
 800609a:	4630      	mov	r0, r6
 800609c:	f3af 8000 	nop.w
 80060a0:	4607      	mov	r7, r0
 80060a2:	1c78      	adds	r0, r7, #1
 80060a4:	d1d6      	bne.n	8006054 <_vfiprintf_r+0x1bc>
 80060a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80060a8:	07d9      	lsls	r1, r3, #31
 80060aa:	d405      	bmi.n	80060b8 <_vfiprintf_r+0x220>
 80060ac:	89ab      	ldrh	r3, [r5, #12]
 80060ae:	059a      	lsls	r2, r3, #22
 80060b0:	d402      	bmi.n	80060b8 <_vfiprintf_r+0x220>
 80060b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80060b4:	f7ff fe6b 	bl	8005d8e <__retarget_lock_release_recursive>
 80060b8:	89ab      	ldrh	r3, [r5, #12]
 80060ba:	065b      	lsls	r3, r3, #25
 80060bc:	f53f af12 	bmi.w	8005ee4 <_vfiprintf_r+0x4c>
 80060c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80060c2:	e711      	b.n	8005ee8 <_vfiprintf_r+0x50>
 80060c4:	ab03      	add	r3, sp, #12
 80060c6:	9300      	str	r3, [sp, #0]
 80060c8:	462a      	mov	r2, r5
 80060ca:	4b09      	ldr	r3, [pc, #36]	; (80060f0 <_vfiprintf_r+0x258>)
 80060cc:	a904      	add	r1, sp, #16
 80060ce:	4630      	mov	r0, r6
 80060d0:	f000 f880 	bl	80061d4 <_printf_i>
 80060d4:	e7e4      	b.n	80060a0 <_vfiprintf_r+0x208>
 80060d6:	bf00      	nop
 80060d8:	08006ae4 	.word	0x08006ae4
 80060dc:	08006b04 	.word	0x08006b04
 80060e0:	08006ac4 	.word	0x08006ac4
 80060e4:	08006b24 	.word	0x08006b24
 80060e8:	08006b2e 	.word	0x08006b2e
 80060ec:	00000000 	.word	0x00000000
 80060f0:	08005e73 	.word	0x08005e73
 80060f4:	08006b2a 	.word	0x08006b2a

080060f8 <_printf_common>:
 80060f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060fc:	4616      	mov	r6, r2
 80060fe:	4699      	mov	r9, r3
 8006100:	688a      	ldr	r2, [r1, #8]
 8006102:	690b      	ldr	r3, [r1, #16]
 8006104:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006108:	4293      	cmp	r3, r2
 800610a:	bfb8      	it	lt
 800610c:	4613      	movlt	r3, r2
 800610e:	6033      	str	r3, [r6, #0]
 8006110:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006114:	4607      	mov	r7, r0
 8006116:	460c      	mov	r4, r1
 8006118:	b10a      	cbz	r2, 800611e <_printf_common+0x26>
 800611a:	3301      	adds	r3, #1
 800611c:	6033      	str	r3, [r6, #0]
 800611e:	6823      	ldr	r3, [r4, #0]
 8006120:	0699      	lsls	r1, r3, #26
 8006122:	bf42      	ittt	mi
 8006124:	6833      	ldrmi	r3, [r6, #0]
 8006126:	3302      	addmi	r3, #2
 8006128:	6033      	strmi	r3, [r6, #0]
 800612a:	6825      	ldr	r5, [r4, #0]
 800612c:	f015 0506 	ands.w	r5, r5, #6
 8006130:	d106      	bne.n	8006140 <_printf_common+0x48>
 8006132:	f104 0a19 	add.w	sl, r4, #25
 8006136:	68e3      	ldr	r3, [r4, #12]
 8006138:	6832      	ldr	r2, [r6, #0]
 800613a:	1a9b      	subs	r3, r3, r2
 800613c:	42ab      	cmp	r3, r5
 800613e:	dc26      	bgt.n	800618e <_printf_common+0x96>
 8006140:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006144:	1e13      	subs	r3, r2, #0
 8006146:	6822      	ldr	r2, [r4, #0]
 8006148:	bf18      	it	ne
 800614a:	2301      	movne	r3, #1
 800614c:	0692      	lsls	r2, r2, #26
 800614e:	d42b      	bmi.n	80061a8 <_printf_common+0xb0>
 8006150:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006154:	4649      	mov	r1, r9
 8006156:	4638      	mov	r0, r7
 8006158:	47c0      	blx	r8
 800615a:	3001      	adds	r0, #1
 800615c:	d01e      	beq.n	800619c <_printf_common+0xa4>
 800615e:	6823      	ldr	r3, [r4, #0]
 8006160:	68e5      	ldr	r5, [r4, #12]
 8006162:	6832      	ldr	r2, [r6, #0]
 8006164:	f003 0306 	and.w	r3, r3, #6
 8006168:	2b04      	cmp	r3, #4
 800616a:	bf08      	it	eq
 800616c:	1aad      	subeq	r5, r5, r2
 800616e:	68a3      	ldr	r3, [r4, #8]
 8006170:	6922      	ldr	r2, [r4, #16]
 8006172:	bf0c      	ite	eq
 8006174:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006178:	2500      	movne	r5, #0
 800617a:	4293      	cmp	r3, r2
 800617c:	bfc4      	itt	gt
 800617e:	1a9b      	subgt	r3, r3, r2
 8006180:	18ed      	addgt	r5, r5, r3
 8006182:	2600      	movs	r6, #0
 8006184:	341a      	adds	r4, #26
 8006186:	42b5      	cmp	r5, r6
 8006188:	d11a      	bne.n	80061c0 <_printf_common+0xc8>
 800618a:	2000      	movs	r0, #0
 800618c:	e008      	b.n	80061a0 <_printf_common+0xa8>
 800618e:	2301      	movs	r3, #1
 8006190:	4652      	mov	r2, sl
 8006192:	4649      	mov	r1, r9
 8006194:	4638      	mov	r0, r7
 8006196:	47c0      	blx	r8
 8006198:	3001      	adds	r0, #1
 800619a:	d103      	bne.n	80061a4 <_printf_common+0xac>
 800619c:	f04f 30ff 	mov.w	r0, #4294967295
 80061a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061a4:	3501      	adds	r5, #1
 80061a6:	e7c6      	b.n	8006136 <_printf_common+0x3e>
 80061a8:	18e1      	adds	r1, r4, r3
 80061aa:	1c5a      	adds	r2, r3, #1
 80061ac:	2030      	movs	r0, #48	; 0x30
 80061ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80061b2:	4422      	add	r2, r4
 80061b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80061b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80061bc:	3302      	adds	r3, #2
 80061be:	e7c7      	b.n	8006150 <_printf_common+0x58>
 80061c0:	2301      	movs	r3, #1
 80061c2:	4622      	mov	r2, r4
 80061c4:	4649      	mov	r1, r9
 80061c6:	4638      	mov	r0, r7
 80061c8:	47c0      	blx	r8
 80061ca:	3001      	adds	r0, #1
 80061cc:	d0e6      	beq.n	800619c <_printf_common+0xa4>
 80061ce:	3601      	adds	r6, #1
 80061d0:	e7d9      	b.n	8006186 <_printf_common+0x8e>
	...

080061d4 <_printf_i>:
 80061d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061d8:	460c      	mov	r4, r1
 80061da:	4691      	mov	r9, r2
 80061dc:	7e27      	ldrb	r7, [r4, #24]
 80061de:	990c      	ldr	r1, [sp, #48]	; 0x30
 80061e0:	2f78      	cmp	r7, #120	; 0x78
 80061e2:	4680      	mov	r8, r0
 80061e4:	469a      	mov	sl, r3
 80061e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80061ea:	d807      	bhi.n	80061fc <_printf_i+0x28>
 80061ec:	2f62      	cmp	r7, #98	; 0x62
 80061ee:	d80a      	bhi.n	8006206 <_printf_i+0x32>
 80061f0:	2f00      	cmp	r7, #0
 80061f2:	f000 80d8 	beq.w	80063a6 <_printf_i+0x1d2>
 80061f6:	2f58      	cmp	r7, #88	; 0x58
 80061f8:	f000 80a3 	beq.w	8006342 <_printf_i+0x16e>
 80061fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006200:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006204:	e03a      	b.n	800627c <_printf_i+0xa8>
 8006206:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800620a:	2b15      	cmp	r3, #21
 800620c:	d8f6      	bhi.n	80061fc <_printf_i+0x28>
 800620e:	a001      	add	r0, pc, #4	; (adr r0, 8006214 <_printf_i+0x40>)
 8006210:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006214:	0800626d 	.word	0x0800626d
 8006218:	08006281 	.word	0x08006281
 800621c:	080061fd 	.word	0x080061fd
 8006220:	080061fd 	.word	0x080061fd
 8006224:	080061fd 	.word	0x080061fd
 8006228:	080061fd 	.word	0x080061fd
 800622c:	08006281 	.word	0x08006281
 8006230:	080061fd 	.word	0x080061fd
 8006234:	080061fd 	.word	0x080061fd
 8006238:	080061fd 	.word	0x080061fd
 800623c:	080061fd 	.word	0x080061fd
 8006240:	0800638d 	.word	0x0800638d
 8006244:	080062b1 	.word	0x080062b1
 8006248:	0800636f 	.word	0x0800636f
 800624c:	080061fd 	.word	0x080061fd
 8006250:	080061fd 	.word	0x080061fd
 8006254:	080063af 	.word	0x080063af
 8006258:	080061fd 	.word	0x080061fd
 800625c:	080062b1 	.word	0x080062b1
 8006260:	080061fd 	.word	0x080061fd
 8006264:	080061fd 	.word	0x080061fd
 8006268:	08006377 	.word	0x08006377
 800626c:	680b      	ldr	r3, [r1, #0]
 800626e:	1d1a      	adds	r2, r3, #4
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	600a      	str	r2, [r1, #0]
 8006274:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006278:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800627c:	2301      	movs	r3, #1
 800627e:	e0a3      	b.n	80063c8 <_printf_i+0x1f4>
 8006280:	6825      	ldr	r5, [r4, #0]
 8006282:	6808      	ldr	r0, [r1, #0]
 8006284:	062e      	lsls	r6, r5, #24
 8006286:	f100 0304 	add.w	r3, r0, #4
 800628a:	d50a      	bpl.n	80062a2 <_printf_i+0xce>
 800628c:	6805      	ldr	r5, [r0, #0]
 800628e:	600b      	str	r3, [r1, #0]
 8006290:	2d00      	cmp	r5, #0
 8006292:	da03      	bge.n	800629c <_printf_i+0xc8>
 8006294:	232d      	movs	r3, #45	; 0x2d
 8006296:	426d      	negs	r5, r5
 8006298:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800629c:	485e      	ldr	r0, [pc, #376]	; (8006418 <_printf_i+0x244>)
 800629e:	230a      	movs	r3, #10
 80062a0:	e019      	b.n	80062d6 <_printf_i+0x102>
 80062a2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80062a6:	6805      	ldr	r5, [r0, #0]
 80062a8:	600b      	str	r3, [r1, #0]
 80062aa:	bf18      	it	ne
 80062ac:	b22d      	sxthne	r5, r5
 80062ae:	e7ef      	b.n	8006290 <_printf_i+0xbc>
 80062b0:	680b      	ldr	r3, [r1, #0]
 80062b2:	6825      	ldr	r5, [r4, #0]
 80062b4:	1d18      	adds	r0, r3, #4
 80062b6:	6008      	str	r0, [r1, #0]
 80062b8:	0628      	lsls	r0, r5, #24
 80062ba:	d501      	bpl.n	80062c0 <_printf_i+0xec>
 80062bc:	681d      	ldr	r5, [r3, #0]
 80062be:	e002      	b.n	80062c6 <_printf_i+0xf2>
 80062c0:	0669      	lsls	r1, r5, #25
 80062c2:	d5fb      	bpl.n	80062bc <_printf_i+0xe8>
 80062c4:	881d      	ldrh	r5, [r3, #0]
 80062c6:	4854      	ldr	r0, [pc, #336]	; (8006418 <_printf_i+0x244>)
 80062c8:	2f6f      	cmp	r7, #111	; 0x6f
 80062ca:	bf0c      	ite	eq
 80062cc:	2308      	moveq	r3, #8
 80062ce:	230a      	movne	r3, #10
 80062d0:	2100      	movs	r1, #0
 80062d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80062d6:	6866      	ldr	r6, [r4, #4]
 80062d8:	60a6      	str	r6, [r4, #8]
 80062da:	2e00      	cmp	r6, #0
 80062dc:	bfa2      	ittt	ge
 80062de:	6821      	ldrge	r1, [r4, #0]
 80062e0:	f021 0104 	bicge.w	r1, r1, #4
 80062e4:	6021      	strge	r1, [r4, #0]
 80062e6:	b90d      	cbnz	r5, 80062ec <_printf_i+0x118>
 80062e8:	2e00      	cmp	r6, #0
 80062ea:	d04d      	beq.n	8006388 <_printf_i+0x1b4>
 80062ec:	4616      	mov	r6, r2
 80062ee:	fbb5 f1f3 	udiv	r1, r5, r3
 80062f2:	fb03 5711 	mls	r7, r3, r1, r5
 80062f6:	5dc7      	ldrb	r7, [r0, r7]
 80062f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80062fc:	462f      	mov	r7, r5
 80062fe:	42bb      	cmp	r3, r7
 8006300:	460d      	mov	r5, r1
 8006302:	d9f4      	bls.n	80062ee <_printf_i+0x11a>
 8006304:	2b08      	cmp	r3, #8
 8006306:	d10b      	bne.n	8006320 <_printf_i+0x14c>
 8006308:	6823      	ldr	r3, [r4, #0]
 800630a:	07df      	lsls	r7, r3, #31
 800630c:	d508      	bpl.n	8006320 <_printf_i+0x14c>
 800630e:	6923      	ldr	r3, [r4, #16]
 8006310:	6861      	ldr	r1, [r4, #4]
 8006312:	4299      	cmp	r1, r3
 8006314:	bfde      	ittt	le
 8006316:	2330      	movle	r3, #48	; 0x30
 8006318:	f806 3c01 	strble.w	r3, [r6, #-1]
 800631c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006320:	1b92      	subs	r2, r2, r6
 8006322:	6122      	str	r2, [r4, #16]
 8006324:	f8cd a000 	str.w	sl, [sp]
 8006328:	464b      	mov	r3, r9
 800632a:	aa03      	add	r2, sp, #12
 800632c:	4621      	mov	r1, r4
 800632e:	4640      	mov	r0, r8
 8006330:	f7ff fee2 	bl	80060f8 <_printf_common>
 8006334:	3001      	adds	r0, #1
 8006336:	d14c      	bne.n	80063d2 <_printf_i+0x1fe>
 8006338:	f04f 30ff 	mov.w	r0, #4294967295
 800633c:	b004      	add	sp, #16
 800633e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006342:	4835      	ldr	r0, [pc, #212]	; (8006418 <_printf_i+0x244>)
 8006344:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006348:	6823      	ldr	r3, [r4, #0]
 800634a:	680e      	ldr	r6, [r1, #0]
 800634c:	061f      	lsls	r7, r3, #24
 800634e:	f856 5b04 	ldr.w	r5, [r6], #4
 8006352:	600e      	str	r6, [r1, #0]
 8006354:	d514      	bpl.n	8006380 <_printf_i+0x1ac>
 8006356:	07d9      	lsls	r1, r3, #31
 8006358:	bf44      	itt	mi
 800635a:	f043 0320 	orrmi.w	r3, r3, #32
 800635e:	6023      	strmi	r3, [r4, #0]
 8006360:	b91d      	cbnz	r5, 800636a <_printf_i+0x196>
 8006362:	6823      	ldr	r3, [r4, #0]
 8006364:	f023 0320 	bic.w	r3, r3, #32
 8006368:	6023      	str	r3, [r4, #0]
 800636a:	2310      	movs	r3, #16
 800636c:	e7b0      	b.n	80062d0 <_printf_i+0xfc>
 800636e:	6823      	ldr	r3, [r4, #0]
 8006370:	f043 0320 	orr.w	r3, r3, #32
 8006374:	6023      	str	r3, [r4, #0]
 8006376:	2378      	movs	r3, #120	; 0x78
 8006378:	4828      	ldr	r0, [pc, #160]	; (800641c <_printf_i+0x248>)
 800637a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800637e:	e7e3      	b.n	8006348 <_printf_i+0x174>
 8006380:	065e      	lsls	r6, r3, #25
 8006382:	bf48      	it	mi
 8006384:	b2ad      	uxthmi	r5, r5
 8006386:	e7e6      	b.n	8006356 <_printf_i+0x182>
 8006388:	4616      	mov	r6, r2
 800638a:	e7bb      	b.n	8006304 <_printf_i+0x130>
 800638c:	680b      	ldr	r3, [r1, #0]
 800638e:	6826      	ldr	r6, [r4, #0]
 8006390:	6960      	ldr	r0, [r4, #20]
 8006392:	1d1d      	adds	r5, r3, #4
 8006394:	600d      	str	r5, [r1, #0]
 8006396:	0635      	lsls	r5, r6, #24
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	d501      	bpl.n	80063a0 <_printf_i+0x1cc>
 800639c:	6018      	str	r0, [r3, #0]
 800639e:	e002      	b.n	80063a6 <_printf_i+0x1d2>
 80063a0:	0671      	lsls	r1, r6, #25
 80063a2:	d5fb      	bpl.n	800639c <_printf_i+0x1c8>
 80063a4:	8018      	strh	r0, [r3, #0]
 80063a6:	2300      	movs	r3, #0
 80063a8:	6123      	str	r3, [r4, #16]
 80063aa:	4616      	mov	r6, r2
 80063ac:	e7ba      	b.n	8006324 <_printf_i+0x150>
 80063ae:	680b      	ldr	r3, [r1, #0]
 80063b0:	1d1a      	adds	r2, r3, #4
 80063b2:	600a      	str	r2, [r1, #0]
 80063b4:	681e      	ldr	r6, [r3, #0]
 80063b6:	6862      	ldr	r2, [r4, #4]
 80063b8:	2100      	movs	r1, #0
 80063ba:	4630      	mov	r0, r6
 80063bc:	f7f9 ff08 	bl	80001d0 <memchr>
 80063c0:	b108      	cbz	r0, 80063c6 <_printf_i+0x1f2>
 80063c2:	1b80      	subs	r0, r0, r6
 80063c4:	6060      	str	r0, [r4, #4]
 80063c6:	6863      	ldr	r3, [r4, #4]
 80063c8:	6123      	str	r3, [r4, #16]
 80063ca:	2300      	movs	r3, #0
 80063cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063d0:	e7a8      	b.n	8006324 <_printf_i+0x150>
 80063d2:	6923      	ldr	r3, [r4, #16]
 80063d4:	4632      	mov	r2, r6
 80063d6:	4649      	mov	r1, r9
 80063d8:	4640      	mov	r0, r8
 80063da:	47d0      	blx	sl
 80063dc:	3001      	adds	r0, #1
 80063de:	d0ab      	beq.n	8006338 <_printf_i+0x164>
 80063e0:	6823      	ldr	r3, [r4, #0]
 80063e2:	079b      	lsls	r3, r3, #30
 80063e4:	d413      	bmi.n	800640e <_printf_i+0x23a>
 80063e6:	68e0      	ldr	r0, [r4, #12]
 80063e8:	9b03      	ldr	r3, [sp, #12]
 80063ea:	4298      	cmp	r0, r3
 80063ec:	bfb8      	it	lt
 80063ee:	4618      	movlt	r0, r3
 80063f0:	e7a4      	b.n	800633c <_printf_i+0x168>
 80063f2:	2301      	movs	r3, #1
 80063f4:	4632      	mov	r2, r6
 80063f6:	4649      	mov	r1, r9
 80063f8:	4640      	mov	r0, r8
 80063fa:	47d0      	blx	sl
 80063fc:	3001      	adds	r0, #1
 80063fe:	d09b      	beq.n	8006338 <_printf_i+0x164>
 8006400:	3501      	adds	r5, #1
 8006402:	68e3      	ldr	r3, [r4, #12]
 8006404:	9903      	ldr	r1, [sp, #12]
 8006406:	1a5b      	subs	r3, r3, r1
 8006408:	42ab      	cmp	r3, r5
 800640a:	dcf2      	bgt.n	80063f2 <_printf_i+0x21e>
 800640c:	e7eb      	b.n	80063e6 <_printf_i+0x212>
 800640e:	2500      	movs	r5, #0
 8006410:	f104 0619 	add.w	r6, r4, #25
 8006414:	e7f5      	b.n	8006402 <_printf_i+0x22e>
 8006416:	bf00      	nop
 8006418:	08006b35 	.word	0x08006b35
 800641c:	08006b46 	.word	0x08006b46

08006420 <_sbrk_r>:
 8006420:	b538      	push	{r3, r4, r5, lr}
 8006422:	4d06      	ldr	r5, [pc, #24]	; (800643c <_sbrk_r+0x1c>)
 8006424:	2300      	movs	r3, #0
 8006426:	4604      	mov	r4, r0
 8006428:	4608      	mov	r0, r1
 800642a:	602b      	str	r3, [r5, #0]
 800642c:	f7fa fce2 	bl	8000df4 <_sbrk>
 8006430:	1c43      	adds	r3, r0, #1
 8006432:	d102      	bne.n	800643a <_sbrk_r+0x1a>
 8006434:	682b      	ldr	r3, [r5, #0]
 8006436:	b103      	cbz	r3, 800643a <_sbrk_r+0x1a>
 8006438:	6023      	str	r3, [r4, #0]
 800643a:	bd38      	pop	{r3, r4, r5, pc}
 800643c:	200001e4 	.word	0x200001e4

08006440 <__sread>:
 8006440:	b510      	push	{r4, lr}
 8006442:	460c      	mov	r4, r1
 8006444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006448:	f000 fab4 	bl	80069b4 <_read_r>
 800644c:	2800      	cmp	r0, #0
 800644e:	bfab      	itete	ge
 8006450:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006452:	89a3      	ldrhlt	r3, [r4, #12]
 8006454:	181b      	addge	r3, r3, r0
 8006456:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800645a:	bfac      	ite	ge
 800645c:	6563      	strge	r3, [r4, #84]	; 0x54
 800645e:	81a3      	strhlt	r3, [r4, #12]
 8006460:	bd10      	pop	{r4, pc}

08006462 <__swrite>:
 8006462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006466:	461f      	mov	r7, r3
 8006468:	898b      	ldrh	r3, [r1, #12]
 800646a:	05db      	lsls	r3, r3, #23
 800646c:	4605      	mov	r5, r0
 800646e:	460c      	mov	r4, r1
 8006470:	4616      	mov	r6, r2
 8006472:	d505      	bpl.n	8006480 <__swrite+0x1e>
 8006474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006478:	2302      	movs	r3, #2
 800647a:	2200      	movs	r2, #0
 800647c:	f000 f9c8 	bl	8006810 <_lseek_r>
 8006480:	89a3      	ldrh	r3, [r4, #12]
 8006482:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006486:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800648a:	81a3      	strh	r3, [r4, #12]
 800648c:	4632      	mov	r2, r6
 800648e:	463b      	mov	r3, r7
 8006490:	4628      	mov	r0, r5
 8006492:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006496:	f000 b869 	b.w	800656c <_write_r>

0800649a <__sseek>:
 800649a:	b510      	push	{r4, lr}
 800649c:	460c      	mov	r4, r1
 800649e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064a2:	f000 f9b5 	bl	8006810 <_lseek_r>
 80064a6:	1c43      	adds	r3, r0, #1
 80064a8:	89a3      	ldrh	r3, [r4, #12]
 80064aa:	bf15      	itete	ne
 80064ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80064ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80064b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80064b6:	81a3      	strheq	r3, [r4, #12]
 80064b8:	bf18      	it	ne
 80064ba:	81a3      	strhne	r3, [r4, #12]
 80064bc:	bd10      	pop	{r4, pc}

080064be <__sclose>:
 80064be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064c2:	f000 b8d3 	b.w	800666c <_close_r>
	...

080064c8 <__swbuf_r>:
 80064c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ca:	460e      	mov	r6, r1
 80064cc:	4614      	mov	r4, r2
 80064ce:	4605      	mov	r5, r0
 80064d0:	b118      	cbz	r0, 80064da <__swbuf_r+0x12>
 80064d2:	6983      	ldr	r3, [r0, #24]
 80064d4:	b90b      	cbnz	r3, 80064da <__swbuf_r+0x12>
 80064d6:	f7ff fbbb 	bl	8005c50 <__sinit>
 80064da:	4b21      	ldr	r3, [pc, #132]	; (8006560 <__swbuf_r+0x98>)
 80064dc:	429c      	cmp	r4, r3
 80064de:	d12b      	bne.n	8006538 <__swbuf_r+0x70>
 80064e0:	686c      	ldr	r4, [r5, #4]
 80064e2:	69a3      	ldr	r3, [r4, #24]
 80064e4:	60a3      	str	r3, [r4, #8]
 80064e6:	89a3      	ldrh	r3, [r4, #12]
 80064e8:	071a      	lsls	r2, r3, #28
 80064ea:	d52f      	bpl.n	800654c <__swbuf_r+0x84>
 80064ec:	6923      	ldr	r3, [r4, #16]
 80064ee:	b36b      	cbz	r3, 800654c <__swbuf_r+0x84>
 80064f0:	6923      	ldr	r3, [r4, #16]
 80064f2:	6820      	ldr	r0, [r4, #0]
 80064f4:	1ac0      	subs	r0, r0, r3
 80064f6:	6963      	ldr	r3, [r4, #20]
 80064f8:	b2f6      	uxtb	r6, r6
 80064fa:	4283      	cmp	r3, r0
 80064fc:	4637      	mov	r7, r6
 80064fe:	dc04      	bgt.n	800650a <__swbuf_r+0x42>
 8006500:	4621      	mov	r1, r4
 8006502:	4628      	mov	r0, r5
 8006504:	f000 f948 	bl	8006798 <_fflush_r>
 8006508:	bb30      	cbnz	r0, 8006558 <__swbuf_r+0x90>
 800650a:	68a3      	ldr	r3, [r4, #8]
 800650c:	3b01      	subs	r3, #1
 800650e:	60a3      	str	r3, [r4, #8]
 8006510:	6823      	ldr	r3, [r4, #0]
 8006512:	1c5a      	adds	r2, r3, #1
 8006514:	6022      	str	r2, [r4, #0]
 8006516:	701e      	strb	r6, [r3, #0]
 8006518:	6963      	ldr	r3, [r4, #20]
 800651a:	3001      	adds	r0, #1
 800651c:	4283      	cmp	r3, r0
 800651e:	d004      	beq.n	800652a <__swbuf_r+0x62>
 8006520:	89a3      	ldrh	r3, [r4, #12]
 8006522:	07db      	lsls	r3, r3, #31
 8006524:	d506      	bpl.n	8006534 <__swbuf_r+0x6c>
 8006526:	2e0a      	cmp	r6, #10
 8006528:	d104      	bne.n	8006534 <__swbuf_r+0x6c>
 800652a:	4621      	mov	r1, r4
 800652c:	4628      	mov	r0, r5
 800652e:	f000 f933 	bl	8006798 <_fflush_r>
 8006532:	b988      	cbnz	r0, 8006558 <__swbuf_r+0x90>
 8006534:	4638      	mov	r0, r7
 8006536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006538:	4b0a      	ldr	r3, [pc, #40]	; (8006564 <__swbuf_r+0x9c>)
 800653a:	429c      	cmp	r4, r3
 800653c:	d101      	bne.n	8006542 <__swbuf_r+0x7a>
 800653e:	68ac      	ldr	r4, [r5, #8]
 8006540:	e7cf      	b.n	80064e2 <__swbuf_r+0x1a>
 8006542:	4b09      	ldr	r3, [pc, #36]	; (8006568 <__swbuf_r+0xa0>)
 8006544:	429c      	cmp	r4, r3
 8006546:	bf08      	it	eq
 8006548:	68ec      	ldreq	r4, [r5, #12]
 800654a:	e7ca      	b.n	80064e2 <__swbuf_r+0x1a>
 800654c:	4621      	mov	r1, r4
 800654e:	4628      	mov	r0, r5
 8006550:	f000 f81e 	bl	8006590 <__swsetup_r>
 8006554:	2800      	cmp	r0, #0
 8006556:	d0cb      	beq.n	80064f0 <__swbuf_r+0x28>
 8006558:	f04f 37ff 	mov.w	r7, #4294967295
 800655c:	e7ea      	b.n	8006534 <__swbuf_r+0x6c>
 800655e:	bf00      	nop
 8006560:	08006ae4 	.word	0x08006ae4
 8006564:	08006b04 	.word	0x08006b04
 8006568:	08006ac4 	.word	0x08006ac4

0800656c <_write_r>:
 800656c:	b538      	push	{r3, r4, r5, lr}
 800656e:	4d07      	ldr	r5, [pc, #28]	; (800658c <_write_r+0x20>)
 8006570:	4604      	mov	r4, r0
 8006572:	4608      	mov	r0, r1
 8006574:	4611      	mov	r1, r2
 8006576:	2200      	movs	r2, #0
 8006578:	602a      	str	r2, [r5, #0]
 800657a:	461a      	mov	r2, r3
 800657c:	f7fa fbe9 	bl	8000d52 <_write>
 8006580:	1c43      	adds	r3, r0, #1
 8006582:	d102      	bne.n	800658a <_write_r+0x1e>
 8006584:	682b      	ldr	r3, [r5, #0]
 8006586:	b103      	cbz	r3, 800658a <_write_r+0x1e>
 8006588:	6023      	str	r3, [r4, #0]
 800658a:	bd38      	pop	{r3, r4, r5, pc}
 800658c:	200001e4 	.word	0x200001e4

08006590 <__swsetup_r>:
 8006590:	4b32      	ldr	r3, [pc, #200]	; (800665c <__swsetup_r+0xcc>)
 8006592:	b570      	push	{r4, r5, r6, lr}
 8006594:	681d      	ldr	r5, [r3, #0]
 8006596:	4606      	mov	r6, r0
 8006598:	460c      	mov	r4, r1
 800659a:	b125      	cbz	r5, 80065a6 <__swsetup_r+0x16>
 800659c:	69ab      	ldr	r3, [r5, #24]
 800659e:	b913      	cbnz	r3, 80065a6 <__swsetup_r+0x16>
 80065a0:	4628      	mov	r0, r5
 80065a2:	f7ff fb55 	bl	8005c50 <__sinit>
 80065a6:	4b2e      	ldr	r3, [pc, #184]	; (8006660 <__swsetup_r+0xd0>)
 80065a8:	429c      	cmp	r4, r3
 80065aa:	d10f      	bne.n	80065cc <__swsetup_r+0x3c>
 80065ac:	686c      	ldr	r4, [r5, #4]
 80065ae:	89a3      	ldrh	r3, [r4, #12]
 80065b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80065b4:	0719      	lsls	r1, r3, #28
 80065b6:	d42c      	bmi.n	8006612 <__swsetup_r+0x82>
 80065b8:	06dd      	lsls	r5, r3, #27
 80065ba:	d411      	bmi.n	80065e0 <__swsetup_r+0x50>
 80065bc:	2309      	movs	r3, #9
 80065be:	6033      	str	r3, [r6, #0]
 80065c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80065c4:	81a3      	strh	r3, [r4, #12]
 80065c6:	f04f 30ff 	mov.w	r0, #4294967295
 80065ca:	e03e      	b.n	800664a <__swsetup_r+0xba>
 80065cc:	4b25      	ldr	r3, [pc, #148]	; (8006664 <__swsetup_r+0xd4>)
 80065ce:	429c      	cmp	r4, r3
 80065d0:	d101      	bne.n	80065d6 <__swsetup_r+0x46>
 80065d2:	68ac      	ldr	r4, [r5, #8]
 80065d4:	e7eb      	b.n	80065ae <__swsetup_r+0x1e>
 80065d6:	4b24      	ldr	r3, [pc, #144]	; (8006668 <__swsetup_r+0xd8>)
 80065d8:	429c      	cmp	r4, r3
 80065da:	bf08      	it	eq
 80065dc:	68ec      	ldreq	r4, [r5, #12]
 80065de:	e7e6      	b.n	80065ae <__swsetup_r+0x1e>
 80065e0:	0758      	lsls	r0, r3, #29
 80065e2:	d512      	bpl.n	800660a <__swsetup_r+0x7a>
 80065e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80065e6:	b141      	cbz	r1, 80065fa <__swsetup_r+0x6a>
 80065e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80065ec:	4299      	cmp	r1, r3
 80065ee:	d002      	beq.n	80065f6 <__swsetup_r+0x66>
 80065f0:	4630      	mov	r0, r6
 80065f2:	f000 f98f 	bl	8006914 <_free_r>
 80065f6:	2300      	movs	r3, #0
 80065f8:	6363      	str	r3, [r4, #52]	; 0x34
 80065fa:	89a3      	ldrh	r3, [r4, #12]
 80065fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006600:	81a3      	strh	r3, [r4, #12]
 8006602:	2300      	movs	r3, #0
 8006604:	6063      	str	r3, [r4, #4]
 8006606:	6923      	ldr	r3, [r4, #16]
 8006608:	6023      	str	r3, [r4, #0]
 800660a:	89a3      	ldrh	r3, [r4, #12]
 800660c:	f043 0308 	orr.w	r3, r3, #8
 8006610:	81a3      	strh	r3, [r4, #12]
 8006612:	6923      	ldr	r3, [r4, #16]
 8006614:	b94b      	cbnz	r3, 800662a <__swsetup_r+0x9a>
 8006616:	89a3      	ldrh	r3, [r4, #12]
 8006618:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800661c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006620:	d003      	beq.n	800662a <__swsetup_r+0x9a>
 8006622:	4621      	mov	r1, r4
 8006624:	4630      	mov	r0, r6
 8006626:	f000 f929 	bl	800687c <__smakebuf_r>
 800662a:	89a0      	ldrh	r0, [r4, #12]
 800662c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006630:	f010 0301 	ands.w	r3, r0, #1
 8006634:	d00a      	beq.n	800664c <__swsetup_r+0xbc>
 8006636:	2300      	movs	r3, #0
 8006638:	60a3      	str	r3, [r4, #8]
 800663a:	6963      	ldr	r3, [r4, #20]
 800663c:	425b      	negs	r3, r3
 800663e:	61a3      	str	r3, [r4, #24]
 8006640:	6923      	ldr	r3, [r4, #16]
 8006642:	b943      	cbnz	r3, 8006656 <__swsetup_r+0xc6>
 8006644:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006648:	d1ba      	bne.n	80065c0 <__swsetup_r+0x30>
 800664a:	bd70      	pop	{r4, r5, r6, pc}
 800664c:	0781      	lsls	r1, r0, #30
 800664e:	bf58      	it	pl
 8006650:	6963      	ldrpl	r3, [r4, #20]
 8006652:	60a3      	str	r3, [r4, #8]
 8006654:	e7f4      	b.n	8006640 <__swsetup_r+0xb0>
 8006656:	2000      	movs	r0, #0
 8006658:	e7f7      	b.n	800664a <__swsetup_r+0xba>
 800665a:	bf00      	nop
 800665c:	2000000c 	.word	0x2000000c
 8006660:	08006ae4 	.word	0x08006ae4
 8006664:	08006b04 	.word	0x08006b04
 8006668:	08006ac4 	.word	0x08006ac4

0800666c <_close_r>:
 800666c:	b538      	push	{r3, r4, r5, lr}
 800666e:	4d06      	ldr	r5, [pc, #24]	; (8006688 <_close_r+0x1c>)
 8006670:	2300      	movs	r3, #0
 8006672:	4604      	mov	r4, r0
 8006674:	4608      	mov	r0, r1
 8006676:	602b      	str	r3, [r5, #0]
 8006678:	f7fa fb87 	bl	8000d8a <_close>
 800667c:	1c43      	adds	r3, r0, #1
 800667e:	d102      	bne.n	8006686 <_close_r+0x1a>
 8006680:	682b      	ldr	r3, [r5, #0]
 8006682:	b103      	cbz	r3, 8006686 <_close_r+0x1a>
 8006684:	6023      	str	r3, [r4, #0]
 8006686:	bd38      	pop	{r3, r4, r5, pc}
 8006688:	200001e4 	.word	0x200001e4

0800668c <__sflush_r>:
 800668c:	898a      	ldrh	r2, [r1, #12]
 800668e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006692:	4605      	mov	r5, r0
 8006694:	0710      	lsls	r0, r2, #28
 8006696:	460c      	mov	r4, r1
 8006698:	d458      	bmi.n	800674c <__sflush_r+0xc0>
 800669a:	684b      	ldr	r3, [r1, #4]
 800669c:	2b00      	cmp	r3, #0
 800669e:	dc05      	bgt.n	80066ac <__sflush_r+0x20>
 80066a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	dc02      	bgt.n	80066ac <__sflush_r+0x20>
 80066a6:	2000      	movs	r0, #0
 80066a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80066ae:	2e00      	cmp	r6, #0
 80066b0:	d0f9      	beq.n	80066a6 <__sflush_r+0x1a>
 80066b2:	2300      	movs	r3, #0
 80066b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80066b8:	682f      	ldr	r7, [r5, #0]
 80066ba:	602b      	str	r3, [r5, #0]
 80066bc:	d032      	beq.n	8006724 <__sflush_r+0x98>
 80066be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80066c0:	89a3      	ldrh	r3, [r4, #12]
 80066c2:	075a      	lsls	r2, r3, #29
 80066c4:	d505      	bpl.n	80066d2 <__sflush_r+0x46>
 80066c6:	6863      	ldr	r3, [r4, #4]
 80066c8:	1ac0      	subs	r0, r0, r3
 80066ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80066cc:	b10b      	cbz	r3, 80066d2 <__sflush_r+0x46>
 80066ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80066d0:	1ac0      	subs	r0, r0, r3
 80066d2:	2300      	movs	r3, #0
 80066d4:	4602      	mov	r2, r0
 80066d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80066d8:	6a21      	ldr	r1, [r4, #32]
 80066da:	4628      	mov	r0, r5
 80066dc:	47b0      	blx	r6
 80066de:	1c43      	adds	r3, r0, #1
 80066e0:	89a3      	ldrh	r3, [r4, #12]
 80066e2:	d106      	bne.n	80066f2 <__sflush_r+0x66>
 80066e4:	6829      	ldr	r1, [r5, #0]
 80066e6:	291d      	cmp	r1, #29
 80066e8:	d82c      	bhi.n	8006744 <__sflush_r+0xb8>
 80066ea:	4a2a      	ldr	r2, [pc, #168]	; (8006794 <__sflush_r+0x108>)
 80066ec:	40ca      	lsrs	r2, r1
 80066ee:	07d6      	lsls	r6, r2, #31
 80066f0:	d528      	bpl.n	8006744 <__sflush_r+0xb8>
 80066f2:	2200      	movs	r2, #0
 80066f4:	6062      	str	r2, [r4, #4]
 80066f6:	04d9      	lsls	r1, r3, #19
 80066f8:	6922      	ldr	r2, [r4, #16]
 80066fa:	6022      	str	r2, [r4, #0]
 80066fc:	d504      	bpl.n	8006708 <__sflush_r+0x7c>
 80066fe:	1c42      	adds	r2, r0, #1
 8006700:	d101      	bne.n	8006706 <__sflush_r+0x7a>
 8006702:	682b      	ldr	r3, [r5, #0]
 8006704:	b903      	cbnz	r3, 8006708 <__sflush_r+0x7c>
 8006706:	6560      	str	r0, [r4, #84]	; 0x54
 8006708:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800670a:	602f      	str	r7, [r5, #0]
 800670c:	2900      	cmp	r1, #0
 800670e:	d0ca      	beq.n	80066a6 <__sflush_r+0x1a>
 8006710:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006714:	4299      	cmp	r1, r3
 8006716:	d002      	beq.n	800671e <__sflush_r+0x92>
 8006718:	4628      	mov	r0, r5
 800671a:	f000 f8fb 	bl	8006914 <_free_r>
 800671e:	2000      	movs	r0, #0
 8006720:	6360      	str	r0, [r4, #52]	; 0x34
 8006722:	e7c1      	b.n	80066a8 <__sflush_r+0x1c>
 8006724:	6a21      	ldr	r1, [r4, #32]
 8006726:	2301      	movs	r3, #1
 8006728:	4628      	mov	r0, r5
 800672a:	47b0      	blx	r6
 800672c:	1c41      	adds	r1, r0, #1
 800672e:	d1c7      	bne.n	80066c0 <__sflush_r+0x34>
 8006730:	682b      	ldr	r3, [r5, #0]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d0c4      	beq.n	80066c0 <__sflush_r+0x34>
 8006736:	2b1d      	cmp	r3, #29
 8006738:	d001      	beq.n	800673e <__sflush_r+0xb2>
 800673a:	2b16      	cmp	r3, #22
 800673c:	d101      	bne.n	8006742 <__sflush_r+0xb6>
 800673e:	602f      	str	r7, [r5, #0]
 8006740:	e7b1      	b.n	80066a6 <__sflush_r+0x1a>
 8006742:	89a3      	ldrh	r3, [r4, #12]
 8006744:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006748:	81a3      	strh	r3, [r4, #12]
 800674a:	e7ad      	b.n	80066a8 <__sflush_r+0x1c>
 800674c:	690f      	ldr	r7, [r1, #16]
 800674e:	2f00      	cmp	r7, #0
 8006750:	d0a9      	beq.n	80066a6 <__sflush_r+0x1a>
 8006752:	0793      	lsls	r3, r2, #30
 8006754:	680e      	ldr	r6, [r1, #0]
 8006756:	bf08      	it	eq
 8006758:	694b      	ldreq	r3, [r1, #20]
 800675a:	600f      	str	r7, [r1, #0]
 800675c:	bf18      	it	ne
 800675e:	2300      	movne	r3, #0
 8006760:	eba6 0807 	sub.w	r8, r6, r7
 8006764:	608b      	str	r3, [r1, #8]
 8006766:	f1b8 0f00 	cmp.w	r8, #0
 800676a:	dd9c      	ble.n	80066a6 <__sflush_r+0x1a>
 800676c:	6a21      	ldr	r1, [r4, #32]
 800676e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006770:	4643      	mov	r3, r8
 8006772:	463a      	mov	r2, r7
 8006774:	4628      	mov	r0, r5
 8006776:	47b0      	blx	r6
 8006778:	2800      	cmp	r0, #0
 800677a:	dc06      	bgt.n	800678a <__sflush_r+0xfe>
 800677c:	89a3      	ldrh	r3, [r4, #12]
 800677e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006782:	81a3      	strh	r3, [r4, #12]
 8006784:	f04f 30ff 	mov.w	r0, #4294967295
 8006788:	e78e      	b.n	80066a8 <__sflush_r+0x1c>
 800678a:	4407      	add	r7, r0
 800678c:	eba8 0800 	sub.w	r8, r8, r0
 8006790:	e7e9      	b.n	8006766 <__sflush_r+0xda>
 8006792:	bf00      	nop
 8006794:	20400001 	.word	0x20400001

08006798 <_fflush_r>:
 8006798:	b538      	push	{r3, r4, r5, lr}
 800679a:	690b      	ldr	r3, [r1, #16]
 800679c:	4605      	mov	r5, r0
 800679e:	460c      	mov	r4, r1
 80067a0:	b913      	cbnz	r3, 80067a8 <_fflush_r+0x10>
 80067a2:	2500      	movs	r5, #0
 80067a4:	4628      	mov	r0, r5
 80067a6:	bd38      	pop	{r3, r4, r5, pc}
 80067a8:	b118      	cbz	r0, 80067b2 <_fflush_r+0x1a>
 80067aa:	6983      	ldr	r3, [r0, #24]
 80067ac:	b90b      	cbnz	r3, 80067b2 <_fflush_r+0x1a>
 80067ae:	f7ff fa4f 	bl	8005c50 <__sinit>
 80067b2:	4b14      	ldr	r3, [pc, #80]	; (8006804 <_fflush_r+0x6c>)
 80067b4:	429c      	cmp	r4, r3
 80067b6:	d11b      	bne.n	80067f0 <_fflush_r+0x58>
 80067b8:	686c      	ldr	r4, [r5, #4]
 80067ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d0ef      	beq.n	80067a2 <_fflush_r+0xa>
 80067c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80067c4:	07d0      	lsls	r0, r2, #31
 80067c6:	d404      	bmi.n	80067d2 <_fflush_r+0x3a>
 80067c8:	0599      	lsls	r1, r3, #22
 80067ca:	d402      	bmi.n	80067d2 <_fflush_r+0x3a>
 80067cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067ce:	f7ff fadd 	bl	8005d8c <__retarget_lock_acquire_recursive>
 80067d2:	4628      	mov	r0, r5
 80067d4:	4621      	mov	r1, r4
 80067d6:	f7ff ff59 	bl	800668c <__sflush_r>
 80067da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067dc:	07da      	lsls	r2, r3, #31
 80067de:	4605      	mov	r5, r0
 80067e0:	d4e0      	bmi.n	80067a4 <_fflush_r+0xc>
 80067e2:	89a3      	ldrh	r3, [r4, #12]
 80067e4:	059b      	lsls	r3, r3, #22
 80067e6:	d4dd      	bmi.n	80067a4 <_fflush_r+0xc>
 80067e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067ea:	f7ff fad0 	bl	8005d8e <__retarget_lock_release_recursive>
 80067ee:	e7d9      	b.n	80067a4 <_fflush_r+0xc>
 80067f0:	4b05      	ldr	r3, [pc, #20]	; (8006808 <_fflush_r+0x70>)
 80067f2:	429c      	cmp	r4, r3
 80067f4:	d101      	bne.n	80067fa <_fflush_r+0x62>
 80067f6:	68ac      	ldr	r4, [r5, #8]
 80067f8:	e7df      	b.n	80067ba <_fflush_r+0x22>
 80067fa:	4b04      	ldr	r3, [pc, #16]	; (800680c <_fflush_r+0x74>)
 80067fc:	429c      	cmp	r4, r3
 80067fe:	bf08      	it	eq
 8006800:	68ec      	ldreq	r4, [r5, #12]
 8006802:	e7da      	b.n	80067ba <_fflush_r+0x22>
 8006804:	08006ae4 	.word	0x08006ae4
 8006808:	08006b04 	.word	0x08006b04
 800680c:	08006ac4 	.word	0x08006ac4

08006810 <_lseek_r>:
 8006810:	b538      	push	{r3, r4, r5, lr}
 8006812:	4d07      	ldr	r5, [pc, #28]	; (8006830 <_lseek_r+0x20>)
 8006814:	4604      	mov	r4, r0
 8006816:	4608      	mov	r0, r1
 8006818:	4611      	mov	r1, r2
 800681a:	2200      	movs	r2, #0
 800681c:	602a      	str	r2, [r5, #0]
 800681e:	461a      	mov	r2, r3
 8006820:	f7fa fada 	bl	8000dd8 <_lseek>
 8006824:	1c43      	adds	r3, r0, #1
 8006826:	d102      	bne.n	800682e <_lseek_r+0x1e>
 8006828:	682b      	ldr	r3, [r5, #0]
 800682a:	b103      	cbz	r3, 800682e <_lseek_r+0x1e>
 800682c:	6023      	str	r3, [r4, #0]
 800682e:	bd38      	pop	{r3, r4, r5, pc}
 8006830:	200001e4 	.word	0x200001e4

08006834 <__swhatbuf_r>:
 8006834:	b570      	push	{r4, r5, r6, lr}
 8006836:	460e      	mov	r6, r1
 8006838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800683c:	2900      	cmp	r1, #0
 800683e:	b096      	sub	sp, #88	; 0x58
 8006840:	4614      	mov	r4, r2
 8006842:	461d      	mov	r5, r3
 8006844:	da07      	bge.n	8006856 <__swhatbuf_r+0x22>
 8006846:	2300      	movs	r3, #0
 8006848:	602b      	str	r3, [r5, #0]
 800684a:	89b3      	ldrh	r3, [r6, #12]
 800684c:	061a      	lsls	r2, r3, #24
 800684e:	d410      	bmi.n	8006872 <__swhatbuf_r+0x3e>
 8006850:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006854:	e00e      	b.n	8006874 <__swhatbuf_r+0x40>
 8006856:	466a      	mov	r2, sp
 8006858:	f000 f8be 	bl	80069d8 <_fstat_r>
 800685c:	2800      	cmp	r0, #0
 800685e:	dbf2      	blt.n	8006846 <__swhatbuf_r+0x12>
 8006860:	9a01      	ldr	r2, [sp, #4]
 8006862:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006866:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800686a:	425a      	negs	r2, r3
 800686c:	415a      	adcs	r2, r3
 800686e:	602a      	str	r2, [r5, #0]
 8006870:	e7ee      	b.n	8006850 <__swhatbuf_r+0x1c>
 8006872:	2340      	movs	r3, #64	; 0x40
 8006874:	2000      	movs	r0, #0
 8006876:	6023      	str	r3, [r4, #0]
 8006878:	b016      	add	sp, #88	; 0x58
 800687a:	bd70      	pop	{r4, r5, r6, pc}

0800687c <__smakebuf_r>:
 800687c:	898b      	ldrh	r3, [r1, #12]
 800687e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006880:	079d      	lsls	r5, r3, #30
 8006882:	4606      	mov	r6, r0
 8006884:	460c      	mov	r4, r1
 8006886:	d507      	bpl.n	8006898 <__smakebuf_r+0x1c>
 8006888:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800688c:	6023      	str	r3, [r4, #0]
 800688e:	6123      	str	r3, [r4, #16]
 8006890:	2301      	movs	r3, #1
 8006892:	6163      	str	r3, [r4, #20]
 8006894:	b002      	add	sp, #8
 8006896:	bd70      	pop	{r4, r5, r6, pc}
 8006898:	ab01      	add	r3, sp, #4
 800689a:	466a      	mov	r2, sp
 800689c:	f7ff ffca 	bl	8006834 <__swhatbuf_r>
 80068a0:	9900      	ldr	r1, [sp, #0]
 80068a2:	4605      	mov	r5, r0
 80068a4:	4630      	mov	r0, r6
 80068a6:	f7ff fa73 	bl	8005d90 <_malloc_r>
 80068aa:	b948      	cbnz	r0, 80068c0 <__smakebuf_r+0x44>
 80068ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068b0:	059a      	lsls	r2, r3, #22
 80068b2:	d4ef      	bmi.n	8006894 <__smakebuf_r+0x18>
 80068b4:	f023 0303 	bic.w	r3, r3, #3
 80068b8:	f043 0302 	orr.w	r3, r3, #2
 80068bc:	81a3      	strh	r3, [r4, #12]
 80068be:	e7e3      	b.n	8006888 <__smakebuf_r+0xc>
 80068c0:	4b0d      	ldr	r3, [pc, #52]	; (80068f8 <__smakebuf_r+0x7c>)
 80068c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80068c4:	89a3      	ldrh	r3, [r4, #12]
 80068c6:	6020      	str	r0, [r4, #0]
 80068c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068cc:	81a3      	strh	r3, [r4, #12]
 80068ce:	9b00      	ldr	r3, [sp, #0]
 80068d0:	6163      	str	r3, [r4, #20]
 80068d2:	9b01      	ldr	r3, [sp, #4]
 80068d4:	6120      	str	r0, [r4, #16]
 80068d6:	b15b      	cbz	r3, 80068f0 <__smakebuf_r+0x74>
 80068d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068dc:	4630      	mov	r0, r6
 80068de:	f000 f88d 	bl	80069fc <_isatty_r>
 80068e2:	b128      	cbz	r0, 80068f0 <__smakebuf_r+0x74>
 80068e4:	89a3      	ldrh	r3, [r4, #12]
 80068e6:	f023 0303 	bic.w	r3, r3, #3
 80068ea:	f043 0301 	orr.w	r3, r3, #1
 80068ee:	81a3      	strh	r3, [r4, #12]
 80068f0:	89a0      	ldrh	r0, [r4, #12]
 80068f2:	4305      	orrs	r5, r0
 80068f4:	81a5      	strh	r5, [r4, #12]
 80068f6:	e7cd      	b.n	8006894 <__smakebuf_r+0x18>
 80068f8:	08005be9 	.word	0x08005be9

080068fc <__malloc_lock>:
 80068fc:	4801      	ldr	r0, [pc, #4]	; (8006904 <__malloc_lock+0x8>)
 80068fe:	f7ff ba45 	b.w	8005d8c <__retarget_lock_acquire_recursive>
 8006902:	bf00      	nop
 8006904:	200001dc 	.word	0x200001dc

08006908 <__malloc_unlock>:
 8006908:	4801      	ldr	r0, [pc, #4]	; (8006910 <__malloc_unlock+0x8>)
 800690a:	f7ff ba40 	b.w	8005d8e <__retarget_lock_release_recursive>
 800690e:	bf00      	nop
 8006910:	200001dc 	.word	0x200001dc

08006914 <_free_r>:
 8006914:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006916:	2900      	cmp	r1, #0
 8006918:	d048      	beq.n	80069ac <_free_r+0x98>
 800691a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800691e:	9001      	str	r0, [sp, #4]
 8006920:	2b00      	cmp	r3, #0
 8006922:	f1a1 0404 	sub.w	r4, r1, #4
 8006926:	bfb8      	it	lt
 8006928:	18e4      	addlt	r4, r4, r3
 800692a:	f7ff ffe7 	bl	80068fc <__malloc_lock>
 800692e:	4a20      	ldr	r2, [pc, #128]	; (80069b0 <_free_r+0x9c>)
 8006930:	9801      	ldr	r0, [sp, #4]
 8006932:	6813      	ldr	r3, [r2, #0]
 8006934:	4615      	mov	r5, r2
 8006936:	b933      	cbnz	r3, 8006946 <_free_r+0x32>
 8006938:	6063      	str	r3, [r4, #4]
 800693a:	6014      	str	r4, [r2, #0]
 800693c:	b003      	add	sp, #12
 800693e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006942:	f7ff bfe1 	b.w	8006908 <__malloc_unlock>
 8006946:	42a3      	cmp	r3, r4
 8006948:	d90b      	bls.n	8006962 <_free_r+0x4e>
 800694a:	6821      	ldr	r1, [r4, #0]
 800694c:	1862      	adds	r2, r4, r1
 800694e:	4293      	cmp	r3, r2
 8006950:	bf04      	itt	eq
 8006952:	681a      	ldreq	r2, [r3, #0]
 8006954:	685b      	ldreq	r3, [r3, #4]
 8006956:	6063      	str	r3, [r4, #4]
 8006958:	bf04      	itt	eq
 800695a:	1852      	addeq	r2, r2, r1
 800695c:	6022      	streq	r2, [r4, #0]
 800695e:	602c      	str	r4, [r5, #0]
 8006960:	e7ec      	b.n	800693c <_free_r+0x28>
 8006962:	461a      	mov	r2, r3
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	b10b      	cbz	r3, 800696c <_free_r+0x58>
 8006968:	42a3      	cmp	r3, r4
 800696a:	d9fa      	bls.n	8006962 <_free_r+0x4e>
 800696c:	6811      	ldr	r1, [r2, #0]
 800696e:	1855      	adds	r5, r2, r1
 8006970:	42a5      	cmp	r5, r4
 8006972:	d10b      	bne.n	800698c <_free_r+0x78>
 8006974:	6824      	ldr	r4, [r4, #0]
 8006976:	4421      	add	r1, r4
 8006978:	1854      	adds	r4, r2, r1
 800697a:	42a3      	cmp	r3, r4
 800697c:	6011      	str	r1, [r2, #0]
 800697e:	d1dd      	bne.n	800693c <_free_r+0x28>
 8006980:	681c      	ldr	r4, [r3, #0]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	6053      	str	r3, [r2, #4]
 8006986:	4421      	add	r1, r4
 8006988:	6011      	str	r1, [r2, #0]
 800698a:	e7d7      	b.n	800693c <_free_r+0x28>
 800698c:	d902      	bls.n	8006994 <_free_r+0x80>
 800698e:	230c      	movs	r3, #12
 8006990:	6003      	str	r3, [r0, #0]
 8006992:	e7d3      	b.n	800693c <_free_r+0x28>
 8006994:	6825      	ldr	r5, [r4, #0]
 8006996:	1961      	adds	r1, r4, r5
 8006998:	428b      	cmp	r3, r1
 800699a:	bf04      	itt	eq
 800699c:	6819      	ldreq	r1, [r3, #0]
 800699e:	685b      	ldreq	r3, [r3, #4]
 80069a0:	6063      	str	r3, [r4, #4]
 80069a2:	bf04      	itt	eq
 80069a4:	1949      	addeq	r1, r1, r5
 80069a6:	6021      	streq	r1, [r4, #0]
 80069a8:	6054      	str	r4, [r2, #4]
 80069aa:	e7c7      	b.n	800693c <_free_r+0x28>
 80069ac:	b003      	add	sp, #12
 80069ae:	bd30      	pop	{r4, r5, pc}
 80069b0:	20000090 	.word	0x20000090

080069b4 <_read_r>:
 80069b4:	b538      	push	{r3, r4, r5, lr}
 80069b6:	4d07      	ldr	r5, [pc, #28]	; (80069d4 <_read_r+0x20>)
 80069b8:	4604      	mov	r4, r0
 80069ba:	4608      	mov	r0, r1
 80069bc:	4611      	mov	r1, r2
 80069be:	2200      	movs	r2, #0
 80069c0:	602a      	str	r2, [r5, #0]
 80069c2:	461a      	mov	r2, r3
 80069c4:	f7fa f9a8 	bl	8000d18 <_read>
 80069c8:	1c43      	adds	r3, r0, #1
 80069ca:	d102      	bne.n	80069d2 <_read_r+0x1e>
 80069cc:	682b      	ldr	r3, [r5, #0]
 80069ce:	b103      	cbz	r3, 80069d2 <_read_r+0x1e>
 80069d0:	6023      	str	r3, [r4, #0]
 80069d2:	bd38      	pop	{r3, r4, r5, pc}
 80069d4:	200001e4 	.word	0x200001e4

080069d8 <_fstat_r>:
 80069d8:	b538      	push	{r3, r4, r5, lr}
 80069da:	4d07      	ldr	r5, [pc, #28]	; (80069f8 <_fstat_r+0x20>)
 80069dc:	2300      	movs	r3, #0
 80069de:	4604      	mov	r4, r0
 80069e0:	4608      	mov	r0, r1
 80069e2:	4611      	mov	r1, r2
 80069e4:	602b      	str	r3, [r5, #0]
 80069e6:	f7fa f9dc 	bl	8000da2 <_fstat>
 80069ea:	1c43      	adds	r3, r0, #1
 80069ec:	d102      	bne.n	80069f4 <_fstat_r+0x1c>
 80069ee:	682b      	ldr	r3, [r5, #0]
 80069f0:	b103      	cbz	r3, 80069f4 <_fstat_r+0x1c>
 80069f2:	6023      	str	r3, [r4, #0]
 80069f4:	bd38      	pop	{r3, r4, r5, pc}
 80069f6:	bf00      	nop
 80069f8:	200001e4 	.word	0x200001e4

080069fc <_isatty_r>:
 80069fc:	b538      	push	{r3, r4, r5, lr}
 80069fe:	4d06      	ldr	r5, [pc, #24]	; (8006a18 <_isatty_r+0x1c>)
 8006a00:	2300      	movs	r3, #0
 8006a02:	4604      	mov	r4, r0
 8006a04:	4608      	mov	r0, r1
 8006a06:	602b      	str	r3, [r5, #0]
 8006a08:	f7fa f9db 	bl	8000dc2 <_isatty>
 8006a0c:	1c43      	adds	r3, r0, #1
 8006a0e:	d102      	bne.n	8006a16 <_isatty_r+0x1a>
 8006a10:	682b      	ldr	r3, [r5, #0]
 8006a12:	b103      	cbz	r3, 8006a16 <_isatty_r+0x1a>
 8006a14:	6023      	str	r3, [r4, #0]
 8006a16:	bd38      	pop	{r3, r4, r5, pc}
 8006a18:	200001e4 	.word	0x200001e4

08006a1c <_init>:
 8006a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a1e:	bf00      	nop
 8006a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a22:	bc08      	pop	{r3}
 8006a24:	469e      	mov	lr, r3
 8006a26:	4770      	bx	lr

08006a28 <_fini>:
 8006a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a2a:	bf00      	nop
 8006a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a2e:	bc08      	pop	{r3}
 8006a30:	469e      	mov	lr, r3
 8006a32:	4770      	bx	lr
