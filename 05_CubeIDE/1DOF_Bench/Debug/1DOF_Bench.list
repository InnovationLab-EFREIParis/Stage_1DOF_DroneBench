
1DOF_Bench.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000422c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  080043bc  080043bc  000143bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044e0  080044e0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080044e0  080044e0  000144e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044e8  080044e8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044e8  080044e8  000144e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044ec  080044ec  000144ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080044f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000070  08004560  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08004560  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e7e5  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dcc  00000000  00000000  0002e885  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a8  00000000  00000000  00030658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008f0  00000000  00000000  00031000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002699e  00000000  00000000  000318f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b9a6  00000000  00000000  0005828e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec157  00000000  00000000  00063c34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014fd8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002db0  00000000  00000000  0014fde0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080043a4 	.word	0x080043a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080043a4 	.word	0x080043a4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800056c:	f000 fb1e 	bl	8000bac <HAL_Init>
	/* Configure the system clock */
	SystemClock_Config();
 8000570:	f000 f81a 	bl	80005a8 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000574:	f000 f89a 	bl	80006ac <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000578:	f000 f868 	bl	800064c <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	// Light up green led
	setGreenLed();
 800057c:	f000 f92c 	bl	80007d8 <setGreenLed>
	// blink green led
	blinkGreenLed(10, 100);
 8000580:	2164      	movs	r1, #100	; 0x64
 8000582:	200a      	movs	r0, #10
 8000584:	f000 f932 	bl	80007ec <blinkGreenLed>
	// Welcome message on UART
	sendWelcomeMsgRS232(&huart2);
 8000588:	4805      	ldr	r0, [pc, #20]	; (80005a0 <main+0x38>)
 800058a:	f000 f969 	bl	8000860 <sendWelcomeMsgRS232>
	printf("Hello from main\n\r");
 800058e:	4805      	ldr	r0, [pc, #20]	; (80005a4 <main+0x3c>)
 8000590:	f002 ffb2 	bl	80034f8 <iprintf>

	while (1) {


		// set green led if push button
		setGreenLedViaButton();
 8000594:	f000 f948 	bl	8000828 <setGreenLedViaButton>

		// UART (transmit receive character)
		sendbackRS232(&huart2);
 8000598:	4801      	ldr	r0, [pc, #4]	; (80005a0 <main+0x38>)
 800059a:	f000 f97b 	bl	8000894 <sendbackRS232>
		setGreenLedViaButton();
 800059e:	e7f9      	b.n	8000594 <main+0x2c>
 80005a0:	2000009c 	.word	0x2000009c
 80005a4:	080043bc 	.word	0x080043bc

080005a8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b096      	sub	sp, #88	; 0x58
 80005ac:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80005ae:	f107 0314 	add.w	r3, r7, #20
 80005b2:	2244      	movs	r2, #68	; 0x44
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f002 ff96 	bl	80034e8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80005bc:	463b      	mov	r3, r7
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
 80005c8:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 80005ca:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005ce:	f000 fe75 	bl	80012bc <HAL_PWREx_ControlVoltageScaling>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 80005d8:	f000 f8ce 	bl	8000778 <Error_Handler>
	}
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005dc:	2302      	movs	r3, #2
 80005de:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005e4:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e6:	2310      	movs	r3, #16
 80005e8:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ea:	2302      	movs	r3, #2
 80005ec:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ee:	2302      	movs	r3, #2
 80005f0:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 80005f2:	2301      	movs	r3, #1
 80005f4:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 80005f6:	230a      	movs	r3, #10
 80005f8:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005fa:	2307      	movs	r3, #7
 80005fc:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005fe:	2302      	movs	r3, #2
 8000600:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000602:	2302      	movs	r3, #2
 8000604:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000606:	f107 0314 	add.w	r3, r7, #20
 800060a:	4618      	mov	r0, r3
 800060c:	f000 feac 	bl	8001368 <HAL_RCC_OscConfig>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <SystemClock_Config+0x72>
		Error_Handler();
 8000616:	f000 f8af 	bl	8000778 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800061a:	230f      	movs	r3, #15
 800061c:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061e:	2303      	movs	r3, #3
 8000620:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000622:	2300      	movs	r3, #0
 8000624:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000626:	2300      	movs	r3, #0
 8000628:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800062a:	2300      	movs	r3, #0
 800062c:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 800062e:	463b      	mov	r3, r7
 8000630:	2104      	movs	r1, #4
 8000632:	4618      	mov	r0, r3
 8000634:	f001 fa7e 	bl	8001b34 <HAL_RCC_ClockConfig>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <SystemClock_Config+0x9a>
		Error_Handler();
 800063e:	f000 f89b 	bl	8000778 <Error_Handler>
	}
}
 8000642:	bf00      	nop
 8000644:	3758      	adds	r7, #88	; 0x58
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
	...

0800064c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000650:	4b14      	ldr	r3, [pc, #80]	; (80006a4 <MX_USART2_UART_Init+0x58>)
 8000652:	4a15      	ldr	r2, [pc, #84]	; (80006a8 <MX_USART2_UART_Init+0x5c>)
 8000654:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000656:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <MX_USART2_UART_Init+0x58>)
 8000658:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800065c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800065e:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <MX_USART2_UART_Init+0x58>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000664:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <MX_USART2_UART_Init+0x58>)
 8000666:	2200      	movs	r2, #0
 8000668:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800066a:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <MX_USART2_UART_Init+0x58>)
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000670:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <MX_USART2_UART_Init+0x58>)
 8000672:	220c      	movs	r2, #12
 8000674:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000676:	4b0b      	ldr	r3, [pc, #44]	; (80006a4 <MX_USART2_UART_Init+0x58>)
 8000678:	2200      	movs	r2, #0
 800067a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800067c:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <MX_USART2_UART_Init+0x58>)
 800067e:	2200      	movs	r2, #0
 8000680:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000682:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <MX_USART2_UART_Init+0x58>)
 8000684:	2200      	movs	r2, #0
 8000686:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <MX_USART2_UART_Init+0x58>)
 800068a:	2200      	movs	r2, #0
 800068c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800068e:	4805      	ldr	r0, [pc, #20]	; (80006a4 <MX_USART2_UART_Init+0x58>)
 8000690:	f002 f912 	bl	80028b8 <HAL_UART_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_USART2_UART_Init+0x52>
		Error_Handler();
 800069a:	f000 f86d 	bl	8000778 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	2000009c 	.word	0x2000009c
 80006a8:	40004400 	.word	0x40004400

080006ac <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08a      	sub	sp, #40	; 0x28
 80006b0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	60da      	str	r2, [r3, #12]
 80006c0:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80006c2:	4b2b      	ldr	r3, [pc, #172]	; (8000770 <MX_GPIO_Init+0xc4>)
 80006c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c6:	4a2a      	ldr	r2, [pc, #168]	; (8000770 <MX_GPIO_Init+0xc4>)
 80006c8:	f043 0304 	orr.w	r3, r3, #4
 80006cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ce:	4b28      	ldr	r3, [pc, #160]	; (8000770 <MX_GPIO_Init+0xc4>)
 80006d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d2:	f003 0304 	and.w	r3, r3, #4
 80006d6:	613b      	str	r3, [r7, #16]
 80006d8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80006da:	4b25      	ldr	r3, [pc, #148]	; (8000770 <MX_GPIO_Init+0xc4>)
 80006dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006de:	4a24      	ldr	r2, [pc, #144]	; (8000770 <MX_GPIO_Init+0xc4>)
 80006e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006e6:	4b22      	ldr	r3, [pc, #136]	; (8000770 <MX_GPIO_Init+0xc4>)
 80006e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80006f2:	4b1f      	ldr	r3, [pc, #124]	; (8000770 <MX_GPIO_Init+0xc4>)
 80006f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f6:	4a1e      	ldr	r2, [pc, #120]	; (8000770 <MX_GPIO_Init+0xc4>)
 80006f8:	f043 0301 	orr.w	r3, r3, #1
 80006fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006fe:	4b1c      	ldr	r3, [pc, #112]	; (8000770 <MX_GPIO_Init+0xc4>)
 8000700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000702:	f003 0301 	and.w	r3, r3, #1
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800070a:	4b19      	ldr	r3, [pc, #100]	; (8000770 <MX_GPIO_Init+0xc4>)
 800070c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070e:	4a18      	ldr	r2, [pc, #96]	; (8000770 <MX_GPIO_Init+0xc4>)
 8000710:	f043 0302 	orr.w	r3, r3, #2
 8000714:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000716:	4b16      	ldr	r3, [pc, #88]	; (8000770 <MX_GPIO_Init+0xc4>)
 8000718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071a:	f003 0302 	and.w	r3, r3, #2
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000722:	2200      	movs	r2, #0
 8000724:	2120      	movs	r1, #32
 8000726:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800072a:	f000 fd87 	bl	800123c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800072e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000732:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000734:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000738:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	2300      	movs	r3, #0
 800073c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800073e:	f107 0314 	add.w	r3, r7, #20
 8000742:	4619      	mov	r1, r3
 8000744:	480b      	ldr	r0, [pc, #44]	; (8000774 <MX_GPIO_Init+0xc8>)
 8000746:	f000 fbb7 	bl	8000eb8 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 800074a:	2320      	movs	r3, #32
 800074c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074e:	2301      	movs	r3, #1
 8000750:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	2300      	movs	r3, #0
 8000754:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000756:	2300      	movs	r3, #0
 8000758:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800075a:	f107 0314 	add.w	r3, r7, #20
 800075e:	4619      	mov	r1, r3
 8000760:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000764:	f000 fba8 	bl	8000eb8 <HAL_GPIO_Init>

}
 8000768:	bf00      	nop
 800076a:	3728      	adds	r7, #40	; 0x28
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40021000 	.word	0x40021000
 8000774:	48000800 	.word	0x48000800

08000778 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800077c:	b672      	cpsid	i
}
 800077e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000780:	e7fe      	b.n	8000780 <Error_Handler+0x8>
	...

08000784 <_write>:
}
#endif /* USE_FULL_ASSERT */

// Redefine _write function for printf
int _write(int file, char *data, int len)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b086      	sub	sp, #24
 8000788:	af00      	add	r7, sp, #0
 800078a:	60f8      	str	r0, [r7, #12]
 800078c:	60b9      	str	r1, [r7, #8]
 800078e:	607a      	str	r2, [r7, #4]
   if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	2b01      	cmp	r3, #1
 8000794:	d00a      	beq.n	80007ac <_write+0x28>
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	2b02      	cmp	r3, #2
 800079a:	d007      	beq.n	80007ac <_write+0x28>
   {
      errno = EBADF;
 800079c:	f002 fe7a 	bl	8003494 <__errno>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2209      	movs	r2, #9
 80007a4:	601a      	str	r2, [r3, #0]
      return -1;
 80007a6:	f04f 33ff 	mov.w	r3, #4294967295
 80007aa:	e00f      	b.n	80007cc <_write+0x48>
   }

   // arbitrary timeout 1000
   HAL_StatusTypeDef status =
      HAL_UART_Transmit(&huart2, (uint8_t*)data, len, 1000);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	b29a      	uxth	r2, r3
 80007b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007b4:	68b9      	ldr	r1, [r7, #8]
 80007b6:	4807      	ldr	r0, [pc, #28]	; (80007d4 <_write+0x50>)
 80007b8:	f002 f8cc 	bl	8002954 <HAL_UART_Transmit>
 80007bc:	4603      	mov	r3, r0
 80007be:	75fb      	strb	r3, [r7, #23]

   // return # of bytes written - as best we can tell
   return (status == HAL_OK ? len : 0);
 80007c0:	7dfb      	ldrb	r3, [r7, #23]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d101      	bne.n	80007ca <_write+0x46>
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	e000      	b.n	80007cc <_write+0x48>
 80007ca:	2300      	movs	r3, #0
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	3718      	adds	r7, #24
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	2000009c 	.word	0x2000009c

080007d8 <setGreenLed>:
 */

#include "remi.h"

// On board green LED On
void setGreenLed() {
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 80007dc:	2201      	movs	r2, #1
 80007de:	2120      	movs	r1, #32
 80007e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e4:	f000 fd2a 	bl	800123c <HAL_GPIO_WritePin>
}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}

080007ec <blinkGreenLed>:

// On board green LED blink
void blinkGreenLed(int nb, int delay) {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < nb; i++) {
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	e00b      	b.n	8000814 <blinkGreenLed+0x28>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80007fc:	2120      	movs	r1, #32
 80007fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000802:	f000 fd33 	bl	800126c <HAL_GPIO_TogglePin>
		HAL_Delay(delay);
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	4618      	mov	r0, r3
 800080a:	f000 fa4b 	bl	8000ca4 <HAL_Delay>
	for (int i = 0; i < nb; i++) {
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	3301      	adds	r3, #1
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fa      	ldr	r2, [r7, #12]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	429a      	cmp	r2, r3
 800081a:	dbef      	blt.n	80007fc <blinkGreenLed+0x10>
	}
}
 800081c:	bf00      	nop
 800081e:	bf00      	nop
 8000820:	3710      	adds	r7, #16
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
	...

08000828 <setGreenLedViaButton>:

// set green led if blue push button is pressed
void setGreenLedViaButton() {
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
	// Gpio, push button
	// by default, PUSH_BUTTON is at 1
	//PinState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 1)
 800082c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000830:	480a      	ldr	r0, [pc, #40]	; (800085c <setGreenLedViaButton+0x34>)
 8000832:	f000 fceb 	bl	800120c <HAL_GPIO_ReadPin>
 8000836:	4603      	mov	r3, r0
 8000838:	2b01      	cmp	r3, #1
 800083a:	d106      	bne.n	800084a <setGreenLedViaButton+0x22>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 800083c:	2200      	movs	r2, #0
 800083e:	2120      	movs	r1, #32
 8000840:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000844:	f000 fcfa 	bl	800123c <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);

}
 8000848:	e005      	b.n	8000856 <setGreenLedViaButton+0x2e>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 800084a:	2201      	movs	r2, #1
 800084c:	2120      	movs	r1, #32
 800084e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000852:	f000 fcf3 	bl	800123c <HAL_GPIO_WritePin>
}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	48000800 	.word	0x48000800

08000860 <sendWelcomeMsgRS232>:

// Welcome Message On RS232
void sendWelcomeMsgRS232(UART_HandleTypeDef *huart) {
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
	printf("Hello from remi\n\r");
 8000868:	4808      	ldr	r0, [pc, #32]	; (800088c <sendWelcomeMsgRS232+0x2c>)
 800086a:	f002 fe45 	bl	80034f8 <iprintf>
	if (HAL_UART_Transmit(huart, "Nucleo L476RG connected\n\r", 25, 100)
 800086e:	2364      	movs	r3, #100	; 0x64
 8000870:	2219      	movs	r2, #25
 8000872:	4907      	ldr	r1, [pc, #28]	; (8000890 <sendWelcomeMsgRS232+0x30>)
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	f002 f86d 	bl	8002954 <HAL_UART_Transmit>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <sendWelcomeMsgRS232+0x24>
			!= HAL_OK)
		Error_Handler();
 8000880:	f7ff ff7a 	bl	8000778 <Error_Handler>
}
 8000884:	bf00      	nop
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	080043d0 	.word	0x080043d0
 8000890:	080043e4 	.word	0x080043e4

08000894 <sendbackRS232>:

// Welcome Message On RS232
void sendbackRS232(UART_HandleTypeDef *huart) {
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
	if (HAL_UART_Receive(huart, rx_buffer, 1, 10) == HAL_OK) {
 800089c:	230a      	movs	r3, #10
 800089e:	2201      	movs	r2, #1
 80008a0:	490a      	ldr	r1, [pc, #40]	; (80008cc <sendbackRS232+0x38>)
 80008a2:	6878      	ldr	r0, [r7, #4]
 80008a4:	f002 f8ea 	bl	8002a7c <HAL_UART_Receive>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d106      	bne.n	80008bc <sendbackRS232+0x28>
		HAL_UART_Transmit(huart, rx_buffer, 1, 10);
 80008ae:	230a      	movs	r3, #10
 80008b0:	2201      	movs	r2, #1
 80008b2:	4906      	ldr	r1, [pc, #24]	; (80008cc <sendbackRS232+0x38>)
 80008b4:	6878      	ldr	r0, [r7, #4]
 80008b6:	f002 f84d 	bl	8002954 <HAL_UART_Transmit>
	} else {
		__HAL_UART_CLEAR_OREFLAG(huart);
	}
}
 80008ba:	e003      	b.n	80008c4 <sendbackRS232+0x30>
		__HAL_UART_CLEAR_OREFLAG(huart);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	2208      	movs	r2, #8
 80008c2:	621a      	str	r2, [r3, #32]
}
 80008c4:	bf00      	nop
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	20000098 	.word	0x20000098

080008d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d6:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <HAL_MspInit+0x44>)
 80008d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008da:	4a0e      	ldr	r2, [pc, #56]	; (8000914 <HAL_MspInit+0x44>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6613      	str	r3, [r2, #96]	; 0x60
 80008e2:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <HAL_MspInit+0x44>)
 80008e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ee:	4b09      	ldr	r3, [pc, #36]	; (8000914 <HAL_MspInit+0x44>)
 80008f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008f2:	4a08      	ldr	r2, [pc, #32]	; (8000914 <HAL_MspInit+0x44>)
 80008f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f8:	6593      	str	r3, [r2, #88]	; 0x58
 80008fa:	4b06      	ldr	r3, [pc, #24]	; (8000914 <HAL_MspInit+0x44>)
 80008fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000902:	603b      	str	r3, [r7, #0]
 8000904:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	40021000 	.word	0x40021000

08000918 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b0ac      	sub	sp, #176	; 0xb0
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000920:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	60da      	str	r2, [r3, #12]
 800092e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	2288      	movs	r2, #136	; 0x88
 8000936:	2100      	movs	r1, #0
 8000938:	4618      	mov	r0, r3
 800093a:	f002 fdd5 	bl	80034e8 <memset>
  if(huart->Instance==USART2)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4a21      	ldr	r2, [pc, #132]	; (80009c8 <HAL_UART_MspInit+0xb0>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d13b      	bne.n	80009c0 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000948:	2302      	movs	r3, #2
 800094a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800094c:	2300      	movs	r3, #0
 800094e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000950:	f107 0314 	add.w	r3, r7, #20
 8000954:	4618      	mov	r0, r3
 8000956:	f001 faf3 	bl	8001f40 <HAL_RCCEx_PeriphCLKConfig>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000960:	f7ff ff0a 	bl	8000778 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000964:	4b19      	ldr	r3, [pc, #100]	; (80009cc <HAL_UART_MspInit+0xb4>)
 8000966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000968:	4a18      	ldr	r2, [pc, #96]	; (80009cc <HAL_UART_MspInit+0xb4>)
 800096a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800096e:	6593      	str	r3, [r2, #88]	; 0x58
 8000970:	4b16      	ldr	r3, [pc, #88]	; (80009cc <HAL_UART_MspInit+0xb4>)
 8000972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000978:	613b      	str	r3, [r7, #16]
 800097a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800097c:	4b13      	ldr	r3, [pc, #76]	; (80009cc <HAL_UART_MspInit+0xb4>)
 800097e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000980:	4a12      	ldr	r2, [pc, #72]	; (80009cc <HAL_UART_MspInit+0xb4>)
 8000982:	f043 0301 	orr.w	r3, r3, #1
 8000986:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000988:	4b10      	ldr	r3, [pc, #64]	; (80009cc <HAL_UART_MspInit+0xb4>)
 800098a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098c:	f003 0301 	and.w	r3, r3, #1
 8000990:	60fb      	str	r3, [r7, #12]
 8000992:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000994:	230c      	movs	r3, #12
 8000996:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099a:	2302      	movs	r3, #2
 800099c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a6:	2303      	movs	r3, #3
 80009a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009ac:	2307      	movs	r3, #7
 80009ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009b6:	4619      	mov	r1, r3
 80009b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009bc:	f000 fa7c 	bl	8000eb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009c0:	bf00      	nop
 80009c2:	37b0      	adds	r7, #176	; 0xb0
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40004400 	.word	0x40004400
 80009cc:	40021000 	.word	0x40021000

080009d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <NMI_Handler+0x4>

080009d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009da:	e7fe      	b.n	80009da <HardFault_Handler+0x4>

080009dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <MemManage_Handler+0x4>

080009e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e6:	e7fe      	b.n	80009e6 <BusFault_Handler+0x4>

080009e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009ec:	e7fe      	b.n	80009ec <UsageFault_Handler+0x4>

080009ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr

08000a0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr

08000a18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a1c:	f000 f922 	bl	8000c64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b086      	sub	sp, #24
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	60f8      	str	r0, [r7, #12]
 8000a2c:	60b9      	str	r1, [r7, #8]
 8000a2e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a30:	2300      	movs	r3, #0
 8000a32:	617b      	str	r3, [r7, #20]
 8000a34:	e00a      	b.n	8000a4c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a36:	f3af 8000 	nop.w
 8000a3a:	4601      	mov	r1, r0
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	1c5a      	adds	r2, r3, #1
 8000a40:	60ba      	str	r2, [r7, #8]
 8000a42:	b2ca      	uxtb	r2, r1
 8000a44:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	617b      	str	r3, [r7, #20]
 8000a4c:	697a      	ldr	r2, [r7, #20]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	dbf0      	blt.n	8000a36 <_read+0x12>
	}

return len;
 8000a54:	687b      	ldr	r3, [r7, #4]
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3718      	adds	r7, #24
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <_close>:
	}
	return len;
}

int _close(int file)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	b083      	sub	sp, #12
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
	return -1;
 8000a66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr

08000a76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a76:	b480      	push	{r7}
 8000a78:	b083      	sub	sp, #12
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
 8000a7e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a86:	605a      	str	r2, [r3, #4]
	return 0;
 8000a88:	2300      	movs	r3, #0
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr

08000a96 <_isatty>:

int _isatty(int file)
{
 8000a96:	b480      	push	{r7}
 8000a98:	b083      	sub	sp, #12
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
	return 1;
 8000a9e:	2301      	movs	r3, #1
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	60b9      	str	r1, [r7, #8]
 8000ab6:	607a      	str	r2, [r7, #4]
	return 0;
 8000ab8:	2300      	movs	r3, #0
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3714      	adds	r7, #20
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
	...

08000ac8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ad0:	4a14      	ldr	r2, [pc, #80]	; (8000b24 <_sbrk+0x5c>)
 8000ad2:	4b15      	ldr	r3, [pc, #84]	; (8000b28 <_sbrk+0x60>)
 8000ad4:	1ad3      	subs	r3, r2, r3
 8000ad6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000adc:	4b13      	ldr	r3, [pc, #76]	; (8000b2c <_sbrk+0x64>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d102      	bne.n	8000aea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ae4:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <_sbrk+0x64>)
 8000ae6:	4a12      	ldr	r2, [pc, #72]	; (8000b30 <_sbrk+0x68>)
 8000ae8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aea:	4b10      	ldr	r3, [pc, #64]	; (8000b2c <_sbrk+0x64>)
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4413      	add	r3, r2
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d207      	bcs.n	8000b08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000af8:	f002 fccc 	bl	8003494 <__errno>
 8000afc:	4603      	mov	r3, r0
 8000afe:	220c      	movs	r2, #12
 8000b00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b02:	f04f 33ff 	mov.w	r3, #4294967295
 8000b06:	e009      	b.n	8000b1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b08:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <_sbrk+0x64>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b0e:	4b07      	ldr	r3, [pc, #28]	; (8000b2c <_sbrk+0x64>)
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4413      	add	r3, r2
 8000b16:	4a05      	ldr	r2, [pc, #20]	; (8000b2c <_sbrk+0x64>)
 8000b18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3718      	adds	r7, #24
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	20018000 	.word	0x20018000
 8000b28:	00000400 	.word	0x00000400
 8000b2c:	2000008c 	.word	0x2000008c
 8000b30:	20000138 	.word	0x20000138

08000b34 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b38:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <SystemInit+0x20>)
 8000b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b3e:	4a05      	ldr	r2, [pc, #20]	; (8000b54 <SystemInit+0x20>)
 8000b40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b90 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b5c:	f7ff ffea 	bl	8000b34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b60:	480c      	ldr	r0, [pc, #48]	; (8000b94 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b62:	490d      	ldr	r1, [pc, #52]	; (8000b98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b64:	4a0d      	ldr	r2, [pc, #52]	; (8000b9c <LoopForever+0xe>)
  movs r3, #0
 8000b66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b68:	e002      	b.n	8000b70 <LoopCopyDataInit>

08000b6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b6e:	3304      	adds	r3, #4

08000b70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b74:	d3f9      	bcc.n	8000b6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b76:	4a0a      	ldr	r2, [pc, #40]	; (8000ba0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b78:	4c0a      	ldr	r4, [pc, #40]	; (8000ba4 <LoopForever+0x16>)
  movs r3, #0
 8000b7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b7c:	e001      	b.n	8000b82 <LoopFillZerobss>

08000b7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b80:	3204      	adds	r2, #4

08000b82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b84:	d3fb      	bcc.n	8000b7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b86:	f002 fc8b 	bl	80034a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b8a:	f7ff fced 	bl	8000568 <main>

08000b8e <LoopForever>:

LoopForever:
    b LoopForever
 8000b8e:	e7fe      	b.n	8000b8e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b90:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b98:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b9c:	080044f0 	.word	0x080044f0
  ldr r2, =_sbss
 8000ba0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ba4:	20000134 	.word	0x20000134

08000ba8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ba8:	e7fe      	b.n	8000ba8 <ADC1_2_IRQHandler>
	...

08000bac <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bb6:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <HAL_Init+0x3c>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a0b      	ldr	r2, [pc, #44]	; (8000be8 <HAL_Init+0x3c>)
 8000bbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bc0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bc2:	2003      	movs	r0, #3
 8000bc4:	f000 f944 	bl	8000e50 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bc8:	2000      	movs	r0, #0
 8000bca:	f000 f80f 	bl	8000bec <HAL_InitTick>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d002      	beq.n	8000bda <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	71fb      	strb	r3, [r7, #7]
 8000bd8:	e001      	b.n	8000bde <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bda:	f7ff fe79 	bl	80008d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bde:	79fb      	ldrb	r3, [r7, #7]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40022000 	.word	0x40022000

08000bec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000bf8:	4b17      	ldr	r3, [pc, #92]	; (8000c58 <HAL_InitTick+0x6c>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d023      	beq.n	8000c48 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c00:	4b16      	ldr	r3, [pc, #88]	; (8000c5c <HAL_InitTick+0x70>)
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	4b14      	ldr	r3, [pc, #80]	; (8000c58 <HAL_InitTick+0x6c>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	4619      	mov	r1, r3
 8000c0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c16:	4618      	mov	r0, r3
 8000c18:	f000 f941 	bl	8000e9e <HAL_SYSTICK_Config>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d10f      	bne.n	8000c42 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2b0f      	cmp	r3, #15
 8000c26:	d809      	bhi.n	8000c3c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	6879      	ldr	r1, [r7, #4]
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	f000 f919 	bl	8000e66 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c34:	4a0a      	ldr	r2, [pc, #40]	; (8000c60 <HAL_InitTick+0x74>)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6013      	str	r3, [r2, #0]
 8000c3a:	e007      	b.n	8000c4c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	73fb      	strb	r3, [r7, #15]
 8000c40:	e004      	b.n	8000c4c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	73fb      	strb	r3, [r7, #15]
 8000c46:	e001      	b.n	8000c4c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20000008 	.word	0x20000008
 8000c5c:	20000000 	.word	0x20000000
 8000c60:	20000004 	.word	0x20000004

08000c64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <HAL_IncTick+0x20>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <HAL_IncTick+0x24>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4413      	add	r3, r2
 8000c74:	4a04      	ldr	r2, [pc, #16]	; (8000c88 <HAL_IncTick+0x24>)
 8000c76:	6013      	str	r3, [r2, #0]
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	20000008 	.word	0x20000008
 8000c88:	20000120 	.word	0x20000120

08000c8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c90:	4b03      	ldr	r3, [pc, #12]	; (8000ca0 <HAL_GetTick+0x14>)
 8000c92:	681b      	ldr	r3, [r3, #0]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	20000120 	.word	0x20000120

08000ca4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cac:	f7ff ffee 	bl	8000c8c <HAL_GetTick>
 8000cb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cbc:	d005      	beq.n	8000cca <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000cbe:	4b0a      	ldr	r3, [pc, #40]	; (8000ce8 <HAL_Delay+0x44>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cca:	bf00      	nop
 8000ccc:	f7ff ffde 	bl	8000c8c <HAL_GetTick>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	68fa      	ldr	r2, [r7, #12]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d8f7      	bhi.n	8000ccc <HAL_Delay+0x28>
  {
  }
}
 8000cdc:	bf00      	nop
 8000cde:	bf00      	nop
 8000ce0:	3710      	adds	r7, #16
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000008 	.word	0x20000008

08000cec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	f003 0307 	and.w	r3, r3, #7
 8000cfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cfc:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <__NVIC_SetPriorityGrouping+0x44>)
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d02:	68ba      	ldr	r2, [r7, #8]
 8000d04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d08:	4013      	ands	r3, r2
 8000d0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d1e:	4a04      	ldr	r2, [pc, #16]	; (8000d30 <__NVIC_SetPriorityGrouping+0x44>)
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	60d3      	str	r3, [r2, #12]
}
 8000d24:	bf00      	nop
 8000d26:	3714      	adds	r7, #20
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d38:	4b04      	ldr	r3, [pc, #16]	; (8000d4c <__NVIC_GetPriorityGrouping+0x18>)
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	0a1b      	lsrs	r3, r3, #8
 8000d3e:	f003 0307 	and.w	r3, r3, #7
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	6039      	str	r1, [r7, #0]
 8000d5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	db0a      	blt.n	8000d7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	b2da      	uxtb	r2, r3
 8000d68:	490c      	ldr	r1, [pc, #48]	; (8000d9c <__NVIC_SetPriority+0x4c>)
 8000d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6e:	0112      	lsls	r2, r2, #4
 8000d70:	b2d2      	uxtb	r2, r2
 8000d72:	440b      	add	r3, r1
 8000d74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d78:	e00a      	b.n	8000d90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	b2da      	uxtb	r2, r3
 8000d7e:	4908      	ldr	r1, [pc, #32]	; (8000da0 <__NVIC_SetPriority+0x50>)
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	f003 030f 	and.w	r3, r3, #15
 8000d86:	3b04      	subs	r3, #4
 8000d88:	0112      	lsls	r2, r2, #4
 8000d8a:	b2d2      	uxtb	r2, r2
 8000d8c:	440b      	add	r3, r1
 8000d8e:	761a      	strb	r2, [r3, #24]
}
 8000d90:	bf00      	nop
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	e000e100 	.word	0xe000e100
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b089      	sub	sp, #36	; 0x24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	f003 0307 	and.w	r3, r3, #7
 8000db6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	f1c3 0307 	rsb	r3, r3, #7
 8000dbe:	2b04      	cmp	r3, #4
 8000dc0:	bf28      	it	cs
 8000dc2:	2304      	movcs	r3, #4
 8000dc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	3304      	adds	r3, #4
 8000dca:	2b06      	cmp	r3, #6
 8000dcc:	d902      	bls.n	8000dd4 <NVIC_EncodePriority+0x30>
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	3b03      	subs	r3, #3
 8000dd2:	e000      	b.n	8000dd6 <NVIC_EncodePriority+0x32>
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ddc:	69bb      	ldr	r3, [r7, #24]
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	43da      	mvns	r2, r3
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	401a      	ands	r2, r3
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dec:	f04f 31ff 	mov.w	r1, #4294967295
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	fa01 f303 	lsl.w	r3, r1, r3
 8000df6:	43d9      	mvns	r1, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dfc:	4313      	orrs	r3, r2
         );
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3724      	adds	r7, #36	; 0x24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
	...

08000e0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	3b01      	subs	r3, #1
 8000e18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e1c:	d301      	bcc.n	8000e22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e00f      	b.n	8000e42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e22:	4a0a      	ldr	r2, [pc, #40]	; (8000e4c <SysTick_Config+0x40>)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	3b01      	subs	r3, #1
 8000e28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e2a:	210f      	movs	r1, #15
 8000e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e30:	f7ff ff8e 	bl	8000d50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e34:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <SysTick_Config+0x40>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e3a:	4b04      	ldr	r3, [pc, #16]	; (8000e4c <SysTick_Config+0x40>)
 8000e3c:	2207      	movs	r2, #7
 8000e3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	e000e010 	.word	0xe000e010

08000e50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f7ff ff47 	bl	8000cec <__NVIC_SetPriorityGrouping>
}
 8000e5e:	bf00      	nop
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b086      	sub	sp, #24
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	60b9      	str	r1, [r7, #8]
 8000e70:	607a      	str	r2, [r7, #4]
 8000e72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e78:	f7ff ff5c 	bl	8000d34 <__NVIC_GetPriorityGrouping>
 8000e7c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e7e:	687a      	ldr	r2, [r7, #4]
 8000e80:	68b9      	ldr	r1, [r7, #8]
 8000e82:	6978      	ldr	r0, [r7, #20]
 8000e84:	f7ff ff8e 	bl	8000da4 <NVIC_EncodePriority>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e8e:	4611      	mov	r1, r2
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff ff5d 	bl	8000d50 <__NVIC_SetPriority>
}
 8000e96:	bf00      	nop
 8000e98:	3718      	adds	r7, #24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b082      	sub	sp, #8
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f7ff ffb0 	bl	8000e0c <SysTick_Config>
 8000eac:	4603      	mov	r3, r0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
	...

08000eb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b087      	sub	sp, #28
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ec6:	e17f      	b.n	80011c8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	2101      	movs	r1, #1
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	f000 8171 	beq.w	80011c2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f003 0303 	and.w	r3, r3, #3
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d005      	beq.n	8000ef8 <HAL_GPIO_Init+0x40>
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f003 0303 	and.w	r3, r3, #3
 8000ef4:	2b02      	cmp	r3, #2
 8000ef6:	d130      	bne.n	8000f5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	689b      	ldr	r3, [r3, #8]
 8000efc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	2203      	movs	r2, #3
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	68da      	ldr	r2, [r3, #12]
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f2e:	2201      	movs	r2, #1
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	43db      	mvns	r3, r3
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	091b      	lsrs	r3, r3, #4
 8000f44:	f003 0201 	and.w	r2, r3, #1
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f003 0303 	and.w	r3, r3, #3
 8000f62:	2b03      	cmp	r3, #3
 8000f64:	d118      	bne.n	8000f98 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	43db      	mvns	r3, r3
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	08db      	lsrs	r3, r3, #3
 8000f82:	f003 0201 	and.w	r2, r3, #1
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 0303 	and.w	r3, r3, #3
 8000fa0:	2b03      	cmp	r3, #3
 8000fa2:	d017      	beq.n	8000fd4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	2203      	movs	r2, #3
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	689a      	ldr	r2, [r3, #8]
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f003 0303 	and.w	r3, r3, #3
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d123      	bne.n	8001028 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	08da      	lsrs	r2, r3, #3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3208      	adds	r2, #8
 8000fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fec:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	f003 0307 	and.w	r3, r3, #7
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	220f      	movs	r2, #15
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	4013      	ands	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	691a      	ldr	r2, [r3, #16]
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	4313      	orrs	r3, r2
 8001018:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	08da      	lsrs	r2, r3, #3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	3208      	adds	r2, #8
 8001022:	6939      	ldr	r1, [r7, #16]
 8001024:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	2203      	movs	r2, #3
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	43db      	mvns	r3, r3
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	4013      	ands	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 0203 	and.w	r2, r3, #3
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	4313      	orrs	r3, r2
 8001054:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001064:	2b00      	cmp	r3, #0
 8001066:	f000 80ac 	beq.w	80011c2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106a:	4b5f      	ldr	r3, [pc, #380]	; (80011e8 <HAL_GPIO_Init+0x330>)
 800106c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800106e:	4a5e      	ldr	r2, [pc, #376]	; (80011e8 <HAL_GPIO_Init+0x330>)
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	6613      	str	r3, [r2, #96]	; 0x60
 8001076:	4b5c      	ldr	r3, [pc, #368]	; (80011e8 <HAL_GPIO_Init+0x330>)
 8001078:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001082:	4a5a      	ldr	r2, [pc, #360]	; (80011ec <HAL_GPIO_Init+0x334>)
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	089b      	lsrs	r3, r3, #2
 8001088:	3302      	adds	r3, #2
 800108a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800108e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	f003 0303 	and.w	r3, r3, #3
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	220f      	movs	r2, #15
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43db      	mvns	r3, r3
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	4013      	ands	r3, r2
 80010a4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010ac:	d025      	beq.n	80010fa <HAL_GPIO_Init+0x242>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a4f      	ldr	r2, [pc, #316]	; (80011f0 <HAL_GPIO_Init+0x338>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d01f      	beq.n	80010f6 <HAL_GPIO_Init+0x23e>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a4e      	ldr	r2, [pc, #312]	; (80011f4 <HAL_GPIO_Init+0x33c>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d019      	beq.n	80010f2 <HAL_GPIO_Init+0x23a>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a4d      	ldr	r2, [pc, #308]	; (80011f8 <HAL_GPIO_Init+0x340>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d013      	beq.n	80010ee <HAL_GPIO_Init+0x236>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a4c      	ldr	r2, [pc, #304]	; (80011fc <HAL_GPIO_Init+0x344>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d00d      	beq.n	80010ea <HAL_GPIO_Init+0x232>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a4b      	ldr	r2, [pc, #300]	; (8001200 <HAL_GPIO_Init+0x348>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d007      	beq.n	80010e6 <HAL_GPIO_Init+0x22e>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a4a      	ldr	r2, [pc, #296]	; (8001204 <HAL_GPIO_Init+0x34c>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d101      	bne.n	80010e2 <HAL_GPIO_Init+0x22a>
 80010de:	2306      	movs	r3, #6
 80010e0:	e00c      	b.n	80010fc <HAL_GPIO_Init+0x244>
 80010e2:	2307      	movs	r3, #7
 80010e4:	e00a      	b.n	80010fc <HAL_GPIO_Init+0x244>
 80010e6:	2305      	movs	r3, #5
 80010e8:	e008      	b.n	80010fc <HAL_GPIO_Init+0x244>
 80010ea:	2304      	movs	r3, #4
 80010ec:	e006      	b.n	80010fc <HAL_GPIO_Init+0x244>
 80010ee:	2303      	movs	r3, #3
 80010f0:	e004      	b.n	80010fc <HAL_GPIO_Init+0x244>
 80010f2:	2302      	movs	r3, #2
 80010f4:	e002      	b.n	80010fc <HAL_GPIO_Init+0x244>
 80010f6:	2301      	movs	r3, #1
 80010f8:	e000      	b.n	80010fc <HAL_GPIO_Init+0x244>
 80010fa:	2300      	movs	r3, #0
 80010fc:	697a      	ldr	r2, [r7, #20]
 80010fe:	f002 0203 	and.w	r2, r2, #3
 8001102:	0092      	lsls	r2, r2, #2
 8001104:	4093      	lsls	r3, r2
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	4313      	orrs	r3, r2
 800110a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800110c:	4937      	ldr	r1, [pc, #220]	; (80011ec <HAL_GPIO_Init+0x334>)
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	089b      	lsrs	r3, r3, #2
 8001112:	3302      	adds	r3, #2
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800111a:	4b3b      	ldr	r3, [pc, #236]	; (8001208 <HAL_GPIO_Init+0x350>)
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	43db      	mvns	r3, r3
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	4013      	ands	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d003      	beq.n	800113e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	4313      	orrs	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800113e:	4a32      	ldr	r2, [pc, #200]	; (8001208 <HAL_GPIO_Init+0x350>)
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001144:	4b30      	ldr	r3, [pc, #192]	; (8001208 <HAL_GPIO_Init+0x350>)
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	43db      	mvns	r3, r3
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	4013      	ands	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d003      	beq.n	8001168 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	4313      	orrs	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001168:	4a27      	ldr	r2, [pc, #156]	; (8001208 <HAL_GPIO_Init+0x350>)
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800116e:	4b26      	ldr	r3, [pc, #152]	; (8001208 <HAL_GPIO_Init+0x350>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	43db      	mvns	r3, r3
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	4013      	ands	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d003      	beq.n	8001192 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	4313      	orrs	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001192:	4a1d      	ldr	r2, [pc, #116]	; (8001208 <HAL_GPIO_Init+0x350>)
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001198:	4b1b      	ldr	r3, [pc, #108]	; (8001208 <HAL_GPIO_Init+0x350>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	43db      	mvns	r3, r3
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	4013      	ands	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d003      	beq.n	80011bc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011bc:	4a12      	ldr	r2, [pc, #72]	; (8001208 <HAL_GPIO_Init+0x350>)
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	3301      	adds	r3, #1
 80011c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	fa22 f303 	lsr.w	r3, r2, r3
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	f47f ae78 	bne.w	8000ec8 <HAL_GPIO_Init+0x10>
  }
}
 80011d8:	bf00      	nop
 80011da:	bf00      	nop
 80011dc:	371c      	adds	r7, #28
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	40021000 	.word	0x40021000
 80011ec:	40010000 	.word	0x40010000
 80011f0:	48000400 	.word	0x48000400
 80011f4:	48000800 	.word	0x48000800
 80011f8:	48000c00 	.word	0x48000c00
 80011fc:	48001000 	.word	0x48001000
 8001200:	48001400 	.word	0x48001400
 8001204:	48001800 	.word	0x48001800
 8001208:	40010400 	.word	0x40010400

0800120c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	460b      	mov	r3, r1
 8001216:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	691a      	ldr	r2, [r3, #16]
 800121c:	887b      	ldrh	r3, [r7, #2]
 800121e:	4013      	ands	r3, r2
 8001220:	2b00      	cmp	r3, #0
 8001222:	d002      	beq.n	800122a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001224:	2301      	movs	r3, #1
 8001226:	73fb      	strb	r3, [r7, #15]
 8001228:	e001      	b.n	800122e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800122a:	2300      	movs	r3, #0
 800122c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800122e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	460b      	mov	r3, r1
 8001246:	807b      	strh	r3, [r7, #2]
 8001248:	4613      	mov	r3, r2
 800124a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800124c:	787b      	ldrb	r3, [r7, #1]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d003      	beq.n	800125a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001252:	887a      	ldrh	r2, [r7, #2]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001258:	e002      	b.n	8001260 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800125a:	887a      	ldrh	r2, [r7, #2]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001260:	bf00      	nop
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800126c:	b480      	push	{r7}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	695b      	ldr	r3, [r3, #20]
 800127c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800127e:	887a      	ldrh	r2, [r7, #2]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	4013      	ands	r3, r2
 8001284:	041a      	lsls	r2, r3, #16
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	43d9      	mvns	r1, r3
 800128a:	887b      	ldrh	r3, [r7, #2]
 800128c:	400b      	ands	r3, r1
 800128e:	431a      	orrs	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	619a      	str	r2, [r3, #24]
}
 8001294:	bf00      	nop
 8001296:	3714      	adds	r7, #20
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80012a4:	4b04      	ldr	r3, [pc, #16]	; (80012b8 <HAL_PWREx_GetVoltageRange+0x18>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	40007000 	.word	0x40007000

080012bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012ca:	d130      	bne.n	800132e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80012cc:	4b23      	ldr	r3, [pc, #140]	; (800135c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012d8:	d038      	beq.n	800134c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012da:	4b20      	ldr	r3, [pc, #128]	; (800135c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012e2:	4a1e      	ldr	r2, [pc, #120]	; (800135c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012e8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012ea:	4b1d      	ldr	r3, [pc, #116]	; (8001360 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2232      	movs	r2, #50	; 0x32
 80012f0:	fb02 f303 	mul.w	r3, r2, r3
 80012f4:	4a1b      	ldr	r2, [pc, #108]	; (8001364 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80012f6:	fba2 2303 	umull	r2, r3, r2, r3
 80012fa:	0c9b      	lsrs	r3, r3, #18
 80012fc:	3301      	adds	r3, #1
 80012fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001300:	e002      	b.n	8001308 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	3b01      	subs	r3, #1
 8001306:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001308:	4b14      	ldr	r3, [pc, #80]	; (800135c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800130a:	695b      	ldr	r3, [r3, #20]
 800130c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001310:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001314:	d102      	bne.n	800131c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d1f2      	bne.n	8001302 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800131c:	4b0f      	ldr	r3, [pc, #60]	; (800135c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800131e:	695b      	ldr	r3, [r3, #20]
 8001320:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001324:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001328:	d110      	bne.n	800134c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e00f      	b.n	800134e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800132e:	4b0b      	ldr	r3, [pc, #44]	; (800135c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001336:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800133a:	d007      	beq.n	800134c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800133c:	4b07      	ldr	r3, [pc, #28]	; (800135c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001344:	4a05      	ldr	r2, [pc, #20]	; (800135c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001346:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800134a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3714      	adds	r7, #20
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	40007000 	.word	0x40007000
 8001360:	20000000 	.word	0x20000000
 8001364:	431bde83 	.word	0x431bde83

08001368 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b088      	sub	sp, #32
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d101      	bne.n	800137a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e3d4      	b.n	8001b24 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800137a:	4ba1      	ldr	r3, [pc, #644]	; (8001600 <HAL_RCC_OscConfig+0x298>)
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	f003 030c 	and.w	r3, r3, #12
 8001382:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001384:	4b9e      	ldr	r3, [pc, #632]	; (8001600 <HAL_RCC_OscConfig+0x298>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	f003 0303 	and.w	r3, r3, #3
 800138c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0310 	and.w	r3, r3, #16
 8001396:	2b00      	cmp	r3, #0
 8001398:	f000 80e4 	beq.w	8001564 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d007      	beq.n	80013b2 <HAL_RCC_OscConfig+0x4a>
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	2b0c      	cmp	r3, #12
 80013a6:	f040 808b 	bne.w	80014c0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	f040 8087 	bne.w	80014c0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013b2:	4b93      	ldr	r3, [pc, #588]	; (8001600 <HAL_RCC_OscConfig+0x298>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d005      	beq.n	80013ca <HAL_RCC_OscConfig+0x62>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	699b      	ldr	r3, [r3, #24]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d101      	bne.n	80013ca <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e3ac      	b.n	8001b24 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a1a      	ldr	r2, [r3, #32]
 80013ce:	4b8c      	ldr	r3, [pc, #560]	; (8001600 <HAL_RCC_OscConfig+0x298>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0308 	and.w	r3, r3, #8
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d004      	beq.n	80013e4 <HAL_RCC_OscConfig+0x7c>
 80013da:	4b89      	ldr	r3, [pc, #548]	; (8001600 <HAL_RCC_OscConfig+0x298>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013e2:	e005      	b.n	80013f0 <HAL_RCC_OscConfig+0x88>
 80013e4:	4b86      	ldr	r3, [pc, #536]	; (8001600 <HAL_RCC_OscConfig+0x298>)
 80013e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013ea:	091b      	lsrs	r3, r3, #4
 80013ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d223      	bcs.n	800143c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6a1b      	ldr	r3, [r3, #32]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f000 fd41 	bl	8001e80 <RCC_SetFlashLatencyFromMSIRange>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	e38d      	b.n	8001b24 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001408:	4b7d      	ldr	r3, [pc, #500]	; (8001600 <HAL_RCC_OscConfig+0x298>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a7c      	ldr	r2, [pc, #496]	; (8001600 <HAL_RCC_OscConfig+0x298>)
 800140e:	f043 0308 	orr.w	r3, r3, #8
 8001412:	6013      	str	r3, [r2, #0]
 8001414:	4b7a      	ldr	r3, [pc, #488]	; (8001600 <HAL_RCC_OscConfig+0x298>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6a1b      	ldr	r3, [r3, #32]
 8001420:	4977      	ldr	r1, [pc, #476]	; (8001600 <HAL_RCC_OscConfig+0x298>)
 8001422:	4313      	orrs	r3, r2
 8001424:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001426:	4b76      	ldr	r3, [pc, #472]	; (8001600 <HAL_RCC_OscConfig+0x298>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	69db      	ldr	r3, [r3, #28]
 8001432:	021b      	lsls	r3, r3, #8
 8001434:	4972      	ldr	r1, [pc, #456]	; (8001600 <HAL_RCC_OscConfig+0x298>)
 8001436:	4313      	orrs	r3, r2
 8001438:	604b      	str	r3, [r1, #4]
 800143a:	e025      	b.n	8001488 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800143c:	4b70      	ldr	r3, [pc, #448]	; (8001600 <HAL_RCC_OscConfig+0x298>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a6f      	ldr	r2, [pc, #444]	; (8001600 <HAL_RCC_OscConfig+0x298>)
 8001442:	f043 0308 	orr.w	r3, r3, #8
 8001446:	6013      	str	r3, [r2, #0]
 8001448:	4b6d      	ldr	r3, [pc, #436]	; (8001600 <HAL_RCC_OscConfig+0x298>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6a1b      	ldr	r3, [r3, #32]
 8001454:	496a      	ldr	r1, [pc, #424]	; (8001600 <HAL_RCC_OscConfig+0x298>)
 8001456:	4313      	orrs	r3, r2
 8001458:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800145a:	4b69      	ldr	r3, [pc, #420]	; (8001600 <HAL_RCC_OscConfig+0x298>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	69db      	ldr	r3, [r3, #28]
 8001466:	021b      	lsls	r3, r3, #8
 8001468:	4965      	ldr	r1, [pc, #404]	; (8001600 <HAL_RCC_OscConfig+0x298>)
 800146a:	4313      	orrs	r3, r2
 800146c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d109      	bne.n	8001488 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6a1b      	ldr	r3, [r3, #32]
 8001478:	4618      	mov	r0, r3
 800147a:	f000 fd01 	bl	8001e80 <RCC_SetFlashLatencyFromMSIRange>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e34d      	b.n	8001b24 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001488:	f000 fc36 	bl	8001cf8 <HAL_RCC_GetSysClockFreq>
 800148c:	4602      	mov	r2, r0
 800148e:	4b5c      	ldr	r3, [pc, #368]	; (8001600 <HAL_RCC_OscConfig+0x298>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	091b      	lsrs	r3, r3, #4
 8001494:	f003 030f 	and.w	r3, r3, #15
 8001498:	495a      	ldr	r1, [pc, #360]	; (8001604 <HAL_RCC_OscConfig+0x29c>)
 800149a:	5ccb      	ldrb	r3, [r1, r3]
 800149c:	f003 031f 	and.w	r3, r3, #31
 80014a0:	fa22 f303 	lsr.w	r3, r2, r3
 80014a4:	4a58      	ldr	r2, [pc, #352]	; (8001608 <HAL_RCC_OscConfig+0x2a0>)
 80014a6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80014a8:	4b58      	ldr	r3, [pc, #352]	; (800160c <HAL_RCC_OscConfig+0x2a4>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff fb9d 	bl	8000bec <HAL_InitTick>
 80014b2:	4603      	mov	r3, r0
 80014b4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80014b6:	7bfb      	ldrb	r3, [r7, #15]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d052      	beq.n	8001562 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80014bc:	7bfb      	ldrb	r3, [r7, #15]
 80014be:	e331      	b.n	8001b24 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d032      	beq.n	800152e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80014c8:	4b4d      	ldr	r3, [pc, #308]	; (8001600 <HAL_RCC_OscConfig+0x298>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a4c      	ldr	r2, [pc, #304]	; (8001600 <HAL_RCC_OscConfig+0x298>)
 80014ce:	f043 0301 	orr.w	r3, r3, #1
 80014d2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014d4:	f7ff fbda 	bl	8000c8c <HAL_GetTick>
 80014d8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014da:	e008      	b.n	80014ee <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014dc:	f7ff fbd6 	bl	8000c8c <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e31a      	b.n	8001b24 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014ee:	4b44      	ldr	r3, [pc, #272]	; (8001600 <HAL_RCC_OscConfig+0x298>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d0f0      	beq.n	80014dc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014fa:	4b41      	ldr	r3, [pc, #260]	; (8001600 <HAL_RCC_OscConfig+0x298>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a40      	ldr	r2, [pc, #256]	; (8001600 <HAL_RCC_OscConfig+0x298>)
 8001500:	f043 0308 	orr.w	r3, r3, #8
 8001504:	6013      	str	r3, [r2, #0]
 8001506:	4b3e      	ldr	r3, [pc, #248]	; (8001600 <HAL_RCC_OscConfig+0x298>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6a1b      	ldr	r3, [r3, #32]
 8001512:	493b      	ldr	r1, [pc, #236]	; (8001600 <HAL_RCC_OscConfig+0x298>)
 8001514:	4313      	orrs	r3, r2
 8001516:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001518:	4b39      	ldr	r3, [pc, #228]	; (8001600 <HAL_RCC_OscConfig+0x298>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	69db      	ldr	r3, [r3, #28]
 8001524:	021b      	lsls	r3, r3, #8
 8001526:	4936      	ldr	r1, [pc, #216]	; (8001600 <HAL_RCC_OscConfig+0x298>)
 8001528:	4313      	orrs	r3, r2
 800152a:	604b      	str	r3, [r1, #4]
 800152c:	e01a      	b.n	8001564 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800152e:	4b34      	ldr	r3, [pc, #208]	; (8001600 <HAL_RCC_OscConfig+0x298>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a33      	ldr	r2, [pc, #204]	; (8001600 <HAL_RCC_OscConfig+0x298>)
 8001534:	f023 0301 	bic.w	r3, r3, #1
 8001538:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800153a:	f7ff fba7 	bl	8000c8c <HAL_GetTick>
 800153e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001540:	e008      	b.n	8001554 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001542:	f7ff fba3 	bl	8000c8c <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d901      	bls.n	8001554 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e2e7      	b.n	8001b24 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001554:	4b2a      	ldr	r3, [pc, #168]	; (8001600 <HAL_RCC_OscConfig+0x298>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0302 	and.w	r3, r3, #2
 800155c:	2b00      	cmp	r3, #0
 800155e:	d1f0      	bne.n	8001542 <HAL_RCC_OscConfig+0x1da>
 8001560:	e000      	b.n	8001564 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001562:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0301 	and.w	r3, r3, #1
 800156c:	2b00      	cmp	r3, #0
 800156e:	d074      	beq.n	800165a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	2b08      	cmp	r3, #8
 8001574:	d005      	beq.n	8001582 <HAL_RCC_OscConfig+0x21a>
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	2b0c      	cmp	r3, #12
 800157a:	d10e      	bne.n	800159a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	2b03      	cmp	r3, #3
 8001580:	d10b      	bne.n	800159a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001582:	4b1f      	ldr	r3, [pc, #124]	; (8001600 <HAL_RCC_OscConfig+0x298>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d064      	beq.n	8001658 <HAL_RCC_OscConfig+0x2f0>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d160      	bne.n	8001658 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e2c4      	b.n	8001b24 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015a2:	d106      	bne.n	80015b2 <HAL_RCC_OscConfig+0x24a>
 80015a4:	4b16      	ldr	r3, [pc, #88]	; (8001600 <HAL_RCC_OscConfig+0x298>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a15      	ldr	r2, [pc, #84]	; (8001600 <HAL_RCC_OscConfig+0x298>)
 80015aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015ae:	6013      	str	r3, [r2, #0]
 80015b0:	e01d      	b.n	80015ee <HAL_RCC_OscConfig+0x286>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015ba:	d10c      	bne.n	80015d6 <HAL_RCC_OscConfig+0x26e>
 80015bc:	4b10      	ldr	r3, [pc, #64]	; (8001600 <HAL_RCC_OscConfig+0x298>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a0f      	ldr	r2, [pc, #60]	; (8001600 <HAL_RCC_OscConfig+0x298>)
 80015c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015c6:	6013      	str	r3, [r2, #0]
 80015c8:	4b0d      	ldr	r3, [pc, #52]	; (8001600 <HAL_RCC_OscConfig+0x298>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a0c      	ldr	r2, [pc, #48]	; (8001600 <HAL_RCC_OscConfig+0x298>)
 80015ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015d2:	6013      	str	r3, [r2, #0]
 80015d4:	e00b      	b.n	80015ee <HAL_RCC_OscConfig+0x286>
 80015d6:	4b0a      	ldr	r3, [pc, #40]	; (8001600 <HAL_RCC_OscConfig+0x298>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a09      	ldr	r2, [pc, #36]	; (8001600 <HAL_RCC_OscConfig+0x298>)
 80015dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015e0:	6013      	str	r3, [r2, #0]
 80015e2:	4b07      	ldr	r3, [pc, #28]	; (8001600 <HAL_RCC_OscConfig+0x298>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a06      	ldr	r2, [pc, #24]	; (8001600 <HAL_RCC_OscConfig+0x298>)
 80015e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ec:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d01c      	beq.n	8001630 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f6:	f7ff fb49 	bl	8000c8c <HAL_GetTick>
 80015fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015fc:	e011      	b.n	8001622 <HAL_RCC_OscConfig+0x2ba>
 80015fe:	bf00      	nop
 8001600:	40021000 	.word	0x40021000
 8001604:	08004400 	.word	0x08004400
 8001608:	20000000 	.word	0x20000000
 800160c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001610:	f7ff fb3c 	bl	8000c8c <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b64      	cmp	r3, #100	; 0x64
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e280      	b.n	8001b24 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001622:	4baf      	ldr	r3, [pc, #700]	; (80018e0 <HAL_RCC_OscConfig+0x578>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d0f0      	beq.n	8001610 <HAL_RCC_OscConfig+0x2a8>
 800162e:	e014      	b.n	800165a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001630:	f7ff fb2c 	bl	8000c8c <HAL_GetTick>
 8001634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001636:	e008      	b.n	800164a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001638:	f7ff fb28 	bl	8000c8c <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b64      	cmp	r3, #100	; 0x64
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e26c      	b.n	8001b24 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800164a:	4ba5      	ldr	r3, [pc, #660]	; (80018e0 <HAL_RCC_OscConfig+0x578>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1f0      	bne.n	8001638 <HAL_RCC_OscConfig+0x2d0>
 8001656:	e000      	b.n	800165a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001658:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d060      	beq.n	8001728 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	2b04      	cmp	r3, #4
 800166a:	d005      	beq.n	8001678 <HAL_RCC_OscConfig+0x310>
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	2b0c      	cmp	r3, #12
 8001670:	d119      	bne.n	80016a6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	2b02      	cmp	r3, #2
 8001676:	d116      	bne.n	80016a6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001678:	4b99      	ldr	r3, [pc, #612]	; (80018e0 <HAL_RCC_OscConfig+0x578>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001680:	2b00      	cmp	r3, #0
 8001682:	d005      	beq.n	8001690 <HAL_RCC_OscConfig+0x328>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d101      	bne.n	8001690 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e249      	b.n	8001b24 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001690:	4b93      	ldr	r3, [pc, #588]	; (80018e0 <HAL_RCC_OscConfig+0x578>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	691b      	ldr	r3, [r3, #16]
 800169c:	061b      	lsls	r3, r3, #24
 800169e:	4990      	ldr	r1, [pc, #576]	; (80018e0 <HAL_RCC_OscConfig+0x578>)
 80016a0:	4313      	orrs	r3, r2
 80016a2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016a4:	e040      	b.n	8001728 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d023      	beq.n	80016f6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016ae:	4b8c      	ldr	r3, [pc, #560]	; (80018e0 <HAL_RCC_OscConfig+0x578>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a8b      	ldr	r2, [pc, #556]	; (80018e0 <HAL_RCC_OscConfig+0x578>)
 80016b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ba:	f7ff fae7 	bl	8000c8c <HAL_GetTick>
 80016be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016c0:	e008      	b.n	80016d4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016c2:	f7ff fae3 	bl	8000c8c <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e227      	b.n	8001b24 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016d4:	4b82      	ldr	r3, [pc, #520]	; (80018e0 <HAL_RCC_OscConfig+0x578>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d0f0      	beq.n	80016c2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016e0:	4b7f      	ldr	r3, [pc, #508]	; (80018e0 <HAL_RCC_OscConfig+0x578>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	691b      	ldr	r3, [r3, #16]
 80016ec:	061b      	lsls	r3, r3, #24
 80016ee:	497c      	ldr	r1, [pc, #496]	; (80018e0 <HAL_RCC_OscConfig+0x578>)
 80016f0:	4313      	orrs	r3, r2
 80016f2:	604b      	str	r3, [r1, #4]
 80016f4:	e018      	b.n	8001728 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016f6:	4b7a      	ldr	r3, [pc, #488]	; (80018e0 <HAL_RCC_OscConfig+0x578>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a79      	ldr	r2, [pc, #484]	; (80018e0 <HAL_RCC_OscConfig+0x578>)
 80016fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001700:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001702:	f7ff fac3 	bl	8000c8c <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001708:	e008      	b.n	800171c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800170a:	f7ff fabf 	bl	8000c8c <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e203      	b.n	8001b24 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800171c:	4b70      	ldr	r3, [pc, #448]	; (80018e0 <HAL_RCC_OscConfig+0x578>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001724:	2b00      	cmp	r3, #0
 8001726:	d1f0      	bne.n	800170a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0308 	and.w	r3, r3, #8
 8001730:	2b00      	cmp	r3, #0
 8001732:	d03c      	beq.n	80017ae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	695b      	ldr	r3, [r3, #20]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d01c      	beq.n	8001776 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800173c:	4b68      	ldr	r3, [pc, #416]	; (80018e0 <HAL_RCC_OscConfig+0x578>)
 800173e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001742:	4a67      	ldr	r2, [pc, #412]	; (80018e0 <HAL_RCC_OscConfig+0x578>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800174c:	f7ff fa9e 	bl	8000c8c <HAL_GetTick>
 8001750:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001754:	f7ff fa9a 	bl	8000c8c <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b02      	cmp	r3, #2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e1de      	b.n	8001b24 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001766:	4b5e      	ldr	r3, [pc, #376]	; (80018e0 <HAL_RCC_OscConfig+0x578>)
 8001768:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800176c:	f003 0302 	and.w	r3, r3, #2
 8001770:	2b00      	cmp	r3, #0
 8001772:	d0ef      	beq.n	8001754 <HAL_RCC_OscConfig+0x3ec>
 8001774:	e01b      	b.n	80017ae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001776:	4b5a      	ldr	r3, [pc, #360]	; (80018e0 <HAL_RCC_OscConfig+0x578>)
 8001778:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800177c:	4a58      	ldr	r2, [pc, #352]	; (80018e0 <HAL_RCC_OscConfig+0x578>)
 800177e:	f023 0301 	bic.w	r3, r3, #1
 8001782:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001786:	f7ff fa81 	bl	8000c8c <HAL_GetTick>
 800178a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800178c:	e008      	b.n	80017a0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800178e:	f7ff fa7d 	bl	8000c8c <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e1c1      	b.n	8001b24 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017a0:	4b4f      	ldr	r3, [pc, #316]	; (80018e0 <HAL_RCC_OscConfig+0x578>)
 80017a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1ef      	bne.n	800178e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0304 	and.w	r3, r3, #4
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	f000 80a6 	beq.w	8001908 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017bc:	2300      	movs	r3, #0
 80017be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80017c0:	4b47      	ldr	r3, [pc, #284]	; (80018e0 <HAL_RCC_OscConfig+0x578>)
 80017c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d10d      	bne.n	80017e8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017cc:	4b44      	ldr	r3, [pc, #272]	; (80018e0 <HAL_RCC_OscConfig+0x578>)
 80017ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d0:	4a43      	ldr	r2, [pc, #268]	; (80018e0 <HAL_RCC_OscConfig+0x578>)
 80017d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017d6:	6593      	str	r3, [r2, #88]	; 0x58
 80017d8:	4b41      	ldr	r3, [pc, #260]	; (80018e0 <HAL_RCC_OscConfig+0x578>)
 80017da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e0:	60bb      	str	r3, [r7, #8]
 80017e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017e4:	2301      	movs	r3, #1
 80017e6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017e8:	4b3e      	ldr	r3, [pc, #248]	; (80018e4 <HAL_RCC_OscConfig+0x57c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d118      	bne.n	8001826 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017f4:	4b3b      	ldr	r3, [pc, #236]	; (80018e4 <HAL_RCC_OscConfig+0x57c>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a3a      	ldr	r2, [pc, #232]	; (80018e4 <HAL_RCC_OscConfig+0x57c>)
 80017fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001800:	f7ff fa44 	bl	8000c8c <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001808:	f7ff fa40 	bl	8000c8c <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b02      	cmp	r3, #2
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e184      	b.n	8001b24 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800181a:	4b32      	ldr	r3, [pc, #200]	; (80018e4 <HAL_RCC_OscConfig+0x57c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001822:	2b00      	cmp	r3, #0
 8001824:	d0f0      	beq.n	8001808 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d108      	bne.n	8001840 <HAL_RCC_OscConfig+0x4d8>
 800182e:	4b2c      	ldr	r3, [pc, #176]	; (80018e0 <HAL_RCC_OscConfig+0x578>)
 8001830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001834:	4a2a      	ldr	r2, [pc, #168]	; (80018e0 <HAL_RCC_OscConfig+0x578>)
 8001836:	f043 0301 	orr.w	r3, r3, #1
 800183a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800183e:	e024      	b.n	800188a <HAL_RCC_OscConfig+0x522>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	2b05      	cmp	r3, #5
 8001846:	d110      	bne.n	800186a <HAL_RCC_OscConfig+0x502>
 8001848:	4b25      	ldr	r3, [pc, #148]	; (80018e0 <HAL_RCC_OscConfig+0x578>)
 800184a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800184e:	4a24      	ldr	r2, [pc, #144]	; (80018e0 <HAL_RCC_OscConfig+0x578>)
 8001850:	f043 0304 	orr.w	r3, r3, #4
 8001854:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001858:	4b21      	ldr	r3, [pc, #132]	; (80018e0 <HAL_RCC_OscConfig+0x578>)
 800185a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800185e:	4a20      	ldr	r2, [pc, #128]	; (80018e0 <HAL_RCC_OscConfig+0x578>)
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001868:	e00f      	b.n	800188a <HAL_RCC_OscConfig+0x522>
 800186a:	4b1d      	ldr	r3, [pc, #116]	; (80018e0 <HAL_RCC_OscConfig+0x578>)
 800186c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001870:	4a1b      	ldr	r2, [pc, #108]	; (80018e0 <HAL_RCC_OscConfig+0x578>)
 8001872:	f023 0301 	bic.w	r3, r3, #1
 8001876:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800187a:	4b19      	ldr	r3, [pc, #100]	; (80018e0 <HAL_RCC_OscConfig+0x578>)
 800187c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001880:	4a17      	ldr	r2, [pc, #92]	; (80018e0 <HAL_RCC_OscConfig+0x578>)
 8001882:	f023 0304 	bic.w	r3, r3, #4
 8001886:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d016      	beq.n	80018c0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001892:	f7ff f9fb 	bl	8000c8c <HAL_GetTick>
 8001896:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001898:	e00a      	b.n	80018b0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800189a:	f7ff f9f7 	bl	8000c8c <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e139      	b.n	8001b24 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018b0:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <HAL_RCC_OscConfig+0x578>)
 80018b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d0ed      	beq.n	800189a <HAL_RCC_OscConfig+0x532>
 80018be:	e01a      	b.n	80018f6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c0:	f7ff f9e4 	bl	8000c8c <HAL_GetTick>
 80018c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018c6:	e00f      	b.n	80018e8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018c8:	f7ff f9e0 	bl	8000c8c <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d906      	bls.n	80018e8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e122      	b.n	8001b24 <HAL_RCC_OscConfig+0x7bc>
 80018de:	bf00      	nop
 80018e0:	40021000 	.word	0x40021000
 80018e4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018e8:	4b90      	ldr	r3, [pc, #576]	; (8001b2c <HAL_RCC_OscConfig+0x7c4>)
 80018ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1e8      	bne.n	80018c8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018f6:	7ffb      	ldrb	r3, [r7, #31]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d105      	bne.n	8001908 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018fc:	4b8b      	ldr	r3, [pc, #556]	; (8001b2c <HAL_RCC_OscConfig+0x7c4>)
 80018fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001900:	4a8a      	ldr	r2, [pc, #552]	; (8001b2c <HAL_RCC_OscConfig+0x7c4>)
 8001902:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001906:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800190c:	2b00      	cmp	r3, #0
 800190e:	f000 8108 	beq.w	8001b22 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001916:	2b02      	cmp	r3, #2
 8001918:	f040 80d0 	bne.w	8001abc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800191c:	4b83      	ldr	r3, [pc, #524]	; (8001b2c <HAL_RCC_OscConfig+0x7c4>)
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	f003 0203 	and.w	r2, r3, #3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800192c:	429a      	cmp	r2, r3
 800192e:	d130      	bne.n	8001992 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	3b01      	subs	r3, #1
 800193c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800193e:	429a      	cmp	r2, r3
 8001940:	d127      	bne.n	8001992 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800194c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800194e:	429a      	cmp	r2, r3
 8001950:	d11f      	bne.n	8001992 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800195c:	2a07      	cmp	r2, #7
 800195e:	bf14      	ite	ne
 8001960:	2201      	movne	r2, #1
 8001962:	2200      	moveq	r2, #0
 8001964:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001966:	4293      	cmp	r3, r2
 8001968:	d113      	bne.n	8001992 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001974:	085b      	lsrs	r3, r3, #1
 8001976:	3b01      	subs	r3, #1
 8001978:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800197a:	429a      	cmp	r2, r3
 800197c:	d109      	bne.n	8001992 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001988:	085b      	lsrs	r3, r3, #1
 800198a:	3b01      	subs	r3, #1
 800198c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800198e:	429a      	cmp	r2, r3
 8001990:	d06e      	beq.n	8001a70 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	2b0c      	cmp	r3, #12
 8001996:	d069      	beq.n	8001a6c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001998:	4b64      	ldr	r3, [pc, #400]	; (8001b2c <HAL_RCC_OscConfig+0x7c4>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d105      	bne.n	80019b0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80019a4:	4b61      	ldr	r3, [pc, #388]	; (8001b2c <HAL_RCC_OscConfig+0x7c4>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e0b7      	b.n	8001b24 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80019b4:	4b5d      	ldr	r3, [pc, #372]	; (8001b2c <HAL_RCC_OscConfig+0x7c4>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a5c      	ldr	r2, [pc, #368]	; (8001b2c <HAL_RCC_OscConfig+0x7c4>)
 80019ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019be:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019c0:	f7ff f964 	bl	8000c8c <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c8:	f7ff f960 	bl	8000c8c <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e0a4      	b.n	8001b24 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019da:	4b54      	ldr	r3, [pc, #336]	; (8001b2c <HAL_RCC_OscConfig+0x7c4>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d1f0      	bne.n	80019c8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019e6:	4b51      	ldr	r3, [pc, #324]	; (8001b2c <HAL_RCC_OscConfig+0x7c4>)
 80019e8:	68da      	ldr	r2, [r3, #12]
 80019ea:	4b51      	ldr	r3, [pc, #324]	; (8001b30 <HAL_RCC_OscConfig+0x7c8>)
 80019ec:	4013      	ands	r3, r2
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80019f6:	3a01      	subs	r2, #1
 80019f8:	0112      	lsls	r2, r2, #4
 80019fa:	4311      	orrs	r1, r2
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a00:	0212      	lsls	r2, r2, #8
 8001a02:	4311      	orrs	r1, r2
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a08:	0852      	lsrs	r2, r2, #1
 8001a0a:	3a01      	subs	r2, #1
 8001a0c:	0552      	lsls	r2, r2, #21
 8001a0e:	4311      	orrs	r1, r2
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a14:	0852      	lsrs	r2, r2, #1
 8001a16:	3a01      	subs	r2, #1
 8001a18:	0652      	lsls	r2, r2, #25
 8001a1a:	4311      	orrs	r1, r2
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a20:	0912      	lsrs	r2, r2, #4
 8001a22:	0452      	lsls	r2, r2, #17
 8001a24:	430a      	orrs	r2, r1
 8001a26:	4941      	ldr	r1, [pc, #260]	; (8001b2c <HAL_RCC_OscConfig+0x7c4>)
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a2c:	4b3f      	ldr	r3, [pc, #252]	; (8001b2c <HAL_RCC_OscConfig+0x7c4>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a3e      	ldr	r2, [pc, #248]	; (8001b2c <HAL_RCC_OscConfig+0x7c4>)
 8001a32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a36:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a38:	4b3c      	ldr	r3, [pc, #240]	; (8001b2c <HAL_RCC_OscConfig+0x7c4>)
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	4a3b      	ldr	r2, [pc, #236]	; (8001b2c <HAL_RCC_OscConfig+0x7c4>)
 8001a3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a42:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a44:	f7ff f922 	bl	8000c8c <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a4c:	f7ff f91e 	bl	8000c8c <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e062      	b.n	8001b24 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a5e:	4b33      	ldr	r3, [pc, #204]	; (8001b2c <HAL_RCC_OscConfig+0x7c4>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d0f0      	beq.n	8001a4c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a6a:	e05a      	b.n	8001b22 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e059      	b.n	8001b24 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a70:	4b2e      	ldr	r3, [pc, #184]	; (8001b2c <HAL_RCC_OscConfig+0x7c4>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d152      	bne.n	8001b22 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a7c:	4b2b      	ldr	r3, [pc, #172]	; (8001b2c <HAL_RCC_OscConfig+0x7c4>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a2a      	ldr	r2, [pc, #168]	; (8001b2c <HAL_RCC_OscConfig+0x7c4>)
 8001a82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a86:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a88:	4b28      	ldr	r3, [pc, #160]	; (8001b2c <HAL_RCC_OscConfig+0x7c4>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	4a27      	ldr	r2, [pc, #156]	; (8001b2c <HAL_RCC_OscConfig+0x7c4>)
 8001a8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a92:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a94:	f7ff f8fa 	bl	8000c8c <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a9c:	f7ff f8f6 	bl	8000c8c <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e03a      	b.n	8001b24 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aae:	4b1f      	ldr	r3, [pc, #124]	; (8001b2c <HAL_RCC_OscConfig+0x7c4>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d0f0      	beq.n	8001a9c <HAL_RCC_OscConfig+0x734>
 8001aba:	e032      	b.n	8001b22 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	2b0c      	cmp	r3, #12
 8001ac0:	d02d      	beq.n	8001b1e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ac2:	4b1a      	ldr	r3, [pc, #104]	; (8001b2c <HAL_RCC_OscConfig+0x7c4>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a19      	ldr	r2, [pc, #100]	; (8001b2c <HAL_RCC_OscConfig+0x7c4>)
 8001ac8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001acc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001ace:	4b17      	ldr	r3, [pc, #92]	; (8001b2c <HAL_RCC_OscConfig+0x7c4>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d105      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001ada:	4b14      	ldr	r3, [pc, #80]	; (8001b2c <HAL_RCC_OscConfig+0x7c4>)
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	4a13      	ldr	r2, [pc, #76]	; (8001b2c <HAL_RCC_OscConfig+0x7c4>)
 8001ae0:	f023 0303 	bic.w	r3, r3, #3
 8001ae4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001ae6:	4b11      	ldr	r3, [pc, #68]	; (8001b2c <HAL_RCC_OscConfig+0x7c4>)
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	4a10      	ldr	r2, [pc, #64]	; (8001b2c <HAL_RCC_OscConfig+0x7c4>)
 8001aec:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001af0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001af4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af6:	f7ff f8c9 	bl	8000c8c <HAL_GetTick>
 8001afa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001afc:	e008      	b.n	8001b10 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001afe:	f7ff f8c5 	bl	8000c8c <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e009      	b.n	8001b24 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b10:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <HAL_RCC_OscConfig+0x7c4>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d1f0      	bne.n	8001afe <HAL_RCC_OscConfig+0x796>
 8001b1c:	e001      	b.n	8001b22 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e000      	b.n	8001b24 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3720      	adds	r7, #32
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	f99d808c 	.word	0xf99d808c

08001b34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d101      	bne.n	8001b48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e0c8      	b.n	8001cda <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b48:	4b66      	ldr	r3, [pc, #408]	; (8001ce4 <HAL_RCC_ClockConfig+0x1b0>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0307 	and.w	r3, r3, #7
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d910      	bls.n	8001b78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b56:	4b63      	ldr	r3, [pc, #396]	; (8001ce4 <HAL_RCC_ClockConfig+0x1b0>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f023 0207 	bic.w	r2, r3, #7
 8001b5e:	4961      	ldr	r1, [pc, #388]	; (8001ce4 <HAL_RCC_ClockConfig+0x1b0>)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b66:	4b5f      	ldr	r3, [pc, #380]	; (8001ce4 <HAL_RCC_ClockConfig+0x1b0>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0307 	and.w	r3, r3, #7
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d001      	beq.n	8001b78 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e0b0      	b.n	8001cda <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d04c      	beq.n	8001c1e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	2b03      	cmp	r3, #3
 8001b8a:	d107      	bne.n	8001b9c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b8c:	4b56      	ldr	r3, [pc, #344]	; (8001ce8 <HAL_RCC_ClockConfig+0x1b4>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d121      	bne.n	8001bdc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e09e      	b.n	8001cda <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d107      	bne.n	8001bb4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ba4:	4b50      	ldr	r3, [pc, #320]	; (8001ce8 <HAL_RCC_ClockConfig+0x1b4>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d115      	bne.n	8001bdc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e092      	b.n	8001cda <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d107      	bne.n	8001bcc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bbc:	4b4a      	ldr	r3, [pc, #296]	; (8001ce8 <HAL_RCC_ClockConfig+0x1b4>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d109      	bne.n	8001bdc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e086      	b.n	8001cda <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bcc:	4b46      	ldr	r3, [pc, #280]	; (8001ce8 <HAL_RCC_ClockConfig+0x1b4>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d101      	bne.n	8001bdc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e07e      	b.n	8001cda <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bdc:	4b42      	ldr	r3, [pc, #264]	; (8001ce8 <HAL_RCC_ClockConfig+0x1b4>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f023 0203 	bic.w	r2, r3, #3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	493f      	ldr	r1, [pc, #252]	; (8001ce8 <HAL_RCC_ClockConfig+0x1b4>)
 8001bea:	4313      	orrs	r3, r2
 8001bec:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bee:	f7ff f84d 	bl	8000c8c <HAL_GetTick>
 8001bf2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bf4:	e00a      	b.n	8001c0c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bf6:	f7ff f849 	bl	8000c8c <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e066      	b.n	8001cda <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c0c:	4b36      	ldr	r3, [pc, #216]	; (8001ce8 <HAL_RCC_ClockConfig+0x1b4>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f003 020c 	and.w	r2, r3, #12
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d1eb      	bne.n	8001bf6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d008      	beq.n	8001c3c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c2a:	4b2f      	ldr	r3, [pc, #188]	; (8001ce8 <HAL_RCC_ClockConfig+0x1b4>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	492c      	ldr	r1, [pc, #176]	; (8001ce8 <HAL_RCC_ClockConfig+0x1b4>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c3c:	4b29      	ldr	r3, [pc, #164]	; (8001ce4 <HAL_RCC_ClockConfig+0x1b0>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0307 	and.w	r3, r3, #7
 8001c44:	683a      	ldr	r2, [r7, #0]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d210      	bcs.n	8001c6c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c4a:	4b26      	ldr	r3, [pc, #152]	; (8001ce4 <HAL_RCC_ClockConfig+0x1b0>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f023 0207 	bic.w	r2, r3, #7
 8001c52:	4924      	ldr	r1, [pc, #144]	; (8001ce4 <HAL_RCC_ClockConfig+0x1b0>)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c5a:	4b22      	ldr	r3, [pc, #136]	; (8001ce4 <HAL_RCC_ClockConfig+0x1b0>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0307 	and.w	r3, r3, #7
 8001c62:	683a      	ldr	r2, [r7, #0]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d001      	beq.n	8001c6c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e036      	b.n	8001cda <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0304 	and.w	r3, r3, #4
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d008      	beq.n	8001c8a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c78:	4b1b      	ldr	r3, [pc, #108]	; (8001ce8 <HAL_RCC_ClockConfig+0x1b4>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	4918      	ldr	r1, [pc, #96]	; (8001ce8 <HAL_RCC_ClockConfig+0x1b4>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0308 	and.w	r3, r3, #8
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d009      	beq.n	8001caa <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c96:	4b14      	ldr	r3, [pc, #80]	; (8001ce8 <HAL_RCC_ClockConfig+0x1b4>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	4910      	ldr	r1, [pc, #64]	; (8001ce8 <HAL_RCC_ClockConfig+0x1b4>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001caa:	f000 f825 	bl	8001cf8 <HAL_RCC_GetSysClockFreq>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	4b0d      	ldr	r3, [pc, #52]	; (8001ce8 <HAL_RCC_ClockConfig+0x1b4>)
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	091b      	lsrs	r3, r3, #4
 8001cb6:	f003 030f 	and.w	r3, r3, #15
 8001cba:	490c      	ldr	r1, [pc, #48]	; (8001cec <HAL_RCC_ClockConfig+0x1b8>)
 8001cbc:	5ccb      	ldrb	r3, [r1, r3]
 8001cbe:	f003 031f 	and.w	r3, r3, #31
 8001cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8001cc6:	4a0a      	ldr	r2, [pc, #40]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001cca:	4b0a      	ldr	r3, [pc, #40]	; (8001cf4 <HAL_RCC_ClockConfig+0x1c0>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7fe ff8c 	bl	8000bec <HAL_InitTick>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	72fb      	strb	r3, [r7, #11]

  return status;
 8001cd8:	7afb      	ldrb	r3, [r7, #11]
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40022000 	.word	0x40022000
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	08004400 	.word	0x08004400
 8001cf0:	20000000 	.word	0x20000000
 8001cf4:	20000004 	.word	0x20000004

08001cf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b089      	sub	sp, #36	; 0x24
 8001cfc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	61fb      	str	r3, [r7, #28]
 8001d02:	2300      	movs	r3, #0
 8001d04:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d06:	4b3e      	ldr	r3, [pc, #248]	; (8001e00 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f003 030c 	and.w	r3, r3, #12
 8001d0e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d10:	4b3b      	ldr	r3, [pc, #236]	; (8001e00 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	f003 0303 	and.w	r3, r3, #3
 8001d18:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d005      	beq.n	8001d2c <HAL_RCC_GetSysClockFreq+0x34>
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	2b0c      	cmp	r3, #12
 8001d24:	d121      	bne.n	8001d6a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d11e      	bne.n	8001d6a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d2c:	4b34      	ldr	r3, [pc, #208]	; (8001e00 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0308 	and.w	r3, r3, #8
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d107      	bne.n	8001d48 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d38:	4b31      	ldr	r3, [pc, #196]	; (8001e00 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d3e:	0a1b      	lsrs	r3, r3, #8
 8001d40:	f003 030f 	and.w	r3, r3, #15
 8001d44:	61fb      	str	r3, [r7, #28]
 8001d46:	e005      	b.n	8001d54 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d48:	4b2d      	ldr	r3, [pc, #180]	; (8001e00 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	091b      	lsrs	r3, r3, #4
 8001d4e:	f003 030f 	and.w	r3, r3, #15
 8001d52:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d54:	4a2b      	ldr	r2, [pc, #172]	; (8001e04 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d5c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d10d      	bne.n	8001d80 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d68:	e00a      	b.n	8001d80 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	2b04      	cmp	r3, #4
 8001d6e:	d102      	bne.n	8001d76 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d70:	4b25      	ldr	r3, [pc, #148]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d72:	61bb      	str	r3, [r7, #24]
 8001d74:	e004      	b.n	8001d80 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	2b08      	cmp	r3, #8
 8001d7a:	d101      	bne.n	8001d80 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d7c:	4b23      	ldr	r3, [pc, #140]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x114>)
 8001d7e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	2b0c      	cmp	r3, #12
 8001d84:	d134      	bne.n	8001df0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d86:	4b1e      	ldr	r3, [pc, #120]	; (8001e00 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	f003 0303 	and.w	r3, r3, #3
 8001d8e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d003      	beq.n	8001d9e <HAL_RCC_GetSysClockFreq+0xa6>
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	2b03      	cmp	r3, #3
 8001d9a:	d003      	beq.n	8001da4 <HAL_RCC_GetSysClockFreq+0xac>
 8001d9c:	e005      	b.n	8001daa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d9e:	4b1a      	ldr	r3, [pc, #104]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x110>)
 8001da0:	617b      	str	r3, [r7, #20]
      break;
 8001da2:	e005      	b.n	8001db0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001da4:	4b19      	ldr	r3, [pc, #100]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x114>)
 8001da6:	617b      	str	r3, [r7, #20]
      break;
 8001da8:	e002      	b.n	8001db0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	617b      	str	r3, [r7, #20]
      break;
 8001dae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001db0:	4b13      	ldr	r3, [pc, #76]	; (8001e00 <HAL_RCC_GetSysClockFreq+0x108>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	091b      	lsrs	r3, r3, #4
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	3301      	adds	r3, #1
 8001dbc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001dbe:	4b10      	ldr	r3, [pc, #64]	; (8001e00 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	0a1b      	lsrs	r3, r3, #8
 8001dc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001dc8:	697a      	ldr	r2, [r7, #20]
 8001dca:	fb02 f203 	mul.w	r2, r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001dd6:	4b0a      	ldr	r3, [pc, #40]	; (8001e00 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	0e5b      	lsrs	r3, r3, #25
 8001ddc:	f003 0303 	and.w	r3, r3, #3
 8001de0:	3301      	adds	r3, #1
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001de6:	697a      	ldr	r2, [r7, #20]
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001df0:	69bb      	ldr	r3, [r7, #24]
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3724      	adds	r7, #36	; 0x24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	40021000 	.word	0x40021000
 8001e04:	08004418 	.word	0x08004418
 8001e08:	00f42400 	.word	0x00f42400
 8001e0c:	007a1200 	.word	0x007a1200

08001e10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e14:	4b03      	ldr	r3, [pc, #12]	; (8001e24 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e16:	681b      	ldr	r3, [r3, #0]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	20000000 	.word	0x20000000

08001e28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e2c:	f7ff fff0 	bl	8001e10 <HAL_RCC_GetHCLKFreq>
 8001e30:	4602      	mov	r2, r0
 8001e32:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	0a1b      	lsrs	r3, r3, #8
 8001e38:	f003 0307 	and.w	r3, r3, #7
 8001e3c:	4904      	ldr	r1, [pc, #16]	; (8001e50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e3e:	5ccb      	ldrb	r3, [r1, r3]
 8001e40:	f003 031f 	and.w	r3, r3, #31
 8001e44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	08004410 	.word	0x08004410

08001e54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e58:	f7ff ffda 	bl	8001e10 <HAL_RCC_GetHCLKFreq>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	0adb      	lsrs	r3, r3, #11
 8001e64:	f003 0307 	and.w	r3, r3, #7
 8001e68:	4904      	ldr	r1, [pc, #16]	; (8001e7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e6a:	5ccb      	ldrb	r3, [r1, r3]
 8001e6c:	f003 031f 	and.w	r3, r3, #31
 8001e70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	08004410 	.word	0x08004410

08001e80 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e88:	2300      	movs	r3, #0
 8001e8a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e8c:	4b2a      	ldr	r3, [pc, #168]	; (8001f38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d003      	beq.n	8001ea0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e98:	f7ff fa02 	bl	80012a0 <HAL_PWREx_GetVoltageRange>
 8001e9c:	6178      	str	r0, [r7, #20]
 8001e9e:	e014      	b.n	8001eca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ea0:	4b25      	ldr	r3, [pc, #148]	; (8001f38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea4:	4a24      	ldr	r2, [pc, #144]	; (8001f38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ea6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eaa:	6593      	str	r3, [r2, #88]	; 0x58
 8001eac:	4b22      	ldr	r3, [pc, #136]	; (8001f38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb4:	60fb      	str	r3, [r7, #12]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001eb8:	f7ff f9f2 	bl	80012a0 <HAL_PWREx_GetVoltageRange>
 8001ebc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001ebe:	4b1e      	ldr	r3, [pc, #120]	; (8001f38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec2:	4a1d      	ldr	r2, [pc, #116]	; (8001f38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ec4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ec8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ed0:	d10b      	bne.n	8001eea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2b80      	cmp	r3, #128	; 0x80
 8001ed6:	d919      	bls.n	8001f0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2ba0      	cmp	r3, #160	; 0xa0
 8001edc:	d902      	bls.n	8001ee4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ede:	2302      	movs	r3, #2
 8001ee0:	613b      	str	r3, [r7, #16]
 8001ee2:	e013      	b.n	8001f0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	613b      	str	r3, [r7, #16]
 8001ee8:	e010      	b.n	8001f0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2b80      	cmp	r3, #128	; 0x80
 8001eee:	d902      	bls.n	8001ef6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	613b      	str	r3, [r7, #16]
 8001ef4:	e00a      	b.n	8001f0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2b80      	cmp	r3, #128	; 0x80
 8001efa:	d102      	bne.n	8001f02 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001efc:	2302      	movs	r3, #2
 8001efe:	613b      	str	r3, [r7, #16]
 8001f00:	e004      	b.n	8001f0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2b70      	cmp	r3, #112	; 0x70
 8001f06:	d101      	bne.n	8001f0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f08:	2301      	movs	r3, #1
 8001f0a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f0c:	4b0b      	ldr	r3, [pc, #44]	; (8001f3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f023 0207 	bic.w	r2, r3, #7
 8001f14:	4909      	ldr	r1, [pc, #36]	; (8001f3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f1c:	4b07      	ldr	r3, [pc, #28]	; (8001f3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0307 	and.w	r3, r3, #7
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d001      	beq.n	8001f2e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e000      	b.n	8001f30 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3718      	adds	r7, #24
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	40022000 	.word	0x40022000

08001f40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f48:	2300      	movs	r3, #0
 8001f4a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d041      	beq.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f60:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001f64:	d02a      	beq.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001f66:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001f6a:	d824      	bhi.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f6c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f70:	d008      	beq.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001f72:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f76:	d81e      	bhi.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d00a      	beq.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001f7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f80:	d010      	beq.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001f82:	e018      	b.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f84:	4b86      	ldr	r3, [pc, #536]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	4a85      	ldr	r2, [pc, #532]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f8e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f90:	e015      	b.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	3304      	adds	r3, #4
 8001f96:	2100      	movs	r1, #0
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f000 fabb 	bl	8002514 <RCCEx_PLLSAI1_Config>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fa2:	e00c      	b.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	3320      	adds	r3, #32
 8001fa8:	2100      	movs	r1, #0
 8001faa:	4618      	mov	r0, r3
 8001fac:	f000 fba6 	bl	80026fc <RCCEx_PLLSAI2_Config>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fb4:	e003      	b.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	74fb      	strb	r3, [r7, #19]
      break;
 8001fba:	e000      	b.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001fbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001fbe:	7cfb      	ldrb	r3, [r7, #19]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d10b      	bne.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001fc4:	4b76      	ldr	r3, [pc, #472]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fd2:	4973      	ldr	r1, [pc, #460]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001fda:	e001      	b.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fdc:	7cfb      	ldrb	r3, [r7, #19]
 8001fde:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d041      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ff0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001ff4:	d02a      	beq.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001ff6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001ffa:	d824      	bhi.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001ffc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002000:	d008      	beq.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002002:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002006:	d81e      	bhi.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002008:	2b00      	cmp	r3, #0
 800200a:	d00a      	beq.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800200c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002010:	d010      	beq.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002012:	e018      	b.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002014:	4b62      	ldr	r3, [pc, #392]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	4a61      	ldr	r2, [pc, #388]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800201a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800201e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002020:	e015      	b.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	3304      	adds	r3, #4
 8002026:	2100      	movs	r1, #0
 8002028:	4618      	mov	r0, r3
 800202a:	f000 fa73 	bl	8002514 <RCCEx_PLLSAI1_Config>
 800202e:	4603      	mov	r3, r0
 8002030:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002032:	e00c      	b.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	3320      	adds	r3, #32
 8002038:	2100      	movs	r1, #0
 800203a:	4618      	mov	r0, r3
 800203c:	f000 fb5e 	bl	80026fc <RCCEx_PLLSAI2_Config>
 8002040:	4603      	mov	r3, r0
 8002042:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002044:	e003      	b.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	74fb      	strb	r3, [r7, #19]
      break;
 800204a:	e000      	b.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800204c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800204e:	7cfb      	ldrb	r3, [r7, #19]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d10b      	bne.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002054:	4b52      	ldr	r3, [pc, #328]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800205a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002062:	494f      	ldr	r1, [pc, #316]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002064:	4313      	orrs	r3, r2
 8002066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800206a:	e001      	b.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800206c:	7cfb      	ldrb	r3, [r7, #19]
 800206e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002078:	2b00      	cmp	r3, #0
 800207a:	f000 80a0 	beq.w	80021be <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800207e:	2300      	movs	r3, #0
 8002080:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002082:	4b47      	ldr	r3, [pc, #284]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800208e:	2301      	movs	r3, #1
 8002090:	e000      	b.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002092:	2300      	movs	r3, #0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d00d      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002098:	4b41      	ldr	r3, [pc, #260]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800209a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209c:	4a40      	ldr	r2, [pc, #256]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800209e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a2:	6593      	str	r3, [r2, #88]	; 0x58
 80020a4:	4b3e      	ldr	r3, [pc, #248]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ac:	60bb      	str	r3, [r7, #8]
 80020ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020b0:	2301      	movs	r3, #1
 80020b2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020b4:	4b3b      	ldr	r3, [pc, #236]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a3a      	ldr	r2, [pc, #232]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020c0:	f7fe fde4 	bl	8000c8c <HAL_GetTick>
 80020c4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020c6:	e009      	b.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020c8:	f7fe fde0 	bl	8000c8c <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d902      	bls.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	74fb      	strb	r3, [r7, #19]
        break;
 80020da:	e005      	b.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020dc:	4b31      	ldr	r3, [pc, #196]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d0ef      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80020e8:	7cfb      	ldrb	r3, [r7, #19]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d15c      	bne.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020ee:	4b2c      	ldr	r3, [pc, #176]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020f8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d01f      	beq.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002106:	697a      	ldr	r2, [r7, #20]
 8002108:	429a      	cmp	r2, r3
 800210a:	d019      	beq.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800210c:	4b24      	ldr	r3, [pc, #144]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800210e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002112:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002116:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002118:	4b21      	ldr	r3, [pc, #132]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800211a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800211e:	4a20      	ldr	r2, [pc, #128]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002124:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002128:	4b1d      	ldr	r3, [pc, #116]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800212a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800212e:	4a1c      	ldr	r2, [pc, #112]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002130:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002134:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002138:	4a19      	ldr	r2, [pc, #100]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	d016      	beq.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800214a:	f7fe fd9f 	bl	8000c8c <HAL_GetTick>
 800214e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002150:	e00b      	b.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002152:	f7fe fd9b 	bl	8000c8c <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002160:	4293      	cmp	r3, r2
 8002162:	d902      	bls.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	74fb      	strb	r3, [r7, #19]
            break;
 8002168:	e006      	b.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800216a:	4b0d      	ldr	r3, [pc, #52]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800216c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d0ec      	beq.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002178:	7cfb      	ldrb	r3, [r7, #19]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d10c      	bne.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800217e:	4b08      	ldr	r3, [pc, #32]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002184:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800218e:	4904      	ldr	r1, [pc, #16]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002190:	4313      	orrs	r3, r2
 8002192:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002196:	e009      	b.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002198:	7cfb      	ldrb	r3, [r7, #19]
 800219a:	74bb      	strb	r3, [r7, #18]
 800219c:	e006      	b.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800219e:	bf00      	nop
 80021a0:	40021000 	.word	0x40021000
 80021a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021a8:	7cfb      	ldrb	r3, [r7, #19]
 80021aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021ac:	7c7b      	ldrb	r3, [r7, #17]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d105      	bne.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021b2:	4b9e      	ldr	r3, [pc, #632]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b6:	4a9d      	ldr	r2, [pc, #628]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021bc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00a      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021ca:	4b98      	ldr	r3, [pc, #608]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d0:	f023 0203 	bic.w	r2, r3, #3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d8:	4994      	ldr	r1, [pc, #592]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d00a      	beq.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021ec:	4b8f      	ldr	r3, [pc, #572]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021f2:	f023 020c 	bic.w	r2, r3, #12
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021fa:	498c      	ldr	r1, [pc, #560]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0304 	and.w	r3, r3, #4
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00a      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800220e:	4b87      	ldr	r3, [pc, #540]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002214:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221c:	4983      	ldr	r1, [pc, #524]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800221e:	4313      	orrs	r3, r2
 8002220:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0308 	and.w	r3, r3, #8
 800222c:	2b00      	cmp	r3, #0
 800222e:	d00a      	beq.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002230:	4b7e      	ldr	r3, [pc, #504]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002236:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223e:	497b      	ldr	r1, [pc, #492]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002240:	4313      	orrs	r3, r2
 8002242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0310 	and.w	r3, r3, #16
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00a      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002252:	4b76      	ldr	r3, [pc, #472]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002258:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002260:	4972      	ldr	r1, [pc, #456]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002262:	4313      	orrs	r3, r2
 8002264:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0320 	and.w	r3, r3, #32
 8002270:	2b00      	cmp	r3, #0
 8002272:	d00a      	beq.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002274:	4b6d      	ldr	r3, [pc, #436]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800227a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002282:	496a      	ldr	r1, [pc, #424]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002284:	4313      	orrs	r3, r2
 8002286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00a      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002296:	4b65      	ldr	r3, [pc, #404]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800229c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a4:	4961      	ldr	r1, [pc, #388]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d00a      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80022b8:	4b5c      	ldr	r3, [pc, #368]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022c6:	4959      	ldr	r1, [pc, #356]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00a      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022da:	4b54      	ldr	r3, [pc, #336]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022e8:	4950      	ldr	r1, [pc, #320]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d00a      	beq.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022fc:	4b4b      	ldr	r3, [pc, #300]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002302:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800230a:	4948      	ldr	r1, [pc, #288]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800230c:	4313      	orrs	r3, r2
 800230e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00a      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800231e:	4b43      	ldr	r3, [pc, #268]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002324:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800232c:	493f      	ldr	r1, [pc, #252]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800232e:	4313      	orrs	r3, r2
 8002330:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d028      	beq.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002340:	4b3a      	ldr	r3, [pc, #232]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002346:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800234e:	4937      	ldr	r1, [pc, #220]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002350:	4313      	orrs	r3, r2
 8002352:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800235a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800235e:	d106      	bne.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002360:	4b32      	ldr	r3, [pc, #200]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	4a31      	ldr	r2, [pc, #196]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002366:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800236a:	60d3      	str	r3, [r2, #12]
 800236c:	e011      	b.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002372:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002376:	d10c      	bne.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3304      	adds	r3, #4
 800237c:	2101      	movs	r1, #1
 800237e:	4618      	mov	r0, r3
 8002380:	f000 f8c8 	bl	8002514 <RCCEx_PLLSAI1_Config>
 8002384:	4603      	mov	r3, r0
 8002386:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002388:	7cfb      	ldrb	r3, [r7, #19]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800238e:	7cfb      	ldrb	r3, [r7, #19]
 8002390:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d028      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800239e:	4b23      	ldr	r3, [pc, #140]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ac:	491f      	ldr	r1, [pc, #124]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023bc:	d106      	bne.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023be:	4b1b      	ldr	r3, [pc, #108]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	4a1a      	ldr	r2, [pc, #104]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023c8:	60d3      	str	r3, [r2, #12]
 80023ca:	e011      	b.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023d4:	d10c      	bne.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	3304      	adds	r3, #4
 80023da:	2101      	movs	r1, #1
 80023dc:	4618      	mov	r0, r3
 80023de:	f000 f899 	bl	8002514 <RCCEx_PLLSAI1_Config>
 80023e2:	4603      	mov	r3, r0
 80023e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023e6:	7cfb      	ldrb	r3, [r7, #19]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80023ec:	7cfb      	ldrb	r3, [r7, #19]
 80023ee:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d02b      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023fc:	4b0b      	ldr	r3, [pc, #44]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002402:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800240a:	4908      	ldr	r1, [pc, #32]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800240c:	4313      	orrs	r3, r2
 800240e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002416:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800241a:	d109      	bne.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800241c:	4b03      	ldr	r3, [pc, #12]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	4a02      	ldr	r2, [pc, #8]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002422:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002426:	60d3      	str	r3, [r2, #12]
 8002428:	e014      	b.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800242a:	bf00      	nop
 800242c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002434:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002438:	d10c      	bne.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	3304      	adds	r3, #4
 800243e:	2101      	movs	r1, #1
 8002440:	4618      	mov	r0, r3
 8002442:	f000 f867 	bl	8002514 <RCCEx_PLLSAI1_Config>
 8002446:	4603      	mov	r3, r0
 8002448:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800244a:	7cfb      	ldrb	r3, [r7, #19]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002450:	7cfb      	ldrb	r3, [r7, #19]
 8002452:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d02f      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002460:	4b2b      	ldr	r3, [pc, #172]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002466:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800246e:	4928      	ldr	r1, [pc, #160]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002470:	4313      	orrs	r3, r2
 8002472:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800247a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800247e:	d10d      	bne.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	3304      	adds	r3, #4
 8002484:	2102      	movs	r1, #2
 8002486:	4618      	mov	r0, r3
 8002488:	f000 f844 	bl	8002514 <RCCEx_PLLSAI1_Config>
 800248c:	4603      	mov	r3, r0
 800248e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002490:	7cfb      	ldrb	r3, [r7, #19]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d014      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002496:	7cfb      	ldrb	r3, [r7, #19]
 8002498:	74bb      	strb	r3, [r7, #18]
 800249a:	e011      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024a4:	d10c      	bne.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	3320      	adds	r3, #32
 80024aa:	2102      	movs	r1, #2
 80024ac:	4618      	mov	r0, r3
 80024ae:	f000 f925 	bl	80026fc <RCCEx_PLLSAI2_Config>
 80024b2:	4603      	mov	r3, r0
 80024b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024b6:	7cfb      	ldrb	r3, [r7, #19]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80024bc:	7cfb      	ldrb	r3, [r7, #19]
 80024be:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d00a      	beq.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80024cc:	4b10      	ldr	r3, [pc, #64]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024da:	490d      	ldr	r1, [pc, #52]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d00b      	beq.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80024ee:	4b08      	ldr	r3, [pc, #32]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024fe:	4904      	ldr	r1, [pc, #16]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002500:	4313      	orrs	r3, r2
 8002502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002506:	7cbb      	ldrb	r3, [r7, #18]
}
 8002508:	4618      	mov	r0, r3
 800250a:	3718      	adds	r7, #24
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	40021000 	.word	0x40021000

08002514 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800251e:	2300      	movs	r3, #0
 8002520:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002522:	4b75      	ldr	r3, [pc, #468]	; (80026f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	f003 0303 	and.w	r3, r3, #3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d018      	beq.n	8002560 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800252e:	4b72      	ldr	r3, [pc, #456]	; (80026f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	f003 0203 	and.w	r2, r3, #3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	429a      	cmp	r2, r3
 800253c:	d10d      	bne.n	800255a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
       ||
 8002542:	2b00      	cmp	r3, #0
 8002544:	d009      	beq.n	800255a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002546:	4b6c      	ldr	r3, [pc, #432]	; (80026f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	091b      	lsrs	r3, r3, #4
 800254c:	f003 0307 	and.w	r3, r3, #7
 8002550:	1c5a      	adds	r2, r3, #1
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
       ||
 8002556:	429a      	cmp	r2, r3
 8002558:	d047      	beq.n	80025ea <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	73fb      	strb	r3, [r7, #15]
 800255e:	e044      	b.n	80025ea <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2b03      	cmp	r3, #3
 8002566:	d018      	beq.n	800259a <RCCEx_PLLSAI1_Config+0x86>
 8002568:	2b03      	cmp	r3, #3
 800256a:	d825      	bhi.n	80025b8 <RCCEx_PLLSAI1_Config+0xa4>
 800256c:	2b01      	cmp	r3, #1
 800256e:	d002      	beq.n	8002576 <RCCEx_PLLSAI1_Config+0x62>
 8002570:	2b02      	cmp	r3, #2
 8002572:	d009      	beq.n	8002588 <RCCEx_PLLSAI1_Config+0x74>
 8002574:	e020      	b.n	80025b8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002576:	4b60      	ldr	r3, [pc, #384]	; (80026f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d11d      	bne.n	80025be <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002586:	e01a      	b.n	80025be <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002588:	4b5b      	ldr	r3, [pc, #364]	; (80026f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002590:	2b00      	cmp	r3, #0
 8002592:	d116      	bne.n	80025c2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002598:	e013      	b.n	80025c2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800259a:	4b57      	ldr	r3, [pc, #348]	; (80026f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d10f      	bne.n	80025c6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80025a6:	4b54      	ldr	r3, [pc, #336]	; (80026f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d109      	bne.n	80025c6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80025b6:	e006      	b.n	80025c6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	73fb      	strb	r3, [r7, #15]
      break;
 80025bc:	e004      	b.n	80025c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025be:	bf00      	nop
 80025c0:	e002      	b.n	80025c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025c2:	bf00      	nop
 80025c4:	e000      	b.n	80025c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80025c8:	7bfb      	ldrb	r3, [r7, #15]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d10d      	bne.n	80025ea <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80025ce:	4b4a      	ldr	r3, [pc, #296]	; (80026f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6819      	ldr	r1, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	3b01      	subs	r3, #1
 80025e0:	011b      	lsls	r3, r3, #4
 80025e2:	430b      	orrs	r3, r1
 80025e4:	4944      	ldr	r1, [pc, #272]	; (80026f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80025ea:	7bfb      	ldrb	r3, [r7, #15]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d17d      	bne.n	80026ec <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80025f0:	4b41      	ldr	r3, [pc, #260]	; (80026f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a40      	ldr	r2, [pc, #256]	; (80026f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80025fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025fc:	f7fe fb46 	bl	8000c8c <HAL_GetTick>
 8002600:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002602:	e009      	b.n	8002618 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002604:	f7fe fb42 	bl	8000c8c <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d902      	bls.n	8002618 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	73fb      	strb	r3, [r7, #15]
        break;
 8002616:	e005      	b.n	8002624 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002618:	4b37      	ldr	r3, [pc, #220]	; (80026f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1ef      	bne.n	8002604 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002624:	7bfb      	ldrb	r3, [r7, #15]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d160      	bne.n	80026ec <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d111      	bne.n	8002654 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002630:	4b31      	ldr	r3, [pc, #196]	; (80026f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002638:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	6892      	ldr	r2, [r2, #8]
 8002640:	0211      	lsls	r1, r2, #8
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	68d2      	ldr	r2, [r2, #12]
 8002646:	0912      	lsrs	r2, r2, #4
 8002648:	0452      	lsls	r2, r2, #17
 800264a:	430a      	orrs	r2, r1
 800264c:	492a      	ldr	r1, [pc, #168]	; (80026f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800264e:	4313      	orrs	r3, r2
 8002650:	610b      	str	r3, [r1, #16]
 8002652:	e027      	b.n	80026a4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d112      	bne.n	8002680 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800265a:	4b27      	ldr	r3, [pc, #156]	; (80026f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002662:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	6892      	ldr	r2, [r2, #8]
 800266a:	0211      	lsls	r1, r2, #8
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	6912      	ldr	r2, [r2, #16]
 8002670:	0852      	lsrs	r2, r2, #1
 8002672:	3a01      	subs	r2, #1
 8002674:	0552      	lsls	r2, r2, #21
 8002676:	430a      	orrs	r2, r1
 8002678:	491f      	ldr	r1, [pc, #124]	; (80026f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800267a:	4313      	orrs	r3, r2
 800267c:	610b      	str	r3, [r1, #16]
 800267e:	e011      	b.n	80026a4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002680:	4b1d      	ldr	r3, [pc, #116]	; (80026f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002688:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	6892      	ldr	r2, [r2, #8]
 8002690:	0211      	lsls	r1, r2, #8
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	6952      	ldr	r2, [r2, #20]
 8002696:	0852      	lsrs	r2, r2, #1
 8002698:	3a01      	subs	r2, #1
 800269a:	0652      	lsls	r2, r2, #25
 800269c:	430a      	orrs	r2, r1
 800269e:	4916      	ldr	r1, [pc, #88]	; (80026f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80026a4:	4b14      	ldr	r3, [pc, #80]	; (80026f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a13      	ldr	r2, [pc, #76]	; (80026f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80026ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b0:	f7fe faec 	bl	8000c8c <HAL_GetTick>
 80026b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026b6:	e009      	b.n	80026cc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026b8:	f7fe fae8 	bl	8000c8c <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d902      	bls.n	80026cc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	73fb      	strb	r3, [r7, #15]
          break;
 80026ca:	e005      	b.n	80026d8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026cc:	4b0a      	ldr	r3, [pc, #40]	; (80026f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d0ef      	beq.n	80026b8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80026d8:	7bfb      	ldrb	r3, [r7, #15]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d106      	bne.n	80026ec <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80026de:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026e0:	691a      	ldr	r2, [r3, #16]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	4904      	ldr	r1, [pc, #16]	; (80026f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	40021000 	.word	0x40021000

080026fc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002706:	2300      	movs	r3, #0
 8002708:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800270a:	4b6a      	ldr	r3, [pc, #424]	; (80028b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	f003 0303 	and.w	r3, r3, #3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d018      	beq.n	8002748 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002716:	4b67      	ldr	r3, [pc, #412]	; (80028b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	f003 0203 	and.w	r2, r3, #3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	429a      	cmp	r2, r3
 8002724:	d10d      	bne.n	8002742 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
       ||
 800272a:	2b00      	cmp	r3, #0
 800272c:	d009      	beq.n	8002742 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800272e:	4b61      	ldr	r3, [pc, #388]	; (80028b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	091b      	lsrs	r3, r3, #4
 8002734:	f003 0307 	and.w	r3, r3, #7
 8002738:	1c5a      	adds	r2, r3, #1
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
       ||
 800273e:	429a      	cmp	r2, r3
 8002740:	d047      	beq.n	80027d2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	73fb      	strb	r3, [r7, #15]
 8002746:	e044      	b.n	80027d2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2b03      	cmp	r3, #3
 800274e:	d018      	beq.n	8002782 <RCCEx_PLLSAI2_Config+0x86>
 8002750:	2b03      	cmp	r3, #3
 8002752:	d825      	bhi.n	80027a0 <RCCEx_PLLSAI2_Config+0xa4>
 8002754:	2b01      	cmp	r3, #1
 8002756:	d002      	beq.n	800275e <RCCEx_PLLSAI2_Config+0x62>
 8002758:	2b02      	cmp	r3, #2
 800275a:	d009      	beq.n	8002770 <RCCEx_PLLSAI2_Config+0x74>
 800275c:	e020      	b.n	80027a0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800275e:	4b55      	ldr	r3, [pc, #340]	; (80028b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d11d      	bne.n	80027a6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800276e:	e01a      	b.n	80027a6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002770:	4b50      	ldr	r3, [pc, #320]	; (80028b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002778:	2b00      	cmp	r3, #0
 800277a:	d116      	bne.n	80027aa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002780:	e013      	b.n	80027aa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002782:	4b4c      	ldr	r3, [pc, #304]	; (80028b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10f      	bne.n	80027ae <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800278e:	4b49      	ldr	r3, [pc, #292]	; (80028b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d109      	bne.n	80027ae <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800279e:	e006      	b.n	80027ae <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	73fb      	strb	r3, [r7, #15]
      break;
 80027a4:	e004      	b.n	80027b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027a6:	bf00      	nop
 80027a8:	e002      	b.n	80027b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027aa:	bf00      	nop
 80027ac:	e000      	b.n	80027b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80027b0:	7bfb      	ldrb	r3, [r7, #15]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d10d      	bne.n	80027d2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027b6:	4b3f      	ldr	r3, [pc, #252]	; (80028b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6819      	ldr	r1, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	3b01      	subs	r3, #1
 80027c8:	011b      	lsls	r3, r3, #4
 80027ca:	430b      	orrs	r3, r1
 80027cc:	4939      	ldr	r1, [pc, #228]	; (80028b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80027d2:	7bfb      	ldrb	r3, [r7, #15]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d167      	bne.n	80028a8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80027d8:	4b36      	ldr	r3, [pc, #216]	; (80028b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a35      	ldr	r2, [pc, #212]	; (80028b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027e4:	f7fe fa52 	bl	8000c8c <HAL_GetTick>
 80027e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80027ea:	e009      	b.n	8002800 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80027ec:	f7fe fa4e 	bl	8000c8c <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d902      	bls.n	8002800 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	73fb      	strb	r3, [r7, #15]
        break;
 80027fe:	e005      	b.n	800280c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002800:	4b2c      	ldr	r3, [pc, #176]	; (80028b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d1ef      	bne.n	80027ec <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800280c:	7bfb      	ldrb	r3, [r7, #15]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d14a      	bne.n	80028a8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d111      	bne.n	800283c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002818:	4b26      	ldr	r3, [pc, #152]	; (80028b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800281a:	695b      	ldr	r3, [r3, #20]
 800281c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002820:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	6892      	ldr	r2, [r2, #8]
 8002828:	0211      	lsls	r1, r2, #8
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	68d2      	ldr	r2, [r2, #12]
 800282e:	0912      	lsrs	r2, r2, #4
 8002830:	0452      	lsls	r2, r2, #17
 8002832:	430a      	orrs	r2, r1
 8002834:	491f      	ldr	r1, [pc, #124]	; (80028b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002836:	4313      	orrs	r3, r2
 8002838:	614b      	str	r3, [r1, #20]
 800283a:	e011      	b.n	8002860 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800283c:	4b1d      	ldr	r3, [pc, #116]	; (80028b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800283e:	695b      	ldr	r3, [r3, #20]
 8002840:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002844:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	6892      	ldr	r2, [r2, #8]
 800284c:	0211      	lsls	r1, r2, #8
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	6912      	ldr	r2, [r2, #16]
 8002852:	0852      	lsrs	r2, r2, #1
 8002854:	3a01      	subs	r2, #1
 8002856:	0652      	lsls	r2, r2, #25
 8002858:	430a      	orrs	r2, r1
 800285a:	4916      	ldr	r1, [pc, #88]	; (80028b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800285c:	4313      	orrs	r3, r2
 800285e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002860:	4b14      	ldr	r3, [pc, #80]	; (80028b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a13      	ldr	r2, [pc, #76]	; (80028b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002866:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800286a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800286c:	f7fe fa0e 	bl	8000c8c <HAL_GetTick>
 8002870:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002872:	e009      	b.n	8002888 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002874:	f7fe fa0a 	bl	8000c8c <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d902      	bls.n	8002888 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	73fb      	strb	r3, [r7, #15]
          break;
 8002886:	e005      	b.n	8002894 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002888:	4b0a      	ldr	r3, [pc, #40]	; (80028b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d0ef      	beq.n	8002874 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002894:	7bfb      	ldrb	r3, [r7, #15]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d106      	bne.n	80028a8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800289a:	4b06      	ldr	r3, [pc, #24]	; (80028b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800289c:	695a      	ldr	r2, [r3, #20]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	4904      	ldr	r1, [pc, #16]	; (80028b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80028a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	40021000 	.word	0x40021000

080028b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e040      	b.n	800294c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d106      	bne.n	80028e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f7fe f81c 	bl	8000918 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2224      	movs	r2, #36	; 0x24
 80028e4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f022 0201 	bic.w	r2, r2, #1
 80028f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 f992 	bl	8002c20 <UART_SetConfig>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d101      	bne.n	8002906 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e022      	b.n	800294c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290a:	2b00      	cmp	r3, #0
 800290c:	d002      	beq.n	8002914 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f000 fc10 	bl	8003134 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	685a      	ldr	r2, [r3, #4]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002922:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689a      	ldr	r2, [r3, #8]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002932:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f042 0201 	orr.w	r2, r2, #1
 8002942:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f000 fc97 	bl	8003278 <UART_CheckIdleState>
 800294a:	4603      	mov	r3, r0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3708      	adds	r7, #8
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b08a      	sub	sp, #40	; 0x28
 8002958:	af02      	add	r7, sp, #8
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	603b      	str	r3, [r7, #0]
 8002960:	4613      	mov	r3, r2
 8002962:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002968:	2b20      	cmp	r3, #32
 800296a:	f040 8082 	bne.w	8002a72 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d002      	beq.n	800297a <HAL_UART_Transmit+0x26>
 8002974:	88fb      	ldrh	r3, [r7, #6]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d101      	bne.n	800297e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e07a      	b.n	8002a74 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002984:	2b01      	cmp	r3, #1
 8002986:	d101      	bne.n	800298c <HAL_UART_Transmit+0x38>
 8002988:	2302      	movs	r3, #2
 800298a:	e073      	b.n	8002a74 <HAL_UART_Transmit+0x120>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2221      	movs	r2, #33	; 0x21
 80029a0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029a2:	f7fe f973 	bl	8000c8c <HAL_GetTick>
 80029a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	88fa      	ldrh	r2, [r7, #6]
 80029ac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	88fa      	ldrh	r2, [r7, #6]
 80029b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029c0:	d108      	bne.n	80029d4 <HAL_UART_Transmit+0x80>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d104      	bne.n	80029d4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80029ca:	2300      	movs	r3, #0
 80029cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	61bb      	str	r3, [r7, #24]
 80029d2:	e003      	b.n	80029dc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029d8:	2300      	movs	r3, #0
 80029da:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80029e4:	e02d      	b.n	8002a42 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	9300      	str	r3, [sp, #0]
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	2200      	movs	r2, #0
 80029ee:	2180      	movs	r1, #128	; 0x80
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f000 fc8a 	bl	800330a <UART_WaitOnFlagUntilTimeout>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e039      	b.n	8002a74 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d10b      	bne.n	8002a1e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	881a      	ldrh	r2, [r3, #0]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a12:	b292      	uxth	r2, r2
 8002a14:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	3302      	adds	r3, #2
 8002a1a:	61bb      	str	r3, [r7, #24]
 8002a1c:	e008      	b.n	8002a30 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	781a      	ldrb	r2, [r3, #0]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	b292      	uxth	r2, r2
 8002a28:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1cb      	bne.n	80029e6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	9300      	str	r3, [sp, #0]
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	2200      	movs	r2, #0
 8002a56:	2140      	movs	r1, #64	; 0x40
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f000 fc56 	bl	800330a <UART_WaitOnFlagUntilTimeout>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e005      	b.n	8002a74 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2220      	movs	r2, #32
 8002a6c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	e000      	b.n	8002a74 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002a72:	2302      	movs	r3, #2
  }
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3720      	adds	r7, #32
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b08a      	sub	sp, #40	; 0x28
 8002a80:	af02      	add	r7, sp, #8
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	603b      	str	r3, [r7, #0]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a90:	2b20      	cmp	r3, #32
 8002a92:	f040 80bf 	bne.w	8002c14 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d002      	beq.n	8002aa2 <HAL_UART_Receive+0x26>
 8002a9c:	88fb      	ldrh	r3, [r7, #6]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e0b7      	b.n	8002c16 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d101      	bne.n	8002ab4 <HAL_UART_Receive+0x38>
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	e0b0      	b.n	8002c16 <HAL_UART_Receive+0x19a>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2222      	movs	r2, #34	; 0x22
 8002ac8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ad0:	f7fe f8dc 	bl	8000c8c <HAL_GetTick>
 8002ad4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	88fa      	ldrh	r2, [r7, #6]
 8002ada:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	88fa      	ldrh	r2, [r7, #6]
 8002ae2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aee:	d10e      	bne.n	8002b0e <HAL_UART_Receive+0x92>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	691b      	ldr	r3, [r3, #16]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d105      	bne.n	8002b04 <HAL_UART_Receive+0x88>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002afe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b02:	e02d      	b.n	8002b60 <HAL_UART_Receive+0xe4>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	22ff      	movs	r2, #255	; 0xff
 8002b08:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b0c:	e028      	b.n	8002b60 <HAL_UART_Receive+0xe4>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d10d      	bne.n	8002b32 <HAL_UART_Receive+0xb6>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d104      	bne.n	8002b28 <HAL_UART_Receive+0xac>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	22ff      	movs	r2, #255	; 0xff
 8002b22:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b26:	e01b      	b.n	8002b60 <HAL_UART_Receive+0xe4>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	227f      	movs	r2, #127	; 0x7f
 8002b2c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b30:	e016      	b.n	8002b60 <HAL_UART_Receive+0xe4>
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b3a:	d10d      	bne.n	8002b58 <HAL_UART_Receive+0xdc>
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d104      	bne.n	8002b4e <HAL_UART_Receive+0xd2>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	227f      	movs	r2, #127	; 0x7f
 8002b48:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b4c:	e008      	b.n	8002b60 <HAL_UART_Receive+0xe4>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	223f      	movs	r2, #63	; 0x3f
 8002b52:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b56:	e003      	b.n	8002b60 <HAL_UART_Receive+0xe4>
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002b66:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b70:	d108      	bne.n	8002b84 <HAL_UART_Receive+0x108>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d104      	bne.n	8002b84 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	61bb      	str	r3, [r7, #24]
 8002b82:	e003      	b.n	8002b8c <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002b94:	e033      	b.n	8002bfe <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	9300      	str	r3, [sp, #0]
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	2120      	movs	r1, #32
 8002ba0:	68f8      	ldr	r0, [r7, #12]
 8002ba2:	f000 fbb2 	bl	800330a <UART_WaitOnFlagUntilTimeout>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d001      	beq.n	8002bb0 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e032      	b.n	8002c16 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10c      	bne.n	8002bd0 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002bbc:	b29a      	uxth	r2, r3
 8002bbe:	8a7b      	ldrh	r3, [r7, #18]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	3302      	adds	r3, #2
 8002bcc:	61bb      	str	r3, [r7, #24]
 8002bce:	e00d      	b.n	8002bec <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	8a7b      	ldrh	r3, [r7, #18]
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	4013      	ands	r3, r2
 8002be0:	b2da      	uxtb	r2, r3
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	3301      	adds	r3, #1
 8002bea:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	b29a      	uxth	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1c5      	bne.n	8002b96 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2220      	movs	r2, #32
 8002c0e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002c10:	2300      	movs	r3, #0
 8002c12:	e000      	b.n	8002c16 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8002c14:	2302      	movs	r3, #2
  }
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3720      	adds	r7, #32
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
	...

08002c20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c20:	b5b0      	push	{r4, r5, r7, lr}
 8002c22:	b088      	sub	sp, #32
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689a      	ldr	r2, [r3, #8]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	431a      	orrs	r2, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	69db      	ldr	r3, [r3, #28]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	4bad      	ldr	r3, [pc, #692]	; (8002f00 <UART_SetConfig+0x2e0>)
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	6812      	ldr	r2, [r2, #0]
 8002c52:	69f9      	ldr	r1, [r7, #28]
 8002c54:	430b      	orrs	r3, r1
 8002c56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	68da      	ldr	r2, [r3, #12]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4aa2      	ldr	r2, [pc, #648]	; (8002f04 <UART_SetConfig+0x2e4>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d004      	beq.n	8002c88 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a1b      	ldr	r3, [r3, #32]
 8002c82:	69fa      	ldr	r2, [r7, #28]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	69fa      	ldr	r2, [r7, #28]
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a99      	ldr	r2, [pc, #612]	; (8002f08 <UART_SetConfig+0x2e8>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d121      	bne.n	8002cea <UART_SetConfig+0xca>
 8002ca6:	4b99      	ldr	r3, [pc, #612]	; (8002f0c <UART_SetConfig+0x2ec>)
 8002ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cac:	f003 0303 	and.w	r3, r3, #3
 8002cb0:	2b03      	cmp	r3, #3
 8002cb2:	d817      	bhi.n	8002ce4 <UART_SetConfig+0xc4>
 8002cb4:	a201      	add	r2, pc, #4	; (adr r2, 8002cbc <UART_SetConfig+0x9c>)
 8002cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cba:	bf00      	nop
 8002cbc:	08002ccd 	.word	0x08002ccd
 8002cc0:	08002cd9 	.word	0x08002cd9
 8002cc4:	08002cd3 	.word	0x08002cd3
 8002cc8:	08002cdf 	.word	0x08002cdf
 8002ccc:	2301      	movs	r3, #1
 8002cce:	76fb      	strb	r3, [r7, #27]
 8002cd0:	e0e7      	b.n	8002ea2 <UART_SetConfig+0x282>
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	76fb      	strb	r3, [r7, #27]
 8002cd6:	e0e4      	b.n	8002ea2 <UART_SetConfig+0x282>
 8002cd8:	2304      	movs	r3, #4
 8002cda:	76fb      	strb	r3, [r7, #27]
 8002cdc:	e0e1      	b.n	8002ea2 <UART_SetConfig+0x282>
 8002cde:	2308      	movs	r3, #8
 8002ce0:	76fb      	strb	r3, [r7, #27]
 8002ce2:	e0de      	b.n	8002ea2 <UART_SetConfig+0x282>
 8002ce4:	2310      	movs	r3, #16
 8002ce6:	76fb      	strb	r3, [r7, #27]
 8002ce8:	e0db      	b.n	8002ea2 <UART_SetConfig+0x282>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a88      	ldr	r2, [pc, #544]	; (8002f10 <UART_SetConfig+0x2f0>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d132      	bne.n	8002d5a <UART_SetConfig+0x13a>
 8002cf4:	4b85      	ldr	r3, [pc, #532]	; (8002f0c <UART_SetConfig+0x2ec>)
 8002cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cfa:	f003 030c 	and.w	r3, r3, #12
 8002cfe:	2b0c      	cmp	r3, #12
 8002d00:	d828      	bhi.n	8002d54 <UART_SetConfig+0x134>
 8002d02:	a201      	add	r2, pc, #4	; (adr r2, 8002d08 <UART_SetConfig+0xe8>)
 8002d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d08:	08002d3d 	.word	0x08002d3d
 8002d0c:	08002d55 	.word	0x08002d55
 8002d10:	08002d55 	.word	0x08002d55
 8002d14:	08002d55 	.word	0x08002d55
 8002d18:	08002d49 	.word	0x08002d49
 8002d1c:	08002d55 	.word	0x08002d55
 8002d20:	08002d55 	.word	0x08002d55
 8002d24:	08002d55 	.word	0x08002d55
 8002d28:	08002d43 	.word	0x08002d43
 8002d2c:	08002d55 	.word	0x08002d55
 8002d30:	08002d55 	.word	0x08002d55
 8002d34:	08002d55 	.word	0x08002d55
 8002d38:	08002d4f 	.word	0x08002d4f
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	76fb      	strb	r3, [r7, #27]
 8002d40:	e0af      	b.n	8002ea2 <UART_SetConfig+0x282>
 8002d42:	2302      	movs	r3, #2
 8002d44:	76fb      	strb	r3, [r7, #27]
 8002d46:	e0ac      	b.n	8002ea2 <UART_SetConfig+0x282>
 8002d48:	2304      	movs	r3, #4
 8002d4a:	76fb      	strb	r3, [r7, #27]
 8002d4c:	e0a9      	b.n	8002ea2 <UART_SetConfig+0x282>
 8002d4e:	2308      	movs	r3, #8
 8002d50:	76fb      	strb	r3, [r7, #27]
 8002d52:	e0a6      	b.n	8002ea2 <UART_SetConfig+0x282>
 8002d54:	2310      	movs	r3, #16
 8002d56:	76fb      	strb	r3, [r7, #27]
 8002d58:	e0a3      	b.n	8002ea2 <UART_SetConfig+0x282>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a6d      	ldr	r2, [pc, #436]	; (8002f14 <UART_SetConfig+0x2f4>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d120      	bne.n	8002da6 <UART_SetConfig+0x186>
 8002d64:	4b69      	ldr	r3, [pc, #420]	; (8002f0c <UART_SetConfig+0x2ec>)
 8002d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d6a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002d6e:	2b30      	cmp	r3, #48	; 0x30
 8002d70:	d013      	beq.n	8002d9a <UART_SetConfig+0x17a>
 8002d72:	2b30      	cmp	r3, #48	; 0x30
 8002d74:	d814      	bhi.n	8002da0 <UART_SetConfig+0x180>
 8002d76:	2b20      	cmp	r3, #32
 8002d78:	d009      	beq.n	8002d8e <UART_SetConfig+0x16e>
 8002d7a:	2b20      	cmp	r3, #32
 8002d7c:	d810      	bhi.n	8002da0 <UART_SetConfig+0x180>
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d002      	beq.n	8002d88 <UART_SetConfig+0x168>
 8002d82:	2b10      	cmp	r3, #16
 8002d84:	d006      	beq.n	8002d94 <UART_SetConfig+0x174>
 8002d86:	e00b      	b.n	8002da0 <UART_SetConfig+0x180>
 8002d88:	2300      	movs	r3, #0
 8002d8a:	76fb      	strb	r3, [r7, #27]
 8002d8c:	e089      	b.n	8002ea2 <UART_SetConfig+0x282>
 8002d8e:	2302      	movs	r3, #2
 8002d90:	76fb      	strb	r3, [r7, #27]
 8002d92:	e086      	b.n	8002ea2 <UART_SetConfig+0x282>
 8002d94:	2304      	movs	r3, #4
 8002d96:	76fb      	strb	r3, [r7, #27]
 8002d98:	e083      	b.n	8002ea2 <UART_SetConfig+0x282>
 8002d9a:	2308      	movs	r3, #8
 8002d9c:	76fb      	strb	r3, [r7, #27]
 8002d9e:	e080      	b.n	8002ea2 <UART_SetConfig+0x282>
 8002da0:	2310      	movs	r3, #16
 8002da2:	76fb      	strb	r3, [r7, #27]
 8002da4:	e07d      	b.n	8002ea2 <UART_SetConfig+0x282>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a5b      	ldr	r2, [pc, #364]	; (8002f18 <UART_SetConfig+0x2f8>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d120      	bne.n	8002df2 <UART_SetConfig+0x1d2>
 8002db0:	4b56      	ldr	r3, [pc, #344]	; (8002f0c <UART_SetConfig+0x2ec>)
 8002db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002dba:	2bc0      	cmp	r3, #192	; 0xc0
 8002dbc:	d013      	beq.n	8002de6 <UART_SetConfig+0x1c6>
 8002dbe:	2bc0      	cmp	r3, #192	; 0xc0
 8002dc0:	d814      	bhi.n	8002dec <UART_SetConfig+0x1cc>
 8002dc2:	2b80      	cmp	r3, #128	; 0x80
 8002dc4:	d009      	beq.n	8002dda <UART_SetConfig+0x1ba>
 8002dc6:	2b80      	cmp	r3, #128	; 0x80
 8002dc8:	d810      	bhi.n	8002dec <UART_SetConfig+0x1cc>
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d002      	beq.n	8002dd4 <UART_SetConfig+0x1b4>
 8002dce:	2b40      	cmp	r3, #64	; 0x40
 8002dd0:	d006      	beq.n	8002de0 <UART_SetConfig+0x1c0>
 8002dd2:	e00b      	b.n	8002dec <UART_SetConfig+0x1cc>
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	76fb      	strb	r3, [r7, #27]
 8002dd8:	e063      	b.n	8002ea2 <UART_SetConfig+0x282>
 8002dda:	2302      	movs	r3, #2
 8002ddc:	76fb      	strb	r3, [r7, #27]
 8002dde:	e060      	b.n	8002ea2 <UART_SetConfig+0x282>
 8002de0:	2304      	movs	r3, #4
 8002de2:	76fb      	strb	r3, [r7, #27]
 8002de4:	e05d      	b.n	8002ea2 <UART_SetConfig+0x282>
 8002de6:	2308      	movs	r3, #8
 8002de8:	76fb      	strb	r3, [r7, #27]
 8002dea:	e05a      	b.n	8002ea2 <UART_SetConfig+0x282>
 8002dec:	2310      	movs	r3, #16
 8002dee:	76fb      	strb	r3, [r7, #27]
 8002df0:	e057      	b.n	8002ea2 <UART_SetConfig+0x282>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a49      	ldr	r2, [pc, #292]	; (8002f1c <UART_SetConfig+0x2fc>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d125      	bne.n	8002e48 <UART_SetConfig+0x228>
 8002dfc:	4b43      	ldr	r3, [pc, #268]	; (8002f0c <UART_SetConfig+0x2ec>)
 8002dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e0a:	d017      	beq.n	8002e3c <UART_SetConfig+0x21c>
 8002e0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e10:	d817      	bhi.n	8002e42 <UART_SetConfig+0x222>
 8002e12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e16:	d00b      	beq.n	8002e30 <UART_SetConfig+0x210>
 8002e18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e1c:	d811      	bhi.n	8002e42 <UART_SetConfig+0x222>
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d003      	beq.n	8002e2a <UART_SetConfig+0x20a>
 8002e22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e26:	d006      	beq.n	8002e36 <UART_SetConfig+0x216>
 8002e28:	e00b      	b.n	8002e42 <UART_SetConfig+0x222>
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	76fb      	strb	r3, [r7, #27]
 8002e2e:	e038      	b.n	8002ea2 <UART_SetConfig+0x282>
 8002e30:	2302      	movs	r3, #2
 8002e32:	76fb      	strb	r3, [r7, #27]
 8002e34:	e035      	b.n	8002ea2 <UART_SetConfig+0x282>
 8002e36:	2304      	movs	r3, #4
 8002e38:	76fb      	strb	r3, [r7, #27]
 8002e3a:	e032      	b.n	8002ea2 <UART_SetConfig+0x282>
 8002e3c:	2308      	movs	r3, #8
 8002e3e:	76fb      	strb	r3, [r7, #27]
 8002e40:	e02f      	b.n	8002ea2 <UART_SetConfig+0x282>
 8002e42:	2310      	movs	r3, #16
 8002e44:	76fb      	strb	r3, [r7, #27]
 8002e46:	e02c      	b.n	8002ea2 <UART_SetConfig+0x282>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a2d      	ldr	r2, [pc, #180]	; (8002f04 <UART_SetConfig+0x2e4>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d125      	bne.n	8002e9e <UART_SetConfig+0x27e>
 8002e52:	4b2e      	ldr	r3, [pc, #184]	; (8002f0c <UART_SetConfig+0x2ec>)
 8002e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e58:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002e5c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002e60:	d017      	beq.n	8002e92 <UART_SetConfig+0x272>
 8002e62:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002e66:	d817      	bhi.n	8002e98 <UART_SetConfig+0x278>
 8002e68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e6c:	d00b      	beq.n	8002e86 <UART_SetConfig+0x266>
 8002e6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e72:	d811      	bhi.n	8002e98 <UART_SetConfig+0x278>
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d003      	beq.n	8002e80 <UART_SetConfig+0x260>
 8002e78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e7c:	d006      	beq.n	8002e8c <UART_SetConfig+0x26c>
 8002e7e:	e00b      	b.n	8002e98 <UART_SetConfig+0x278>
 8002e80:	2300      	movs	r3, #0
 8002e82:	76fb      	strb	r3, [r7, #27]
 8002e84:	e00d      	b.n	8002ea2 <UART_SetConfig+0x282>
 8002e86:	2302      	movs	r3, #2
 8002e88:	76fb      	strb	r3, [r7, #27]
 8002e8a:	e00a      	b.n	8002ea2 <UART_SetConfig+0x282>
 8002e8c:	2304      	movs	r3, #4
 8002e8e:	76fb      	strb	r3, [r7, #27]
 8002e90:	e007      	b.n	8002ea2 <UART_SetConfig+0x282>
 8002e92:	2308      	movs	r3, #8
 8002e94:	76fb      	strb	r3, [r7, #27]
 8002e96:	e004      	b.n	8002ea2 <UART_SetConfig+0x282>
 8002e98:	2310      	movs	r3, #16
 8002e9a:	76fb      	strb	r3, [r7, #27]
 8002e9c:	e001      	b.n	8002ea2 <UART_SetConfig+0x282>
 8002e9e:	2310      	movs	r3, #16
 8002ea0:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a17      	ldr	r2, [pc, #92]	; (8002f04 <UART_SetConfig+0x2e4>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	f040 8087 	bne.w	8002fbc <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002eae:	7efb      	ldrb	r3, [r7, #27]
 8002eb0:	2b08      	cmp	r3, #8
 8002eb2:	d837      	bhi.n	8002f24 <UART_SetConfig+0x304>
 8002eb4:	a201      	add	r2, pc, #4	; (adr r2, 8002ebc <UART_SetConfig+0x29c>)
 8002eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eba:	bf00      	nop
 8002ebc:	08002ee1 	.word	0x08002ee1
 8002ec0:	08002f25 	.word	0x08002f25
 8002ec4:	08002ee9 	.word	0x08002ee9
 8002ec8:	08002f25 	.word	0x08002f25
 8002ecc:	08002eef 	.word	0x08002eef
 8002ed0:	08002f25 	.word	0x08002f25
 8002ed4:	08002f25 	.word	0x08002f25
 8002ed8:	08002f25 	.word	0x08002f25
 8002edc:	08002ef7 	.word	0x08002ef7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ee0:	f7fe ffa2 	bl	8001e28 <HAL_RCC_GetPCLK1Freq>
 8002ee4:	6178      	str	r0, [r7, #20]
        break;
 8002ee6:	e022      	b.n	8002f2e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ee8:	4b0d      	ldr	r3, [pc, #52]	; (8002f20 <UART_SetConfig+0x300>)
 8002eea:	617b      	str	r3, [r7, #20]
        break;
 8002eec:	e01f      	b.n	8002f2e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002eee:	f7fe ff03 	bl	8001cf8 <HAL_RCC_GetSysClockFreq>
 8002ef2:	6178      	str	r0, [r7, #20]
        break;
 8002ef4:	e01b      	b.n	8002f2e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ef6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002efa:	617b      	str	r3, [r7, #20]
        break;
 8002efc:	e017      	b.n	8002f2e <UART_SetConfig+0x30e>
 8002efe:	bf00      	nop
 8002f00:	efff69f3 	.word	0xefff69f3
 8002f04:	40008000 	.word	0x40008000
 8002f08:	40013800 	.word	0x40013800
 8002f0c:	40021000 	.word	0x40021000
 8002f10:	40004400 	.word	0x40004400
 8002f14:	40004800 	.word	0x40004800
 8002f18:	40004c00 	.word	0x40004c00
 8002f1c:	40005000 	.word	0x40005000
 8002f20:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002f24:	2300      	movs	r3, #0
 8002f26:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	76bb      	strb	r3, [r7, #26]
        break;
 8002f2c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f000 80f1 	beq.w	8003118 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685a      	ldr	r2, [r3, #4]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	4413      	add	r3, r2
 8002f40:	697a      	ldr	r2, [r7, #20]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d305      	bcc.n	8002f52 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d902      	bls.n	8002f58 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	76bb      	strb	r3, [r7, #26]
 8002f56:	e0df      	b.n	8003118 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f04f 0100 	mov.w	r1, #0
 8002f60:	f04f 0200 	mov.w	r2, #0
 8002f64:	f04f 0300 	mov.w	r3, #0
 8002f68:	020b      	lsls	r3, r1, #8
 8002f6a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002f6e:	0202      	lsls	r2, r0, #8
 8002f70:	6879      	ldr	r1, [r7, #4]
 8002f72:	6849      	ldr	r1, [r1, #4]
 8002f74:	0849      	lsrs	r1, r1, #1
 8002f76:	4608      	mov	r0, r1
 8002f78:	f04f 0100 	mov.w	r1, #0
 8002f7c:	1814      	adds	r4, r2, r0
 8002f7e:	eb43 0501 	adc.w	r5, r3, r1
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	461a      	mov	r2, r3
 8002f88:	f04f 0300 	mov.w	r3, #0
 8002f8c:	4620      	mov	r0, r4
 8002f8e:	4629      	mov	r1, r5
 8002f90:	f7fd f96e 	bl	8000270 <__aeabi_uldivmod>
 8002f94:	4602      	mov	r2, r0
 8002f96:	460b      	mov	r3, r1
 8002f98:	4613      	mov	r3, r2
 8002f9a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fa2:	d308      	bcc.n	8002fb6 <UART_SetConfig+0x396>
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002faa:	d204      	bcs.n	8002fb6 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	60da      	str	r2, [r3, #12]
 8002fb4:	e0b0      	b.n	8003118 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	76bb      	strb	r3, [r7, #26]
 8002fba:	e0ad      	b.n	8003118 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	69db      	ldr	r3, [r3, #28]
 8002fc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fc4:	d15b      	bne.n	800307e <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8002fc6:	7efb      	ldrb	r3, [r7, #27]
 8002fc8:	2b08      	cmp	r3, #8
 8002fca:	d828      	bhi.n	800301e <UART_SetConfig+0x3fe>
 8002fcc:	a201      	add	r2, pc, #4	; (adr r2, 8002fd4 <UART_SetConfig+0x3b4>)
 8002fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd2:	bf00      	nop
 8002fd4:	08002ff9 	.word	0x08002ff9
 8002fd8:	08003001 	.word	0x08003001
 8002fdc:	08003009 	.word	0x08003009
 8002fe0:	0800301f 	.word	0x0800301f
 8002fe4:	0800300f 	.word	0x0800300f
 8002fe8:	0800301f 	.word	0x0800301f
 8002fec:	0800301f 	.word	0x0800301f
 8002ff0:	0800301f 	.word	0x0800301f
 8002ff4:	08003017 	.word	0x08003017
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ff8:	f7fe ff16 	bl	8001e28 <HAL_RCC_GetPCLK1Freq>
 8002ffc:	6178      	str	r0, [r7, #20]
        break;
 8002ffe:	e013      	b.n	8003028 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003000:	f7fe ff28 	bl	8001e54 <HAL_RCC_GetPCLK2Freq>
 8003004:	6178      	str	r0, [r7, #20]
        break;
 8003006:	e00f      	b.n	8003028 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003008:	4b49      	ldr	r3, [pc, #292]	; (8003130 <UART_SetConfig+0x510>)
 800300a:	617b      	str	r3, [r7, #20]
        break;
 800300c:	e00c      	b.n	8003028 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800300e:	f7fe fe73 	bl	8001cf8 <HAL_RCC_GetSysClockFreq>
 8003012:	6178      	str	r0, [r7, #20]
        break;
 8003014:	e008      	b.n	8003028 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003016:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800301a:	617b      	str	r3, [r7, #20]
        break;
 800301c:	e004      	b.n	8003028 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800301e:	2300      	movs	r3, #0
 8003020:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	76bb      	strb	r3, [r7, #26]
        break;
 8003026:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d074      	beq.n	8003118 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	005a      	lsls	r2, r3, #1
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	085b      	lsrs	r3, r3, #1
 8003038:	441a      	add	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003042:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	2b0f      	cmp	r3, #15
 8003048:	d916      	bls.n	8003078 <UART_SetConfig+0x458>
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003050:	d212      	bcs.n	8003078 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	b29b      	uxth	r3, r3
 8003056:	f023 030f 	bic.w	r3, r3, #15
 800305a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	085b      	lsrs	r3, r3, #1
 8003060:	b29b      	uxth	r3, r3
 8003062:	f003 0307 	and.w	r3, r3, #7
 8003066:	b29a      	uxth	r2, r3
 8003068:	89fb      	ldrh	r3, [r7, #14]
 800306a:	4313      	orrs	r3, r2
 800306c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	89fa      	ldrh	r2, [r7, #14]
 8003074:	60da      	str	r2, [r3, #12]
 8003076:	e04f      	b.n	8003118 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	76bb      	strb	r3, [r7, #26]
 800307c:	e04c      	b.n	8003118 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800307e:	7efb      	ldrb	r3, [r7, #27]
 8003080:	2b08      	cmp	r3, #8
 8003082:	d828      	bhi.n	80030d6 <UART_SetConfig+0x4b6>
 8003084:	a201      	add	r2, pc, #4	; (adr r2, 800308c <UART_SetConfig+0x46c>)
 8003086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800308a:	bf00      	nop
 800308c:	080030b1 	.word	0x080030b1
 8003090:	080030b9 	.word	0x080030b9
 8003094:	080030c1 	.word	0x080030c1
 8003098:	080030d7 	.word	0x080030d7
 800309c:	080030c7 	.word	0x080030c7
 80030a0:	080030d7 	.word	0x080030d7
 80030a4:	080030d7 	.word	0x080030d7
 80030a8:	080030d7 	.word	0x080030d7
 80030ac:	080030cf 	.word	0x080030cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030b0:	f7fe feba 	bl	8001e28 <HAL_RCC_GetPCLK1Freq>
 80030b4:	6178      	str	r0, [r7, #20]
        break;
 80030b6:	e013      	b.n	80030e0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030b8:	f7fe fecc 	bl	8001e54 <HAL_RCC_GetPCLK2Freq>
 80030bc:	6178      	str	r0, [r7, #20]
        break;
 80030be:	e00f      	b.n	80030e0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030c0:	4b1b      	ldr	r3, [pc, #108]	; (8003130 <UART_SetConfig+0x510>)
 80030c2:	617b      	str	r3, [r7, #20]
        break;
 80030c4:	e00c      	b.n	80030e0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030c6:	f7fe fe17 	bl	8001cf8 <HAL_RCC_GetSysClockFreq>
 80030ca:	6178      	str	r0, [r7, #20]
        break;
 80030cc:	e008      	b.n	80030e0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030d2:	617b      	str	r3, [r7, #20]
        break;
 80030d4:	e004      	b.n	80030e0 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80030d6:	2300      	movs	r3, #0
 80030d8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	76bb      	strb	r3, [r7, #26]
        break;
 80030de:	bf00      	nop
    }

    if (pclk != 0U)
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d018      	beq.n	8003118 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	085a      	lsrs	r2, r3, #1
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	441a      	add	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	2b0f      	cmp	r3, #15
 80030fe:	d909      	bls.n	8003114 <UART_SetConfig+0x4f4>
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003106:	d205      	bcs.n	8003114 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	b29a      	uxth	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	60da      	str	r2, [r3, #12]
 8003112:	e001      	b.n	8003118 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003124:	7ebb      	ldrb	r3, [r7, #26]
}
 8003126:	4618      	mov	r0, r3
 8003128:	3720      	adds	r7, #32
 800312a:	46bd      	mov	sp, r7
 800312c:	bdb0      	pop	{r4, r5, r7, pc}
 800312e:	bf00      	nop
 8003130:	00f42400 	.word	0x00f42400

08003134 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003140:	f003 0301 	and.w	r3, r3, #1
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00a      	beq.n	800315e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	430a      	orrs	r2, r1
 800315c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00a      	beq.n	8003180 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	430a      	orrs	r2, r1
 800317e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003184:	f003 0304 	and.w	r3, r3, #4
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00a      	beq.n	80031a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	430a      	orrs	r2, r1
 80031a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a6:	f003 0308 	and.w	r3, r3, #8
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00a      	beq.n	80031c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	430a      	orrs	r2, r1
 80031c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c8:	f003 0310 	and.w	r3, r3, #16
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d00a      	beq.n	80031e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	430a      	orrs	r2, r1
 80031e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ea:	f003 0320 	and.w	r3, r3, #32
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00a      	beq.n	8003208 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	430a      	orrs	r2, r1
 8003206:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003210:	2b00      	cmp	r3, #0
 8003212:	d01a      	beq.n	800324a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	430a      	orrs	r2, r1
 8003228:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003232:	d10a      	bne.n	800324a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	430a      	orrs	r2, r1
 8003248:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00a      	beq.n	800326c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	430a      	orrs	r2, r1
 800326a:	605a      	str	r2, [r3, #4]
  }
}
 800326c:	bf00      	nop
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af02      	add	r7, sp, #8
 800327e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003288:	f7fd fd00 	bl	8000c8c <HAL_GetTick>
 800328c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0308 	and.w	r3, r3, #8
 8003298:	2b08      	cmp	r3, #8
 800329a:	d10e      	bne.n	80032ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800329c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80032a0:	9300      	str	r3, [sp, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 f82d 	bl	800330a <UART_WaitOnFlagUntilTimeout>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e023      	b.n	8003302 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0304 	and.w	r3, r3, #4
 80032c4:	2b04      	cmp	r3, #4
 80032c6:	d10e      	bne.n	80032e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80032cc:	9300      	str	r3, [sp, #0]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 f817 	bl	800330a <UART_WaitOnFlagUntilTimeout>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e00d      	b.n	8003302 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2220      	movs	r2, #32
 80032ea:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2220      	movs	r2, #32
 80032f0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3710      	adds	r7, #16
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800330a:	b580      	push	{r7, lr}
 800330c:	b09c      	sub	sp, #112	; 0x70
 800330e:	af00      	add	r7, sp, #0
 8003310:	60f8      	str	r0, [r7, #12]
 8003312:	60b9      	str	r1, [r7, #8]
 8003314:	603b      	str	r3, [r7, #0]
 8003316:	4613      	mov	r3, r2
 8003318:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800331a:	e0a5      	b.n	8003468 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800331c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800331e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003322:	f000 80a1 	beq.w	8003468 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003326:	f7fd fcb1 	bl	8000c8c <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003332:	429a      	cmp	r2, r3
 8003334:	d302      	bcc.n	800333c <UART_WaitOnFlagUntilTimeout+0x32>
 8003336:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003338:	2b00      	cmp	r3, #0
 800333a:	d13e      	bne.n	80033ba <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003342:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003344:	e853 3f00 	ldrex	r3, [r3]
 8003348:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800334a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800334c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003350:	667b      	str	r3, [r7, #100]	; 0x64
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	461a      	mov	r2, r3
 8003358:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800335a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800335c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800335e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003360:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003362:	e841 2300 	strex	r3, r2, [r1]
 8003366:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003368:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1e6      	bne.n	800333c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	3308      	adds	r3, #8
 8003374:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003378:	e853 3f00 	ldrex	r3, [r3]
 800337c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800337e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003380:	f023 0301 	bic.w	r3, r3, #1
 8003384:	663b      	str	r3, [r7, #96]	; 0x60
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	3308      	adds	r3, #8
 800338c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800338e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003390:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003392:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003394:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003396:	e841 2300 	strex	r3, r2, [r1]
 800339a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800339c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1e5      	bne.n	800336e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2220      	movs	r2, #32
 80033a6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2220      	movs	r2, #32
 80033ac:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e067      	b.n	800348a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0304 	and.w	r3, r3, #4
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d04f      	beq.n	8003468 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	69db      	ldr	r3, [r3, #28]
 80033ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033d6:	d147      	bne.n	8003468 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033e0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ea:	e853 3f00 	ldrex	r3, [r3]
 80033ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80033f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80033f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	461a      	mov	r2, r3
 80033fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003400:	637b      	str	r3, [r7, #52]	; 0x34
 8003402:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003404:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003406:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003408:	e841 2300 	strex	r3, r2, [r1]
 800340c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800340e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1e6      	bne.n	80033e2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	3308      	adds	r3, #8
 800341a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	e853 3f00 	ldrex	r3, [r3]
 8003422:	613b      	str	r3, [r7, #16]
   return(result);
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	f023 0301 	bic.w	r3, r3, #1
 800342a:	66bb      	str	r3, [r7, #104]	; 0x68
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	3308      	adds	r3, #8
 8003432:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003434:	623a      	str	r2, [r7, #32]
 8003436:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003438:	69f9      	ldr	r1, [r7, #28]
 800343a:	6a3a      	ldr	r2, [r7, #32]
 800343c:	e841 2300 	strex	r3, r2, [r1]
 8003440:	61bb      	str	r3, [r7, #24]
   return(result);
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1e5      	bne.n	8003414 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2220      	movs	r2, #32
 800344c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2220      	movs	r2, #32
 8003452:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2220      	movs	r2, #32
 8003458:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e010      	b.n	800348a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	69da      	ldr	r2, [r3, #28]
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	4013      	ands	r3, r2
 8003472:	68ba      	ldr	r2, [r7, #8]
 8003474:	429a      	cmp	r2, r3
 8003476:	bf0c      	ite	eq
 8003478:	2301      	moveq	r3, #1
 800347a:	2300      	movne	r3, #0
 800347c:	b2db      	uxtb	r3, r3
 800347e:	461a      	mov	r2, r3
 8003480:	79fb      	ldrb	r3, [r7, #7]
 8003482:	429a      	cmp	r2, r3
 8003484:	f43f af4a 	beq.w	800331c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3770      	adds	r7, #112	; 0x70
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
	...

08003494 <__errno>:
 8003494:	4b01      	ldr	r3, [pc, #4]	; (800349c <__errno+0x8>)
 8003496:	6818      	ldr	r0, [r3, #0]
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	2000000c 	.word	0x2000000c

080034a0 <__libc_init_array>:
 80034a0:	b570      	push	{r4, r5, r6, lr}
 80034a2:	4d0d      	ldr	r5, [pc, #52]	; (80034d8 <__libc_init_array+0x38>)
 80034a4:	4c0d      	ldr	r4, [pc, #52]	; (80034dc <__libc_init_array+0x3c>)
 80034a6:	1b64      	subs	r4, r4, r5
 80034a8:	10a4      	asrs	r4, r4, #2
 80034aa:	2600      	movs	r6, #0
 80034ac:	42a6      	cmp	r6, r4
 80034ae:	d109      	bne.n	80034c4 <__libc_init_array+0x24>
 80034b0:	4d0b      	ldr	r5, [pc, #44]	; (80034e0 <__libc_init_array+0x40>)
 80034b2:	4c0c      	ldr	r4, [pc, #48]	; (80034e4 <__libc_init_array+0x44>)
 80034b4:	f000 ff76 	bl	80043a4 <_init>
 80034b8:	1b64      	subs	r4, r4, r5
 80034ba:	10a4      	asrs	r4, r4, #2
 80034bc:	2600      	movs	r6, #0
 80034be:	42a6      	cmp	r6, r4
 80034c0:	d105      	bne.n	80034ce <__libc_init_array+0x2e>
 80034c2:	bd70      	pop	{r4, r5, r6, pc}
 80034c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80034c8:	4798      	blx	r3
 80034ca:	3601      	adds	r6, #1
 80034cc:	e7ee      	b.n	80034ac <__libc_init_array+0xc>
 80034ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80034d2:	4798      	blx	r3
 80034d4:	3601      	adds	r6, #1
 80034d6:	e7f2      	b.n	80034be <__libc_init_array+0x1e>
 80034d8:	080044e8 	.word	0x080044e8
 80034dc:	080044e8 	.word	0x080044e8
 80034e0:	080044e8 	.word	0x080044e8
 80034e4:	080044ec 	.word	0x080044ec

080034e8 <memset>:
 80034e8:	4402      	add	r2, r0
 80034ea:	4603      	mov	r3, r0
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d100      	bne.n	80034f2 <memset+0xa>
 80034f0:	4770      	bx	lr
 80034f2:	f803 1b01 	strb.w	r1, [r3], #1
 80034f6:	e7f9      	b.n	80034ec <memset+0x4>

080034f8 <iprintf>:
 80034f8:	b40f      	push	{r0, r1, r2, r3}
 80034fa:	4b0a      	ldr	r3, [pc, #40]	; (8003524 <iprintf+0x2c>)
 80034fc:	b513      	push	{r0, r1, r4, lr}
 80034fe:	681c      	ldr	r4, [r3, #0]
 8003500:	b124      	cbz	r4, 800350c <iprintf+0x14>
 8003502:	69a3      	ldr	r3, [r4, #24]
 8003504:	b913      	cbnz	r3, 800350c <iprintf+0x14>
 8003506:	4620      	mov	r0, r4
 8003508:	f000 f866 	bl	80035d8 <__sinit>
 800350c:	ab05      	add	r3, sp, #20
 800350e:	9a04      	ldr	r2, [sp, #16]
 8003510:	68a1      	ldr	r1, [r4, #8]
 8003512:	9301      	str	r3, [sp, #4]
 8003514:	4620      	mov	r0, r4
 8003516:	f000 f983 	bl	8003820 <_vfiprintf_r>
 800351a:	b002      	add	sp, #8
 800351c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003520:	b004      	add	sp, #16
 8003522:	4770      	bx	lr
 8003524:	2000000c 	.word	0x2000000c

08003528 <std>:
 8003528:	2300      	movs	r3, #0
 800352a:	b510      	push	{r4, lr}
 800352c:	4604      	mov	r4, r0
 800352e:	e9c0 3300 	strd	r3, r3, [r0]
 8003532:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003536:	6083      	str	r3, [r0, #8]
 8003538:	8181      	strh	r1, [r0, #12]
 800353a:	6643      	str	r3, [r0, #100]	; 0x64
 800353c:	81c2      	strh	r2, [r0, #14]
 800353e:	6183      	str	r3, [r0, #24]
 8003540:	4619      	mov	r1, r3
 8003542:	2208      	movs	r2, #8
 8003544:	305c      	adds	r0, #92	; 0x5c
 8003546:	f7ff ffcf 	bl	80034e8 <memset>
 800354a:	4b05      	ldr	r3, [pc, #20]	; (8003560 <std+0x38>)
 800354c:	6263      	str	r3, [r4, #36]	; 0x24
 800354e:	4b05      	ldr	r3, [pc, #20]	; (8003564 <std+0x3c>)
 8003550:	62a3      	str	r3, [r4, #40]	; 0x28
 8003552:	4b05      	ldr	r3, [pc, #20]	; (8003568 <std+0x40>)
 8003554:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003556:	4b05      	ldr	r3, [pc, #20]	; (800356c <std+0x44>)
 8003558:	6224      	str	r4, [r4, #32]
 800355a:	6323      	str	r3, [r4, #48]	; 0x30
 800355c:	bd10      	pop	{r4, pc}
 800355e:	bf00      	nop
 8003560:	08003dc9 	.word	0x08003dc9
 8003564:	08003deb 	.word	0x08003deb
 8003568:	08003e23 	.word	0x08003e23
 800356c:	08003e47 	.word	0x08003e47

08003570 <_cleanup_r>:
 8003570:	4901      	ldr	r1, [pc, #4]	; (8003578 <_cleanup_r+0x8>)
 8003572:	f000 b8af 	b.w	80036d4 <_fwalk_reent>
 8003576:	bf00      	nop
 8003578:	08004121 	.word	0x08004121

0800357c <__sfmoreglue>:
 800357c:	b570      	push	{r4, r5, r6, lr}
 800357e:	1e4a      	subs	r2, r1, #1
 8003580:	2568      	movs	r5, #104	; 0x68
 8003582:	4355      	muls	r5, r2
 8003584:	460e      	mov	r6, r1
 8003586:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800358a:	f000 f8c5 	bl	8003718 <_malloc_r>
 800358e:	4604      	mov	r4, r0
 8003590:	b140      	cbz	r0, 80035a4 <__sfmoreglue+0x28>
 8003592:	2100      	movs	r1, #0
 8003594:	e9c0 1600 	strd	r1, r6, [r0]
 8003598:	300c      	adds	r0, #12
 800359a:	60a0      	str	r0, [r4, #8]
 800359c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80035a0:	f7ff ffa2 	bl	80034e8 <memset>
 80035a4:	4620      	mov	r0, r4
 80035a6:	bd70      	pop	{r4, r5, r6, pc}

080035a8 <__sfp_lock_acquire>:
 80035a8:	4801      	ldr	r0, [pc, #4]	; (80035b0 <__sfp_lock_acquire+0x8>)
 80035aa:	f000 b8b3 	b.w	8003714 <__retarget_lock_acquire_recursive>
 80035ae:	bf00      	nop
 80035b0:	2000012c 	.word	0x2000012c

080035b4 <__sfp_lock_release>:
 80035b4:	4801      	ldr	r0, [pc, #4]	; (80035bc <__sfp_lock_release+0x8>)
 80035b6:	f000 b8ae 	b.w	8003716 <__retarget_lock_release_recursive>
 80035ba:	bf00      	nop
 80035bc:	2000012c 	.word	0x2000012c

080035c0 <__sinit_lock_acquire>:
 80035c0:	4801      	ldr	r0, [pc, #4]	; (80035c8 <__sinit_lock_acquire+0x8>)
 80035c2:	f000 b8a7 	b.w	8003714 <__retarget_lock_acquire_recursive>
 80035c6:	bf00      	nop
 80035c8:	20000127 	.word	0x20000127

080035cc <__sinit_lock_release>:
 80035cc:	4801      	ldr	r0, [pc, #4]	; (80035d4 <__sinit_lock_release+0x8>)
 80035ce:	f000 b8a2 	b.w	8003716 <__retarget_lock_release_recursive>
 80035d2:	bf00      	nop
 80035d4:	20000127 	.word	0x20000127

080035d8 <__sinit>:
 80035d8:	b510      	push	{r4, lr}
 80035da:	4604      	mov	r4, r0
 80035dc:	f7ff fff0 	bl	80035c0 <__sinit_lock_acquire>
 80035e0:	69a3      	ldr	r3, [r4, #24]
 80035e2:	b11b      	cbz	r3, 80035ec <__sinit+0x14>
 80035e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035e8:	f7ff bff0 	b.w	80035cc <__sinit_lock_release>
 80035ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80035f0:	6523      	str	r3, [r4, #80]	; 0x50
 80035f2:	4b13      	ldr	r3, [pc, #76]	; (8003640 <__sinit+0x68>)
 80035f4:	4a13      	ldr	r2, [pc, #76]	; (8003644 <__sinit+0x6c>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80035fa:	42a3      	cmp	r3, r4
 80035fc:	bf04      	itt	eq
 80035fe:	2301      	moveq	r3, #1
 8003600:	61a3      	streq	r3, [r4, #24]
 8003602:	4620      	mov	r0, r4
 8003604:	f000 f820 	bl	8003648 <__sfp>
 8003608:	6060      	str	r0, [r4, #4]
 800360a:	4620      	mov	r0, r4
 800360c:	f000 f81c 	bl	8003648 <__sfp>
 8003610:	60a0      	str	r0, [r4, #8]
 8003612:	4620      	mov	r0, r4
 8003614:	f000 f818 	bl	8003648 <__sfp>
 8003618:	2200      	movs	r2, #0
 800361a:	60e0      	str	r0, [r4, #12]
 800361c:	2104      	movs	r1, #4
 800361e:	6860      	ldr	r0, [r4, #4]
 8003620:	f7ff ff82 	bl	8003528 <std>
 8003624:	68a0      	ldr	r0, [r4, #8]
 8003626:	2201      	movs	r2, #1
 8003628:	2109      	movs	r1, #9
 800362a:	f7ff ff7d 	bl	8003528 <std>
 800362e:	68e0      	ldr	r0, [r4, #12]
 8003630:	2202      	movs	r2, #2
 8003632:	2112      	movs	r1, #18
 8003634:	f7ff ff78 	bl	8003528 <std>
 8003638:	2301      	movs	r3, #1
 800363a:	61a3      	str	r3, [r4, #24]
 800363c:	e7d2      	b.n	80035e4 <__sinit+0xc>
 800363e:	bf00      	nop
 8003640:	08004448 	.word	0x08004448
 8003644:	08003571 	.word	0x08003571

08003648 <__sfp>:
 8003648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800364a:	4607      	mov	r7, r0
 800364c:	f7ff ffac 	bl	80035a8 <__sfp_lock_acquire>
 8003650:	4b1e      	ldr	r3, [pc, #120]	; (80036cc <__sfp+0x84>)
 8003652:	681e      	ldr	r6, [r3, #0]
 8003654:	69b3      	ldr	r3, [r6, #24]
 8003656:	b913      	cbnz	r3, 800365e <__sfp+0x16>
 8003658:	4630      	mov	r0, r6
 800365a:	f7ff ffbd 	bl	80035d8 <__sinit>
 800365e:	3648      	adds	r6, #72	; 0x48
 8003660:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003664:	3b01      	subs	r3, #1
 8003666:	d503      	bpl.n	8003670 <__sfp+0x28>
 8003668:	6833      	ldr	r3, [r6, #0]
 800366a:	b30b      	cbz	r3, 80036b0 <__sfp+0x68>
 800366c:	6836      	ldr	r6, [r6, #0]
 800366e:	e7f7      	b.n	8003660 <__sfp+0x18>
 8003670:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003674:	b9d5      	cbnz	r5, 80036ac <__sfp+0x64>
 8003676:	4b16      	ldr	r3, [pc, #88]	; (80036d0 <__sfp+0x88>)
 8003678:	60e3      	str	r3, [r4, #12]
 800367a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800367e:	6665      	str	r5, [r4, #100]	; 0x64
 8003680:	f000 f847 	bl	8003712 <__retarget_lock_init_recursive>
 8003684:	f7ff ff96 	bl	80035b4 <__sfp_lock_release>
 8003688:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800368c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003690:	6025      	str	r5, [r4, #0]
 8003692:	61a5      	str	r5, [r4, #24]
 8003694:	2208      	movs	r2, #8
 8003696:	4629      	mov	r1, r5
 8003698:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800369c:	f7ff ff24 	bl	80034e8 <memset>
 80036a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80036a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80036a8:	4620      	mov	r0, r4
 80036aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036ac:	3468      	adds	r4, #104	; 0x68
 80036ae:	e7d9      	b.n	8003664 <__sfp+0x1c>
 80036b0:	2104      	movs	r1, #4
 80036b2:	4638      	mov	r0, r7
 80036b4:	f7ff ff62 	bl	800357c <__sfmoreglue>
 80036b8:	4604      	mov	r4, r0
 80036ba:	6030      	str	r0, [r6, #0]
 80036bc:	2800      	cmp	r0, #0
 80036be:	d1d5      	bne.n	800366c <__sfp+0x24>
 80036c0:	f7ff ff78 	bl	80035b4 <__sfp_lock_release>
 80036c4:	230c      	movs	r3, #12
 80036c6:	603b      	str	r3, [r7, #0]
 80036c8:	e7ee      	b.n	80036a8 <__sfp+0x60>
 80036ca:	bf00      	nop
 80036cc:	08004448 	.word	0x08004448
 80036d0:	ffff0001 	.word	0xffff0001

080036d4 <_fwalk_reent>:
 80036d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036d8:	4606      	mov	r6, r0
 80036da:	4688      	mov	r8, r1
 80036dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80036e0:	2700      	movs	r7, #0
 80036e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80036e6:	f1b9 0901 	subs.w	r9, r9, #1
 80036ea:	d505      	bpl.n	80036f8 <_fwalk_reent+0x24>
 80036ec:	6824      	ldr	r4, [r4, #0]
 80036ee:	2c00      	cmp	r4, #0
 80036f0:	d1f7      	bne.n	80036e2 <_fwalk_reent+0xe>
 80036f2:	4638      	mov	r0, r7
 80036f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036f8:	89ab      	ldrh	r3, [r5, #12]
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d907      	bls.n	800370e <_fwalk_reent+0x3a>
 80036fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003702:	3301      	adds	r3, #1
 8003704:	d003      	beq.n	800370e <_fwalk_reent+0x3a>
 8003706:	4629      	mov	r1, r5
 8003708:	4630      	mov	r0, r6
 800370a:	47c0      	blx	r8
 800370c:	4307      	orrs	r7, r0
 800370e:	3568      	adds	r5, #104	; 0x68
 8003710:	e7e9      	b.n	80036e6 <_fwalk_reent+0x12>

08003712 <__retarget_lock_init_recursive>:
 8003712:	4770      	bx	lr

08003714 <__retarget_lock_acquire_recursive>:
 8003714:	4770      	bx	lr

08003716 <__retarget_lock_release_recursive>:
 8003716:	4770      	bx	lr

08003718 <_malloc_r>:
 8003718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800371a:	1ccd      	adds	r5, r1, #3
 800371c:	f025 0503 	bic.w	r5, r5, #3
 8003720:	3508      	adds	r5, #8
 8003722:	2d0c      	cmp	r5, #12
 8003724:	bf38      	it	cc
 8003726:	250c      	movcc	r5, #12
 8003728:	2d00      	cmp	r5, #0
 800372a:	4606      	mov	r6, r0
 800372c:	db01      	blt.n	8003732 <_malloc_r+0x1a>
 800372e:	42a9      	cmp	r1, r5
 8003730:	d903      	bls.n	800373a <_malloc_r+0x22>
 8003732:	230c      	movs	r3, #12
 8003734:	6033      	str	r3, [r6, #0]
 8003736:	2000      	movs	r0, #0
 8003738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800373a:	f000 fda3 	bl	8004284 <__malloc_lock>
 800373e:	4921      	ldr	r1, [pc, #132]	; (80037c4 <_malloc_r+0xac>)
 8003740:	680a      	ldr	r2, [r1, #0]
 8003742:	4614      	mov	r4, r2
 8003744:	b99c      	cbnz	r4, 800376e <_malloc_r+0x56>
 8003746:	4f20      	ldr	r7, [pc, #128]	; (80037c8 <_malloc_r+0xb0>)
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	b923      	cbnz	r3, 8003756 <_malloc_r+0x3e>
 800374c:	4621      	mov	r1, r4
 800374e:	4630      	mov	r0, r6
 8003750:	f000 fb2a 	bl	8003da8 <_sbrk_r>
 8003754:	6038      	str	r0, [r7, #0]
 8003756:	4629      	mov	r1, r5
 8003758:	4630      	mov	r0, r6
 800375a:	f000 fb25 	bl	8003da8 <_sbrk_r>
 800375e:	1c43      	adds	r3, r0, #1
 8003760:	d123      	bne.n	80037aa <_malloc_r+0x92>
 8003762:	230c      	movs	r3, #12
 8003764:	6033      	str	r3, [r6, #0]
 8003766:	4630      	mov	r0, r6
 8003768:	f000 fd92 	bl	8004290 <__malloc_unlock>
 800376c:	e7e3      	b.n	8003736 <_malloc_r+0x1e>
 800376e:	6823      	ldr	r3, [r4, #0]
 8003770:	1b5b      	subs	r3, r3, r5
 8003772:	d417      	bmi.n	80037a4 <_malloc_r+0x8c>
 8003774:	2b0b      	cmp	r3, #11
 8003776:	d903      	bls.n	8003780 <_malloc_r+0x68>
 8003778:	6023      	str	r3, [r4, #0]
 800377a:	441c      	add	r4, r3
 800377c:	6025      	str	r5, [r4, #0]
 800377e:	e004      	b.n	800378a <_malloc_r+0x72>
 8003780:	6863      	ldr	r3, [r4, #4]
 8003782:	42a2      	cmp	r2, r4
 8003784:	bf0c      	ite	eq
 8003786:	600b      	streq	r3, [r1, #0]
 8003788:	6053      	strne	r3, [r2, #4]
 800378a:	4630      	mov	r0, r6
 800378c:	f000 fd80 	bl	8004290 <__malloc_unlock>
 8003790:	f104 000b 	add.w	r0, r4, #11
 8003794:	1d23      	adds	r3, r4, #4
 8003796:	f020 0007 	bic.w	r0, r0, #7
 800379a:	1ac2      	subs	r2, r0, r3
 800379c:	d0cc      	beq.n	8003738 <_malloc_r+0x20>
 800379e:	1a1b      	subs	r3, r3, r0
 80037a0:	50a3      	str	r3, [r4, r2]
 80037a2:	e7c9      	b.n	8003738 <_malloc_r+0x20>
 80037a4:	4622      	mov	r2, r4
 80037a6:	6864      	ldr	r4, [r4, #4]
 80037a8:	e7cc      	b.n	8003744 <_malloc_r+0x2c>
 80037aa:	1cc4      	adds	r4, r0, #3
 80037ac:	f024 0403 	bic.w	r4, r4, #3
 80037b0:	42a0      	cmp	r0, r4
 80037b2:	d0e3      	beq.n	800377c <_malloc_r+0x64>
 80037b4:	1a21      	subs	r1, r4, r0
 80037b6:	4630      	mov	r0, r6
 80037b8:	f000 faf6 	bl	8003da8 <_sbrk_r>
 80037bc:	3001      	adds	r0, #1
 80037be:	d1dd      	bne.n	800377c <_malloc_r+0x64>
 80037c0:	e7cf      	b.n	8003762 <_malloc_r+0x4a>
 80037c2:	bf00      	nop
 80037c4:	20000090 	.word	0x20000090
 80037c8:	20000094 	.word	0x20000094

080037cc <__sfputc_r>:
 80037cc:	6893      	ldr	r3, [r2, #8]
 80037ce:	3b01      	subs	r3, #1
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	b410      	push	{r4}
 80037d4:	6093      	str	r3, [r2, #8]
 80037d6:	da08      	bge.n	80037ea <__sfputc_r+0x1e>
 80037d8:	6994      	ldr	r4, [r2, #24]
 80037da:	42a3      	cmp	r3, r4
 80037dc:	db01      	blt.n	80037e2 <__sfputc_r+0x16>
 80037de:	290a      	cmp	r1, #10
 80037e0:	d103      	bne.n	80037ea <__sfputc_r+0x1e>
 80037e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80037e6:	f000 bb33 	b.w	8003e50 <__swbuf_r>
 80037ea:	6813      	ldr	r3, [r2, #0]
 80037ec:	1c58      	adds	r0, r3, #1
 80037ee:	6010      	str	r0, [r2, #0]
 80037f0:	7019      	strb	r1, [r3, #0]
 80037f2:	4608      	mov	r0, r1
 80037f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80037f8:	4770      	bx	lr

080037fa <__sfputs_r>:
 80037fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037fc:	4606      	mov	r6, r0
 80037fe:	460f      	mov	r7, r1
 8003800:	4614      	mov	r4, r2
 8003802:	18d5      	adds	r5, r2, r3
 8003804:	42ac      	cmp	r4, r5
 8003806:	d101      	bne.n	800380c <__sfputs_r+0x12>
 8003808:	2000      	movs	r0, #0
 800380a:	e007      	b.n	800381c <__sfputs_r+0x22>
 800380c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003810:	463a      	mov	r2, r7
 8003812:	4630      	mov	r0, r6
 8003814:	f7ff ffda 	bl	80037cc <__sfputc_r>
 8003818:	1c43      	adds	r3, r0, #1
 800381a:	d1f3      	bne.n	8003804 <__sfputs_r+0xa>
 800381c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003820 <_vfiprintf_r>:
 8003820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003824:	460d      	mov	r5, r1
 8003826:	b09d      	sub	sp, #116	; 0x74
 8003828:	4614      	mov	r4, r2
 800382a:	4698      	mov	r8, r3
 800382c:	4606      	mov	r6, r0
 800382e:	b118      	cbz	r0, 8003838 <_vfiprintf_r+0x18>
 8003830:	6983      	ldr	r3, [r0, #24]
 8003832:	b90b      	cbnz	r3, 8003838 <_vfiprintf_r+0x18>
 8003834:	f7ff fed0 	bl	80035d8 <__sinit>
 8003838:	4b89      	ldr	r3, [pc, #548]	; (8003a60 <_vfiprintf_r+0x240>)
 800383a:	429d      	cmp	r5, r3
 800383c:	d11b      	bne.n	8003876 <_vfiprintf_r+0x56>
 800383e:	6875      	ldr	r5, [r6, #4]
 8003840:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003842:	07d9      	lsls	r1, r3, #31
 8003844:	d405      	bmi.n	8003852 <_vfiprintf_r+0x32>
 8003846:	89ab      	ldrh	r3, [r5, #12]
 8003848:	059a      	lsls	r2, r3, #22
 800384a:	d402      	bmi.n	8003852 <_vfiprintf_r+0x32>
 800384c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800384e:	f7ff ff61 	bl	8003714 <__retarget_lock_acquire_recursive>
 8003852:	89ab      	ldrh	r3, [r5, #12]
 8003854:	071b      	lsls	r3, r3, #28
 8003856:	d501      	bpl.n	800385c <_vfiprintf_r+0x3c>
 8003858:	692b      	ldr	r3, [r5, #16]
 800385a:	b9eb      	cbnz	r3, 8003898 <_vfiprintf_r+0x78>
 800385c:	4629      	mov	r1, r5
 800385e:	4630      	mov	r0, r6
 8003860:	f000 fb5a 	bl	8003f18 <__swsetup_r>
 8003864:	b1c0      	cbz	r0, 8003898 <_vfiprintf_r+0x78>
 8003866:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003868:	07dc      	lsls	r4, r3, #31
 800386a:	d50e      	bpl.n	800388a <_vfiprintf_r+0x6a>
 800386c:	f04f 30ff 	mov.w	r0, #4294967295
 8003870:	b01d      	add	sp, #116	; 0x74
 8003872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003876:	4b7b      	ldr	r3, [pc, #492]	; (8003a64 <_vfiprintf_r+0x244>)
 8003878:	429d      	cmp	r5, r3
 800387a:	d101      	bne.n	8003880 <_vfiprintf_r+0x60>
 800387c:	68b5      	ldr	r5, [r6, #8]
 800387e:	e7df      	b.n	8003840 <_vfiprintf_r+0x20>
 8003880:	4b79      	ldr	r3, [pc, #484]	; (8003a68 <_vfiprintf_r+0x248>)
 8003882:	429d      	cmp	r5, r3
 8003884:	bf08      	it	eq
 8003886:	68f5      	ldreq	r5, [r6, #12]
 8003888:	e7da      	b.n	8003840 <_vfiprintf_r+0x20>
 800388a:	89ab      	ldrh	r3, [r5, #12]
 800388c:	0598      	lsls	r0, r3, #22
 800388e:	d4ed      	bmi.n	800386c <_vfiprintf_r+0x4c>
 8003890:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003892:	f7ff ff40 	bl	8003716 <__retarget_lock_release_recursive>
 8003896:	e7e9      	b.n	800386c <_vfiprintf_r+0x4c>
 8003898:	2300      	movs	r3, #0
 800389a:	9309      	str	r3, [sp, #36]	; 0x24
 800389c:	2320      	movs	r3, #32
 800389e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80038a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80038a6:	2330      	movs	r3, #48	; 0x30
 80038a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003a6c <_vfiprintf_r+0x24c>
 80038ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80038b0:	f04f 0901 	mov.w	r9, #1
 80038b4:	4623      	mov	r3, r4
 80038b6:	469a      	mov	sl, r3
 80038b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80038bc:	b10a      	cbz	r2, 80038c2 <_vfiprintf_r+0xa2>
 80038be:	2a25      	cmp	r2, #37	; 0x25
 80038c0:	d1f9      	bne.n	80038b6 <_vfiprintf_r+0x96>
 80038c2:	ebba 0b04 	subs.w	fp, sl, r4
 80038c6:	d00b      	beq.n	80038e0 <_vfiprintf_r+0xc0>
 80038c8:	465b      	mov	r3, fp
 80038ca:	4622      	mov	r2, r4
 80038cc:	4629      	mov	r1, r5
 80038ce:	4630      	mov	r0, r6
 80038d0:	f7ff ff93 	bl	80037fa <__sfputs_r>
 80038d4:	3001      	adds	r0, #1
 80038d6:	f000 80aa 	beq.w	8003a2e <_vfiprintf_r+0x20e>
 80038da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80038dc:	445a      	add	r2, fp
 80038de:	9209      	str	r2, [sp, #36]	; 0x24
 80038e0:	f89a 3000 	ldrb.w	r3, [sl]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f000 80a2 	beq.w	8003a2e <_vfiprintf_r+0x20e>
 80038ea:	2300      	movs	r3, #0
 80038ec:	f04f 32ff 	mov.w	r2, #4294967295
 80038f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80038f4:	f10a 0a01 	add.w	sl, sl, #1
 80038f8:	9304      	str	r3, [sp, #16]
 80038fa:	9307      	str	r3, [sp, #28]
 80038fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003900:	931a      	str	r3, [sp, #104]	; 0x68
 8003902:	4654      	mov	r4, sl
 8003904:	2205      	movs	r2, #5
 8003906:	f814 1b01 	ldrb.w	r1, [r4], #1
 800390a:	4858      	ldr	r0, [pc, #352]	; (8003a6c <_vfiprintf_r+0x24c>)
 800390c:	f7fc fc60 	bl	80001d0 <memchr>
 8003910:	9a04      	ldr	r2, [sp, #16]
 8003912:	b9d8      	cbnz	r0, 800394c <_vfiprintf_r+0x12c>
 8003914:	06d1      	lsls	r1, r2, #27
 8003916:	bf44      	itt	mi
 8003918:	2320      	movmi	r3, #32
 800391a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800391e:	0713      	lsls	r3, r2, #28
 8003920:	bf44      	itt	mi
 8003922:	232b      	movmi	r3, #43	; 0x2b
 8003924:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003928:	f89a 3000 	ldrb.w	r3, [sl]
 800392c:	2b2a      	cmp	r3, #42	; 0x2a
 800392e:	d015      	beq.n	800395c <_vfiprintf_r+0x13c>
 8003930:	9a07      	ldr	r2, [sp, #28]
 8003932:	4654      	mov	r4, sl
 8003934:	2000      	movs	r0, #0
 8003936:	f04f 0c0a 	mov.w	ip, #10
 800393a:	4621      	mov	r1, r4
 800393c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003940:	3b30      	subs	r3, #48	; 0x30
 8003942:	2b09      	cmp	r3, #9
 8003944:	d94e      	bls.n	80039e4 <_vfiprintf_r+0x1c4>
 8003946:	b1b0      	cbz	r0, 8003976 <_vfiprintf_r+0x156>
 8003948:	9207      	str	r2, [sp, #28]
 800394a:	e014      	b.n	8003976 <_vfiprintf_r+0x156>
 800394c:	eba0 0308 	sub.w	r3, r0, r8
 8003950:	fa09 f303 	lsl.w	r3, r9, r3
 8003954:	4313      	orrs	r3, r2
 8003956:	9304      	str	r3, [sp, #16]
 8003958:	46a2      	mov	sl, r4
 800395a:	e7d2      	b.n	8003902 <_vfiprintf_r+0xe2>
 800395c:	9b03      	ldr	r3, [sp, #12]
 800395e:	1d19      	adds	r1, r3, #4
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	9103      	str	r1, [sp, #12]
 8003964:	2b00      	cmp	r3, #0
 8003966:	bfbb      	ittet	lt
 8003968:	425b      	neglt	r3, r3
 800396a:	f042 0202 	orrlt.w	r2, r2, #2
 800396e:	9307      	strge	r3, [sp, #28]
 8003970:	9307      	strlt	r3, [sp, #28]
 8003972:	bfb8      	it	lt
 8003974:	9204      	strlt	r2, [sp, #16]
 8003976:	7823      	ldrb	r3, [r4, #0]
 8003978:	2b2e      	cmp	r3, #46	; 0x2e
 800397a:	d10c      	bne.n	8003996 <_vfiprintf_r+0x176>
 800397c:	7863      	ldrb	r3, [r4, #1]
 800397e:	2b2a      	cmp	r3, #42	; 0x2a
 8003980:	d135      	bne.n	80039ee <_vfiprintf_r+0x1ce>
 8003982:	9b03      	ldr	r3, [sp, #12]
 8003984:	1d1a      	adds	r2, r3, #4
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	9203      	str	r2, [sp, #12]
 800398a:	2b00      	cmp	r3, #0
 800398c:	bfb8      	it	lt
 800398e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003992:	3402      	adds	r4, #2
 8003994:	9305      	str	r3, [sp, #20]
 8003996:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003a7c <_vfiprintf_r+0x25c>
 800399a:	7821      	ldrb	r1, [r4, #0]
 800399c:	2203      	movs	r2, #3
 800399e:	4650      	mov	r0, sl
 80039a0:	f7fc fc16 	bl	80001d0 <memchr>
 80039a4:	b140      	cbz	r0, 80039b8 <_vfiprintf_r+0x198>
 80039a6:	2340      	movs	r3, #64	; 0x40
 80039a8:	eba0 000a 	sub.w	r0, r0, sl
 80039ac:	fa03 f000 	lsl.w	r0, r3, r0
 80039b0:	9b04      	ldr	r3, [sp, #16]
 80039b2:	4303      	orrs	r3, r0
 80039b4:	3401      	adds	r4, #1
 80039b6:	9304      	str	r3, [sp, #16]
 80039b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039bc:	482c      	ldr	r0, [pc, #176]	; (8003a70 <_vfiprintf_r+0x250>)
 80039be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80039c2:	2206      	movs	r2, #6
 80039c4:	f7fc fc04 	bl	80001d0 <memchr>
 80039c8:	2800      	cmp	r0, #0
 80039ca:	d03f      	beq.n	8003a4c <_vfiprintf_r+0x22c>
 80039cc:	4b29      	ldr	r3, [pc, #164]	; (8003a74 <_vfiprintf_r+0x254>)
 80039ce:	bb1b      	cbnz	r3, 8003a18 <_vfiprintf_r+0x1f8>
 80039d0:	9b03      	ldr	r3, [sp, #12]
 80039d2:	3307      	adds	r3, #7
 80039d4:	f023 0307 	bic.w	r3, r3, #7
 80039d8:	3308      	adds	r3, #8
 80039da:	9303      	str	r3, [sp, #12]
 80039dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039de:	443b      	add	r3, r7
 80039e0:	9309      	str	r3, [sp, #36]	; 0x24
 80039e2:	e767      	b.n	80038b4 <_vfiprintf_r+0x94>
 80039e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80039e8:	460c      	mov	r4, r1
 80039ea:	2001      	movs	r0, #1
 80039ec:	e7a5      	b.n	800393a <_vfiprintf_r+0x11a>
 80039ee:	2300      	movs	r3, #0
 80039f0:	3401      	adds	r4, #1
 80039f2:	9305      	str	r3, [sp, #20]
 80039f4:	4619      	mov	r1, r3
 80039f6:	f04f 0c0a 	mov.w	ip, #10
 80039fa:	4620      	mov	r0, r4
 80039fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a00:	3a30      	subs	r2, #48	; 0x30
 8003a02:	2a09      	cmp	r2, #9
 8003a04:	d903      	bls.n	8003a0e <_vfiprintf_r+0x1ee>
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d0c5      	beq.n	8003996 <_vfiprintf_r+0x176>
 8003a0a:	9105      	str	r1, [sp, #20]
 8003a0c:	e7c3      	b.n	8003996 <_vfiprintf_r+0x176>
 8003a0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a12:	4604      	mov	r4, r0
 8003a14:	2301      	movs	r3, #1
 8003a16:	e7f0      	b.n	80039fa <_vfiprintf_r+0x1da>
 8003a18:	ab03      	add	r3, sp, #12
 8003a1a:	9300      	str	r3, [sp, #0]
 8003a1c:	462a      	mov	r2, r5
 8003a1e:	4b16      	ldr	r3, [pc, #88]	; (8003a78 <_vfiprintf_r+0x258>)
 8003a20:	a904      	add	r1, sp, #16
 8003a22:	4630      	mov	r0, r6
 8003a24:	f3af 8000 	nop.w
 8003a28:	4607      	mov	r7, r0
 8003a2a:	1c78      	adds	r0, r7, #1
 8003a2c:	d1d6      	bne.n	80039dc <_vfiprintf_r+0x1bc>
 8003a2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003a30:	07d9      	lsls	r1, r3, #31
 8003a32:	d405      	bmi.n	8003a40 <_vfiprintf_r+0x220>
 8003a34:	89ab      	ldrh	r3, [r5, #12]
 8003a36:	059a      	lsls	r2, r3, #22
 8003a38:	d402      	bmi.n	8003a40 <_vfiprintf_r+0x220>
 8003a3a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003a3c:	f7ff fe6b 	bl	8003716 <__retarget_lock_release_recursive>
 8003a40:	89ab      	ldrh	r3, [r5, #12]
 8003a42:	065b      	lsls	r3, r3, #25
 8003a44:	f53f af12 	bmi.w	800386c <_vfiprintf_r+0x4c>
 8003a48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a4a:	e711      	b.n	8003870 <_vfiprintf_r+0x50>
 8003a4c:	ab03      	add	r3, sp, #12
 8003a4e:	9300      	str	r3, [sp, #0]
 8003a50:	462a      	mov	r2, r5
 8003a52:	4b09      	ldr	r3, [pc, #36]	; (8003a78 <_vfiprintf_r+0x258>)
 8003a54:	a904      	add	r1, sp, #16
 8003a56:	4630      	mov	r0, r6
 8003a58:	f000 f880 	bl	8003b5c <_printf_i>
 8003a5c:	e7e4      	b.n	8003a28 <_vfiprintf_r+0x208>
 8003a5e:	bf00      	nop
 8003a60:	0800446c 	.word	0x0800446c
 8003a64:	0800448c 	.word	0x0800448c
 8003a68:	0800444c 	.word	0x0800444c
 8003a6c:	080044ac 	.word	0x080044ac
 8003a70:	080044b6 	.word	0x080044b6
 8003a74:	00000000 	.word	0x00000000
 8003a78:	080037fb 	.word	0x080037fb
 8003a7c:	080044b2 	.word	0x080044b2

08003a80 <_printf_common>:
 8003a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a84:	4616      	mov	r6, r2
 8003a86:	4699      	mov	r9, r3
 8003a88:	688a      	ldr	r2, [r1, #8]
 8003a8a:	690b      	ldr	r3, [r1, #16]
 8003a8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003a90:	4293      	cmp	r3, r2
 8003a92:	bfb8      	it	lt
 8003a94:	4613      	movlt	r3, r2
 8003a96:	6033      	str	r3, [r6, #0]
 8003a98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003a9c:	4607      	mov	r7, r0
 8003a9e:	460c      	mov	r4, r1
 8003aa0:	b10a      	cbz	r2, 8003aa6 <_printf_common+0x26>
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	6033      	str	r3, [r6, #0]
 8003aa6:	6823      	ldr	r3, [r4, #0]
 8003aa8:	0699      	lsls	r1, r3, #26
 8003aaa:	bf42      	ittt	mi
 8003aac:	6833      	ldrmi	r3, [r6, #0]
 8003aae:	3302      	addmi	r3, #2
 8003ab0:	6033      	strmi	r3, [r6, #0]
 8003ab2:	6825      	ldr	r5, [r4, #0]
 8003ab4:	f015 0506 	ands.w	r5, r5, #6
 8003ab8:	d106      	bne.n	8003ac8 <_printf_common+0x48>
 8003aba:	f104 0a19 	add.w	sl, r4, #25
 8003abe:	68e3      	ldr	r3, [r4, #12]
 8003ac0:	6832      	ldr	r2, [r6, #0]
 8003ac2:	1a9b      	subs	r3, r3, r2
 8003ac4:	42ab      	cmp	r3, r5
 8003ac6:	dc26      	bgt.n	8003b16 <_printf_common+0x96>
 8003ac8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003acc:	1e13      	subs	r3, r2, #0
 8003ace:	6822      	ldr	r2, [r4, #0]
 8003ad0:	bf18      	it	ne
 8003ad2:	2301      	movne	r3, #1
 8003ad4:	0692      	lsls	r2, r2, #26
 8003ad6:	d42b      	bmi.n	8003b30 <_printf_common+0xb0>
 8003ad8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003adc:	4649      	mov	r1, r9
 8003ade:	4638      	mov	r0, r7
 8003ae0:	47c0      	blx	r8
 8003ae2:	3001      	adds	r0, #1
 8003ae4:	d01e      	beq.n	8003b24 <_printf_common+0xa4>
 8003ae6:	6823      	ldr	r3, [r4, #0]
 8003ae8:	68e5      	ldr	r5, [r4, #12]
 8003aea:	6832      	ldr	r2, [r6, #0]
 8003aec:	f003 0306 	and.w	r3, r3, #6
 8003af0:	2b04      	cmp	r3, #4
 8003af2:	bf08      	it	eq
 8003af4:	1aad      	subeq	r5, r5, r2
 8003af6:	68a3      	ldr	r3, [r4, #8]
 8003af8:	6922      	ldr	r2, [r4, #16]
 8003afa:	bf0c      	ite	eq
 8003afc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b00:	2500      	movne	r5, #0
 8003b02:	4293      	cmp	r3, r2
 8003b04:	bfc4      	itt	gt
 8003b06:	1a9b      	subgt	r3, r3, r2
 8003b08:	18ed      	addgt	r5, r5, r3
 8003b0a:	2600      	movs	r6, #0
 8003b0c:	341a      	adds	r4, #26
 8003b0e:	42b5      	cmp	r5, r6
 8003b10:	d11a      	bne.n	8003b48 <_printf_common+0xc8>
 8003b12:	2000      	movs	r0, #0
 8003b14:	e008      	b.n	8003b28 <_printf_common+0xa8>
 8003b16:	2301      	movs	r3, #1
 8003b18:	4652      	mov	r2, sl
 8003b1a:	4649      	mov	r1, r9
 8003b1c:	4638      	mov	r0, r7
 8003b1e:	47c0      	blx	r8
 8003b20:	3001      	adds	r0, #1
 8003b22:	d103      	bne.n	8003b2c <_printf_common+0xac>
 8003b24:	f04f 30ff 	mov.w	r0, #4294967295
 8003b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b2c:	3501      	adds	r5, #1
 8003b2e:	e7c6      	b.n	8003abe <_printf_common+0x3e>
 8003b30:	18e1      	adds	r1, r4, r3
 8003b32:	1c5a      	adds	r2, r3, #1
 8003b34:	2030      	movs	r0, #48	; 0x30
 8003b36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b3a:	4422      	add	r2, r4
 8003b3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b44:	3302      	adds	r3, #2
 8003b46:	e7c7      	b.n	8003ad8 <_printf_common+0x58>
 8003b48:	2301      	movs	r3, #1
 8003b4a:	4622      	mov	r2, r4
 8003b4c:	4649      	mov	r1, r9
 8003b4e:	4638      	mov	r0, r7
 8003b50:	47c0      	blx	r8
 8003b52:	3001      	adds	r0, #1
 8003b54:	d0e6      	beq.n	8003b24 <_printf_common+0xa4>
 8003b56:	3601      	adds	r6, #1
 8003b58:	e7d9      	b.n	8003b0e <_printf_common+0x8e>
	...

08003b5c <_printf_i>:
 8003b5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b60:	460c      	mov	r4, r1
 8003b62:	4691      	mov	r9, r2
 8003b64:	7e27      	ldrb	r7, [r4, #24]
 8003b66:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003b68:	2f78      	cmp	r7, #120	; 0x78
 8003b6a:	4680      	mov	r8, r0
 8003b6c:	469a      	mov	sl, r3
 8003b6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b72:	d807      	bhi.n	8003b84 <_printf_i+0x28>
 8003b74:	2f62      	cmp	r7, #98	; 0x62
 8003b76:	d80a      	bhi.n	8003b8e <_printf_i+0x32>
 8003b78:	2f00      	cmp	r7, #0
 8003b7a:	f000 80d8 	beq.w	8003d2e <_printf_i+0x1d2>
 8003b7e:	2f58      	cmp	r7, #88	; 0x58
 8003b80:	f000 80a3 	beq.w	8003cca <_printf_i+0x16e>
 8003b84:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003b88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003b8c:	e03a      	b.n	8003c04 <_printf_i+0xa8>
 8003b8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003b92:	2b15      	cmp	r3, #21
 8003b94:	d8f6      	bhi.n	8003b84 <_printf_i+0x28>
 8003b96:	a001      	add	r0, pc, #4	; (adr r0, 8003b9c <_printf_i+0x40>)
 8003b98:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003b9c:	08003bf5 	.word	0x08003bf5
 8003ba0:	08003c09 	.word	0x08003c09
 8003ba4:	08003b85 	.word	0x08003b85
 8003ba8:	08003b85 	.word	0x08003b85
 8003bac:	08003b85 	.word	0x08003b85
 8003bb0:	08003b85 	.word	0x08003b85
 8003bb4:	08003c09 	.word	0x08003c09
 8003bb8:	08003b85 	.word	0x08003b85
 8003bbc:	08003b85 	.word	0x08003b85
 8003bc0:	08003b85 	.word	0x08003b85
 8003bc4:	08003b85 	.word	0x08003b85
 8003bc8:	08003d15 	.word	0x08003d15
 8003bcc:	08003c39 	.word	0x08003c39
 8003bd0:	08003cf7 	.word	0x08003cf7
 8003bd4:	08003b85 	.word	0x08003b85
 8003bd8:	08003b85 	.word	0x08003b85
 8003bdc:	08003d37 	.word	0x08003d37
 8003be0:	08003b85 	.word	0x08003b85
 8003be4:	08003c39 	.word	0x08003c39
 8003be8:	08003b85 	.word	0x08003b85
 8003bec:	08003b85 	.word	0x08003b85
 8003bf0:	08003cff 	.word	0x08003cff
 8003bf4:	680b      	ldr	r3, [r1, #0]
 8003bf6:	1d1a      	adds	r2, r3, #4
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	600a      	str	r2, [r1, #0]
 8003bfc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003c00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c04:	2301      	movs	r3, #1
 8003c06:	e0a3      	b.n	8003d50 <_printf_i+0x1f4>
 8003c08:	6825      	ldr	r5, [r4, #0]
 8003c0a:	6808      	ldr	r0, [r1, #0]
 8003c0c:	062e      	lsls	r6, r5, #24
 8003c0e:	f100 0304 	add.w	r3, r0, #4
 8003c12:	d50a      	bpl.n	8003c2a <_printf_i+0xce>
 8003c14:	6805      	ldr	r5, [r0, #0]
 8003c16:	600b      	str	r3, [r1, #0]
 8003c18:	2d00      	cmp	r5, #0
 8003c1a:	da03      	bge.n	8003c24 <_printf_i+0xc8>
 8003c1c:	232d      	movs	r3, #45	; 0x2d
 8003c1e:	426d      	negs	r5, r5
 8003c20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c24:	485e      	ldr	r0, [pc, #376]	; (8003da0 <_printf_i+0x244>)
 8003c26:	230a      	movs	r3, #10
 8003c28:	e019      	b.n	8003c5e <_printf_i+0x102>
 8003c2a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003c2e:	6805      	ldr	r5, [r0, #0]
 8003c30:	600b      	str	r3, [r1, #0]
 8003c32:	bf18      	it	ne
 8003c34:	b22d      	sxthne	r5, r5
 8003c36:	e7ef      	b.n	8003c18 <_printf_i+0xbc>
 8003c38:	680b      	ldr	r3, [r1, #0]
 8003c3a:	6825      	ldr	r5, [r4, #0]
 8003c3c:	1d18      	adds	r0, r3, #4
 8003c3e:	6008      	str	r0, [r1, #0]
 8003c40:	0628      	lsls	r0, r5, #24
 8003c42:	d501      	bpl.n	8003c48 <_printf_i+0xec>
 8003c44:	681d      	ldr	r5, [r3, #0]
 8003c46:	e002      	b.n	8003c4e <_printf_i+0xf2>
 8003c48:	0669      	lsls	r1, r5, #25
 8003c4a:	d5fb      	bpl.n	8003c44 <_printf_i+0xe8>
 8003c4c:	881d      	ldrh	r5, [r3, #0]
 8003c4e:	4854      	ldr	r0, [pc, #336]	; (8003da0 <_printf_i+0x244>)
 8003c50:	2f6f      	cmp	r7, #111	; 0x6f
 8003c52:	bf0c      	ite	eq
 8003c54:	2308      	moveq	r3, #8
 8003c56:	230a      	movne	r3, #10
 8003c58:	2100      	movs	r1, #0
 8003c5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c5e:	6866      	ldr	r6, [r4, #4]
 8003c60:	60a6      	str	r6, [r4, #8]
 8003c62:	2e00      	cmp	r6, #0
 8003c64:	bfa2      	ittt	ge
 8003c66:	6821      	ldrge	r1, [r4, #0]
 8003c68:	f021 0104 	bicge.w	r1, r1, #4
 8003c6c:	6021      	strge	r1, [r4, #0]
 8003c6e:	b90d      	cbnz	r5, 8003c74 <_printf_i+0x118>
 8003c70:	2e00      	cmp	r6, #0
 8003c72:	d04d      	beq.n	8003d10 <_printf_i+0x1b4>
 8003c74:	4616      	mov	r6, r2
 8003c76:	fbb5 f1f3 	udiv	r1, r5, r3
 8003c7a:	fb03 5711 	mls	r7, r3, r1, r5
 8003c7e:	5dc7      	ldrb	r7, [r0, r7]
 8003c80:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003c84:	462f      	mov	r7, r5
 8003c86:	42bb      	cmp	r3, r7
 8003c88:	460d      	mov	r5, r1
 8003c8a:	d9f4      	bls.n	8003c76 <_printf_i+0x11a>
 8003c8c:	2b08      	cmp	r3, #8
 8003c8e:	d10b      	bne.n	8003ca8 <_printf_i+0x14c>
 8003c90:	6823      	ldr	r3, [r4, #0]
 8003c92:	07df      	lsls	r7, r3, #31
 8003c94:	d508      	bpl.n	8003ca8 <_printf_i+0x14c>
 8003c96:	6923      	ldr	r3, [r4, #16]
 8003c98:	6861      	ldr	r1, [r4, #4]
 8003c9a:	4299      	cmp	r1, r3
 8003c9c:	bfde      	ittt	le
 8003c9e:	2330      	movle	r3, #48	; 0x30
 8003ca0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003ca4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003ca8:	1b92      	subs	r2, r2, r6
 8003caa:	6122      	str	r2, [r4, #16]
 8003cac:	f8cd a000 	str.w	sl, [sp]
 8003cb0:	464b      	mov	r3, r9
 8003cb2:	aa03      	add	r2, sp, #12
 8003cb4:	4621      	mov	r1, r4
 8003cb6:	4640      	mov	r0, r8
 8003cb8:	f7ff fee2 	bl	8003a80 <_printf_common>
 8003cbc:	3001      	adds	r0, #1
 8003cbe:	d14c      	bne.n	8003d5a <_printf_i+0x1fe>
 8003cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8003cc4:	b004      	add	sp, #16
 8003cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cca:	4835      	ldr	r0, [pc, #212]	; (8003da0 <_printf_i+0x244>)
 8003ccc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003cd0:	6823      	ldr	r3, [r4, #0]
 8003cd2:	680e      	ldr	r6, [r1, #0]
 8003cd4:	061f      	lsls	r7, r3, #24
 8003cd6:	f856 5b04 	ldr.w	r5, [r6], #4
 8003cda:	600e      	str	r6, [r1, #0]
 8003cdc:	d514      	bpl.n	8003d08 <_printf_i+0x1ac>
 8003cde:	07d9      	lsls	r1, r3, #31
 8003ce0:	bf44      	itt	mi
 8003ce2:	f043 0320 	orrmi.w	r3, r3, #32
 8003ce6:	6023      	strmi	r3, [r4, #0]
 8003ce8:	b91d      	cbnz	r5, 8003cf2 <_printf_i+0x196>
 8003cea:	6823      	ldr	r3, [r4, #0]
 8003cec:	f023 0320 	bic.w	r3, r3, #32
 8003cf0:	6023      	str	r3, [r4, #0]
 8003cf2:	2310      	movs	r3, #16
 8003cf4:	e7b0      	b.n	8003c58 <_printf_i+0xfc>
 8003cf6:	6823      	ldr	r3, [r4, #0]
 8003cf8:	f043 0320 	orr.w	r3, r3, #32
 8003cfc:	6023      	str	r3, [r4, #0]
 8003cfe:	2378      	movs	r3, #120	; 0x78
 8003d00:	4828      	ldr	r0, [pc, #160]	; (8003da4 <_printf_i+0x248>)
 8003d02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003d06:	e7e3      	b.n	8003cd0 <_printf_i+0x174>
 8003d08:	065e      	lsls	r6, r3, #25
 8003d0a:	bf48      	it	mi
 8003d0c:	b2ad      	uxthmi	r5, r5
 8003d0e:	e7e6      	b.n	8003cde <_printf_i+0x182>
 8003d10:	4616      	mov	r6, r2
 8003d12:	e7bb      	b.n	8003c8c <_printf_i+0x130>
 8003d14:	680b      	ldr	r3, [r1, #0]
 8003d16:	6826      	ldr	r6, [r4, #0]
 8003d18:	6960      	ldr	r0, [r4, #20]
 8003d1a:	1d1d      	adds	r5, r3, #4
 8003d1c:	600d      	str	r5, [r1, #0]
 8003d1e:	0635      	lsls	r5, r6, #24
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	d501      	bpl.n	8003d28 <_printf_i+0x1cc>
 8003d24:	6018      	str	r0, [r3, #0]
 8003d26:	e002      	b.n	8003d2e <_printf_i+0x1d2>
 8003d28:	0671      	lsls	r1, r6, #25
 8003d2a:	d5fb      	bpl.n	8003d24 <_printf_i+0x1c8>
 8003d2c:	8018      	strh	r0, [r3, #0]
 8003d2e:	2300      	movs	r3, #0
 8003d30:	6123      	str	r3, [r4, #16]
 8003d32:	4616      	mov	r6, r2
 8003d34:	e7ba      	b.n	8003cac <_printf_i+0x150>
 8003d36:	680b      	ldr	r3, [r1, #0]
 8003d38:	1d1a      	adds	r2, r3, #4
 8003d3a:	600a      	str	r2, [r1, #0]
 8003d3c:	681e      	ldr	r6, [r3, #0]
 8003d3e:	6862      	ldr	r2, [r4, #4]
 8003d40:	2100      	movs	r1, #0
 8003d42:	4630      	mov	r0, r6
 8003d44:	f7fc fa44 	bl	80001d0 <memchr>
 8003d48:	b108      	cbz	r0, 8003d4e <_printf_i+0x1f2>
 8003d4a:	1b80      	subs	r0, r0, r6
 8003d4c:	6060      	str	r0, [r4, #4]
 8003d4e:	6863      	ldr	r3, [r4, #4]
 8003d50:	6123      	str	r3, [r4, #16]
 8003d52:	2300      	movs	r3, #0
 8003d54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d58:	e7a8      	b.n	8003cac <_printf_i+0x150>
 8003d5a:	6923      	ldr	r3, [r4, #16]
 8003d5c:	4632      	mov	r2, r6
 8003d5e:	4649      	mov	r1, r9
 8003d60:	4640      	mov	r0, r8
 8003d62:	47d0      	blx	sl
 8003d64:	3001      	adds	r0, #1
 8003d66:	d0ab      	beq.n	8003cc0 <_printf_i+0x164>
 8003d68:	6823      	ldr	r3, [r4, #0]
 8003d6a:	079b      	lsls	r3, r3, #30
 8003d6c:	d413      	bmi.n	8003d96 <_printf_i+0x23a>
 8003d6e:	68e0      	ldr	r0, [r4, #12]
 8003d70:	9b03      	ldr	r3, [sp, #12]
 8003d72:	4298      	cmp	r0, r3
 8003d74:	bfb8      	it	lt
 8003d76:	4618      	movlt	r0, r3
 8003d78:	e7a4      	b.n	8003cc4 <_printf_i+0x168>
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	4632      	mov	r2, r6
 8003d7e:	4649      	mov	r1, r9
 8003d80:	4640      	mov	r0, r8
 8003d82:	47d0      	blx	sl
 8003d84:	3001      	adds	r0, #1
 8003d86:	d09b      	beq.n	8003cc0 <_printf_i+0x164>
 8003d88:	3501      	adds	r5, #1
 8003d8a:	68e3      	ldr	r3, [r4, #12]
 8003d8c:	9903      	ldr	r1, [sp, #12]
 8003d8e:	1a5b      	subs	r3, r3, r1
 8003d90:	42ab      	cmp	r3, r5
 8003d92:	dcf2      	bgt.n	8003d7a <_printf_i+0x21e>
 8003d94:	e7eb      	b.n	8003d6e <_printf_i+0x212>
 8003d96:	2500      	movs	r5, #0
 8003d98:	f104 0619 	add.w	r6, r4, #25
 8003d9c:	e7f5      	b.n	8003d8a <_printf_i+0x22e>
 8003d9e:	bf00      	nop
 8003da0:	080044bd 	.word	0x080044bd
 8003da4:	080044ce 	.word	0x080044ce

08003da8 <_sbrk_r>:
 8003da8:	b538      	push	{r3, r4, r5, lr}
 8003daa:	4d06      	ldr	r5, [pc, #24]	; (8003dc4 <_sbrk_r+0x1c>)
 8003dac:	2300      	movs	r3, #0
 8003dae:	4604      	mov	r4, r0
 8003db0:	4608      	mov	r0, r1
 8003db2:	602b      	str	r3, [r5, #0]
 8003db4:	f7fc fe88 	bl	8000ac8 <_sbrk>
 8003db8:	1c43      	adds	r3, r0, #1
 8003dba:	d102      	bne.n	8003dc2 <_sbrk_r+0x1a>
 8003dbc:	682b      	ldr	r3, [r5, #0]
 8003dbe:	b103      	cbz	r3, 8003dc2 <_sbrk_r+0x1a>
 8003dc0:	6023      	str	r3, [r4, #0]
 8003dc2:	bd38      	pop	{r3, r4, r5, pc}
 8003dc4:	20000130 	.word	0x20000130

08003dc8 <__sread>:
 8003dc8:	b510      	push	{r4, lr}
 8003dca:	460c      	mov	r4, r1
 8003dcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dd0:	f000 fab4 	bl	800433c <_read_r>
 8003dd4:	2800      	cmp	r0, #0
 8003dd6:	bfab      	itete	ge
 8003dd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003dda:	89a3      	ldrhlt	r3, [r4, #12]
 8003ddc:	181b      	addge	r3, r3, r0
 8003dde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003de2:	bfac      	ite	ge
 8003de4:	6563      	strge	r3, [r4, #84]	; 0x54
 8003de6:	81a3      	strhlt	r3, [r4, #12]
 8003de8:	bd10      	pop	{r4, pc}

08003dea <__swrite>:
 8003dea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dee:	461f      	mov	r7, r3
 8003df0:	898b      	ldrh	r3, [r1, #12]
 8003df2:	05db      	lsls	r3, r3, #23
 8003df4:	4605      	mov	r5, r0
 8003df6:	460c      	mov	r4, r1
 8003df8:	4616      	mov	r6, r2
 8003dfa:	d505      	bpl.n	8003e08 <__swrite+0x1e>
 8003dfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e00:	2302      	movs	r3, #2
 8003e02:	2200      	movs	r2, #0
 8003e04:	f000 f9c8 	bl	8004198 <_lseek_r>
 8003e08:	89a3      	ldrh	r3, [r4, #12]
 8003e0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e12:	81a3      	strh	r3, [r4, #12]
 8003e14:	4632      	mov	r2, r6
 8003e16:	463b      	mov	r3, r7
 8003e18:	4628      	mov	r0, r5
 8003e1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e1e:	f000 b869 	b.w	8003ef4 <_write_r>

08003e22 <__sseek>:
 8003e22:	b510      	push	{r4, lr}
 8003e24:	460c      	mov	r4, r1
 8003e26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e2a:	f000 f9b5 	bl	8004198 <_lseek_r>
 8003e2e:	1c43      	adds	r3, r0, #1
 8003e30:	89a3      	ldrh	r3, [r4, #12]
 8003e32:	bf15      	itete	ne
 8003e34:	6560      	strne	r0, [r4, #84]	; 0x54
 8003e36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003e3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003e3e:	81a3      	strheq	r3, [r4, #12]
 8003e40:	bf18      	it	ne
 8003e42:	81a3      	strhne	r3, [r4, #12]
 8003e44:	bd10      	pop	{r4, pc}

08003e46 <__sclose>:
 8003e46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e4a:	f000 b8d3 	b.w	8003ff4 <_close_r>
	...

08003e50 <__swbuf_r>:
 8003e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e52:	460e      	mov	r6, r1
 8003e54:	4614      	mov	r4, r2
 8003e56:	4605      	mov	r5, r0
 8003e58:	b118      	cbz	r0, 8003e62 <__swbuf_r+0x12>
 8003e5a:	6983      	ldr	r3, [r0, #24]
 8003e5c:	b90b      	cbnz	r3, 8003e62 <__swbuf_r+0x12>
 8003e5e:	f7ff fbbb 	bl	80035d8 <__sinit>
 8003e62:	4b21      	ldr	r3, [pc, #132]	; (8003ee8 <__swbuf_r+0x98>)
 8003e64:	429c      	cmp	r4, r3
 8003e66:	d12b      	bne.n	8003ec0 <__swbuf_r+0x70>
 8003e68:	686c      	ldr	r4, [r5, #4]
 8003e6a:	69a3      	ldr	r3, [r4, #24]
 8003e6c:	60a3      	str	r3, [r4, #8]
 8003e6e:	89a3      	ldrh	r3, [r4, #12]
 8003e70:	071a      	lsls	r2, r3, #28
 8003e72:	d52f      	bpl.n	8003ed4 <__swbuf_r+0x84>
 8003e74:	6923      	ldr	r3, [r4, #16]
 8003e76:	b36b      	cbz	r3, 8003ed4 <__swbuf_r+0x84>
 8003e78:	6923      	ldr	r3, [r4, #16]
 8003e7a:	6820      	ldr	r0, [r4, #0]
 8003e7c:	1ac0      	subs	r0, r0, r3
 8003e7e:	6963      	ldr	r3, [r4, #20]
 8003e80:	b2f6      	uxtb	r6, r6
 8003e82:	4283      	cmp	r3, r0
 8003e84:	4637      	mov	r7, r6
 8003e86:	dc04      	bgt.n	8003e92 <__swbuf_r+0x42>
 8003e88:	4621      	mov	r1, r4
 8003e8a:	4628      	mov	r0, r5
 8003e8c:	f000 f948 	bl	8004120 <_fflush_r>
 8003e90:	bb30      	cbnz	r0, 8003ee0 <__swbuf_r+0x90>
 8003e92:	68a3      	ldr	r3, [r4, #8]
 8003e94:	3b01      	subs	r3, #1
 8003e96:	60a3      	str	r3, [r4, #8]
 8003e98:	6823      	ldr	r3, [r4, #0]
 8003e9a:	1c5a      	adds	r2, r3, #1
 8003e9c:	6022      	str	r2, [r4, #0]
 8003e9e:	701e      	strb	r6, [r3, #0]
 8003ea0:	6963      	ldr	r3, [r4, #20]
 8003ea2:	3001      	adds	r0, #1
 8003ea4:	4283      	cmp	r3, r0
 8003ea6:	d004      	beq.n	8003eb2 <__swbuf_r+0x62>
 8003ea8:	89a3      	ldrh	r3, [r4, #12]
 8003eaa:	07db      	lsls	r3, r3, #31
 8003eac:	d506      	bpl.n	8003ebc <__swbuf_r+0x6c>
 8003eae:	2e0a      	cmp	r6, #10
 8003eb0:	d104      	bne.n	8003ebc <__swbuf_r+0x6c>
 8003eb2:	4621      	mov	r1, r4
 8003eb4:	4628      	mov	r0, r5
 8003eb6:	f000 f933 	bl	8004120 <_fflush_r>
 8003eba:	b988      	cbnz	r0, 8003ee0 <__swbuf_r+0x90>
 8003ebc:	4638      	mov	r0, r7
 8003ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ec0:	4b0a      	ldr	r3, [pc, #40]	; (8003eec <__swbuf_r+0x9c>)
 8003ec2:	429c      	cmp	r4, r3
 8003ec4:	d101      	bne.n	8003eca <__swbuf_r+0x7a>
 8003ec6:	68ac      	ldr	r4, [r5, #8]
 8003ec8:	e7cf      	b.n	8003e6a <__swbuf_r+0x1a>
 8003eca:	4b09      	ldr	r3, [pc, #36]	; (8003ef0 <__swbuf_r+0xa0>)
 8003ecc:	429c      	cmp	r4, r3
 8003ece:	bf08      	it	eq
 8003ed0:	68ec      	ldreq	r4, [r5, #12]
 8003ed2:	e7ca      	b.n	8003e6a <__swbuf_r+0x1a>
 8003ed4:	4621      	mov	r1, r4
 8003ed6:	4628      	mov	r0, r5
 8003ed8:	f000 f81e 	bl	8003f18 <__swsetup_r>
 8003edc:	2800      	cmp	r0, #0
 8003ede:	d0cb      	beq.n	8003e78 <__swbuf_r+0x28>
 8003ee0:	f04f 37ff 	mov.w	r7, #4294967295
 8003ee4:	e7ea      	b.n	8003ebc <__swbuf_r+0x6c>
 8003ee6:	bf00      	nop
 8003ee8:	0800446c 	.word	0x0800446c
 8003eec:	0800448c 	.word	0x0800448c
 8003ef0:	0800444c 	.word	0x0800444c

08003ef4 <_write_r>:
 8003ef4:	b538      	push	{r3, r4, r5, lr}
 8003ef6:	4d07      	ldr	r5, [pc, #28]	; (8003f14 <_write_r+0x20>)
 8003ef8:	4604      	mov	r4, r0
 8003efa:	4608      	mov	r0, r1
 8003efc:	4611      	mov	r1, r2
 8003efe:	2200      	movs	r2, #0
 8003f00:	602a      	str	r2, [r5, #0]
 8003f02:	461a      	mov	r2, r3
 8003f04:	f7fc fc3e 	bl	8000784 <_write>
 8003f08:	1c43      	adds	r3, r0, #1
 8003f0a:	d102      	bne.n	8003f12 <_write_r+0x1e>
 8003f0c:	682b      	ldr	r3, [r5, #0]
 8003f0e:	b103      	cbz	r3, 8003f12 <_write_r+0x1e>
 8003f10:	6023      	str	r3, [r4, #0]
 8003f12:	bd38      	pop	{r3, r4, r5, pc}
 8003f14:	20000130 	.word	0x20000130

08003f18 <__swsetup_r>:
 8003f18:	4b32      	ldr	r3, [pc, #200]	; (8003fe4 <__swsetup_r+0xcc>)
 8003f1a:	b570      	push	{r4, r5, r6, lr}
 8003f1c:	681d      	ldr	r5, [r3, #0]
 8003f1e:	4606      	mov	r6, r0
 8003f20:	460c      	mov	r4, r1
 8003f22:	b125      	cbz	r5, 8003f2e <__swsetup_r+0x16>
 8003f24:	69ab      	ldr	r3, [r5, #24]
 8003f26:	b913      	cbnz	r3, 8003f2e <__swsetup_r+0x16>
 8003f28:	4628      	mov	r0, r5
 8003f2a:	f7ff fb55 	bl	80035d8 <__sinit>
 8003f2e:	4b2e      	ldr	r3, [pc, #184]	; (8003fe8 <__swsetup_r+0xd0>)
 8003f30:	429c      	cmp	r4, r3
 8003f32:	d10f      	bne.n	8003f54 <__swsetup_r+0x3c>
 8003f34:	686c      	ldr	r4, [r5, #4]
 8003f36:	89a3      	ldrh	r3, [r4, #12]
 8003f38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f3c:	0719      	lsls	r1, r3, #28
 8003f3e:	d42c      	bmi.n	8003f9a <__swsetup_r+0x82>
 8003f40:	06dd      	lsls	r5, r3, #27
 8003f42:	d411      	bmi.n	8003f68 <__swsetup_r+0x50>
 8003f44:	2309      	movs	r3, #9
 8003f46:	6033      	str	r3, [r6, #0]
 8003f48:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003f4c:	81a3      	strh	r3, [r4, #12]
 8003f4e:	f04f 30ff 	mov.w	r0, #4294967295
 8003f52:	e03e      	b.n	8003fd2 <__swsetup_r+0xba>
 8003f54:	4b25      	ldr	r3, [pc, #148]	; (8003fec <__swsetup_r+0xd4>)
 8003f56:	429c      	cmp	r4, r3
 8003f58:	d101      	bne.n	8003f5e <__swsetup_r+0x46>
 8003f5a:	68ac      	ldr	r4, [r5, #8]
 8003f5c:	e7eb      	b.n	8003f36 <__swsetup_r+0x1e>
 8003f5e:	4b24      	ldr	r3, [pc, #144]	; (8003ff0 <__swsetup_r+0xd8>)
 8003f60:	429c      	cmp	r4, r3
 8003f62:	bf08      	it	eq
 8003f64:	68ec      	ldreq	r4, [r5, #12]
 8003f66:	e7e6      	b.n	8003f36 <__swsetup_r+0x1e>
 8003f68:	0758      	lsls	r0, r3, #29
 8003f6a:	d512      	bpl.n	8003f92 <__swsetup_r+0x7a>
 8003f6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f6e:	b141      	cbz	r1, 8003f82 <__swsetup_r+0x6a>
 8003f70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f74:	4299      	cmp	r1, r3
 8003f76:	d002      	beq.n	8003f7e <__swsetup_r+0x66>
 8003f78:	4630      	mov	r0, r6
 8003f7a:	f000 f98f 	bl	800429c <_free_r>
 8003f7e:	2300      	movs	r3, #0
 8003f80:	6363      	str	r3, [r4, #52]	; 0x34
 8003f82:	89a3      	ldrh	r3, [r4, #12]
 8003f84:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003f88:	81a3      	strh	r3, [r4, #12]
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	6063      	str	r3, [r4, #4]
 8003f8e:	6923      	ldr	r3, [r4, #16]
 8003f90:	6023      	str	r3, [r4, #0]
 8003f92:	89a3      	ldrh	r3, [r4, #12]
 8003f94:	f043 0308 	orr.w	r3, r3, #8
 8003f98:	81a3      	strh	r3, [r4, #12]
 8003f9a:	6923      	ldr	r3, [r4, #16]
 8003f9c:	b94b      	cbnz	r3, 8003fb2 <__swsetup_r+0x9a>
 8003f9e:	89a3      	ldrh	r3, [r4, #12]
 8003fa0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fa8:	d003      	beq.n	8003fb2 <__swsetup_r+0x9a>
 8003faa:	4621      	mov	r1, r4
 8003fac:	4630      	mov	r0, r6
 8003fae:	f000 f929 	bl	8004204 <__smakebuf_r>
 8003fb2:	89a0      	ldrh	r0, [r4, #12]
 8003fb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003fb8:	f010 0301 	ands.w	r3, r0, #1
 8003fbc:	d00a      	beq.n	8003fd4 <__swsetup_r+0xbc>
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	60a3      	str	r3, [r4, #8]
 8003fc2:	6963      	ldr	r3, [r4, #20]
 8003fc4:	425b      	negs	r3, r3
 8003fc6:	61a3      	str	r3, [r4, #24]
 8003fc8:	6923      	ldr	r3, [r4, #16]
 8003fca:	b943      	cbnz	r3, 8003fde <__swsetup_r+0xc6>
 8003fcc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003fd0:	d1ba      	bne.n	8003f48 <__swsetup_r+0x30>
 8003fd2:	bd70      	pop	{r4, r5, r6, pc}
 8003fd4:	0781      	lsls	r1, r0, #30
 8003fd6:	bf58      	it	pl
 8003fd8:	6963      	ldrpl	r3, [r4, #20]
 8003fda:	60a3      	str	r3, [r4, #8]
 8003fdc:	e7f4      	b.n	8003fc8 <__swsetup_r+0xb0>
 8003fde:	2000      	movs	r0, #0
 8003fe0:	e7f7      	b.n	8003fd2 <__swsetup_r+0xba>
 8003fe2:	bf00      	nop
 8003fe4:	2000000c 	.word	0x2000000c
 8003fe8:	0800446c 	.word	0x0800446c
 8003fec:	0800448c 	.word	0x0800448c
 8003ff0:	0800444c 	.word	0x0800444c

08003ff4 <_close_r>:
 8003ff4:	b538      	push	{r3, r4, r5, lr}
 8003ff6:	4d06      	ldr	r5, [pc, #24]	; (8004010 <_close_r+0x1c>)
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	4604      	mov	r4, r0
 8003ffc:	4608      	mov	r0, r1
 8003ffe:	602b      	str	r3, [r5, #0]
 8004000:	f7fc fd2d 	bl	8000a5e <_close>
 8004004:	1c43      	adds	r3, r0, #1
 8004006:	d102      	bne.n	800400e <_close_r+0x1a>
 8004008:	682b      	ldr	r3, [r5, #0]
 800400a:	b103      	cbz	r3, 800400e <_close_r+0x1a>
 800400c:	6023      	str	r3, [r4, #0]
 800400e:	bd38      	pop	{r3, r4, r5, pc}
 8004010:	20000130 	.word	0x20000130

08004014 <__sflush_r>:
 8004014:	898a      	ldrh	r2, [r1, #12]
 8004016:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800401a:	4605      	mov	r5, r0
 800401c:	0710      	lsls	r0, r2, #28
 800401e:	460c      	mov	r4, r1
 8004020:	d458      	bmi.n	80040d4 <__sflush_r+0xc0>
 8004022:	684b      	ldr	r3, [r1, #4]
 8004024:	2b00      	cmp	r3, #0
 8004026:	dc05      	bgt.n	8004034 <__sflush_r+0x20>
 8004028:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800402a:	2b00      	cmp	r3, #0
 800402c:	dc02      	bgt.n	8004034 <__sflush_r+0x20>
 800402e:	2000      	movs	r0, #0
 8004030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004034:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004036:	2e00      	cmp	r6, #0
 8004038:	d0f9      	beq.n	800402e <__sflush_r+0x1a>
 800403a:	2300      	movs	r3, #0
 800403c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004040:	682f      	ldr	r7, [r5, #0]
 8004042:	602b      	str	r3, [r5, #0]
 8004044:	d032      	beq.n	80040ac <__sflush_r+0x98>
 8004046:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004048:	89a3      	ldrh	r3, [r4, #12]
 800404a:	075a      	lsls	r2, r3, #29
 800404c:	d505      	bpl.n	800405a <__sflush_r+0x46>
 800404e:	6863      	ldr	r3, [r4, #4]
 8004050:	1ac0      	subs	r0, r0, r3
 8004052:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004054:	b10b      	cbz	r3, 800405a <__sflush_r+0x46>
 8004056:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004058:	1ac0      	subs	r0, r0, r3
 800405a:	2300      	movs	r3, #0
 800405c:	4602      	mov	r2, r0
 800405e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004060:	6a21      	ldr	r1, [r4, #32]
 8004062:	4628      	mov	r0, r5
 8004064:	47b0      	blx	r6
 8004066:	1c43      	adds	r3, r0, #1
 8004068:	89a3      	ldrh	r3, [r4, #12]
 800406a:	d106      	bne.n	800407a <__sflush_r+0x66>
 800406c:	6829      	ldr	r1, [r5, #0]
 800406e:	291d      	cmp	r1, #29
 8004070:	d82c      	bhi.n	80040cc <__sflush_r+0xb8>
 8004072:	4a2a      	ldr	r2, [pc, #168]	; (800411c <__sflush_r+0x108>)
 8004074:	40ca      	lsrs	r2, r1
 8004076:	07d6      	lsls	r6, r2, #31
 8004078:	d528      	bpl.n	80040cc <__sflush_r+0xb8>
 800407a:	2200      	movs	r2, #0
 800407c:	6062      	str	r2, [r4, #4]
 800407e:	04d9      	lsls	r1, r3, #19
 8004080:	6922      	ldr	r2, [r4, #16]
 8004082:	6022      	str	r2, [r4, #0]
 8004084:	d504      	bpl.n	8004090 <__sflush_r+0x7c>
 8004086:	1c42      	adds	r2, r0, #1
 8004088:	d101      	bne.n	800408e <__sflush_r+0x7a>
 800408a:	682b      	ldr	r3, [r5, #0]
 800408c:	b903      	cbnz	r3, 8004090 <__sflush_r+0x7c>
 800408e:	6560      	str	r0, [r4, #84]	; 0x54
 8004090:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004092:	602f      	str	r7, [r5, #0]
 8004094:	2900      	cmp	r1, #0
 8004096:	d0ca      	beq.n	800402e <__sflush_r+0x1a>
 8004098:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800409c:	4299      	cmp	r1, r3
 800409e:	d002      	beq.n	80040a6 <__sflush_r+0x92>
 80040a0:	4628      	mov	r0, r5
 80040a2:	f000 f8fb 	bl	800429c <_free_r>
 80040a6:	2000      	movs	r0, #0
 80040a8:	6360      	str	r0, [r4, #52]	; 0x34
 80040aa:	e7c1      	b.n	8004030 <__sflush_r+0x1c>
 80040ac:	6a21      	ldr	r1, [r4, #32]
 80040ae:	2301      	movs	r3, #1
 80040b0:	4628      	mov	r0, r5
 80040b2:	47b0      	blx	r6
 80040b4:	1c41      	adds	r1, r0, #1
 80040b6:	d1c7      	bne.n	8004048 <__sflush_r+0x34>
 80040b8:	682b      	ldr	r3, [r5, #0]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d0c4      	beq.n	8004048 <__sflush_r+0x34>
 80040be:	2b1d      	cmp	r3, #29
 80040c0:	d001      	beq.n	80040c6 <__sflush_r+0xb2>
 80040c2:	2b16      	cmp	r3, #22
 80040c4:	d101      	bne.n	80040ca <__sflush_r+0xb6>
 80040c6:	602f      	str	r7, [r5, #0]
 80040c8:	e7b1      	b.n	800402e <__sflush_r+0x1a>
 80040ca:	89a3      	ldrh	r3, [r4, #12]
 80040cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040d0:	81a3      	strh	r3, [r4, #12]
 80040d2:	e7ad      	b.n	8004030 <__sflush_r+0x1c>
 80040d4:	690f      	ldr	r7, [r1, #16]
 80040d6:	2f00      	cmp	r7, #0
 80040d8:	d0a9      	beq.n	800402e <__sflush_r+0x1a>
 80040da:	0793      	lsls	r3, r2, #30
 80040dc:	680e      	ldr	r6, [r1, #0]
 80040de:	bf08      	it	eq
 80040e0:	694b      	ldreq	r3, [r1, #20]
 80040e2:	600f      	str	r7, [r1, #0]
 80040e4:	bf18      	it	ne
 80040e6:	2300      	movne	r3, #0
 80040e8:	eba6 0807 	sub.w	r8, r6, r7
 80040ec:	608b      	str	r3, [r1, #8]
 80040ee:	f1b8 0f00 	cmp.w	r8, #0
 80040f2:	dd9c      	ble.n	800402e <__sflush_r+0x1a>
 80040f4:	6a21      	ldr	r1, [r4, #32]
 80040f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80040f8:	4643      	mov	r3, r8
 80040fa:	463a      	mov	r2, r7
 80040fc:	4628      	mov	r0, r5
 80040fe:	47b0      	blx	r6
 8004100:	2800      	cmp	r0, #0
 8004102:	dc06      	bgt.n	8004112 <__sflush_r+0xfe>
 8004104:	89a3      	ldrh	r3, [r4, #12]
 8004106:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800410a:	81a3      	strh	r3, [r4, #12]
 800410c:	f04f 30ff 	mov.w	r0, #4294967295
 8004110:	e78e      	b.n	8004030 <__sflush_r+0x1c>
 8004112:	4407      	add	r7, r0
 8004114:	eba8 0800 	sub.w	r8, r8, r0
 8004118:	e7e9      	b.n	80040ee <__sflush_r+0xda>
 800411a:	bf00      	nop
 800411c:	20400001 	.word	0x20400001

08004120 <_fflush_r>:
 8004120:	b538      	push	{r3, r4, r5, lr}
 8004122:	690b      	ldr	r3, [r1, #16]
 8004124:	4605      	mov	r5, r0
 8004126:	460c      	mov	r4, r1
 8004128:	b913      	cbnz	r3, 8004130 <_fflush_r+0x10>
 800412a:	2500      	movs	r5, #0
 800412c:	4628      	mov	r0, r5
 800412e:	bd38      	pop	{r3, r4, r5, pc}
 8004130:	b118      	cbz	r0, 800413a <_fflush_r+0x1a>
 8004132:	6983      	ldr	r3, [r0, #24]
 8004134:	b90b      	cbnz	r3, 800413a <_fflush_r+0x1a>
 8004136:	f7ff fa4f 	bl	80035d8 <__sinit>
 800413a:	4b14      	ldr	r3, [pc, #80]	; (800418c <_fflush_r+0x6c>)
 800413c:	429c      	cmp	r4, r3
 800413e:	d11b      	bne.n	8004178 <_fflush_r+0x58>
 8004140:	686c      	ldr	r4, [r5, #4]
 8004142:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d0ef      	beq.n	800412a <_fflush_r+0xa>
 800414a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800414c:	07d0      	lsls	r0, r2, #31
 800414e:	d404      	bmi.n	800415a <_fflush_r+0x3a>
 8004150:	0599      	lsls	r1, r3, #22
 8004152:	d402      	bmi.n	800415a <_fflush_r+0x3a>
 8004154:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004156:	f7ff fadd 	bl	8003714 <__retarget_lock_acquire_recursive>
 800415a:	4628      	mov	r0, r5
 800415c:	4621      	mov	r1, r4
 800415e:	f7ff ff59 	bl	8004014 <__sflush_r>
 8004162:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004164:	07da      	lsls	r2, r3, #31
 8004166:	4605      	mov	r5, r0
 8004168:	d4e0      	bmi.n	800412c <_fflush_r+0xc>
 800416a:	89a3      	ldrh	r3, [r4, #12]
 800416c:	059b      	lsls	r3, r3, #22
 800416e:	d4dd      	bmi.n	800412c <_fflush_r+0xc>
 8004170:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004172:	f7ff fad0 	bl	8003716 <__retarget_lock_release_recursive>
 8004176:	e7d9      	b.n	800412c <_fflush_r+0xc>
 8004178:	4b05      	ldr	r3, [pc, #20]	; (8004190 <_fflush_r+0x70>)
 800417a:	429c      	cmp	r4, r3
 800417c:	d101      	bne.n	8004182 <_fflush_r+0x62>
 800417e:	68ac      	ldr	r4, [r5, #8]
 8004180:	e7df      	b.n	8004142 <_fflush_r+0x22>
 8004182:	4b04      	ldr	r3, [pc, #16]	; (8004194 <_fflush_r+0x74>)
 8004184:	429c      	cmp	r4, r3
 8004186:	bf08      	it	eq
 8004188:	68ec      	ldreq	r4, [r5, #12]
 800418a:	e7da      	b.n	8004142 <_fflush_r+0x22>
 800418c:	0800446c 	.word	0x0800446c
 8004190:	0800448c 	.word	0x0800448c
 8004194:	0800444c 	.word	0x0800444c

08004198 <_lseek_r>:
 8004198:	b538      	push	{r3, r4, r5, lr}
 800419a:	4d07      	ldr	r5, [pc, #28]	; (80041b8 <_lseek_r+0x20>)
 800419c:	4604      	mov	r4, r0
 800419e:	4608      	mov	r0, r1
 80041a0:	4611      	mov	r1, r2
 80041a2:	2200      	movs	r2, #0
 80041a4:	602a      	str	r2, [r5, #0]
 80041a6:	461a      	mov	r2, r3
 80041a8:	f7fc fc80 	bl	8000aac <_lseek>
 80041ac:	1c43      	adds	r3, r0, #1
 80041ae:	d102      	bne.n	80041b6 <_lseek_r+0x1e>
 80041b0:	682b      	ldr	r3, [r5, #0]
 80041b2:	b103      	cbz	r3, 80041b6 <_lseek_r+0x1e>
 80041b4:	6023      	str	r3, [r4, #0]
 80041b6:	bd38      	pop	{r3, r4, r5, pc}
 80041b8:	20000130 	.word	0x20000130

080041bc <__swhatbuf_r>:
 80041bc:	b570      	push	{r4, r5, r6, lr}
 80041be:	460e      	mov	r6, r1
 80041c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041c4:	2900      	cmp	r1, #0
 80041c6:	b096      	sub	sp, #88	; 0x58
 80041c8:	4614      	mov	r4, r2
 80041ca:	461d      	mov	r5, r3
 80041cc:	da07      	bge.n	80041de <__swhatbuf_r+0x22>
 80041ce:	2300      	movs	r3, #0
 80041d0:	602b      	str	r3, [r5, #0]
 80041d2:	89b3      	ldrh	r3, [r6, #12]
 80041d4:	061a      	lsls	r2, r3, #24
 80041d6:	d410      	bmi.n	80041fa <__swhatbuf_r+0x3e>
 80041d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041dc:	e00e      	b.n	80041fc <__swhatbuf_r+0x40>
 80041de:	466a      	mov	r2, sp
 80041e0:	f000 f8be 	bl	8004360 <_fstat_r>
 80041e4:	2800      	cmp	r0, #0
 80041e6:	dbf2      	blt.n	80041ce <__swhatbuf_r+0x12>
 80041e8:	9a01      	ldr	r2, [sp, #4]
 80041ea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80041ee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80041f2:	425a      	negs	r2, r3
 80041f4:	415a      	adcs	r2, r3
 80041f6:	602a      	str	r2, [r5, #0]
 80041f8:	e7ee      	b.n	80041d8 <__swhatbuf_r+0x1c>
 80041fa:	2340      	movs	r3, #64	; 0x40
 80041fc:	2000      	movs	r0, #0
 80041fe:	6023      	str	r3, [r4, #0]
 8004200:	b016      	add	sp, #88	; 0x58
 8004202:	bd70      	pop	{r4, r5, r6, pc}

08004204 <__smakebuf_r>:
 8004204:	898b      	ldrh	r3, [r1, #12]
 8004206:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004208:	079d      	lsls	r5, r3, #30
 800420a:	4606      	mov	r6, r0
 800420c:	460c      	mov	r4, r1
 800420e:	d507      	bpl.n	8004220 <__smakebuf_r+0x1c>
 8004210:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004214:	6023      	str	r3, [r4, #0]
 8004216:	6123      	str	r3, [r4, #16]
 8004218:	2301      	movs	r3, #1
 800421a:	6163      	str	r3, [r4, #20]
 800421c:	b002      	add	sp, #8
 800421e:	bd70      	pop	{r4, r5, r6, pc}
 8004220:	ab01      	add	r3, sp, #4
 8004222:	466a      	mov	r2, sp
 8004224:	f7ff ffca 	bl	80041bc <__swhatbuf_r>
 8004228:	9900      	ldr	r1, [sp, #0]
 800422a:	4605      	mov	r5, r0
 800422c:	4630      	mov	r0, r6
 800422e:	f7ff fa73 	bl	8003718 <_malloc_r>
 8004232:	b948      	cbnz	r0, 8004248 <__smakebuf_r+0x44>
 8004234:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004238:	059a      	lsls	r2, r3, #22
 800423a:	d4ef      	bmi.n	800421c <__smakebuf_r+0x18>
 800423c:	f023 0303 	bic.w	r3, r3, #3
 8004240:	f043 0302 	orr.w	r3, r3, #2
 8004244:	81a3      	strh	r3, [r4, #12]
 8004246:	e7e3      	b.n	8004210 <__smakebuf_r+0xc>
 8004248:	4b0d      	ldr	r3, [pc, #52]	; (8004280 <__smakebuf_r+0x7c>)
 800424a:	62b3      	str	r3, [r6, #40]	; 0x28
 800424c:	89a3      	ldrh	r3, [r4, #12]
 800424e:	6020      	str	r0, [r4, #0]
 8004250:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004254:	81a3      	strh	r3, [r4, #12]
 8004256:	9b00      	ldr	r3, [sp, #0]
 8004258:	6163      	str	r3, [r4, #20]
 800425a:	9b01      	ldr	r3, [sp, #4]
 800425c:	6120      	str	r0, [r4, #16]
 800425e:	b15b      	cbz	r3, 8004278 <__smakebuf_r+0x74>
 8004260:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004264:	4630      	mov	r0, r6
 8004266:	f000 f88d 	bl	8004384 <_isatty_r>
 800426a:	b128      	cbz	r0, 8004278 <__smakebuf_r+0x74>
 800426c:	89a3      	ldrh	r3, [r4, #12]
 800426e:	f023 0303 	bic.w	r3, r3, #3
 8004272:	f043 0301 	orr.w	r3, r3, #1
 8004276:	81a3      	strh	r3, [r4, #12]
 8004278:	89a0      	ldrh	r0, [r4, #12]
 800427a:	4305      	orrs	r5, r0
 800427c:	81a5      	strh	r5, [r4, #12]
 800427e:	e7cd      	b.n	800421c <__smakebuf_r+0x18>
 8004280:	08003571 	.word	0x08003571

08004284 <__malloc_lock>:
 8004284:	4801      	ldr	r0, [pc, #4]	; (800428c <__malloc_lock+0x8>)
 8004286:	f7ff ba45 	b.w	8003714 <__retarget_lock_acquire_recursive>
 800428a:	bf00      	nop
 800428c:	20000128 	.word	0x20000128

08004290 <__malloc_unlock>:
 8004290:	4801      	ldr	r0, [pc, #4]	; (8004298 <__malloc_unlock+0x8>)
 8004292:	f7ff ba40 	b.w	8003716 <__retarget_lock_release_recursive>
 8004296:	bf00      	nop
 8004298:	20000128 	.word	0x20000128

0800429c <_free_r>:
 800429c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800429e:	2900      	cmp	r1, #0
 80042a0:	d048      	beq.n	8004334 <_free_r+0x98>
 80042a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042a6:	9001      	str	r0, [sp, #4]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	f1a1 0404 	sub.w	r4, r1, #4
 80042ae:	bfb8      	it	lt
 80042b0:	18e4      	addlt	r4, r4, r3
 80042b2:	f7ff ffe7 	bl	8004284 <__malloc_lock>
 80042b6:	4a20      	ldr	r2, [pc, #128]	; (8004338 <_free_r+0x9c>)
 80042b8:	9801      	ldr	r0, [sp, #4]
 80042ba:	6813      	ldr	r3, [r2, #0]
 80042bc:	4615      	mov	r5, r2
 80042be:	b933      	cbnz	r3, 80042ce <_free_r+0x32>
 80042c0:	6063      	str	r3, [r4, #4]
 80042c2:	6014      	str	r4, [r2, #0]
 80042c4:	b003      	add	sp, #12
 80042c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80042ca:	f7ff bfe1 	b.w	8004290 <__malloc_unlock>
 80042ce:	42a3      	cmp	r3, r4
 80042d0:	d90b      	bls.n	80042ea <_free_r+0x4e>
 80042d2:	6821      	ldr	r1, [r4, #0]
 80042d4:	1862      	adds	r2, r4, r1
 80042d6:	4293      	cmp	r3, r2
 80042d8:	bf04      	itt	eq
 80042da:	681a      	ldreq	r2, [r3, #0]
 80042dc:	685b      	ldreq	r3, [r3, #4]
 80042de:	6063      	str	r3, [r4, #4]
 80042e0:	bf04      	itt	eq
 80042e2:	1852      	addeq	r2, r2, r1
 80042e4:	6022      	streq	r2, [r4, #0]
 80042e6:	602c      	str	r4, [r5, #0]
 80042e8:	e7ec      	b.n	80042c4 <_free_r+0x28>
 80042ea:	461a      	mov	r2, r3
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	b10b      	cbz	r3, 80042f4 <_free_r+0x58>
 80042f0:	42a3      	cmp	r3, r4
 80042f2:	d9fa      	bls.n	80042ea <_free_r+0x4e>
 80042f4:	6811      	ldr	r1, [r2, #0]
 80042f6:	1855      	adds	r5, r2, r1
 80042f8:	42a5      	cmp	r5, r4
 80042fa:	d10b      	bne.n	8004314 <_free_r+0x78>
 80042fc:	6824      	ldr	r4, [r4, #0]
 80042fe:	4421      	add	r1, r4
 8004300:	1854      	adds	r4, r2, r1
 8004302:	42a3      	cmp	r3, r4
 8004304:	6011      	str	r1, [r2, #0]
 8004306:	d1dd      	bne.n	80042c4 <_free_r+0x28>
 8004308:	681c      	ldr	r4, [r3, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	6053      	str	r3, [r2, #4]
 800430e:	4421      	add	r1, r4
 8004310:	6011      	str	r1, [r2, #0]
 8004312:	e7d7      	b.n	80042c4 <_free_r+0x28>
 8004314:	d902      	bls.n	800431c <_free_r+0x80>
 8004316:	230c      	movs	r3, #12
 8004318:	6003      	str	r3, [r0, #0]
 800431a:	e7d3      	b.n	80042c4 <_free_r+0x28>
 800431c:	6825      	ldr	r5, [r4, #0]
 800431e:	1961      	adds	r1, r4, r5
 8004320:	428b      	cmp	r3, r1
 8004322:	bf04      	itt	eq
 8004324:	6819      	ldreq	r1, [r3, #0]
 8004326:	685b      	ldreq	r3, [r3, #4]
 8004328:	6063      	str	r3, [r4, #4]
 800432a:	bf04      	itt	eq
 800432c:	1949      	addeq	r1, r1, r5
 800432e:	6021      	streq	r1, [r4, #0]
 8004330:	6054      	str	r4, [r2, #4]
 8004332:	e7c7      	b.n	80042c4 <_free_r+0x28>
 8004334:	b003      	add	sp, #12
 8004336:	bd30      	pop	{r4, r5, pc}
 8004338:	20000090 	.word	0x20000090

0800433c <_read_r>:
 800433c:	b538      	push	{r3, r4, r5, lr}
 800433e:	4d07      	ldr	r5, [pc, #28]	; (800435c <_read_r+0x20>)
 8004340:	4604      	mov	r4, r0
 8004342:	4608      	mov	r0, r1
 8004344:	4611      	mov	r1, r2
 8004346:	2200      	movs	r2, #0
 8004348:	602a      	str	r2, [r5, #0]
 800434a:	461a      	mov	r2, r3
 800434c:	f7fc fb6a 	bl	8000a24 <_read>
 8004350:	1c43      	adds	r3, r0, #1
 8004352:	d102      	bne.n	800435a <_read_r+0x1e>
 8004354:	682b      	ldr	r3, [r5, #0]
 8004356:	b103      	cbz	r3, 800435a <_read_r+0x1e>
 8004358:	6023      	str	r3, [r4, #0]
 800435a:	bd38      	pop	{r3, r4, r5, pc}
 800435c:	20000130 	.word	0x20000130

08004360 <_fstat_r>:
 8004360:	b538      	push	{r3, r4, r5, lr}
 8004362:	4d07      	ldr	r5, [pc, #28]	; (8004380 <_fstat_r+0x20>)
 8004364:	2300      	movs	r3, #0
 8004366:	4604      	mov	r4, r0
 8004368:	4608      	mov	r0, r1
 800436a:	4611      	mov	r1, r2
 800436c:	602b      	str	r3, [r5, #0]
 800436e:	f7fc fb82 	bl	8000a76 <_fstat>
 8004372:	1c43      	adds	r3, r0, #1
 8004374:	d102      	bne.n	800437c <_fstat_r+0x1c>
 8004376:	682b      	ldr	r3, [r5, #0]
 8004378:	b103      	cbz	r3, 800437c <_fstat_r+0x1c>
 800437a:	6023      	str	r3, [r4, #0]
 800437c:	bd38      	pop	{r3, r4, r5, pc}
 800437e:	bf00      	nop
 8004380:	20000130 	.word	0x20000130

08004384 <_isatty_r>:
 8004384:	b538      	push	{r3, r4, r5, lr}
 8004386:	4d06      	ldr	r5, [pc, #24]	; (80043a0 <_isatty_r+0x1c>)
 8004388:	2300      	movs	r3, #0
 800438a:	4604      	mov	r4, r0
 800438c:	4608      	mov	r0, r1
 800438e:	602b      	str	r3, [r5, #0]
 8004390:	f7fc fb81 	bl	8000a96 <_isatty>
 8004394:	1c43      	adds	r3, r0, #1
 8004396:	d102      	bne.n	800439e <_isatty_r+0x1a>
 8004398:	682b      	ldr	r3, [r5, #0]
 800439a:	b103      	cbz	r3, 800439e <_isatty_r+0x1a>
 800439c:	6023      	str	r3, [r4, #0]
 800439e:	bd38      	pop	{r3, r4, r5, pc}
 80043a0:	20000130 	.word	0x20000130

080043a4 <_init>:
 80043a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043a6:	bf00      	nop
 80043a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043aa:	bc08      	pop	{r3}
 80043ac:	469e      	mov	lr, r3
 80043ae:	4770      	bx	lr

080043b0 <_fini>:
 80043b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043b2:	bf00      	nop
 80043b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043b6:	bc08      	pop	{r3}
 80043b8:	469e      	mov	lr, r3
 80043ba:	4770      	bx	lr
