
1DOF_Bench.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e17c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a4  0800e310  0800e310  0001e310  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e9b4  0800e9b4  00020278  2**0
                  CONTENTS
  4 .ARM          00000008  0800e9b4  0800e9b4  0001e9b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e9bc  0800e9bc  00020278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e9bc  0800e9bc  0001e9bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e9c0  0800e9c0  0001e9c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000278  20000000  0800e9c4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f0  20000278  0800ec3c  00020278  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000568  0800ec3c  00020568  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bfb7  00000000  00000000  000202a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003315  00000000  00000000  0003c25f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001770  00000000  00000000  0003f578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001628  00000000  00000000  00040ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a6a2  00000000  00000000  00042310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b90c  00000000  00000000  0006c9b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010bb10  00000000  00000000  000882be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00193dce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c4c  00000000  00000000  00193e20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000278 	.word	0x20000278
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e2f4 	.word	0x0800e2f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000027c 	.word	0x2000027c
 80001cc:	0800e2f4 	.word	0x0800e2f4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t gaz_buffer[4];

int _write(int file, char *data, int len) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
	if ((file != STDOUT_FILENO) && (file != STDERR_FILENO)) {
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	2b01      	cmp	r3, #1
 8001008:	d00a      	beq.n	8001020 <_write+0x28>
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	2b02      	cmp	r3, #2
 800100e:	d007      	beq.n	8001020 <_write+0x28>
		errno = EBADF;
 8001010:	f008 fc42 	bl	8009898 <__errno>
 8001014:	4603      	mov	r3, r0
 8001016:	2209      	movs	r2, #9
 8001018:	601a      	str	r2, [r3, #0]
		return -1;
 800101a:	f04f 33ff 	mov.w	r3, #4294967295
 800101e:	e00f      	b.n	8001040 <_write+0x48>
	}

	// arbitrary timeout 1000
	HAL_StatusTypeDef status = HAL_UART_Transmit(&huart2, (uint8_t*) data, len,
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	b29a      	uxth	r2, r3
 8001024:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001028:	68b9      	ldr	r1, [r7, #8]
 800102a:	4807      	ldr	r0, [pc, #28]	; (8001048 <_write+0x50>)
 800102c:	f006 ff64 	bl	8007ef8 <HAL_UART_Transmit>
 8001030:	4603      	mov	r3, r0
 8001032:	75fb      	strb	r3, [r7, #23]
			1000);

	// return # of bytes written - as best we can tell
	return (status == HAL_OK ? len : 0);
 8001034:	7dfb      	ldrb	r3, [r7, #23]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d101      	bne.n	800103e <_write+0x46>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	e000      	b.n	8001040 <_write+0x48>
 800103e:	2300      	movs	r3, #0
}
 8001040:	4618      	mov	r0, r3
 8001042:	3718      	adds	r7, #24
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	200003d8 	.word	0x200003d8

0800104c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800104c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800104e:	b0a1      	sub	sp, #132	; 0x84
 8001050:	af16      	add	r7, sp, #88	; 0x58
	/* USER CODE BEGIN 1 */

	enum states etat;
	etat = init_uc;
 8001052:	2300      	movs	r3, #0
 8001054:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	// char gaz_data[4];
	//	int counter=4;
	double true_angle;
	//char buffer [size];

	int k = 1700;	//var used to increement speed in auto state
 8001058:	f240 63a4 	movw	r3, #1700	; 0x6a4
 800105c:	617b      	str	r3, [r7, #20]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800105e:	f001 fbbf 	bl	80027e0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001062:	f000 fa4f 	bl	8001504 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001066:	f000 fc2b 	bl	80018c0 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 800106a:	f000 fbcb 	bl	8001804 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 800106e:	f000 fa9b 	bl	80015a8 <MX_ADC1_Init>
	MX_DMA_Init();
 8001072:	f000 fbf7 	bl	8001864 <MX_DMA_Init>
	MX_TIM3_Init();
 8001076:	f000 fb4d 	bl	8001714 <MX_TIM3_Init>
	MX_I2C1_Init();
 800107a:	f000 fb0b 	bl	8001694 <MX_I2C1_Init>
	//blinkGreenLed(10, 100);
	// Welcome message on UART

	//sendWelcomeMsgRS232(&huart2);
	//la fonction au dessus pose des soucis
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800107e:	2104      	movs	r1, #4
 8001080:	48b3      	ldr	r0, [pc, #716]	; (8001350 <main+0x304>)
 8001082:	f005 fddf 	bl	8006c44 <HAL_TIM_PWM_Start>
	//NOus mettons ici la valeur minimale pour emettre un signal vers notre ESC dans notre registre capture and compare register

	//TIM3->CCR2 = valeur_min_moteur;
	//y_print(&huart2, " 0 to 6 to change state \r\n", 26);
	//printf("0 to 6 to change state \r\n");
	HAL_Delay(3000);
 8001086:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800108a:	f001 fc25 	bl	80028d8 <HAL_Delay>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		__HAL_UART_CLEAR_OREFLAG(&huart2);
 800108e:	4bb1      	ldr	r3, [pc, #708]	; (8001354 <main+0x308>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	2208      	movs	r2, #8
 8001094:	621a      	str	r2, [r3, #32]

		//differents etats qu'on peut avoir

		//---------changement d'etat-------

		switch (etat) {
 8001096:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800109a:	2b06      	cmp	r3, #6
 800109c:	f200 8219 	bhi.w	80014d2 <main+0x486>
 80010a0:	a201      	add	r2, pc, #4	; (adr r2, 80010a8 <main+0x5c>)
 80010a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010a6:	bf00      	nop
 80010a8:	080010c5 	.word	0x080010c5
 80010ac:	08001175 	.word	0x08001175
 80010b0:	080011b9 	.word	0x080011b9
 80010b4:	08001423 	.word	0x08001423
 80010b8:	08001247 	.word	0x08001247
 80010bc:	08001131 	.word	0x08001131
 80010c0:	080014b7 	.word	0x080014b7
		case init_uc:
			//traitement des sorties
			/*if (HAL_UART_Transmit(&huart2, (uint8_t*) "UC Initialization \n\r", 22,
			 100) != HAL_OK)
			 Error_Handler();*/
			printf("Init State\r\n");
 80010c4:	48a4      	ldr	r0, [pc, #656]	; (8001358 <main+0x30c>)
 80010c6:	f009 fb27 	bl	800a718 <puts>
			printf("Press 2 for info mode\r\n");
 80010ca:	48a4      	ldr	r0, [pc, #656]	; (800135c <main+0x310>)
 80010cc:	f009 fb24 	bl	800a718 <puts>
			//printf("nucleo ready\r\n");
			//gyro init
			MPU6050_Read_All(&hi2c1, &mpu);
 80010d0:	49a3      	ldr	r1, [pc, #652]	; (8001360 <main+0x314>)
 80010d2:	48a4      	ldr	r0, [pc, #656]	; (8001364 <main+0x318>)
 80010d4:	f000 fc60 	bl	8001998 <MPU6050_Read_All>
			HAL_Delay(1000);
 80010d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010dc:	f001 fbfc 	bl	80028d8 <HAL_Delay>
			//traitement des entrées (transitions)
			do {

				if (HAL_UART_Receive(&huart2, (uint8_t*) r_buffer, 2, 10)
 80010e0:	1d39      	adds	r1, r7, #4
 80010e2:	230a      	movs	r3, #10
 80010e4:	2202      	movs	r2, #2
 80010e6:	489b      	ldr	r0, [pc, #620]	; (8001354 <main+0x308>)
 80010e8:	f006 ff9a 	bl	8008020 <HAL_UART_Receive>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d10b      	bne.n	800110a <main+0xbe>
						== HAL_OK) {
					HAL_Delay(50);
 80010f2:	2032      	movs	r0, #50	; 0x32
 80010f4:	f001 fbf0 	bl	80028d8 <HAL_Delay>
					HAL_UART_Transmit(&huart2, (uint8_t*) r_buffer, 2, 10);
 80010f8:	1d39      	adds	r1, r7, #4
 80010fa:	230a      	movs	r3, #10
 80010fc:	2202      	movs	r2, #2
 80010fe:	4895      	ldr	r0, [pc, #596]	; (8001354 <main+0x308>)
 8001100:	f006 fefa 	bl	8007ef8 <HAL_UART_Transmit>
					HAL_Delay(50);
 8001104:	2032      	movs	r0, #50	; 0x32
 8001106:	f001 fbe7 	bl	80028d8 <HAL_Delay>
				}

			} while ((r_buffer[0] != '1') && (r_buffer[0] != '2')); //|| (r_buffer[0] != '2')
 800110a:	793b      	ldrb	r3, [r7, #4]
 800110c:	2b31      	cmp	r3, #49	; 0x31
 800110e:	d002      	beq.n	8001116 <main+0xca>
 8001110:	793b      	ldrb	r3, [r7, #4]
 8001112:	2b32      	cmp	r3, #50	; 0x32
 8001114:	d1e4      	bne.n	80010e0 <main+0x94>
			if (r_buffer[0] == '2')
 8001116:	793b      	ldrb	r3, [r7, #4]
 8001118:	2b32      	cmp	r3, #50	; 0x32
 800111a:	d103      	bne.n	8001124 <main+0xd8>
				etat = info_mode;
 800111c:	2305      	movs	r3, #5
 800111e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001122:	e002      	b.n	800112a <main+0xde>
			else
				etat = init_motor;
 8001124:	2301      	movs	r3, #1
 8001126:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			r_buffer[0] = ' ';
 800112a:	2320      	movs	r3, #32
 800112c:	713b      	strb	r3, [r7, #4]
			break;
 800112e:	e1d1      	b.n	80014d4 <main+0x488>

		case info_mode:
			//if (HAL_UART_Transmit(&huart2, (uint8_t*) "Info mode\n\r", 12, 100)
			//	!= HAL_OK)
			//Error_Handler();
			printf("Info mode\r\n");
 8001130:	488d      	ldr	r0, [pc, #564]	; (8001368 <main+0x31c>)
 8001132:	f009 faf1 	bl	800a718 <puts>
			printf("Firmware version %.2f \n\r", firmware_version);
 8001136:	4b8d      	ldr	r3, [pc, #564]	; (800136c <main+0x320>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff fa04 	bl	8000548 <__aeabi_f2d>
 8001140:	4602      	mov	r2, r0
 8001142:	460b      	mov	r3, r1
 8001144:	488a      	ldr	r0, [pc, #552]	; (8001370 <main+0x324>)
 8001146:	f009 fa61 	bl	800a60c <iprintf>
			//HAL_Delay(3000);
			printf("1 Init Motor \n\r");
 800114a:	488a      	ldr	r0, [pc, #552]	; (8001374 <main+0x328>)
 800114c:	f009 fa5e 	bl	800a60c <iprintf>
			printf("2 Info Mode \n\r");
 8001150:	4889      	ldr	r0, [pc, #548]	; (8001378 <main+0x32c>)
 8001152:	f009 fa5b 	bl	800a60c <iprintf>
			printf("3 Init Pot \n\r");
 8001156:	4889      	ldr	r0, [pc, #548]	; (800137c <main+0x330>)
 8001158:	f009 fa58 	bl	800a60c <iprintf>
			printf("4 Auto Mode \n\r");
 800115c:	4888      	ldr	r0, [pc, #544]	; (8001380 <main+0x334>)
 800115e:	f009 fa55 	bl	800a60c <iprintf>
			printf("5 Manual Mode \n\r");
 8001162:	4888      	ldr	r0, [pc, #544]	; (8001384 <main+0x338>)
 8001164:	f009 fa52 	bl	800a60c <iprintf>
			 HAL_Delay(50);
			 }

			 } while (r_buffer[0] != '0');*/

			etat = init_uc;
 8001168:	2300      	movs	r3, #0
 800116a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			// Reinitialisation du buffer
			r_buffer[0] = 0;
 800116e:	2300      	movs	r3, #0
 8001170:	713b      	strb	r3, [r7, #4]
			//printf("%f");
			//le programme freeze dans l'etat info
			break;
 8001172:	e1af      	b.n	80014d4 <main+0x488>

		case init_motor:
			/*if (HAL_UART_Transmit(&huart2,
			 (uint8_t*) "Motor Initialization \r\n", 24, 100) != HAL_OK)
			 Error_Handler();*/
			printf("Motor Initialization \n\r");
 8001174:	4884      	ldr	r0, [pc, #528]	; (8001388 <main+0x33c>)
 8001176:	f009 fa49 	bl	800a60c <iprintf>
			HAL_Delay(1000);
 800117a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800117e:	f001 fbab 	bl	80028d8 <HAL_Delay>
			//Chargement de la pwm
			//HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
			load_pwm(htim3, valeur_min_moteur);
 8001182:	4b82      	ldr	r3, [pc, #520]	; (800138c <main+0x340>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4e72      	ldr	r6, [pc, #456]	; (8001350 <main+0x304>)
 8001188:	930f      	str	r3, [sp, #60]	; 0x3c
 800118a:	466d      	mov	r5, sp
 800118c:	f106 0410 	add.w	r4, r6, #16
 8001190:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001192:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001194:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001196:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001198:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800119a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800119c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80011a0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80011a4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80011a8:	f001 fae0 	bl	800276c <load_pwm>
			r_buffer[0] = ' ';
 80011ac:	2320      	movs	r3, #32
 80011ae:	713b      	strb	r3, [r7, #4]
			etat = motor_ready;
 80011b0:	2302      	movs	r3, #2
 80011b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			break;
 80011b6:	e18d      	b.n	80014d4 <main+0x488>
		case motor_ready:
			/*	if (HAL_UART_Transmit(&huart2, (uint8_t*) "Motor ready \n\r", 15,
			 100) != HAL_OK)
			 Error_Handler();
			 HAL_Delay(3000);*/
			k = 1700;
 80011b8:	f240 63a4 	movw	r3, #1700	; 0x6a4
 80011bc:	617b      	str	r3, [r7, #20]
			load_pwm(htim3, valeur_min_moteur);
 80011be:	4b73      	ldr	r3, [pc, #460]	; (800138c <main+0x340>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4e63      	ldr	r6, [pc, #396]	; (8001350 <main+0x304>)
 80011c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80011c6:	466d      	mov	r5, sp
 80011c8:	f106 0410 	add.w	r4, r6, #16
 80011cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011d8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80011dc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80011e0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80011e4:	f001 fac2 	bl	800276c <load_pwm>
			printf("Motor ready \n\r");
 80011e8:	4869      	ldr	r0, [pc, #420]	; (8001390 <main+0x344>)
 80011ea:	f009 fa0f 	bl	800a60c <iprintf>
			HAL_Delay(1000);
 80011ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011f2:	f001 fb71 	bl	80028d8 <HAL_Delay>

			do {

				if (HAL_UART_Receive(&huart2, (uint8_t*) r_buffer, 2, 10)
 80011f6:	1d39      	adds	r1, r7, #4
 80011f8:	230a      	movs	r3, #10
 80011fa:	2202      	movs	r2, #2
 80011fc:	4855      	ldr	r0, [pc, #340]	; (8001354 <main+0x308>)
 80011fe:	f006 ff0f 	bl	8008020 <HAL_UART_Receive>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d10b      	bne.n	8001220 <main+0x1d4>
						== HAL_OK) {
					HAL_Delay(50);
 8001208:	2032      	movs	r0, #50	; 0x32
 800120a:	f001 fb65 	bl	80028d8 <HAL_Delay>
					HAL_UART_Transmit(&huart2, (uint8_t*) r_buffer, 2, 10);
 800120e:	1d39      	adds	r1, r7, #4
 8001210:	230a      	movs	r3, #10
 8001212:	2202      	movs	r2, #2
 8001214:	484f      	ldr	r0, [pc, #316]	; (8001354 <main+0x308>)
 8001216:	f006 fe6f 	bl	8007ef8 <HAL_UART_Transmit>
					HAL_Delay(50);
 800121a:	2032      	movs	r0, #50	; 0x32
 800121c:	f001 fb5c 	bl	80028d8 <HAL_Delay>
				}

			} while ((r_buffer[0] != '3') && (r_buffer[0] != '4')); //|| (r_buffer[0] != '2')
 8001220:	793b      	ldrb	r3, [r7, #4]
 8001222:	2b33      	cmp	r3, #51	; 0x33
 8001224:	d002      	beq.n	800122c <main+0x1e0>
 8001226:	793b      	ldrb	r3, [r7, #4]
 8001228:	2b34      	cmp	r3, #52	; 0x34
 800122a:	d1e4      	bne.n	80011f6 <main+0x1aa>
			if (r_buffer[0] == '3')
 800122c:	793b      	ldrb	r3, [r7, #4]
 800122e:	2b33      	cmp	r3, #51	; 0x33
 8001230:	d103      	bne.n	800123a <main+0x1ee>
				etat = init_pot;
 8001232:	2306      	movs	r3, #6
 8001234:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001238:	e002      	b.n	8001240 <main+0x1f4>
			else
				etat = auto_mode;
 800123a:	2304      	movs	r3, #4
 800123c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			r_buffer[0] = ' ';
 8001240:	2320      	movs	r3, #32
 8001242:	713b      	strb	r3, [r7, #4]

			break;
 8001244:	e146      	b.n	80014d4 <main+0x488>
			//if (HAL_UART_Transmit(&huart2, (uint8_t*) "Auto mode \n\r", 15, 100)
			//	!= HAL_OK)
			//Error_Handler();
			//HAL_Delay(3000);

			printf("Auto mode \n\r");
 8001246:	4853      	ldr	r0, [pc, #332]	; (8001394 <main+0x348>)
 8001248:	f009 f9e0 	bl	800a60c <iprintf>

			do {

				if (HAL_UART_Receive(&huart2, (uint8_t*) r_buffer, 2, 10)
 800124c:	1d39      	adds	r1, r7, #4
 800124e:	230a      	movs	r3, #10
 8001250:	2202      	movs	r2, #2
 8001252:	4840      	ldr	r0, [pc, #256]	; (8001354 <main+0x308>)
 8001254:	f006 fee4 	bl	8008020 <HAL_UART_Receive>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d102      	bne.n	8001264 <main+0x218>
						== HAL_OK)
					HAL_Delay(10);
 800125e:	200a      	movs	r0, #10
 8001260:	f001 fb3a 	bl	80028d8 <HAL_Delay>
				//HAL_UART_Transmit(&huart2, (uint8_t*) r_buffer, 2, 10);
				//HAL_Delay(50);

			} while (r_buffer[0] != '6' && r_buffer[0] != 'g');
 8001264:	793b      	ldrb	r3, [r7, #4]
 8001266:	2b36      	cmp	r3, #54	; 0x36
 8001268:	d002      	beq.n	8001270 <main+0x224>
 800126a:	793b      	ldrb	r3, [r7, #4]
 800126c:	2b67      	cmp	r3, #103	; 0x67
 800126e:	d1ed      	bne.n	800124c <main+0x200>

			//quand on envoie le caratère g on se retrouve dans la phase de gaz sur le clavier
			//si 6 on retourne au mode ready

			if (r_buffer[0] == '6') {
 8001270:	793b      	ldrb	r3, [r7, #4]
 8001272:	2b36      	cmp	r3, #54	; 0x36
 8001274:	d105      	bne.n	8001282 <main+0x236>
				etat = motor_ready;
 8001276:	2302      	movs	r3, #2
 8001278:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				r_buffer[0] = ' ';
 800127c:	2320      	movs	r3, #32
 800127e:	713b      	strb	r3, [r7, #4]
				break;
 8001280:	e128      	b.n	80014d4 <main+0x488>

				//Soucis avec la recuperation deplusieurs caracteres sur la console, rien ne s'affiche
				//printf("vroum sur le clavier \n\r");

				//pseudo asservisssement à 45deg
				MPU6050_Read_All(&hi2c1, &mpu);
 8001282:	4937      	ldr	r1, [pc, #220]	; (8001360 <main+0x314>)
 8001284:	4837      	ldr	r0, [pc, #220]	; (8001364 <main+0x318>)
 8001286:	f000 fb87 	bl	8001998 <MPU6050_Read_All>
				load_pwm(htim3, k);
 800128a:	4e31      	ldr	r6, [pc, #196]	; (8001350 <main+0x304>)
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	930f      	str	r3, [sp, #60]	; 0x3c
 8001290:	466d      	mov	r5, sp
 8001292:	f106 0410 	add.w	r4, r6, #16
 8001296:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001298:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800129a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800129c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800129e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012a2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80012a6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80012aa:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80012ae:	f001 fa5d 	bl	800276c <load_pwm>
				true_angle = 90 - mpu.KalmanAngleX;
 80012b2:	4b2b      	ldr	r3, [pc, #172]	; (8001360 <main+0x314>)
 80012b4:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80012b8:	f04f 0000 	mov.w	r0, #0
 80012bc:	4936      	ldr	r1, [pc, #216]	; (8001398 <main+0x34c>)
 80012be:	f7fe ffe3 	bl	8000288 <__aeabi_dsub>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	e9c7 2306 	strd	r2, r3, [r7, #24]
				printf("beforeangle %.2f \n\r", true_angle);
 80012ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80012ce:	4833      	ldr	r0, [pc, #204]	; (800139c <main+0x350>)
 80012d0:	f009 f99c 	bl	800a60c <iprintf>
				HAL_Delay(50);
 80012d4:	2032      	movs	r0, #50	; 0x32
 80012d6:	f001 faff 	bl	80028d8 <HAL_Delay>

				while (true_angle < 45.00) {
 80012da:	e02e      	b.n	800133a <main+0x2ee>
					HAL_Delay(40);
 80012dc:	2028      	movs	r0, #40	; 0x28
 80012de:	f001 fafb 	bl	80028d8 <HAL_Delay>
					MPU6050_Read_All(&hi2c1, &mpu);
 80012e2:	491f      	ldr	r1, [pc, #124]	; (8001360 <main+0x314>)
 80012e4:	481f      	ldr	r0, [pc, #124]	; (8001364 <main+0x318>)
 80012e6:	f000 fb57 	bl	8001998 <MPU6050_Read_All>
					true_angle = 90 - mpu.KalmanAngleX;
 80012ea:	4b1d      	ldr	r3, [pc, #116]	; (8001360 <main+0x314>)
 80012ec:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80012f0:	f04f 0000 	mov.w	r0, #0
 80012f4:	4928      	ldr	r1, [pc, #160]	; (8001398 <main+0x34c>)
 80012f6:	f7fe ffc7 	bl	8000288 <__aeabi_dsub>
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	e9c7 2306 	strd	r2, r3, [r7, #24]
					printf("angle %.2f \n\r", true_angle);
 8001302:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001306:	4826      	ldr	r0, [pc, #152]	; (80013a0 <main+0x354>)
 8001308:	f009 f980 	bl	800a60c <iprintf>
					load_pwm(htim3, k);
 800130c:	4e10      	ldr	r6, [pc, #64]	; (8001350 <main+0x304>)
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	930f      	str	r3, [sp, #60]	; 0x3c
 8001312:	466d      	mov	r5, sp
 8001314:	f106 0410 	add.w	r4, r6, #16
 8001318:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800131a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800131c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800131e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001320:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001322:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001324:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001328:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800132c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001330:	f001 fa1c 	bl	800276c <load_pwm>
					k++;
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	3301      	adds	r3, #1
 8001338:	617b      	str	r3, [r7, #20]
				while (true_angle < 45.00) {
 800133a:	f04f 0200 	mov.w	r2, #0
 800133e:	4b19      	ldr	r3, [pc, #100]	; (80013a4 <main+0x358>)
 8001340:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001344:	f7ff fbca 	bl	8000adc <__aeabi_dcmplt>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d1c6      	bne.n	80012dc <main+0x290>
				};
				while (true_angle > 48.00) {
 800134e:	e05a      	b.n	8001406 <main+0x3ba>
 8001350:	2000038c 	.word	0x2000038c
 8001354:	200003d8 	.word	0x200003d8
 8001358:	0800e310 	.word	0x0800e310
 800135c:	0800e31c 	.word	0x0800e31c
 8001360:	200004f0 	.word	0x200004f0
 8001364:	20000340 	.word	0x20000340
 8001368:	0800e334 	.word	0x0800e334
 800136c:	20000094 	.word	0x20000094
 8001370:	0800e340 	.word	0x0800e340
 8001374:	0800e35c 	.word	0x0800e35c
 8001378:	0800e36c 	.word	0x0800e36c
 800137c:	0800e37c 	.word	0x0800e37c
 8001380:	0800e38c 	.word	0x0800e38c
 8001384:	0800e39c 	.word	0x0800e39c
 8001388:	0800e3b0 	.word	0x0800e3b0
 800138c:	20000098 	.word	0x20000098
 8001390:	0800e3c8 	.word	0x0800e3c8
 8001394:	0800e3d8 	.word	0x0800e3d8
 8001398:	40568000 	.word	0x40568000
 800139c:	0800e3e8 	.word	0x0800e3e8
 80013a0:	0800e3fc 	.word	0x0800e3fc
 80013a4:	40468000 	.word	0x40468000
					HAL_Delay(40);
 80013a8:	2028      	movs	r0, #40	; 0x28
 80013aa:	f001 fa95 	bl	80028d8 <HAL_Delay>
					true_angle = 90 - mpu.KalmanAngleX;
 80013ae:	4b4a      	ldr	r3, [pc, #296]	; (80014d8 <main+0x48c>)
 80013b0:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80013b4:	f04f 0000 	mov.w	r0, #0
 80013b8:	4948      	ldr	r1, [pc, #288]	; (80014dc <main+0x490>)
 80013ba:	f7fe ff65 	bl	8000288 <__aeabi_dsub>
 80013be:	4602      	mov	r2, r0
 80013c0:	460b      	mov	r3, r1
 80013c2:	e9c7 2306 	strd	r2, r3, [r7, #24]
					MPU6050_Read_All(&hi2c1, &mpu);
 80013c6:	4944      	ldr	r1, [pc, #272]	; (80014d8 <main+0x48c>)
 80013c8:	4845      	ldr	r0, [pc, #276]	; (80014e0 <main+0x494>)
 80013ca:	f000 fae5 	bl	8001998 <MPU6050_Read_All>
					printf("angle %.2f \n\r", true_angle);
 80013ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013d2:	4844      	ldr	r0, [pc, #272]	; (80014e4 <main+0x498>)
 80013d4:	f009 f91a 	bl	800a60c <iprintf>
					load_pwm(htim3, k);
 80013d8:	4e43      	ldr	r6, [pc, #268]	; (80014e8 <main+0x49c>)
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80013de:	466d      	mov	r5, sp
 80013e0:	f106 0410 	add.w	r4, r6, #16
 80013e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013f0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80013f4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80013f8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80013fc:	f001 f9b6 	bl	800276c <load_pwm>
					k--;
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	3b01      	subs	r3, #1
 8001404:	617b      	str	r3, [r7, #20]
				while (true_angle > 48.00) {
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	4b38      	ldr	r3, [pc, #224]	; (80014ec <main+0x4a0>)
 800140c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001410:	f7ff fb82 	bl	8000b18 <__aeabi_dcmpgt>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d1c6      	bne.n	80013a8 <main+0x35c>
				};

				//r_buffer[0] = ' ';
				etat = auto_mode;
 800141a:	2304      	movs	r3, #4
 800141c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

				break;
 8001420:	e058      	b.n	80014d4 <main+0x488>
			}

		case manual_mode:

			if (HAL_UART_Transmit(&huart2, (uint8_t*) "Manual mode \n\r", 15,
 8001422:	2364      	movs	r3, #100	; 0x64
 8001424:	220f      	movs	r2, #15
 8001426:	4932      	ldr	r1, [pc, #200]	; (80014f0 <main+0x4a4>)
 8001428:	4832      	ldr	r0, [pc, #200]	; (80014f4 <main+0x4a8>)
 800142a:	f006 fd65 	bl	8007ef8 <HAL_UART_Transmit>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <main+0x3ec>
					100) != HAL_OK)
				Error_Handler();
 8001434:	f000 faaa 	bl	800198c <Error_Handler>
			//
			//recuperation de la pwm

			do {

				if (HAL_UART_Receive(&huart2, (uint8_t*) r_buffer, 2, 1)
 8001438:	1d39      	adds	r1, r7, #4
 800143a:	2301      	movs	r3, #1
 800143c:	2202      	movs	r2, #2
 800143e:	482d      	ldr	r0, [pc, #180]	; (80014f4 <main+0x4a8>)
 8001440:	f006 fdee 	bl	8008020 <HAL_UART_Receive>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d102      	bne.n	8001450 <main+0x404>
						== HAL_OK)
					HAL_Delay(10);
 800144a:	200a      	movs	r0, #10
 800144c:	f001 fa44 	bl	80028d8 <HAL_Delay>
				//HAL_UART_Transmit(&huart2, (uint8_t*) r_buffer, 2, 10);
				//HAL_Delay(50);
				valeur_can = load_adc(hadc1, 5);
 8001450:	4c29      	ldr	r4, [pc, #164]	; (80014f8 <main+0x4ac>)
 8001452:	2305      	movs	r3, #5
 8001454:	9315      	str	r3, [sp, #84]	; 0x54
 8001456:	4668      	mov	r0, sp
 8001458:	f104 0310 	add.w	r3, r4, #16
 800145c:	2254      	movs	r2, #84	; 0x54
 800145e:	4619      	mov	r1, r3
 8001460:	f008 fa44 	bl	80098ec <memcpy>
 8001464:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001468:	f001 f938 	bl	80026dc <load_adc>
 800146c:	60f8      	str	r0, [r7, #12]
				mapped_value = mapping_adc_value(valeur_can);
 800146e:	68f8      	ldr	r0, [r7, #12]
 8001470:	f001 f950 	bl	8002714 <mapping_adc_value>
 8001474:	60b8      	str	r0, [r7, #8]
				HAL_Delay(100);
 8001476:	2064      	movs	r0, #100	; 0x64
 8001478:	f001 fa2e 	bl	80028d8 <HAL_Delay>
				load_pwm(htim3, mapped_value);
 800147c:	4e1a      	ldr	r6, [pc, #104]	; (80014e8 <main+0x49c>)
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	930f      	str	r3, [sp, #60]	; 0x3c
 8001482:	466d      	mov	r5, sp
 8001484:	f106 0410 	add.w	r4, r6, #16
 8001488:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800148a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800148c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800148e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001490:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001492:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001494:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001498:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800149c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80014a0:	f001 f964 	bl	800276c <load_pwm>

			} while (r_buffer[0] != '6');
 80014a4:	793b      	ldrb	r3, [r7, #4]
 80014a6:	2b36      	cmp	r3, #54	; 0x36
 80014a8:	d1c6      	bne.n	8001438 <main+0x3ec>

			etat = motor_ready;
 80014aa:	2302      	movs	r3, #2
 80014ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			r_buffer[0] = ' ';
 80014b0:	2320      	movs	r3, #32
 80014b2:	713b      	strb	r3, [r7, #4]
			break;
 80014b4:	e00e      	b.n	80014d4 <main+0x488>

		case init_pot:
			//if (HAL_UART_Transmit(&huart2, (uint8_t*) "Auto mode \n\r", 15, 100)
			//	!= HAL_OK)
			//Error_Handler();
			okay = 1;
 80014b6:	2301      	movs	r3, #1
 80014b8:	613b      	str	r3, [r7, #16]
			//val = load_adc(hadc1, 5);
			//load_pwm(htim3, val);
			printf("mettez le potentiometre à zero \n\r");
 80014ba:	4810      	ldr	r0, [pc, #64]	; (80014fc <main+0x4b0>)
 80014bc:	f009 f8a6 	bl	800a60c <iprintf>
					//printf("o %d \n \r", okay);

				}

			}*/
			printf("succes \n\r");
 80014c0:	480f      	ldr	r0, [pc, #60]	; (8001500 <main+0x4b4>)
 80014c2:	f009 f8a3 	bl	800a60c <iprintf>
			etat = manual_mode;
 80014c6:	2303      	movs	r3, #3
 80014c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			r_buffer[0] = ' ';
 80014cc:	2320      	movs	r3, #32
 80014ce:	713b      	strb	r3, [r7, #4]

			break;
 80014d0:	e000      	b.n	80014d4 <main+0x488>

		default:
			break;
 80014d2:	bf00      	nop
		__HAL_UART_CLEAR_OREFLAG(&huart2);
 80014d4:	e5db      	b.n	800108e <main+0x42>
 80014d6:	bf00      	nop
 80014d8:	200004f0 	.word	0x200004f0
 80014dc:	40568000 	.word	0x40568000
 80014e0:	20000340 	.word	0x20000340
 80014e4:	0800e3fc 	.word	0x0800e3fc
 80014e8:	2000038c 	.word	0x2000038c
 80014ec:	40480000 	.word	0x40480000
 80014f0:	0800e40c 	.word	0x0800e40c
 80014f4:	200003d8 	.word	0x200003d8
 80014f8:	20000294 	.word	0x20000294
 80014fc:	0800e41c 	.word	0x0800e41c
 8001500:	0800e440 	.word	0x0800e440

08001504 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001504:	b580      	push	{r7, lr}
 8001506:	b096      	sub	sp, #88	; 0x58
 8001508:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800150a:	f107 0314 	add.w	r3, r7, #20
 800150e:	2244      	movs	r2, #68	; 0x44
 8001510:	2100      	movs	r1, #0
 8001512:	4618      	mov	r0, r3
 8001514:	f008 f9f8 	bl	8009908 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001518:	463b      	mov	r3, r7
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	605a      	str	r2, [r3, #4]
 8001520:	609a      	str	r2, [r3, #8]
 8001522:	60da      	str	r2, [r3, #12]
 8001524:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8001526:	f44f 7000 	mov.w	r0, #512	; 0x200
 800152a:	f003 ffd3 	bl	80054d4 <HAL_PWREx_ControlVoltageScaling>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 8001534:	f000 fa2a 	bl	800198c <Error_Handler>
	}
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001538:	2302      	movs	r3, #2
 800153a:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800153c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001540:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001542:	2310      	movs	r3, #16
 8001544:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001546:	2302      	movs	r3, #2
 8001548:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800154a:	2302      	movs	r3, #2
 800154c:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 800154e:	2301      	movs	r3, #1
 8001550:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 8001552:	230a      	movs	r3, #10
 8001554:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001556:	2307      	movs	r3, #7
 8001558:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800155a:	2302      	movs	r3, #2
 800155c:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800155e:	2302      	movs	r3, #2
 8001560:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001562:	f107 0314 	add.w	r3, r7, #20
 8001566:	4618      	mov	r0, r3
 8001568:	f004 f80a 	bl	8005580 <HAL_RCC_OscConfig>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <SystemClock_Config+0x72>
		Error_Handler();
 8001572:	f000 fa0b 	bl	800198c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001576:	230f      	movs	r3, #15
 8001578:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800157a:	2303      	movs	r3, #3
 800157c:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800157e:	2300      	movs	r3, #0
 8001580:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001582:	2300      	movs	r3, #0
 8001584:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001586:	2300      	movs	r3, #0
 8001588:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 800158a:	463b      	mov	r3, r7
 800158c:	2104      	movs	r1, #4
 800158e:	4618      	mov	r0, r3
 8001590:	f004 fbde 	bl	8005d50 <HAL_RCC_ClockConfig>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <SystemClock_Config+0x9a>
		Error_Handler();
 800159a:	f000 f9f7 	bl	800198c <Error_Handler>
	}
}
 800159e:	bf00      	nop
 80015a0:	3758      	adds	r7, #88	; 0x58
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
	...

080015a8 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08a      	sub	sp, #40	; 0x28
 80015ac:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 80015ae:	f107 031c 	add.w	r3, r7, #28
 80015b2:	2200      	movs	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	605a      	str	r2, [r3, #4]
 80015b8:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 80015ba:	1d3b      	adds	r3, r7, #4
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
 80015c6:	611a      	str	r2, [r3, #16]
 80015c8:	615a      	str	r2, [r3, #20]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 80015ca:	4b2f      	ldr	r3, [pc, #188]	; (8001688 <MX_ADC1_Init+0xe0>)
 80015cc:	4a2f      	ldr	r2, [pc, #188]	; (800168c <MX_ADC1_Init+0xe4>)
 80015ce:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80015d0:	4b2d      	ldr	r3, [pc, #180]	; (8001688 <MX_ADC1_Init+0xe0>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015d6:	4b2c      	ldr	r3, [pc, #176]	; (8001688 <MX_ADC1_Init+0xe0>)
 80015d8:	2200      	movs	r2, #0
 80015da:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015dc:	4b2a      	ldr	r3, [pc, #168]	; (8001688 <MX_ADC1_Init+0xe0>)
 80015de:	2200      	movs	r2, #0
 80015e0:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80015e2:	4b29      	ldr	r3, [pc, #164]	; (8001688 <MX_ADC1_Init+0xe0>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015e8:	4b27      	ldr	r3, [pc, #156]	; (8001688 <MX_ADC1_Init+0xe0>)
 80015ea:	2204      	movs	r2, #4
 80015ec:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 80015ee:	4b26      	ldr	r3, [pc, #152]	; (8001688 <MX_ADC1_Init+0xe0>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80015f4:	4b24      	ldr	r3, [pc, #144]	; (8001688 <MX_ADC1_Init+0xe0>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 80015fa:	4b23      	ldr	r3, [pc, #140]	; (8001688 <MX_ADC1_Init+0xe0>)
 80015fc:	2201      	movs	r2, #1
 80015fe:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001600:	4b21      	ldr	r3, [pc, #132]	; (8001688 <MX_ADC1_Init+0xe0>)
 8001602:	2200      	movs	r2, #0
 8001604:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001608:	4b1f      	ldr	r3, [pc, #124]	; (8001688 <MX_ADC1_Init+0xe0>)
 800160a:	2200      	movs	r2, #0
 800160c:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800160e:	4b1e      	ldr	r3, [pc, #120]	; (8001688 <MX_ADC1_Init+0xe0>)
 8001610:	2200      	movs	r2, #0
 8001612:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001614:	4b1c      	ldr	r3, [pc, #112]	; (8001688 <MX_ADC1_Init+0xe0>)
 8001616:	2200      	movs	r2, #0
 8001618:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800161c:	4b1a      	ldr	r3, [pc, #104]	; (8001688 <MX_ADC1_Init+0xe0>)
 800161e:	2200      	movs	r2, #0
 8001620:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 8001622:	4b19      	ldr	r3, [pc, #100]	; (8001688 <MX_ADC1_Init+0xe0>)
 8001624:	2200      	movs	r2, #0
 8001626:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800162a:	4817      	ldr	r0, [pc, #92]	; (8001688 <MX_ADC1_Init+0xe0>)
 800162c:	f001 fb6e 	bl	8002d0c <HAL_ADC_Init>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_ADC1_Init+0x92>
		Error_Handler();
 8001636:	f000 f9a9 	bl	800198c <Error_Handler>
	}
	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 800163a:	2300      	movs	r3, #0
 800163c:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 800163e:	f107 031c 	add.w	r3, r7, #28
 8001642:	4619      	mov	r1, r3
 8001644:	4810      	ldr	r0, [pc, #64]	; (8001688 <MX_ADC1_Init+0xe0>)
 8001646:	f002 fd39 	bl	80040bc <HAL_ADCEx_MultiModeConfigChannel>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_ADC1_Init+0xac>
		Error_Handler();
 8001650:	f000 f99c 	bl	800198c <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 8001654:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <MX_ADC1_Init+0xe8>)
 8001656:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001658:	2306      	movs	r3, #6
 800165a:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800165c:	2300      	movs	r3, #0
 800165e:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001660:	237f      	movs	r3, #127	; 0x7f
 8001662:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001664:	2304      	movs	r3, #4
 8001666:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8001668:	2300      	movs	r3, #0
 800166a:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800166c:	1d3b      	adds	r3, r7, #4
 800166e:	4619      	mov	r1, r3
 8001670:	4805      	ldr	r0, [pc, #20]	; (8001688 <MX_ADC1_Init+0xe0>)
 8001672:	f002 f879 	bl	8003768 <HAL_ADC_ConfigChannel>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_ADC1_Init+0xd8>
		Error_Handler();
 800167c:	f000 f986 	bl	800198c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001680:	bf00      	nop
 8001682:	3728      	adds	r7, #40	; 0x28
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20000294 	.word	0x20000294
 800168c:	50040000 	.word	0x50040000
 8001690:	14f00020 	.word	0x14f00020

08001694 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001698:	4b1b      	ldr	r3, [pc, #108]	; (8001708 <MX_I2C1_Init+0x74>)
 800169a:	4a1c      	ldr	r2, [pc, #112]	; (800170c <MX_I2C1_Init+0x78>)
 800169c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x10909CEC;
 800169e:	4b1a      	ldr	r3, [pc, #104]	; (8001708 <MX_I2C1_Init+0x74>)
 80016a0:	4a1b      	ldr	r2, [pc, #108]	; (8001710 <MX_I2C1_Init+0x7c>)
 80016a2:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 80016a4:	4b18      	ldr	r3, [pc, #96]	; (8001708 <MX_I2C1_Init+0x74>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016aa:	4b17      	ldr	r3, [pc, #92]	; (8001708 <MX_I2C1_Init+0x74>)
 80016ac:	2201      	movs	r2, #1
 80016ae:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016b0:	4b15      	ldr	r3, [pc, #84]	; (8001708 <MX_I2C1_Init+0x74>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80016b6:	4b14      	ldr	r3, [pc, #80]	; (8001708 <MX_I2C1_Init+0x74>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016bc:	4b12      	ldr	r3, [pc, #72]	; (8001708 <MX_I2C1_Init+0x74>)
 80016be:	2200      	movs	r2, #0
 80016c0:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016c2:	4b11      	ldr	r3, [pc, #68]	; (8001708 <MX_I2C1_Init+0x74>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016c8:	4b0f      	ldr	r3, [pc, #60]	; (8001708 <MX_I2C1_Init+0x74>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80016ce:	480e      	ldr	r0, [pc, #56]	; (8001708 <MX_I2C1_Init+0x74>)
 80016d0:	f003 fa5e 	bl	8004b90 <HAL_I2C_Init>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_I2C1_Init+0x4a>
		Error_Handler();
 80016da:	f000 f957 	bl	800198c <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 80016de:	2100      	movs	r1, #0
 80016e0:	4809      	ldr	r0, [pc, #36]	; (8001708 <MX_I2C1_Init+0x74>)
 80016e2:	f003 fe51 	bl	8005388 <HAL_I2CEx_ConfigAnalogFilter>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 80016ec:	f000 f94e 	bl	800198c <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 80016f0:	2100      	movs	r1, #0
 80016f2:	4805      	ldr	r0, [pc, #20]	; (8001708 <MX_I2C1_Init+0x74>)
 80016f4:	f003 fe93 	bl	800541e <HAL_I2CEx_ConfigDigitalFilter>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_I2C1_Init+0x6e>
		Error_Handler();
 80016fe:	f000 f945 	bl	800198c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000340 	.word	0x20000340
 800170c:	40005400 	.word	0x40005400
 8001710:	10909cec 	.word	0x10909cec

08001714 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001714:	b580      	push	{r7, lr}
 8001716:	b08e      	sub	sp, #56	; 0x38
 8001718:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800171a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	605a      	str	r2, [r3, #4]
 8001724:	609a      	str	r2, [r3, #8]
 8001726:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001728:	f107 031c 	add.w	r3, r7, #28
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001734:	463b      	mov	r3, r7
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	605a      	str	r2, [r3, #4]
 800173c:	609a      	str	r2, [r3, #8]
 800173e:	60da      	str	r2, [r3, #12]
 8001740:	611a      	str	r2, [r3, #16]
 8001742:	615a      	str	r2, [r3, #20]
 8001744:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001746:	4b2d      	ldr	r3, [pc, #180]	; (80017fc <MX_TIM3_Init+0xe8>)
 8001748:	4a2d      	ldr	r2, [pc, #180]	; (8001800 <MX_TIM3_Init+0xec>)
 800174a:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 38;
 800174c:	4b2b      	ldr	r3, [pc, #172]	; (80017fc <MX_TIM3_Init+0xe8>)
 800174e:	2226      	movs	r2, #38	; 0x26
 8001750:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001752:	4b2a      	ldr	r3, [pc, #168]	; (80017fc <MX_TIM3_Init+0xe8>)
 8001754:	2200      	movs	r2, #0
 8001756:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 4096;
 8001758:	4b28      	ldr	r3, [pc, #160]	; (80017fc <MX_TIM3_Init+0xe8>)
 800175a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800175e:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001760:	4b26      	ldr	r3, [pc, #152]	; (80017fc <MX_TIM3_Init+0xe8>)
 8001762:	2200      	movs	r2, #0
 8001764:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001766:	4b25      	ldr	r3, [pc, #148]	; (80017fc <MX_TIM3_Init+0xe8>)
 8001768:	2280      	movs	r2, #128	; 0x80
 800176a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 800176c:	4823      	ldr	r0, [pc, #140]	; (80017fc <MX_TIM3_Init+0xe8>)
 800176e:	f005 f9b1 	bl	8006ad4 <HAL_TIM_Base_Init>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_TIM3_Init+0x68>
		Error_Handler();
 8001778:	f000 f908 	bl	800198c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800177c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001780:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001782:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001786:	4619      	mov	r1, r3
 8001788:	481c      	ldr	r0, [pc, #112]	; (80017fc <MX_TIM3_Init+0xe8>)
 800178a:	f005 fd95 	bl	80072b8 <HAL_TIM_ConfigClockSource>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_TIM3_Init+0x84>
		Error_Handler();
 8001794:	f000 f8fa 	bl	800198c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8001798:	4818      	ldr	r0, [pc, #96]	; (80017fc <MX_TIM3_Init+0xe8>)
 800179a:	f005 f9f2 	bl	8006b82 <HAL_TIM_PWM_Init>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_TIM3_Init+0x94>
		Error_Handler();
 80017a4:	f000 f8f2 	bl	800198c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017a8:	2300      	movs	r3, #0
 80017aa:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ac:	2300      	movs	r3, #0
 80017ae:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80017b0:	f107 031c 	add.w	r3, r7, #28
 80017b4:	4619      	mov	r1, r3
 80017b6:	4811      	ldr	r0, [pc, #68]	; (80017fc <MX_TIM3_Init+0xe8>)
 80017b8:	f006 faaa 	bl	8007d10 <HAL_TIMEx_MasterConfigSynchronization>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_TIM3_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 80017c2:	f000 f8e3 	bl	800198c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017c6:	2360      	movs	r3, #96	; 0x60
 80017c8:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 25;
 80017ca:	2319      	movs	r3, #25
 80017cc:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017ce:	2300      	movs	r3, #0
 80017d0:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017d2:	2300      	movs	r3, #0
 80017d4:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 80017d6:	463b      	mov	r3, r7
 80017d8:	2204      	movs	r2, #4
 80017da:	4619      	mov	r1, r3
 80017dc:	4807      	ldr	r0, [pc, #28]	; (80017fc <MX_TIM3_Init+0xe8>)
 80017de:	f005 fc57 	bl	8007090 <HAL_TIM_PWM_ConfigChannel>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_TIM3_Init+0xd8>
			!= HAL_OK) {
		Error_Handler();
 80017e8:	f000 f8d0 	bl	800198c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 80017ec:	4803      	ldr	r0, [pc, #12]	; (80017fc <MX_TIM3_Init+0xe8>)
 80017ee:	f000 fd5d 	bl	80022ac <HAL_TIM_MspPostInit>

}
 80017f2:	bf00      	nop
 80017f4:	3738      	adds	r7, #56	; 0x38
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	2000038c 	.word	0x2000038c
 8001800:	40000400 	.word	0x40000400

08001804 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001808:	4b14      	ldr	r3, [pc, #80]	; (800185c <MX_USART2_UART_Init+0x58>)
 800180a:	4a15      	ldr	r2, [pc, #84]	; (8001860 <MX_USART2_UART_Init+0x5c>)
 800180c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800180e:	4b13      	ldr	r3, [pc, #76]	; (800185c <MX_USART2_UART_Init+0x58>)
 8001810:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001814:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001816:	4b11      	ldr	r3, [pc, #68]	; (800185c <MX_USART2_UART_Init+0x58>)
 8001818:	2200      	movs	r2, #0
 800181a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800181c:	4b0f      	ldr	r3, [pc, #60]	; (800185c <MX_USART2_UART_Init+0x58>)
 800181e:	2200      	movs	r2, #0
 8001820:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001822:	4b0e      	ldr	r3, [pc, #56]	; (800185c <MX_USART2_UART_Init+0x58>)
 8001824:	2200      	movs	r2, #0
 8001826:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001828:	4b0c      	ldr	r3, [pc, #48]	; (800185c <MX_USART2_UART_Init+0x58>)
 800182a:	220c      	movs	r2, #12
 800182c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800182e:	4b0b      	ldr	r3, [pc, #44]	; (800185c <MX_USART2_UART_Init+0x58>)
 8001830:	2200      	movs	r2, #0
 8001832:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001834:	4b09      	ldr	r3, [pc, #36]	; (800185c <MX_USART2_UART_Init+0x58>)
 8001836:	2200      	movs	r2, #0
 8001838:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800183a:	4b08      	ldr	r3, [pc, #32]	; (800185c <MX_USART2_UART_Init+0x58>)
 800183c:	2200      	movs	r2, #0
 800183e:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001840:	4b06      	ldr	r3, [pc, #24]	; (800185c <MX_USART2_UART_Init+0x58>)
 8001842:	2200      	movs	r2, #0
 8001844:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001846:	4805      	ldr	r0, [pc, #20]	; (800185c <MX_USART2_UART_Init+0x58>)
 8001848:	f006 fb08 	bl	8007e5c <HAL_UART_Init>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 8001852:	f000 f89b 	bl	800198c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	200003d8 	.word	0x200003d8
 8001860:	40004400 	.word	0x40004400

08001864 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800186a:	4b14      	ldr	r3, [pc, #80]	; (80018bc <MX_DMA_Init+0x58>)
 800186c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800186e:	4a13      	ldr	r2, [pc, #76]	; (80018bc <MX_DMA_Init+0x58>)
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	6493      	str	r3, [r2, #72]	; 0x48
 8001876:	4b11      	ldr	r3, [pc, #68]	; (80018bc <MX_DMA_Init+0x58>)
 8001878:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	607b      	str	r3, [r7, #4]
 8001880:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001882:	2200      	movs	r2, #0
 8001884:	2100      	movs	r1, #0
 8001886:	200b      	movs	r0, #11
 8001888:	f002 fda3 	bl	80043d2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800188c:	200b      	movs	r0, #11
 800188e:	f002 fdbc 	bl	800440a <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001892:	2200      	movs	r2, #0
 8001894:	2100      	movs	r1, #0
 8001896:	2010      	movs	r0, #16
 8001898:	f002 fd9b 	bl	80043d2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800189c:	2010      	movs	r0, #16
 800189e:	f002 fdb4 	bl	800440a <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80018a2:	2200      	movs	r2, #0
 80018a4:	2100      	movs	r1, #0
 80018a6:	2011      	movs	r0, #17
 80018a8:	f002 fd93 	bl	80043d2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80018ac:	2011      	movs	r0, #17
 80018ae:	f002 fdac 	bl	800440a <HAL_NVIC_EnableIRQ>

}
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40021000 	.word	0x40021000

080018c0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b08a      	sub	sp, #40	; 0x28
 80018c4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80018c6:	f107 0314 	add.w	r3, r7, #20
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	605a      	str	r2, [r3, #4]
 80018d0:	609a      	str	r2, [r3, #8]
 80018d2:	60da      	str	r2, [r3, #12]
 80018d4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80018d6:	4b2b      	ldr	r3, [pc, #172]	; (8001984 <MX_GPIO_Init+0xc4>)
 80018d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018da:	4a2a      	ldr	r2, [pc, #168]	; (8001984 <MX_GPIO_Init+0xc4>)
 80018dc:	f043 0304 	orr.w	r3, r3, #4
 80018e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018e2:	4b28      	ldr	r3, [pc, #160]	; (8001984 <MX_GPIO_Init+0xc4>)
 80018e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e6:	f003 0304 	and.w	r3, r3, #4
 80018ea:	613b      	str	r3, [r7, #16]
 80018ec:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80018ee:	4b25      	ldr	r3, [pc, #148]	; (8001984 <MX_GPIO_Init+0xc4>)
 80018f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f2:	4a24      	ldr	r2, [pc, #144]	; (8001984 <MX_GPIO_Init+0xc4>)
 80018f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018fa:	4b22      	ldr	r3, [pc, #136]	; (8001984 <MX_GPIO_Init+0xc4>)
 80018fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001906:	4b1f      	ldr	r3, [pc, #124]	; (8001984 <MX_GPIO_Init+0xc4>)
 8001908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800190a:	4a1e      	ldr	r2, [pc, #120]	; (8001984 <MX_GPIO_Init+0xc4>)
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001912:	4b1c      	ldr	r3, [pc, #112]	; (8001984 <MX_GPIO_Init+0xc4>)
 8001914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	60bb      	str	r3, [r7, #8]
 800191c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800191e:	4b19      	ldr	r3, [pc, #100]	; (8001984 <MX_GPIO_Init+0xc4>)
 8001920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001922:	4a18      	ldr	r2, [pc, #96]	; (8001984 <MX_GPIO_Init+0xc4>)
 8001924:	f043 0302 	orr.w	r3, r3, #2
 8001928:	64d3      	str	r3, [r2, #76]	; 0x4c
 800192a:	4b16      	ldr	r3, [pc, #88]	; (8001984 <MX_GPIO_Init+0xc4>)
 800192c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	607b      	str	r3, [r7, #4]
 8001934:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001936:	2200      	movs	r2, #0
 8001938:	2120      	movs	r1, #32
 800193a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800193e:	f003 f90f 	bl	8004b60 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001942:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001946:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001948:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800194c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001952:	f107 0314 	add.w	r3, r7, #20
 8001956:	4619      	mov	r1, r3
 8001958:	480b      	ldr	r0, [pc, #44]	; (8001988 <MX_GPIO_Init+0xc8>)
 800195a:	f002 ff57 	bl	800480c <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 800195e:	2320      	movs	r3, #32
 8001960:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001962:	2301      	movs	r3, #1
 8001964:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196a:	2300      	movs	r3, #0
 800196c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800196e:	f107 0314 	add.w	r3, r7, #20
 8001972:	4619      	mov	r1, r3
 8001974:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001978:	f002 ff48 	bl	800480c <HAL_GPIO_Init>

}
 800197c:	bf00      	nop
 800197e:	3728      	adds	r7, #40	; 0x28
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40021000 	.word	0x40021000
 8001988:	48000800 	.word	0x48000800

0800198c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001990:	b672      	cpsid	i
}
 8001992:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001994:	e7fe      	b.n	8001994 <Error_Handler+0x8>
	...

08001998 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8001998:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800199c:	b094      	sub	sp, #80	; 0x50
 800199e:	af04      	add	r7, sp, #16
 80019a0:	6078      	str	r0, [r7, #4]
 80019a2:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 80019a4:	2364      	movs	r3, #100	; 0x64
 80019a6:	9302      	str	r3, [sp, #8]
 80019a8:	230e      	movs	r3, #14
 80019aa:	9301      	str	r3, [sp, #4]
 80019ac:	f107 0308 	add.w	r3, r7, #8
 80019b0:	9300      	str	r3, [sp, #0]
 80019b2:	2301      	movs	r3, #1
 80019b4:	223b      	movs	r2, #59	; 0x3b
 80019b6:	21d0      	movs	r1, #208	; 0xd0
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f003 f979 	bl	8004cb0 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 80019be:	7a3b      	ldrb	r3, [r7, #8]
 80019c0:	021b      	lsls	r3, r3, #8
 80019c2:	b21a      	sxth	r2, r3
 80019c4:	7a7b      	ldrb	r3, [r7, #9]
 80019c6:	b21b      	sxth	r3, r3
 80019c8:	4313      	orrs	r3, r2
 80019ca:	b21a      	sxth	r2, r3
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 80019d0:	7abb      	ldrb	r3, [r7, #10]
 80019d2:	021b      	lsls	r3, r3, #8
 80019d4:	b21a      	sxth	r2, r3
 80019d6:	7afb      	ldrb	r3, [r7, #11]
 80019d8:	b21b      	sxth	r3, r3
 80019da:	4313      	orrs	r3, r2
 80019dc:	b21a      	sxth	r2, r3
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 80019e2:	7b3b      	ldrb	r3, [r7, #12]
 80019e4:	021b      	lsls	r3, r3, #8
 80019e6:	b21a      	sxth	r2, r3
 80019e8:	7b7b      	ldrb	r3, [r7, #13]
 80019ea:	b21b      	sxth	r3, r3
 80019ec:	4313      	orrs	r3, r2
 80019ee:	b21a      	sxth	r2, r3
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 80019f4:	7bbb      	ldrb	r3, [r7, #14]
 80019f6:	021b      	lsls	r3, r3, #8
 80019f8:	b21a      	sxth	r2, r3
 80019fa:	7bfb      	ldrb	r3, [r7, #15]
 80019fc:	b21b      	sxth	r3, r3
 80019fe:	4313      	orrs	r3, r2
 8001a00:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8001a02:	7c3b      	ldrb	r3, [r7, #16]
 8001a04:	021b      	lsls	r3, r3, #8
 8001a06:	b21a      	sxth	r2, r3
 8001a08:	7c7b      	ldrb	r3, [r7, #17]
 8001a0a:	b21b      	sxth	r3, r3
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	b21a      	sxth	r2, r3
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8001a14:	7cbb      	ldrb	r3, [r7, #18]
 8001a16:	021b      	lsls	r3, r3, #8
 8001a18:	b21a      	sxth	r2, r3
 8001a1a:	7cfb      	ldrb	r3, [r7, #19]
 8001a1c:	b21b      	sxth	r3, r3
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	b21a      	sxth	r2, r3
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8001a26:	7d3b      	ldrb	r3, [r7, #20]
 8001a28:	021b      	lsls	r3, r3, #8
 8001a2a:	b21a      	sxth	r2, r3
 8001a2c:	7d7b      	ldrb	r3, [r7, #21]
 8001a2e:	b21b      	sxth	r3, r3
 8001a30:	4313      	orrs	r3, r2
 8001a32:	b21a      	sxth	r2, r3
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7fe fd70 	bl	8000524 <__aeabi_i2d>
 8001a44:	f04f 0200 	mov.w	r2, #0
 8001a48:	4bbd      	ldr	r3, [pc, #756]	; (8001d40 <MPU6050_Read_All+0x3a8>)
 8001a4a:	f7fe feff 	bl	800084c <__aeabi_ddiv>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	6839      	ldr	r1, [r7, #0]
 8001a54:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7fe fd60 	bl	8000524 <__aeabi_i2d>
 8001a64:	f04f 0200 	mov.w	r2, #0
 8001a68:	4bb5      	ldr	r3, [pc, #724]	; (8001d40 <MPU6050_Read_All+0x3a8>)
 8001a6a:	f7fe feef 	bl	800084c <__aeabi_ddiv>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	460b      	mov	r3, r1
 8001a72:	6839      	ldr	r1, [r7, #0]
 8001a74:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7fe fd50 	bl	8000524 <__aeabi_i2d>
 8001a84:	a3a8      	add	r3, pc, #672	; (adr r3, 8001d28 <MPU6050_Read_All+0x390>)
 8001a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8a:	f7fe fedf 	bl	800084c <__aeabi_ddiv>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	460b      	mov	r3, r1
 8001a92:	6839      	ldr	r1, [r7, #0]
 8001a94:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8001a98:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001a9c:	ee07 3a90 	vmov	s15, r3
 8001aa0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aa4:	eddf 6aa7 	vldr	s13, [pc, #668]	; 8001d44 <MPU6050_Read_All+0x3ac>
 8001aa8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001aac:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8001d48 <MPU6050_Read_All+0x3b0>
 8001ab0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7fe fd2f 	bl	8000524 <__aeabi_i2d>
 8001ac6:	a39a      	add	r3, pc, #616	; (adr r3, 8001d30 <MPU6050_Read_All+0x398>)
 8001ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001acc:	f7fe febe 	bl	800084c <__aeabi_ddiv>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	6839      	ldr	r1, [r7, #0]
 8001ad6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7fe fd1f 	bl	8000524 <__aeabi_i2d>
 8001ae6:	a392      	add	r3, pc, #584	; (adr r3, 8001d30 <MPU6050_Read_All+0x398>)
 8001ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aec:	f7fe feae 	bl	800084c <__aeabi_ddiv>
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	6839      	ldr	r1, [r7, #0]
 8001af6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7fe fd0f 	bl	8000524 <__aeabi_i2d>
 8001b06:	a38a      	add	r3, pc, #552	; (adr r3, 8001d30 <MPU6050_Read_All+0x398>)
 8001b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b0c:	f7fe fe9e 	bl	800084c <__aeabi_ddiv>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	6839      	ldr	r1, [r7, #0]
 8001b16:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 8001b1a:	f000 fed1 	bl	80028c0 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	4b8a      	ldr	r3, [pc, #552]	; (8001d4c <MPU6050_Read_All+0x3b4>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7fe fcec 	bl	8000504 <__aeabi_ui2d>
 8001b2c:	f04f 0200 	mov.w	r2, #0
 8001b30:	4b87      	ldr	r3, [pc, #540]	; (8001d50 <MPU6050_Read_All+0x3b8>)
 8001b32:	f7fe fe8b 	bl	800084c <__aeabi_ddiv>
 8001b36:	4602      	mov	r2, r0
 8001b38:	460b      	mov	r3, r1
 8001b3a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8001b3e:	f000 febf 	bl	80028c0 <HAL_GetTick>
 8001b42:	4603      	mov	r3, r0
 8001b44:	4a81      	ldr	r2, [pc, #516]	; (8001d4c <MPU6050_Read_All+0x3b4>)
 8001b46:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b4e:	461a      	mov	r2, r3
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b56:	fb03 f202 	mul.w	r2, r3, r2
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001b60:	4619      	mov	r1, r3
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001b68:	fb01 f303 	mul.w	r3, r1, r3
 8001b6c:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7fe fcd8 	bl	8000524 <__aeabi_i2d>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	ec43 2b10 	vmov	d0, r2, r3
 8001b7c:	f007 fce3 	bl	8009546 <sqrt>
 8001b80:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 8001b84:	f04f 0200 	mov.w	r2, #0
 8001b88:	f04f 0300 	mov.w	r3, #0
 8001b8c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001b90:	f7fe ff9a 	bl	8000ac8 <__aeabi_dcmpeq>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d11f      	bne.n	8001bda <MPU6050_Read_All+0x242>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7fe fcbf 	bl	8000524 <__aeabi_i2d>
 8001ba6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001baa:	f7fe fe4f 	bl	800084c <__aeabi_ddiv>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	ec43 2b17 	vmov	d7, r2, r3
 8001bb6:	eeb0 0a47 	vmov.f32	s0, s14
 8001bba:	eef0 0a67 	vmov.f32	s1, s15
 8001bbe:	f007 fb17 	bl	80091f0 <atan>
 8001bc2:	ec51 0b10 	vmov	r0, r1, d0
 8001bc6:	a35c      	add	r3, pc, #368	; (adr r3, 8001d38 <MPU6050_Read_All+0x3a0>)
 8001bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bcc:	f7fe fd14 	bl	80005f8 <__aeabi_dmul>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001bd8:	e005      	b.n	8001be6 <MPU6050_Read_All+0x24e>
    }
    else
    {
        roll = 0.0;
 8001bda:	f04f 0200 	mov.w	r2, #0
 8001bde:	f04f 0300 	mov.w	r3, #0
 8001be2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bec:	425b      	negs	r3, r3
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7fe fc98 	bl	8000524 <__aeabi_i2d>
 8001bf4:	4682      	mov	sl, r0
 8001bf6:	468b      	mov	fp, r1
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7fe fc90 	bl	8000524 <__aeabi_i2d>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	ec43 2b11 	vmov	d1, r2, r3
 8001c0c:	ec4b ab10 	vmov	d0, sl, fp
 8001c10:	f007 fc97 	bl	8009542 <atan2>
 8001c14:	ec51 0b10 	vmov	r0, r1, d0
 8001c18:	a347      	add	r3, pc, #284	; (adr r3, 8001d38 <MPU6050_Read_All+0x3a0>)
 8001c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c1e:	f7fe fceb 	bl	80005f8 <__aeabi_dmul>
 8001c22:	4602      	mov	r2, r0
 8001c24:	460b      	mov	r3, r1
 8001c26:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8001c2a:	f04f 0200 	mov.w	r2, #0
 8001c2e:	4b49      	ldr	r3, [pc, #292]	; (8001d54 <MPU6050_Read_All+0x3bc>)
 8001c30:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c34:	f7fe ff52 	bl	8000adc <__aeabi_dcmplt>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d00a      	beq.n	8001c54 <MPU6050_Read_All+0x2bc>
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001c44:	f04f 0200 	mov.w	r2, #0
 8001c48:	4b43      	ldr	r3, [pc, #268]	; (8001d58 <MPU6050_Read_All+0x3c0>)
 8001c4a:	f7fe ff65 	bl	8000b18 <__aeabi_dcmpgt>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d114      	bne.n	8001c7e <MPU6050_Read_All+0x2e6>
 8001c54:	f04f 0200 	mov.w	r2, #0
 8001c58:	4b3f      	ldr	r3, [pc, #252]	; (8001d58 <MPU6050_Read_All+0x3c0>)
 8001c5a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c5e:	f7fe ff5b 	bl	8000b18 <__aeabi_dcmpgt>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d015      	beq.n	8001c94 <MPU6050_Read_All+0x2fc>
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001c6e:	f04f 0200 	mov.w	r2, #0
 8001c72:	4b38      	ldr	r3, [pc, #224]	; (8001d54 <MPU6050_Read_All+0x3bc>)
 8001c74:	f7fe ff32 	bl	8000adc <__aeabi_dcmplt>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d00a      	beq.n	8001c94 <MPU6050_Read_All+0x2fc>
    {
        KalmanY.angle = pitch;
 8001c7e:	4937      	ldr	r1, [pc, #220]	; (8001d5c <MPU6050_Read_All+0x3c4>)
 8001c80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c84:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8001c88:	6839      	ldr	r1, [r7, #0]
 8001c8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c8e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001c92:	e014      	b.n	8001cbe <MPU6050_Read_All+0x326>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8001c9a:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8001c9e:	eeb0 1a47 	vmov.f32	s2, s14
 8001ca2:	eef0 1a67 	vmov.f32	s3, s15
 8001ca6:	ed97 0b06 	vldr	d0, [r7, #24]
 8001caa:	482c      	ldr	r0, [pc, #176]	; (8001d5c <MPU6050_Read_All+0x3c4>)
 8001cac:	f000 f85a 	bl	8001d64 <Kalman_getAngle>
 8001cb0:	eeb0 7a40 	vmov.f32	s14, s0
 8001cb4:	eef0 7a60 	vmov.f32	s15, s1
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001cc4:	4690      	mov	r8, r2
 8001cc6:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001cca:	f04f 0200 	mov.w	r2, #0
 8001cce:	4b22      	ldr	r3, [pc, #136]	; (8001d58 <MPU6050_Read_All+0x3c0>)
 8001cd0:	4640      	mov	r0, r8
 8001cd2:	4649      	mov	r1, r9
 8001cd4:	f7fe ff20 	bl	8000b18 <__aeabi_dcmpgt>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d008      	beq.n	8001cf0 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001ce4:	4614      	mov	r4, r2
 8001ce6:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8001cf6:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8001cfa:	eeb0 1a47 	vmov.f32	s2, s14
 8001cfe:	eef0 1a67 	vmov.f32	s3, s15
 8001d02:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8001d06:	4816      	ldr	r0, [pc, #88]	; (8001d60 <MPU6050_Read_All+0x3c8>)
 8001d08:	f000 f82c 	bl	8001d64 <Kalman_getAngle>
 8001d0c:	eeb0 7a40 	vmov.f32	s14, s0
 8001d10:	eef0 7a60 	vmov.f32	s15, s1
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
}
 8001d1a:	bf00      	nop
 8001d1c:	3740      	adds	r7, #64	; 0x40
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d24:	f3af 8000 	nop.w
 8001d28:	00000000 	.word	0x00000000
 8001d2c:	40cc2900 	.word	0x40cc2900
 8001d30:	00000000 	.word	0x00000000
 8001d34:	40606000 	.word	0x40606000
 8001d38:	1a63c1f8 	.word	0x1a63c1f8
 8001d3c:	404ca5dc 	.word	0x404ca5dc
 8001d40:	40d00000 	.word	0x40d00000
 8001d44:	43aa0000 	.word	0x43aa0000
 8001d48:	42121eb8 	.word	0x42121eb8
 8001d4c:	20000548 	.word	0x20000548
 8001d50:	408f4000 	.word	0x408f4000
 8001d54:	c0568000 	.word	0xc0568000
 8001d58:	40568000 	.word	0x40568000
 8001d5c:	20000048 	.word	0x20000048
 8001d60:	20000000 	.word	0x20000000

08001d64 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8001d64:	b5b0      	push	{r4, r5, r7, lr}
 8001d66:	b096      	sub	sp, #88	; 0x58
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	61f8      	str	r0, [r7, #28]
 8001d6c:	ed87 0b04 	vstr	d0, [r7, #16]
 8001d70:	ed87 1b02 	vstr	d1, [r7, #8]
 8001d74:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001d7e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d82:	f7fe fa81 	bl	8000288 <__aeabi_dsub>
 8001d86:	4602      	mov	r2, r0
 8001d88:	460b      	mov	r3, r1
 8001d8a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001d94:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001d98:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d9c:	f7fe fc2c 	bl	80005f8 <__aeabi_dmul>
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	4620      	mov	r0, r4
 8001da6:	4629      	mov	r1, r5
 8001da8:	f7fe fa70 	bl	800028c <__adddf3>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	69f9      	ldr	r1, [r7, #28]
 8001db2:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001dc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001dc6:	f7fe fc17 	bl	80005f8 <__aeabi_dmul>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	460b      	mov	r3, r1
 8001dce:	4610      	mov	r0, r2
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001dd8:	f7fe fa56 	bl	8000288 <__aeabi_dsub>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	460b      	mov	r3, r1
 8001de0:	4610      	mov	r0, r2
 8001de2:	4619      	mov	r1, r3
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001dea:	f7fe fa4d 	bl	8000288 <__aeabi_dsub>
 8001dee:	4602      	mov	r2, r0
 8001df0:	460b      	mov	r3, r1
 8001df2:	4610      	mov	r0, r2
 8001df4:	4619      	mov	r1, r3
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dfc:	f7fe fa46 	bl	800028c <__adddf3>
 8001e00:	4602      	mov	r2, r0
 8001e02:	460b      	mov	r3, r1
 8001e04:	4610      	mov	r0, r2
 8001e06:	4619      	mov	r1, r3
 8001e08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e0c:	f7fe fbf4 	bl	80005f8 <__aeabi_dmul>
 8001e10:	4602      	mov	r2, r0
 8001e12:	460b      	mov	r3, r1
 8001e14:	4620      	mov	r0, r4
 8001e16:	4629      	mov	r1, r5
 8001e18:	f7fe fa38 	bl	800028c <__adddf3>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	460b      	mov	r3, r1
 8001e20:	69f9      	ldr	r1, [r7, #28]
 8001e22:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001e32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e36:	f7fe fbdf 	bl	80005f8 <__aeabi_dmul>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	4620      	mov	r0, r4
 8001e40:	4629      	mov	r1, r5
 8001e42:	f7fe fa21 	bl	8000288 <__aeabi_dsub>
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	69f9      	ldr	r1, [r7, #28]
 8001e4c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001e5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e60:	f7fe fbca 	bl	80005f8 <__aeabi_dmul>
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	4620      	mov	r0, r4
 8001e6a:	4629      	mov	r1, r5
 8001e6c:	f7fe fa0c 	bl	8000288 <__aeabi_dsub>
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	69f9      	ldr	r1, [r7, #28]
 8001e76:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001e86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e8a:	f7fe fbb5 	bl	80005f8 <__aeabi_dmul>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	460b      	mov	r3, r1
 8001e92:	4620      	mov	r0, r4
 8001e94:	4629      	mov	r1, r5
 8001e96:	f7fe f9f9 	bl	800028c <__adddf3>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	69f9      	ldr	r1, [r7, #28]
 8001ea0:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001eb0:	f7fe f9ec 	bl	800028c <__adddf3>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001ec2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001ec6:	f7fe fcc1 	bl	800084c <__aeabi_ddiv>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	460b      	mov	r3, r1
 8001ece:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001ed8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001edc:	f7fe fcb6 	bl	800084c <__aeabi_ddiv>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001eee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ef2:	f7fe f9c9 	bl	8000288 <__aeabi_dsub>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	460b      	mov	r3, r1
 8001efa:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001f04:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001f08:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001f0c:	f7fe fb74 	bl	80005f8 <__aeabi_dmul>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4620      	mov	r0, r4
 8001f16:	4629      	mov	r1, r5
 8001f18:	f7fe f9b8 	bl	800028c <__adddf3>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	69f9      	ldr	r1, [r7, #28]
 8001f22:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001f2c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001f30:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001f34:	f7fe fb60 	bl	80005f8 <__aeabi_dmul>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	4620      	mov	r0, r4
 8001f3e:	4629      	mov	r1, r5
 8001f40:	f7fe f9a4 	bl	800028c <__adddf3>
 8001f44:	4602      	mov	r2, r0
 8001f46:	460b      	mov	r3, r1
 8001f48:	69f9      	ldr	r1, [r7, #28]
 8001f4a:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001f54:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001f5e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001f68:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001f6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001f70:	f7fe fb42 	bl	80005f8 <__aeabi_dmul>
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	4620      	mov	r0, r4
 8001f7a:	4629      	mov	r1, r5
 8001f7c:	f7fe f984 	bl	8000288 <__aeabi_dsub>
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	69f9      	ldr	r1, [r7, #28]
 8001f86:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001f90:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001f94:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001f98:	f7fe fb2e 	bl	80005f8 <__aeabi_dmul>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	4620      	mov	r0, r4
 8001fa2:	4629      	mov	r1, r5
 8001fa4:	f7fe f970 	bl	8000288 <__aeabi_dsub>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	460b      	mov	r3, r1
 8001fac:	69f9      	ldr	r1, [r7, #28]
 8001fae:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001fb8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001fbc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001fc0:	f7fe fb1a 	bl	80005f8 <__aeabi_dmul>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	4620      	mov	r0, r4
 8001fca:	4629      	mov	r1, r5
 8001fcc:	f7fe f95c 	bl	8000288 <__aeabi_dsub>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	69f9      	ldr	r1, [r7, #28]
 8001fd6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001fe0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001fe4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001fe8:	f7fe fb06 	bl	80005f8 <__aeabi_dmul>
 8001fec:	4602      	mov	r2, r0
 8001fee:	460b      	mov	r3, r1
 8001ff0:	4620      	mov	r0, r4
 8001ff2:	4629      	mov	r1, r5
 8001ff4:	f7fe f948 	bl	8000288 <__aeabi_dsub>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	69f9      	ldr	r1, [r7, #28]
 8001ffe:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002008:	ec43 2b17 	vmov	d7, r2, r3
};
 800200c:	eeb0 0a47 	vmov.f32	s0, s14
 8002010:	eef0 0a67 	vmov.f32	s1, s15
 8002014:	3758      	adds	r7, #88	; 0x58
 8002016:	46bd      	mov	sp, r7
 8002018:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800201c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002022:	4b0f      	ldr	r3, [pc, #60]	; (8002060 <HAL_MspInit+0x44>)
 8002024:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002026:	4a0e      	ldr	r2, [pc, #56]	; (8002060 <HAL_MspInit+0x44>)
 8002028:	f043 0301 	orr.w	r3, r3, #1
 800202c:	6613      	str	r3, [r2, #96]	; 0x60
 800202e:	4b0c      	ldr	r3, [pc, #48]	; (8002060 <HAL_MspInit+0x44>)
 8002030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	607b      	str	r3, [r7, #4]
 8002038:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800203a:	4b09      	ldr	r3, [pc, #36]	; (8002060 <HAL_MspInit+0x44>)
 800203c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203e:	4a08      	ldr	r2, [pc, #32]	; (8002060 <HAL_MspInit+0x44>)
 8002040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002044:	6593      	str	r3, [r2, #88]	; 0x58
 8002046:	4b06      	ldr	r3, [pc, #24]	; (8002060 <HAL_MspInit+0x44>)
 8002048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800204a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800204e:	603b      	str	r3, [r7, #0]
 8002050:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002052:	bf00      	nop
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	40021000 	.word	0x40021000

08002064 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b0ac      	sub	sp, #176	; 0xb0
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800206c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	605a      	str	r2, [r3, #4]
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	60da      	str	r2, [r3, #12]
 800207a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800207c:	f107 0314 	add.w	r3, r7, #20
 8002080:	2288      	movs	r2, #136	; 0x88
 8002082:	2100      	movs	r1, #0
 8002084:	4618      	mov	r0, r3
 8002086:	f007 fc3f 	bl	8009908 <memset>
  if(hadc->Instance==ADC1)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a41      	ldr	r2, [pc, #260]	; (8002194 <HAL_ADC_MspInit+0x130>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d17a      	bne.n	800218a <HAL_ADC_MspInit+0x126>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002094:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002098:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800209a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800209e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80020a2:	2302      	movs	r3, #2
 80020a4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80020a6:	2301      	movs	r3, #1
 80020a8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80020aa:	2308      	movs	r3, #8
 80020ac:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80020ae:	2307      	movs	r3, #7
 80020b0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80020b2:	2302      	movs	r3, #2
 80020b4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80020b6:	2302      	movs	r3, #2
 80020b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80020ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020be:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020c0:	f107 0314 	add.w	r3, r7, #20
 80020c4:	4618      	mov	r0, r3
 80020c6:	f004 f849 	bl	800615c <HAL_RCCEx_PeriphCLKConfig>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80020d0:	f7ff fc5c 	bl	800198c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80020d4:	4b30      	ldr	r3, [pc, #192]	; (8002198 <HAL_ADC_MspInit+0x134>)
 80020d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d8:	4a2f      	ldr	r2, [pc, #188]	; (8002198 <HAL_ADC_MspInit+0x134>)
 80020da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80020de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020e0:	4b2d      	ldr	r3, [pc, #180]	; (8002198 <HAL_ADC_MspInit+0x134>)
 80020e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020e8:	613b      	str	r3, [r7, #16]
 80020ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ec:	4b2a      	ldr	r3, [pc, #168]	; (8002198 <HAL_ADC_MspInit+0x134>)
 80020ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f0:	4a29      	ldr	r2, [pc, #164]	; (8002198 <HAL_ADC_MspInit+0x134>)
 80020f2:	f043 0301 	orr.w	r3, r3, #1
 80020f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020f8:	4b27      	ldr	r3, [pc, #156]	; (8002198 <HAL_ADC_MspInit+0x134>)
 80020fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020fc:	f003 0301 	and.w	r3, r3, #1
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002104:	2301      	movs	r3, #1
 8002106:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800210a:	230b      	movs	r3, #11
 800210c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002110:	2300      	movs	r3, #0
 8002112:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002116:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800211a:	4619      	mov	r1, r3
 800211c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002120:	f002 fb74 	bl	800480c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002124:	4b1d      	ldr	r3, [pc, #116]	; (800219c <HAL_ADC_MspInit+0x138>)
 8002126:	4a1e      	ldr	r2, [pc, #120]	; (80021a0 <HAL_ADC_MspInit+0x13c>)
 8002128:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800212a:	4b1c      	ldr	r3, [pc, #112]	; (800219c <HAL_ADC_MspInit+0x138>)
 800212c:	2200      	movs	r2, #0
 800212e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002130:	4b1a      	ldr	r3, [pc, #104]	; (800219c <HAL_ADC_MspInit+0x138>)
 8002132:	2200      	movs	r2, #0
 8002134:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002136:	4b19      	ldr	r3, [pc, #100]	; (800219c <HAL_ADC_MspInit+0x138>)
 8002138:	2200      	movs	r2, #0
 800213a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800213c:	4b17      	ldr	r3, [pc, #92]	; (800219c <HAL_ADC_MspInit+0x138>)
 800213e:	2280      	movs	r2, #128	; 0x80
 8002140:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002142:	4b16      	ldr	r3, [pc, #88]	; (800219c <HAL_ADC_MspInit+0x138>)
 8002144:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002148:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800214a:	4b14      	ldr	r3, [pc, #80]	; (800219c <HAL_ADC_MspInit+0x138>)
 800214c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002150:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002152:	4b12      	ldr	r3, [pc, #72]	; (800219c <HAL_ADC_MspInit+0x138>)
 8002154:	2200      	movs	r2, #0
 8002156:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002158:	4b10      	ldr	r3, [pc, #64]	; (800219c <HAL_ADC_MspInit+0x138>)
 800215a:	2200      	movs	r2, #0
 800215c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800215e:	480f      	ldr	r0, [pc, #60]	; (800219c <HAL_ADC_MspInit+0x138>)
 8002160:	f002 f96e 	bl	8004440 <HAL_DMA_Init>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 800216a:	f7ff fc0f 	bl	800198c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a0a      	ldr	r2, [pc, #40]	; (800219c <HAL_ADC_MspInit+0x138>)
 8002172:	64da      	str	r2, [r3, #76]	; 0x4c
 8002174:	4a09      	ldr	r2, [pc, #36]	; (800219c <HAL_ADC_MspInit+0x138>)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800217a:	2200      	movs	r2, #0
 800217c:	2100      	movs	r1, #0
 800217e:	2012      	movs	r0, #18
 8002180:	f002 f927 	bl	80043d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002184:	2012      	movs	r0, #18
 8002186:	f002 f940 	bl	800440a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800218a:	bf00      	nop
 800218c:	37b0      	adds	r7, #176	; 0xb0
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	50040000 	.word	0x50040000
 8002198:	40021000 	.word	0x40021000
 800219c:	200002f8 	.word	0x200002f8
 80021a0:	40020008 	.word	0x40020008

080021a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b0ac      	sub	sp, #176	; 0xb0
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	605a      	str	r2, [r3, #4]
 80021b6:	609a      	str	r2, [r3, #8]
 80021b8:	60da      	str	r2, [r3, #12]
 80021ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021bc:	f107 0314 	add.w	r3, r7, #20
 80021c0:	2288      	movs	r2, #136	; 0x88
 80021c2:	2100      	movs	r1, #0
 80021c4:	4618      	mov	r0, r3
 80021c6:	f007 fb9f 	bl	8009908 <memset>
  if(hi2c->Instance==I2C1)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a21      	ldr	r2, [pc, #132]	; (8002254 <HAL_I2C_MspInit+0xb0>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d13b      	bne.n	800224c <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80021d4:	2340      	movs	r3, #64	; 0x40
 80021d6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80021d8:	2300      	movs	r3, #0
 80021da:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021dc:	f107 0314 	add.w	r3, r7, #20
 80021e0:	4618      	mov	r0, r3
 80021e2:	f003 ffbb 	bl	800615c <HAL_RCCEx_PeriphCLKConfig>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80021ec:	f7ff fbce 	bl	800198c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021f0:	4b19      	ldr	r3, [pc, #100]	; (8002258 <HAL_I2C_MspInit+0xb4>)
 80021f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f4:	4a18      	ldr	r2, [pc, #96]	; (8002258 <HAL_I2C_MspInit+0xb4>)
 80021f6:	f043 0302 	orr.w	r3, r3, #2
 80021fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021fc:	4b16      	ldr	r3, [pc, #88]	; (8002258 <HAL_I2C_MspInit+0xb4>)
 80021fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	613b      	str	r3, [r7, #16]
 8002206:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002208:	f44f 7340 	mov.w	r3, #768	; 0x300
 800220c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002210:	2312      	movs	r3, #18
 8002212:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002216:	2300      	movs	r3, #0
 8002218:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800221c:	2303      	movs	r3, #3
 800221e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002222:	2304      	movs	r3, #4
 8002224:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002228:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800222c:	4619      	mov	r1, r3
 800222e:	480b      	ldr	r0, [pc, #44]	; (800225c <HAL_I2C_MspInit+0xb8>)
 8002230:	f002 faec 	bl	800480c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002234:	4b08      	ldr	r3, [pc, #32]	; (8002258 <HAL_I2C_MspInit+0xb4>)
 8002236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002238:	4a07      	ldr	r2, [pc, #28]	; (8002258 <HAL_I2C_MspInit+0xb4>)
 800223a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800223e:	6593      	str	r3, [r2, #88]	; 0x58
 8002240:	4b05      	ldr	r3, [pc, #20]	; (8002258 <HAL_I2C_MspInit+0xb4>)
 8002242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002244:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002248:	60fb      	str	r3, [r7, #12]
 800224a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800224c:	bf00      	nop
 800224e:	37b0      	adds	r7, #176	; 0xb0
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	40005400 	.word	0x40005400
 8002258:	40021000 	.word	0x40021000
 800225c:	48000400 	.word	0x48000400

08002260 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a0d      	ldr	r2, [pc, #52]	; (80022a4 <HAL_TIM_Base_MspInit+0x44>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d113      	bne.n	800229a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002272:	4b0d      	ldr	r3, [pc, #52]	; (80022a8 <HAL_TIM_Base_MspInit+0x48>)
 8002274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002276:	4a0c      	ldr	r2, [pc, #48]	; (80022a8 <HAL_TIM_Base_MspInit+0x48>)
 8002278:	f043 0302 	orr.w	r3, r3, #2
 800227c:	6593      	str	r3, [r2, #88]	; 0x58
 800227e:	4b0a      	ldr	r3, [pc, #40]	; (80022a8 <HAL_TIM_Base_MspInit+0x48>)
 8002280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800228a:	2200      	movs	r2, #0
 800228c:	2100      	movs	r1, #0
 800228e:	201d      	movs	r0, #29
 8002290:	f002 f89f 	bl	80043d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002294:	201d      	movs	r0, #29
 8002296:	f002 f8b8 	bl	800440a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800229a:	bf00      	nop
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40000400 	.word	0x40000400
 80022a8:	40021000 	.word	0x40021000

080022ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b088      	sub	sp, #32
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b4:	f107 030c 	add.w	r3, r7, #12
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	605a      	str	r2, [r3, #4]
 80022be:	609a      	str	r2, [r3, #8]
 80022c0:	60da      	str	r2, [r3, #12]
 80022c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a11      	ldr	r2, [pc, #68]	; (8002310 <HAL_TIM_MspPostInit+0x64>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d11c      	bne.n	8002308 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ce:	4b11      	ldr	r3, [pc, #68]	; (8002314 <HAL_TIM_MspPostInit+0x68>)
 80022d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d2:	4a10      	ldr	r2, [pc, #64]	; (8002314 <HAL_TIM_MspPostInit+0x68>)
 80022d4:	f043 0301 	orr.w	r3, r3, #1
 80022d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022da:	4b0e      	ldr	r3, [pc, #56]	; (8002314 <HAL_TIM_MspPostInit+0x68>)
 80022dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	60bb      	str	r3, [r7, #8]
 80022e4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80022e6:	2380      	movs	r3, #128	; 0x80
 80022e8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ea:	2302      	movs	r3, #2
 80022ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ee:	2300      	movs	r3, #0
 80022f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f2:	2300      	movs	r3, #0
 80022f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80022f6:	2302      	movs	r3, #2
 80022f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022fa:	f107 030c 	add.w	r3, r7, #12
 80022fe:	4619      	mov	r1, r3
 8002300:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002304:	f002 fa82 	bl	800480c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002308:	bf00      	nop
 800230a:	3720      	adds	r7, #32
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40000400 	.word	0x40000400
 8002314:	40021000 	.word	0x40021000

08002318 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b0ac      	sub	sp, #176	; 0xb0
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002320:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	605a      	str	r2, [r3, #4]
 800232a:	609a      	str	r2, [r3, #8]
 800232c:	60da      	str	r2, [r3, #12]
 800232e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002330:	f107 0314 	add.w	r3, r7, #20
 8002334:	2288      	movs	r2, #136	; 0x88
 8002336:	2100      	movs	r1, #0
 8002338:	4618      	mov	r0, r3
 800233a:	f007 fae5 	bl	8009908 <memset>
  if(huart->Instance==USART2)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a4f      	ldr	r2, [pc, #316]	; (8002480 <HAL_UART_MspInit+0x168>)
 8002344:	4293      	cmp	r3, r2
 8002346:	f040 8096 	bne.w	8002476 <HAL_UART_MspInit+0x15e>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800234a:	2302      	movs	r3, #2
 800234c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800234e:	2300      	movs	r3, #0
 8002350:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002352:	f107 0314 	add.w	r3, r7, #20
 8002356:	4618      	mov	r0, r3
 8002358:	f003 ff00 	bl	800615c <HAL_RCCEx_PeriphCLKConfig>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002362:	f7ff fb13 	bl	800198c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002366:	4b47      	ldr	r3, [pc, #284]	; (8002484 <HAL_UART_MspInit+0x16c>)
 8002368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236a:	4a46      	ldr	r2, [pc, #280]	; (8002484 <HAL_UART_MspInit+0x16c>)
 800236c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002370:	6593      	str	r3, [r2, #88]	; 0x58
 8002372:	4b44      	ldr	r3, [pc, #272]	; (8002484 <HAL_UART_MspInit+0x16c>)
 8002374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237a:	613b      	str	r3, [r7, #16]
 800237c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800237e:	4b41      	ldr	r3, [pc, #260]	; (8002484 <HAL_UART_MspInit+0x16c>)
 8002380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002382:	4a40      	ldr	r2, [pc, #256]	; (8002484 <HAL_UART_MspInit+0x16c>)
 8002384:	f043 0301 	orr.w	r3, r3, #1
 8002388:	64d3      	str	r3, [r2, #76]	; 0x4c
 800238a:	4b3e      	ldr	r3, [pc, #248]	; (8002484 <HAL_UART_MspInit+0x16c>)
 800238c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	60fb      	str	r3, [r7, #12]
 8002394:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002396:	230c      	movs	r3, #12
 8002398:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239c:	2302      	movs	r3, #2
 800239e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a2:	2300      	movs	r3, #0
 80023a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a8:	2303      	movs	r3, #3
 80023aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023ae:	2307      	movs	r3, #7
 80023b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80023b8:	4619      	mov	r1, r3
 80023ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023be:	f002 fa25 	bl	800480c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80023c2:	4b31      	ldr	r3, [pc, #196]	; (8002488 <HAL_UART_MspInit+0x170>)
 80023c4:	4a31      	ldr	r2, [pc, #196]	; (800248c <HAL_UART_MspInit+0x174>)
 80023c6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 80023c8:	4b2f      	ldr	r3, [pc, #188]	; (8002488 <HAL_UART_MspInit+0x170>)
 80023ca:	2202      	movs	r2, #2
 80023cc:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023ce:	4b2e      	ldr	r3, [pc, #184]	; (8002488 <HAL_UART_MspInit+0x170>)
 80023d0:	2210      	movs	r2, #16
 80023d2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023d4:	4b2c      	ldr	r3, [pc, #176]	; (8002488 <HAL_UART_MspInit+0x170>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80023da:	4b2b      	ldr	r3, [pc, #172]	; (8002488 <HAL_UART_MspInit+0x170>)
 80023dc:	2280      	movs	r2, #128	; 0x80
 80023de:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023e0:	4b29      	ldr	r3, [pc, #164]	; (8002488 <HAL_UART_MspInit+0x170>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023e6:	4b28      	ldr	r3, [pc, #160]	; (8002488 <HAL_UART_MspInit+0x170>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80023ec:	4b26      	ldr	r3, [pc, #152]	; (8002488 <HAL_UART_MspInit+0x170>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80023f2:	4b25      	ldr	r3, [pc, #148]	; (8002488 <HAL_UART_MspInit+0x170>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80023f8:	4823      	ldr	r0, [pc, #140]	; (8002488 <HAL_UART_MspInit+0x170>)
 80023fa:	f002 f821 	bl	8004440 <HAL_DMA_Init>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8002404:	f7ff fac2 	bl	800198c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a1f      	ldr	r2, [pc, #124]	; (8002488 <HAL_UART_MspInit+0x170>)
 800240c:	66da      	str	r2, [r3, #108]	; 0x6c
 800240e:	4a1e      	ldr	r2, [pc, #120]	; (8002488 <HAL_UART_MspInit+0x170>)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002414:	4b1e      	ldr	r3, [pc, #120]	; (8002490 <HAL_UART_MspInit+0x178>)
 8002416:	4a1f      	ldr	r2, [pc, #124]	; (8002494 <HAL_UART_MspInit+0x17c>)
 8002418:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 800241a:	4b1d      	ldr	r3, [pc, #116]	; (8002490 <HAL_UART_MspInit+0x178>)
 800241c:	2202      	movs	r2, #2
 800241e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002420:	4b1b      	ldr	r3, [pc, #108]	; (8002490 <HAL_UART_MspInit+0x178>)
 8002422:	2200      	movs	r2, #0
 8002424:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002426:	4b1a      	ldr	r3, [pc, #104]	; (8002490 <HAL_UART_MspInit+0x178>)
 8002428:	2200      	movs	r2, #0
 800242a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800242c:	4b18      	ldr	r3, [pc, #96]	; (8002490 <HAL_UART_MspInit+0x178>)
 800242e:	2280      	movs	r2, #128	; 0x80
 8002430:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002432:	4b17      	ldr	r3, [pc, #92]	; (8002490 <HAL_UART_MspInit+0x178>)
 8002434:	2200      	movs	r2, #0
 8002436:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002438:	4b15      	ldr	r3, [pc, #84]	; (8002490 <HAL_UART_MspInit+0x178>)
 800243a:	2200      	movs	r2, #0
 800243c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800243e:	4b14      	ldr	r3, [pc, #80]	; (8002490 <HAL_UART_MspInit+0x178>)
 8002440:	2200      	movs	r2, #0
 8002442:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002444:	4b12      	ldr	r3, [pc, #72]	; (8002490 <HAL_UART_MspInit+0x178>)
 8002446:	2200      	movs	r2, #0
 8002448:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800244a:	4811      	ldr	r0, [pc, #68]	; (8002490 <HAL_UART_MspInit+0x178>)
 800244c:	f001 fff8 	bl	8004440 <HAL_DMA_Init>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 8002456:	f7ff fa99 	bl	800198c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a0c      	ldr	r2, [pc, #48]	; (8002490 <HAL_UART_MspInit+0x178>)
 800245e:	671a      	str	r2, [r3, #112]	; 0x70
 8002460:	4a0b      	ldr	r2, [pc, #44]	; (8002490 <HAL_UART_MspInit+0x178>)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002466:	2200      	movs	r2, #0
 8002468:	2100      	movs	r1, #0
 800246a:	2026      	movs	r0, #38	; 0x26
 800246c:	f001 ffb1 	bl	80043d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002470:	2026      	movs	r0, #38	; 0x26
 8002472:	f001 ffca 	bl	800440a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002476:	bf00      	nop
 8002478:	37b0      	adds	r7, #176	; 0xb0
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	40004400 	.word	0x40004400
 8002484:	40021000 	.word	0x40021000
 8002488:	2000045c 	.word	0x2000045c
 800248c:	40020080 	.word	0x40020080
 8002490:	200004a4 	.word	0x200004a4
 8002494:	4002006c 	.word	0x4002006c

08002498 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800249c:	e7fe      	b.n	800249c <NMI_Handler+0x4>

0800249e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800249e:	b480      	push	{r7}
 80024a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024a2:	e7fe      	b.n	80024a2 <HardFault_Handler+0x4>

080024a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024a8:	e7fe      	b.n	80024a8 <MemManage_Handler+0x4>

080024aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024aa:	b480      	push	{r7}
 80024ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024ae:	e7fe      	b.n	80024ae <BusFault_Handler+0x4>

080024b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024b4:	e7fe      	b.n	80024b4 <UsageFault_Handler+0x4>

080024b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024b6:	b480      	push	{r7}
 80024b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024ba:	bf00      	nop
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024c8:	bf00      	nop
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024d2:	b480      	push	{r7}
 80024d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024d6:	bf00      	nop
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024e4:	f000 f9d8 	bl	8002898 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024e8:	bf00      	nop
 80024ea:	bd80      	pop	{r7, pc}

080024ec <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80024f0:	4802      	ldr	r0, [pc, #8]	; (80024fc <DMA1_Channel1_IRQHandler+0x10>)
 80024f2:	f002 f8dc 	bl	80046ae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80024f6:	bf00      	nop
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	200002f8 	.word	0x200002f8

08002500 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002504:	4802      	ldr	r0, [pc, #8]	; (8002510 <DMA1_Channel6_IRQHandler+0x10>)
 8002506:	f002 f8d2 	bl	80046ae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800250a:	bf00      	nop
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	200004a4 	.word	0x200004a4

08002514 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002518:	4802      	ldr	r0, [pc, #8]	; (8002524 <DMA1_Channel7_IRQHandler+0x10>)
 800251a:	f002 f8c8 	bl	80046ae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800251e:	bf00      	nop
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	2000045c 	.word	0x2000045c

08002528 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800252c:	4802      	ldr	r0, [pc, #8]	; (8002538 <ADC1_2_IRQHandler+0x10>)
 800252e:	f000 fee3 	bl	80032f8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002532:	bf00      	nop
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	20000294 	.word	0x20000294

0800253c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002540:	4802      	ldr	r0, [pc, #8]	; (800254c <TIM3_IRQHandler+0x10>)
 8002542:	f004 fc85 	bl	8006e50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002546:	bf00      	nop
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	2000038c 	.word	0x2000038c

08002550 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002554:	4802      	ldr	r0, [pc, #8]	; (8002560 <USART2_IRQHandler+0x10>)
 8002556:	f005 fe35 	bl	80081c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800255a:	bf00      	nop
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	200003d8 	.word	0x200003d8

08002564 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
	return 1;
 8002568:	2301      	movs	r3, #1
}
 800256a:	4618      	mov	r0, r3
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <_kill>:

int _kill(int pid, int sig)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800257e:	f007 f98b 	bl	8009898 <__errno>
 8002582:	4603      	mov	r3, r0
 8002584:	2216      	movs	r2, #22
 8002586:	601a      	str	r2, [r3, #0]
	return -1;
 8002588:	f04f 33ff 	mov.w	r3, #4294967295
}
 800258c:	4618      	mov	r0, r3
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <_exit>:

void _exit (int status)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800259c:	f04f 31ff 	mov.w	r1, #4294967295
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f7ff ffe7 	bl	8002574 <_kill>
	while (1) {}		/* Make sure we hang here */
 80025a6:	e7fe      	b.n	80025a6 <_exit+0x12>

080025a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025b4:	2300      	movs	r3, #0
 80025b6:	617b      	str	r3, [r7, #20]
 80025b8:	e00a      	b.n	80025d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80025ba:	f3af 8000 	nop.w
 80025be:	4601      	mov	r1, r0
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	1c5a      	adds	r2, r3, #1
 80025c4:	60ba      	str	r2, [r7, #8]
 80025c6:	b2ca      	uxtb	r2, r1
 80025c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	3301      	adds	r3, #1
 80025ce:	617b      	str	r3, [r7, #20]
 80025d0:	697a      	ldr	r2, [r7, #20]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	dbf0      	blt.n	80025ba <_read+0x12>
	}

return len;
 80025d8:	687b      	ldr	r3, [r7, #4]
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3718      	adds	r7, #24
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80025e2:	b480      	push	{r7}
 80025e4:	b083      	sub	sp, #12
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
	return -1;
 80025ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b083      	sub	sp, #12
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
 8002602:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800260a:	605a      	str	r2, [r3, #4]
	return 0;
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr

0800261a <_isatty>:

int _isatty(int file)
{
 800261a:	b480      	push	{r7}
 800261c:	b083      	sub	sp, #12
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
	return 1;
 8002622:	2301      	movs	r3, #1
}
 8002624:	4618      	mov	r0, r3
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
	return 0;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3714      	adds	r7, #20
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
	...

0800264c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002654:	4a14      	ldr	r2, [pc, #80]	; (80026a8 <_sbrk+0x5c>)
 8002656:	4b15      	ldr	r3, [pc, #84]	; (80026ac <_sbrk+0x60>)
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002660:	4b13      	ldr	r3, [pc, #76]	; (80026b0 <_sbrk+0x64>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d102      	bne.n	800266e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002668:	4b11      	ldr	r3, [pc, #68]	; (80026b0 <_sbrk+0x64>)
 800266a:	4a12      	ldr	r2, [pc, #72]	; (80026b4 <_sbrk+0x68>)
 800266c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800266e:	4b10      	ldr	r3, [pc, #64]	; (80026b0 <_sbrk+0x64>)
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4413      	add	r3, r2
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	429a      	cmp	r2, r3
 800267a:	d207      	bcs.n	800268c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800267c:	f007 f90c 	bl	8009898 <__errno>
 8002680:	4603      	mov	r3, r0
 8002682:	220c      	movs	r2, #12
 8002684:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002686:	f04f 33ff 	mov.w	r3, #4294967295
 800268a:	e009      	b.n	80026a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800268c:	4b08      	ldr	r3, [pc, #32]	; (80026b0 <_sbrk+0x64>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002692:	4b07      	ldr	r3, [pc, #28]	; (80026b0 <_sbrk+0x64>)
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4413      	add	r3, r2
 800269a:	4a05      	ldr	r2, [pc, #20]	; (80026b0 <_sbrk+0x64>)
 800269c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800269e:	68fb      	ldr	r3, [r7, #12]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3718      	adds	r7, #24
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	20018000 	.word	0x20018000
 80026ac:	00000400 	.word	0x00000400
 80026b0:	2000054c 	.word	0x2000054c
 80026b4:	20000568 	.word	0x20000568

080026b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80026bc:	4b06      	ldr	r3, [pc, #24]	; (80026d8 <SystemInit+0x20>)
 80026be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c2:	4a05      	ldr	r2, [pc, #20]	; (80026d8 <SystemInit+0x20>)
 80026c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80026cc:	bf00      	nop
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	e000ed00 	.word	0xe000ed00

080026dc <load_adc>:
	 return concat_value;
}*/



int load_adc(ADC_HandleTypeDef hadc, int polTime) {
 80026dc:	b084      	sub	sp, #16
 80026de:	b580      	push	{r7, lr}
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	f107 0c08 	add.w	ip, r7, #8
 80026e6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	HAL_ADC_Start(&hadc);
 80026ea:	f107 0008 	add.w	r0, r7, #8
 80026ee:	f000 fc63 	bl	8002fb8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, polTime);
 80026f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026f4:	4619      	mov	r1, r3
 80026f6:	f107 0008 	add.w	r0, r7, #8
 80026fa:	f000 fd17 	bl	800312c <HAL_ADC_PollForConversion>
	return HAL_ADC_GetValue(&hadc);
 80026fe:	f107 0008 	add.w	r0, r7, #8
 8002702:	f000 fdeb 	bl	80032dc <HAL_ADC_GetValue>
 8002706:	4603      	mov	r3, r0



}
 8002708:	4618      	mov	r0, r3
 800270a:	46bd      	mov	sp, r7
 800270c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002710:	b004      	add	sp, #16
 8002712:	4770      	bx	lr

08002714 <mapping_adc_value>:

int mapping_adc_value(int val){
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
	remap = 1512 +  (val * 2583/4095);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f640 2217 	movw	r2, #2583	; 0xa17
 8002722:	fb02 f303 	mul.w	r3, r2, r3
 8002726:	4a0f      	ldr	r2, [pc, #60]	; (8002764 <mapping_adc_value+0x50>)
 8002728:	fb82 1203 	smull	r1, r2, r2, r3
 800272c:	441a      	add	r2, r3
 800272e:	12d2      	asrs	r2, r2, #11
 8002730:	17db      	asrs	r3, r3, #31
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	f503 63bd 	add.w	r3, r3, #1512	; 0x5e8
 8002738:	ee07 3a90 	vmov	s15, r3
 800273c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002740:	4b09      	ldr	r3, [pc, #36]	; (8002768 <mapping_adc_value+0x54>)
 8002742:	edc3 7a00 	vstr	s15, [r3]
	int map =  remap;
 8002746:	4b08      	ldr	r3, [pc, #32]	; (8002768 <mapping_adc_value+0x54>)
 8002748:	edd3 7a00 	vldr	s15, [r3]
 800274c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002750:	ee17 3a90 	vmov	r3, s15
 8002754:	60fb      	str	r3, [r7, #12]
	return map;
 8002756:	68fb      	ldr	r3, [r7, #12]
}
 8002758:	4618      	mov	r0, r3
 800275a:	3714      	adds	r7, #20
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	80080081 	.word	0x80080081
 8002768:	20000550 	.word	0x20000550

0800276c <load_pwm>:

void load_pwm(TIM_HandleTypeDef htimX, int val) {
 800276c:	b084      	sub	sp, #16
 800276e:	b490      	push	{r4, r7}
 8002770:	af00      	add	r7, sp, #0
 8002772:	f107 0408 	add.w	r4, r7, #8
 8002776:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	htimX.Instance->CCR2 = val;
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800277e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002780:	bf00      	nop
 8002782:	46bd      	mov	sp, r7
 8002784:	bc90      	pop	{r4, r7}
 8002786:	b004      	add	sp, #16
 8002788:	4770      	bx	lr
	...

0800278c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800278c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027c4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002790:	f7ff ff92 	bl	80026b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002794:	480c      	ldr	r0, [pc, #48]	; (80027c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002796:	490d      	ldr	r1, [pc, #52]	; (80027cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002798:	4a0d      	ldr	r2, [pc, #52]	; (80027d0 <LoopForever+0xe>)
  movs r3, #0
 800279a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800279c:	e002      	b.n	80027a4 <LoopCopyDataInit>

0800279e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800279e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027a2:	3304      	adds	r3, #4

080027a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027a8:	d3f9      	bcc.n	800279e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027aa:	4a0a      	ldr	r2, [pc, #40]	; (80027d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80027ac:	4c0a      	ldr	r4, [pc, #40]	; (80027d8 <LoopForever+0x16>)
  movs r3, #0
 80027ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027b0:	e001      	b.n	80027b6 <LoopFillZerobss>

080027b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027b4:	3204      	adds	r2, #4

080027b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027b8:	d3fb      	bcc.n	80027b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027ba:	f007 f873 	bl	80098a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80027be:	f7fe fc45 	bl	800104c <main>

080027c2 <LoopForever>:

LoopForever:
    b LoopForever
 80027c2:	e7fe      	b.n	80027c2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80027c4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80027c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027cc:	20000278 	.word	0x20000278
  ldr r2, =_sidata
 80027d0:	0800e9c4 	.word	0x0800e9c4
  ldr r2, =_sbss
 80027d4:	20000278 	.word	0x20000278
  ldr r4, =_ebss
 80027d8:	20000568 	.word	0x20000568

080027dc <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80027dc:	e7fe      	b.n	80027dc <ADC3_IRQHandler>
	...

080027e0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80027e6:	2300      	movs	r3, #0
 80027e8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027ea:	4b0c      	ldr	r3, [pc, #48]	; (800281c <HAL_Init+0x3c>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a0b      	ldr	r2, [pc, #44]	; (800281c <HAL_Init+0x3c>)
 80027f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027f4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027f6:	2003      	movs	r0, #3
 80027f8:	f001 fde0 	bl	80043bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027fc:	2000      	movs	r0, #0
 80027fe:	f000 f80f 	bl	8002820 <HAL_InitTick>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d002      	beq.n	800280e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	71fb      	strb	r3, [r7, #7]
 800280c:	e001      	b.n	8002812 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800280e:	f7ff fc05 	bl	800201c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002812:	79fb      	ldrb	r3, [r7, #7]
}
 8002814:	4618      	mov	r0, r3
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40022000 	.word	0x40022000

08002820 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002828:	2300      	movs	r3, #0
 800282a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800282c:	4b17      	ldr	r3, [pc, #92]	; (800288c <HAL_InitTick+0x6c>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d023      	beq.n	800287c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002834:	4b16      	ldr	r3, [pc, #88]	; (8002890 <HAL_InitTick+0x70>)
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	4b14      	ldr	r3, [pc, #80]	; (800288c <HAL_InitTick+0x6c>)
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	4619      	mov	r1, r3
 800283e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002842:	fbb3 f3f1 	udiv	r3, r3, r1
 8002846:	fbb2 f3f3 	udiv	r3, r2, r3
 800284a:	4618      	mov	r0, r3
 800284c:	f001 fdeb 	bl	8004426 <HAL_SYSTICK_Config>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d10f      	bne.n	8002876 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2b0f      	cmp	r3, #15
 800285a:	d809      	bhi.n	8002870 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800285c:	2200      	movs	r2, #0
 800285e:	6879      	ldr	r1, [r7, #4]
 8002860:	f04f 30ff 	mov.w	r0, #4294967295
 8002864:	f001 fdb5 	bl	80043d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002868:	4a0a      	ldr	r2, [pc, #40]	; (8002894 <HAL_InitTick+0x74>)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6013      	str	r3, [r2, #0]
 800286e:	e007      	b.n	8002880 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	73fb      	strb	r3, [r7, #15]
 8002874:	e004      	b.n	8002880 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	73fb      	strb	r3, [r7, #15]
 800287a:	e001      	b.n	8002880 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002880:	7bfb      	ldrb	r3, [r7, #15]
}
 8002882:	4618      	mov	r0, r3
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	200000a0 	.word	0x200000a0
 8002890:	20000090 	.word	0x20000090
 8002894:	2000009c 	.word	0x2000009c

08002898 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800289c:	4b06      	ldr	r3, [pc, #24]	; (80028b8 <HAL_IncTick+0x20>)
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	461a      	mov	r2, r3
 80028a2:	4b06      	ldr	r3, [pc, #24]	; (80028bc <HAL_IncTick+0x24>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4413      	add	r3, r2
 80028a8:	4a04      	ldr	r2, [pc, #16]	; (80028bc <HAL_IncTick+0x24>)
 80028aa:	6013      	str	r3, [r2, #0]
}
 80028ac:	bf00      	nop
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	200000a0 	.word	0x200000a0
 80028bc:	20000554 	.word	0x20000554

080028c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  return uwTick;
 80028c4:	4b03      	ldr	r3, [pc, #12]	; (80028d4 <HAL_GetTick+0x14>)
 80028c6:	681b      	ldr	r3, [r3, #0]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	20000554 	.word	0x20000554

080028d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028e0:	f7ff ffee 	bl	80028c0 <HAL_GetTick>
 80028e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f0:	d005      	beq.n	80028fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80028f2:	4b0a      	ldr	r3, [pc, #40]	; (800291c <HAL_Delay+0x44>)
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	461a      	mov	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	4413      	add	r3, r2
 80028fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028fe:	bf00      	nop
 8002900:	f7ff ffde 	bl	80028c0 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	429a      	cmp	r2, r3
 800290e:	d8f7      	bhi.n	8002900 <HAL_Delay+0x28>
  {
  }
}
 8002910:	bf00      	nop
 8002912:	bf00      	nop
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	200000a0 	.word	0x200000a0

08002920 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	431a      	orrs	r2, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	609a      	str	r2, [r3, #8]
}
 800293a:	bf00      	nop
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr

08002946 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002946:	b480      	push	{r7}
 8002948:	b083      	sub	sp, #12
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
 800294e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	431a      	orrs	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	609a      	str	r2, [r3, #8]
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800297c:	4618      	mov	r0, r3
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002988:	b480      	push	{r7}
 800298a:	b087      	sub	sp, #28
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	607a      	str	r2, [r7, #4]
 8002994:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	3360      	adds	r3, #96	; 0x60
 800299a:	461a      	mov	r2, r3
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4413      	add	r3, r2
 80029a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	4b08      	ldr	r3, [pc, #32]	; (80029cc <LL_ADC_SetOffset+0x44>)
 80029aa:	4013      	ands	r3, r2
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80029b2:	683a      	ldr	r2, [r7, #0]
 80029b4:	430a      	orrs	r2, r1
 80029b6:	4313      	orrs	r3, r2
 80029b8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80029c0:	bf00      	nop
 80029c2:	371c      	adds	r7, #28
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr
 80029cc:	03fff000 	.word	0x03fff000

080029d0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	3360      	adds	r3, #96	; 0x60
 80029de:	461a      	mov	r2, r3
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	4413      	add	r3, r2
 80029e6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3714      	adds	r7, #20
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b087      	sub	sp, #28
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	3360      	adds	r3, #96	; 0x60
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	4413      	add	r3, r2
 8002a14:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	431a      	orrs	r2, r3
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002a26:	bf00      	nop
 8002a28:	371c      	adds	r7, #28
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr

08002a32 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002a32:	b480      	push	{r7}
 8002a34:	b083      	sub	sp, #12
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002a46:	2301      	movs	r3, #1
 8002a48:	e000      	b.n	8002a4c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002a4a:	2300      	movs	r3, #0
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b087      	sub	sp, #28
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	3330      	adds	r3, #48	; 0x30
 8002a68:	461a      	mov	r2, r3
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	0a1b      	lsrs	r3, r3, #8
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	f003 030c 	and.w	r3, r3, #12
 8002a74:	4413      	add	r3, r2
 8002a76:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	f003 031f 	and.w	r3, r3, #31
 8002a82:	211f      	movs	r1, #31
 8002a84:	fa01 f303 	lsl.w	r3, r1, r3
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	401a      	ands	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	0e9b      	lsrs	r3, r3, #26
 8002a90:	f003 011f 	and.w	r1, r3, #31
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	f003 031f 	and.w	r3, r3, #31
 8002a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002aa4:	bf00      	nop
 8002aa6:	371c      	adds	r7, #28
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002abc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d101      	bne.n	8002ac8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e000      	b.n	8002aca <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b087      	sub	sp, #28
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	60f8      	str	r0, [r7, #12]
 8002ade:	60b9      	str	r1, [r7, #8]
 8002ae0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	3314      	adds	r3, #20
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	0e5b      	lsrs	r3, r3, #25
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	f003 0304 	and.w	r3, r3, #4
 8002af2:	4413      	add	r3, r2
 8002af4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	0d1b      	lsrs	r3, r3, #20
 8002afe:	f003 031f 	and.w	r3, r3, #31
 8002b02:	2107      	movs	r1, #7
 8002b04:	fa01 f303 	lsl.w	r3, r1, r3
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	401a      	ands	r2, r3
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	0d1b      	lsrs	r3, r3, #20
 8002b10:	f003 031f 	and.w	r3, r3, #31
 8002b14:	6879      	ldr	r1, [r7, #4]
 8002b16:	fa01 f303 	lsl.w	r3, r1, r3
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002b20:	bf00      	nop
 8002b22:	371c      	adds	r7, #28
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b085      	sub	sp, #20
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b44:	43db      	mvns	r3, r3
 8002b46:	401a      	ands	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f003 0318 	and.w	r3, r3, #24
 8002b4e:	4908      	ldr	r1, [pc, #32]	; (8002b70 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002b50:	40d9      	lsrs	r1, r3
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	400b      	ands	r3, r1
 8002b56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002b62:	bf00      	nop
 8002b64:	3714      	adds	r7, #20
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	0007ffff 	.word	0x0007ffff

08002b74 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f003 031f 	and.w	r3, r3, #31
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002bbc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	6093      	str	r3, [r2, #8]
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002be0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002be4:	d101      	bne.n	8002bea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002be6:	2301      	movs	r3, #1
 8002be8:	e000      	b.n	8002bec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002c08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c0c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c34:	d101      	bne.n	8002c3a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002c36:	2301      	movs	r3, #1
 8002c38:	e000      	b.n	8002c3c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c58:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c5c:	f043 0201 	orr.w	r2, r3, #1
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f003 0301 	and.w	r3, r3, #1
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d101      	bne.n	8002c88 <LL_ADC_IsEnabled+0x18>
 8002c84:	2301      	movs	r3, #1
 8002c86:	e000      	b.n	8002c8a <LL_ADC_IsEnabled+0x1a>
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr

08002c96 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002c96:	b480      	push	{r7}
 8002c98:	b083      	sub	sp, #12
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ca6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002caa:	f043 0204 	orr.w	r2, r3, #4
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002cb2:	bf00      	nop
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b083      	sub	sp, #12
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f003 0304 	and.w	r3, r3, #4
 8002cce:	2b04      	cmp	r3, #4
 8002cd0:	d101      	bne.n	8002cd6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e000      	b.n	8002cd8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f003 0308 	and.w	r3, r3, #8
 8002cf4:	2b08      	cmp	r3, #8
 8002cf6:	d101      	bne.n	8002cfc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e000      	b.n	8002cfe <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
	...

08002d0c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d0c:	b590      	push	{r4, r7, lr}
 8002d0e:	b089      	sub	sp, #36	; 0x24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d14:	2300      	movs	r3, #0
 8002d16:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d101      	bne.n	8002d26 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e136      	b.n	8002f94 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d109      	bne.n	8002d48 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f7ff f995 	bl	8002064 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7ff ff3f 	bl	8002bd0 <LL_ADC_IsDeepPowerDownEnabled>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d004      	beq.n	8002d62 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7ff ff25 	bl	8002bac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7ff ff5a 	bl	8002c20 <LL_ADC_IsInternalRegulatorEnabled>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d115      	bne.n	8002d9e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7ff ff3e 	bl	8002bf8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d7c:	4b87      	ldr	r3, [pc, #540]	; (8002f9c <HAL_ADC_Init+0x290>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	099b      	lsrs	r3, r3, #6
 8002d82:	4a87      	ldr	r2, [pc, #540]	; (8002fa0 <HAL_ADC_Init+0x294>)
 8002d84:	fba2 2303 	umull	r2, r3, r2, r3
 8002d88:	099b      	lsrs	r3, r3, #6
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d90:	e002      	b.n	8002d98 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	3b01      	subs	r3, #1
 8002d96:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1f9      	bne.n	8002d92 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7ff ff3c 	bl	8002c20 <LL_ADC_IsInternalRegulatorEnabled>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d10d      	bne.n	8002dca <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db2:	f043 0210 	orr.w	r2, r3, #16
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dbe:	f043 0201 	orr.w	r2, r3, #1
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7ff ff75 	bl	8002cbe <LL_ADC_REG_IsConversionOngoing>
 8002dd4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dda:	f003 0310 	and.w	r3, r3, #16
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f040 80cf 	bne.w	8002f82 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	f040 80cb 	bne.w	8002f82 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002df4:	f043 0202 	orr.w	r2, r3, #2
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff ff35 	bl	8002c70 <LL_ADC_IsEnabled>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d115      	bne.n	8002e38 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e0c:	4865      	ldr	r0, [pc, #404]	; (8002fa4 <HAL_ADC_Init+0x298>)
 8002e0e:	f7ff ff2f 	bl	8002c70 <LL_ADC_IsEnabled>
 8002e12:	4604      	mov	r4, r0
 8002e14:	4864      	ldr	r0, [pc, #400]	; (8002fa8 <HAL_ADC_Init+0x29c>)
 8002e16:	f7ff ff2b 	bl	8002c70 <LL_ADC_IsEnabled>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	431c      	orrs	r4, r3
 8002e1e:	4863      	ldr	r0, [pc, #396]	; (8002fac <HAL_ADC_Init+0x2a0>)
 8002e20:	f7ff ff26 	bl	8002c70 <LL_ADC_IsEnabled>
 8002e24:	4603      	mov	r3, r0
 8002e26:	4323      	orrs	r3, r4
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d105      	bne.n	8002e38 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	4619      	mov	r1, r3
 8002e32:	485f      	ldr	r0, [pc, #380]	; (8002fb0 <HAL_ADC_Init+0x2a4>)
 8002e34:	f7ff fd74 	bl	8002920 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	7e5b      	ldrb	r3, [r3, #25]
 8002e3c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e42:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002e48:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002e4e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e56:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d106      	bne.n	8002e74 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	045b      	lsls	r3, r3, #17
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d009      	beq.n	8002e90 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e80:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e88:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68da      	ldr	r2, [r3, #12]
 8002e96:	4b47      	ldr	r3, [pc, #284]	; (8002fb4 <HAL_ADC_Init+0x2a8>)
 8002e98:	4013      	ands	r3, r2
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	6812      	ldr	r2, [r2, #0]
 8002e9e:	69b9      	ldr	r1, [r7, #24]
 8002ea0:	430b      	orrs	r3, r1
 8002ea2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff ff08 	bl	8002cbe <LL_ADC_REG_IsConversionOngoing>
 8002eae:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7ff ff15 	bl	8002ce4 <LL_ADC_INJ_IsConversionOngoing>
 8002eba:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d13d      	bne.n	8002f3e <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d13a      	bne.n	8002f3e <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ecc:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ed4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ee4:	f023 0302 	bic.w	r3, r3, #2
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	6812      	ldr	r2, [r2, #0]
 8002eec:	69b9      	ldr	r1, [r7, #24]
 8002eee:	430b      	orrs	r3, r1
 8002ef0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d118      	bne.n	8002f2e <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002f06:	f023 0304 	bic.w	r3, r3, #4
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002f12:	4311      	orrs	r1, r2
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002f18:	4311      	orrs	r1, r2
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	431a      	orrs	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f042 0201 	orr.w	r2, r2, #1
 8002f2a:	611a      	str	r2, [r3, #16]
 8002f2c:	e007      	b.n	8002f3e <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	691a      	ldr	r2, [r3, #16]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f022 0201 	bic.w	r2, r2, #1
 8002f3c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d10c      	bne.n	8002f60 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4c:	f023 010f 	bic.w	r1, r3, #15
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	69db      	ldr	r3, [r3, #28]
 8002f54:	1e5a      	subs	r2, r3, #1
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	631a      	str	r2, [r3, #48]	; 0x30
 8002f5e:	e007      	b.n	8002f70 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f022 020f 	bic.w	r2, r2, #15
 8002f6e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f74:	f023 0303 	bic.w	r3, r3, #3
 8002f78:	f043 0201 	orr.w	r2, r3, #1
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	655a      	str	r2, [r3, #84]	; 0x54
 8002f80:	e007      	b.n	8002f92 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f86:	f043 0210 	orr.w	r2, r3, #16
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f92:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3724      	adds	r7, #36	; 0x24
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd90      	pop	{r4, r7, pc}
 8002f9c:	20000090 	.word	0x20000090
 8002fa0:	053e2d63 	.word	0x053e2d63
 8002fa4:	50040000 	.word	0x50040000
 8002fa8:	50040100 	.word	0x50040100
 8002fac:	50040200 	.word	0x50040200
 8002fb0:	50040300 	.word	0x50040300
 8002fb4:	fff0c007 	.word	0xfff0c007

08002fb8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b086      	sub	sp, #24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002fc0:	4857      	ldr	r0, [pc, #348]	; (8003120 <HAL_ADC_Start+0x168>)
 8002fc2:	f7ff fdd7 	bl	8002b74 <LL_ADC_GetMultimode>
 8002fc6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7ff fe76 	bl	8002cbe <LL_ADC_REG_IsConversionOngoing>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f040 809c 	bne.w	8003112 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d101      	bne.n	8002fe8 <HAL_ADC_Start+0x30>
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	e097      	b.n	8003118 <HAL_ADC_Start+0x160>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f000 ffa9 	bl	8003f48 <ADC_Enable>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002ffa:	7dfb      	ldrb	r3, [r7, #23]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f040 8083 	bne.w	8003108 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003006:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800300a:	f023 0301 	bic.w	r3, r3, #1
 800300e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a42      	ldr	r2, [pc, #264]	; (8003124 <HAL_ADC_Start+0x16c>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d002      	beq.n	8003026 <HAL_ADC_Start+0x6e>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	e000      	b.n	8003028 <HAL_ADC_Start+0x70>
 8003026:	4b40      	ldr	r3, [pc, #256]	; (8003128 <HAL_ADC_Start+0x170>)
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	6812      	ldr	r2, [r2, #0]
 800302c:	4293      	cmp	r3, r2
 800302e:	d002      	beq.n	8003036 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d105      	bne.n	8003042 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800303a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003046:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800304a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800304e:	d106      	bne.n	800305e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003054:	f023 0206 	bic.w	r2, r3, #6
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	659a      	str	r2, [r3, #88]	; 0x58
 800305c:	e002      	b.n	8003064 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	221c      	movs	r2, #28
 800306a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a2a      	ldr	r2, [pc, #168]	; (8003124 <HAL_ADC_Start+0x16c>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d002      	beq.n	8003084 <HAL_ADC_Start+0xcc>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	e000      	b.n	8003086 <HAL_ADC_Start+0xce>
 8003084:	4b28      	ldr	r3, [pc, #160]	; (8003128 <HAL_ADC_Start+0x170>)
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	6812      	ldr	r2, [r2, #0]
 800308a:	4293      	cmp	r3, r2
 800308c:	d008      	beq.n	80030a0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d005      	beq.n	80030a0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	2b05      	cmp	r3, #5
 8003098:	d002      	beq.n	80030a0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	2b09      	cmp	r3, #9
 800309e:	d114      	bne.n	80030ca <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d007      	beq.n	80030be <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80030b6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7ff fde7 	bl	8002c96 <LL_ADC_REG_StartConversion>
 80030c8:	e025      	b.n	8003116 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a12      	ldr	r2, [pc, #72]	; (8003124 <HAL_ADC_Start+0x16c>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d002      	beq.n	80030e6 <HAL_ADC_Start+0x12e>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	e000      	b.n	80030e8 <HAL_ADC_Start+0x130>
 80030e6:	4b10      	ldr	r3, [pc, #64]	; (8003128 <HAL_ADC_Start+0x170>)
 80030e8:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00f      	beq.n	8003116 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030fa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80030fe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	655a      	str	r2, [r3, #84]	; 0x54
 8003106:	e006      	b.n	8003116 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003110:	e001      	b.n	8003116 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003112:	2302      	movs	r3, #2
 8003114:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003116:	7dfb      	ldrb	r3, [r7, #23]
}
 8003118:	4618      	mov	r0, r3
 800311a:	3718      	adds	r7, #24
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	50040300 	.word	0x50040300
 8003124:	50040100 	.word	0x50040100
 8003128:	50040000 	.word	0x50040000

0800312c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b088      	sub	sp, #32
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003136:	4866      	ldr	r0, [pc, #408]	; (80032d0 <HAL_ADC_PollForConversion+0x1a4>)
 8003138:	f7ff fd1c 	bl	8002b74 <LL_ADC_GetMultimode>
 800313c:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	2b08      	cmp	r3, #8
 8003144:	d102      	bne.n	800314c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003146:	2308      	movs	r3, #8
 8003148:	61fb      	str	r3, [r7, #28]
 800314a:	e02a      	b.n	80031a2 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d005      	beq.n	800315e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	2b05      	cmp	r3, #5
 8003156:	d002      	beq.n	800315e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	2b09      	cmp	r3, #9
 800315c:	d111      	bne.n	8003182 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	f003 0301 	and.w	r3, r3, #1
 8003168:	2b00      	cmp	r3, #0
 800316a:	d007      	beq.n	800317c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003170:	f043 0220 	orr.w	r2, r3, #32
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e0a4      	b.n	80032c6 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800317c:	2304      	movs	r3, #4
 800317e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003180:	e00f      	b.n	80031a2 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003182:	4853      	ldr	r0, [pc, #332]	; (80032d0 <HAL_ADC_PollForConversion+0x1a4>)
 8003184:	f7ff fd04 	bl	8002b90 <LL_ADC_GetMultiDMATransfer>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d007      	beq.n	800319e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003192:	f043 0220 	orr.w	r2, r3, #32
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e093      	b.n	80032c6 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800319e:	2304      	movs	r3, #4
 80031a0:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80031a2:	f7ff fb8d 	bl	80028c0 <HAL_GetTick>
 80031a6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80031a8:	e021      	b.n	80031ee <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b0:	d01d      	beq.n	80031ee <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80031b2:	f7ff fb85 	bl	80028c0 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	683a      	ldr	r2, [r7, #0]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d302      	bcc.n	80031c8 <HAL_ADC_PollForConversion+0x9c>
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d112      	bne.n	80031ee <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	4013      	ands	r3, r2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d10b      	bne.n	80031ee <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031da:	f043 0204 	orr.w	r2, r3, #4
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e06b      	b.n	80032c6 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	4013      	ands	r3, r2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d0d6      	beq.n	80031aa <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003200:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff fc10 	bl	8002a32 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d01c      	beq.n	8003252 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	7e5b      	ldrb	r3, [r3, #25]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d118      	bne.n	8003252 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0308 	and.w	r3, r3, #8
 800322a:	2b08      	cmp	r3, #8
 800322c:	d111      	bne.n	8003252 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003232:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800323e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d105      	bne.n	8003252 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800324a:	f043 0201 	orr.w	r2, r3, #1
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a1f      	ldr	r2, [pc, #124]	; (80032d4 <HAL_ADC_PollForConversion+0x1a8>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d002      	beq.n	8003262 <HAL_ADC_PollForConversion+0x136>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	e000      	b.n	8003264 <HAL_ADC_PollForConversion+0x138>
 8003262:	4b1d      	ldr	r3, [pc, #116]	; (80032d8 <HAL_ADC_PollForConversion+0x1ac>)
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	6812      	ldr	r2, [r2, #0]
 8003268:	4293      	cmp	r3, r2
 800326a:	d008      	beq.n	800327e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d005      	beq.n	800327e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	2b05      	cmp	r3, #5
 8003276:	d002      	beq.n	800327e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	2b09      	cmp	r3, #9
 800327c:	d104      	bne.n	8003288 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	61bb      	str	r3, [r7, #24]
 8003286:	e00c      	b.n	80032a2 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a11      	ldr	r2, [pc, #68]	; (80032d4 <HAL_ADC_PollForConversion+0x1a8>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d002      	beq.n	8003298 <HAL_ADC_PollForConversion+0x16c>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	e000      	b.n	800329a <HAL_ADC_PollForConversion+0x16e>
 8003298:	4b0f      	ldr	r3, [pc, #60]	; (80032d8 <HAL_ADC_PollForConversion+0x1ac>)
 800329a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	2b08      	cmp	r3, #8
 80032a6:	d104      	bne.n	80032b2 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2208      	movs	r2, #8
 80032ae:	601a      	str	r2, [r3, #0]
 80032b0:	e008      	b.n	80032c4 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d103      	bne.n	80032c4 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	220c      	movs	r2, #12
 80032c2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3720      	adds	r7, #32
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	50040300 	.word	0x50040300
 80032d4:	50040100 	.word	0x50040100
 80032d8:	50040000 	.word	0x50040000

080032dc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
	...

080032f8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b08a      	sub	sp, #40	; 0x28
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003300:	2300      	movs	r3, #0
 8003302:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003314:	4882      	ldr	r0, [pc, #520]	; (8003520 <HAL_ADC_IRQHandler+0x228>)
 8003316:	f7ff fc2d 	bl	8002b74 <LL_ADC_GetMultimode>
 800331a:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d017      	beq.n	8003356 <HAL_ADC_IRQHandler+0x5e>
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	f003 0302 	and.w	r3, r3, #2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d012      	beq.n	8003356 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003334:	f003 0310 	and.w	r3, r3, #16
 8003338:	2b00      	cmp	r3, #0
 800333a:	d105      	bne.n	8003348 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003340:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 fead 	bl	80040a8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2202      	movs	r2, #2
 8003354:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	f003 0304 	and.w	r3, r3, #4
 800335c:	2b00      	cmp	r3, #0
 800335e:	d004      	beq.n	800336a <HAL_ADC_IRQHandler+0x72>
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	f003 0304 	and.w	r3, r3, #4
 8003366:	2b00      	cmp	r3, #0
 8003368:	d10a      	bne.n	8003380 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003370:	2b00      	cmp	r3, #0
 8003372:	f000 8083 	beq.w	800347c <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	f003 0308 	and.w	r3, r3, #8
 800337c:	2b00      	cmp	r3, #0
 800337e:	d07d      	beq.n	800347c <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003384:	f003 0310 	and.w	r3, r3, #16
 8003388:	2b00      	cmp	r3, #0
 800338a:	d105      	bne.n	8003398 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003390:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4618      	mov	r0, r3
 800339e:	f7ff fb48 	bl	8002a32 <LL_ADC_REG_IsTriggerSourceSWStart>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d062      	beq.n	800346e <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a5d      	ldr	r2, [pc, #372]	; (8003524 <HAL_ADC_IRQHandler+0x22c>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d002      	beq.n	80033b8 <HAL_ADC_IRQHandler+0xc0>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	e000      	b.n	80033ba <HAL_ADC_IRQHandler+0xc2>
 80033b8:	4b5b      	ldr	r3, [pc, #364]	; (8003528 <HAL_ADC_IRQHandler+0x230>)
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	6812      	ldr	r2, [r2, #0]
 80033be:	4293      	cmp	r3, r2
 80033c0:	d008      	beq.n	80033d4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d005      	beq.n	80033d4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	2b05      	cmp	r3, #5
 80033cc:	d002      	beq.n	80033d4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	2b09      	cmp	r3, #9
 80033d2:	d104      	bne.n	80033de <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	623b      	str	r3, [r7, #32]
 80033dc:	e00c      	b.n	80033f8 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a50      	ldr	r2, [pc, #320]	; (8003524 <HAL_ADC_IRQHandler+0x22c>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d002      	beq.n	80033ee <HAL_ADC_IRQHandler+0xf6>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	e000      	b.n	80033f0 <HAL_ADC_IRQHandler+0xf8>
 80033ee:	4b4e      	ldr	r3, [pc, #312]	; (8003528 <HAL_ADC_IRQHandler+0x230>)
 80033f0:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80033f8:	6a3b      	ldr	r3, [r7, #32]
 80033fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d135      	bne.n	800346e <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0308 	and.w	r3, r3, #8
 800340c:	2b08      	cmp	r3, #8
 800340e:	d12e      	bne.n	800346e <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4618      	mov	r0, r3
 8003416:	f7ff fc52 	bl	8002cbe <LL_ADC_REG_IsConversionOngoing>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d11a      	bne.n	8003456 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	685a      	ldr	r2, [r3, #4]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f022 020c 	bic.w	r2, r2, #12
 800342e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003434:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003440:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d112      	bne.n	800346e <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800344c:	f043 0201 	orr.w	r2, r3, #1
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	655a      	str	r2, [r3, #84]	; 0x54
 8003454:	e00b      	b.n	800346e <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800345a:	f043 0210 	orr.w	r2, r3, #16
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003466:	f043 0201 	orr.w	r2, r3, #1
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 f95c 	bl	800372c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	220c      	movs	r2, #12
 800347a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	f003 0320 	and.w	r3, r3, #32
 8003482:	2b00      	cmp	r3, #0
 8003484:	d004      	beq.n	8003490 <HAL_ADC_IRQHandler+0x198>
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	f003 0320 	and.w	r3, r3, #32
 800348c:	2b00      	cmp	r3, #0
 800348e:	d10b      	bne.n	80034a8 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003496:	2b00      	cmp	r3, #0
 8003498:	f000 809f 	beq.w	80035da <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f000 8099 	beq.w	80035da <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ac:	f003 0310 	and.w	r3, r3, #16
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d105      	bne.n	80034c0 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7ff faf3 	bl	8002ab0 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80034ca:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7ff faae 	bl	8002a32 <LL_ADC_REG_IsTriggerSourceSWStart>
 80034d6:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a11      	ldr	r2, [pc, #68]	; (8003524 <HAL_ADC_IRQHandler+0x22c>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d002      	beq.n	80034e8 <HAL_ADC_IRQHandler+0x1f0>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	e000      	b.n	80034ea <HAL_ADC_IRQHandler+0x1f2>
 80034e8:	4b0f      	ldr	r3, [pc, #60]	; (8003528 <HAL_ADC_IRQHandler+0x230>)
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	6812      	ldr	r2, [r2, #0]
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d008      	beq.n	8003504 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d005      	beq.n	8003504 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	2b06      	cmp	r3, #6
 80034fc:	d002      	beq.n	8003504 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	2b07      	cmp	r3, #7
 8003502:	d104      	bne.n	800350e <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	623b      	str	r3, [r7, #32]
 800350c:	e013      	b.n	8003536 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a04      	ldr	r2, [pc, #16]	; (8003524 <HAL_ADC_IRQHandler+0x22c>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d009      	beq.n	800352c <HAL_ADC_IRQHandler+0x234>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	e007      	b.n	800352e <HAL_ADC_IRQHandler+0x236>
 800351e:	bf00      	nop
 8003520:	50040300 	.word	0x50040300
 8003524:	50040100 	.word	0x50040100
 8003528:	50040000 	.word	0x50040000
 800352c:	4b7d      	ldr	r3, [pc, #500]	; (8003724 <HAL_ADC_IRQHandler+0x42c>)
 800352e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d047      	beq.n	80035cc <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800353c:	6a3b      	ldr	r3, [r7, #32]
 800353e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d007      	beq.n	8003556 <HAL_ADC_IRQHandler+0x25e>
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d03f      	beq.n	80035cc <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800354c:	6a3b      	ldr	r3, [r7, #32]
 800354e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003552:	2b00      	cmp	r3, #0
 8003554:	d13a      	bne.n	80035cc <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003560:	2b40      	cmp	r3, #64	; 0x40
 8003562:	d133      	bne.n	80035cc <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003564:	6a3b      	ldr	r3, [r7, #32]
 8003566:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d12e      	bne.n	80035cc <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4618      	mov	r0, r3
 8003574:	f7ff fbb6 	bl	8002ce4 <LL_ADC_INJ_IsConversionOngoing>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d11a      	bne.n	80035b4 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	685a      	ldr	r2, [r3, #4]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800358c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003592:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800359e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d112      	bne.n	80035cc <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035aa:	f043 0201 	orr.w	r2, r3, #1
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	655a      	str	r2, [r3, #84]	; 0x54
 80035b2:	e00b      	b.n	80035cc <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b8:	f043 0210 	orr.w	r2, r3, #16
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c4:	f043 0201 	orr.w	r2, r3, #1
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 fd43 	bl	8004058 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2260      	movs	r2, #96	; 0x60
 80035d8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d011      	beq.n	8003608 <HAL_ADC_IRQHandler+0x310>
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00c      	beq.n	8003608 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 f8a0 	bl	8003740 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2280      	movs	r2, #128	; 0x80
 8003606:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800360e:	2b00      	cmp	r3, #0
 8003610:	d012      	beq.n	8003638 <HAL_ADC_IRQHandler+0x340>
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003618:	2b00      	cmp	r3, #0
 800361a:	d00d      	beq.n	8003638 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003620:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f000 fd29 	bl	8004080 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003636:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800363e:	2b00      	cmp	r3, #0
 8003640:	d012      	beq.n	8003668 <HAL_ADC_IRQHandler+0x370>
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00d      	beq.n	8003668 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003650:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f000 fd1b 	bl	8004094 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003666:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	f003 0310 	and.w	r3, r3, #16
 800366e:	2b00      	cmp	r3, #0
 8003670:	d036      	beq.n	80036e0 <HAL_ADC_IRQHandler+0x3e8>
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	f003 0310 	and.w	r3, r3, #16
 8003678:	2b00      	cmp	r3, #0
 800367a:	d031      	beq.n	80036e0 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003680:	2b00      	cmp	r3, #0
 8003682:	d102      	bne.n	800368a <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8003684:	2301      	movs	r3, #1
 8003686:	627b      	str	r3, [r7, #36]	; 0x24
 8003688:	e014      	b.n	80036b4 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d008      	beq.n	80036a2 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003690:	4825      	ldr	r0, [pc, #148]	; (8003728 <HAL_ADC_IRQHandler+0x430>)
 8003692:	f7ff fa7d 	bl	8002b90 <LL_ADC_GetMultiDMATransfer>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00b      	beq.n	80036b4 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 800369c:	2301      	movs	r3, #1
 800369e:	627b      	str	r3, [r7, #36]	; 0x24
 80036a0:	e008      	b.n	80036b4 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	f003 0301 	and.w	r3, r3, #1
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d001      	beq.n	80036b4 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 80036b0:	2301      	movs	r3, #1
 80036b2:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80036b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d10e      	bne.n	80036d8 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036be:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ca:	f043 0202 	orr.w	r2, r3, #2
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 f83e 	bl	8003754 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2210      	movs	r2, #16
 80036de:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d018      	beq.n	800371c <HAL_ADC_IRQHandler+0x424>
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d013      	beq.n	800371c <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f8:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003704:	f043 0208 	orr.w	r2, r3, #8
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003714:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 fca8 	bl	800406c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800371c:	bf00      	nop
 800371e:	3728      	adds	r7, #40	; 0x28
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	50040000 	.word	0x50040000
 8003728:	50040300 	.word	0x50040300

0800372c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003734:	bf00      	nop
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003748:	bf00      	nop
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b0b6      	sub	sp, #216	; 0xd8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003772:	2300      	movs	r3, #0
 8003774:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003778:	2300      	movs	r3, #0
 800377a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003782:	2b01      	cmp	r3, #1
 8003784:	d101      	bne.n	800378a <HAL_ADC_ConfigChannel+0x22>
 8003786:	2302      	movs	r3, #2
 8003788:	e3c7      	b.n	8003f1a <HAL_ADC_ConfigChannel+0x7b2>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4618      	mov	r0, r3
 8003798:	f7ff fa91 	bl	8002cbe <LL_ADC_REG_IsConversionOngoing>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	f040 83a8 	bne.w	8003ef4 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	2b05      	cmp	r3, #5
 80037aa:	d824      	bhi.n	80037f6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	3b02      	subs	r3, #2
 80037b2:	2b03      	cmp	r3, #3
 80037b4:	d81b      	bhi.n	80037ee <HAL_ADC_ConfigChannel+0x86>
 80037b6:	a201      	add	r2, pc, #4	; (adr r2, 80037bc <HAL_ADC_ConfigChannel+0x54>)
 80037b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037bc:	080037cd 	.word	0x080037cd
 80037c0:	080037d5 	.word	0x080037d5
 80037c4:	080037dd 	.word	0x080037dd
 80037c8:	080037e5 	.word	0x080037e5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	220c      	movs	r2, #12
 80037d0:	605a      	str	r2, [r3, #4]
          break;
 80037d2:	e011      	b.n	80037f8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	2212      	movs	r2, #18
 80037d8:	605a      	str	r2, [r3, #4]
          break;
 80037da:	e00d      	b.n	80037f8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	2218      	movs	r2, #24
 80037e0:	605a      	str	r2, [r3, #4]
          break;
 80037e2:	e009      	b.n	80037f8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037ea:	605a      	str	r2, [r3, #4]
          break;
 80037ec:	e004      	b.n	80037f8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	2206      	movs	r2, #6
 80037f2:	605a      	str	r2, [r3, #4]
          break;
 80037f4:	e000      	b.n	80037f8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80037f6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6818      	ldr	r0, [r3, #0]
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	6859      	ldr	r1, [r3, #4]
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	461a      	mov	r2, r3
 8003806:	f7ff f927 	bl	8002a58 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4618      	mov	r0, r3
 8003810:	f7ff fa55 	bl	8002cbe <LL_ADC_REG_IsConversionOngoing>
 8003814:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4618      	mov	r0, r3
 800381e:	f7ff fa61 	bl	8002ce4 <LL_ADC_INJ_IsConversionOngoing>
 8003822:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003826:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800382a:	2b00      	cmp	r3, #0
 800382c:	f040 81a6 	bne.w	8003b7c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003830:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003834:	2b00      	cmp	r3, #0
 8003836:	f040 81a1 	bne.w	8003b7c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6818      	ldr	r0, [r3, #0]
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	6819      	ldr	r1, [r3, #0]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	461a      	mov	r2, r3
 8003848:	f7ff f945 	bl	8002ad6 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	695a      	ldr	r2, [r3, #20]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	08db      	lsrs	r3, r3, #3
 8003858:	f003 0303 	and.w	r3, r3, #3
 800385c:	005b      	lsls	r3, r3, #1
 800385e:	fa02 f303 	lsl.w	r3, r2, r3
 8003862:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	2b04      	cmp	r3, #4
 800386c:	d00a      	beq.n	8003884 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6818      	ldr	r0, [r3, #0]
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	6919      	ldr	r1, [r3, #16]
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800387e:	f7ff f883 	bl	8002988 <LL_ADC_SetOffset>
 8003882:	e17b      	b.n	8003b7c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2100      	movs	r1, #0
 800388a:	4618      	mov	r0, r3
 800388c:	f7ff f8a0 	bl	80029d0 <LL_ADC_GetOffsetChannel>
 8003890:	4603      	mov	r3, r0
 8003892:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003896:	2b00      	cmp	r3, #0
 8003898:	d10a      	bne.n	80038b0 <HAL_ADC_ConfigChannel+0x148>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2100      	movs	r1, #0
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7ff f895 	bl	80029d0 <LL_ADC_GetOffsetChannel>
 80038a6:	4603      	mov	r3, r0
 80038a8:	0e9b      	lsrs	r3, r3, #26
 80038aa:	f003 021f 	and.w	r2, r3, #31
 80038ae:	e01e      	b.n	80038ee <HAL_ADC_ConfigChannel+0x186>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2100      	movs	r1, #0
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7ff f88a 	bl	80029d0 <LL_ADC_GetOffsetChannel>
 80038bc:	4603      	mov	r3, r0
 80038be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80038c6:	fa93 f3a3 	rbit	r3, r3
 80038ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80038ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80038d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80038d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80038de:	2320      	movs	r3, #32
 80038e0:	e004      	b.n	80038ec <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80038e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80038e6:	fab3 f383 	clz	r3, r3
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d105      	bne.n	8003906 <HAL_ADC_ConfigChannel+0x19e>
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	0e9b      	lsrs	r3, r3, #26
 8003900:	f003 031f 	and.w	r3, r3, #31
 8003904:	e018      	b.n	8003938 <HAL_ADC_ConfigChannel+0x1d0>
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800390e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003912:	fa93 f3a3 	rbit	r3, r3
 8003916:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800391a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800391e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003922:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800392a:	2320      	movs	r3, #32
 800392c:	e004      	b.n	8003938 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800392e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003932:	fab3 f383 	clz	r3, r3
 8003936:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003938:	429a      	cmp	r2, r3
 800393a:	d106      	bne.n	800394a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2200      	movs	r2, #0
 8003942:	2100      	movs	r1, #0
 8003944:	4618      	mov	r0, r3
 8003946:	f7ff f859 	bl	80029fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2101      	movs	r1, #1
 8003950:	4618      	mov	r0, r3
 8003952:	f7ff f83d 	bl	80029d0 <LL_ADC_GetOffsetChannel>
 8003956:	4603      	mov	r3, r0
 8003958:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800395c:	2b00      	cmp	r3, #0
 800395e:	d10a      	bne.n	8003976 <HAL_ADC_ConfigChannel+0x20e>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2101      	movs	r1, #1
 8003966:	4618      	mov	r0, r3
 8003968:	f7ff f832 	bl	80029d0 <LL_ADC_GetOffsetChannel>
 800396c:	4603      	mov	r3, r0
 800396e:	0e9b      	lsrs	r3, r3, #26
 8003970:	f003 021f 	and.w	r2, r3, #31
 8003974:	e01e      	b.n	80039b4 <HAL_ADC_ConfigChannel+0x24c>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2101      	movs	r1, #1
 800397c:	4618      	mov	r0, r3
 800397e:	f7ff f827 	bl	80029d0 <LL_ADC_GetOffsetChannel>
 8003982:	4603      	mov	r3, r0
 8003984:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003988:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800398c:	fa93 f3a3 	rbit	r3, r3
 8003990:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003994:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003998:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800399c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d101      	bne.n	80039a8 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80039a4:	2320      	movs	r3, #32
 80039a6:	e004      	b.n	80039b2 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80039a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80039ac:	fab3 f383 	clz	r3, r3
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d105      	bne.n	80039cc <HAL_ADC_ConfigChannel+0x264>
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	0e9b      	lsrs	r3, r3, #26
 80039c6:	f003 031f 	and.w	r3, r3, #31
 80039ca:	e018      	b.n	80039fe <HAL_ADC_ConfigChannel+0x296>
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80039d8:	fa93 f3a3 	rbit	r3, r3
 80039dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80039e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80039e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80039e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d101      	bne.n	80039f4 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80039f0:	2320      	movs	r3, #32
 80039f2:	e004      	b.n	80039fe <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80039f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80039f8:	fab3 f383 	clz	r3, r3
 80039fc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d106      	bne.n	8003a10 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2200      	movs	r2, #0
 8003a08:	2101      	movs	r1, #1
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7fe fff6 	bl	80029fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2102      	movs	r1, #2
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7fe ffda 	bl	80029d0 <LL_ADC_GetOffsetChannel>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d10a      	bne.n	8003a3c <HAL_ADC_ConfigChannel+0x2d4>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2102      	movs	r1, #2
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7fe ffcf 	bl	80029d0 <LL_ADC_GetOffsetChannel>
 8003a32:	4603      	mov	r3, r0
 8003a34:	0e9b      	lsrs	r3, r3, #26
 8003a36:	f003 021f 	and.w	r2, r3, #31
 8003a3a:	e01e      	b.n	8003a7a <HAL_ADC_ConfigChannel+0x312>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2102      	movs	r1, #2
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7fe ffc4 	bl	80029d0 <LL_ADC_GetOffsetChannel>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a52:	fa93 f3a3 	rbit	r3, r3
 8003a56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003a5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003a62:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d101      	bne.n	8003a6e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8003a6a:	2320      	movs	r3, #32
 8003a6c:	e004      	b.n	8003a78 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003a6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003a72:	fab3 f383 	clz	r3, r3
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d105      	bne.n	8003a92 <HAL_ADC_ConfigChannel+0x32a>
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	0e9b      	lsrs	r3, r3, #26
 8003a8c:	f003 031f 	and.w	r3, r3, #31
 8003a90:	e016      	b.n	8003ac0 <HAL_ADC_ConfigChannel+0x358>
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a9e:	fa93 f3a3 	rbit	r3, r3
 8003aa2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003aa4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003aa6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003aaa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8003ab2:	2320      	movs	r3, #32
 8003ab4:	e004      	b.n	8003ac0 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8003ab6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003aba:	fab3 f383 	clz	r3, r3
 8003abe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d106      	bne.n	8003ad2 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	2102      	movs	r1, #2
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7fe ff95 	bl	80029fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2103      	movs	r1, #3
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7fe ff79 	bl	80029d0 <LL_ADC_GetOffsetChannel>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d10a      	bne.n	8003afe <HAL_ADC_ConfigChannel+0x396>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2103      	movs	r1, #3
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7fe ff6e 	bl	80029d0 <LL_ADC_GetOffsetChannel>
 8003af4:	4603      	mov	r3, r0
 8003af6:	0e9b      	lsrs	r3, r3, #26
 8003af8:	f003 021f 	and.w	r2, r3, #31
 8003afc:	e017      	b.n	8003b2e <HAL_ADC_ConfigChannel+0x3c6>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2103      	movs	r1, #3
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7fe ff63 	bl	80029d0 <LL_ADC_GetOffsetChannel>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b10:	fa93 f3a3 	rbit	r3, r3
 8003b14:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003b16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b18:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003b1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d101      	bne.n	8003b24 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8003b20:	2320      	movs	r3, #32
 8003b22:	e003      	b.n	8003b2c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003b24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b26:	fab3 f383 	clz	r3, r3
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d105      	bne.n	8003b46 <HAL_ADC_ConfigChannel+0x3de>
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	0e9b      	lsrs	r3, r3, #26
 8003b40:	f003 031f 	and.w	r3, r3, #31
 8003b44:	e011      	b.n	8003b6a <HAL_ADC_ConfigChannel+0x402>
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b4e:	fa93 f3a3 	rbit	r3, r3
 8003b52:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003b54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b56:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003b58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8003b5e:	2320      	movs	r3, #32
 8003b60:	e003      	b.n	8003b6a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8003b62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b64:	fab3 f383 	clz	r3, r3
 8003b68:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d106      	bne.n	8003b7c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2200      	movs	r2, #0
 8003b74:	2103      	movs	r1, #3
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7fe ff40 	bl	80029fc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7ff f875 	bl	8002c70 <LL_ADC_IsEnabled>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f040 813f 	bne.w	8003e0c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6818      	ldr	r0, [r3, #0]
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	6819      	ldr	r1, [r3, #0]
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	f7fe ffc6 	bl	8002b2c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	4a8e      	ldr	r2, [pc, #568]	; (8003de0 <HAL_ADC_ConfigChannel+0x678>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	f040 8130 	bne.w	8003e0c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d10b      	bne.n	8003bd4 <HAL_ADC_ConfigChannel+0x46c>
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	0e9b      	lsrs	r3, r3, #26
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	f003 031f 	and.w	r3, r3, #31
 8003bc8:	2b09      	cmp	r3, #9
 8003bca:	bf94      	ite	ls
 8003bcc:	2301      	movls	r3, #1
 8003bce:	2300      	movhi	r3, #0
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	e019      	b.n	8003c08 <HAL_ADC_ConfigChannel+0x4a0>
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bdc:	fa93 f3a3 	rbit	r3, r3
 8003be0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003be2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003be4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003be6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d101      	bne.n	8003bf0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003bec:	2320      	movs	r3, #32
 8003bee:	e003      	b.n	8003bf8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003bf0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bf2:	fab3 f383 	clz	r3, r3
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	f003 031f 	and.w	r3, r3, #31
 8003bfe:	2b09      	cmp	r3, #9
 8003c00:	bf94      	ite	ls
 8003c02:	2301      	movls	r3, #1
 8003c04:	2300      	movhi	r3, #0
 8003c06:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d079      	beq.n	8003d00 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d107      	bne.n	8003c28 <HAL_ADC_ConfigChannel+0x4c0>
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	0e9b      	lsrs	r3, r3, #26
 8003c1e:	3301      	adds	r3, #1
 8003c20:	069b      	lsls	r3, r3, #26
 8003c22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c26:	e015      	b.n	8003c54 <HAL_ADC_ConfigChannel+0x4ec>
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c30:	fa93 f3a3 	rbit	r3, r3
 8003c34:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003c36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c38:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003c3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d101      	bne.n	8003c44 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8003c40:	2320      	movs	r3, #32
 8003c42:	e003      	b.n	8003c4c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8003c44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c46:	fab3 f383 	clz	r3, r3
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	069b      	lsls	r3, r3, #26
 8003c50:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d109      	bne.n	8003c74 <HAL_ADC_ConfigChannel+0x50c>
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	0e9b      	lsrs	r3, r3, #26
 8003c66:	3301      	adds	r3, #1
 8003c68:	f003 031f 	and.w	r3, r3, #31
 8003c6c:	2101      	movs	r1, #1
 8003c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c72:	e017      	b.n	8003ca4 <HAL_ADC_ConfigChannel+0x53c>
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c7c:	fa93 f3a3 	rbit	r3, r3
 8003c80:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003c82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c84:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003c86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d101      	bne.n	8003c90 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8003c8c:	2320      	movs	r3, #32
 8003c8e:	e003      	b.n	8003c98 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8003c90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c92:	fab3 f383 	clz	r3, r3
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	3301      	adds	r3, #1
 8003c9a:	f003 031f 	and.w	r3, r3, #31
 8003c9e:	2101      	movs	r1, #1
 8003ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ca4:	ea42 0103 	orr.w	r1, r2, r3
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d10a      	bne.n	8003cca <HAL_ADC_ConfigChannel+0x562>
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	0e9b      	lsrs	r3, r3, #26
 8003cba:	3301      	adds	r3, #1
 8003cbc:	f003 021f 	and.w	r2, r3, #31
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	005b      	lsls	r3, r3, #1
 8003cc4:	4413      	add	r3, r2
 8003cc6:	051b      	lsls	r3, r3, #20
 8003cc8:	e018      	b.n	8003cfc <HAL_ADC_ConfigChannel+0x594>
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd2:	fa93 f3a3 	rbit	r3, r3
 8003cd6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cda:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8003ce2:	2320      	movs	r3, #32
 8003ce4:	e003      	b.n	8003cee <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8003ce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ce8:	fab3 f383 	clz	r3, r3
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	3301      	adds	r3, #1
 8003cf0:	f003 021f 	and.w	r2, r3, #31
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	005b      	lsls	r3, r3, #1
 8003cf8:	4413      	add	r3, r2
 8003cfa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003cfc:	430b      	orrs	r3, r1
 8003cfe:	e080      	b.n	8003e02 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d107      	bne.n	8003d1c <HAL_ADC_ConfigChannel+0x5b4>
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	0e9b      	lsrs	r3, r3, #26
 8003d12:	3301      	adds	r3, #1
 8003d14:	069b      	lsls	r3, r3, #26
 8003d16:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d1a:	e015      	b.n	8003d48 <HAL_ADC_ConfigChannel+0x5e0>
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d24:	fa93 f3a3 	rbit	r3, r3
 8003d28:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d2c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d101      	bne.n	8003d38 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003d34:	2320      	movs	r3, #32
 8003d36:	e003      	b.n	8003d40 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8003d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3a:	fab3 f383 	clz	r3, r3
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	3301      	adds	r3, #1
 8003d42:	069b      	lsls	r3, r3, #26
 8003d44:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d109      	bne.n	8003d68 <HAL_ADC_ConfigChannel+0x600>
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	0e9b      	lsrs	r3, r3, #26
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	f003 031f 	and.w	r3, r3, #31
 8003d60:	2101      	movs	r1, #1
 8003d62:	fa01 f303 	lsl.w	r3, r1, r3
 8003d66:	e017      	b.n	8003d98 <HAL_ADC_ConfigChannel+0x630>
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d6e:	6a3b      	ldr	r3, [r7, #32]
 8003d70:	fa93 f3a3 	rbit	r3, r3
 8003d74:	61fb      	str	r3, [r7, #28]
  return result;
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d101      	bne.n	8003d84 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8003d80:	2320      	movs	r3, #32
 8003d82:	e003      	b.n	8003d8c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8003d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d86:	fab3 f383 	clz	r3, r3
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	f003 031f 	and.w	r3, r3, #31
 8003d92:	2101      	movs	r1, #1
 8003d94:	fa01 f303 	lsl.w	r3, r1, r3
 8003d98:	ea42 0103 	orr.w	r1, r2, r3
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d10d      	bne.n	8003dc4 <HAL_ADC_ConfigChannel+0x65c>
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	0e9b      	lsrs	r3, r3, #26
 8003dae:	3301      	adds	r3, #1
 8003db0:	f003 021f 	and.w	r2, r3, #31
 8003db4:	4613      	mov	r3, r2
 8003db6:	005b      	lsls	r3, r3, #1
 8003db8:	4413      	add	r3, r2
 8003dba:	3b1e      	subs	r3, #30
 8003dbc:	051b      	lsls	r3, r3, #20
 8003dbe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003dc2:	e01d      	b.n	8003e00 <HAL_ADC_ConfigChannel+0x698>
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	fa93 f3a3 	rbit	r3, r3
 8003dd0:	613b      	str	r3, [r7, #16]
  return result;
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d103      	bne.n	8003de4 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003ddc:	2320      	movs	r3, #32
 8003dde:	e005      	b.n	8003dec <HAL_ADC_ConfigChannel+0x684>
 8003de0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	fab3 f383 	clz	r3, r3
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	3301      	adds	r3, #1
 8003dee:	f003 021f 	and.w	r2, r3, #31
 8003df2:	4613      	mov	r3, r2
 8003df4:	005b      	lsls	r3, r3, #1
 8003df6:	4413      	add	r3, r2
 8003df8:	3b1e      	subs	r3, #30
 8003dfa:	051b      	lsls	r3, r3, #20
 8003dfc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e00:	430b      	orrs	r3, r1
 8003e02:	683a      	ldr	r2, [r7, #0]
 8003e04:	6892      	ldr	r2, [r2, #8]
 8003e06:	4619      	mov	r1, r3
 8003e08:	f7fe fe65 	bl	8002ad6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	4b44      	ldr	r3, [pc, #272]	; (8003f24 <HAL_ADC_ConfigChannel+0x7bc>)
 8003e12:	4013      	ands	r3, r2
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d07a      	beq.n	8003f0e <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e18:	4843      	ldr	r0, [pc, #268]	; (8003f28 <HAL_ADC_ConfigChannel+0x7c0>)
 8003e1a:	f7fe fda7 	bl	800296c <LL_ADC_GetCommonPathInternalCh>
 8003e1e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a41      	ldr	r2, [pc, #260]	; (8003f2c <HAL_ADC_ConfigChannel+0x7c4>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d12c      	bne.n	8003e86 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003e2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d126      	bne.n	8003e86 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a3c      	ldr	r2, [pc, #240]	; (8003f30 <HAL_ADC_ConfigChannel+0x7c8>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d004      	beq.n	8003e4c <HAL_ADC_ConfigChannel+0x6e4>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a3b      	ldr	r2, [pc, #236]	; (8003f34 <HAL_ADC_ConfigChannel+0x7cc>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d15d      	bne.n	8003f08 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e50:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e54:	4619      	mov	r1, r3
 8003e56:	4834      	ldr	r0, [pc, #208]	; (8003f28 <HAL_ADC_ConfigChannel+0x7c0>)
 8003e58:	f7fe fd75 	bl	8002946 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e5c:	4b36      	ldr	r3, [pc, #216]	; (8003f38 <HAL_ADC_ConfigChannel+0x7d0>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	099b      	lsrs	r3, r3, #6
 8003e62:	4a36      	ldr	r2, [pc, #216]	; (8003f3c <HAL_ADC_ConfigChannel+0x7d4>)
 8003e64:	fba2 2303 	umull	r2, r3, r2, r3
 8003e68:	099b      	lsrs	r3, r3, #6
 8003e6a:	1c5a      	adds	r2, r3, #1
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	4413      	add	r3, r2
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003e76:	e002      	b.n	8003e7e <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1f9      	bne.n	8003e78 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e84:	e040      	b.n	8003f08 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a2d      	ldr	r2, [pc, #180]	; (8003f40 <HAL_ADC_ConfigChannel+0x7d8>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d118      	bne.n	8003ec2 <HAL_ADC_ConfigChannel+0x75a>
 8003e90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d112      	bne.n	8003ec2 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a23      	ldr	r2, [pc, #140]	; (8003f30 <HAL_ADC_ConfigChannel+0x7c8>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d004      	beq.n	8003eb0 <HAL_ADC_ConfigChannel+0x748>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a22      	ldr	r2, [pc, #136]	; (8003f34 <HAL_ADC_ConfigChannel+0x7cc>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d12d      	bne.n	8003f0c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003eb0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003eb4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003eb8:	4619      	mov	r1, r3
 8003eba:	481b      	ldr	r0, [pc, #108]	; (8003f28 <HAL_ADC_ConfigChannel+0x7c0>)
 8003ebc:	f7fe fd43 	bl	8002946 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ec0:	e024      	b.n	8003f0c <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a1f      	ldr	r2, [pc, #124]	; (8003f44 <HAL_ADC_ConfigChannel+0x7dc>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d120      	bne.n	8003f0e <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003ecc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ed0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d11a      	bne.n	8003f0e <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a14      	ldr	r2, [pc, #80]	; (8003f30 <HAL_ADC_ConfigChannel+0x7c8>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d115      	bne.n	8003f0e <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ee2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ee6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003eea:	4619      	mov	r1, r3
 8003eec:	480e      	ldr	r0, [pc, #56]	; (8003f28 <HAL_ADC_ConfigChannel+0x7c0>)
 8003eee:	f7fe fd2a 	bl	8002946 <LL_ADC_SetCommonPathInternalCh>
 8003ef2:	e00c      	b.n	8003f0e <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef8:	f043 0220 	orr.w	r2, r3, #32
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003f06:	e002      	b.n	8003f0e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f08:	bf00      	nop
 8003f0a:	e000      	b.n	8003f0e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f0c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003f16:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	37d8      	adds	r7, #216	; 0xd8
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	80080000 	.word	0x80080000
 8003f28:	50040300 	.word	0x50040300
 8003f2c:	c7520000 	.word	0xc7520000
 8003f30:	50040000 	.word	0x50040000
 8003f34:	50040200 	.word	0x50040200
 8003f38:	20000090 	.word	0x20000090
 8003f3c:	053e2d63 	.word	0x053e2d63
 8003f40:	cb840000 	.word	0xcb840000
 8003f44:	80000001 	.word	0x80000001

08003f48 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7fe fe8b 	bl	8002c70 <LL_ADC_IsEnabled>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d14d      	bne.n	8003ffc <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	689a      	ldr	r2, [r3, #8]
 8003f66:	4b28      	ldr	r3, [pc, #160]	; (8004008 <ADC_Enable+0xc0>)
 8003f68:	4013      	ands	r3, r2
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00d      	beq.n	8003f8a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f72:	f043 0210 	orr.w	r2, r3, #16
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f7e:	f043 0201 	orr.w	r2, r3, #1
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e039      	b.n	8003ffe <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7fe fe5a 	bl	8002c48 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003f94:	f7fe fc94 	bl	80028c0 <HAL_GetTick>
 8003f98:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f9a:	e028      	b.n	8003fee <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7fe fe65 	bl	8002c70 <LL_ADC_IsEnabled>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d104      	bne.n	8003fb6 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7fe fe49 	bl	8002c48 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003fb6:	f7fe fc83 	bl	80028c0 <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d914      	bls.n	8003fee <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d00d      	beq.n	8003fee <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd6:	f043 0210 	orr.w	r2, r3, #16
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe2:	f043 0201 	orr.w	r2, r3, #1
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e007      	b.n	8003ffe <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0301 	and.w	r3, r3, #1
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d1cf      	bne.n	8003f9c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3710      	adds	r7, #16
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	8000003f 	.word	0x8000003f

0800400c <LL_ADC_IsEnabled>:
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	f003 0301 	and.w	r3, r3, #1
 800401c:	2b01      	cmp	r3, #1
 800401e:	d101      	bne.n	8004024 <LL_ADC_IsEnabled+0x18>
 8004020:	2301      	movs	r3, #1
 8004022:	e000      	b.n	8004026 <LL_ADC_IsEnabled+0x1a>
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	370c      	adds	r7, #12
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr

08004032 <LL_ADC_REG_IsConversionOngoing>:
{
 8004032:	b480      	push	{r7}
 8004034:	b083      	sub	sp, #12
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f003 0304 	and.w	r3, r3, #4
 8004042:	2b04      	cmp	r3, #4
 8004044:	d101      	bne.n	800404a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004046:	2301      	movs	r3, #1
 8004048:	e000      	b.n	800404c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800404a:	2300      	movs	r3, #0
}
 800404c:	4618      	mov	r0, r3
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004060:	bf00      	nop
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004074:	bf00      	nop
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80040b0:	bf00      	nop
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80040bc:	b590      	push	{r4, r7, lr}
 80040be:	b09f      	sub	sp, #124	; 0x7c
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040c6:	2300      	movs	r3, #0
 80040c8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d101      	bne.n	80040da <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80040d6:	2302      	movs	r3, #2
 80040d8:	e093      	b.n	8004202 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80040e2:	2300      	movs	r3, #0
 80040e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80040e6:	2300      	movs	r3, #0
 80040e8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a47      	ldr	r2, [pc, #284]	; (800420c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d102      	bne.n	80040fa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80040f4:	4b46      	ldr	r3, [pc, #280]	; (8004210 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80040f6:	60bb      	str	r3, [r7, #8]
 80040f8:	e001      	b.n	80040fe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80040fa:	2300      	movs	r3, #0
 80040fc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d10b      	bne.n	800411c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004108:	f043 0220 	orr.w	r2, r3, #32
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e072      	b.n	8004202 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	4618      	mov	r0, r3
 8004120:	f7ff ff87 	bl	8004032 <LL_ADC_REG_IsConversionOngoing>
 8004124:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4618      	mov	r0, r3
 800412c:	f7ff ff81 	bl	8004032 <LL_ADC_REG_IsConversionOngoing>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d154      	bne.n	80041e0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004136:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004138:	2b00      	cmp	r3, #0
 800413a:	d151      	bne.n	80041e0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800413c:	4b35      	ldr	r3, [pc, #212]	; (8004214 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800413e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d02c      	beq.n	80041a2 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004148:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	6859      	ldr	r1, [r3, #4]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800415a:	035b      	lsls	r3, r3, #13
 800415c:	430b      	orrs	r3, r1
 800415e:	431a      	orrs	r2, r3
 8004160:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004162:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004164:	4829      	ldr	r0, [pc, #164]	; (800420c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004166:	f7ff ff51 	bl	800400c <LL_ADC_IsEnabled>
 800416a:	4604      	mov	r4, r0
 800416c:	4828      	ldr	r0, [pc, #160]	; (8004210 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800416e:	f7ff ff4d 	bl	800400c <LL_ADC_IsEnabled>
 8004172:	4603      	mov	r3, r0
 8004174:	431c      	orrs	r4, r3
 8004176:	4828      	ldr	r0, [pc, #160]	; (8004218 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004178:	f7ff ff48 	bl	800400c <LL_ADC_IsEnabled>
 800417c:	4603      	mov	r3, r0
 800417e:	4323      	orrs	r3, r4
 8004180:	2b00      	cmp	r3, #0
 8004182:	d137      	bne.n	80041f4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004184:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800418c:	f023 030f 	bic.w	r3, r3, #15
 8004190:	683a      	ldr	r2, [r7, #0]
 8004192:	6811      	ldr	r1, [r2, #0]
 8004194:	683a      	ldr	r2, [r7, #0]
 8004196:	6892      	ldr	r2, [r2, #8]
 8004198:	430a      	orrs	r2, r1
 800419a:	431a      	orrs	r2, r3
 800419c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800419e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80041a0:	e028      	b.n	80041f4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80041a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041ac:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80041ae:	4817      	ldr	r0, [pc, #92]	; (800420c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80041b0:	f7ff ff2c 	bl	800400c <LL_ADC_IsEnabled>
 80041b4:	4604      	mov	r4, r0
 80041b6:	4816      	ldr	r0, [pc, #88]	; (8004210 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80041b8:	f7ff ff28 	bl	800400c <LL_ADC_IsEnabled>
 80041bc:	4603      	mov	r3, r0
 80041be:	431c      	orrs	r4, r3
 80041c0:	4815      	ldr	r0, [pc, #84]	; (8004218 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80041c2:	f7ff ff23 	bl	800400c <LL_ADC_IsEnabled>
 80041c6:	4603      	mov	r3, r0
 80041c8:	4323      	orrs	r3, r4
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d112      	bne.n	80041f4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80041ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80041d6:	f023 030f 	bic.w	r3, r3, #15
 80041da:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80041dc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80041de:	e009      	b.n	80041f4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e4:	f043 0220 	orr.w	r2, r3, #32
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80041f2:	e000      	b.n	80041f6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80041f4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80041fe:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004202:	4618      	mov	r0, r3
 8004204:	377c      	adds	r7, #124	; 0x7c
 8004206:	46bd      	mov	sp, r7
 8004208:	bd90      	pop	{r4, r7, pc}
 800420a:	bf00      	nop
 800420c:	50040000 	.word	0x50040000
 8004210:	50040100 	.word	0x50040100
 8004214:	50040300 	.word	0x50040300
 8004218:	50040200 	.word	0x50040200

0800421c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f003 0307 	and.w	r3, r3, #7
 800422a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800422c:	4b0c      	ldr	r3, [pc, #48]	; (8004260 <__NVIC_SetPriorityGrouping+0x44>)
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004232:	68ba      	ldr	r2, [r7, #8]
 8004234:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004238:	4013      	ands	r3, r2
 800423a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004244:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004248:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800424c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800424e:	4a04      	ldr	r2, [pc, #16]	; (8004260 <__NVIC_SetPriorityGrouping+0x44>)
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	60d3      	str	r3, [r2, #12]
}
 8004254:	bf00      	nop
 8004256:	3714      	adds	r7, #20
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr
 8004260:	e000ed00 	.word	0xe000ed00

08004264 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004264:	b480      	push	{r7}
 8004266:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004268:	4b04      	ldr	r3, [pc, #16]	; (800427c <__NVIC_GetPriorityGrouping+0x18>)
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	0a1b      	lsrs	r3, r3, #8
 800426e:	f003 0307 	and.w	r3, r3, #7
}
 8004272:	4618      	mov	r0, r3
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr
 800427c:	e000ed00 	.word	0xe000ed00

08004280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	4603      	mov	r3, r0
 8004288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800428a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800428e:	2b00      	cmp	r3, #0
 8004290:	db0b      	blt.n	80042aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004292:	79fb      	ldrb	r3, [r7, #7]
 8004294:	f003 021f 	and.w	r2, r3, #31
 8004298:	4907      	ldr	r1, [pc, #28]	; (80042b8 <__NVIC_EnableIRQ+0x38>)
 800429a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800429e:	095b      	lsrs	r3, r3, #5
 80042a0:	2001      	movs	r0, #1
 80042a2:	fa00 f202 	lsl.w	r2, r0, r2
 80042a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80042aa:	bf00      	nop
 80042ac:	370c      	adds	r7, #12
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	e000e100 	.word	0xe000e100

080042bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	4603      	mov	r3, r0
 80042c4:	6039      	str	r1, [r7, #0]
 80042c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	db0a      	blt.n	80042e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	b2da      	uxtb	r2, r3
 80042d4:	490c      	ldr	r1, [pc, #48]	; (8004308 <__NVIC_SetPriority+0x4c>)
 80042d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042da:	0112      	lsls	r2, r2, #4
 80042dc:	b2d2      	uxtb	r2, r2
 80042de:	440b      	add	r3, r1
 80042e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042e4:	e00a      	b.n	80042fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	b2da      	uxtb	r2, r3
 80042ea:	4908      	ldr	r1, [pc, #32]	; (800430c <__NVIC_SetPriority+0x50>)
 80042ec:	79fb      	ldrb	r3, [r7, #7]
 80042ee:	f003 030f 	and.w	r3, r3, #15
 80042f2:	3b04      	subs	r3, #4
 80042f4:	0112      	lsls	r2, r2, #4
 80042f6:	b2d2      	uxtb	r2, r2
 80042f8:	440b      	add	r3, r1
 80042fa:	761a      	strb	r2, [r3, #24]
}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr
 8004308:	e000e100 	.word	0xe000e100
 800430c:	e000ed00 	.word	0xe000ed00

08004310 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004310:	b480      	push	{r7}
 8004312:	b089      	sub	sp, #36	; 0x24
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f003 0307 	and.w	r3, r3, #7
 8004322:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	f1c3 0307 	rsb	r3, r3, #7
 800432a:	2b04      	cmp	r3, #4
 800432c:	bf28      	it	cs
 800432e:	2304      	movcs	r3, #4
 8004330:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	3304      	adds	r3, #4
 8004336:	2b06      	cmp	r3, #6
 8004338:	d902      	bls.n	8004340 <NVIC_EncodePriority+0x30>
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	3b03      	subs	r3, #3
 800433e:	e000      	b.n	8004342 <NVIC_EncodePriority+0x32>
 8004340:	2300      	movs	r3, #0
 8004342:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004344:	f04f 32ff 	mov.w	r2, #4294967295
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	fa02 f303 	lsl.w	r3, r2, r3
 800434e:	43da      	mvns	r2, r3
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	401a      	ands	r2, r3
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004358:	f04f 31ff 	mov.w	r1, #4294967295
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	fa01 f303 	lsl.w	r3, r1, r3
 8004362:	43d9      	mvns	r1, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004368:	4313      	orrs	r3, r2
         );
}
 800436a:	4618      	mov	r0, r3
 800436c:	3724      	adds	r7, #36	; 0x24
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
	...

08004378 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	3b01      	subs	r3, #1
 8004384:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004388:	d301      	bcc.n	800438e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800438a:	2301      	movs	r3, #1
 800438c:	e00f      	b.n	80043ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800438e:	4a0a      	ldr	r2, [pc, #40]	; (80043b8 <SysTick_Config+0x40>)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	3b01      	subs	r3, #1
 8004394:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004396:	210f      	movs	r1, #15
 8004398:	f04f 30ff 	mov.w	r0, #4294967295
 800439c:	f7ff ff8e 	bl	80042bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043a0:	4b05      	ldr	r3, [pc, #20]	; (80043b8 <SysTick_Config+0x40>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043a6:	4b04      	ldr	r3, [pc, #16]	; (80043b8 <SysTick_Config+0x40>)
 80043a8:	2207      	movs	r2, #7
 80043aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3708      	adds	r7, #8
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	e000e010 	.word	0xe000e010

080043bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f7ff ff29 	bl	800421c <__NVIC_SetPriorityGrouping>
}
 80043ca:	bf00      	nop
 80043cc:	3708      	adds	r7, #8
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b086      	sub	sp, #24
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	4603      	mov	r3, r0
 80043da:	60b9      	str	r1, [r7, #8]
 80043dc:	607a      	str	r2, [r7, #4]
 80043de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80043e0:	2300      	movs	r3, #0
 80043e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80043e4:	f7ff ff3e 	bl	8004264 <__NVIC_GetPriorityGrouping>
 80043e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	68b9      	ldr	r1, [r7, #8]
 80043ee:	6978      	ldr	r0, [r7, #20]
 80043f0:	f7ff ff8e 	bl	8004310 <NVIC_EncodePriority>
 80043f4:	4602      	mov	r2, r0
 80043f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043fa:	4611      	mov	r1, r2
 80043fc:	4618      	mov	r0, r3
 80043fe:	f7ff ff5d 	bl	80042bc <__NVIC_SetPriority>
}
 8004402:	bf00      	nop
 8004404:	3718      	adds	r7, #24
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}

0800440a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800440a:	b580      	push	{r7, lr}
 800440c:	b082      	sub	sp, #8
 800440e:	af00      	add	r7, sp, #0
 8004410:	4603      	mov	r3, r0
 8004412:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004418:	4618      	mov	r0, r3
 800441a:	f7ff ff31 	bl	8004280 <__NVIC_EnableIRQ>
}
 800441e:	bf00      	nop
 8004420:	3708      	adds	r7, #8
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}

08004426 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b082      	sub	sp, #8
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f7ff ffa2 	bl	8004378 <SysTick_Config>
 8004434:	4603      	mov	r3, r0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3708      	adds	r7, #8
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
	...

08004440 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d101      	bne.n	8004452 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e098      	b.n	8004584 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	461a      	mov	r2, r3
 8004458:	4b4d      	ldr	r3, [pc, #308]	; (8004590 <HAL_DMA_Init+0x150>)
 800445a:	429a      	cmp	r2, r3
 800445c:	d80f      	bhi.n	800447e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	461a      	mov	r2, r3
 8004464:	4b4b      	ldr	r3, [pc, #300]	; (8004594 <HAL_DMA_Init+0x154>)
 8004466:	4413      	add	r3, r2
 8004468:	4a4b      	ldr	r2, [pc, #300]	; (8004598 <HAL_DMA_Init+0x158>)
 800446a:	fba2 2303 	umull	r2, r3, r2, r3
 800446e:	091b      	lsrs	r3, r3, #4
 8004470:	009a      	lsls	r2, r3, #2
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a48      	ldr	r2, [pc, #288]	; (800459c <HAL_DMA_Init+0x15c>)
 800447a:	641a      	str	r2, [r3, #64]	; 0x40
 800447c:	e00e      	b.n	800449c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	461a      	mov	r2, r3
 8004484:	4b46      	ldr	r3, [pc, #280]	; (80045a0 <HAL_DMA_Init+0x160>)
 8004486:	4413      	add	r3, r2
 8004488:	4a43      	ldr	r2, [pc, #268]	; (8004598 <HAL_DMA_Init+0x158>)
 800448a:	fba2 2303 	umull	r2, r3, r2, r3
 800448e:	091b      	lsrs	r3, r3, #4
 8004490:	009a      	lsls	r2, r3, #2
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a42      	ldr	r2, [pc, #264]	; (80045a4 <HAL_DMA_Init+0x164>)
 800449a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2202      	movs	r2, #2
 80044a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80044b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044b6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80044c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a1b      	ldr	r3, [r3, #32]
 80044de:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80044e0:	68fa      	ldr	r2, [r7, #12]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044f6:	d039      	beq.n	800456c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fc:	4a27      	ldr	r2, [pc, #156]	; (800459c <HAL_DMA_Init+0x15c>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d11a      	bne.n	8004538 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004502:	4b29      	ldr	r3, [pc, #164]	; (80045a8 <HAL_DMA_Init+0x168>)
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800450a:	f003 031c 	and.w	r3, r3, #28
 800450e:	210f      	movs	r1, #15
 8004510:	fa01 f303 	lsl.w	r3, r1, r3
 8004514:	43db      	mvns	r3, r3
 8004516:	4924      	ldr	r1, [pc, #144]	; (80045a8 <HAL_DMA_Init+0x168>)
 8004518:	4013      	ands	r3, r2
 800451a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800451c:	4b22      	ldr	r3, [pc, #136]	; (80045a8 <HAL_DMA_Init+0x168>)
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6859      	ldr	r1, [r3, #4]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004528:	f003 031c 	and.w	r3, r3, #28
 800452c:	fa01 f303 	lsl.w	r3, r1, r3
 8004530:	491d      	ldr	r1, [pc, #116]	; (80045a8 <HAL_DMA_Init+0x168>)
 8004532:	4313      	orrs	r3, r2
 8004534:	600b      	str	r3, [r1, #0]
 8004536:	e019      	b.n	800456c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004538:	4b1c      	ldr	r3, [pc, #112]	; (80045ac <HAL_DMA_Init+0x16c>)
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004540:	f003 031c 	and.w	r3, r3, #28
 8004544:	210f      	movs	r1, #15
 8004546:	fa01 f303 	lsl.w	r3, r1, r3
 800454a:	43db      	mvns	r3, r3
 800454c:	4917      	ldr	r1, [pc, #92]	; (80045ac <HAL_DMA_Init+0x16c>)
 800454e:	4013      	ands	r3, r2
 8004550:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004552:	4b16      	ldr	r3, [pc, #88]	; (80045ac <HAL_DMA_Init+0x16c>)
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6859      	ldr	r1, [r3, #4]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800455e:	f003 031c 	and.w	r3, r3, #28
 8004562:	fa01 f303 	lsl.w	r3, r1, r3
 8004566:	4911      	ldr	r1, [pc, #68]	; (80045ac <HAL_DMA_Init+0x16c>)
 8004568:	4313      	orrs	r3, r2
 800456a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2201      	movs	r2, #1
 8004576:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004582:	2300      	movs	r3, #0
}
 8004584:	4618      	mov	r0, r3
 8004586:	3714      	adds	r7, #20
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr
 8004590:	40020407 	.word	0x40020407
 8004594:	bffdfff8 	.word	0xbffdfff8
 8004598:	cccccccd 	.word	0xcccccccd
 800459c:	40020000 	.word	0x40020000
 80045a0:	bffdfbf8 	.word	0xbffdfbf8
 80045a4:	40020400 	.word	0x40020400
 80045a8:	400200a8 	.word	0x400200a8
 80045ac:	400204a8 	.word	0x400204a8

080045b0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045b8:	2300      	movs	r3, #0
 80045ba:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	2b02      	cmp	r3, #2
 80045c6:	d008      	beq.n	80045da <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2204      	movs	r2, #4
 80045cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e022      	b.n	8004620 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f022 020e 	bic.w	r2, r2, #14
 80045e8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f022 0201 	bic.w	r2, r2, #1
 80045f8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045fe:	f003 021c 	and.w	r2, r3, #28
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004606:	2101      	movs	r1, #1
 8004608:	fa01 f202 	lsl.w	r2, r1, r2
 800460c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2201      	movs	r2, #1
 8004612:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800461e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004620:	4618      	mov	r0, r3
 8004622:	3714      	adds	r7, #20
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004634:	2300      	movs	r3, #0
 8004636:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800463e:	b2db      	uxtb	r3, r3
 8004640:	2b02      	cmp	r3, #2
 8004642:	d005      	beq.n	8004650 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2204      	movs	r2, #4
 8004648:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	73fb      	strb	r3, [r7, #15]
 800464e:	e029      	b.n	80046a4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f022 020e 	bic.w	r2, r2, #14
 800465e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f022 0201 	bic.w	r2, r2, #1
 800466e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004674:	f003 021c 	and.w	r2, r3, #28
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467c:	2101      	movs	r1, #1
 800467e:	fa01 f202 	lsl.w	r2, r1, r2
 8004682:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004698:	2b00      	cmp	r3, #0
 800469a:	d003      	beq.n	80046a4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	4798      	blx	r3
    }
  }
  return status;
 80046a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3710      	adds	r7, #16
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80046ae:	b580      	push	{r7, lr}
 80046b0:	b084      	sub	sp, #16
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ca:	f003 031c 	and.w	r3, r3, #28
 80046ce:	2204      	movs	r2, #4
 80046d0:	409a      	lsls	r2, r3
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	4013      	ands	r3, r2
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d026      	beq.n	8004728 <HAL_DMA_IRQHandler+0x7a>
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	f003 0304 	and.w	r3, r3, #4
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d021      	beq.n	8004728 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0320 	and.w	r3, r3, #32
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d107      	bne.n	8004702 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f022 0204 	bic.w	r2, r2, #4
 8004700:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004706:	f003 021c 	and.w	r2, r3, #28
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470e:	2104      	movs	r1, #4
 8004710:	fa01 f202 	lsl.w	r2, r1, r2
 8004714:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471a:	2b00      	cmp	r3, #0
 800471c:	d071      	beq.n	8004802 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8004726:	e06c      	b.n	8004802 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800472c:	f003 031c 	and.w	r3, r3, #28
 8004730:	2202      	movs	r2, #2
 8004732:	409a      	lsls	r2, r3
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	4013      	ands	r3, r2
 8004738:	2b00      	cmp	r3, #0
 800473a:	d02e      	beq.n	800479a <HAL_DMA_IRQHandler+0xec>
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	f003 0302 	and.w	r3, r3, #2
 8004742:	2b00      	cmp	r3, #0
 8004744:	d029      	beq.n	800479a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0320 	and.w	r3, r3, #32
 8004750:	2b00      	cmp	r3, #0
 8004752:	d10b      	bne.n	800476c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f022 020a 	bic.w	r2, r2, #10
 8004762:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004770:	f003 021c 	and.w	r2, r3, #28
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004778:	2102      	movs	r1, #2
 800477a:	fa01 f202 	lsl.w	r2, r1, r2
 800477e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478c:	2b00      	cmp	r3, #0
 800478e:	d038      	beq.n	8004802 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004798:	e033      	b.n	8004802 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800479e:	f003 031c 	and.w	r3, r3, #28
 80047a2:	2208      	movs	r2, #8
 80047a4:	409a      	lsls	r2, r3
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	4013      	ands	r3, r2
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d02a      	beq.n	8004804 <HAL_DMA_IRQHandler+0x156>
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	f003 0308 	and.w	r3, r3, #8
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d025      	beq.n	8004804 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f022 020e 	bic.w	r2, r2, #14
 80047c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047cc:	f003 021c 	and.w	r2, r3, #28
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d4:	2101      	movs	r1, #1
 80047d6:	fa01 f202 	lsl.w	r2, r1, r2
 80047da:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2201      	movs	r2, #1
 80047e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d004      	beq.n	8004804 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004802:	bf00      	nop
 8004804:	bf00      	nop
}
 8004806:	3710      	adds	r7, #16
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800480c:	b480      	push	{r7}
 800480e:	b087      	sub	sp, #28
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004816:	2300      	movs	r3, #0
 8004818:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800481a:	e17f      	b.n	8004b1c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	2101      	movs	r1, #1
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	fa01 f303 	lsl.w	r3, r1, r3
 8004828:	4013      	ands	r3, r2
 800482a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2b00      	cmp	r3, #0
 8004830:	f000 8171 	beq.w	8004b16 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f003 0303 	and.w	r3, r3, #3
 800483c:	2b01      	cmp	r3, #1
 800483e:	d005      	beq.n	800484c <HAL_GPIO_Init+0x40>
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	f003 0303 	and.w	r3, r3, #3
 8004848:	2b02      	cmp	r3, #2
 800484a:	d130      	bne.n	80048ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	005b      	lsls	r3, r3, #1
 8004856:	2203      	movs	r2, #3
 8004858:	fa02 f303 	lsl.w	r3, r2, r3
 800485c:	43db      	mvns	r3, r3
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	4013      	ands	r3, r2
 8004862:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	68da      	ldr	r2, [r3, #12]
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	005b      	lsls	r3, r3, #1
 800486c:	fa02 f303 	lsl.w	r3, r2, r3
 8004870:	693a      	ldr	r2, [r7, #16]
 8004872:	4313      	orrs	r3, r2
 8004874:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	693a      	ldr	r2, [r7, #16]
 800487a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004882:	2201      	movs	r2, #1
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	fa02 f303 	lsl.w	r3, r2, r3
 800488a:	43db      	mvns	r3, r3
 800488c:	693a      	ldr	r2, [r7, #16]
 800488e:	4013      	ands	r3, r2
 8004890:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	091b      	lsrs	r3, r3, #4
 8004898:	f003 0201 	and.w	r2, r3, #1
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	fa02 f303 	lsl.w	r3, r2, r3
 80048a2:	693a      	ldr	r2, [r7, #16]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f003 0303 	and.w	r3, r3, #3
 80048b6:	2b03      	cmp	r3, #3
 80048b8:	d118      	bne.n	80048ec <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80048c0:	2201      	movs	r2, #1
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	fa02 f303 	lsl.w	r3, r2, r3
 80048c8:	43db      	mvns	r3, r3
 80048ca:	693a      	ldr	r2, [r7, #16]
 80048cc:	4013      	ands	r3, r2
 80048ce:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	08db      	lsrs	r3, r3, #3
 80048d6:	f003 0201 	and.w	r2, r3, #1
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	fa02 f303 	lsl.w	r3, r2, r3
 80048e0:	693a      	ldr	r2, [r7, #16]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	693a      	ldr	r2, [r7, #16]
 80048ea:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f003 0303 	and.w	r3, r3, #3
 80048f4:	2b03      	cmp	r3, #3
 80048f6:	d017      	beq.n	8004928 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	005b      	lsls	r3, r3, #1
 8004902:	2203      	movs	r2, #3
 8004904:	fa02 f303 	lsl.w	r3, r2, r3
 8004908:	43db      	mvns	r3, r3
 800490a:	693a      	ldr	r2, [r7, #16]
 800490c:	4013      	ands	r3, r2
 800490e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	689a      	ldr	r2, [r3, #8]
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	005b      	lsls	r3, r3, #1
 8004918:	fa02 f303 	lsl.w	r3, r2, r3
 800491c:	693a      	ldr	r2, [r7, #16]
 800491e:	4313      	orrs	r3, r2
 8004920:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	693a      	ldr	r2, [r7, #16]
 8004926:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f003 0303 	and.w	r3, r3, #3
 8004930:	2b02      	cmp	r3, #2
 8004932:	d123      	bne.n	800497c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	08da      	lsrs	r2, r3, #3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	3208      	adds	r2, #8
 800493c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004940:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	f003 0307 	and.w	r3, r3, #7
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	220f      	movs	r2, #15
 800494c:	fa02 f303 	lsl.w	r3, r2, r3
 8004950:	43db      	mvns	r3, r3
 8004952:	693a      	ldr	r2, [r7, #16]
 8004954:	4013      	ands	r3, r2
 8004956:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	691a      	ldr	r2, [r3, #16]
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	f003 0307 	and.w	r3, r3, #7
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	fa02 f303 	lsl.w	r3, r2, r3
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	4313      	orrs	r3, r2
 800496c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	08da      	lsrs	r2, r3, #3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	3208      	adds	r2, #8
 8004976:	6939      	ldr	r1, [r7, #16]
 8004978:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	005b      	lsls	r3, r3, #1
 8004986:	2203      	movs	r2, #3
 8004988:	fa02 f303 	lsl.w	r3, r2, r3
 800498c:	43db      	mvns	r3, r3
 800498e:	693a      	ldr	r2, [r7, #16]
 8004990:	4013      	ands	r3, r2
 8004992:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f003 0203 	and.w	r2, r3, #3
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	005b      	lsls	r3, r3, #1
 80049a0:	fa02 f303 	lsl.w	r3, r2, r3
 80049a4:	693a      	ldr	r2, [r7, #16]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	693a      	ldr	r2, [r7, #16]
 80049ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f000 80ac 	beq.w	8004b16 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049be:	4b5f      	ldr	r3, [pc, #380]	; (8004b3c <HAL_GPIO_Init+0x330>)
 80049c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049c2:	4a5e      	ldr	r2, [pc, #376]	; (8004b3c <HAL_GPIO_Init+0x330>)
 80049c4:	f043 0301 	orr.w	r3, r3, #1
 80049c8:	6613      	str	r3, [r2, #96]	; 0x60
 80049ca:	4b5c      	ldr	r3, [pc, #368]	; (8004b3c <HAL_GPIO_Init+0x330>)
 80049cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	60bb      	str	r3, [r7, #8]
 80049d4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80049d6:	4a5a      	ldr	r2, [pc, #360]	; (8004b40 <HAL_GPIO_Init+0x334>)
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	089b      	lsrs	r3, r3, #2
 80049dc:	3302      	adds	r3, #2
 80049de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	f003 0303 	and.w	r3, r3, #3
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	220f      	movs	r2, #15
 80049ee:	fa02 f303 	lsl.w	r3, r2, r3
 80049f2:	43db      	mvns	r3, r3
 80049f4:	693a      	ldr	r2, [r7, #16]
 80049f6:	4013      	ands	r3, r2
 80049f8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004a00:	d025      	beq.n	8004a4e <HAL_GPIO_Init+0x242>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a4f      	ldr	r2, [pc, #316]	; (8004b44 <HAL_GPIO_Init+0x338>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d01f      	beq.n	8004a4a <HAL_GPIO_Init+0x23e>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a4e      	ldr	r2, [pc, #312]	; (8004b48 <HAL_GPIO_Init+0x33c>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d019      	beq.n	8004a46 <HAL_GPIO_Init+0x23a>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a4d      	ldr	r2, [pc, #308]	; (8004b4c <HAL_GPIO_Init+0x340>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d013      	beq.n	8004a42 <HAL_GPIO_Init+0x236>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a4c      	ldr	r2, [pc, #304]	; (8004b50 <HAL_GPIO_Init+0x344>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d00d      	beq.n	8004a3e <HAL_GPIO_Init+0x232>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a4b      	ldr	r2, [pc, #300]	; (8004b54 <HAL_GPIO_Init+0x348>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d007      	beq.n	8004a3a <HAL_GPIO_Init+0x22e>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a4a      	ldr	r2, [pc, #296]	; (8004b58 <HAL_GPIO_Init+0x34c>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d101      	bne.n	8004a36 <HAL_GPIO_Init+0x22a>
 8004a32:	2306      	movs	r3, #6
 8004a34:	e00c      	b.n	8004a50 <HAL_GPIO_Init+0x244>
 8004a36:	2307      	movs	r3, #7
 8004a38:	e00a      	b.n	8004a50 <HAL_GPIO_Init+0x244>
 8004a3a:	2305      	movs	r3, #5
 8004a3c:	e008      	b.n	8004a50 <HAL_GPIO_Init+0x244>
 8004a3e:	2304      	movs	r3, #4
 8004a40:	e006      	b.n	8004a50 <HAL_GPIO_Init+0x244>
 8004a42:	2303      	movs	r3, #3
 8004a44:	e004      	b.n	8004a50 <HAL_GPIO_Init+0x244>
 8004a46:	2302      	movs	r3, #2
 8004a48:	e002      	b.n	8004a50 <HAL_GPIO_Init+0x244>
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e000      	b.n	8004a50 <HAL_GPIO_Init+0x244>
 8004a4e:	2300      	movs	r3, #0
 8004a50:	697a      	ldr	r2, [r7, #20]
 8004a52:	f002 0203 	and.w	r2, r2, #3
 8004a56:	0092      	lsls	r2, r2, #2
 8004a58:	4093      	lsls	r3, r2
 8004a5a:	693a      	ldr	r2, [r7, #16]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004a60:	4937      	ldr	r1, [pc, #220]	; (8004b40 <HAL_GPIO_Init+0x334>)
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	089b      	lsrs	r3, r3, #2
 8004a66:	3302      	adds	r3, #2
 8004a68:	693a      	ldr	r2, [r7, #16]
 8004a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a6e:	4b3b      	ldr	r3, [pc, #236]	; (8004b5c <HAL_GPIO_Init+0x350>)
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	43db      	mvns	r3, r3
 8004a78:	693a      	ldr	r2, [r7, #16]
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d003      	beq.n	8004a92 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004a92:	4a32      	ldr	r2, [pc, #200]	; (8004b5c <HAL_GPIO_Init+0x350>)
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004a98:	4b30      	ldr	r3, [pc, #192]	; (8004b5c <HAL_GPIO_Init+0x350>)
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	43db      	mvns	r3, r3
 8004aa2:	693a      	ldr	r2, [r7, #16]
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d003      	beq.n	8004abc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004ab4:	693a      	ldr	r2, [r7, #16]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004abc:	4a27      	ldr	r2, [pc, #156]	; (8004b5c <HAL_GPIO_Init+0x350>)
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004ac2:	4b26      	ldr	r3, [pc, #152]	; (8004b5c <HAL_GPIO_Init+0x350>)
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	43db      	mvns	r3, r3
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	4013      	ands	r3, r2
 8004ad0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d003      	beq.n	8004ae6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004ade:	693a      	ldr	r2, [r7, #16]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004ae6:	4a1d      	ldr	r2, [pc, #116]	; (8004b5c <HAL_GPIO_Init+0x350>)
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004aec:	4b1b      	ldr	r3, [pc, #108]	; (8004b5c <HAL_GPIO_Init+0x350>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	43db      	mvns	r3, r3
 8004af6:	693a      	ldr	r2, [r7, #16]
 8004af8:	4013      	ands	r3, r2
 8004afa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d003      	beq.n	8004b10 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004b08:	693a      	ldr	r2, [r7, #16]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004b10:	4a12      	ldr	r2, [pc, #72]	; (8004b5c <HAL_GPIO_Init+0x350>)
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	3301      	adds	r3, #1
 8004b1a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	fa22 f303 	lsr.w	r3, r2, r3
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	f47f ae78 	bne.w	800481c <HAL_GPIO_Init+0x10>
  }
}
 8004b2c:	bf00      	nop
 8004b2e:	bf00      	nop
 8004b30:	371c      	adds	r7, #28
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop
 8004b3c:	40021000 	.word	0x40021000
 8004b40:	40010000 	.word	0x40010000
 8004b44:	48000400 	.word	0x48000400
 8004b48:	48000800 	.word	0x48000800
 8004b4c:	48000c00 	.word	0x48000c00
 8004b50:	48001000 	.word	0x48001000
 8004b54:	48001400 	.word	0x48001400
 8004b58:	48001800 	.word	0x48001800
 8004b5c:	40010400 	.word	0x40010400

08004b60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	460b      	mov	r3, r1
 8004b6a:	807b      	strh	r3, [r7, #2]
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b70:	787b      	ldrb	r3, [r7, #1]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d003      	beq.n	8004b7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004b76:	887a      	ldrh	r2, [r7, #2]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004b7c:	e002      	b.n	8004b84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b7e:	887a      	ldrh	r2, [r7, #2]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004b84:	bf00      	nop
 8004b86:	370c      	adds	r7, #12
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d101      	bne.n	8004ba2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e081      	b.n	8004ca6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d106      	bne.n	8004bbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f7fd faf4 	bl	80021a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2224      	movs	r2, #36	; 0x24
 8004bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f022 0201 	bic.w	r2, r2, #1
 8004bd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685a      	ldr	r2, [r3, #4]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004be0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	689a      	ldr	r2, [r3, #8]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004bf0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d107      	bne.n	8004c0a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	689a      	ldr	r2, [r3, #8]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c06:	609a      	str	r2, [r3, #8]
 8004c08:	e006      	b.n	8004c18 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	689a      	ldr	r2, [r3, #8]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004c16:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	d104      	bne.n	8004c2a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c28:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	6812      	ldr	r2, [r2, #0]
 8004c34:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004c38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c3c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68da      	ldr	r2, [r3, #12]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c4c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	691a      	ldr	r2, [r3, #16]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	695b      	ldr	r3, [r3, #20]
 8004c56:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	699b      	ldr	r3, [r3, #24]
 8004c5e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	430a      	orrs	r2, r1
 8004c66:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	69d9      	ldr	r1, [r3, #28]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a1a      	ldr	r2, [r3, #32]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	430a      	orrs	r2, r1
 8004c76:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f042 0201 	orr.w	r2, r2, #1
 8004c86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2220      	movs	r2, #32
 8004c92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3708      	adds	r7, #8
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
	...

08004cb0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b088      	sub	sp, #32
 8004cb4:	af02      	add	r7, sp, #8
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	4608      	mov	r0, r1
 8004cba:	4611      	mov	r1, r2
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	817b      	strh	r3, [r7, #10]
 8004cc2:	460b      	mov	r3, r1
 8004cc4:	813b      	strh	r3, [r7, #8]
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	2b20      	cmp	r3, #32
 8004cd4:	f040 80fd 	bne.w	8004ed2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cd8:	6a3b      	ldr	r3, [r7, #32]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d002      	beq.n	8004ce4 <HAL_I2C_Mem_Read+0x34>
 8004cde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d105      	bne.n	8004cf0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cea:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e0f1      	b.n	8004ed4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d101      	bne.n	8004cfe <HAL_I2C_Mem_Read+0x4e>
 8004cfa:	2302      	movs	r3, #2
 8004cfc:	e0ea      	b.n	8004ed4 <HAL_I2C_Mem_Read+0x224>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2201      	movs	r2, #1
 8004d02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004d06:	f7fd fddb 	bl	80028c0 <HAL_GetTick>
 8004d0a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	9300      	str	r3, [sp, #0]
 8004d10:	2319      	movs	r3, #25
 8004d12:	2201      	movs	r2, #1
 8004d14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d18:	68f8      	ldr	r0, [r7, #12]
 8004d1a:	f000 f95b 	bl	8004fd4 <I2C_WaitOnFlagUntilTimeout>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d001      	beq.n	8004d28 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e0d5      	b.n	8004ed4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2222      	movs	r2, #34	; 0x22
 8004d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2240      	movs	r2, #64	; 0x40
 8004d34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6a3a      	ldr	r2, [r7, #32]
 8004d42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004d48:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d50:	88f8      	ldrh	r0, [r7, #6]
 8004d52:	893a      	ldrh	r2, [r7, #8]
 8004d54:	8979      	ldrh	r1, [r7, #10]
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	9301      	str	r3, [sp, #4]
 8004d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d5c:	9300      	str	r3, [sp, #0]
 8004d5e:	4603      	mov	r3, r0
 8004d60:	68f8      	ldr	r0, [r7, #12]
 8004d62:	f000 f8bf 	bl	8004ee4 <I2C_RequestMemoryRead>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d005      	beq.n	8004d78 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e0ad      	b.n	8004ed4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	2bff      	cmp	r3, #255	; 0xff
 8004d80:	d90e      	bls.n	8004da0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	22ff      	movs	r2, #255	; 0xff
 8004d86:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d8c:	b2da      	uxtb	r2, r3
 8004d8e:	8979      	ldrh	r1, [r7, #10]
 8004d90:	4b52      	ldr	r3, [pc, #328]	; (8004edc <HAL_I2C_Mem_Read+0x22c>)
 8004d92:	9300      	str	r3, [sp, #0]
 8004d94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d98:	68f8      	ldr	r0, [r7, #12]
 8004d9a:	f000 fac3 	bl	8005324 <I2C_TransferConfig>
 8004d9e:	e00f      	b.n	8004dc0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004da4:	b29a      	uxth	r2, r3
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dae:	b2da      	uxtb	r2, r3
 8004db0:	8979      	ldrh	r1, [r7, #10]
 8004db2:	4b4a      	ldr	r3, [pc, #296]	; (8004edc <HAL_I2C_Mem_Read+0x22c>)
 8004db4:	9300      	str	r3, [sp, #0]
 8004db6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004dba:	68f8      	ldr	r0, [r7, #12]
 8004dbc:	f000 fab2 	bl	8005324 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	9300      	str	r3, [sp, #0]
 8004dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	2104      	movs	r1, #4
 8004dca:	68f8      	ldr	r0, [r7, #12]
 8004dcc:	f000 f902 	bl	8004fd4 <I2C_WaitOnFlagUntilTimeout>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d001      	beq.n	8004dda <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e07c      	b.n	8004ed4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de4:	b2d2      	uxtb	r2, r2
 8004de6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dec:	1c5a      	adds	r2, r3, #1
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004df6:	3b01      	subs	r3, #1
 8004df8:	b29a      	uxth	r2, r3
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	3b01      	subs	r3, #1
 8004e06:	b29a      	uxth	r2, r3
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d034      	beq.n	8004e80 <HAL_I2C_Mem_Read+0x1d0>
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d130      	bne.n	8004e80 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	9300      	str	r3, [sp, #0]
 8004e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e24:	2200      	movs	r2, #0
 8004e26:	2180      	movs	r1, #128	; 0x80
 8004e28:	68f8      	ldr	r0, [r7, #12]
 8004e2a:	f000 f8d3 	bl	8004fd4 <I2C_WaitOnFlagUntilTimeout>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d001      	beq.n	8004e38 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e04d      	b.n	8004ed4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	2bff      	cmp	r3, #255	; 0xff
 8004e40:	d90e      	bls.n	8004e60 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	22ff      	movs	r2, #255	; 0xff
 8004e46:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e4c:	b2da      	uxtb	r2, r3
 8004e4e:	8979      	ldrh	r1, [r7, #10]
 8004e50:	2300      	movs	r3, #0
 8004e52:	9300      	str	r3, [sp, #0]
 8004e54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e58:	68f8      	ldr	r0, [r7, #12]
 8004e5a:	f000 fa63 	bl	8005324 <I2C_TransferConfig>
 8004e5e:	e00f      	b.n	8004e80 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e64:	b29a      	uxth	r2, r3
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e6e:	b2da      	uxtb	r2, r3
 8004e70:	8979      	ldrh	r1, [r7, #10]
 8004e72:	2300      	movs	r3, #0
 8004e74:	9300      	str	r3, [sp, #0]
 8004e76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e7a:	68f8      	ldr	r0, [r7, #12]
 8004e7c:	f000 fa52 	bl	8005324 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d19a      	bne.n	8004dc0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e8a:	697a      	ldr	r2, [r7, #20]
 8004e8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e8e:	68f8      	ldr	r0, [r7, #12]
 8004e90:	f000 f920 	bl	80050d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d001      	beq.n	8004e9e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e01a      	b.n	8004ed4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	2220      	movs	r2, #32
 8004ea4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	6859      	ldr	r1, [r3, #4]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	4b0b      	ldr	r3, [pc, #44]	; (8004ee0 <HAL_I2C_Mem_Read+0x230>)
 8004eb2:	400b      	ands	r3, r1
 8004eb4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2220      	movs	r2, #32
 8004eba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	e000      	b.n	8004ed4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004ed2:	2302      	movs	r3, #2
  }
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3718      	adds	r7, #24
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	80002400 	.word	0x80002400
 8004ee0:	fe00e800 	.word	0xfe00e800

08004ee4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b086      	sub	sp, #24
 8004ee8:	af02      	add	r7, sp, #8
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	4608      	mov	r0, r1
 8004eee:	4611      	mov	r1, r2
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	817b      	strh	r3, [r7, #10]
 8004ef6:	460b      	mov	r3, r1
 8004ef8:	813b      	strh	r3, [r7, #8]
 8004efa:	4613      	mov	r3, r2
 8004efc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004efe:	88fb      	ldrh	r3, [r7, #6]
 8004f00:	b2da      	uxtb	r2, r3
 8004f02:	8979      	ldrh	r1, [r7, #10]
 8004f04:	4b20      	ldr	r3, [pc, #128]	; (8004f88 <I2C_RequestMemoryRead+0xa4>)
 8004f06:	9300      	str	r3, [sp, #0]
 8004f08:	2300      	movs	r3, #0
 8004f0a:	68f8      	ldr	r0, [r7, #12]
 8004f0c:	f000 fa0a 	bl	8005324 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f10:	69fa      	ldr	r2, [r7, #28]
 8004f12:	69b9      	ldr	r1, [r7, #24]
 8004f14:	68f8      	ldr	r0, [r7, #12]
 8004f16:	f000 f89d 	bl	8005054 <I2C_WaitOnTXISFlagUntilTimeout>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d001      	beq.n	8004f24 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e02c      	b.n	8004f7e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f24:	88fb      	ldrh	r3, [r7, #6]
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d105      	bne.n	8004f36 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004f2a:	893b      	ldrh	r3, [r7, #8]
 8004f2c:	b2da      	uxtb	r2, r3
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	629a      	str	r2, [r3, #40]	; 0x28
 8004f34:	e015      	b.n	8004f62 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004f36:	893b      	ldrh	r3, [r7, #8]
 8004f38:	0a1b      	lsrs	r3, r3, #8
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	b2da      	uxtb	r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f44:	69fa      	ldr	r2, [r7, #28]
 8004f46:	69b9      	ldr	r1, [r7, #24]
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	f000 f883 	bl	8005054 <I2C_WaitOnTXISFlagUntilTimeout>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d001      	beq.n	8004f58 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e012      	b.n	8004f7e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004f58:	893b      	ldrh	r3, [r7, #8]
 8004f5a:	b2da      	uxtb	r2, r3
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	9300      	str	r3, [sp, #0]
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	2140      	movs	r1, #64	; 0x40
 8004f6c:	68f8      	ldr	r0, [r7, #12]
 8004f6e:	f000 f831 	bl	8004fd4 <I2C_WaitOnFlagUntilTimeout>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d001      	beq.n	8004f7c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e000      	b.n	8004f7e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3710      	adds	r7, #16
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	80002000 	.word	0x80002000

08004f8c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	f003 0302 	and.w	r3, r3, #2
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d103      	bne.n	8004faa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	699b      	ldr	r3, [r3, #24]
 8004fb0:	f003 0301 	and.w	r3, r3, #1
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d007      	beq.n	8004fc8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	699a      	ldr	r2, [r3, #24]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f042 0201 	orr.w	r2, r2, #1
 8004fc6:	619a      	str	r2, [r3, #24]
  }
}
 8004fc8:	bf00      	nop
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	603b      	str	r3, [r7, #0]
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004fe4:	e022      	b.n	800502c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fec:	d01e      	beq.n	800502c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fee:	f7fd fc67 	bl	80028c0 <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	683a      	ldr	r2, [r7, #0]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d302      	bcc.n	8005004 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d113      	bne.n	800502c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005008:	f043 0220 	orr.w	r2, r3, #32
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2220      	movs	r2, #32
 8005014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2200      	movs	r2, #0
 800501c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e00f      	b.n	800504c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	699a      	ldr	r2, [r3, #24]
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	4013      	ands	r3, r2
 8005036:	68ba      	ldr	r2, [r7, #8]
 8005038:	429a      	cmp	r2, r3
 800503a:	bf0c      	ite	eq
 800503c:	2301      	moveq	r3, #1
 800503e:	2300      	movne	r3, #0
 8005040:	b2db      	uxtb	r3, r3
 8005042:	461a      	mov	r2, r3
 8005044:	79fb      	ldrb	r3, [r7, #7]
 8005046:	429a      	cmp	r2, r3
 8005048:	d0cd      	beq.n	8004fe6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	3710      	adds	r7, #16
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005060:	e02c      	b.n	80050bc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	68b9      	ldr	r1, [r7, #8]
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f000 f870 	bl	800514c <I2C_IsErrorOccurred>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d001      	beq.n	8005076 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e02a      	b.n	80050cc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800507c:	d01e      	beq.n	80050bc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800507e:	f7fd fc1f 	bl	80028c0 <HAL_GetTick>
 8005082:	4602      	mov	r2, r0
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	1ad3      	subs	r3, r2, r3
 8005088:	68ba      	ldr	r2, [r7, #8]
 800508a:	429a      	cmp	r2, r3
 800508c:	d302      	bcc.n	8005094 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d113      	bne.n	80050bc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005098:	f043 0220 	orr.w	r2, r3, #32
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2220      	movs	r2, #32
 80050a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e007      	b.n	80050cc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	f003 0302 	and.w	r3, r3, #2
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d1cb      	bne.n	8005062 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80050ca:	2300      	movs	r3, #0
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3710      	adds	r7, #16
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80050e0:	e028      	b.n	8005134 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	68b9      	ldr	r1, [r7, #8]
 80050e6:	68f8      	ldr	r0, [r7, #12]
 80050e8:	f000 f830 	bl	800514c <I2C_IsErrorOccurred>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d001      	beq.n	80050f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e026      	b.n	8005144 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050f6:	f7fd fbe3 	bl	80028c0 <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	68ba      	ldr	r2, [r7, #8]
 8005102:	429a      	cmp	r2, r3
 8005104:	d302      	bcc.n	800510c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d113      	bne.n	8005134 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005110:	f043 0220 	orr.w	r2, r3, #32
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2220      	movs	r2, #32
 800511c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2200      	movs	r2, #0
 8005124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e007      	b.n	8005144 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	f003 0320 	and.w	r3, r3, #32
 800513e:	2b20      	cmp	r3, #32
 8005140:	d1cf      	bne.n	80050e2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005142:	2300      	movs	r3, #0
}
 8005144:	4618      	mov	r0, r3
 8005146:	3710      	adds	r7, #16
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}

0800514c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b08a      	sub	sp, #40	; 0x28
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005158:	2300      	movs	r3, #0
 800515a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	699b      	ldr	r3, [r3, #24]
 8005164:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005166:	2300      	movs	r3, #0
 8005168:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	f003 0310 	and.w	r3, r3, #16
 8005174:	2b00      	cmp	r3, #0
 8005176:	d075      	beq.n	8005264 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2210      	movs	r2, #16
 800517e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005180:	e056      	b.n	8005230 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005188:	d052      	beq.n	8005230 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800518a:	f7fd fb99 	bl	80028c0 <HAL_GetTick>
 800518e:	4602      	mov	r2, r0
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	68ba      	ldr	r2, [r7, #8]
 8005196:	429a      	cmp	r2, r3
 8005198:	d302      	bcc.n	80051a0 <I2C_IsErrorOccurred+0x54>
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d147      	bne.n	8005230 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051aa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80051b2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	699b      	ldr	r3, [r3, #24]
 80051ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051c2:	d12e      	bne.n	8005222 <I2C_IsErrorOccurred+0xd6>
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051ca:	d02a      	beq.n	8005222 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80051cc:	7cfb      	ldrb	r3, [r7, #19]
 80051ce:	2b20      	cmp	r3, #32
 80051d0:	d027      	beq.n	8005222 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	685a      	ldr	r2, [r3, #4]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051e0:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80051e2:	f7fd fb6d 	bl	80028c0 <HAL_GetTick>
 80051e6:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051e8:	e01b      	b.n	8005222 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80051ea:	f7fd fb69 	bl	80028c0 <HAL_GetTick>
 80051ee:	4602      	mov	r2, r0
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	1ad3      	subs	r3, r2, r3
 80051f4:	2b19      	cmp	r3, #25
 80051f6:	d914      	bls.n	8005222 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051fc:	f043 0220 	orr.w	r2, r3, #32
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2220      	movs	r2, #32
 8005208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2200      	movs	r2, #0
 8005210:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2200      	movs	r2, #0
 8005218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	f003 0320 	and.w	r3, r3, #32
 800522c:	2b20      	cmp	r3, #32
 800522e:	d1dc      	bne.n	80051ea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	699b      	ldr	r3, [r3, #24]
 8005236:	f003 0320 	and.w	r3, r3, #32
 800523a:	2b20      	cmp	r3, #32
 800523c:	d003      	beq.n	8005246 <I2C_IsErrorOccurred+0xfa>
 800523e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005242:	2b00      	cmp	r3, #0
 8005244:	d09d      	beq.n	8005182 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005246:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800524a:	2b00      	cmp	r3, #0
 800524c:	d103      	bne.n	8005256 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2220      	movs	r2, #32
 8005254:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005256:	6a3b      	ldr	r3, [r7, #32]
 8005258:	f043 0304 	orr.w	r3, r3, #4
 800525c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	699b      	ldr	r3, [r3, #24]
 800526a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00b      	beq.n	800528e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005276:	6a3b      	ldr	r3, [r7, #32]
 8005278:	f043 0301 	orr.w	r3, r3, #1
 800527c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005286:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00b      	beq.n	80052b0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005298:	6a3b      	ldr	r3, [r7, #32]
 800529a:	f043 0308 	orr.w	r3, r3, #8
 800529e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80052a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00b      	beq.n	80052d2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80052ba:	6a3b      	ldr	r3, [r7, #32]
 80052bc:	f043 0302 	orr.w	r3, r3, #2
 80052c0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052ca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80052d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d01c      	beq.n	8005314 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80052da:	68f8      	ldr	r0, [r7, #12]
 80052dc:	f7ff fe56 	bl	8004f8c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	6859      	ldr	r1, [r3, #4]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	4b0d      	ldr	r3, [pc, #52]	; (8005320 <I2C_IsErrorOccurred+0x1d4>)
 80052ec:	400b      	ands	r3, r1
 80052ee:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052f4:	6a3b      	ldr	r3, [r7, #32]
 80052f6:	431a      	orrs	r2, r3
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2220      	movs	r2, #32
 8005300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005314:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005318:	4618      	mov	r0, r3
 800531a:	3728      	adds	r7, #40	; 0x28
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}
 8005320:	fe00e800 	.word	0xfe00e800

08005324 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005324:	b480      	push	{r7}
 8005326:	b087      	sub	sp, #28
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	607b      	str	r3, [r7, #4]
 800532e:	460b      	mov	r3, r1
 8005330:	817b      	strh	r3, [r7, #10]
 8005332:	4613      	mov	r3, r2
 8005334:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005336:	897b      	ldrh	r3, [r7, #10]
 8005338:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800533c:	7a7b      	ldrb	r3, [r7, #9]
 800533e:	041b      	lsls	r3, r3, #16
 8005340:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005344:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800534a:	6a3b      	ldr	r3, [r7, #32]
 800534c:	4313      	orrs	r3, r2
 800534e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005352:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	685a      	ldr	r2, [r3, #4]
 800535a:	6a3b      	ldr	r3, [r7, #32]
 800535c:	0d5b      	lsrs	r3, r3, #21
 800535e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005362:	4b08      	ldr	r3, [pc, #32]	; (8005384 <I2C_TransferConfig+0x60>)
 8005364:	430b      	orrs	r3, r1
 8005366:	43db      	mvns	r3, r3
 8005368:	ea02 0103 	and.w	r1, r2, r3
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	697a      	ldr	r2, [r7, #20]
 8005372:	430a      	orrs	r2, r1
 8005374:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005376:	bf00      	nop
 8005378:	371c      	adds	r7, #28
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	03ff63ff 	.word	0x03ff63ff

08005388 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005398:	b2db      	uxtb	r3, r3
 800539a:	2b20      	cmp	r3, #32
 800539c:	d138      	bne.n	8005410 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d101      	bne.n	80053ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80053a8:	2302      	movs	r3, #2
 80053aa:	e032      	b.n	8005412 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2224      	movs	r2, #36	; 0x24
 80053b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f022 0201 	bic.w	r2, r2, #1
 80053ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80053da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	6819      	ldr	r1, [r3, #0]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	683a      	ldr	r2, [r7, #0]
 80053e8:	430a      	orrs	r2, r1
 80053ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f042 0201 	orr.w	r2, r2, #1
 80053fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2220      	movs	r2, #32
 8005400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800540c:	2300      	movs	r3, #0
 800540e:	e000      	b.n	8005412 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005410:	2302      	movs	r3, #2
  }
}
 8005412:	4618      	mov	r0, r3
 8005414:	370c      	adds	r7, #12
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr

0800541e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800541e:	b480      	push	{r7}
 8005420:	b085      	sub	sp, #20
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
 8005426:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800542e:	b2db      	uxtb	r3, r3
 8005430:	2b20      	cmp	r3, #32
 8005432:	d139      	bne.n	80054a8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800543a:	2b01      	cmp	r3, #1
 800543c:	d101      	bne.n	8005442 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800543e:	2302      	movs	r3, #2
 8005440:	e033      	b.n	80054aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2201      	movs	r2, #1
 8005446:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2224      	movs	r2, #36	; 0x24
 800544e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f022 0201 	bic.w	r2, r2, #1
 8005460:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005470:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	021b      	lsls	r3, r3, #8
 8005476:	68fa      	ldr	r2, [r7, #12]
 8005478:	4313      	orrs	r3, r2
 800547a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f042 0201 	orr.w	r2, r2, #1
 8005492:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2220      	movs	r2, #32
 8005498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80054a4:	2300      	movs	r3, #0
 80054a6:	e000      	b.n	80054aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80054a8:	2302      	movs	r3, #2
  }
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3714      	adds	r7, #20
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr
	...

080054b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80054b8:	b480      	push	{r7}
 80054ba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80054bc:	4b04      	ldr	r3, [pc, #16]	; (80054d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	40007000 	.word	0x40007000

080054d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b085      	sub	sp, #20
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054e2:	d130      	bne.n	8005546 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80054e4:	4b23      	ldr	r3, [pc, #140]	; (8005574 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80054ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054f0:	d038      	beq.n	8005564 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80054f2:	4b20      	ldr	r3, [pc, #128]	; (8005574 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80054fa:	4a1e      	ldr	r2, [pc, #120]	; (8005574 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005500:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005502:	4b1d      	ldr	r3, [pc, #116]	; (8005578 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2232      	movs	r2, #50	; 0x32
 8005508:	fb02 f303 	mul.w	r3, r2, r3
 800550c:	4a1b      	ldr	r2, [pc, #108]	; (800557c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800550e:	fba2 2303 	umull	r2, r3, r2, r3
 8005512:	0c9b      	lsrs	r3, r3, #18
 8005514:	3301      	adds	r3, #1
 8005516:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005518:	e002      	b.n	8005520 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	3b01      	subs	r3, #1
 800551e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005520:	4b14      	ldr	r3, [pc, #80]	; (8005574 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005522:	695b      	ldr	r3, [r3, #20]
 8005524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005528:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800552c:	d102      	bne.n	8005534 <HAL_PWREx_ControlVoltageScaling+0x60>
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d1f2      	bne.n	800551a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005534:	4b0f      	ldr	r3, [pc, #60]	; (8005574 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005536:	695b      	ldr	r3, [r3, #20]
 8005538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800553c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005540:	d110      	bne.n	8005564 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	e00f      	b.n	8005566 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005546:	4b0b      	ldr	r3, [pc, #44]	; (8005574 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800554e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005552:	d007      	beq.n	8005564 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005554:	4b07      	ldr	r3, [pc, #28]	; (8005574 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800555c:	4a05      	ldr	r2, [pc, #20]	; (8005574 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800555e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005562:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005564:	2300      	movs	r3, #0
}
 8005566:	4618      	mov	r0, r3
 8005568:	3714      	adds	r7, #20
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	40007000 	.word	0x40007000
 8005578:	20000090 	.word	0x20000090
 800557c:	431bde83 	.word	0x431bde83

08005580 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b088      	sub	sp, #32
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d101      	bne.n	8005592 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e3d8      	b.n	8005d44 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005592:	4b97      	ldr	r3, [pc, #604]	; (80057f0 <HAL_RCC_OscConfig+0x270>)
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	f003 030c 	and.w	r3, r3, #12
 800559a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800559c:	4b94      	ldr	r3, [pc, #592]	; (80057f0 <HAL_RCC_OscConfig+0x270>)
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	f003 0303 	and.w	r3, r3, #3
 80055a4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 0310 	and.w	r3, r3, #16
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	f000 80e4 	beq.w	800577c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d007      	beq.n	80055ca <HAL_RCC_OscConfig+0x4a>
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	2b0c      	cmp	r3, #12
 80055be:	f040 808b 	bne.w	80056d8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	f040 8087 	bne.w	80056d8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80055ca:	4b89      	ldr	r3, [pc, #548]	; (80057f0 <HAL_RCC_OscConfig+0x270>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 0302 	and.w	r3, r3, #2
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d005      	beq.n	80055e2 <HAL_RCC_OscConfig+0x62>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	699b      	ldr	r3, [r3, #24]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d101      	bne.n	80055e2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e3b0      	b.n	8005d44 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6a1a      	ldr	r2, [r3, #32]
 80055e6:	4b82      	ldr	r3, [pc, #520]	; (80057f0 <HAL_RCC_OscConfig+0x270>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 0308 	and.w	r3, r3, #8
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d004      	beq.n	80055fc <HAL_RCC_OscConfig+0x7c>
 80055f2:	4b7f      	ldr	r3, [pc, #508]	; (80057f0 <HAL_RCC_OscConfig+0x270>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055fa:	e005      	b.n	8005608 <HAL_RCC_OscConfig+0x88>
 80055fc:	4b7c      	ldr	r3, [pc, #496]	; (80057f0 <HAL_RCC_OscConfig+0x270>)
 80055fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005602:	091b      	lsrs	r3, r3, #4
 8005604:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005608:	4293      	cmp	r3, r2
 800560a:	d223      	bcs.n	8005654 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6a1b      	ldr	r3, [r3, #32]
 8005610:	4618      	mov	r0, r3
 8005612:	f000 fd43 	bl	800609c <RCC_SetFlashLatencyFromMSIRange>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d001      	beq.n	8005620 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	e391      	b.n	8005d44 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005620:	4b73      	ldr	r3, [pc, #460]	; (80057f0 <HAL_RCC_OscConfig+0x270>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a72      	ldr	r2, [pc, #456]	; (80057f0 <HAL_RCC_OscConfig+0x270>)
 8005626:	f043 0308 	orr.w	r3, r3, #8
 800562a:	6013      	str	r3, [r2, #0]
 800562c:	4b70      	ldr	r3, [pc, #448]	; (80057f0 <HAL_RCC_OscConfig+0x270>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6a1b      	ldr	r3, [r3, #32]
 8005638:	496d      	ldr	r1, [pc, #436]	; (80057f0 <HAL_RCC_OscConfig+0x270>)
 800563a:	4313      	orrs	r3, r2
 800563c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800563e:	4b6c      	ldr	r3, [pc, #432]	; (80057f0 <HAL_RCC_OscConfig+0x270>)
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	69db      	ldr	r3, [r3, #28]
 800564a:	021b      	lsls	r3, r3, #8
 800564c:	4968      	ldr	r1, [pc, #416]	; (80057f0 <HAL_RCC_OscConfig+0x270>)
 800564e:	4313      	orrs	r3, r2
 8005650:	604b      	str	r3, [r1, #4]
 8005652:	e025      	b.n	80056a0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005654:	4b66      	ldr	r3, [pc, #408]	; (80057f0 <HAL_RCC_OscConfig+0x270>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a65      	ldr	r2, [pc, #404]	; (80057f0 <HAL_RCC_OscConfig+0x270>)
 800565a:	f043 0308 	orr.w	r3, r3, #8
 800565e:	6013      	str	r3, [r2, #0]
 8005660:	4b63      	ldr	r3, [pc, #396]	; (80057f0 <HAL_RCC_OscConfig+0x270>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a1b      	ldr	r3, [r3, #32]
 800566c:	4960      	ldr	r1, [pc, #384]	; (80057f0 <HAL_RCC_OscConfig+0x270>)
 800566e:	4313      	orrs	r3, r2
 8005670:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005672:	4b5f      	ldr	r3, [pc, #380]	; (80057f0 <HAL_RCC_OscConfig+0x270>)
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	69db      	ldr	r3, [r3, #28]
 800567e:	021b      	lsls	r3, r3, #8
 8005680:	495b      	ldr	r1, [pc, #364]	; (80057f0 <HAL_RCC_OscConfig+0x270>)
 8005682:	4313      	orrs	r3, r2
 8005684:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d109      	bne.n	80056a0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6a1b      	ldr	r3, [r3, #32]
 8005690:	4618      	mov	r0, r3
 8005692:	f000 fd03 	bl	800609c <RCC_SetFlashLatencyFromMSIRange>
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d001      	beq.n	80056a0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	e351      	b.n	8005d44 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80056a0:	f000 fc38 	bl	8005f14 <HAL_RCC_GetSysClockFreq>
 80056a4:	4602      	mov	r2, r0
 80056a6:	4b52      	ldr	r3, [pc, #328]	; (80057f0 <HAL_RCC_OscConfig+0x270>)
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	091b      	lsrs	r3, r3, #4
 80056ac:	f003 030f 	and.w	r3, r3, #15
 80056b0:	4950      	ldr	r1, [pc, #320]	; (80057f4 <HAL_RCC_OscConfig+0x274>)
 80056b2:	5ccb      	ldrb	r3, [r1, r3]
 80056b4:	f003 031f 	and.w	r3, r3, #31
 80056b8:	fa22 f303 	lsr.w	r3, r2, r3
 80056bc:	4a4e      	ldr	r2, [pc, #312]	; (80057f8 <HAL_RCC_OscConfig+0x278>)
 80056be:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80056c0:	4b4e      	ldr	r3, [pc, #312]	; (80057fc <HAL_RCC_OscConfig+0x27c>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4618      	mov	r0, r3
 80056c6:	f7fd f8ab 	bl	8002820 <HAL_InitTick>
 80056ca:	4603      	mov	r3, r0
 80056cc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80056ce:	7bfb      	ldrb	r3, [r7, #15]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d052      	beq.n	800577a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80056d4:	7bfb      	ldrb	r3, [r7, #15]
 80056d6:	e335      	b.n	8005d44 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d032      	beq.n	8005746 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80056e0:	4b43      	ldr	r3, [pc, #268]	; (80057f0 <HAL_RCC_OscConfig+0x270>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a42      	ldr	r2, [pc, #264]	; (80057f0 <HAL_RCC_OscConfig+0x270>)
 80056e6:	f043 0301 	orr.w	r3, r3, #1
 80056ea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80056ec:	f7fd f8e8 	bl	80028c0 <HAL_GetTick>
 80056f0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80056f2:	e008      	b.n	8005706 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80056f4:	f7fd f8e4 	bl	80028c0 <HAL_GetTick>
 80056f8:	4602      	mov	r2, r0
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	2b02      	cmp	r3, #2
 8005700:	d901      	bls.n	8005706 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e31e      	b.n	8005d44 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005706:	4b3a      	ldr	r3, [pc, #232]	; (80057f0 <HAL_RCC_OscConfig+0x270>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 0302 	and.w	r3, r3, #2
 800570e:	2b00      	cmp	r3, #0
 8005710:	d0f0      	beq.n	80056f4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005712:	4b37      	ldr	r3, [pc, #220]	; (80057f0 <HAL_RCC_OscConfig+0x270>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a36      	ldr	r2, [pc, #216]	; (80057f0 <HAL_RCC_OscConfig+0x270>)
 8005718:	f043 0308 	orr.w	r3, r3, #8
 800571c:	6013      	str	r3, [r2, #0]
 800571e:	4b34      	ldr	r3, [pc, #208]	; (80057f0 <HAL_RCC_OscConfig+0x270>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a1b      	ldr	r3, [r3, #32]
 800572a:	4931      	ldr	r1, [pc, #196]	; (80057f0 <HAL_RCC_OscConfig+0x270>)
 800572c:	4313      	orrs	r3, r2
 800572e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005730:	4b2f      	ldr	r3, [pc, #188]	; (80057f0 <HAL_RCC_OscConfig+0x270>)
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	69db      	ldr	r3, [r3, #28]
 800573c:	021b      	lsls	r3, r3, #8
 800573e:	492c      	ldr	r1, [pc, #176]	; (80057f0 <HAL_RCC_OscConfig+0x270>)
 8005740:	4313      	orrs	r3, r2
 8005742:	604b      	str	r3, [r1, #4]
 8005744:	e01a      	b.n	800577c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005746:	4b2a      	ldr	r3, [pc, #168]	; (80057f0 <HAL_RCC_OscConfig+0x270>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a29      	ldr	r2, [pc, #164]	; (80057f0 <HAL_RCC_OscConfig+0x270>)
 800574c:	f023 0301 	bic.w	r3, r3, #1
 8005750:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005752:	f7fd f8b5 	bl	80028c0 <HAL_GetTick>
 8005756:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005758:	e008      	b.n	800576c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800575a:	f7fd f8b1 	bl	80028c0 <HAL_GetTick>
 800575e:	4602      	mov	r2, r0
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	2b02      	cmp	r3, #2
 8005766:	d901      	bls.n	800576c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	e2eb      	b.n	8005d44 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800576c:	4b20      	ldr	r3, [pc, #128]	; (80057f0 <HAL_RCC_OscConfig+0x270>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 0302 	and.w	r3, r3, #2
 8005774:	2b00      	cmp	r3, #0
 8005776:	d1f0      	bne.n	800575a <HAL_RCC_OscConfig+0x1da>
 8005778:	e000      	b.n	800577c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800577a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 0301 	and.w	r3, r3, #1
 8005784:	2b00      	cmp	r3, #0
 8005786:	d074      	beq.n	8005872 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	2b08      	cmp	r3, #8
 800578c:	d005      	beq.n	800579a <HAL_RCC_OscConfig+0x21a>
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	2b0c      	cmp	r3, #12
 8005792:	d10e      	bne.n	80057b2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	2b03      	cmp	r3, #3
 8005798:	d10b      	bne.n	80057b2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800579a:	4b15      	ldr	r3, [pc, #84]	; (80057f0 <HAL_RCC_OscConfig+0x270>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d064      	beq.n	8005870 <HAL_RCC_OscConfig+0x2f0>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d160      	bne.n	8005870 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e2c8      	b.n	8005d44 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057ba:	d106      	bne.n	80057ca <HAL_RCC_OscConfig+0x24a>
 80057bc:	4b0c      	ldr	r3, [pc, #48]	; (80057f0 <HAL_RCC_OscConfig+0x270>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a0b      	ldr	r2, [pc, #44]	; (80057f0 <HAL_RCC_OscConfig+0x270>)
 80057c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057c6:	6013      	str	r3, [r2, #0]
 80057c8:	e026      	b.n	8005818 <HAL_RCC_OscConfig+0x298>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057d2:	d115      	bne.n	8005800 <HAL_RCC_OscConfig+0x280>
 80057d4:	4b06      	ldr	r3, [pc, #24]	; (80057f0 <HAL_RCC_OscConfig+0x270>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a05      	ldr	r2, [pc, #20]	; (80057f0 <HAL_RCC_OscConfig+0x270>)
 80057da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057de:	6013      	str	r3, [r2, #0]
 80057e0:	4b03      	ldr	r3, [pc, #12]	; (80057f0 <HAL_RCC_OscConfig+0x270>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a02      	ldr	r2, [pc, #8]	; (80057f0 <HAL_RCC_OscConfig+0x270>)
 80057e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057ea:	6013      	str	r3, [r2, #0]
 80057ec:	e014      	b.n	8005818 <HAL_RCC_OscConfig+0x298>
 80057ee:	bf00      	nop
 80057f0:	40021000 	.word	0x40021000
 80057f4:	0800e44c 	.word	0x0800e44c
 80057f8:	20000090 	.word	0x20000090
 80057fc:	2000009c 	.word	0x2000009c
 8005800:	4ba0      	ldr	r3, [pc, #640]	; (8005a84 <HAL_RCC_OscConfig+0x504>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a9f      	ldr	r2, [pc, #636]	; (8005a84 <HAL_RCC_OscConfig+0x504>)
 8005806:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800580a:	6013      	str	r3, [r2, #0]
 800580c:	4b9d      	ldr	r3, [pc, #628]	; (8005a84 <HAL_RCC_OscConfig+0x504>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a9c      	ldr	r2, [pc, #624]	; (8005a84 <HAL_RCC_OscConfig+0x504>)
 8005812:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005816:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d013      	beq.n	8005848 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005820:	f7fd f84e 	bl	80028c0 <HAL_GetTick>
 8005824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005826:	e008      	b.n	800583a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005828:	f7fd f84a 	bl	80028c0 <HAL_GetTick>
 800582c:	4602      	mov	r2, r0
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	2b64      	cmp	r3, #100	; 0x64
 8005834:	d901      	bls.n	800583a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005836:	2303      	movs	r3, #3
 8005838:	e284      	b.n	8005d44 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800583a:	4b92      	ldr	r3, [pc, #584]	; (8005a84 <HAL_RCC_OscConfig+0x504>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005842:	2b00      	cmp	r3, #0
 8005844:	d0f0      	beq.n	8005828 <HAL_RCC_OscConfig+0x2a8>
 8005846:	e014      	b.n	8005872 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005848:	f7fd f83a 	bl	80028c0 <HAL_GetTick>
 800584c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800584e:	e008      	b.n	8005862 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005850:	f7fd f836 	bl	80028c0 <HAL_GetTick>
 8005854:	4602      	mov	r2, r0
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	2b64      	cmp	r3, #100	; 0x64
 800585c:	d901      	bls.n	8005862 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800585e:	2303      	movs	r3, #3
 8005860:	e270      	b.n	8005d44 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005862:	4b88      	ldr	r3, [pc, #544]	; (8005a84 <HAL_RCC_OscConfig+0x504>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800586a:	2b00      	cmp	r3, #0
 800586c:	d1f0      	bne.n	8005850 <HAL_RCC_OscConfig+0x2d0>
 800586e:	e000      	b.n	8005872 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005870:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 0302 	and.w	r3, r3, #2
 800587a:	2b00      	cmp	r3, #0
 800587c:	d060      	beq.n	8005940 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	2b04      	cmp	r3, #4
 8005882:	d005      	beq.n	8005890 <HAL_RCC_OscConfig+0x310>
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	2b0c      	cmp	r3, #12
 8005888:	d119      	bne.n	80058be <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	2b02      	cmp	r3, #2
 800588e:	d116      	bne.n	80058be <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005890:	4b7c      	ldr	r3, [pc, #496]	; (8005a84 <HAL_RCC_OscConfig+0x504>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005898:	2b00      	cmp	r3, #0
 800589a:	d005      	beq.n	80058a8 <HAL_RCC_OscConfig+0x328>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d101      	bne.n	80058a8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e24d      	b.n	8005d44 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058a8:	4b76      	ldr	r3, [pc, #472]	; (8005a84 <HAL_RCC_OscConfig+0x504>)
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	061b      	lsls	r3, r3, #24
 80058b6:	4973      	ldr	r1, [pc, #460]	; (8005a84 <HAL_RCC_OscConfig+0x504>)
 80058b8:	4313      	orrs	r3, r2
 80058ba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80058bc:	e040      	b.n	8005940 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d023      	beq.n	800590e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058c6:	4b6f      	ldr	r3, [pc, #444]	; (8005a84 <HAL_RCC_OscConfig+0x504>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a6e      	ldr	r2, [pc, #440]	; (8005a84 <HAL_RCC_OscConfig+0x504>)
 80058cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058d2:	f7fc fff5 	bl	80028c0 <HAL_GetTick>
 80058d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058d8:	e008      	b.n	80058ec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058da:	f7fc fff1 	bl	80028c0 <HAL_GetTick>
 80058de:	4602      	mov	r2, r0
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	1ad3      	subs	r3, r2, r3
 80058e4:	2b02      	cmp	r3, #2
 80058e6:	d901      	bls.n	80058ec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80058e8:	2303      	movs	r3, #3
 80058ea:	e22b      	b.n	8005d44 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058ec:	4b65      	ldr	r3, [pc, #404]	; (8005a84 <HAL_RCC_OscConfig+0x504>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d0f0      	beq.n	80058da <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058f8:	4b62      	ldr	r3, [pc, #392]	; (8005a84 <HAL_RCC_OscConfig+0x504>)
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	691b      	ldr	r3, [r3, #16]
 8005904:	061b      	lsls	r3, r3, #24
 8005906:	495f      	ldr	r1, [pc, #380]	; (8005a84 <HAL_RCC_OscConfig+0x504>)
 8005908:	4313      	orrs	r3, r2
 800590a:	604b      	str	r3, [r1, #4]
 800590c:	e018      	b.n	8005940 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800590e:	4b5d      	ldr	r3, [pc, #372]	; (8005a84 <HAL_RCC_OscConfig+0x504>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a5c      	ldr	r2, [pc, #368]	; (8005a84 <HAL_RCC_OscConfig+0x504>)
 8005914:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005918:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800591a:	f7fc ffd1 	bl	80028c0 <HAL_GetTick>
 800591e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005920:	e008      	b.n	8005934 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005922:	f7fc ffcd 	bl	80028c0 <HAL_GetTick>
 8005926:	4602      	mov	r2, r0
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	1ad3      	subs	r3, r2, r3
 800592c:	2b02      	cmp	r3, #2
 800592e:	d901      	bls.n	8005934 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005930:	2303      	movs	r3, #3
 8005932:	e207      	b.n	8005d44 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005934:	4b53      	ldr	r3, [pc, #332]	; (8005a84 <HAL_RCC_OscConfig+0x504>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800593c:	2b00      	cmp	r3, #0
 800593e:	d1f0      	bne.n	8005922 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 0308 	and.w	r3, r3, #8
 8005948:	2b00      	cmp	r3, #0
 800594a:	d03c      	beq.n	80059c6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	695b      	ldr	r3, [r3, #20]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d01c      	beq.n	800598e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005954:	4b4b      	ldr	r3, [pc, #300]	; (8005a84 <HAL_RCC_OscConfig+0x504>)
 8005956:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800595a:	4a4a      	ldr	r2, [pc, #296]	; (8005a84 <HAL_RCC_OscConfig+0x504>)
 800595c:	f043 0301 	orr.w	r3, r3, #1
 8005960:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005964:	f7fc ffac 	bl	80028c0 <HAL_GetTick>
 8005968:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800596a:	e008      	b.n	800597e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800596c:	f7fc ffa8 	bl	80028c0 <HAL_GetTick>
 8005970:	4602      	mov	r2, r0
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	1ad3      	subs	r3, r2, r3
 8005976:	2b02      	cmp	r3, #2
 8005978:	d901      	bls.n	800597e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800597a:	2303      	movs	r3, #3
 800597c:	e1e2      	b.n	8005d44 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800597e:	4b41      	ldr	r3, [pc, #260]	; (8005a84 <HAL_RCC_OscConfig+0x504>)
 8005980:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005984:	f003 0302 	and.w	r3, r3, #2
 8005988:	2b00      	cmp	r3, #0
 800598a:	d0ef      	beq.n	800596c <HAL_RCC_OscConfig+0x3ec>
 800598c:	e01b      	b.n	80059c6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800598e:	4b3d      	ldr	r3, [pc, #244]	; (8005a84 <HAL_RCC_OscConfig+0x504>)
 8005990:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005994:	4a3b      	ldr	r2, [pc, #236]	; (8005a84 <HAL_RCC_OscConfig+0x504>)
 8005996:	f023 0301 	bic.w	r3, r3, #1
 800599a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800599e:	f7fc ff8f 	bl	80028c0 <HAL_GetTick>
 80059a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80059a4:	e008      	b.n	80059b8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059a6:	f7fc ff8b 	bl	80028c0 <HAL_GetTick>
 80059aa:	4602      	mov	r2, r0
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	1ad3      	subs	r3, r2, r3
 80059b0:	2b02      	cmp	r3, #2
 80059b2:	d901      	bls.n	80059b8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80059b4:	2303      	movs	r3, #3
 80059b6:	e1c5      	b.n	8005d44 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80059b8:	4b32      	ldr	r3, [pc, #200]	; (8005a84 <HAL_RCC_OscConfig+0x504>)
 80059ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059be:	f003 0302 	and.w	r3, r3, #2
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d1ef      	bne.n	80059a6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 0304 	and.w	r3, r3, #4
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	f000 80a6 	beq.w	8005b20 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059d4:	2300      	movs	r3, #0
 80059d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80059d8:	4b2a      	ldr	r3, [pc, #168]	; (8005a84 <HAL_RCC_OscConfig+0x504>)
 80059da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d10d      	bne.n	8005a00 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059e4:	4b27      	ldr	r3, [pc, #156]	; (8005a84 <HAL_RCC_OscConfig+0x504>)
 80059e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059e8:	4a26      	ldr	r2, [pc, #152]	; (8005a84 <HAL_RCC_OscConfig+0x504>)
 80059ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059ee:	6593      	str	r3, [r2, #88]	; 0x58
 80059f0:	4b24      	ldr	r3, [pc, #144]	; (8005a84 <HAL_RCC_OscConfig+0x504>)
 80059f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059f8:	60bb      	str	r3, [r7, #8]
 80059fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059fc:	2301      	movs	r3, #1
 80059fe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a00:	4b21      	ldr	r3, [pc, #132]	; (8005a88 <HAL_RCC_OscConfig+0x508>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d118      	bne.n	8005a3e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a0c:	4b1e      	ldr	r3, [pc, #120]	; (8005a88 <HAL_RCC_OscConfig+0x508>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a1d      	ldr	r2, [pc, #116]	; (8005a88 <HAL_RCC_OscConfig+0x508>)
 8005a12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a16:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a18:	f7fc ff52 	bl	80028c0 <HAL_GetTick>
 8005a1c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a1e:	e008      	b.n	8005a32 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a20:	f7fc ff4e 	bl	80028c0 <HAL_GetTick>
 8005a24:	4602      	mov	r2, r0
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d901      	bls.n	8005a32 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	e188      	b.n	8005d44 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a32:	4b15      	ldr	r3, [pc, #84]	; (8005a88 <HAL_RCC_OscConfig+0x508>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d0f0      	beq.n	8005a20 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d108      	bne.n	8005a58 <HAL_RCC_OscConfig+0x4d8>
 8005a46:	4b0f      	ldr	r3, [pc, #60]	; (8005a84 <HAL_RCC_OscConfig+0x504>)
 8005a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a4c:	4a0d      	ldr	r2, [pc, #52]	; (8005a84 <HAL_RCC_OscConfig+0x504>)
 8005a4e:	f043 0301 	orr.w	r3, r3, #1
 8005a52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005a56:	e029      	b.n	8005aac <HAL_RCC_OscConfig+0x52c>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	2b05      	cmp	r3, #5
 8005a5e:	d115      	bne.n	8005a8c <HAL_RCC_OscConfig+0x50c>
 8005a60:	4b08      	ldr	r3, [pc, #32]	; (8005a84 <HAL_RCC_OscConfig+0x504>)
 8005a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a66:	4a07      	ldr	r2, [pc, #28]	; (8005a84 <HAL_RCC_OscConfig+0x504>)
 8005a68:	f043 0304 	orr.w	r3, r3, #4
 8005a6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005a70:	4b04      	ldr	r3, [pc, #16]	; (8005a84 <HAL_RCC_OscConfig+0x504>)
 8005a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a76:	4a03      	ldr	r2, [pc, #12]	; (8005a84 <HAL_RCC_OscConfig+0x504>)
 8005a78:	f043 0301 	orr.w	r3, r3, #1
 8005a7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005a80:	e014      	b.n	8005aac <HAL_RCC_OscConfig+0x52c>
 8005a82:	bf00      	nop
 8005a84:	40021000 	.word	0x40021000
 8005a88:	40007000 	.word	0x40007000
 8005a8c:	4b91      	ldr	r3, [pc, #580]	; (8005cd4 <HAL_RCC_OscConfig+0x754>)
 8005a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a92:	4a90      	ldr	r2, [pc, #576]	; (8005cd4 <HAL_RCC_OscConfig+0x754>)
 8005a94:	f023 0301 	bic.w	r3, r3, #1
 8005a98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005a9c:	4b8d      	ldr	r3, [pc, #564]	; (8005cd4 <HAL_RCC_OscConfig+0x754>)
 8005a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aa2:	4a8c      	ldr	r2, [pc, #560]	; (8005cd4 <HAL_RCC_OscConfig+0x754>)
 8005aa4:	f023 0304 	bic.w	r3, r3, #4
 8005aa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d016      	beq.n	8005ae2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ab4:	f7fc ff04 	bl	80028c0 <HAL_GetTick>
 8005ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005aba:	e00a      	b.n	8005ad2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005abc:	f7fc ff00 	bl	80028c0 <HAL_GetTick>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d901      	bls.n	8005ad2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	e138      	b.n	8005d44 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ad2:	4b80      	ldr	r3, [pc, #512]	; (8005cd4 <HAL_RCC_OscConfig+0x754>)
 8005ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ad8:	f003 0302 	and.w	r3, r3, #2
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d0ed      	beq.n	8005abc <HAL_RCC_OscConfig+0x53c>
 8005ae0:	e015      	b.n	8005b0e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ae2:	f7fc feed 	bl	80028c0 <HAL_GetTick>
 8005ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ae8:	e00a      	b.n	8005b00 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005aea:	f7fc fee9 	bl	80028c0 <HAL_GetTick>
 8005aee:	4602      	mov	r2, r0
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d901      	bls.n	8005b00 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e121      	b.n	8005d44 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b00:	4b74      	ldr	r3, [pc, #464]	; (8005cd4 <HAL_RCC_OscConfig+0x754>)
 8005b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b06:	f003 0302 	and.w	r3, r3, #2
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d1ed      	bne.n	8005aea <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b0e:	7ffb      	ldrb	r3, [r7, #31]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d105      	bne.n	8005b20 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b14:	4b6f      	ldr	r3, [pc, #444]	; (8005cd4 <HAL_RCC_OscConfig+0x754>)
 8005b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b18:	4a6e      	ldr	r2, [pc, #440]	; (8005cd4 <HAL_RCC_OscConfig+0x754>)
 8005b1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b1e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	f000 810c 	beq.w	8005d42 <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b2e:	2b02      	cmp	r3, #2
 8005b30:	f040 80d4 	bne.w	8005cdc <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005b34:	4b67      	ldr	r3, [pc, #412]	; (8005cd4 <HAL_RCC_OscConfig+0x754>)
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	f003 0203 	and.w	r2, r3, #3
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d130      	bne.n	8005baa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b52:	3b01      	subs	r3, #1
 8005b54:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d127      	bne.n	8005baa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b64:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d11f      	bne.n	8005baa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b74:	2a07      	cmp	r2, #7
 8005b76:	bf14      	ite	ne
 8005b78:	2201      	movne	r2, #1
 8005b7a:	2200      	moveq	r2, #0
 8005b7c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d113      	bne.n	8005baa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b8c:	085b      	lsrs	r3, r3, #1
 8005b8e:	3b01      	subs	r3, #1
 8005b90:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d109      	bne.n	8005baa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba0:	085b      	lsrs	r3, r3, #1
 8005ba2:	3b01      	subs	r3, #1
 8005ba4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d06e      	beq.n	8005c88 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	2b0c      	cmp	r3, #12
 8005bae:	d069      	beq.n	8005c84 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005bb0:	4b48      	ldr	r3, [pc, #288]	; (8005cd4 <HAL_RCC_OscConfig+0x754>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d105      	bne.n	8005bc8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005bbc:	4b45      	ldr	r3, [pc, #276]	; (8005cd4 <HAL_RCC_OscConfig+0x754>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d001      	beq.n	8005bcc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e0bb      	b.n	8005d44 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005bcc:	4b41      	ldr	r3, [pc, #260]	; (8005cd4 <HAL_RCC_OscConfig+0x754>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a40      	ldr	r2, [pc, #256]	; (8005cd4 <HAL_RCC_OscConfig+0x754>)
 8005bd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bd6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005bd8:	f7fc fe72 	bl	80028c0 <HAL_GetTick>
 8005bdc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bde:	e008      	b.n	8005bf2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005be0:	f7fc fe6e 	bl	80028c0 <HAL_GetTick>
 8005be4:	4602      	mov	r2, r0
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	1ad3      	subs	r3, r2, r3
 8005bea:	2b02      	cmp	r3, #2
 8005bec:	d901      	bls.n	8005bf2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005bee:	2303      	movs	r3, #3
 8005bf0:	e0a8      	b.n	8005d44 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bf2:	4b38      	ldr	r3, [pc, #224]	; (8005cd4 <HAL_RCC_OscConfig+0x754>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d1f0      	bne.n	8005be0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005bfe:	4b35      	ldr	r3, [pc, #212]	; (8005cd4 <HAL_RCC_OscConfig+0x754>)
 8005c00:	68da      	ldr	r2, [r3, #12]
 8005c02:	4b35      	ldr	r3, [pc, #212]	; (8005cd8 <HAL_RCC_OscConfig+0x758>)
 8005c04:	4013      	ands	r3, r2
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005c0e:	3a01      	subs	r2, #1
 8005c10:	0112      	lsls	r2, r2, #4
 8005c12:	4311      	orrs	r1, r2
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005c18:	0212      	lsls	r2, r2, #8
 8005c1a:	4311      	orrs	r1, r2
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005c20:	0852      	lsrs	r2, r2, #1
 8005c22:	3a01      	subs	r2, #1
 8005c24:	0552      	lsls	r2, r2, #21
 8005c26:	4311      	orrs	r1, r2
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005c2c:	0852      	lsrs	r2, r2, #1
 8005c2e:	3a01      	subs	r2, #1
 8005c30:	0652      	lsls	r2, r2, #25
 8005c32:	4311      	orrs	r1, r2
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005c38:	0912      	lsrs	r2, r2, #4
 8005c3a:	0452      	lsls	r2, r2, #17
 8005c3c:	430a      	orrs	r2, r1
 8005c3e:	4925      	ldr	r1, [pc, #148]	; (8005cd4 <HAL_RCC_OscConfig+0x754>)
 8005c40:	4313      	orrs	r3, r2
 8005c42:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005c44:	4b23      	ldr	r3, [pc, #140]	; (8005cd4 <HAL_RCC_OscConfig+0x754>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a22      	ldr	r2, [pc, #136]	; (8005cd4 <HAL_RCC_OscConfig+0x754>)
 8005c4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c4e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005c50:	4b20      	ldr	r3, [pc, #128]	; (8005cd4 <HAL_RCC_OscConfig+0x754>)
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	4a1f      	ldr	r2, [pc, #124]	; (8005cd4 <HAL_RCC_OscConfig+0x754>)
 8005c56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c5a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005c5c:	f7fc fe30 	bl	80028c0 <HAL_GetTick>
 8005c60:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c62:	e008      	b.n	8005c76 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c64:	f7fc fe2c 	bl	80028c0 <HAL_GetTick>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	1ad3      	subs	r3, r2, r3
 8005c6e:	2b02      	cmp	r3, #2
 8005c70:	d901      	bls.n	8005c76 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005c72:	2303      	movs	r3, #3
 8005c74:	e066      	b.n	8005d44 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c76:	4b17      	ldr	r3, [pc, #92]	; (8005cd4 <HAL_RCC_OscConfig+0x754>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d0f0      	beq.n	8005c64 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005c82:	e05e      	b.n	8005d42 <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	e05d      	b.n	8005d44 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c88:	4b12      	ldr	r3, [pc, #72]	; (8005cd4 <HAL_RCC_OscConfig+0x754>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d156      	bne.n	8005d42 <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005c94:	4b0f      	ldr	r3, [pc, #60]	; (8005cd4 <HAL_RCC_OscConfig+0x754>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a0e      	ldr	r2, [pc, #56]	; (8005cd4 <HAL_RCC_OscConfig+0x754>)
 8005c9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c9e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ca0:	4b0c      	ldr	r3, [pc, #48]	; (8005cd4 <HAL_RCC_OscConfig+0x754>)
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	4a0b      	ldr	r2, [pc, #44]	; (8005cd4 <HAL_RCC_OscConfig+0x754>)
 8005ca6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005caa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005cac:	f7fc fe08 	bl	80028c0 <HAL_GetTick>
 8005cb0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cb2:	e008      	b.n	8005cc6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cb4:	f7fc fe04 	bl	80028c0 <HAL_GetTick>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	1ad3      	subs	r3, r2, r3
 8005cbe:	2b02      	cmp	r3, #2
 8005cc0:	d901      	bls.n	8005cc6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005cc2:	2303      	movs	r3, #3
 8005cc4:	e03e      	b.n	8005d44 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cc6:	4b03      	ldr	r3, [pc, #12]	; (8005cd4 <HAL_RCC_OscConfig+0x754>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d0f0      	beq.n	8005cb4 <HAL_RCC_OscConfig+0x734>
 8005cd2:	e036      	b.n	8005d42 <HAL_RCC_OscConfig+0x7c2>
 8005cd4:	40021000 	.word	0x40021000
 8005cd8:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	2b0c      	cmp	r3, #12
 8005ce0:	d02d      	beq.n	8005d3e <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ce2:	4b1a      	ldr	r3, [pc, #104]	; (8005d4c <HAL_RCC_OscConfig+0x7cc>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a19      	ldr	r2, [pc, #100]	; (8005d4c <HAL_RCC_OscConfig+0x7cc>)
 8005ce8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cec:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8005cee:	4b17      	ldr	r3, [pc, #92]	; (8005d4c <HAL_RCC_OscConfig+0x7cc>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d105      	bne.n	8005d06 <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005cfa:	4b14      	ldr	r3, [pc, #80]	; (8005d4c <HAL_RCC_OscConfig+0x7cc>)
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	4a13      	ldr	r2, [pc, #76]	; (8005d4c <HAL_RCC_OscConfig+0x7cc>)
 8005d00:	f023 0303 	bic.w	r3, r3, #3
 8005d04:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005d06:	4b11      	ldr	r3, [pc, #68]	; (8005d4c <HAL_RCC_OscConfig+0x7cc>)
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	4a10      	ldr	r2, [pc, #64]	; (8005d4c <HAL_RCC_OscConfig+0x7cc>)
 8005d0c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005d10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d14:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d16:	f7fc fdd3 	bl	80028c0 <HAL_GetTick>
 8005d1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d1c:	e008      	b.n	8005d30 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d1e:	f7fc fdcf 	bl	80028c0 <HAL_GetTick>
 8005d22:	4602      	mov	r2, r0
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	1ad3      	subs	r3, r2, r3
 8005d28:	2b02      	cmp	r3, #2
 8005d2a:	d901      	bls.n	8005d30 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	e009      	b.n	8005d44 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d30:	4b06      	ldr	r3, [pc, #24]	; (8005d4c <HAL_RCC_OscConfig+0x7cc>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d1f0      	bne.n	8005d1e <HAL_RCC_OscConfig+0x79e>
 8005d3c:	e001      	b.n	8005d42 <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e000      	b.n	8005d44 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 8005d42:	2300      	movs	r3, #0
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3720      	adds	r7, #32
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	40021000 	.word	0x40021000

08005d50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d101      	bne.n	8005d64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	e0c8      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d64:	4b66      	ldr	r3, [pc, #408]	; (8005f00 <HAL_RCC_ClockConfig+0x1b0>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 0307 	and.w	r3, r3, #7
 8005d6c:	683a      	ldr	r2, [r7, #0]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d910      	bls.n	8005d94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d72:	4b63      	ldr	r3, [pc, #396]	; (8005f00 <HAL_RCC_ClockConfig+0x1b0>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f023 0207 	bic.w	r2, r3, #7
 8005d7a:	4961      	ldr	r1, [pc, #388]	; (8005f00 <HAL_RCC_ClockConfig+0x1b0>)
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d82:	4b5f      	ldr	r3, [pc, #380]	; (8005f00 <HAL_RCC_ClockConfig+0x1b0>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 0307 	and.w	r3, r3, #7
 8005d8a:	683a      	ldr	r2, [r7, #0]
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d001      	beq.n	8005d94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	e0b0      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f003 0301 	and.w	r3, r3, #1
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d04c      	beq.n	8005e3a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	2b03      	cmp	r3, #3
 8005da6:	d107      	bne.n	8005db8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005da8:	4b56      	ldr	r3, [pc, #344]	; (8005f04 <HAL_RCC_ClockConfig+0x1b4>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d121      	bne.n	8005df8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	e09e      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	d107      	bne.n	8005dd0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005dc0:	4b50      	ldr	r3, [pc, #320]	; (8005f04 <HAL_RCC_ClockConfig+0x1b4>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d115      	bne.n	8005df8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e092      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d107      	bne.n	8005de8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005dd8:	4b4a      	ldr	r3, [pc, #296]	; (8005f04 <HAL_RCC_ClockConfig+0x1b4>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 0302 	and.w	r3, r3, #2
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d109      	bne.n	8005df8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e086      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005de8:	4b46      	ldr	r3, [pc, #280]	; (8005f04 <HAL_RCC_ClockConfig+0x1b4>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d101      	bne.n	8005df8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e07e      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005df8:	4b42      	ldr	r3, [pc, #264]	; (8005f04 <HAL_RCC_ClockConfig+0x1b4>)
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	f023 0203 	bic.w	r2, r3, #3
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	493f      	ldr	r1, [pc, #252]	; (8005f04 <HAL_RCC_ClockConfig+0x1b4>)
 8005e06:	4313      	orrs	r3, r2
 8005e08:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e0a:	f7fc fd59 	bl	80028c0 <HAL_GetTick>
 8005e0e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e10:	e00a      	b.n	8005e28 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e12:	f7fc fd55 	bl	80028c0 <HAL_GetTick>
 8005e16:	4602      	mov	r2, r0
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	1ad3      	subs	r3, r2, r3
 8005e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d901      	bls.n	8005e28 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005e24:	2303      	movs	r3, #3
 8005e26:	e066      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e28:	4b36      	ldr	r3, [pc, #216]	; (8005f04 <HAL_RCC_ClockConfig+0x1b4>)
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	f003 020c 	and.w	r2, r3, #12
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d1eb      	bne.n	8005e12 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 0302 	and.w	r3, r3, #2
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d008      	beq.n	8005e58 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e46:	4b2f      	ldr	r3, [pc, #188]	; (8005f04 <HAL_RCC_ClockConfig+0x1b4>)
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	492c      	ldr	r1, [pc, #176]	; (8005f04 <HAL_RCC_ClockConfig+0x1b4>)
 8005e54:	4313      	orrs	r3, r2
 8005e56:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e58:	4b29      	ldr	r3, [pc, #164]	; (8005f00 <HAL_RCC_ClockConfig+0x1b0>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 0307 	and.w	r3, r3, #7
 8005e60:	683a      	ldr	r2, [r7, #0]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d210      	bcs.n	8005e88 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e66:	4b26      	ldr	r3, [pc, #152]	; (8005f00 <HAL_RCC_ClockConfig+0x1b0>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f023 0207 	bic.w	r2, r3, #7
 8005e6e:	4924      	ldr	r1, [pc, #144]	; (8005f00 <HAL_RCC_ClockConfig+0x1b0>)
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e76:	4b22      	ldr	r3, [pc, #136]	; (8005f00 <HAL_RCC_ClockConfig+0x1b0>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 0307 	and.w	r3, r3, #7
 8005e7e:	683a      	ldr	r2, [r7, #0]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d001      	beq.n	8005e88 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	e036      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 0304 	and.w	r3, r3, #4
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d008      	beq.n	8005ea6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e94:	4b1b      	ldr	r3, [pc, #108]	; (8005f04 <HAL_RCC_ClockConfig+0x1b4>)
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	4918      	ldr	r1, [pc, #96]	; (8005f04 <HAL_RCC_ClockConfig+0x1b4>)
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f003 0308 	and.w	r3, r3, #8
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d009      	beq.n	8005ec6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005eb2:	4b14      	ldr	r3, [pc, #80]	; (8005f04 <HAL_RCC_ClockConfig+0x1b4>)
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	00db      	lsls	r3, r3, #3
 8005ec0:	4910      	ldr	r1, [pc, #64]	; (8005f04 <HAL_RCC_ClockConfig+0x1b4>)
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005ec6:	f000 f825 	bl	8005f14 <HAL_RCC_GetSysClockFreq>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	4b0d      	ldr	r3, [pc, #52]	; (8005f04 <HAL_RCC_ClockConfig+0x1b4>)
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	091b      	lsrs	r3, r3, #4
 8005ed2:	f003 030f 	and.w	r3, r3, #15
 8005ed6:	490c      	ldr	r1, [pc, #48]	; (8005f08 <HAL_RCC_ClockConfig+0x1b8>)
 8005ed8:	5ccb      	ldrb	r3, [r1, r3]
 8005eda:	f003 031f 	and.w	r3, r3, #31
 8005ede:	fa22 f303 	lsr.w	r3, r2, r3
 8005ee2:	4a0a      	ldr	r2, [pc, #40]	; (8005f0c <HAL_RCC_ClockConfig+0x1bc>)
 8005ee4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005ee6:	4b0a      	ldr	r3, [pc, #40]	; (8005f10 <HAL_RCC_ClockConfig+0x1c0>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4618      	mov	r0, r3
 8005eec:	f7fc fc98 	bl	8002820 <HAL_InitTick>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	72fb      	strb	r3, [r7, #11]

  return status;
 8005ef4:	7afb      	ldrb	r3, [r7, #11]
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3710      	adds	r7, #16
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	40022000 	.word	0x40022000
 8005f04:	40021000 	.word	0x40021000
 8005f08:	0800e44c 	.word	0x0800e44c
 8005f0c:	20000090 	.word	0x20000090
 8005f10:	2000009c 	.word	0x2000009c

08005f14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b089      	sub	sp, #36	; 0x24
 8005f18:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	61fb      	str	r3, [r7, #28]
 8005f1e:	2300      	movs	r3, #0
 8005f20:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f22:	4b3e      	ldr	r3, [pc, #248]	; (800601c <HAL_RCC_GetSysClockFreq+0x108>)
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	f003 030c 	and.w	r3, r3, #12
 8005f2a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f2c:	4b3b      	ldr	r3, [pc, #236]	; (800601c <HAL_RCC_GetSysClockFreq+0x108>)
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	f003 0303 	and.w	r3, r3, #3
 8005f34:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d005      	beq.n	8005f48 <HAL_RCC_GetSysClockFreq+0x34>
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	2b0c      	cmp	r3, #12
 8005f40:	d121      	bne.n	8005f86 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d11e      	bne.n	8005f86 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005f48:	4b34      	ldr	r3, [pc, #208]	; (800601c <HAL_RCC_GetSysClockFreq+0x108>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 0308 	and.w	r3, r3, #8
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d107      	bne.n	8005f64 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005f54:	4b31      	ldr	r3, [pc, #196]	; (800601c <HAL_RCC_GetSysClockFreq+0x108>)
 8005f56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f5a:	0a1b      	lsrs	r3, r3, #8
 8005f5c:	f003 030f 	and.w	r3, r3, #15
 8005f60:	61fb      	str	r3, [r7, #28]
 8005f62:	e005      	b.n	8005f70 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005f64:	4b2d      	ldr	r3, [pc, #180]	; (800601c <HAL_RCC_GetSysClockFreq+0x108>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	091b      	lsrs	r3, r3, #4
 8005f6a:	f003 030f 	and.w	r3, r3, #15
 8005f6e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005f70:	4a2b      	ldr	r2, [pc, #172]	; (8006020 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f78:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d10d      	bne.n	8005f9c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005f84:	e00a      	b.n	8005f9c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	2b04      	cmp	r3, #4
 8005f8a:	d102      	bne.n	8005f92 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005f8c:	4b25      	ldr	r3, [pc, #148]	; (8006024 <HAL_RCC_GetSysClockFreq+0x110>)
 8005f8e:	61bb      	str	r3, [r7, #24]
 8005f90:	e004      	b.n	8005f9c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	2b08      	cmp	r3, #8
 8005f96:	d101      	bne.n	8005f9c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005f98:	4b23      	ldr	r3, [pc, #140]	; (8006028 <HAL_RCC_GetSysClockFreq+0x114>)
 8005f9a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	2b0c      	cmp	r3, #12
 8005fa0:	d134      	bne.n	800600c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005fa2:	4b1e      	ldr	r3, [pc, #120]	; (800601c <HAL_RCC_GetSysClockFreq+0x108>)
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	f003 0303 	and.w	r3, r3, #3
 8005faa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	2b02      	cmp	r3, #2
 8005fb0:	d003      	beq.n	8005fba <HAL_RCC_GetSysClockFreq+0xa6>
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	2b03      	cmp	r3, #3
 8005fb6:	d003      	beq.n	8005fc0 <HAL_RCC_GetSysClockFreq+0xac>
 8005fb8:	e005      	b.n	8005fc6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005fba:	4b1a      	ldr	r3, [pc, #104]	; (8006024 <HAL_RCC_GetSysClockFreq+0x110>)
 8005fbc:	617b      	str	r3, [r7, #20]
      break;
 8005fbe:	e005      	b.n	8005fcc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005fc0:	4b19      	ldr	r3, [pc, #100]	; (8006028 <HAL_RCC_GetSysClockFreq+0x114>)
 8005fc2:	617b      	str	r3, [r7, #20]
      break;
 8005fc4:	e002      	b.n	8005fcc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	617b      	str	r3, [r7, #20]
      break;
 8005fca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005fcc:	4b13      	ldr	r3, [pc, #76]	; (800601c <HAL_RCC_GetSysClockFreq+0x108>)
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	091b      	lsrs	r3, r3, #4
 8005fd2:	f003 0307 	and.w	r3, r3, #7
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005fda:	4b10      	ldr	r3, [pc, #64]	; (800601c <HAL_RCC_GetSysClockFreq+0x108>)
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	0a1b      	lsrs	r3, r3, #8
 8005fe0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fe4:	697a      	ldr	r2, [r7, #20]
 8005fe6:	fb03 f202 	mul.w	r2, r3, r2
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ff0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005ff2:	4b0a      	ldr	r3, [pc, #40]	; (800601c <HAL_RCC_GetSysClockFreq+0x108>)
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	0e5b      	lsrs	r3, r3, #25
 8005ff8:	f003 0303 	and.w	r3, r3, #3
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	005b      	lsls	r3, r3, #1
 8006000:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006002:	697a      	ldr	r2, [r7, #20]
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	fbb2 f3f3 	udiv	r3, r2, r3
 800600a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800600c:	69bb      	ldr	r3, [r7, #24]
}
 800600e:	4618      	mov	r0, r3
 8006010:	3724      	adds	r7, #36	; 0x24
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop
 800601c:	40021000 	.word	0x40021000
 8006020:	0800e464 	.word	0x0800e464
 8006024:	00f42400 	.word	0x00f42400
 8006028:	007a1200 	.word	0x007a1200

0800602c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800602c:	b480      	push	{r7}
 800602e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006030:	4b03      	ldr	r3, [pc, #12]	; (8006040 <HAL_RCC_GetHCLKFreq+0x14>)
 8006032:	681b      	ldr	r3, [r3, #0]
}
 8006034:	4618      	mov	r0, r3
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr
 800603e:	bf00      	nop
 8006040:	20000090 	.word	0x20000090

08006044 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006048:	f7ff fff0 	bl	800602c <HAL_RCC_GetHCLKFreq>
 800604c:	4602      	mov	r2, r0
 800604e:	4b06      	ldr	r3, [pc, #24]	; (8006068 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	0a1b      	lsrs	r3, r3, #8
 8006054:	f003 0307 	and.w	r3, r3, #7
 8006058:	4904      	ldr	r1, [pc, #16]	; (800606c <HAL_RCC_GetPCLK1Freq+0x28>)
 800605a:	5ccb      	ldrb	r3, [r1, r3]
 800605c:	f003 031f 	and.w	r3, r3, #31
 8006060:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006064:	4618      	mov	r0, r3
 8006066:	bd80      	pop	{r7, pc}
 8006068:	40021000 	.word	0x40021000
 800606c:	0800e45c 	.word	0x0800e45c

08006070 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006074:	f7ff ffda 	bl	800602c <HAL_RCC_GetHCLKFreq>
 8006078:	4602      	mov	r2, r0
 800607a:	4b06      	ldr	r3, [pc, #24]	; (8006094 <HAL_RCC_GetPCLK2Freq+0x24>)
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	0adb      	lsrs	r3, r3, #11
 8006080:	f003 0307 	and.w	r3, r3, #7
 8006084:	4904      	ldr	r1, [pc, #16]	; (8006098 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006086:	5ccb      	ldrb	r3, [r1, r3]
 8006088:	f003 031f 	and.w	r3, r3, #31
 800608c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006090:	4618      	mov	r0, r3
 8006092:	bd80      	pop	{r7, pc}
 8006094:	40021000 	.word	0x40021000
 8006098:	0800e45c 	.word	0x0800e45c

0800609c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b086      	sub	sp, #24
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80060a4:	2300      	movs	r3, #0
 80060a6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80060a8:	4b2a      	ldr	r3, [pc, #168]	; (8006154 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d003      	beq.n	80060bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80060b4:	f7ff fa00 	bl	80054b8 <HAL_PWREx_GetVoltageRange>
 80060b8:	6178      	str	r0, [r7, #20]
 80060ba:	e014      	b.n	80060e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80060bc:	4b25      	ldr	r3, [pc, #148]	; (8006154 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060c0:	4a24      	ldr	r2, [pc, #144]	; (8006154 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060c6:	6593      	str	r3, [r2, #88]	; 0x58
 80060c8:	4b22      	ldr	r3, [pc, #136]	; (8006154 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060d0:	60fb      	str	r3, [r7, #12]
 80060d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80060d4:	f7ff f9f0 	bl	80054b8 <HAL_PWREx_GetVoltageRange>
 80060d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80060da:	4b1e      	ldr	r3, [pc, #120]	; (8006154 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060de:	4a1d      	ldr	r2, [pc, #116]	; (8006154 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060e4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060ec:	d10b      	bne.n	8006106 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2b80      	cmp	r3, #128	; 0x80
 80060f2:	d919      	bls.n	8006128 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2ba0      	cmp	r3, #160	; 0xa0
 80060f8:	d902      	bls.n	8006100 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80060fa:	2302      	movs	r3, #2
 80060fc:	613b      	str	r3, [r7, #16]
 80060fe:	e013      	b.n	8006128 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006100:	2301      	movs	r3, #1
 8006102:	613b      	str	r3, [r7, #16]
 8006104:	e010      	b.n	8006128 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2b80      	cmp	r3, #128	; 0x80
 800610a:	d902      	bls.n	8006112 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800610c:	2303      	movs	r3, #3
 800610e:	613b      	str	r3, [r7, #16]
 8006110:	e00a      	b.n	8006128 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2b80      	cmp	r3, #128	; 0x80
 8006116:	d102      	bne.n	800611e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006118:	2302      	movs	r3, #2
 800611a:	613b      	str	r3, [r7, #16]
 800611c:	e004      	b.n	8006128 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2b70      	cmp	r3, #112	; 0x70
 8006122:	d101      	bne.n	8006128 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006124:	2301      	movs	r3, #1
 8006126:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006128:	4b0b      	ldr	r3, [pc, #44]	; (8006158 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f023 0207 	bic.w	r2, r3, #7
 8006130:	4909      	ldr	r1, [pc, #36]	; (8006158 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	4313      	orrs	r3, r2
 8006136:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006138:	4b07      	ldr	r3, [pc, #28]	; (8006158 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f003 0307 	and.w	r3, r3, #7
 8006140:	693a      	ldr	r2, [r7, #16]
 8006142:	429a      	cmp	r2, r3
 8006144:	d001      	beq.n	800614a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e000      	b.n	800614c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	3718      	adds	r7, #24
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}
 8006154:	40021000 	.word	0x40021000
 8006158:	40022000 	.word	0x40022000

0800615c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b086      	sub	sp, #24
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006164:	2300      	movs	r3, #0
 8006166:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006168:	2300      	movs	r3, #0
 800616a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006174:	2b00      	cmp	r3, #0
 8006176:	d041      	beq.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800617c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006180:	d02a      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006182:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006186:	d824      	bhi.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006188:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800618c:	d008      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800618e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006192:	d81e      	bhi.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006194:	2b00      	cmp	r3, #0
 8006196:	d00a      	beq.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006198:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800619c:	d010      	beq.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800619e:	e018      	b.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80061a0:	4b86      	ldr	r3, [pc, #536]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	4a85      	ldr	r2, [pc, #532]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061aa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80061ac:	e015      	b.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	3304      	adds	r3, #4
 80061b2:	2100      	movs	r1, #0
 80061b4:	4618      	mov	r0, r3
 80061b6:	f000 fabb 	bl	8006730 <RCCEx_PLLSAI1_Config>
 80061ba:	4603      	mov	r3, r0
 80061bc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80061be:	e00c      	b.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	3320      	adds	r3, #32
 80061c4:	2100      	movs	r1, #0
 80061c6:	4618      	mov	r0, r3
 80061c8:	f000 fba6 	bl	8006918 <RCCEx_PLLSAI2_Config>
 80061cc:	4603      	mov	r3, r0
 80061ce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80061d0:	e003      	b.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	74fb      	strb	r3, [r7, #19]
      break;
 80061d6:	e000      	b.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80061d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061da:	7cfb      	ldrb	r3, [r7, #19]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d10b      	bne.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80061e0:	4b76      	ldr	r3, [pc, #472]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061ee:	4973      	ldr	r1, [pc, #460]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061f0:	4313      	orrs	r3, r2
 80061f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80061f6:	e001      	b.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061f8:	7cfb      	ldrb	r3, [r7, #19]
 80061fa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006204:	2b00      	cmp	r3, #0
 8006206:	d041      	beq.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800620c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006210:	d02a      	beq.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8006212:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006216:	d824      	bhi.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006218:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800621c:	d008      	beq.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800621e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006222:	d81e      	bhi.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006224:	2b00      	cmp	r3, #0
 8006226:	d00a      	beq.n	800623e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006228:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800622c:	d010      	beq.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800622e:	e018      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006230:	4b62      	ldr	r3, [pc, #392]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	4a61      	ldr	r2, [pc, #388]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006236:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800623a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800623c:	e015      	b.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	3304      	adds	r3, #4
 8006242:	2100      	movs	r1, #0
 8006244:	4618      	mov	r0, r3
 8006246:	f000 fa73 	bl	8006730 <RCCEx_PLLSAI1_Config>
 800624a:	4603      	mov	r3, r0
 800624c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800624e:	e00c      	b.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	3320      	adds	r3, #32
 8006254:	2100      	movs	r1, #0
 8006256:	4618      	mov	r0, r3
 8006258:	f000 fb5e 	bl	8006918 <RCCEx_PLLSAI2_Config>
 800625c:	4603      	mov	r3, r0
 800625e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006260:	e003      	b.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	74fb      	strb	r3, [r7, #19]
      break;
 8006266:	e000      	b.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8006268:	bf00      	nop
    }

    if(ret == HAL_OK)
 800626a:	7cfb      	ldrb	r3, [r7, #19]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d10b      	bne.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006270:	4b52      	ldr	r3, [pc, #328]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006276:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800627e:	494f      	ldr	r1, [pc, #316]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006280:	4313      	orrs	r3, r2
 8006282:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006286:	e001      	b.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006288:	7cfb      	ldrb	r3, [r7, #19]
 800628a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006294:	2b00      	cmp	r3, #0
 8006296:	f000 80a0 	beq.w	80063da <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800629a:	2300      	movs	r3, #0
 800629c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800629e:	4b47      	ldr	r3, [pc, #284]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d101      	bne.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x152>
 80062aa:	2301      	movs	r3, #1
 80062ac:	e000      	b.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80062ae:	2300      	movs	r3, #0
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d00d      	beq.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062b4:	4b41      	ldr	r3, [pc, #260]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062b8:	4a40      	ldr	r2, [pc, #256]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062be:	6593      	str	r3, [r2, #88]	; 0x58
 80062c0:	4b3e      	ldr	r3, [pc, #248]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062c8:	60bb      	str	r3, [r7, #8]
 80062ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80062cc:	2301      	movs	r3, #1
 80062ce:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80062d0:	4b3b      	ldr	r3, [pc, #236]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a3a      	ldr	r2, [pc, #232]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80062d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80062dc:	f7fc faf0 	bl	80028c0 <HAL_GetTick>
 80062e0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80062e2:	e009      	b.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062e4:	f7fc faec 	bl	80028c0 <HAL_GetTick>
 80062e8:	4602      	mov	r2, r0
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	1ad3      	subs	r3, r2, r3
 80062ee:	2b02      	cmp	r3, #2
 80062f0:	d902      	bls.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80062f2:	2303      	movs	r3, #3
 80062f4:	74fb      	strb	r3, [r7, #19]
        break;
 80062f6:	e005      	b.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80062f8:	4b31      	ldr	r3, [pc, #196]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006300:	2b00      	cmp	r3, #0
 8006302:	d0ef      	beq.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006304:	7cfb      	ldrb	r3, [r7, #19]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d15c      	bne.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800630a:	4b2c      	ldr	r3, [pc, #176]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800630c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006310:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006314:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d01f      	beq.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006322:	697a      	ldr	r2, [r7, #20]
 8006324:	429a      	cmp	r2, r3
 8006326:	d019      	beq.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006328:	4b24      	ldr	r3, [pc, #144]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800632a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800632e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006332:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006334:	4b21      	ldr	r3, [pc, #132]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800633a:	4a20      	ldr	r2, [pc, #128]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800633c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006340:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006344:	4b1d      	ldr	r3, [pc, #116]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800634a:	4a1c      	ldr	r2, [pc, #112]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800634c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006350:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006354:	4a19      	ldr	r2, [pc, #100]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	f003 0301 	and.w	r3, r3, #1
 8006362:	2b00      	cmp	r3, #0
 8006364:	d016      	beq.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006366:	f7fc faab 	bl	80028c0 <HAL_GetTick>
 800636a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800636c:	e00b      	b.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800636e:	f7fc faa7 	bl	80028c0 <HAL_GetTick>
 8006372:	4602      	mov	r2, r0
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	1ad3      	subs	r3, r2, r3
 8006378:	f241 3288 	movw	r2, #5000	; 0x1388
 800637c:	4293      	cmp	r3, r2
 800637e:	d902      	bls.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006380:	2303      	movs	r3, #3
 8006382:	74fb      	strb	r3, [r7, #19]
            break;
 8006384:	e006      	b.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006386:	4b0d      	ldr	r3, [pc, #52]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800638c:	f003 0302 	and.w	r3, r3, #2
 8006390:	2b00      	cmp	r3, #0
 8006392:	d0ec      	beq.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006394:	7cfb      	ldrb	r3, [r7, #19]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d10c      	bne.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800639a:	4b08      	ldr	r3, [pc, #32]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800639c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063aa:	4904      	ldr	r1, [pc, #16]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063ac:	4313      	orrs	r3, r2
 80063ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80063b2:	e009      	b.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80063b4:	7cfb      	ldrb	r3, [r7, #19]
 80063b6:	74bb      	strb	r3, [r7, #18]
 80063b8:	e006      	b.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80063ba:	bf00      	nop
 80063bc:	40021000 	.word	0x40021000
 80063c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063c4:	7cfb      	ldrb	r3, [r7, #19]
 80063c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80063c8:	7c7b      	ldrb	r3, [r7, #17]
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d105      	bne.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063ce:	4b9e      	ldr	r3, [pc, #632]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063d2:	4a9d      	ldr	r2, [pc, #628]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063d8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f003 0301 	and.w	r3, r3, #1
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d00a      	beq.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80063e6:	4b98      	ldr	r3, [pc, #608]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ec:	f023 0203 	bic.w	r2, r3, #3
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f4:	4994      	ldr	r1, [pc, #592]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063f6:	4313      	orrs	r3, r2
 80063f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 0302 	and.w	r3, r3, #2
 8006404:	2b00      	cmp	r3, #0
 8006406:	d00a      	beq.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006408:	4b8f      	ldr	r3, [pc, #572]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800640a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800640e:	f023 020c 	bic.w	r2, r3, #12
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006416:	498c      	ldr	r1, [pc, #560]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006418:	4313      	orrs	r3, r2
 800641a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f003 0304 	and.w	r3, r3, #4
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00a      	beq.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800642a:	4b87      	ldr	r3, [pc, #540]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800642c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006430:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006438:	4983      	ldr	r1, [pc, #524]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800643a:	4313      	orrs	r3, r2
 800643c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f003 0308 	and.w	r3, r3, #8
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00a      	beq.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800644c:	4b7e      	ldr	r3, [pc, #504]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800644e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006452:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800645a:	497b      	ldr	r1, [pc, #492]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800645c:	4313      	orrs	r3, r2
 800645e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f003 0310 	and.w	r3, r3, #16
 800646a:	2b00      	cmp	r3, #0
 800646c:	d00a      	beq.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800646e:	4b76      	ldr	r3, [pc, #472]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006474:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800647c:	4972      	ldr	r1, [pc, #456]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800647e:	4313      	orrs	r3, r2
 8006480:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f003 0320 	and.w	r3, r3, #32
 800648c:	2b00      	cmp	r3, #0
 800648e:	d00a      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006490:	4b6d      	ldr	r3, [pc, #436]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006496:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800649e:	496a      	ldr	r1, [pc, #424]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064a0:	4313      	orrs	r3, r2
 80064a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d00a      	beq.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80064b2:	4b65      	ldr	r3, [pc, #404]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064c0:	4961      	ldr	r1, [pc, #388]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064c2:	4313      	orrs	r3, r2
 80064c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d00a      	beq.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80064d4:	4b5c      	ldr	r3, [pc, #368]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064e2:	4959      	ldr	r1, [pc, #356]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064e4:	4313      	orrs	r3, r2
 80064e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d00a      	beq.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80064f6:	4b54      	ldr	r3, [pc, #336]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064fc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006504:	4950      	ldr	r1, [pc, #320]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006506:	4313      	orrs	r3, r2
 8006508:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006514:	2b00      	cmp	r3, #0
 8006516:	d00a      	beq.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006518:	4b4b      	ldr	r3, [pc, #300]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800651a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800651e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006526:	4948      	ldr	r1, [pc, #288]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006528:	4313      	orrs	r3, r2
 800652a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006536:	2b00      	cmp	r3, #0
 8006538:	d00a      	beq.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800653a:	4b43      	ldr	r3, [pc, #268]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800653c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006540:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006548:	493f      	ldr	r1, [pc, #252]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800654a:	4313      	orrs	r3, r2
 800654c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006558:	2b00      	cmp	r3, #0
 800655a:	d028      	beq.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800655c:	4b3a      	ldr	r3, [pc, #232]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800655e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006562:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800656a:	4937      	ldr	r1, [pc, #220]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800656c:	4313      	orrs	r3, r2
 800656e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006576:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800657a:	d106      	bne.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800657c:	4b32      	ldr	r3, [pc, #200]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	4a31      	ldr	r2, [pc, #196]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006582:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006586:	60d3      	str	r3, [r2, #12]
 8006588:	e011      	b.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800658e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006592:	d10c      	bne.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	3304      	adds	r3, #4
 8006598:	2101      	movs	r1, #1
 800659a:	4618      	mov	r0, r3
 800659c:	f000 f8c8 	bl	8006730 <RCCEx_PLLSAI1_Config>
 80065a0:	4603      	mov	r3, r0
 80065a2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80065a4:	7cfb      	ldrb	r3, [r7, #19]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d001      	beq.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80065aa:	7cfb      	ldrb	r3, [r7, #19]
 80065ac:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d028      	beq.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80065ba:	4b23      	ldr	r3, [pc, #140]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065c0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065c8:	491f      	ldr	r1, [pc, #124]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065ca:	4313      	orrs	r3, r2
 80065cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065d8:	d106      	bne.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065da:	4b1b      	ldr	r3, [pc, #108]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	4a1a      	ldr	r2, [pc, #104]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065e4:	60d3      	str	r3, [r2, #12]
 80065e6:	e011      	b.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80065f0:	d10c      	bne.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	3304      	adds	r3, #4
 80065f6:	2101      	movs	r1, #1
 80065f8:	4618      	mov	r0, r3
 80065fa:	f000 f899 	bl	8006730 <RCCEx_PLLSAI1_Config>
 80065fe:	4603      	mov	r3, r0
 8006600:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006602:	7cfb      	ldrb	r3, [r7, #19]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d001      	beq.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006608:	7cfb      	ldrb	r3, [r7, #19]
 800660a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006614:	2b00      	cmp	r3, #0
 8006616:	d02b      	beq.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006618:	4b0b      	ldr	r3, [pc, #44]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800661a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800661e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006626:	4908      	ldr	r1, [pc, #32]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006628:	4313      	orrs	r3, r2
 800662a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006632:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006636:	d109      	bne.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006638:	4b03      	ldr	r3, [pc, #12]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	4a02      	ldr	r2, [pc, #8]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800663e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006642:	60d3      	str	r3, [r2, #12]
 8006644:	e014      	b.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8006646:	bf00      	nop
 8006648:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006650:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006654:	d10c      	bne.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	3304      	adds	r3, #4
 800665a:	2101      	movs	r1, #1
 800665c:	4618      	mov	r0, r3
 800665e:	f000 f867 	bl	8006730 <RCCEx_PLLSAI1_Config>
 8006662:	4603      	mov	r3, r0
 8006664:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006666:	7cfb      	ldrb	r3, [r7, #19]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d001      	beq.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800666c:	7cfb      	ldrb	r3, [r7, #19]
 800666e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006678:	2b00      	cmp	r3, #0
 800667a:	d02f      	beq.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800667c:	4b2b      	ldr	r3, [pc, #172]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800667e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006682:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800668a:	4928      	ldr	r1, [pc, #160]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800668c:	4313      	orrs	r3, r2
 800668e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006696:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800669a:	d10d      	bne.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	3304      	adds	r3, #4
 80066a0:	2102      	movs	r1, #2
 80066a2:	4618      	mov	r0, r3
 80066a4:	f000 f844 	bl	8006730 <RCCEx_PLLSAI1_Config>
 80066a8:	4603      	mov	r3, r0
 80066aa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80066ac:	7cfb      	ldrb	r3, [r7, #19]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d014      	beq.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80066b2:	7cfb      	ldrb	r3, [r7, #19]
 80066b4:	74bb      	strb	r3, [r7, #18]
 80066b6:	e011      	b.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066c0:	d10c      	bne.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	3320      	adds	r3, #32
 80066c6:	2102      	movs	r1, #2
 80066c8:	4618      	mov	r0, r3
 80066ca:	f000 f925 	bl	8006918 <RCCEx_PLLSAI2_Config>
 80066ce:	4603      	mov	r3, r0
 80066d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80066d2:	7cfb      	ldrb	r3, [r7, #19]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d001      	beq.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80066d8:	7cfb      	ldrb	r3, [r7, #19]
 80066da:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d00a      	beq.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80066e8:	4b10      	ldr	r3, [pc, #64]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80066ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066ee:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066f6:	490d      	ldr	r1, [pc, #52]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80066f8:	4313      	orrs	r3, r2
 80066fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006706:	2b00      	cmp	r3, #0
 8006708:	d00b      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800670a:	4b08      	ldr	r3, [pc, #32]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800670c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006710:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800671a:	4904      	ldr	r1, [pc, #16]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800671c:	4313      	orrs	r3, r2
 800671e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006722:	7cbb      	ldrb	r3, [r7, #18]
}
 8006724:	4618      	mov	r0, r3
 8006726:	3718      	adds	r7, #24
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}
 800672c:	40021000 	.word	0x40021000

08006730 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b084      	sub	sp, #16
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800673a:	2300      	movs	r3, #0
 800673c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800673e:	4b75      	ldr	r3, [pc, #468]	; (8006914 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006740:	68db      	ldr	r3, [r3, #12]
 8006742:	f003 0303 	and.w	r3, r3, #3
 8006746:	2b00      	cmp	r3, #0
 8006748:	d018      	beq.n	800677c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800674a:	4b72      	ldr	r3, [pc, #456]	; (8006914 <RCCEx_PLLSAI1_Config+0x1e4>)
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	f003 0203 	and.w	r2, r3, #3
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	429a      	cmp	r2, r3
 8006758:	d10d      	bne.n	8006776 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
       ||
 800675e:	2b00      	cmp	r3, #0
 8006760:	d009      	beq.n	8006776 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006762:	4b6c      	ldr	r3, [pc, #432]	; (8006914 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006764:	68db      	ldr	r3, [r3, #12]
 8006766:	091b      	lsrs	r3, r3, #4
 8006768:	f003 0307 	and.w	r3, r3, #7
 800676c:	1c5a      	adds	r2, r3, #1
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	685b      	ldr	r3, [r3, #4]
       ||
 8006772:	429a      	cmp	r2, r3
 8006774:	d047      	beq.n	8006806 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	73fb      	strb	r3, [r7, #15]
 800677a:	e044      	b.n	8006806 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	2b03      	cmp	r3, #3
 8006782:	d018      	beq.n	80067b6 <RCCEx_PLLSAI1_Config+0x86>
 8006784:	2b03      	cmp	r3, #3
 8006786:	d825      	bhi.n	80067d4 <RCCEx_PLLSAI1_Config+0xa4>
 8006788:	2b01      	cmp	r3, #1
 800678a:	d002      	beq.n	8006792 <RCCEx_PLLSAI1_Config+0x62>
 800678c:	2b02      	cmp	r3, #2
 800678e:	d009      	beq.n	80067a4 <RCCEx_PLLSAI1_Config+0x74>
 8006790:	e020      	b.n	80067d4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006792:	4b60      	ldr	r3, [pc, #384]	; (8006914 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f003 0302 	and.w	r3, r3, #2
 800679a:	2b00      	cmp	r3, #0
 800679c:	d11d      	bne.n	80067da <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80067a2:	e01a      	b.n	80067da <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80067a4:	4b5b      	ldr	r3, [pc, #364]	; (8006914 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d116      	bne.n	80067de <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80067b4:	e013      	b.n	80067de <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80067b6:	4b57      	ldr	r3, [pc, #348]	; (8006914 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d10f      	bne.n	80067e2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80067c2:	4b54      	ldr	r3, [pc, #336]	; (8006914 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d109      	bne.n	80067e2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80067d2:	e006      	b.n	80067e2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	73fb      	strb	r3, [r7, #15]
      break;
 80067d8:	e004      	b.n	80067e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80067da:	bf00      	nop
 80067dc:	e002      	b.n	80067e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80067de:	bf00      	nop
 80067e0:	e000      	b.n	80067e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80067e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80067e4:	7bfb      	ldrb	r3, [r7, #15]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d10d      	bne.n	8006806 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80067ea:	4b4a      	ldr	r3, [pc, #296]	; (8006914 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6819      	ldr	r1, [r3, #0]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	3b01      	subs	r3, #1
 80067fc:	011b      	lsls	r3, r3, #4
 80067fe:	430b      	orrs	r3, r1
 8006800:	4944      	ldr	r1, [pc, #272]	; (8006914 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006802:	4313      	orrs	r3, r2
 8006804:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006806:	7bfb      	ldrb	r3, [r7, #15]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d17d      	bne.n	8006908 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800680c:	4b41      	ldr	r3, [pc, #260]	; (8006914 <RCCEx_PLLSAI1_Config+0x1e4>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a40      	ldr	r2, [pc, #256]	; (8006914 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006812:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006816:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006818:	f7fc f852 	bl	80028c0 <HAL_GetTick>
 800681c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800681e:	e009      	b.n	8006834 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006820:	f7fc f84e 	bl	80028c0 <HAL_GetTick>
 8006824:	4602      	mov	r2, r0
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	1ad3      	subs	r3, r2, r3
 800682a:	2b02      	cmp	r3, #2
 800682c:	d902      	bls.n	8006834 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800682e:	2303      	movs	r3, #3
 8006830:	73fb      	strb	r3, [r7, #15]
        break;
 8006832:	e005      	b.n	8006840 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006834:	4b37      	ldr	r3, [pc, #220]	; (8006914 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800683c:	2b00      	cmp	r3, #0
 800683e:	d1ef      	bne.n	8006820 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006840:	7bfb      	ldrb	r3, [r7, #15]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d160      	bne.n	8006908 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d111      	bne.n	8006870 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800684c:	4b31      	ldr	r3, [pc, #196]	; (8006914 <RCCEx_PLLSAI1_Config+0x1e4>)
 800684e:	691b      	ldr	r3, [r3, #16]
 8006850:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006854:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	6892      	ldr	r2, [r2, #8]
 800685c:	0211      	lsls	r1, r2, #8
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	68d2      	ldr	r2, [r2, #12]
 8006862:	0912      	lsrs	r2, r2, #4
 8006864:	0452      	lsls	r2, r2, #17
 8006866:	430a      	orrs	r2, r1
 8006868:	492a      	ldr	r1, [pc, #168]	; (8006914 <RCCEx_PLLSAI1_Config+0x1e4>)
 800686a:	4313      	orrs	r3, r2
 800686c:	610b      	str	r3, [r1, #16]
 800686e:	e027      	b.n	80068c0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	2b01      	cmp	r3, #1
 8006874:	d112      	bne.n	800689c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006876:	4b27      	ldr	r3, [pc, #156]	; (8006914 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006878:	691b      	ldr	r3, [r3, #16]
 800687a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800687e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	6892      	ldr	r2, [r2, #8]
 8006886:	0211      	lsls	r1, r2, #8
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	6912      	ldr	r2, [r2, #16]
 800688c:	0852      	lsrs	r2, r2, #1
 800688e:	3a01      	subs	r2, #1
 8006890:	0552      	lsls	r2, r2, #21
 8006892:	430a      	orrs	r2, r1
 8006894:	491f      	ldr	r1, [pc, #124]	; (8006914 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006896:	4313      	orrs	r3, r2
 8006898:	610b      	str	r3, [r1, #16]
 800689a:	e011      	b.n	80068c0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800689c:	4b1d      	ldr	r3, [pc, #116]	; (8006914 <RCCEx_PLLSAI1_Config+0x1e4>)
 800689e:	691b      	ldr	r3, [r3, #16]
 80068a0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80068a4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	6892      	ldr	r2, [r2, #8]
 80068ac:	0211      	lsls	r1, r2, #8
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	6952      	ldr	r2, [r2, #20]
 80068b2:	0852      	lsrs	r2, r2, #1
 80068b4:	3a01      	subs	r2, #1
 80068b6:	0652      	lsls	r2, r2, #25
 80068b8:	430a      	orrs	r2, r1
 80068ba:	4916      	ldr	r1, [pc, #88]	; (8006914 <RCCEx_PLLSAI1_Config+0x1e4>)
 80068bc:	4313      	orrs	r3, r2
 80068be:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80068c0:	4b14      	ldr	r3, [pc, #80]	; (8006914 <RCCEx_PLLSAI1_Config+0x1e4>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a13      	ldr	r2, [pc, #76]	; (8006914 <RCCEx_PLLSAI1_Config+0x1e4>)
 80068c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80068ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068cc:	f7fb fff8 	bl	80028c0 <HAL_GetTick>
 80068d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80068d2:	e009      	b.n	80068e8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80068d4:	f7fb fff4 	bl	80028c0 <HAL_GetTick>
 80068d8:	4602      	mov	r2, r0
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	1ad3      	subs	r3, r2, r3
 80068de:	2b02      	cmp	r3, #2
 80068e0:	d902      	bls.n	80068e8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80068e2:	2303      	movs	r3, #3
 80068e4:	73fb      	strb	r3, [r7, #15]
          break;
 80068e6:	e005      	b.n	80068f4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80068e8:	4b0a      	ldr	r3, [pc, #40]	; (8006914 <RCCEx_PLLSAI1_Config+0x1e4>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d0ef      	beq.n	80068d4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80068f4:	7bfb      	ldrb	r3, [r7, #15]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d106      	bne.n	8006908 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80068fa:	4b06      	ldr	r3, [pc, #24]	; (8006914 <RCCEx_PLLSAI1_Config+0x1e4>)
 80068fc:	691a      	ldr	r2, [r3, #16]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	699b      	ldr	r3, [r3, #24]
 8006902:	4904      	ldr	r1, [pc, #16]	; (8006914 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006904:	4313      	orrs	r3, r2
 8006906:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006908:	7bfb      	ldrb	r3, [r7, #15]
}
 800690a:	4618      	mov	r0, r3
 800690c:	3710      	adds	r7, #16
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	40021000 	.word	0x40021000

08006918 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b084      	sub	sp, #16
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006922:	2300      	movs	r3, #0
 8006924:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006926:	4b6a      	ldr	r3, [pc, #424]	; (8006ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006928:	68db      	ldr	r3, [r3, #12]
 800692a:	f003 0303 	and.w	r3, r3, #3
 800692e:	2b00      	cmp	r3, #0
 8006930:	d018      	beq.n	8006964 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006932:	4b67      	ldr	r3, [pc, #412]	; (8006ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	f003 0203 	and.w	r2, r3, #3
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	429a      	cmp	r2, r3
 8006940:	d10d      	bne.n	800695e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
       ||
 8006946:	2b00      	cmp	r3, #0
 8006948:	d009      	beq.n	800695e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800694a:	4b61      	ldr	r3, [pc, #388]	; (8006ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800694c:	68db      	ldr	r3, [r3, #12]
 800694e:	091b      	lsrs	r3, r3, #4
 8006950:	f003 0307 	and.w	r3, r3, #7
 8006954:	1c5a      	adds	r2, r3, #1
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	685b      	ldr	r3, [r3, #4]
       ||
 800695a:	429a      	cmp	r2, r3
 800695c:	d047      	beq.n	80069ee <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	73fb      	strb	r3, [r7, #15]
 8006962:	e044      	b.n	80069ee <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	2b03      	cmp	r3, #3
 800696a:	d018      	beq.n	800699e <RCCEx_PLLSAI2_Config+0x86>
 800696c:	2b03      	cmp	r3, #3
 800696e:	d825      	bhi.n	80069bc <RCCEx_PLLSAI2_Config+0xa4>
 8006970:	2b01      	cmp	r3, #1
 8006972:	d002      	beq.n	800697a <RCCEx_PLLSAI2_Config+0x62>
 8006974:	2b02      	cmp	r3, #2
 8006976:	d009      	beq.n	800698c <RCCEx_PLLSAI2_Config+0x74>
 8006978:	e020      	b.n	80069bc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800697a:	4b55      	ldr	r3, [pc, #340]	; (8006ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f003 0302 	and.w	r3, r3, #2
 8006982:	2b00      	cmp	r3, #0
 8006984:	d11d      	bne.n	80069c2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800698a:	e01a      	b.n	80069c2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800698c:	4b50      	ldr	r3, [pc, #320]	; (8006ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006994:	2b00      	cmp	r3, #0
 8006996:	d116      	bne.n	80069c6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800699c:	e013      	b.n	80069c6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800699e:	4b4c      	ldr	r3, [pc, #304]	; (8006ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d10f      	bne.n	80069ca <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80069aa:	4b49      	ldr	r3, [pc, #292]	; (8006ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d109      	bne.n	80069ca <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80069ba:	e006      	b.n	80069ca <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80069bc:	2301      	movs	r3, #1
 80069be:	73fb      	strb	r3, [r7, #15]
      break;
 80069c0:	e004      	b.n	80069cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80069c2:	bf00      	nop
 80069c4:	e002      	b.n	80069cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80069c6:	bf00      	nop
 80069c8:	e000      	b.n	80069cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80069ca:	bf00      	nop
    }

    if(status == HAL_OK)
 80069cc:	7bfb      	ldrb	r3, [r7, #15]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d10d      	bne.n	80069ee <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80069d2:	4b3f      	ldr	r3, [pc, #252]	; (8006ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6819      	ldr	r1, [r3, #0]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	3b01      	subs	r3, #1
 80069e4:	011b      	lsls	r3, r3, #4
 80069e6:	430b      	orrs	r3, r1
 80069e8:	4939      	ldr	r1, [pc, #228]	; (8006ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80069ea:	4313      	orrs	r3, r2
 80069ec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80069ee:	7bfb      	ldrb	r3, [r7, #15]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d167      	bne.n	8006ac4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80069f4:	4b36      	ldr	r3, [pc, #216]	; (8006ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a35      	ldr	r2, [pc, #212]	; (8006ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80069fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a00:	f7fb ff5e 	bl	80028c0 <HAL_GetTick>
 8006a04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006a06:	e009      	b.n	8006a1c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006a08:	f7fb ff5a 	bl	80028c0 <HAL_GetTick>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	2b02      	cmp	r3, #2
 8006a14:	d902      	bls.n	8006a1c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006a16:	2303      	movs	r3, #3
 8006a18:	73fb      	strb	r3, [r7, #15]
        break;
 8006a1a:	e005      	b.n	8006a28 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006a1c:	4b2c      	ldr	r3, [pc, #176]	; (8006ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d1ef      	bne.n	8006a08 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006a28:	7bfb      	ldrb	r3, [r7, #15]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d14a      	bne.n	8006ac4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d111      	bne.n	8006a58 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006a34:	4b26      	ldr	r3, [pc, #152]	; (8006ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a36:	695b      	ldr	r3, [r3, #20]
 8006a38:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006a3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	6892      	ldr	r2, [r2, #8]
 8006a44:	0211      	lsls	r1, r2, #8
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	68d2      	ldr	r2, [r2, #12]
 8006a4a:	0912      	lsrs	r2, r2, #4
 8006a4c:	0452      	lsls	r2, r2, #17
 8006a4e:	430a      	orrs	r2, r1
 8006a50:	491f      	ldr	r1, [pc, #124]	; (8006ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a52:	4313      	orrs	r3, r2
 8006a54:	614b      	str	r3, [r1, #20]
 8006a56:	e011      	b.n	8006a7c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006a58:	4b1d      	ldr	r3, [pc, #116]	; (8006ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a5a:	695b      	ldr	r3, [r3, #20]
 8006a5c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006a60:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	6892      	ldr	r2, [r2, #8]
 8006a68:	0211      	lsls	r1, r2, #8
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	6912      	ldr	r2, [r2, #16]
 8006a6e:	0852      	lsrs	r2, r2, #1
 8006a70:	3a01      	subs	r2, #1
 8006a72:	0652      	lsls	r2, r2, #25
 8006a74:	430a      	orrs	r2, r1
 8006a76:	4916      	ldr	r1, [pc, #88]	; (8006ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006a7c:	4b14      	ldr	r3, [pc, #80]	; (8006ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a13      	ldr	r2, [pc, #76]	; (8006ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a86:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a88:	f7fb ff1a 	bl	80028c0 <HAL_GetTick>
 8006a8c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006a8e:	e009      	b.n	8006aa4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006a90:	f7fb ff16 	bl	80028c0 <HAL_GetTick>
 8006a94:	4602      	mov	r2, r0
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	1ad3      	subs	r3, r2, r3
 8006a9a:	2b02      	cmp	r3, #2
 8006a9c:	d902      	bls.n	8006aa4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006a9e:	2303      	movs	r3, #3
 8006aa0:	73fb      	strb	r3, [r7, #15]
          break;
 8006aa2:	e005      	b.n	8006ab0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006aa4:	4b0a      	ldr	r3, [pc, #40]	; (8006ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d0ef      	beq.n	8006a90 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006ab0:	7bfb      	ldrb	r3, [r7, #15]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d106      	bne.n	8006ac4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006ab6:	4b06      	ldr	r3, [pc, #24]	; (8006ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ab8:	695a      	ldr	r2, [r3, #20]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	695b      	ldr	r3, [r3, #20]
 8006abe:	4904      	ldr	r1, [pc, #16]	; (8006ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3710      	adds	r7, #16
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	bf00      	nop
 8006ad0:	40021000 	.word	0x40021000

08006ad4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b082      	sub	sp, #8
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d101      	bne.n	8006ae6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e049      	b.n	8006b7a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d106      	bne.n	8006b00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2200      	movs	r2, #0
 8006af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f7fb fbb0 	bl	8002260 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2202      	movs	r2, #2
 8006b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	3304      	adds	r3, #4
 8006b10:	4619      	mov	r1, r3
 8006b12:	4610      	mov	r0, r2
 8006b14:	f000 fccc 	bl	80074b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2201      	movs	r2, #1
 8006b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2201      	movs	r2, #1
 8006b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2201      	movs	r2, #1
 8006b54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b78:	2300      	movs	r3, #0
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3708      	adds	r7, #8
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}

08006b82 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006b82:	b580      	push	{r7, lr}
 8006b84:	b082      	sub	sp, #8
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d101      	bne.n	8006b94 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	e049      	b.n	8006c28 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d106      	bne.n	8006bae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 f841 	bl	8006c30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2202      	movs	r2, #2
 8006bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	3304      	adds	r3, #4
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	4610      	mov	r0, r2
 8006bc2:	f000 fc75 	bl	80074b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2201      	movs	r2, #1
 8006bca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2201      	movs	r2, #1
 8006bda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2201      	movs	r2, #1
 8006be2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2201      	movs	r2, #1
 8006bea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2201      	movs	r2, #1
 8006c02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2201      	movs	r2, #1
 8006c0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2201      	movs	r2, #1
 8006c12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2201      	movs	r2, #1
 8006c1a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2201      	movs	r2, #1
 8006c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c26:	2300      	movs	r3, #0
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3708      	adds	r7, #8
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b083      	sub	sp, #12
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006c38:	bf00      	nop
 8006c3a:	370c      	adds	r7, #12
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr

08006c44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d109      	bne.n	8006c68 <HAL_TIM_PWM_Start+0x24>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	bf14      	ite	ne
 8006c60:	2301      	movne	r3, #1
 8006c62:	2300      	moveq	r3, #0
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	e03c      	b.n	8006ce2 <HAL_TIM_PWM_Start+0x9e>
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	2b04      	cmp	r3, #4
 8006c6c:	d109      	bne.n	8006c82 <HAL_TIM_PWM_Start+0x3e>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	bf14      	ite	ne
 8006c7a:	2301      	movne	r3, #1
 8006c7c:	2300      	moveq	r3, #0
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	e02f      	b.n	8006ce2 <HAL_TIM_PWM_Start+0x9e>
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	2b08      	cmp	r3, #8
 8006c86:	d109      	bne.n	8006c9c <HAL_TIM_PWM_Start+0x58>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	bf14      	ite	ne
 8006c94:	2301      	movne	r3, #1
 8006c96:	2300      	moveq	r3, #0
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	e022      	b.n	8006ce2 <HAL_TIM_PWM_Start+0x9e>
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	2b0c      	cmp	r3, #12
 8006ca0:	d109      	bne.n	8006cb6 <HAL_TIM_PWM_Start+0x72>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ca8:	b2db      	uxtb	r3, r3
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	bf14      	ite	ne
 8006cae:	2301      	movne	r3, #1
 8006cb0:	2300      	moveq	r3, #0
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	e015      	b.n	8006ce2 <HAL_TIM_PWM_Start+0x9e>
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	2b10      	cmp	r3, #16
 8006cba:	d109      	bne.n	8006cd0 <HAL_TIM_PWM_Start+0x8c>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	bf14      	ite	ne
 8006cc8:	2301      	movne	r3, #1
 8006cca:	2300      	moveq	r3, #0
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	e008      	b.n	8006ce2 <HAL_TIM_PWM_Start+0x9e>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	bf14      	ite	ne
 8006cdc:	2301      	movne	r3, #1
 8006cde:	2300      	moveq	r3, #0
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d001      	beq.n	8006cea <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e09c      	b.n	8006e24 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d104      	bne.n	8006cfa <HAL_TIM_PWM_Start+0xb6>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2202      	movs	r2, #2
 8006cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006cf8:	e023      	b.n	8006d42 <HAL_TIM_PWM_Start+0xfe>
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	2b04      	cmp	r3, #4
 8006cfe:	d104      	bne.n	8006d0a <HAL_TIM_PWM_Start+0xc6>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2202      	movs	r2, #2
 8006d04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d08:	e01b      	b.n	8006d42 <HAL_TIM_PWM_Start+0xfe>
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	2b08      	cmp	r3, #8
 8006d0e:	d104      	bne.n	8006d1a <HAL_TIM_PWM_Start+0xd6>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2202      	movs	r2, #2
 8006d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d18:	e013      	b.n	8006d42 <HAL_TIM_PWM_Start+0xfe>
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	2b0c      	cmp	r3, #12
 8006d1e:	d104      	bne.n	8006d2a <HAL_TIM_PWM_Start+0xe6>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2202      	movs	r2, #2
 8006d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d28:	e00b      	b.n	8006d42 <HAL_TIM_PWM_Start+0xfe>
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	2b10      	cmp	r3, #16
 8006d2e:	d104      	bne.n	8006d3a <HAL_TIM_PWM_Start+0xf6>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2202      	movs	r2, #2
 8006d34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d38:	e003      	b.n	8006d42 <HAL_TIM_PWM_Start+0xfe>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2202      	movs	r2, #2
 8006d3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	2201      	movs	r2, #1
 8006d48:	6839      	ldr	r1, [r7, #0]
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f000 ffba 	bl	8007cc4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a35      	ldr	r2, [pc, #212]	; (8006e2c <HAL_TIM_PWM_Start+0x1e8>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d013      	beq.n	8006d82 <HAL_TIM_PWM_Start+0x13e>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a34      	ldr	r2, [pc, #208]	; (8006e30 <HAL_TIM_PWM_Start+0x1ec>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d00e      	beq.n	8006d82 <HAL_TIM_PWM_Start+0x13e>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a32      	ldr	r2, [pc, #200]	; (8006e34 <HAL_TIM_PWM_Start+0x1f0>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d009      	beq.n	8006d82 <HAL_TIM_PWM_Start+0x13e>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a31      	ldr	r2, [pc, #196]	; (8006e38 <HAL_TIM_PWM_Start+0x1f4>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d004      	beq.n	8006d82 <HAL_TIM_PWM_Start+0x13e>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a2f      	ldr	r2, [pc, #188]	; (8006e3c <HAL_TIM_PWM_Start+0x1f8>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d101      	bne.n	8006d86 <HAL_TIM_PWM_Start+0x142>
 8006d82:	2301      	movs	r3, #1
 8006d84:	e000      	b.n	8006d88 <HAL_TIM_PWM_Start+0x144>
 8006d86:	2300      	movs	r3, #0
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d007      	beq.n	8006d9c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d9a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a22      	ldr	r2, [pc, #136]	; (8006e2c <HAL_TIM_PWM_Start+0x1e8>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d01d      	beq.n	8006de2 <HAL_TIM_PWM_Start+0x19e>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dae:	d018      	beq.n	8006de2 <HAL_TIM_PWM_Start+0x19e>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a22      	ldr	r2, [pc, #136]	; (8006e40 <HAL_TIM_PWM_Start+0x1fc>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d013      	beq.n	8006de2 <HAL_TIM_PWM_Start+0x19e>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a21      	ldr	r2, [pc, #132]	; (8006e44 <HAL_TIM_PWM_Start+0x200>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d00e      	beq.n	8006de2 <HAL_TIM_PWM_Start+0x19e>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a1f      	ldr	r2, [pc, #124]	; (8006e48 <HAL_TIM_PWM_Start+0x204>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d009      	beq.n	8006de2 <HAL_TIM_PWM_Start+0x19e>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a17      	ldr	r2, [pc, #92]	; (8006e30 <HAL_TIM_PWM_Start+0x1ec>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d004      	beq.n	8006de2 <HAL_TIM_PWM_Start+0x19e>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a15      	ldr	r2, [pc, #84]	; (8006e34 <HAL_TIM_PWM_Start+0x1f0>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d115      	bne.n	8006e0e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	689a      	ldr	r2, [r3, #8]
 8006de8:	4b18      	ldr	r3, [pc, #96]	; (8006e4c <HAL_TIM_PWM_Start+0x208>)
 8006dea:	4013      	ands	r3, r2
 8006dec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2b06      	cmp	r3, #6
 8006df2:	d015      	beq.n	8006e20 <HAL_TIM_PWM_Start+0x1dc>
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dfa:	d011      	beq.n	8006e20 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f042 0201 	orr.w	r2, r2, #1
 8006e0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e0c:	e008      	b.n	8006e20 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f042 0201 	orr.w	r2, r2, #1
 8006e1c:	601a      	str	r2, [r3, #0]
 8006e1e:	e000      	b.n	8006e22 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e20:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006e22:	2300      	movs	r3, #0
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3710      	adds	r7, #16
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}
 8006e2c:	40012c00 	.word	0x40012c00
 8006e30:	40013400 	.word	0x40013400
 8006e34:	40014000 	.word	0x40014000
 8006e38:	40014400 	.word	0x40014400
 8006e3c:	40014800 	.word	0x40014800
 8006e40:	40000400 	.word	0x40000400
 8006e44:	40000800 	.word	0x40000800
 8006e48:	40000c00 	.word	0x40000c00
 8006e4c:	00010007 	.word	0x00010007

08006e50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b082      	sub	sp, #8
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	f003 0302 	and.w	r3, r3, #2
 8006e62:	2b02      	cmp	r3, #2
 8006e64:	d122      	bne.n	8006eac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	f003 0302 	and.w	r3, r3, #2
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d11b      	bne.n	8006eac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f06f 0202 	mvn.w	r2, #2
 8006e7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2201      	movs	r2, #1
 8006e82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	699b      	ldr	r3, [r3, #24]
 8006e8a:	f003 0303 	and.w	r3, r3, #3
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d003      	beq.n	8006e9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 faed 	bl	8007472 <HAL_TIM_IC_CaptureCallback>
 8006e98:	e005      	b.n	8006ea6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 fadf 	bl	800745e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f000 faf0 	bl	8007486 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	691b      	ldr	r3, [r3, #16]
 8006eb2:	f003 0304 	and.w	r3, r3, #4
 8006eb6:	2b04      	cmp	r3, #4
 8006eb8:	d122      	bne.n	8006f00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	f003 0304 	and.w	r3, r3, #4
 8006ec4:	2b04      	cmp	r3, #4
 8006ec6:	d11b      	bne.n	8006f00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f06f 0204 	mvn.w	r2, #4
 8006ed0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2202      	movs	r2, #2
 8006ed6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	699b      	ldr	r3, [r3, #24]
 8006ede:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d003      	beq.n	8006eee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 fac3 	bl	8007472 <HAL_TIM_IC_CaptureCallback>
 8006eec:	e005      	b.n	8006efa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 fab5 	bl	800745e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 fac6 	bl	8007486 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	691b      	ldr	r3, [r3, #16]
 8006f06:	f003 0308 	and.w	r3, r3, #8
 8006f0a:	2b08      	cmp	r3, #8
 8006f0c:	d122      	bne.n	8006f54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	f003 0308 	and.w	r3, r3, #8
 8006f18:	2b08      	cmp	r3, #8
 8006f1a:	d11b      	bne.n	8006f54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f06f 0208 	mvn.w	r2, #8
 8006f24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2204      	movs	r2, #4
 8006f2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	69db      	ldr	r3, [r3, #28]
 8006f32:	f003 0303 	and.w	r3, r3, #3
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d003      	beq.n	8006f42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 fa99 	bl	8007472 <HAL_TIM_IC_CaptureCallback>
 8006f40:	e005      	b.n	8006f4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 fa8b 	bl	800745e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f000 fa9c 	bl	8007486 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	691b      	ldr	r3, [r3, #16]
 8006f5a:	f003 0310 	and.w	r3, r3, #16
 8006f5e:	2b10      	cmp	r3, #16
 8006f60:	d122      	bne.n	8006fa8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	f003 0310 	and.w	r3, r3, #16
 8006f6c:	2b10      	cmp	r3, #16
 8006f6e:	d11b      	bne.n	8006fa8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f06f 0210 	mvn.w	r2, #16
 8006f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2208      	movs	r2, #8
 8006f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	69db      	ldr	r3, [r3, #28]
 8006f86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d003      	beq.n	8006f96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 fa6f 	bl	8007472 <HAL_TIM_IC_CaptureCallback>
 8006f94:	e005      	b.n	8006fa2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 fa61 	bl	800745e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 fa72 	bl	8007486 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	691b      	ldr	r3, [r3, #16]
 8006fae:	f003 0301 	and.w	r3, r3, #1
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d10e      	bne.n	8006fd4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	68db      	ldr	r3, [r3, #12]
 8006fbc:	f003 0301 	and.w	r3, r3, #1
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d107      	bne.n	8006fd4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f06f 0201 	mvn.w	r2, #1
 8006fcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 fa3b 	bl	800744a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	691b      	ldr	r3, [r3, #16]
 8006fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fde:	2b80      	cmp	r3, #128	; 0x80
 8006fe0:	d10e      	bne.n	8007000 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fec:	2b80      	cmp	r3, #128	; 0x80
 8006fee:	d107      	bne.n	8007000 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 ff1a 	bl	8007e34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	691b      	ldr	r3, [r3, #16]
 8007006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800700a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800700e:	d10e      	bne.n	800702e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	68db      	ldr	r3, [r3, #12]
 8007016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800701a:	2b80      	cmp	r3, #128	; 0x80
 800701c:	d107      	bne.n	800702e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007026:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f000 ff0d 	bl	8007e48 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007038:	2b40      	cmp	r3, #64	; 0x40
 800703a:	d10e      	bne.n	800705a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	68db      	ldr	r3, [r3, #12]
 8007042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007046:	2b40      	cmp	r3, #64	; 0x40
 8007048:	d107      	bne.n	800705a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007052:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f000 fa20 	bl	800749a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	691b      	ldr	r3, [r3, #16]
 8007060:	f003 0320 	and.w	r3, r3, #32
 8007064:	2b20      	cmp	r3, #32
 8007066:	d10e      	bne.n	8007086 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	68db      	ldr	r3, [r3, #12]
 800706e:	f003 0320 	and.w	r3, r3, #32
 8007072:	2b20      	cmp	r3, #32
 8007074:	d107      	bne.n	8007086 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f06f 0220 	mvn.w	r2, #32
 800707e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 fecd 	bl	8007e20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007086:	bf00      	nop
 8007088:	3708      	adds	r7, #8
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
	...

08007090 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b086      	sub	sp, #24
 8007094:	af00      	add	r7, sp, #0
 8007096:	60f8      	str	r0, [r7, #12]
 8007098:	60b9      	str	r1, [r7, #8]
 800709a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800709c:	2300      	movs	r3, #0
 800709e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d101      	bne.n	80070ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80070aa:	2302      	movs	r3, #2
 80070ac:	e0ff      	b.n	80072ae <HAL_TIM_PWM_ConfigChannel+0x21e>
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2201      	movs	r2, #1
 80070b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2b14      	cmp	r3, #20
 80070ba:	f200 80f0 	bhi.w	800729e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80070be:	a201      	add	r2, pc, #4	; (adr r2, 80070c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80070c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c4:	08007119 	.word	0x08007119
 80070c8:	0800729f 	.word	0x0800729f
 80070cc:	0800729f 	.word	0x0800729f
 80070d0:	0800729f 	.word	0x0800729f
 80070d4:	08007159 	.word	0x08007159
 80070d8:	0800729f 	.word	0x0800729f
 80070dc:	0800729f 	.word	0x0800729f
 80070e0:	0800729f 	.word	0x0800729f
 80070e4:	0800719b 	.word	0x0800719b
 80070e8:	0800729f 	.word	0x0800729f
 80070ec:	0800729f 	.word	0x0800729f
 80070f0:	0800729f 	.word	0x0800729f
 80070f4:	080071db 	.word	0x080071db
 80070f8:	0800729f 	.word	0x0800729f
 80070fc:	0800729f 	.word	0x0800729f
 8007100:	0800729f 	.word	0x0800729f
 8007104:	0800721d 	.word	0x0800721d
 8007108:	0800729f 	.word	0x0800729f
 800710c:	0800729f 	.word	0x0800729f
 8007110:	0800729f 	.word	0x0800729f
 8007114:	0800725d 	.word	0x0800725d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	68b9      	ldr	r1, [r7, #8]
 800711e:	4618      	mov	r0, r3
 8007120:	f000 fa60 	bl	80075e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	699a      	ldr	r2, [r3, #24]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f042 0208 	orr.w	r2, r2, #8
 8007132:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	699a      	ldr	r2, [r3, #24]
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f022 0204 	bic.w	r2, r2, #4
 8007142:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	6999      	ldr	r1, [r3, #24]
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	691a      	ldr	r2, [r3, #16]
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	430a      	orrs	r2, r1
 8007154:	619a      	str	r2, [r3, #24]
      break;
 8007156:	e0a5      	b.n	80072a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	68b9      	ldr	r1, [r7, #8]
 800715e:	4618      	mov	r0, r3
 8007160:	f000 fad0 	bl	8007704 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	699a      	ldr	r2, [r3, #24]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007172:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	699a      	ldr	r2, [r3, #24]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007182:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	6999      	ldr	r1, [r3, #24]
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	691b      	ldr	r3, [r3, #16]
 800718e:	021a      	lsls	r2, r3, #8
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	430a      	orrs	r2, r1
 8007196:	619a      	str	r2, [r3, #24]
      break;
 8007198:	e084      	b.n	80072a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	68b9      	ldr	r1, [r7, #8]
 80071a0:	4618      	mov	r0, r3
 80071a2:	f000 fb39 	bl	8007818 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	69da      	ldr	r2, [r3, #28]
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f042 0208 	orr.w	r2, r2, #8
 80071b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	69da      	ldr	r2, [r3, #28]
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f022 0204 	bic.w	r2, r2, #4
 80071c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	69d9      	ldr	r1, [r3, #28]
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	691a      	ldr	r2, [r3, #16]
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	430a      	orrs	r2, r1
 80071d6:	61da      	str	r2, [r3, #28]
      break;
 80071d8:	e064      	b.n	80072a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	68b9      	ldr	r1, [r7, #8]
 80071e0:	4618      	mov	r0, r3
 80071e2:	f000 fba1 	bl	8007928 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	69da      	ldr	r2, [r3, #28]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	69da      	ldr	r2, [r3, #28]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007204:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	69d9      	ldr	r1, [r3, #28]
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	691b      	ldr	r3, [r3, #16]
 8007210:	021a      	lsls	r2, r3, #8
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	430a      	orrs	r2, r1
 8007218:	61da      	str	r2, [r3, #28]
      break;
 800721a:	e043      	b.n	80072a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	68b9      	ldr	r1, [r7, #8]
 8007222:	4618      	mov	r0, r3
 8007224:	f000 fbea 	bl	80079fc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f042 0208 	orr.w	r2, r2, #8
 8007236:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f022 0204 	bic.w	r2, r2, #4
 8007246:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	691a      	ldr	r2, [r3, #16]
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	430a      	orrs	r2, r1
 8007258:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800725a:	e023      	b.n	80072a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	68b9      	ldr	r1, [r7, #8]
 8007262:	4618      	mov	r0, r3
 8007264:	f000 fc2e 	bl	8007ac4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007276:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007286:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	021a      	lsls	r2, r3, #8
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	430a      	orrs	r2, r1
 800729a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800729c:	e002      	b.n	80072a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800729e:	2301      	movs	r3, #1
 80072a0:	75fb      	strb	r3, [r7, #23]
      break;
 80072a2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2200      	movs	r2, #0
 80072a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80072ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3718      	adds	r7, #24
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	bf00      	nop

080072b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b084      	sub	sp, #16
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80072c2:	2300      	movs	r3, #0
 80072c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d101      	bne.n	80072d4 <HAL_TIM_ConfigClockSource+0x1c>
 80072d0:	2302      	movs	r3, #2
 80072d2:	e0b6      	b.n	8007442 <HAL_TIM_ConfigClockSource+0x18a>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2201      	movs	r2, #1
 80072d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2202      	movs	r2, #2
 80072e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80072f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	68ba      	ldr	r2, [r7, #8]
 8007306:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007310:	d03e      	beq.n	8007390 <HAL_TIM_ConfigClockSource+0xd8>
 8007312:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007316:	f200 8087 	bhi.w	8007428 <HAL_TIM_ConfigClockSource+0x170>
 800731a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800731e:	f000 8086 	beq.w	800742e <HAL_TIM_ConfigClockSource+0x176>
 8007322:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007326:	d87f      	bhi.n	8007428 <HAL_TIM_ConfigClockSource+0x170>
 8007328:	2b70      	cmp	r3, #112	; 0x70
 800732a:	d01a      	beq.n	8007362 <HAL_TIM_ConfigClockSource+0xaa>
 800732c:	2b70      	cmp	r3, #112	; 0x70
 800732e:	d87b      	bhi.n	8007428 <HAL_TIM_ConfigClockSource+0x170>
 8007330:	2b60      	cmp	r3, #96	; 0x60
 8007332:	d050      	beq.n	80073d6 <HAL_TIM_ConfigClockSource+0x11e>
 8007334:	2b60      	cmp	r3, #96	; 0x60
 8007336:	d877      	bhi.n	8007428 <HAL_TIM_ConfigClockSource+0x170>
 8007338:	2b50      	cmp	r3, #80	; 0x50
 800733a:	d03c      	beq.n	80073b6 <HAL_TIM_ConfigClockSource+0xfe>
 800733c:	2b50      	cmp	r3, #80	; 0x50
 800733e:	d873      	bhi.n	8007428 <HAL_TIM_ConfigClockSource+0x170>
 8007340:	2b40      	cmp	r3, #64	; 0x40
 8007342:	d058      	beq.n	80073f6 <HAL_TIM_ConfigClockSource+0x13e>
 8007344:	2b40      	cmp	r3, #64	; 0x40
 8007346:	d86f      	bhi.n	8007428 <HAL_TIM_ConfigClockSource+0x170>
 8007348:	2b30      	cmp	r3, #48	; 0x30
 800734a:	d064      	beq.n	8007416 <HAL_TIM_ConfigClockSource+0x15e>
 800734c:	2b30      	cmp	r3, #48	; 0x30
 800734e:	d86b      	bhi.n	8007428 <HAL_TIM_ConfigClockSource+0x170>
 8007350:	2b20      	cmp	r3, #32
 8007352:	d060      	beq.n	8007416 <HAL_TIM_ConfigClockSource+0x15e>
 8007354:	2b20      	cmp	r3, #32
 8007356:	d867      	bhi.n	8007428 <HAL_TIM_ConfigClockSource+0x170>
 8007358:	2b00      	cmp	r3, #0
 800735a:	d05c      	beq.n	8007416 <HAL_TIM_ConfigClockSource+0x15e>
 800735c:	2b10      	cmp	r3, #16
 800735e:	d05a      	beq.n	8007416 <HAL_TIM_ConfigClockSource+0x15e>
 8007360:	e062      	b.n	8007428 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6818      	ldr	r0, [r3, #0]
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	6899      	ldr	r1, [r3, #8]
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	685a      	ldr	r2, [r3, #4]
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	68db      	ldr	r3, [r3, #12]
 8007372:	f000 fc87 	bl	8007c84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007384:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	68ba      	ldr	r2, [r7, #8]
 800738c:	609a      	str	r2, [r3, #8]
      break;
 800738e:	e04f      	b.n	8007430 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6818      	ldr	r0, [r3, #0]
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	6899      	ldr	r1, [r3, #8]
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	685a      	ldr	r2, [r3, #4]
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	f000 fc70 	bl	8007c84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	689a      	ldr	r2, [r3, #8]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80073b2:	609a      	str	r2, [r3, #8]
      break;
 80073b4:	e03c      	b.n	8007430 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6818      	ldr	r0, [r3, #0]
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	6859      	ldr	r1, [r3, #4]
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	461a      	mov	r2, r3
 80073c4:	f000 fbe4 	bl	8007b90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	2150      	movs	r1, #80	; 0x50
 80073ce:	4618      	mov	r0, r3
 80073d0:	f000 fc3d 	bl	8007c4e <TIM_ITRx_SetConfig>
      break;
 80073d4:	e02c      	b.n	8007430 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6818      	ldr	r0, [r3, #0]
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	6859      	ldr	r1, [r3, #4]
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	68db      	ldr	r3, [r3, #12]
 80073e2:	461a      	mov	r2, r3
 80073e4:	f000 fc03 	bl	8007bee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	2160      	movs	r1, #96	; 0x60
 80073ee:	4618      	mov	r0, r3
 80073f0:	f000 fc2d 	bl	8007c4e <TIM_ITRx_SetConfig>
      break;
 80073f4:	e01c      	b.n	8007430 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6818      	ldr	r0, [r3, #0]
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	6859      	ldr	r1, [r3, #4]
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	68db      	ldr	r3, [r3, #12]
 8007402:	461a      	mov	r2, r3
 8007404:	f000 fbc4 	bl	8007b90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	2140      	movs	r1, #64	; 0x40
 800740e:	4618      	mov	r0, r3
 8007410:	f000 fc1d 	bl	8007c4e <TIM_ITRx_SetConfig>
      break;
 8007414:	e00c      	b.n	8007430 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4619      	mov	r1, r3
 8007420:	4610      	mov	r0, r2
 8007422:	f000 fc14 	bl	8007c4e <TIM_ITRx_SetConfig>
      break;
 8007426:	e003      	b.n	8007430 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007428:	2301      	movs	r3, #1
 800742a:	73fb      	strb	r3, [r7, #15]
      break;
 800742c:	e000      	b.n	8007430 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800742e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2201      	movs	r2, #1
 8007434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007440:	7bfb      	ldrb	r3, [r7, #15]
}
 8007442:	4618      	mov	r0, r3
 8007444:	3710      	adds	r7, #16
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}

0800744a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800744a:	b480      	push	{r7}
 800744c:	b083      	sub	sp, #12
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007452:	bf00      	nop
 8007454:	370c      	adds	r7, #12
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr

0800745e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800745e:	b480      	push	{r7}
 8007460:	b083      	sub	sp, #12
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007466:	bf00      	nop
 8007468:	370c      	adds	r7, #12
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr

08007472 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007472:	b480      	push	{r7}
 8007474:	b083      	sub	sp, #12
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800747a:	bf00      	nop
 800747c:	370c      	adds	r7, #12
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr

08007486 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007486:	b480      	push	{r7}
 8007488:	b083      	sub	sp, #12
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800748e:	bf00      	nop
 8007490:	370c      	adds	r7, #12
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr

0800749a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800749a:	b480      	push	{r7}
 800749c:	b083      	sub	sp, #12
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80074a2:	bf00      	nop
 80074a4:	370c      	adds	r7, #12
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr
	...

080074b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b085      	sub	sp, #20
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	4a40      	ldr	r2, [pc, #256]	; (80075c4 <TIM_Base_SetConfig+0x114>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d013      	beq.n	80074f0 <TIM_Base_SetConfig+0x40>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074ce:	d00f      	beq.n	80074f0 <TIM_Base_SetConfig+0x40>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	4a3d      	ldr	r2, [pc, #244]	; (80075c8 <TIM_Base_SetConfig+0x118>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d00b      	beq.n	80074f0 <TIM_Base_SetConfig+0x40>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	4a3c      	ldr	r2, [pc, #240]	; (80075cc <TIM_Base_SetConfig+0x11c>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d007      	beq.n	80074f0 <TIM_Base_SetConfig+0x40>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	4a3b      	ldr	r2, [pc, #236]	; (80075d0 <TIM_Base_SetConfig+0x120>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d003      	beq.n	80074f0 <TIM_Base_SetConfig+0x40>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	4a3a      	ldr	r2, [pc, #232]	; (80075d4 <TIM_Base_SetConfig+0x124>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d108      	bne.n	8007502 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	68fa      	ldr	r2, [r7, #12]
 80074fe:	4313      	orrs	r3, r2
 8007500:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	4a2f      	ldr	r2, [pc, #188]	; (80075c4 <TIM_Base_SetConfig+0x114>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d01f      	beq.n	800754a <TIM_Base_SetConfig+0x9a>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007510:	d01b      	beq.n	800754a <TIM_Base_SetConfig+0x9a>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	4a2c      	ldr	r2, [pc, #176]	; (80075c8 <TIM_Base_SetConfig+0x118>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d017      	beq.n	800754a <TIM_Base_SetConfig+0x9a>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	4a2b      	ldr	r2, [pc, #172]	; (80075cc <TIM_Base_SetConfig+0x11c>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d013      	beq.n	800754a <TIM_Base_SetConfig+0x9a>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	4a2a      	ldr	r2, [pc, #168]	; (80075d0 <TIM_Base_SetConfig+0x120>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d00f      	beq.n	800754a <TIM_Base_SetConfig+0x9a>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	4a29      	ldr	r2, [pc, #164]	; (80075d4 <TIM_Base_SetConfig+0x124>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d00b      	beq.n	800754a <TIM_Base_SetConfig+0x9a>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	4a28      	ldr	r2, [pc, #160]	; (80075d8 <TIM_Base_SetConfig+0x128>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d007      	beq.n	800754a <TIM_Base_SetConfig+0x9a>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	4a27      	ldr	r2, [pc, #156]	; (80075dc <TIM_Base_SetConfig+0x12c>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d003      	beq.n	800754a <TIM_Base_SetConfig+0x9a>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	4a26      	ldr	r2, [pc, #152]	; (80075e0 <TIM_Base_SetConfig+0x130>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d108      	bne.n	800755c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007550:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	68db      	ldr	r3, [r3, #12]
 8007556:	68fa      	ldr	r2, [r7, #12]
 8007558:	4313      	orrs	r3, r2
 800755a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	695b      	ldr	r3, [r3, #20]
 8007566:	4313      	orrs	r3, r2
 8007568:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	68fa      	ldr	r2, [r7, #12]
 800756e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	689a      	ldr	r2, [r3, #8]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	4a10      	ldr	r2, [pc, #64]	; (80075c4 <TIM_Base_SetConfig+0x114>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d00f      	beq.n	80075a8 <TIM_Base_SetConfig+0xf8>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	4a12      	ldr	r2, [pc, #72]	; (80075d4 <TIM_Base_SetConfig+0x124>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d00b      	beq.n	80075a8 <TIM_Base_SetConfig+0xf8>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	4a11      	ldr	r2, [pc, #68]	; (80075d8 <TIM_Base_SetConfig+0x128>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d007      	beq.n	80075a8 <TIM_Base_SetConfig+0xf8>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	4a10      	ldr	r2, [pc, #64]	; (80075dc <TIM_Base_SetConfig+0x12c>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d003      	beq.n	80075a8 <TIM_Base_SetConfig+0xf8>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	4a0f      	ldr	r2, [pc, #60]	; (80075e0 <TIM_Base_SetConfig+0x130>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d103      	bne.n	80075b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	691a      	ldr	r2, [r3, #16]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2201      	movs	r2, #1
 80075b4:	615a      	str	r2, [r3, #20]
}
 80075b6:	bf00      	nop
 80075b8:	3714      	adds	r7, #20
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr
 80075c2:	bf00      	nop
 80075c4:	40012c00 	.word	0x40012c00
 80075c8:	40000400 	.word	0x40000400
 80075cc:	40000800 	.word	0x40000800
 80075d0:	40000c00 	.word	0x40000c00
 80075d4:	40013400 	.word	0x40013400
 80075d8:	40014000 	.word	0x40014000
 80075dc:	40014400 	.word	0x40014400
 80075e0:	40014800 	.word	0x40014800

080075e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b087      	sub	sp, #28
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6a1b      	ldr	r3, [r3, #32]
 80075f2:	f023 0201 	bic.w	r2, r3, #1
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6a1b      	ldr	r3, [r3, #32]
 80075fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	699b      	ldr	r3, [r3, #24]
 800760a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007616:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f023 0303 	bic.w	r3, r3, #3
 800761e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	68fa      	ldr	r2, [r7, #12]
 8007626:	4313      	orrs	r3, r2
 8007628:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	f023 0302 	bic.w	r3, r3, #2
 8007630:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	689b      	ldr	r3, [r3, #8]
 8007636:	697a      	ldr	r2, [r7, #20]
 8007638:	4313      	orrs	r3, r2
 800763a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	4a2c      	ldr	r2, [pc, #176]	; (80076f0 <TIM_OC1_SetConfig+0x10c>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d00f      	beq.n	8007664 <TIM_OC1_SetConfig+0x80>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	4a2b      	ldr	r2, [pc, #172]	; (80076f4 <TIM_OC1_SetConfig+0x110>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d00b      	beq.n	8007664 <TIM_OC1_SetConfig+0x80>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	4a2a      	ldr	r2, [pc, #168]	; (80076f8 <TIM_OC1_SetConfig+0x114>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d007      	beq.n	8007664 <TIM_OC1_SetConfig+0x80>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	4a29      	ldr	r2, [pc, #164]	; (80076fc <TIM_OC1_SetConfig+0x118>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d003      	beq.n	8007664 <TIM_OC1_SetConfig+0x80>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	4a28      	ldr	r2, [pc, #160]	; (8007700 <TIM_OC1_SetConfig+0x11c>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d10c      	bne.n	800767e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	f023 0308 	bic.w	r3, r3, #8
 800766a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	68db      	ldr	r3, [r3, #12]
 8007670:	697a      	ldr	r2, [r7, #20]
 8007672:	4313      	orrs	r3, r2
 8007674:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	f023 0304 	bic.w	r3, r3, #4
 800767c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	4a1b      	ldr	r2, [pc, #108]	; (80076f0 <TIM_OC1_SetConfig+0x10c>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d00f      	beq.n	80076a6 <TIM_OC1_SetConfig+0xc2>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	4a1a      	ldr	r2, [pc, #104]	; (80076f4 <TIM_OC1_SetConfig+0x110>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d00b      	beq.n	80076a6 <TIM_OC1_SetConfig+0xc2>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	4a19      	ldr	r2, [pc, #100]	; (80076f8 <TIM_OC1_SetConfig+0x114>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d007      	beq.n	80076a6 <TIM_OC1_SetConfig+0xc2>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	4a18      	ldr	r2, [pc, #96]	; (80076fc <TIM_OC1_SetConfig+0x118>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d003      	beq.n	80076a6 <TIM_OC1_SetConfig+0xc2>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	4a17      	ldr	r2, [pc, #92]	; (8007700 <TIM_OC1_SetConfig+0x11c>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d111      	bne.n	80076ca <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80076b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	695b      	ldr	r3, [r3, #20]
 80076ba:	693a      	ldr	r2, [r7, #16]
 80076bc:	4313      	orrs	r3, r2
 80076be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	699b      	ldr	r3, [r3, #24]
 80076c4:	693a      	ldr	r2, [r7, #16]
 80076c6:	4313      	orrs	r3, r2
 80076c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	693a      	ldr	r2, [r7, #16]
 80076ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	68fa      	ldr	r2, [r7, #12]
 80076d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	685a      	ldr	r2, [r3, #4]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	697a      	ldr	r2, [r7, #20]
 80076e2:	621a      	str	r2, [r3, #32]
}
 80076e4:	bf00      	nop
 80076e6:	371c      	adds	r7, #28
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr
 80076f0:	40012c00 	.word	0x40012c00
 80076f4:	40013400 	.word	0x40013400
 80076f8:	40014000 	.word	0x40014000
 80076fc:	40014400 	.word	0x40014400
 8007700:	40014800 	.word	0x40014800

08007704 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007704:	b480      	push	{r7}
 8007706:	b087      	sub	sp, #28
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6a1b      	ldr	r3, [r3, #32]
 8007712:	f023 0210 	bic.w	r2, r3, #16
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6a1b      	ldr	r3, [r3, #32]
 800771e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	699b      	ldr	r3, [r3, #24]
 800772a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007732:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007736:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800773e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	021b      	lsls	r3, r3, #8
 8007746:	68fa      	ldr	r2, [r7, #12]
 8007748:	4313      	orrs	r3, r2
 800774a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	f023 0320 	bic.w	r3, r3, #32
 8007752:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	011b      	lsls	r3, r3, #4
 800775a:	697a      	ldr	r2, [r7, #20]
 800775c:	4313      	orrs	r3, r2
 800775e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	4a28      	ldr	r2, [pc, #160]	; (8007804 <TIM_OC2_SetConfig+0x100>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d003      	beq.n	8007770 <TIM_OC2_SetConfig+0x6c>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	4a27      	ldr	r2, [pc, #156]	; (8007808 <TIM_OC2_SetConfig+0x104>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d10d      	bne.n	800778c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007776:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	68db      	ldr	r3, [r3, #12]
 800777c:	011b      	lsls	r3, r3, #4
 800777e:	697a      	ldr	r2, [r7, #20]
 8007780:	4313      	orrs	r3, r2
 8007782:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800778a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	4a1d      	ldr	r2, [pc, #116]	; (8007804 <TIM_OC2_SetConfig+0x100>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d00f      	beq.n	80077b4 <TIM_OC2_SetConfig+0xb0>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	4a1c      	ldr	r2, [pc, #112]	; (8007808 <TIM_OC2_SetConfig+0x104>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d00b      	beq.n	80077b4 <TIM_OC2_SetConfig+0xb0>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	4a1b      	ldr	r2, [pc, #108]	; (800780c <TIM_OC2_SetConfig+0x108>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d007      	beq.n	80077b4 <TIM_OC2_SetConfig+0xb0>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	4a1a      	ldr	r2, [pc, #104]	; (8007810 <TIM_OC2_SetConfig+0x10c>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d003      	beq.n	80077b4 <TIM_OC2_SetConfig+0xb0>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	4a19      	ldr	r2, [pc, #100]	; (8007814 <TIM_OC2_SetConfig+0x110>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d113      	bne.n	80077dc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80077ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80077c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	695b      	ldr	r3, [r3, #20]
 80077c8:	009b      	lsls	r3, r3, #2
 80077ca:	693a      	ldr	r2, [r7, #16]
 80077cc:	4313      	orrs	r3, r2
 80077ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	699b      	ldr	r3, [r3, #24]
 80077d4:	009b      	lsls	r3, r3, #2
 80077d6:	693a      	ldr	r2, [r7, #16]
 80077d8:	4313      	orrs	r3, r2
 80077da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	693a      	ldr	r2, [r7, #16]
 80077e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	68fa      	ldr	r2, [r7, #12]
 80077e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	685a      	ldr	r2, [r3, #4]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	697a      	ldr	r2, [r7, #20]
 80077f4:	621a      	str	r2, [r3, #32]
}
 80077f6:	bf00      	nop
 80077f8:	371c      	adds	r7, #28
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr
 8007802:	bf00      	nop
 8007804:	40012c00 	.word	0x40012c00
 8007808:	40013400 	.word	0x40013400
 800780c:	40014000 	.word	0x40014000
 8007810:	40014400 	.word	0x40014400
 8007814:	40014800 	.word	0x40014800

08007818 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007818:	b480      	push	{r7}
 800781a:	b087      	sub	sp, #28
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6a1b      	ldr	r3, [r3, #32]
 8007826:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6a1b      	ldr	r3, [r3, #32]
 8007832:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	69db      	ldr	r3, [r3, #28]
 800783e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800784a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f023 0303 	bic.w	r3, r3, #3
 8007852:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	68fa      	ldr	r2, [r7, #12]
 800785a:	4313      	orrs	r3, r2
 800785c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007864:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	689b      	ldr	r3, [r3, #8]
 800786a:	021b      	lsls	r3, r3, #8
 800786c:	697a      	ldr	r2, [r7, #20]
 800786e:	4313      	orrs	r3, r2
 8007870:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	4a27      	ldr	r2, [pc, #156]	; (8007914 <TIM_OC3_SetConfig+0xfc>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d003      	beq.n	8007882 <TIM_OC3_SetConfig+0x6a>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	4a26      	ldr	r2, [pc, #152]	; (8007918 <TIM_OC3_SetConfig+0x100>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d10d      	bne.n	800789e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007888:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	021b      	lsls	r3, r3, #8
 8007890:	697a      	ldr	r2, [r7, #20]
 8007892:	4313      	orrs	r3, r2
 8007894:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800789c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	4a1c      	ldr	r2, [pc, #112]	; (8007914 <TIM_OC3_SetConfig+0xfc>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d00f      	beq.n	80078c6 <TIM_OC3_SetConfig+0xae>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	4a1b      	ldr	r2, [pc, #108]	; (8007918 <TIM_OC3_SetConfig+0x100>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d00b      	beq.n	80078c6 <TIM_OC3_SetConfig+0xae>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	4a1a      	ldr	r2, [pc, #104]	; (800791c <TIM_OC3_SetConfig+0x104>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d007      	beq.n	80078c6 <TIM_OC3_SetConfig+0xae>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	4a19      	ldr	r2, [pc, #100]	; (8007920 <TIM_OC3_SetConfig+0x108>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d003      	beq.n	80078c6 <TIM_OC3_SetConfig+0xae>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	4a18      	ldr	r2, [pc, #96]	; (8007924 <TIM_OC3_SetConfig+0x10c>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d113      	bne.n	80078ee <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80078d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	695b      	ldr	r3, [r3, #20]
 80078da:	011b      	lsls	r3, r3, #4
 80078dc:	693a      	ldr	r2, [r7, #16]
 80078de:	4313      	orrs	r3, r2
 80078e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	699b      	ldr	r3, [r3, #24]
 80078e6:	011b      	lsls	r3, r3, #4
 80078e8:	693a      	ldr	r2, [r7, #16]
 80078ea:	4313      	orrs	r3, r2
 80078ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	693a      	ldr	r2, [r7, #16]
 80078f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	68fa      	ldr	r2, [r7, #12]
 80078f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	685a      	ldr	r2, [r3, #4]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	697a      	ldr	r2, [r7, #20]
 8007906:	621a      	str	r2, [r3, #32]
}
 8007908:	bf00      	nop
 800790a:	371c      	adds	r7, #28
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr
 8007914:	40012c00 	.word	0x40012c00
 8007918:	40013400 	.word	0x40013400
 800791c:	40014000 	.word	0x40014000
 8007920:	40014400 	.word	0x40014400
 8007924:	40014800 	.word	0x40014800

08007928 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007928:	b480      	push	{r7}
 800792a:	b087      	sub	sp, #28
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6a1b      	ldr	r3, [r3, #32]
 8007936:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6a1b      	ldr	r3, [r3, #32]
 8007942:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	69db      	ldr	r3, [r3, #28]
 800794e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007956:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800795a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007962:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	021b      	lsls	r3, r3, #8
 800796a:	68fa      	ldr	r2, [r7, #12]
 800796c:	4313      	orrs	r3, r2
 800796e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007976:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	031b      	lsls	r3, r3, #12
 800797e:	693a      	ldr	r2, [r7, #16]
 8007980:	4313      	orrs	r3, r2
 8007982:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	4a18      	ldr	r2, [pc, #96]	; (80079e8 <TIM_OC4_SetConfig+0xc0>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d00f      	beq.n	80079ac <TIM_OC4_SetConfig+0x84>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	4a17      	ldr	r2, [pc, #92]	; (80079ec <TIM_OC4_SetConfig+0xc4>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d00b      	beq.n	80079ac <TIM_OC4_SetConfig+0x84>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	4a16      	ldr	r2, [pc, #88]	; (80079f0 <TIM_OC4_SetConfig+0xc8>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d007      	beq.n	80079ac <TIM_OC4_SetConfig+0x84>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	4a15      	ldr	r2, [pc, #84]	; (80079f4 <TIM_OC4_SetConfig+0xcc>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d003      	beq.n	80079ac <TIM_OC4_SetConfig+0x84>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	4a14      	ldr	r2, [pc, #80]	; (80079f8 <TIM_OC4_SetConfig+0xd0>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d109      	bne.n	80079c0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	695b      	ldr	r3, [r3, #20]
 80079b8:	019b      	lsls	r3, r3, #6
 80079ba:	697a      	ldr	r2, [r7, #20]
 80079bc:	4313      	orrs	r3, r2
 80079be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	697a      	ldr	r2, [r7, #20]
 80079c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	68fa      	ldr	r2, [r7, #12]
 80079ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	685a      	ldr	r2, [r3, #4]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	693a      	ldr	r2, [r7, #16]
 80079d8:	621a      	str	r2, [r3, #32]
}
 80079da:	bf00      	nop
 80079dc:	371c      	adds	r7, #28
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr
 80079e6:	bf00      	nop
 80079e8:	40012c00 	.word	0x40012c00
 80079ec:	40013400 	.word	0x40013400
 80079f0:	40014000 	.word	0x40014000
 80079f4:	40014400 	.word	0x40014400
 80079f8:	40014800 	.word	0x40014800

080079fc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b087      	sub	sp, #28
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6a1b      	ldr	r3, [r3, #32]
 8007a0a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6a1b      	ldr	r3, [r3, #32]
 8007a16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	68fa      	ldr	r2, [r7, #12]
 8007a36:	4313      	orrs	r3, r2
 8007a38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007a40:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	689b      	ldr	r3, [r3, #8]
 8007a46:	041b      	lsls	r3, r3, #16
 8007a48:	693a      	ldr	r2, [r7, #16]
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	4a17      	ldr	r2, [pc, #92]	; (8007ab0 <TIM_OC5_SetConfig+0xb4>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d00f      	beq.n	8007a76 <TIM_OC5_SetConfig+0x7a>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	4a16      	ldr	r2, [pc, #88]	; (8007ab4 <TIM_OC5_SetConfig+0xb8>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d00b      	beq.n	8007a76 <TIM_OC5_SetConfig+0x7a>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	4a15      	ldr	r2, [pc, #84]	; (8007ab8 <TIM_OC5_SetConfig+0xbc>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d007      	beq.n	8007a76 <TIM_OC5_SetConfig+0x7a>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4a14      	ldr	r2, [pc, #80]	; (8007abc <TIM_OC5_SetConfig+0xc0>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d003      	beq.n	8007a76 <TIM_OC5_SetConfig+0x7a>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	4a13      	ldr	r2, [pc, #76]	; (8007ac0 <TIM_OC5_SetConfig+0xc4>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d109      	bne.n	8007a8a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a7c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	695b      	ldr	r3, [r3, #20]
 8007a82:	021b      	lsls	r3, r3, #8
 8007a84:	697a      	ldr	r2, [r7, #20]
 8007a86:	4313      	orrs	r3, r2
 8007a88:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	697a      	ldr	r2, [r7, #20]
 8007a8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	68fa      	ldr	r2, [r7, #12]
 8007a94:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	685a      	ldr	r2, [r3, #4]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	693a      	ldr	r2, [r7, #16]
 8007aa2:	621a      	str	r2, [r3, #32]
}
 8007aa4:	bf00      	nop
 8007aa6:	371c      	adds	r7, #28
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr
 8007ab0:	40012c00 	.word	0x40012c00
 8007ab4:	40013400 	.word	0x40013400
 8007ab8:	40014000 	.word	0x40014000
 8007abc:	40014400 	.word	0x40014400
 8007ac0:	40014800 	.word	0x40014800

08007ac4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b087      	sub	sp, #28
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6a1b      	ldr	r3, [r3, #32]
 8007ad2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6a1b      	ldr	r3, [r3, #32]
 8007ade:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007af2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007af6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	021b      	lsls	r3, r3, #8
 8007afe:	68fa      	ldr	r2, [r7, #12]
 8007b00:	4313      	orrs	r3, r2
 8007b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007b0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	051b      	lsls	r3, r3, #20
 8007b12:	693a      	ldr	r2, [r7, #16]
 8007b14:	4313      	orrs	r3, r2
 8007b16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	4a18      	ldr	r2, [pc, #96]	; (8007b7c <TIM_OC6_SetConfig+0xb8>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d00f      	beq.n	8007b40 <TIM_OC6_SetConfig+0x7c>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	4a17      	ldr	r2, [pc, #92]	; (8007b80 <TIM_OC6_SetConfig+0xbc>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d00b      	beq.n	8007b40 <TIM_OC6_SetConfig+0x7c>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	4a16      	ldr	r2, [pc, #88]	; (8007b84 <TIM_OC6_SetConfig+0xc0>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d007      	beq.n	8007b40 <TIM_OC6_SetConfig+0x7c>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	4a15      	ldr	r2, [pc, #84]	; (8007b88 <TIM_OC6_SetConfig+0xc4>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d003      	beq.n	8007b40 <TIM_OC6_SetConfig+0x7c>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	4a14      	ldr	r2, [pc, #80]	; (8007b8c <TIM_OC6_SetConfig+0xc8>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d109      	bne.n	8007b54 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b46:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	695b      	ldr	r3, [r3, #20]
 8007b4c:	029b      	lsls	r3, r3, #10
 8007b4e:	697a      	ldr	r2, [r7, #20]
 8007b50:	4313      	orrs	r3, r2
 8007b52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	697a      	ldr	r2, [r7, #20]
 8007b58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	68fa      	ldr	r2, [r7, #12]
 8007b5e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	685a      	ldr	r2, [r3, #4]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	693a      	ldr	r2, [r7, #16]
 8007b6c:	621a      	str	r2, [r3, #32]
}
 8007b6e:	bf00      	nop
 8007b70:	371c      	adds	r7, #28
 8007b72:	46bd      	mov	sp, r7
 8007b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b78:	4770      	bx	lr
 8007b7a:	bf00      	nop
 8007b7c:	40012c00 	.word	0x40012c00
 8007b80:	40013400 	.word	0x40013400
 8007b84:	40014000 	.word	0x40014000
 8007b88:	40014400 	.word	0x40014400
 8007b8c:	40014800 	.word	0x40014800

08007b90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b087      	sub	sp, #28
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	60f8      	str	r0, [r7, #12]
 8007b98:	60b9      	str	r1, [r7, #8]
 8007b9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	6a1b      	ldr	r3, [r3, #32]
 8007ba0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	6a1b      	ldr	r3, [r3, #32]
 8007ba6:	f023 0201 	bic.w	r2, r3, #1
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	699b      	ldr	r3, [r3, #24]
 8007bb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007bba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	011b      	lsls	r3, r3, #4
 8007bc0:	693a      	ldr	r2, [r7, #16]
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	f023 030a 	bic.w	r3, r3, #10
 8007bcc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007bce:	697a      	ldr	r2, [r7, #20]
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	693a      	ldr	r2, [r7, #16]
 8007bda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	697a      	ldr	r2, [r7, #20]
 8007be0:	621a      	str	r2, [r3, #32]
}
 8007be2:	bf00      	nop
 8007be4:	371c      	adds	r7, #28
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr

08007bee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007bee:	b480      	push	{r7}
 8007bf0:	b087      	sub	sp, #28
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	60f8      	str	r0, [r7, #12]
 8007bf6:	60b9      	str	r1, [r7, #8]
 8007bf8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	6a1b      	ldr	r3, [r3, #32]
 8007bfe:	f023 0210 	bic.w	r2, r3, #16
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	699b      	ldr	r3, [r3, #24]
 8007c0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6a1b      	ldr	r3, [r3, #32]
 8007c10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	031b      	lsls	r3, r3, #12
 8007c1e:	697a      	ldr	r2, [r7, #20]
 8007c20:	4313      	orrs	r3, r2
 8007c22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007c2a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	011b      	lsls	r3, r3, #4
 8007c30:	693a      	ldr	r2, [r7, #16]
 8007c32:	4313      	orrs	r3, r2
 8007c34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	697a      	ldr	r2, [r7, #20]
 8007c3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	693a      	ldr	r2, [r7, #16]
 8007c40:	621a      	str	r2, [r3, #32]
}
 8007c42:	bf00      	nop
 8007c44:	371c      	adds	r7, #28
 8007c46:	46bd      	mov	sp, r7
 8007c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4c:	4770      	bx	lr

08007c4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007c4e:	b480      	push	{r7}
 8007c50:	b085      	sub	sp, #20
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
 8007c56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	689b      	ldr	r3, [r3, #8]
 8007c5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c66:	683a      	ldr	r2, [r7, #0]
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	f043 0307 	orr.w	r3, r3, #7
 8007c70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	68fa      	ldr	r2, [r7, #12]
 8007c76:	609a      	str	r2, [r3, #8]
}
 8007c78:	bf00      	nop
 8007c7a:	3714      	adds	r7, #20
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr

08007c84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b087      	sub	sp, #28
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	60f8      	str	r0, [r7, #12]
 8007c8c:	60b9      	str	r1, [r7, #8]
 8007c8e:	607a      	str	r2, [r7, #4]
 8007c90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	689b      	ldr	r3, [r3, #8]
 8007c96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	021a      	lsls	r2, r3, #8
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	431a      	orrs	r2, r3
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	4313      	orrs	r3, r2
 8007cac:	697a      	ldr	r2, [r7, #20]
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	697a      	ldr	r2, [r7, #20]
 8007cb6:	609a      	str	r2, [r3, #8]
}
 8007cb8:	bf00      	nop
 8007cba:	371c      	adds	r7, #28
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b087      	sub	sp, #28
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	60f8      	str	r0, [r7, #12]
 8007ccc:	60b9      	str	r1, [r7, #8]
 8007cce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	f003 031f 	and.w	r3, r3, #31
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8007cdc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	6a1a      	ldr	r2, [r3, #32]
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	43db      	mvns	r3, r3
 8007ce6:	401a      	ands	r2, r3
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	6a1a      	ldr	r2, [r3, #32]
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	f003 031f 	and.w	r3, r3, #31
 8007cf6:	6879      	ldr	r1, [r7, #4]
 8007cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8007cfc:	431a      	orrs	r2, r3
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	621a      	str	r2, [r3, #32]
}
 8007d02:	bf00      	nop
 8007d04:	371c      	adds	r7, #28
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr
	...

08007d10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b085      	sub	sp, #20
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d101      	bne.n	8007d28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d24:	2302      	movs	r3, #2
 8007d26:	e068      	b.n	8007dfa <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2202      	movs	r2, #2
 8007d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a2e      	ldr	r2, [pc, #184]	; (8007e08 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d004      	beq.n	8007d5c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a2d      	ldr	r2, [pc, #180]	; (8007e0c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d108      	bne.n	8007d6e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007d62:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	68fa      	ldr	r2, [r7, #12]
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d74:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	68fa      	ldr	r2, [r7, #12]
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	68fa      	ldr	r2, [r7, #12]
 8007d86:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a1e      	ldr	r2, [pc, #120]	; (8007e08 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d01d      	beq.n	8007dce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d9a:	d018      	beq.n	8007dce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a1b      	ldr	r2, [pc, #108]	; (8007e10 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d013      	beq.n	8007dce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a1a      	ldr	r2, [pc, #104]	; (8007e14 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d00e      	beq.n	8007dce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a18      	ldr	r2, [pc, #96]	; (8007e18 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d009      	beq.n	8007dce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a13      	ldr	r2, [pc, #76]	; (8007e0c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d004      	beq.n	8007dce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a14      	ldr	r2, [pc, #80]	; (8007e1c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d10c      	bne.n	8007de8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007dd4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	689b      	ldr	r3, [r3, #8]
 8007dda:	68ba      	ldr	r2, [r7, #8]
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	68ba      	ldr	r2, [r7, #8]
 8007de6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2201      	movs	r2, #1
 8007dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2200      	movs	r2, #0
 8007df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007df8:	2300      	movs	r3, #0
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3714      	adds	r7, #20
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr
 8007e06:	bf00      	nop
 8007e08:	40012c00 	.word	0x40012c00
 8007e0c:	40013400 	.word	0x40013400
 8007e10:	40000400 	.word	0x40000400
 8007e14:	40000800 	.word	0x40000800
 8007e18:	40000c00 	.word	0x40000c00
 8007e1c:	40014000 	.word	0x40014000

08007e20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b083      	sub	sp, #12
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007e28:	bf00      	nop
 8007e2a:	370c      	adds	r7, #12
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr

08007e34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b083      	sub	sp, #12
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e3c:	bf00      	nop
 8007e3e:	370c      	adds	r7, #12
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr

08007e48 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b083      	sub	sp, #12
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007e50:	bf00      	nop
 8007e52:	370c      	adds	r7, #12
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr

08007e5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b082      	sub	sp, #8
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d101      	bne.n	8007e6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	e040      	b.n	8007ef0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d106      	bne.n	8007e84 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f7fa fa4a 	bl	8002318 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2224      	movs	r2, #36	; 0x24
 8007e88:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	681a      	ldr	r2, [r3, #0]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f022 0201 	bic.w	r2, r2, #1
 8007e98:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f000 fc94 	bl	80087c8 <UART_SetConfig>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	2b01      	cmp	r3, #1
 8007ea4:	d101      	bne.n	8007eaa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	e022      	b.n	8007ef0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d002      	beq.n	8007eb8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 ff40 	bl	8008d38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	685a      	ldr	r2, [r3, #4]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007ec6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	689a      	ldr	r2, [r3, #8]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ed6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	681a      	ldr	r2, [r3, #0]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f042 0201 	orr.w	r2, r2, #1
 8007ee6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f000 ffc7 	bl	8008e7c <UART_CheckIdleState>
 8007eee:	4603      	mov	r3, r0
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3708      	adds	r7, #8
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b08a      	sub	sp, #40	; 0x28
 8007efc:	af02      	add	r7, sp, #8
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	60b9      	str	r1, [r7, #8]
 8007f02:	603b      	str	r3, [r7, #0]
 8007f04:	4613      	mov	r3, r2
 8007f06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f0c:	2b20      	cmp	r3, #32
 8007f0e:	f040 8082 	bne.w	8008016 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d002      	beq.n	8007f1e <HAL_UART_Transmit+0x26>
 8007f18:	88fb      	ldrh	r3, [r7, #6]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d101      	bne.n	8007f22 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007f1e:	2301      	movs	r3, #1
 8007f20:	e07a      	b.n	8008018 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	d101      	bne.n	8007f30 <HAL_UART_Transmit+0x38>
 8007f2c:	2302      	movs	r3, #2
 8007f2e:	e073      	b.n	8008018 <HAL_UART_Transmit+0x120>
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	2201      	movs	r2, #1
 8007f34:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2221      	movs	r2, #33	; 0x21
 8007f44:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007f46:	f7fa fcbb 	bl	80028c0 <HAL_GetTick>
 8007f4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	88fa      	ldrh	r2, [r7, #6]
 8007f50:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	88fa      	ldrh	r2, [r7, #6]
 8007f58:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	689b      	ldr	r3, [r3, #8]
 8007f60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f64:	d108      	bne.n	8007f78 <HAL_UART_Transmit+0x80>
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	691b      	ldr	r3, [r3, #16]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d104      	bne.n	8007f78 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	61bb      	str	r3, [r7, #24]
 8007f76:	e003      	b.n	8007f80 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2200      	movs	r2, #0
 8007f84:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007f88:	e02d      	b.n	8007fe6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	9300      	str	r3, [sp, #0]
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	2200      	movs	r2, #0
 8007f92:	2180      	movs	r1, #128	; 0x80
 8007f94:	68f8      	ldr	r0, [r7, #12]
 8007f96:	f000 ffba 	bl	8008f0e <UART_WaitOnFlagUntilTimeout>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d001      	beq.n	8007fa4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007fa0:	2303      	movs	r3, #3
 8007fa2:	e039      	b.n	8008018 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8007fa4:	69fb      	ldr	r3, [r7, #28]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d10b      	bne.n	8007fc2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007faa:	69bb      	ldr	r3, [r7, #24]
 8007fac:	881a      	ldrh	r2, [r3, #0]
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007fb6:	b292      	uxth	r2, r2
 8007fb8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007fba:	69bb      	ldr	r3, [r7, #24]
 8007fbc:	3302      	adds	r3, #2
 8007fbe:	61bb      	str	r3, [r7, #24]
 8007fc0:	e008      	b.n	8007fd4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007fc2:	69fb      	ldr	r3, [r7, #28]
 8007fc4:	781a      	ldrb	r2, [r3, #0]
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	b292      	uxth	r2, r2
 8007fcc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007fce:	69fb      	ldr	r3, [r7, #28]
 8007fd0:	3301      	adds	r3, #1
 8007fd2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007fda:	b29b      	uxth	r3, r3
 8007fdc:	3b01      	subs	r3, #1
 8007fde:	b29a      	uxth	r2, r3
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d1cb      	bne.n	8007f8a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	9300      	str	r3, [sp, #0]
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	2140      	movs	r1, #64	; 0x40
 8007ffc:	68f8      	ldr	r0, [r7, #12]
 8007ffe:	f000 ff86 	bl	8008f0e <UART_WaitOnFlagUntilTimeout>
 8008002:	4603      	mov	r3, r0
 8008004:	2b00      	cmp	r3, #0
 8008006:	d001      	beq.n	800800c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8008008:	2303      	movs	r3, #3
 800800a:	e005      	b.n	8008018 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2220      	movs	r2, #32
 8008010:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8008012:	2300      	movs	r3, #0
 8008014:	e000      	b.n	8008018 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8008016:	2302      	movs	r3, #2
  }
}
 8008018:	4618      	mov	r0, r3
 800801a:	3720      	adds	r7, #32
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}

08008020 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b08a      	sub	sp, #40	; 0x28
 8008024:	af02      	add	r7, sp, #8
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	60b9      	str	r1, [r7, #8]
 800802a:	603b      	str	r3, [r7, #0]
 800802c:	4613      	mov	r3, r2
 800802e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008034:	2b20      	cmp	r3, #32
 8008036:	f040 80bf 	bne.w	80081b8 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d002      	beq.n	8008046 <HAL_UART_Receive+0x26>
 8008040:	88fb      	ldrh	r3, [r7, #6]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d101      	bne.n	800804a <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8008046:	2301      	movs	r3, #1
 8008048:	e0b7      	b.n	80081ba <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008050:	2b01      	cmp	r3, #1
 8008052:	d101      	bne.n	8008058 <HAL_UART_Receive+0x38>
 8008054:	2302      	movs	r3, #2
 8008056:	e0b0      	b.n	80081ba <HAL_UART_Receive+0x19a>
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2201      	movs	r2, #1
 800805c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2200      	movs	r2, #0
 8008064:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2222      	movs	r2, #34	; 0x22
 800806c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	2200      	movs	r2, #0
 8008072:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008074:	f7fa fc24 	bl	80028c0 <HAL_GetTick>
 8008078:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	88fa      	ldrh	r2, [r7, #6]
 800807e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	88fa      	ldrh	r2, [r7, #6]
 8008086:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	689b      	ldr	r3, [r3, #8]
 800808e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008092:	d10e      	bne.n	80080b2 <HAL_UART_Receive+0x92>
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	691b      	ldr	r3, [r3, #16]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d105      	bne.n	80080a8 <HAL_UART_Receive+0x88>
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f240 12ff 	movw	r2, #511	; 0x1ff
 80080a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80080a6:	e02d      	b.n	8008104 <HAL_UART_Receive+0xe4>
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	22ff      	movs	r2, #255	; 0xff
 80080ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80080b0:	e028      	b.n	8008104 <HAL_UART_Receive+0xe4>
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	689b      	ldr	r3, [r3, #8]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d10d      	bne.n	80080d6 <HAL_UART_Receive+0xb6>
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	691b      	ldr	r3, [r3, #16]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d104      	bne.n	80080cc <HAL_UART_Receive+0xac>
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	22ff      	movs	r2, #255	; 0xff
 80080c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80080ca:	e01b      	b.n	8008104 <HAL_UART_Receive+0xe4>
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	227f      	movs	r2, #127	; 0x7f
 80080d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80080d4:	e016      	b.n	8008104 <HAL_UART_Receive+0xe4>
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	689b      	ldr	r3, [r3, #8]
 80080da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80080de:	d10d      	bne.n	80080fc <HAL_UART_Receive+0xdc>
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	691b      	ldr	r3, [r3, #16]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d104      	bne.n	80080f2 <HAL_UART_Receive+0xd2>
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	227f      	movs	r2, #127	; 0x7f
 80080ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80080f0:	e008      	b.n	8008104 <HAL_UART_Receive+0xe4>
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	223f      	movs	r2, #63	; 0x3f
 80080f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80080fa:	e003      	b.n	8008104 <HAL_UART_Receive+0xe4>
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2200      	movs	r2, #0
 8008100:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800810a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008114:	d108      	bne.n	8008128 <HAL_UART_Receive+0x108>
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	691b      	ldr	r3, [r3, #16]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d104      	bne.n	8008128 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800811e:	2300      	movs	r3, #0
 8008120:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	61bb      	str	r3, [r7, #24]
 8008126:	e003      	b.n	8008130 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800812c:	2300      	movs	r3, #0
 800812e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2200      	movs	r2, #0
 8008134:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008138:	e033      	b.n	80081a2 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	9300      	str	r3, [sp, #0]
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	2200      	movs	r2, #0
 8008142:	2120      	movs	r1, #32
 8008144:	68f8      	ldr	r0, [r7, #12]
 8008146:	f000 fee2 	bl	8008f0e <UART_WaitOnFlagUntilTimeout>
 800814a:	4603      	mov	r3, r0
 800814c:	2b00      	cmp	r3, #0
 800814e:	d001      	beq.n	8008154 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8008150:	2303      	movs	r3, #3
 8008152:	e032      	b.n	80081ba <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8008154:	69fb      	ldr	r3, [r7, #28]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d10c      	bne.n	8008174 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008160:	b29a      	uxth	r2, r3
 8008162:	8a7b      	ldrh	r3, [r7, #18]
 8008164:	4013      	ands	r3, r2
 8008166:	b29a      	uxth	r2, r3
 8008168:	69bb      	ldr	r3, [r7, #24]
 800816a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800816c:	69bb      	ldr	r3, [r7, #24]
 800816e:	3302      	adds	r3, #2
 8008170:	61bb      	str	r3, [r7, #24]
 8008172:	e00d      	b.n	8008190 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800817a:	b29b      	uxth	r3, r3
 800817c:	b2da      	uxtb	r2, r3
 800817e:	8a7b      	ldrh	r3, [r7, #18]
 8008180:	b2db      	uxtb	r3, r3
 8008182:	4013      	ands	r3, r2
 8008184:	b2da      	uxtb	r2, r3
 8008186:	69fb      	ldr	r3, [r7, #28]
 8008188:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800818a:	69fb      	ldr	r3, [r7, #28]
 800818c:	3301      	adds	r3, #1
 800818e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008196:	b29b      	uxth	r3, r3
 8008198:	3b01      	subs	r3, #1
 800819a:	b29a      	uxth	r2, r3
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d1c5      	bne.n	800813a <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2220      	movs	r2, #32
 80081b2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80081b4:	2300      	movs	r3, #0
 80081b6:	e000      	b.n	80081ba <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80081b8:	2302      	movs	r3, #2
  }
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3720      	adds	r7, #32
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
	...

080081c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b0ba      	sub	sp, #232	; 0xe8
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	69db      	ldr	r3, [r3, #28]
 80081d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	689b      	ldr	r3, [r3, #8]
 80081e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80081ea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80081ee:	f640 030f 	movw	r3, #2063	; 0x80f
 80081f2:	4013      	ands	r3, r2
 80081f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80081f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d115      	bne.n	800822c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008204:	f003 0320 	and.w	r3, r3, #32
 8008208:	2b00      	cmp	r3, #0
 800820a:	d00f      	beq.n	800822c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800820c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008210:	f003 0320 	and.w	r3, r3, #32
 8008214:	2b00      	cmp	r3, #0
 8008216:	d009      	beq.n	800822c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800821c:	2b00      	cmp	r3, #0
 800821e:	f000 82a6 	beq.w	800876e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	4798      	blx	r3
      }
      return;
 800822a:	e2a0      	b.n	800876e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800822c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008230:	2b00      	cmp	r3, #0
 8008232:	f000 8117 	beq.w	8008464 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008236:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800823a:	f003 0301 	and.w	r3, r3, #1
 800823e:	2b00      	cmp	r3, #0
 8008240:	d106      	bne.n	8008250 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008242:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008246:	4b85      	ldr	r3, [pc, #532]	; (800845c <HAL_UART_IRQHandler+0x298>)
 8008248:	4013      	ands	r3, r2
 800824a:	2b00      	cmp	r3, #0
 800824c:	f000 810a 	beq.w	8008464 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008254:	f003 0301 	and.w	r3, r3, #1
 8008258:	2b00      	cmp	r3, #0
 800825a:	d011      	beq.n	8008280 <HAL_UART_IRQHandler+0xbc>
 800825c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008264:	2b00      	cmp	r3, #0
 8008266:	d00b      	beq.n	8008280 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	2201      	movs	r2, #1
 800826e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008276:	f043 0201 	orr.w	r2, r3, #1
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008284:	f003 0302 	and.w	r3, r3, #2
 8008288:	2b00      	cmp	r3, #0
 800828a:	d011      	beq.n	80082b0 <HAL_UART_IRQHandler+0xec>
 800828c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008290:	f003 0301 	and.w	r3, r3, #1
 8008294:	2b00      	cmp	r3, #0
 8008296:	d00b      	beq.n	80082b0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	2202      	movs	r2, #2
 800829e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082a6:	f043 0204 	orr.w	r2, r3, #4
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80082b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082b4:	f003 0304 	and.w	r3, r3, #4
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d011      	beq.n	80082e0 <HAL_UART_IRQHandler+0x11c>
 80082bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082c0:	f003 0301 	and.w	r3, r3, #1
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d00b      	beq.n	80082e0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	2204      	movs	r2, #4
 80082ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082d6:	f043 0202 	orr.w	r2, r3, #2
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80082e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082e4:	f003 0308 	and.w	r3, r3, #8
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d017      	beq.n	800831c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80082ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082f0:	f003 0320 	and.w	r3, r3, #32
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d105      	bne.n	8008304 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80082f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082fc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008300:	2b00      	cmp	r3, #0
 8008302:	d00b      	beq.n	800831c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	2208      	movs	r2, #8
 800830a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008312:	f043 0208 	orr.w	r2, r3, #8
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800831c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008320:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008324:	2b00      	cmp	r3, #0
 8008326:	d012      	beq.n	800834e <HAL_UART_IRQHandler+0x18a>
 8008328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800832c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008330:	2b00      	cmp	r3, #0
 8008332:	d00c      	beq.n	800834e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800833c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008344:	f043 0220 	orr.w	r2, r3, #32
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008354:	2b00      	cmp	r3, #0
 8008356:	f000 820c 	beq.w	8008772 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800835a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800835e:	f003 0320 	and.w	r3, r3, #32
 8008362:	2b00      	cmp	r3, #0
 8008364:	d00d      	beq.n	8008382 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008366:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800836a:	f003 0320 	and.w	r3, r3, #32
 800836e:	2b00      	cmp	r3, #0
 8008370:	d007      	beq.n	8008382 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008376:	2b00      	cmp	r3, #0
 8008378:	d003      	beq.n	8008382 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008388:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	689b      	ldr	r3, [r3, #8]
 8008392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008396:	2b40      	cmp	r3, #64	; 0x40
 8008398:	d005      	beq.n	80083a6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800839a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800839e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d04f      	beq.n	8008446 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f000 fe75 	bl	8009096 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	689b      	ldr	r3, [r3, #8]
 80083b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083b6:	2b40      	cmp	r3, #64	; 0x40
 80083b8:	d141      	bne.n	800843e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	3308      	adds	r3, #8
 80083c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80083c8:	e853 3f00 	ldrex	r3, [r3]
 80083cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80083d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80083d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	3308      	adds	r3, #8
 80083e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80083e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80083ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80083f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80083f6:	e841 2300 	strex	r3, r2, [r1]
 80083fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80083fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008402:	2b00      	cmp	r3, #0
 8008404:	d1d9      	bne.n	80083ba <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800840a:	2b00      	cmp	r3, #0
 800840c:	d013      	beq.n	8008436 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008412:	4a13      	ldr	r2, [pc, #76]	; (8008460 <HAL_UART_IRQHandler+0x29c>)
 8008414:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800841a:	4618      	mov	r0, r3
 800841c:	f7fc f906 	bl	800462c <HAL_DMA_Abort_IT>
 8008420:	4603      	mov	r3, r0
 8008422:	2b00      	cmp	r3, #0
 8008424:	d017      	beq.n	8008456 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800842a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8008430:	4610      	mov	r0, r2
 8008432:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008434:	e00f      	b.n	8008456 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 f9b0 	bl	800879c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800843c:	e00b      	b.n	8008456 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 f9ac 	bl	800879c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008444:	e007      	b.n	8008456 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 f9a8 	bl	800879c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8008454:	e18d      	b.n	8008772 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008456:	bf00      	nop
    return;
 8008458:	e18b      	b.n	8008772 <HAL_UART_IRQHandler+0x5ae>
 800845a:	bf00      	nop
 800845c:	04000120 	.word	0x04000120
 8008460:	0800915d 	.word	0x0800915d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008468:	2b01      	cmp	r3, #1
 800846a:	f040 8146 	bne.w	80086fa <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800846e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008472:	f003 0310 	and.w	r3, r3, #16
 8008476:	2b00      	cmp	r3, #0
 8008478:	f000 813f 	beq.w	80086fa <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800847c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008480:	f003 0310 	and.w	r3, r3, #16
 8008484:	2b00      	cmp	r3, #0
 8008486:	f000 8138 	beq.w	80086fa <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	2210      	movs	r2, #16
 8008490:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	689b      	ldr	r3, [r3, #8]
 8008498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800849c:	2b40      	cmp	r3, #64	; 0x40
 800849e:	f040 80b4 	bne.w	800860a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80084ae:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	f000 815f 	beq.w	8008776 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80084be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80084c2:	429a      	cmp	r2, r3
 80084c4:	f080 8157 	bcs.w	8008776 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80084ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f003 0320 	and.w	r3, r3, #32
 80084de:	2b00      	cmp	r3, #0
 80084e0:	f040 8085 	bne.w	80085ee <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80084f0:	e853 3f00 	ldrex	r3, [r3]
 80084f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80084f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80084fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008500:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	461a      	mov	r2, r3
 800850a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800850e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008512:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008516:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800851a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800851e:	e841 2300 	strex	r3, r2, [r1]
 8008522:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008526:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800852a:	2b00      	cmp	r3, #0
 800852c:	d1da      	bne.n	80084e4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	3308      	adds	r3, #8
 8008534:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008536:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008538:	e853 3f00 	ldrex	r3, [r3]
 800853c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800853e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008540:	f023 0301 	bic.w	r3, r3, #1
 8008544:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	3308      	adds	r3, #8
 800854e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008552:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008556:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008558:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800855a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800855e:	e841 2300 	strex	r3, r2, [r1]
 8008562:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008564:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008566:	2b00      	cmp	r3, #0
 8008568:	d1e1      	bne.n	800852e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	3308      	adds	r3, #8
 8008570:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008572:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008574:	e853 3f00 	ldrex	r3, [r3]
 8008578:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800857a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800857c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008580:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	3308      	adds	r3, #8
 800858a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800858e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008590:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008592:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008594:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008596:	e841 2300 	strex	r3, r2, [r1]
 800859a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800859c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d1e3      	bne.n	800856a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2220      	movs	r2, #32
 80085a6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2200      	movs	r2, #0
 80085ac:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085b6:	e853 3f00 	ldrex	r3, [r3]
 80085ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80085bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085be:	f023 0310 	bic.w	r3, r3, #16
 80085c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	461a      	mov	r2, r3
 80085cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80085d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80085d2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80085d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80085d8:	e841 2300 	strex	r3, r2, [r1]
 80085dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80085de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d1e4      	bne.n	80085ae <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085e8:	4618      	mov	r0, r3
 80085ea:	f7fb ffe1 	bl	80045b0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	1ad3      	subs	r3, r2, r3
 80085fe:	b29b      	uxth	r3, r3
 8008600:	4619      	mov	r1, r3
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 f8d4 	bl	80087b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008608:	e0b5      	b.n	8008776 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008616:	b29b      	uxth	r3, r3
 8008618:	1ad3      	subs	r3, r2, r3
 800861a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008624:	b29b      	uxth	r3, r3
 8008626:	2b00      	cmp	r3, #0
 8008628:	f000 80a7 	beq.w	800877a <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800862c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008630:	2b00      	cmp	r3, #0
 8008632:	f000 80a2 	beq.w	800877a <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800863c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800863e:	e853 3f00 	ldrex	r3, [r3]
 8008642:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008646:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800864a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	461a      	mov	r2, r3
 8008654:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008658:	647b      	str	r3, [r7, #68]	; 0x44
 800865a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800865c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800865e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008660:	e841 2300 	strex	r3, r2, [r1]
 8008664:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008668:	2b00      	cmp	r3, #0
 800866a:	d1e4      	bne.n	8008636 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	3308      	adds	r3, #8
 8008672:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008676:	e853 3f00 	ldrex	r3, [r3]
 800867a:	623b      	str	r3, [r7, #32]
   return(result);
 800867c:	6a3b      	ldr	r3, [r7, #32]
 800867e:	f023 0301 	bic.w	r3, r3, #1
 8008682:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	3308      	adds	r3, #8
 800868c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008690:	633a      	str	r2, [r7, #48]	; 0x30
 8008692:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008694:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008696:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008698:	e841 2300 	strex	r3, r2, [r1]
 800869c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800869e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d1e3      	bne.n	800866c <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2220      	movs	r2, #32
 80086a8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2200      	movs	r2, #0
 80086ae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2200      	movs	r2, #0
 80086b4:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	e853 3f00 	ldrex	r3, [r3]
 80086c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f023 0310 	bic.w	r3, r3, #16
 80086ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	461a      	mov	r2, r3
 80086d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80086d8:	61fb      	str	r3, [r7, #28]
 80086da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086dc:	69b9      	ldr	r1, [r7, #24]
 80086de:	69fa      	ldr	r2, [r7, #28]
 80086e0:	e841 2300 	strex	r3, r2, [r1]
 80086e4:	617b      	str	r3, [r7, #20]
   return(result);
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d1e4      	bne.n	80086b6 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80086ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80086f0:	4619      	mov	r1, r3
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 f85c 	bl	80087b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80086f8:	e03f      	b.n	800877a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80086fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008702:	2b00      	cmp	r3, #0
 8008704:	d00e      	beq.n	8008724 <HAL_UART_IRQHandler+0x560>
 8008706:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800870a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800870e:	2b00      	cmp	r3, #0
 8008710:	d008      	beq.n	8008724 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800871a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f000 fd5d 	bl	80091dc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008722:	e02d      	b.n	8008780 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800872c:	2b00      	cmp	r3, #0
 800872e:	d00e      	beq.n	800874e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008738:	2b00      	cmp	r3, #0
 800873a:	d008      	beq.n	800874e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008740:	2b00      	cmp	r3, #0
 8008742:	d01c      	beq.n	800877e <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	4798      	blx	r3
    }
    return;
 800874c:	e017      	b.n	800877e <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800874e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008756:	2b00      	cmp	r3, #0
 8008758:	d012      	beq.n	8008780 <HAL_UART_IRQHandler+0x5bc>
 800875a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800875e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008762:	2b00      	cmp	r3, #0
 8008764:	d00c      	beq.n	8008780 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 fd0e 	bl	8009188 <UART_EndTransmit_IT>
    return;
 800876c:	e008      	b.n	8008780 <HAL_UART_IRQHandler+0x5bc>
      return;
 800876e:	bf00      	nop
 8008770:	e006      	b.n	8008780 <HAL_UART_IRQHandler+0x5bc>
    return;
 8008772:	bf00      	nop
 8008774:	e004      	b.n	8008780 <HAL_UART_IRQHandler+0x5bc>
      return;
 8008776:	bf00      	nop
 8008778:	e002      	b.n	8008780 <HAL_UART_IRQHandler+0x5bc>
      return;
 800877a:	bf00      	nop
 800877c:	e000      	b.n	8008780 <HAL_UART_IRQHandler+0x5bc>
    return;
 800877e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8008780:	37e8      	adds	r7, #232	; 0xe8
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}
 8008786:	bf00      	nop

08008788 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008788:	b480      	push	{r7}
 800878a:	b083      	sub	sp, #12
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008790:	bf00      	nop
 8008792:	370c      	adds	r7, #12
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr

0800879c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800879c:	b480      	push	{r7}
 800879e:	b083      	sub	sp, #12
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80087a4:	bf00      	nop
 80087a6:	370c      	adds	r7, #12
 80087a8:	46bd      	mov	sp, r7
 80087aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ae:	4770      	bx	lr

080087b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b083      	sub	sp, #12
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	460b      	mov	r3, r1
 80087ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80087bc:	bf00      	nop
 80087be:	370c      	adds	r7, #12
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr

080087c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80087c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80087cc:	b08a      	sub	sp, #40	; 0x28
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80087d2:	2300      	movs	r3, #0
 80087d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	689a      	ldr	r2, [r3, #8]
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	691b      	ldr	r3, [r3, #16]
 80087e0:	431a      	orrs	r2, r3
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	695b      	ldr	r3, [r3, #20]
 80087e6:	431a      	orrs	r2, r3
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	69db      	ldr	r3, [r3, #28]
 80087ec:	4313      	orrs	r3, r2
 80087ee:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	681a      	ldr	r2, [r3, #0]
 80087f6:	4ba4      	ldr	r3, [pc, #656]	; (8008a88 <UART_SetConfig+0x2c0>)
 80087f8:	4013      	ands	r3, r2
 80087fa:	68fa      	ldr	r2, [r7, #12]
 80087fc:	6812      	ldr	r2, [r2, #0]
 80087fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008800:	430b      	orrs	r3, r1
 8008802:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	685b      	ldr	r3, [r3, #4]
 800880a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	68da      	ldr	r2, [r3, #12]
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	430a      	orrs	r2, r1
 8008818:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	699b      	ldr	r3, [r3, #24]
 800881e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4a99      	ldr	r2, [pc, #612]	; (8008a8c <UART_SetConfig+0x2c4>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d004      	beq.n	8008834 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	6a1b      	ldr	r3, [r3, #32]
 800882e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008830:	4313      	orrs	r3, r2
 8008832:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	689b      	ldr	r3, [r3, #8]
 800883a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008844:	430a      	orrs	r2, r1
 8008846:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a90      	ldr	r2, [pc, #576]	; (8008a90 <UART_SetConfig+0x2c8>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d126      	bne.n	80088a0 <UART_SetConfig+0xd8>
 8008852:	4b90      	ldr	r3, [pc, #576]	; (8008a94 <UART_SetConfig+0x2cc>)
 8008854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008858:	f003 0303 	and.w	r3, r3, #3
 800885c:	2b03      	cmp	r3, #3
 800885e:	d81b      	bhi.n	8008898 <UART_SetConfig+0xd0>
 8008860:	a201      	add	r2, pc, #4	; (adr r2, 8008868 <UART_SetConfig+0xa0>)
 8008862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008866:	bf00      	nop
 8008868:	08008879 	.word	0x08008879
 800886c:	08008889 	.word	0x08008889
 8008870:	08008881 	.word	0x08008881
 8008874:	08008891 	.word	0x08008891
 8008878:	2301      	movs	r3, #1
 800887a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800887e:	e116      	b.n	8008aae <UART_SetConfig+0x2e6>
 8008880:	2302      	movs	r3, #2
 8008882:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008886:	e112      	b.n	8008aae <UART_SetConfig+0x2e6>
 8008888:	2304      	movs	r3, #4
 800888a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800888e:	e10e      	b.n	8008aae <UART_SetConfig+0x2e6>
 8008890:	2308      	movs	r3, #8
 8008892:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008896:	e10a      	b.n	8008aae <UART_SetConfig+0x2e6>
 8008898:	2310      	movs	r3, #16
 800889a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800889e:	e106      	b.n	8008aae <UART_SetConfig+0x2e6>
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4a7c      	ldr	r2, [pc, #496]	; (8008a98 <UART_SetConfig+0x2d0>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d138      	bne.n	800891c <UART_SetConfig+0x154>
 80088aa:	4b7a      	ldr	r3, [pc, #488]	; (8008a94 <UART_SetConfig+0x2cc>)
 80088ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088b0:	f003 030c 	and.w	r3, r3, #12
 80088b4:	2b0c      	cmp	r3, #12
 80088b6:	d82d      	bhi.n	8008914 <UART_SetConfig+0x14c>
 80088b8:	a201      	add	r2, pc, #4	; (adr r2, 80088c0 <UART_SetConfig+0xf8>)
 80088ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088be:	bf00      	nop
 80088c0:	080088f5 	.word	0x080088f5
 80088c4:	08008915 	.word	0x08008915
 80088c8:	08008915 	.word	0x08008915
 80088cc:	08008915 	.word	0x08008915
 80088d0:	08008905 	.word	0x08008905
 80088d4:	08008915 	.word	0x08008915
 80088d8:	08008915 	.word	0x08008915
 80088dc:	08008915 	.word	0x08008915
 80088e0:	080088fd 	.word	0x080088fd
 80088e4:	08008915 	.word	0x08008915
 80088e8:	08008915 	.word	0x08008915
 80088ec:	08008915 	.word	0x08008915
 80088f0:	0800890d 	.word	0x0800890d
 80088f4:	2300      	movs	r3, #0
 80088f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088fa:	e0d8      	b.n	8008aae <UART_SetConfig+0x2e6>
 80088fc:	2302      	movs	r3, #2
 80088fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008902:	e0d4      	b.n	8008aae <UART_SetConfig+0x2e6>
 8008904:	2304      	movs	r3, #4
 8008906:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800890a:	e0d0      	b.n	8008aae <UART_SetConfig+0x2e6>
 800890c:	2308      	movs	r3, #8
 800890e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008912:	e0cc      	b.n	8008aae <UART_SetConfig+0x2e6>
 8008914:	2310      	movs	r3, #16
 8008916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800891a:	e0c8      	b.n	8008aae <UART_SetConfig+0x2e6>
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a5e      	ldr	r2, [pc, #376]	; (8008a9c <UART_SetConfig+0x2d4>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d125      	bne.n	8008972 <UART_SetConfig+0x1aa>
 8008926:	4b5b      	ldr	r3, [pc, #364]	; (8008a94 <UART_SetConfig+0x2cc>)
 8008928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800892c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008930:	2b30      	cmp	r3, #48	; 0x30
 8008932:	d016      	beq.n	8008962 <UART_SetConfig+0x19a>
 8008934:	2b30      	cmp	r3, #48	; 0x30
 8008936:	d818      	bhi.n	800896a <UART_SetConfig+0x1a2>
 8008938:	2b20      	cmp	r3, #32
 800893a:	d00a      	beq.n	8008952 <UART_SetConfig+0x18a>
 800893c:	2b20      	cmp	r3, #32
 800893e:	d814      	bhi.n	800896a <UART_SetConfig+0x1a2>
 8008940:	2b00      	cmp	r3, #0
 8008942:	d002      	beq.n	800894a <UART_SetConfig+0x182>
 8008944:	2b10      	cmp	r3, #16
 8008946:	d008      	beq.n	800895a <UART_SetConfig+0x192>
 8008948:	e00f      	b.n	800896a <UART_SetConfig+0x1a2>
 800894a:	2300      	movs	r3, #0
 800894c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008950:	e0ad      	b.n	8008aae <UART_SetConfig+0x2e6>
 8008952:	2302      	movs	r3, #2
 8008954:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008958:	e0a9      	b.n	8008aae <UART_SetConfig+0x2e6>
 800895a:	2304      	movs	r3, #4
 800895c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008960:	e0a5      	b.n	8008aae <UART_SetConfig+0x2e6>
 8008962:	2308      	movs	r3, #8
 8008964:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008968:	e0a1      	b.n	8008aae <UART_SetConfig+0x2e6>
 800896a:	2310      	movs	r3, #16
 800896c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008970:	e09d      	b.n	8008aae <UART_SetConfig+0x2e6>
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4a4a      	ldr	r2, [pc, #296]	; (8008aa0 <UART_SetConfig+0x2d8>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d125      	bne.n	80089c8 <UART_SetConfig+0x200>
 800897c:	4b45      	ldr	r3, [pc, #276]	; (8008a94 <UART_SetConfig+0x2cc>)
 800897e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008982:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008986:	2bc0      	cmp	r3, #192	; 0xc0
 8008988:	d016      	beq.n	80089b8 <UART_SetConfig+0x1f0>
 800898a:	2bc0      	cmp	r3, #192	; 0xc0
 800898c:	d818      	bhi.n	80089c0 <UART_SetConfig+0x1f8>
 800898e:	2b80      	cmp	r3, #128	; 0x80
 8008990:	d00a      	beq.n	80089a8 <UART_SetConfig+0x1e0>
 8008992:	2b80      	cmp	r3, #128	; 0x80
 8008994:	d814      	bhi.n	80089c0 <UART_SetConfig+0x1f8>
 8008996:	2b00      	cmp	r3, #0
 8008998:	d002      	beq.n	80089a0 <UART_SetConfig+0x1d8>
 800899a:	2b40      	cmp	r3, #64	; 0x40
 800899c:	d008      	beq.n	80089b0 <UART_SetConfig+0x1e8>
 800899e:	e00f      	b.n	80089c0 <UART_SetConfig+0x1f8>
 80089a0:	2300      	movs	r3, #0
 80089a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089a6:	e082      	b.n	8008aae <UART_SetConfig+0x2e6>
 80089a8:	2302      	movs	r3, #2
 80089aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089ae:	e07e      	b.n	8008aae <UART_SetConfig+0x2e6>
 80089b0:	2304      	movs	r3, #4
 80089b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089b6:	e07a      	b.n	8008aae <UART_SetConfig+0x2e6>
 80089b8:	2308      	movs	r3, #8
 80089ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089be:	e076      	b.n	8008aae <UART_SetConfig+0x2e6>
 80089c0:	2310      	movs	r3, #16
 80089c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089c6:	e072      	b.n	8008aae <UART_SetConfig+0x2e6>
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a35      	ldr	r2, [pc, #212]	; (8008aa4 <UART_SetConfig+0x2dc>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d12a      	bne.n	8008a28 <UART_SetConfig+0x260>
 80089d2:	4b30      	ldr	r3, [pc, #192]	; (8008a94 <UART_SetConfig+0x2cc>)
 80089d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089e0:	d01a      	beq.n	8008a18 <UART_SetConfig+0x250>
 80089e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089e6:	d81b      	bhi.n	8008a20 <UART_SetConfig+0x258>
 80089e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089ec:	d00c      	beq.n	8008a08 <UART_SetConfig+0x240>
 80089ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089f2:	d815      	bhi.n	8008a20 <UART_SetConfig+0x258>
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d003      	beq.n	8008a00 <UART_SetConfig+0x238>
 80089f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089fc:	d008      	beq.n	8008a10 <UART_SetConfig+0x248>
 80089fe:	e00f      	b.n	8008a20 <UART_SetConfig+0x258>
 8008a00:	2300      	movs	r3, #0
 8008a02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a06:	e052      	b.n	8008aae <UART_SetConfig+0x2e6>
 8008a08:	2302      	movs	r3, #2
 8008a0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a0e:	e04e      	b.n	8008aae <UART_SetConfig+0x2e6>
 8008a10:	2304      	movs	r3, #4
 8008a12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a16:	e04a      	b.n	8008aae <UART_SetConfig+0x2e6>
 8008a18:	2308      	movs	r3, #8
 8008a1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a1e:	e046      	b.n	8008aae <UART_SetConfig+0x2e6>
 8008a20:	2310      	movs	r3, #16
 8008a22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a26:	e042      	b.n	8008aae <UART_SetConfig+0x2e6>
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a17      	ldr	r2, [pc, #92]	; (8008a8c <UART_SetConfig+0x2c4>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d13a      	bne.n	8008aa8 <UART_SetConfig+0x2e0>
 8008a32:	4b18      	ldr	r3, [pc, #96]	; (8008a94 <UART_SetConfig+0x2cc>)
 8008a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a38:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008a3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008a40:	d01a      	beq.n	8008a78 <UART_SetConfig+0x2b0>
 8008a42:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008a46:	d81b      	bhi.n	8008a80 <UART_SetConfig+0x2b8>
 8008a48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a4c:	d00c      	beq.n	8008a68 <UART_SetConfig+0x2a0>
 8008a4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a52:	d815      	bhi.n	8008a80 <UART_SetConfig+0x2b8>
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d003      	beq.n	8008a60 <UART_SetConfig+0x298>
 8008a58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a5c:	d008      	beq.n	8008a70 <UART_SetConfig+0x2a8>
 8008a5e:	e00f      	b.n	8008a80 <UART_SetConfig+0x2b8>
 8008a60:	2300      	movs	r3, #0
 8008a62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a66:	e022      	b.n	8008aae <UART_SetConfig+0x2e6>
 8008a68:	2302      	movs	r3, #2
 8008a6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a6e:	e01e      	b.n	8008aae <UART_SetConfig+0x2e6>
 8008a70:	2304      	movs	r3, #4
 8008a72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a76:	e01a      	b.n	8008aae <UART_SetConfig+0x2e6>
 8008a78:	2308      	movs	r3, #8
 8008a7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a7e:	e016      	b.n	8008aae <UART_SetConfig+0x2e6>
 8008a80:	2310      	movs	r3, #16
 8008a82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a86:	e012      	b.n	8008aae <UART_SetConfig+0x2e6>
 8008a88:	efff69f3 	.word	0xefff69f3
 8008a8c:	40008000 	.word	0x40008000
 8008a90:	40013800 	.word	0x40013800
 8008a94:	40021000 	.word	0x40021000
 8008a98:	40004400 	.word	0x40004400
 8008a9c:	40004800 	.word	0x40004800
 8008aa0:	40004c00 	.word	0x40004c00
 8008aa4:	40005000 	.word	0x40005000
 8008aa8:	2310      	movs	r3, #16
 8008aaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4a9f      	ldr	r2, [pc, #636]	; (8008d30 <UART_SetConfig+0x568>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d17a      	bne.n	8008bae <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008ab8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008abc:	2b08      	cmp	r3, #8
 8008abe:	d824      	bhi.n	8008b0a <UART_SetConfig+0x342>
 8008ac0:	a201      	add	r2, pc, #4	; (adr r2, 8008ac8 <UART_SetConfig+0x300>)
 8008ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ac6:	bf00      	nop
 8008ac8:	08008aed 	.word	0x08008aed
 8008acc:	08008b0b 	.word	0x08008b0b
 8008ad0:	08008af5 	.word	0x08008af5
 8008ad4:	08008b0b 	.word	0x08008b0b
 8008ad8:	08008afb 	.word	0x08008afb
 8008adc:	08008b0b 	.word	0x08008b0b
 8008ae0:	08008b0b 	.word	0x08008b0b
 8008ae4:	08008b0b 	.word	0x08008b0b
 8008ae8:	08008b03 	.word	0x08008b03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008aec:	f7fd faaa 	bl	8006044 <HAL_RCC_GetPCLK1Freq>
 8008af0:	61f8      	str	r0, [r7, #28]
        break;
 8008af2:	e010      	b.n	8008b16 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008af4:	4b8f      	ldr	r3, [pc, #572]	; (8008d34 <UART_SetConfig+0x56c>)
 8008af6:	61fb      	str	r3, [r7, #28]
        break;
 8008af8:	e00d      	b.n	8008b16 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008afa:	f7fd fa0b 	bl	8005f14 <HAL_RCC_GetSysClockFreq>
 8008afe:	61f8      	str	r0, [r7, #28]
        break;
 8008b00:	e009      	b.n	8008b16 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b06:	61fb      	str	r3, [r7, #28]
        break;
 8008b08:	e005      	b.n	8008b16 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008b0e:	2301      	movs	r3, #1
 8008b10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008b14:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008b16:	69fb      	ldr	r3, [r7, #28]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	f000 80fb 	beq.w	8008d14 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	685a      	ldr	r2, [r3, #4]
 8008b22:	4613      	mov	r3, r2
 8008b24:	005b      	lsls	r3, r3, #1
 8008b26:	4413      	add	r3, r2
 8008b28:	69fa      	ldr	r2, [r7, #28]
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d305      	bcc.n	8008b3a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008b34:	69fa      	ldr	r2, [r7, #28]
 8008b36:	429a      	cmp	r2, r3
 8008b38:	d903      	bls.n	8008b42 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008b40:	e0e8      	b.n	8008d14 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008b42:	69fb      	ldr	r3, [r7, #28]
 8008b44:	2200      	movs	r2, #0
 8008b46:	461c      	mov	r4, r3
 8008b48:	4615      	mov	r5, r2
 8008b4a:	f04f 0200 	mov.w	r2, #0
 8008b4e:	f04f 0300 	mov.w	r3, #0
 8008b52:	022b      	lsls	r3, r5, #8
 8008b54:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008b58:	0222      	lsls	r2, r4, #8
 8008b5a:	68f9      	ldr	r1, [r7, #12]
 8008b5c:	6849      	ldr	r1, [r1, #4]
 8008b5e:	0849      	lsrs	r1, r1, #1
 8008b60:	2000      	movs	r0, #0
 8008b62:	4688      	mov	r8, r1
 8008b64:	4681      	mov	r9, r0
 8008b66:	eb12 0a08 	adds.w	sl, r2, r8
 8008b6a:	eb43 0b09 	adc.w	fp, r3, r9
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	685b      	ldr	r3, [r3, #4]
 8008b72:	2200      	movs	r2, #0
 8008b74:	603b      	str	r3, [r7, #0]
 8008b76:	607a      	str	r2, [r7, #4]
 8008b78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b7c:	4650      	mov	r0, sl
 8008b7e:	4659      	mov	r1, fp
 8008b80:	f7f8 f882 	bl	8000c88 <__aeabi_uldivmod>
 8008b84:	4602      	mov	r2, r0
 8008b86:	460b      	mov	r3, r1
 8008b88:	4613      	mov	r3, r2
 8008b8a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008b8c:	69bb      	ldr	r3, [r7, #24]
 8008b8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b92:	d308      	bcc.n	8008ba6 <UART_SetConfig+0x3de>
 8008b94:	69bb      	ldr	r3, [r7, #24]
 8008b96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b9a:	d204      	bcs.n	8008ba6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	69ba      	ldr	r2, [r7, #24]
 8008ba2:	60da      	str	r2, [r3, #12]
 8008ba4:	e0b6      	b.n	8008d14 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008bac:	e0b2      	b.n	8008d14 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	69db      	ldr	r3, [r3, #28]
 8008bb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bb6:	d15e      	bne.n	8008c76 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8008bb8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008bbc:	2b08      	cmp	r3, #8
 8008bbe:	d828      	bhi.n	8008c12 <UART_SetConfig+0x44a>
 8008bc0:	a201      	add	r2, pc, #4	; (adr r2, 8008bc8 <UART_SetConfig+0x400>)
 8008bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bc6:	bf00      	nop
 8008bc8:	08008bed 	.word	0x08008bed
 8008bcc:	08008bf5 	.word	0x08008bf5
 8008bd0:	08008bfd 	.word	0x08008bfd
 8008bd4:	08008c13 	.word	0x08008c13
 8008bd8:	08008c03 	.word	0x08008c03
 8008bdc:	08008c13 	.word	0x08008c13
 8008be0:	08008c13 	.word	0x08008c13
 8008be4:	08008c13 	.word	0x08008c13
 8008be8:	08008c0b 	.word	0x08008c0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008bec:	f7fd fa2a 	bl	8006044 <HAL_RCC_GetPCLK1Freq>
 8008bf0:	61f8      	str	r0, [r7, #28]
        break;
 8008bf2:	e014      	b.n	8008c1e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008bf4:	f7fd fa3c 	bl	8006070 <HAL_RCC_GetPCLK2Freq>
 8008bf8:	61f8      	str	r0, [r7, #28]
        break;
 8008bfa:	e010      	b.n	8008c1e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008bfc:	4b4d      	ldr	r3, [pc, #308]	; (8008d34 <UART_SetConfig+0x56c>)
 8008bfe:	61fb      	str	r3, [r7, #28]
        break;
 8008c00:	e00d      	b.n	8008c1e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c02:	f7fd f987 	bl	8005f14 <HAL_RCC_GetSysClockFreq>
 8008c06:	61f8      	str	r0, [r7, #28]
        break;
 8008c08:	e009      	b.n	8008c1e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c0e:	61fb      	str	r3, [r7, #28]
        break;
 8008c10:	e005      	b.n	8008c1e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8008c12:	2300      	movs	r3, #0
 8008c14:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008c16:	2301      	movs	r3, #1
 8008c18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008c1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008c1e:	69fb      	ldr	r3, [r7, #28]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d077      	beq.n	8008d14 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008c24:	69fb      	ldr	r3, [r7, #28]
 8008c26:	005a      	lsls	r2, r3, #1
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	085b      	lsrs	r3, r3, #1
 8008c2e:	441a      	add	r2, r3
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c38:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c3a:	69bb      	ldr	r3, [r7, #24]
 8008c3c:	2b0f      	cmp	r3, #15
 8008c3e:	d916      	bls.n	8008c6e <UART_SetConfig+0x4a6>
 8008c40:	69bb      	ldr	r3, [r7, #24]
 8008c42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c46:	d212      	bcs.n	8008c6e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008c48:	69bb      	ldr	r3, [r7, #24]
 8008c4a:	b29b      	uxth	r3, r3
 8008c4c:	f023 030f 	bic.w	r3, r3, #15
 8008c50:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008c52:	69bb      	ldr	r3, [r7, #24]
 8008c54:	085b      	lsrs	r3, r3, #1
 8008c56:	b29b      	uxth	r3, r3
 8008c58:	f003 0307 	and.w	r3, r3, #7
 8008c5c:	b29a      	uxth	r2, r3
 8008c5e:	8afb      	ldrh	r3, [r7, #22]
 8008c60:	4313      	orrs	r3, r2
 8008c62:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	8afa      	ldrh	r2, [r7, #22]
 8008c6a:	60da      	str	r2, [r3, #12]
 8008c6c:	e052      	b.n	8008d14 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008c6e:	2301      	movs	r3, #1
 8008c70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008c74:	e04e      	b.n	8008d14 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008c76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008c7a:	2b08      	cmp	r3, #8
 8008c7c:	d827      	bhi.n	8008cce <UART_SetConfig+0x506>
 8008c7e:	a201      	add	r2, pc, #4	; (adr r2, 8008c84 <UART_SetConfig+0x4bc>)
 8008c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c84:	08008ca9 	.word	0x08008ca9
 8008c88:	08008cb1 	.word	0x08008cb1
 8008c8c:	08008cb9 	.word	0x08008cb9
 8008c90:	08008ccf 	.word	0x08008ccf
 8008c94:	08008cbf 	.word	0x08008cbf
 8008c98:	08008ccf 	.word	0x08008ccf
 8008c9c:	08008ccf 	.word	0x08008ccf
 8008ca0:	08008ccf 	.word	0x08008ccf
 8008ca4:	08008cc7 	.word	0x08008cc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ca8:	f7fd f9cc 	bl	8006044 <HAL_RCC_GetPCLK1Freq>
 8008cac:	61f8      	str	r0, [r7, #28]
        break;
 8008cae:	e014      	b.n	8008cda <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008cb0:	f7fd f9de 	bl	8006070 <HAL_RCC_GetPCLK2Freq>
 8008cb4:	61f8      	str	r0, [r7, #28]
        break;
 8008cb6:	e010      	b.n	8008cda <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008cb8:	4b1e      	ldr	r3, [pc, #120]	; (8008d34 <UART_SetConfig+0x56c>)
 8008cba:	61fb      	str	r3, [r7, #28]
        break;
 8008cbc:	e00d      	b.n	8008cda <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008cbe:	f7fd f929 	bl	8005f14 <HAL_RCC_GetSysClockFreq>
 8008cc2:	61f8      	str	r0, [r7, #28]
        break;
 8008cc4:	e009      	b.n	8008cda <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008cc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008cca:	61fb      	str	r3, [r7, #28]
        break;
 8008ccc:	e005      	b.n	8008cda <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008cd8:	bf00      	nop
    }

    if (pclk != 0U)
 8008cda:	69fb      	ldr	r3, [r7, #28]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d019      	beq.n	8008d14 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	085a      	lsrs	r2, r3, #1
 8008ce6:	69fb      	ldr	r3, [r7, #28]
 8008ce8:	441a      	add	r2, r3
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cf2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008cf4:	69bb      	ldr	r3, [r7, #24]
 8008cf6:	2b0f      	cmp	r3, #15
 8008cf8:	d909      	bls.n	8008d0e <UART_SetConfig+0x546>
 8008cfa:	69bb      	ldr	r3, [r7, #24]
 8008cfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d00:	d205      	bcs.n	8008d0e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008d02:	69bb      	ldr	r3, [r7, #24]
 8008d04:	b29a      	uxth	r2, r3
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	60da      	str	r2, [r3, #12]
 8008d0c:	e002      	b.n	8008d14 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008d0e:	2301      	movs	r3, #1
 8008d10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	2200      	movs	r2, #0
 8008d18:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008d20:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	3728      	adds	r7, #40	; 0x28
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d2e:	bf00      	nop
 8008d30:	40008000 	.word	0x40008000
 8008d34:	00f42400 	.word	0x00f42400

08008d38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b083      	sub	sp, #12
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d44:	f003 0301 	and.w	r3, r3, #1
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d00a      	beq.n	8008d62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	430a      	orrs	r2, r1
 8008d60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d66:	f003 0302 	and.w	r3, r3, #2
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d00a      	beq.n	8008d84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	430a      	orrs	r2, r1
 8008d82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d88:	f003 0304 	and.w	r3, r3, #4
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d00a      	beq.n	8008da6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	430a      	orrs	r2, r1
 8008da4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008daa:	f003 0308 	and.w	r3, r3, #8
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d00a      	beq.n	8008dc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	685b      	ldr	r3, [r3, #4]
 8008db8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	430a      	orrs	r2, r1
 8008dc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dcc:	f003 0310 	and.w	r3, r3, #16
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d00a      	beq.n	8008dea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	689b      	ldr	r3, [r3, #8]
 8008dda:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	430a      	orrs	r2, r1
 8008de8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dee:	f003 0320 	and.w	r3, r3, #32
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d00a      	beq.n	8008e0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	689b      	ldr	r3, [r3, #8]
 8008dfc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	430a      	orrs	r2, r1
 8008e0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d01a      	beq.n	8008e4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	430a      	orrs	r2, r1
 8008e2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e36:	d10a      	bne.n	8008e4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	685b      	ldr	r3, [r3, #4]
 8008e3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	430a      	orrs	r2, r1
 8008e4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d00a      	beq.n	8008e70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	685b      	ldr	r3, [r3, #4]
 8008e60:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	430a      	orrs	r2, r1
 8008e6e:	605a      	str	r2, [r3, #4]
  }
}
 8008e70:	bf00      	nop
 8008e72:	370c      	adds	r7, #12
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr

08008e7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b086      	sub	sp, #24
 8008e80:	af02      	add	r7, sp, #8
 8008e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2200      	movs	r2, #0
 8008e88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008e8c:	f7f9 fd18 	bl	80028c0 <HAL_GetTick>
 8008e90:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f003 0308 	and.w	r3, r3, #8
 8008e9c:	2b08      	cmp	r3, #8
 8008e9e:	d10e      	bne.n	8008ebe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ea0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ea4:	9300      	str	r3, [sp, #0]
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 f82d 	bl	8008f0e <UART_WaitOnFlagUntilTimeout>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d001      	beq.n	8008ebe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008eba:	2303      	movs	r3, #3
 8008ebc:	e023      	b.n	8008f06 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f003 0304 	and.w	r3, r3, #4
 8008ec8:	2b04      	cmp	r3, #4
 8008eca:	d10e      	bne.n	8008eea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ecc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ed0:	9300      	str	r3, [sp, #0]
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f000 f817 	bl	8008f0e <UART_WaitOnFlagUntilTimeout>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d001      	beq.n	8008eea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ee6:	2303      	movs	r3, #3
 8008ee8:	e00d      	b.n	8008f06 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2220      	movs	r2, #32
 8008eee:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2220      	movs	r2, #32
 8008ef4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2200      	movs	r2, #0
 8008f00:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008f04:	2300      	movs	r3, #0
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3710      	adds	r7, #16
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}

08008f0e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008f0e:	b580      	push	{r7, lr}
 8008f10:	b09c      	sub	sp, #112	; 0x70
 8008f12:	af00      	add	r7, sp, #0
 8008f14:	60f8      	str	r0, [r7, #12]
 8008f16:	60b9      	str	r1, [r7, #8]
 8008f18:	603b      	str	r3, [r7, #0]
 8008f1a:	4613      	mov	r3, r2
 8008f1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f1e:	e0a5      	b.n	800906c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f26:	f000 80a1 	beq.w	800906c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f2a:	f7f9 fcc9 	bl	80028c0 <HAL_GetTick>
 8008f2e:	4602      	mov	r2, r0
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	1ad3      	subs	r3, r2, r3
 8008f34:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d302      	bcc.n	8008f40 <UART_WaitOnFlagUntilTimeout+0x32>
 8008f3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d13e      	bne.n	8008fbe <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f48:	e853 3f00 	ldrex	r3, [r3]
 8008f4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008f4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f50:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008f54:	667b      	str	r3, [r7, #100]	; 0x64
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f60:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f62:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008f64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008f66:	e841 2300 	strex	r3, r2, [r1]
 8008f6a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008f6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d1e6      	bne.n	8008f40 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	3308      	adds	r3, #8
 8008f78:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f7c:	e853 3f00 	ldrex	r3, [r3]
 8008f80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f84:	f023 0301 	bic.w	r3, r3, #1
 8008f88:	663b      	str	r3, [r7, #96]	; 0x60
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	3308      	adds	r3, #8
 8008f90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008f92:	64ba      	str	r2, [r7, #72]	; 0x48
 8008f94:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008f98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f9a:	e841 2300 	strex	r3, r2, [r1]
 8008f9e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008fa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d1e5      	bne.n	8008f72 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2220      	movs	r2, #32
 8008faa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	2220      	movs	r2, #32
 8008fb0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008fba:	2303      	movs	r3, #3
 8008fbc:	e067      	b.n	800908e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f003 0304 	and.w	r3, r3, #4
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d04f      	beq.n	800906c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	69db      	ldr	r3, [r3, #28]
 8008fd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008fd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008fda:	d147      	bne.n	800906c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008fe4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fee:	e853 3f00 	ldrex	r3, [r3]
 8008ff2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008ffa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	461a      	mov	r2, r3
 8009002:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009004:	637b      	str	r3, [r7, #52]	; 0x34
 8009006:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009008:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800900a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800900c:	e841 2300 	strex	r3, r2, [r1]
 8009010:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009014:	2b00      	cmp	r3, #0
 8009016:	d1e6      	bne.n	8008fe6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	3308      	adds	r3, #8
 800901e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	e853 3f00 	ldrex	r3, [r3]
 8009026:	613b      	str	r3, [r7, #16]
   return(result);
 8009028:	693b      	ldr	r3, [r7, #16]
 800902a:	f023 0301 	bic.w	r3, r3, #1
 800902e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	3308      	adds	r3, #8
 8009036:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009038:	623a      	str	r2, [r7, #32]
 800903a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800903c:	69f9      	ldr	r1, [r7, #28]
 800903e:	6a3a      	ldr	r2, [r7, #32]
 8009040:	e841 2300 	strex	r3, r2, [r1]
 8009044:	61bb      	str	r3, [r7, #24]
   return(result);
 8009046:	69bb      	ldr	r3, [r7, #24]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d1e5      	bne.n	8009018 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	2220      	movs	r2, #32
 8009050:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	2220      	movs	r2, #32
 8009056:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2220      	movs	r2, #32
 800905c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	2200      	movs	r2, #0
 8009064:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009068:	2303      	movs	r3, #3
 800906a:	e010      	b.n	800908e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	69da      	ldr	r2, [r3, #28]
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	4013      	ands	r3, r2
 8009076:	68ba      	ldr	r2, [r7, #8]
 8009078:	429a      	cmp	r2, r3
 800907a:	bf0c      	ite	eq
 800907c:	2301      	moveq	r3, #1
 800907e:	2300      	movne	r3, #0
 8009080:	b2db      	uxtb	r3, r3
 8009082:	461a      	mov	r2, r3
 8009084:	79fb      	ldrb	r3, [r7, #7]
 8009086:	429a      	cmp	r2, r3
 8009088:	f43f af4a 	beq.w	8008f20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800908c:	2300      	movs	r3, #0
}
 800908e:	4618      	mov	r0, r3
 8009090:	3770      	adds	r7, #112	; 0x70
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}

08009096 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009096:	b480      	push	{r7}
 8009098:	b095      	sub	sp, #84	; 0x54
 800909a:	af00      	add	r7, sp, #0
 800909c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090a6:	e853 3f00 	ldrex	r3, [r3]
 80090aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80090ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80090b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	461a      	mov	r2, r3
 80090ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090bc:	643b      	str	r3, [r7, #64]	; 0x40
 80090be:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80090c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80090c4:	e841 2300 	strex	r3, r2, [r1]
 80090c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80090ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d1e6      	bne.n	800909e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	3308      	adds	r3, #8
 80090d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090d8:	6a3b      	ldr	r3, [r7, #32]
 80090da:	e853 3f00 	ldrex	r3, [r3]
 80090de:	61fb      	str	r3, [r7, #28]
   return(result);
 80090e0:	69fb      	ldr	r3, [r7, #28]
 80090e2:	f023 0301 	bic.w	r3, r3, #1
 80090e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	3308      	adds	r3, #8
 80090ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80090f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80090f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090f8:	e841 2300 	strex	r3, r2, [r1]
 80090fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80090fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009100:	2b00      	cmp	r3, #0
 8009102:	d1e5      	bne.n	80090d0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009108:	2b01      	cmp	r3, #1
 800910a:	d118      	bne.n	800913e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	e853 3f00 	ldrex	r3, [r3]
 8009118:	60bb      	str	r3, [r7, #8]
   return(result);
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	f023 0310 	bic.w	r3, r3, #16
 8009120:	647b      	str	r3, [r7, #68]	; 0x44
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	461a      	mov	r2, r3
 8009128:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800912a:	61bb      	str	r3, [r7, #24]
 800912c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800912e:	6979      	ldr	r1, [r7, #20]
 8009130:	69ba      	ldr	r2, [r7, #24]
 8009132:	e841 2300 	strex	r3, r2, [r1]
 8009136:	613b      	str	r3, [r7, #16]
   return(result);
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d1e6      	bne.n	800910c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2220      	movs	r2, #32
 8009142:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2200      	movs	r2, #0
 8009148:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2200      	movs	r2, #0
 800914e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8009150:	bf00      	nop
 8009152:	3754      	adds	r7, #84	; 0x54
 8009154:	46bd      	mov	sp, r7
 8009156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915a:	4770      	bx	lr

0800915c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b084      	sub	sp, #16
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009168:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2200      	movs	r2, #0
 800916e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2200      	movs	r2, #0
 8009176:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800917a:	68f8      	ldr	r0, [r7, #12]
 800917c:	f7ff fb0e 	bl	800879c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009180:	bf00      	nop
 8009182:	3710      	adds	r7, #16
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}

08009188 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b088      	sub	sp, #32
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	e853 3f00 	ldrex	r3, [r3]
 800919c:	60bb      	str	r3, [r7, #8]
   return(result);
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091a4:	61fb      	str	r3, [r7, #28]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	461a      	mov	r2, r3
 80091ac:	69fb      	ldr	r3, [r7, #28]
 80091ae:	61bb      	str	r3, [r7, #24]
 80091b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b2:	6979      	ldr	r1, [r7, #20]
 80091b4:	69ba      	ldr	r2, [r7, #24]
 80091b6:	e841 2300 	strex	r3, r2, [r1]
 80091ba:	613b      	str	r3, [r7, #16]
   return(result);
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d1e6      	bne.n	8009190 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2220      	movs	r2, #32
 80091c6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2200      	movs	r2, #0
 80091cc:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f7ff fada 	bl	8008788 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091d4:	bf00      	nop
 80091d6:	3720      	adds	r7, #32
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}

080091dc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80091dc:	b480      	push	{r7}
 80091de:	b083      	sub	sp, #12
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80091e4:	bf00      	nop
 80091e6:	370c      	adds	r7, #12
 80091e8:	46bd      	mov	sp, r7
 80091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ee:	4770      	bx	lr

080091f0 <atan>:
 80091f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091f4:	ec55 4b10 	vmov	r4, r5, d0
 80091f8:	4bc3      	ldr	r3, [pc, #780]	; (8009508 <atan+0x318>)
 80091fa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80091fe:	429e      	cmp	r6, r3
 8009200:	46ab      	mov	fp, r5
 8009202:	dd18      	ble.n	8009236 <atan+0x46>
 8009204:	4bc1      	ldr	r3, [pc, #772]	; (800950c <atan+0x31c>)
 8009206:	429e      	cmp	r6, r3
 8009208:	dc01      	bgt.n	800920e <atan+0x1e>
 800920a:	d109      	bne.n	8009220 <atan+0x30>
 800920c:	b144      	cbz	r4, 8009220 <atan+0x30>
 800920e:	4622      	mov	r2, r4
 8009210:	462b      	mov	r3, r5
 8009212:	4620      	mov	r0, r4
 8009214:	4629      	mov	r1, r5
 8009216:	f7f7 f839 	bl	800028c <__adddf3>
 800921a:	4604      	mov	r4, r0
 800921c:	460d      	mov	r5, r1
 800921e:	e006      	b.n	800922e <atan+0x3e>
 8009220:	f1bb 0f00 	cmp.w	fp, #0
 8009224:	f300 8131 	bgt.w	800948a <atan+0x29a>
 8009228:	a59b      	add	r5, pc, #620	; (adr r5, 8009498 <atan+0x2a8>)
 800922a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800922e:	ec45 4b10 	vmov	d0, r4, r5
 8009232:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009236:	4bb6      	ldr	r3, [pc, #728]	; (8009510 <atan+0x320>)
 8009238:	429e      	cmp	r6, r3
 800923a:	dc14      	bgt.n	8009266 <atan+0x76>
 800923c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009240:	429e      	cmp	r6, r3
 8009242:	dc0d      	bgt.n	8009260 <atan+0x70>
 8009244:	a396      	add	r3, pc, #600	; (adr r3, 80094a0 <atan+0x2b0>)
 8009246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800924a:	ee10 0a10 	vmov	r0, s0
 800924e:	4629      	mov	r1, r5
 8009250:	f7f7 f81c 	bl	800028c <__adddf3>
 8009254:	4baf      	ldr	r3, [pc, #700]	; (8009514 <atan+0x324>)
 8009256:	2200      	movs	r2, #0
 8009258:	f7f7 fc5e 	bl	8000b18 <__aeabi_dcmpgt>
 800925c:	2800      	cmp	r0, #0
 800925e:	d1e6      	bne.n	800922e <atan+0x3e>
 8009260:	f04f 3aff 	mov.w	sl, #4294967295
 8009264:	e02b      	b.n	80092be <atan+0xce>
 8009266:	f000 f963 	bl	8009530 <fabs>
 800926a:	4bab      	ldr	r3, [pc, #684]	; (8009518 <atan+0x328>)
 800926c:	429e      	cmp	r6, r3
 800926e:	ec55 4b10 	vmov	r4, r5, d0
 8009272:	f300 80bf 	bgt.w	80093f4 <atan+0x204>
 8009276:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800927a:	429e      	cmp	r6, r3
 800927c:	f300 80a0 	bgt.w	80093c0 <atan+0x1d0>
 8009280:	ee10 2a10 	vmov	r2, s0
 8009284:	ee10 0a10 	vmov	r0, s0
 8009288:	462b      	mov	r3, r5
 800928a:	4629      	mov	r1, r5
 800928c:	f7f6 fffe 	bl	800028c <__adddf3>
 8009290:	4ba0      	ldr	r3, [pc, #640]	; (8009514 <atan+0x324>)
 8009292:	2200      	movs	r2, #0
 8009294:	f7f6 fff8 	bl	8000288 <__aeabi_dsub>
 8009298:	2200      	movs	r2, #0
 800929a:	4606      	mov	r6, r0
 800929c:	460f      	mov	r7, r1
 800929e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80092a2:	4620      	mov	r0, r4
 80092a4:	4629      	mov	r1, r5
 80092a6:	f7f6 fff1 	bl	800028c <__adddf3>
 80092aa:	4602      	mov	r2, r0
 80092ac:	460b      	mov	r3, r1
 80092ae:	4630      	mov	r0, r6
 80092b0:	4639      	mov	r1, r7
 80092b2:	f7f7 facb 	bl	800084c <__aeabi_ddiv>
 80092b6:	f04f 0a00 	mov.w	sl, #0
 80092ba:	4604      	mov	r4, r0
 80092bc:	460d      	mov	r5, r1
 80092be:	4622      	mov	r2, r4
 80092c0:	462b      	mov	r3, r5
 80092c2:	4620      	mov	r0, r4
 80092c4:	4629      	mov	r1, r5
 80092c6:	f7f7 f997 	bl	80005f8 <__aeabi_dmul>
 80092ca:	4602      	mov	r2, r0
 80092cc:	460b      	mov	r3, r1
 80092ce:	4680      	mov	r8, r0
 80092d0:	4689      	mov	r9, r1
 80092d2:	f7f7 f991 	bl	80005f8 <__aeabi_dmul>
 80092d6:	a374      	add	r3, pc, #464	; (adr r3, 80094a8 <atan+0x2b8>)
 80092d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092dc:	4606      	mov	r6, r0
 80092de:	460f      	mov	r7, r1
 80092e0:	f7f7 f98a 	bl	80005f8 <__aeabi_dmul>
 80092e4:	a372      	add	r3, pc, #456	; (adr r3, 80094b0 <atan+0x2c0>)
 80092e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ea:	f7f6 ffcf 	bl	800028c <__adddf3>
 80092ee:	4632      	mov	r2, r6
 80092f0:	463b      	mov	r3, r7
 80092f2:	f7f7 f981 	bl	80005f8 <__aeabi_dmul>
 80092f6:	a370      	add	r3, pc, #448	; (adr r3, 80094b8 <atan+0x2c8>)
 80092f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092fc:	f7f6 ffc6 	bl	800028c <__adddf3>
 8009300:	4632      	mov	r2, r6
 8009302:	463b      	mov	r3, r7
 8009304:	f7f7 f978 	bl	80005f8 <__aeabi_dmul>
 8009308:	a36d      	add	r3, pc, #436	; (adr r3, 80094c0 <atan+0x2d0>)
 800930a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800930e:	f7f6 ffbd 	bl	800028c <__adddf3>
 8009312:	4632      	mov	r2, r6
 8009314:	463b      	mov	r3, r7
 8009316:	f7f7 f96f 	bl	80005f8 <__aeabi_dmul>
 800931a:	a36b      	add	r3, pc, #428	; (adr r3, 80094c8 <atan+0x2d8>)
 800931c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009320:	f7f6 ffb4 	bl	800028c <__adddf3>
 8009324:	4632      	mov	r2, r6
 8009326:	463b      	mov	r3, r7
 8009328:	f7f7 f966 	bl	80005f8 <__aeabi_dmul>
 800932c:	a368      	add	r3, pc, #416	; (adr r3, 80094d0 <atan+0x2e0>)
 800932e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009332:	f7f6 ffab 	bl	800028c <__adddf3>
 8009336:	4642      	mov	r2, r8
 8009338:	464b      	mov	r3, r9
 800933a:	f7f7 f95d 	bl	80005f8 <__aeabi_dmul>
 800933e:	a366      	add	r3, pc, #408	; (adr r3, 80094d8 <atan+0x2e8>)
 8009340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009344:	4680      	mov	r8, r0
 8009346:	4689      	mov	r9, r1
 8009348:	4630      	mov	r0, r6
 800934a:	4639      	mov	r1, r7
 800934c:	f7f7 f954 	bl	80005f8 <__aeabi_dmul>
 8009350:	a363      	add	r3, pc, #396	; (adr r3, 80094e0 <atan+0x2f0>)
 8009352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009356:	f7f6 ff97 	bl	8000288 <__aeabi_dsub>
 800935a:	4632      	mov	r2, r6
 800935c:	463b      	mov	r3, r7
 800935e:	f7f7 f94b 	bl	80005f8 <__aeabi_dmul>
 8009362:	a361      	add	r3, pc, #388	; (adr r3, 80094e8 <atan+0x2f8>)
 8009364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009368:	f7f6 ff8e 	bl	8000288 <__aeabi_dsub>
 800936c:	4632      	mov	r2, r6
 800936e:	463b      	mov	r3, r7
 8009370:	f7f7 f942 	bl	80005f8 <__aeabi_dmul>
 8009374:	a35e      	add	r3, pc, #376	; (adr r3, 80094f0 <atan+0x300>)
 8009376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800937a:	f7f6 ff85 	bl	8000288 <__aeabi_dsub>
 800937e:	4632      	mov	r2, r6
 8009380:	463b      	mov	r3, r7
 8009382:	f7f7 f939 	bl	80005f8 <__aeabi_dmul>
 8009386:	a35c      	add	r3, pc, #368	; (adr r3, 80094f8 <atan+0x308>)
 8009388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800938c:	f7f6 ff7c 	bl	8000288 <__aeabi_dsub>
 8009390:	4632      	mov	r2, r6
 8009392:	463b      	mov	r3, r7
 8009394:	f7f7 f930 	bl	80005f8 <__aeabi_dmul>
 8009398:	4602      	mov	r2, r0
 800939a:	460b      	mov	r3, r1
 800939c:	4640      	mov	r0, r8
 800939e:	4649      	mov	r1, r9
 80093a0:	f7f6 ff74 	bl	800028c <__adddf3>
 80093a4:	4622      	mov	r2, r4
 80093a6:	462b      	mov	r3, r5
 80093a8:	f7f7 f926 	bl	80005f8 <__aeabi_dmul>
 80093ac:	f1ba 3fff 	cmp.w	sl, #4294967295
 80093b0:	4602      	mov	r2, r0
 80093b2:	460b      	mov	r3, r1
 80093b4:	d14b      	bne.n	800944e <atan+0x25e>
 80093b6:	4620      	mov	r0, r4
 80093b8:	4629      	mov	r1, r5
 80093ba:	f7f6 ff65 	bl	8000288 <__aeabi_dsub>
 80093be:	e72c      	b.n	800921a <atan+0x2a>
 80093c0:	ee10 0a10 	vmov	r0, s0
 80093c4:	4b53      	ldr	r3, [pc, #332]	; (8009514 <atan+0x324>)
 80093c6:	2200      	movs	r2, #0
 80093c8:	4629      	mov	r1, r5
 80093ca:	f7f6 ff5d 	bl	8000288 <__aeabi_dsub>
 80093ce:	4b51      	ldr	r3, [pc, #324]	; (8009514 <atan+0x324>)
 80093d0:	4606      	mov	r6, r0
 80093d2:	460f      	mov	r7, r1
 80093d4:	2200      	movs	r2, #0
 80093d6:	4620      	mov	r0, r4
 80093d8:	4629      	mov	r1, r5
 80093da:	f7f6 ff57 	bl	800028c <__adddf3>
 80093de:	4602      	mov	r2, r0
 80093e0:	460b      	mov	r3, r1
 80093e2:	4630      	mov	r0, r6
 80093e4:	4639      	mov	r1, r7
 80093e6:	f7f7 fa31 	bl	800084c <__aeabi_ddiv>
 80093ea:	f04f 0a01 	mov.w	sl, #1
 80093ee:	4604      	mov	r4, r0
 80093f0:	460d      	mov	r5, r1
 80093f2:	e764      	b.n	80092be <atan+0xce>
 80093f4:	4b49      	ldr	r3, [pc, #292]	; (800951c <atan+0x32c>)
 80093f6:	429e      	cmp	r6, r3
 80093f8:	da1d      	bge.n	8009436 <atan+0x246>
 80093fa:	ee10 0a10 	vmov	r0, s0
 80093fe:	4b48      	ldr	r3, [pc, #288]	; (8009520 <atan+0x330>)
 8009400:	2200      	movs	r2, #0
 8009402:	4629      	mov	r1, r5
 8009404:	f7f6 ff40 	bl	8000288 <__aeabi_dsub>
 8009408:	4b45      	ldr	r3, [pc, #276]	; (8009520 <atan+0x330>)
 800940a:	4606      	mov	r6, r0
 800940c:	460f      	mov	r7, r1
 800940e:	2200      	movs	r2, #0
 8009410:	4620      	mov	r0, r4
 8009412:	4629      	mov	r1, r5
 8009414:	f7f7 f8f0 	bl	80005f8 <__aeabi_dmul>
 8009418:	4b3e      	ldr	r3, [pc, #248]	; (8009514 <atan+0x324>)
 800941a:	2200      	movs	r2, #0
 800941c:	f7f6 ff36 	bl	800028c <__adddf3>
 8009420:	4602      	mov	r2, r0
 8009422:	460b      	mov	r3, r1
 8009424:	4630      	mov	r0, r6
 8009426:	4639      	mov	r1, r7
 8009428:	f7f7 fa10 	bl	800084c <__aeabi_ddiv>
 800942c:	f04f 0a02 	mov.w	sl, #2
 8009430:	4604      	mov	r4, r0
 8009432:	460d      	mov	r5, r1
 8009434:	e743      	b.n	80092be <atan+0xce>
 8009436:	462b      	mov	r3, r5
 8009438:	ee10 2a10 	vmov	r2, s0
 800943c:	4939      	ldr	r1, [pc, #228]	; (8009524 <atan+0x334>)
 800943e:	2000      	movs	r0, #0
 8009440:	f7f7 fa04 	bl	800084c <__aeabi_ddiv>
 8009444:	f04f 0a03 	mov.w	sl, #3
 8009448:	4604      	mov	r4, r0
 800944a:	460d      	mov	r5, r1
 800944c:	e737      	b.n	80092be <atan+0xce>
 800944e:	4b36      	ldr	r3, [pc, #216]	; (8009528 <atan+0x338>)
 8009450:	4e36      	ldr	r6, [pc, #216]	; (800952c <atan+0x33c>)
 8009452:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8009456:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800945a:	e9da 2300 	ldrd	r2, r3, [sl]
 800945e:	f7f6 ff13 	bl	8000288 <__aeabi_dsub>
 8009462:	4622      	mov	r2, r4
 8009464:	462b      	mov	r3, r5
 8009466:	f7f6 ff0f 	bl	8000288 <__aeabi_dsub>
 800946a:	4602      	mov	r2, r0
 800946c:	460b      	mov	r3, r1
 800946e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009472:	f7f6 ff09 	bl	8000288 <__aeabi_dsub>
 8009476:	f1bb 0f00 	cmp.w	fp, #0
 800947a:	4604      	mov	r4, r0
 800947c:	460d      	mov	r5, r1
 800947e:	f6bf aed6 	bge.w	800922e <atan+0x3e>
 8009482:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009486:	461d      	mov	r5, r3
 8009488:	e6d1      	b.n	800922e <atan+0x3e>
 800948a:	a51d      	add	r5, pc, #116	; (adr r5, 8009500 <atan+0x310>)
 800948c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009490:	e6cd      	b.n	800922e <atan+0x3e>
 8009492:	bf00      	nop
 8009494:	f3af 8000 	nop.w
 8009498:	54442d18 	.word	0x54442d18
 800949c:	bff921fb 	.word	0xbff921fb
 80094a0:	8800759c 	.word	0x8800759c
 80094a4:	7e37e43c 	.word	0x7e37e43c
 80094a8:	e322da11 	.word	0xe322da11
 80094ac:	3f90ad3a 	.word	0x3f90ad3a
 80094b0:	24760deb 	.word	0x24760deb
 80094b4:	3fa97b4b 	.word	0x3fa97b4b
 80094b8:	a0d03d51 	.word	0xa0d03d51
 80094bc:	3fb10d66 	.word	0x3fb10d66
 80094c0:	c54c206e 	.word	0xc54c206e
 80094c4:	3fb745cd 	.word	0x3fb745cd
 80094c8:	920083ff 	.word	0x920083ff
 80094cc:	3fc24924 	.word	0x3fc24924
 80094d0:	5555550d 	.word	0x5555550d
 80094d4:	3fd55555 	.word	0x3fd55555
 80094d8:	2c6a6c2f 	.word	0x2c6a6c2f
 80094dc:	bfa2b444 	.word	0xbfa2b444
 80094e0:	52defd9a 	.word	0x52defd9a
 80094e4:	3fadde2d 	.word	0x3fadde2d
 80094e8:	af749a6d 	.word	0xaf749a6d
 80094ec:	3fb3b0f2 	.word	0x3fb3b0f2
 80094f0:	fe231671 	.word	0xfe231671
 80094f4:	3fbc71c6 	.word	0x3fbc71c6
 80094f8:	9998ebc4 	.word	0x9998ebc4
 80094fc:	3fc99999 	.word	0x3fc99999
 8009500:	54442d18 	.word	0x54442d18
 8009504:	3ff921fb 	.word	0x3ff921fb
 8009508:	440fffff 	.word	0x440fffff
 800950c:	7ff00000 	.word	0x7ff00000
 8009510:	3fdbffff 	.word	0x3fdbffff
 8009514:	3ff00000 	.word	0x3ff00000
 8009518:	3ff2ffff 	.word	0x3ff2ffff
 800951c:	40038000 	.word	0x40038000
 8009520:	3ff80000 	.word	0x3ff80000
 8009524:	bff00000 	.word	0xbff00000
 8009528:	0800e4b8 	.word	0x0800e4b8
 800952c:	0800e498 	.word	0x0800e498

08009530 <fabs>:
 8009530:	ec51 0b10 	vmov	r0, r1, d0
 8009534:	ee10 2a10 	vmov	r2, s0
 8009538:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800953c:	ec43 2b10 	vmov	d0, r2, r3
 8009540:	4770      	bx	lr

08009542 <atan2>:
 8009542:	f000 b82d 	b.w	80095a0 <__ieee754_atan2>

08009546 <sqrt>:
 8009546:	b538      	push	{r3, r4, r5, lr}
 8009548:	ed2d 8b02 	vpush	{d8}
 800954c:	ec55 4b10 	vmov	r4, r5, d0
 8009550:	f000 f8f0 	bl	8009734 <__ieee754_sqrt>
 8009554:	4622      	mov	r2, r4
 8009556:	462b      	mov	r3, r5
 8009558:	4620      	mov	r0, r4
 800955a:	4629      	mov	r1, r5
 800955c:	eeb0 8a40 	vmov.f32	s16, s0
 8009560:	eef0 8a60 	vmov.f32	s17, s1
 8009564:	f7f7 fae2 	bl	8000b2c <__aeabi_dcmpun>
 8009568:	b990      	cbnz	r0, 8009590 <sqrt+0x4a>
 800956a:	2200      	movs	r2, #0
 800956c:	2300      	movs	r3, #0
 800956e:	4620      	mov	r0, r4
 8009570:	4629      	mov	r1, r5
 8009572:	f7f7 fab3 	bl	8000adc <__aeabi_dcmplt>
 8009576:	b158      	cbz	r0, 8009590 <sqrt+0x4a>
 8009578:	f000 f98e 	bl	8009898 <__errno>
 800957c:	2321      	movs	r3, #33	; 0x21
 800957e:	6003      	str	r3, [r0, #0]
 8009580:	2200      	movs	r2, #0
 8009582:	2300      	movs	r3, #0
 8009584:	4610      	mov	r0, r2
 8009586:	4619      	mov	r1, r3
 8009588:	f7f7 f960 	bl	800084c <__aeabi_ddiv>
 800958c:	ec41 0b18 	vmov	d8, r0, r1
 8009590:	eeb0 0a48 	vmov.f32	s0, s16
 8009594:	eef0 0a68 	vmov.f32	s1, s17
 8009598:	ecbd 8b02 	vpop	{d8}
 800959c:	bd38      	pop	{r3, r4, r5, pc}
	...

080095a0 <__ieee754_atan2>:
 80095a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095a4:	ec57 6b11 	vmov	r6, r7, d1
 80095a8:	4273      	negs	r3, r6
 80095aa:	f8df e184 	ldr.w	lr, [pc, #388]	; 8009730 <__ieee754_atan2+0x190>
 80095ae:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80095b2:	4333      	orrs	r3, r6
 80095b4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80095b8:	4573      	cmp	r3, lr
 80095ba:	ec51 0b10 	vmov	r0, r1, d0
 80095be:	ee11 8a10 	vmov	r8, s2
 80095c2:	d80a      	bhi.n	80095da <__ieee754_atan2+0x3a>
 80095c4:	4244      	negs	r4, r0
 80095c6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80095ca:	4304      	orrs	r4, r0
 80095cc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80095d0:	4574      	cmp	r4, lr
 80095d2:	ee10 9a10 	vmov	r9, s0
 80095d6:	468c      	mov	ip, r1
 80095d8:	d907      	bls.n	80095ea <__ieee754_atan2+0x4a>
 80095da:	4632      	mov	r2, r6
 80095dc:	463b      	mov	r3, r7
 80095de:	f7f6 fe55 	bl	800028c <__adddf3>
 80095e2:	ec41 0b10 	vmov	d0, r0, r1
 80095e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095ea:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80095ee:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80095f2:	4334      	orrs	r4, r6
 80095f4:	d103      	bne.n	80095fe <__ieee754_atan2+0x5e>
 80095f6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095fa:	f7ff bdf9 	b.w	80091f0 <atan>
 80095fe:	17bc      	asrs	r4, r7, #30
 8009600:	f004 0402 	and.w	r4, r4, #2
 8009604:	ea53 0909 	orrs.w	r9, r3, r9
 8009608:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800960c:	d107      	bne.n	800961e <__ieee754_atan2+0x7e>
 800960e:	2c02      	cmp	r4, #2
 8009610:	d060      	beq.n	80096d4 <__ieee754_atan2+0x134>
 8009612:	2c03      	cmp	r4, #3
 8009614:	d1e5      	bne.n	80095e2 <__ieee754_atan2+0x42>
 8009616:	a142      	add	r1, pc, #264	; (adr r1, 8009720 <__ieee754_atan2+0x180>)
 8009618:	e9d1 0100 	ldrd	r0, r1, [r1]
 800961c:	e7e1      	b.n	80095e2 <__ieee754_atan2+0x42>
 800961e:	ea52 0808 	orrs.w	r8, r2, r8
 8009622:	d106      	bne.n	8009632 <__ieee754_atan2+0x92>
 8009624:	f1bc 0f00 	cmp.w	ip, #0
 8009628:	da5f      	bge.n	80096ea <__ieee754_atan2+0x14a>
 800962a:	a13f      	add	r1, pc, #252	; (adr r1, 8009728 <__ieee754_atan2+0x188>)
 800962c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009630:	e7d7      	b.n	80095e2 <__ieee754_atan2+0x42>
 8009632:	4572      	cmp	r2, lr
 8009634:	d10f      	bne.n	8009656 <__ieee754_atan2+0xb6>
 8009636:	4293      	cmp	r3, r2
 8009638:	f104 34ff 	add.w	r4, r4, #4294967295
 800963c:	d107      	bne.n	800964e <__ieee754_atan2+0xae>
 800963e:	2c02      	cmp	r4, #2
 8009640:	d84c      	bhi.n	80096dc <__ieee754_atan2+0x13c>
 8009642:	4b35      	ldr	r3, [pc, #212]	; (8009718 <__ieee754_atan2+0x178>)
 8009644:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8009648:	e9d4 0100 	ldrd	r0, r1, [r4]
 800964c:	e7c9      	b.n	80095e2 <__ieee754_atan2+0x42>
 800964e:	2c02      	cmp	r4, #2
 8009650:	d848      	bhi.n	80096e4 <__ieee754_atan2+0x144>
 8009652:	4b32      	ldr	r3, [pc, #200]	; (800971c <__ieee754_atan2+0x17c>)
 8009654:	e7f6      	b.n	8009644 <__ieee754_atan2+0xa4>
 8009656:	4573      	cmp	r3, lr
 8009658:	d0e4      	beq.n	8009624 <__ieee754_atan2+0x84>
 800965a:	1a9b      	subs	r3, r3, r2
 800965c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8009660:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009664:	da1e      	bge.n	80096a4 <__ieee754_atan2+0x104>
 8009666:	2f00      	cmp	r7, #0
 8009668:	da01      	bge.n	800966e <__ieee754_atan2+0xce>
 800966a:	323c      	adds	r2, #60	; 0x3c
 800966c:	db1e      	blt.n	80096ac <__ieee754_atan2+0x10c>
 800966e:	4632      	mov	r2, r6
 8009670:	463b      	mov	r3, r7
 8009672:	f7f7 f8eb 	bl	800084c <__aeabi_ddiv>
 8009676:	ec41 0b10 	vmov	d0, r0, r1
 800967a:	f7ff ff59 	bl	8009530 <fabs>
 800967e:	f7ff fdb7 	bl	80091f0 <atan>
 8009682:	ec51 0b10 	vmov	r0, r1, d0
 8009686:	2c01      	cmp	r4, #1
 8009688:	d013      	beq.n	80096b2 <__ieee754_atan2+0x112>
 800968a:	2c02      	cmp	r4, #2
 800968c:	d015      	beq.n	80096ba <__ieee754_atan2+0x11a>
 800968e:	2c00      	cmp	r4, #0
 8009690:	d0a7      	beq.n	80095e2 <__ieee754_atan2+0x42>
 8009692:	a319      	add	r3, pc, #100	; (adr r3, 80096f8 <__ieee754_atan2+0x158>)
 8009694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009698:	f7f6 fdf6 	bl	8000288 <__aeabi_dsub>
 800969c:	a318      	add	r3, pc, #96	; (adr r3, 8009700 <__ieee754_atan2+0x160>)
 800969e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096a2:	e014      	b.n	80096ce <__ieee754_atan2+0x12e>
 80096a4:	a118      	add	r1, pc, #96	; (adr r1, 8009708 <__ieee754_atan2+0x168>)
 80096a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096aa:	e7ec      	b.n	8009686 <__ieee754_atan2+0xe6>
 80096ac:	2000      	movs	r0, #0
 80096ae:	2100      	movs	r1, #0
 80096b0:	e7e9      	b.n	8009686 <__ieee754_atan2+0xe6>
 80096b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80096b6:	4619      	mov	r1, r3
 80096b8:	e793      	b.n	80095e2 <__ieee754_atan2+0x42>
 80096ba:	a30f      	add	r3, pc, #60	; (adr r3, 80096f8 <__ieee754_atan2+0x158>)
 80096bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c0:	f7f6 fde2 	bl	8000288 <__aeabi_dsub>
 80096c4:	4602      	mov	r2, r0
 80096c6:	460b      	mov	r3, r1
 80096c8:	a10d      	add	r1, pc, #52	; (adr r1, 8009700 <__ieee754_atan2+0x160>)
 80096ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096ce:	f7f6 fddb 	bl	8000288 <__aeabi_dsub>
 80096d2:	e786      	b.n	80095e2 <__ieee754_atan2+0x42>
 80096d4:	a10a      	add	r1, pc, #40	; (adr r1, 8009700 <__ieee754_atan2+0x160>)
 80096d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096da:	e782      	b.n	80095e2 <__ieee754_atan2+0x42>
 80096dc:	a10c      	add	r1, pc, #48	; (adr r1, 8009710 <__ieee754_atan2+0x170>)
 80096de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096e2:	e77e      	b.n	80095e2 <__ieee754_atan2+0x42>
 80096e4:	2000      	movs	r0, #0
 80096e6:	2100      	movs	r1, #0
 80096e8:	e77b      	b.n	80095e2 <__ieee754_atan2+0x42>
 80096ea:	a107      	add	r1, pc, #28	; (adr r1, 8009708 <__ieee754_atan2+0x168>)
 80096ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096f0:	e777      	b.n	80095e2 <__ieee754_atan2+0x42>
 80096f2:	bf00      	nop
 80096f4:	f3af 8000 	nop.w
 80096f8:	33145c07 	.word	0x33145c07
 80096fc:	3ca1a626 	.word	0x3ca1a626
 8009700:	54442d18 	.word	0x54442d18
 8009704:	400921fb 	.word	0x400921fb
 8009708:	54442d18 	.word	0x54442d18
 800970c:	3ff921fb 	.word	0x3ff921fb
 8009710:	54442d18 	.word	0x54442d18
 8009714:	3fe921fb 	.word	0x3fe921fb
 8009718:	0800e4d8 	.word	0x0800e4d8
 800971c:	0800e4f0 	.word	0x0800e4f0
 8009720:	54442d18 	.word	0x54442d18
 8009724:	c00921fb 	.word	0xc00921fb
 8009728:	54442d18 	.word	0x54442d18
 800972c:	bff921fb 	.word	0xbff921fb
 8009730:	7ff00000 	.word	0x7ff00000

08009734 <__ieee754_sqrt>:
 8009734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009738:	ec55 4b10 	vmov	r4, r5, d0
 800973c:	4e55      	ldr	r6, [pc, #340]	; (8009894 <__ieee754_sqrt+0x160>)
 800973e:	43ae      	bics	r6, r5
 8009740:	ee10 0a10 	vmov	r0, s0
 8009744:	ee10 3a10 	vmov	r3, s0
 8009748:	462a      	mov	r2, r5
 800974a:	4629      	mov	r1, r5
 800974c:	d110      	bne.n	8009770 <__ieee754_sqrt+0x3c>
 800974e:	ee10 2a10 	vmov	r2, s0
 8009752:	462b      	mov	r3, r5
 8009754:	f7f6 ff50 	bl	80005f8 <__aeabi_dmul>
 8009758:	4602      	mov	r2, r0
 800975a:	460b      	mov	r3, r1
 800975c:	4620      	mov	r0, r4
 800975e:	4629      	mov	r1, r5
 8009760:	f7f6 fd94 	bl	800028c <__adddf3>
 8009764:	4604      	mov	r4, r0
 8009766:	460d      	mov	r5, r1
 8009768:	ec45 4b10 	vmov	d0, r4, r5
 800976c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009770:	2d00      	cmp	r5, #0
 8009772:	dc10      	bgt.n	8009796 <__ieee754_sqrt+0x62>
 8009774:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009778:	4330      	orrs	r0, r6
 800977a:	d0f5      	beq.n	8009768 <__ieee754_sqrt+0x34>
 800977c:	b15d      	cbz	r5, 8009796 <__ieee754_sqrt+0x62>
 800977e:	ee10 2a10 	vmov	r2, s0
 8009782:	462b      	mov	r3, r5
 8009784:	ee10 0a10 	vmov	r0, s0
 8009788:	f7f6 fd7e 	bl	8000288 <__aeabi_dsub>
 800978c:	4602      	mov	r2, r0
 800978e:	460b      	mov	r3, r1
 8009790:	f7f7 f85c 	bl	800084c <__aeabi_ddiv>
 8009794:	e7e6      	b.n	8009764 <__ieee754_sqrt+0x30>
 8009796:	1512      	asrs	r2, r2, #20
 8009798:	d074      	beq.n	8009884 <__ieee754_sqrt+0x150>
 800979a:	07d4      	lsls	r4, r2, #31
 800979c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80097a0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80097a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80097a8:	bf5e      	ittt	pl
 80097aa:	0fda      	lsrpl	r2, r3, #31
 80097ac:	005b      	lslpl	r3, r3, #1
 80097ae:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80097b2:	2400      	movs	r4, #0
 80097b4:	0fda      	lsrs	r2, r3, #31
 80097b6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80097ba:	107f      	asrs	r7, r7, #1
 80097bc:	005b      	lsls	r3, r3, #1
 80097be:	2516      	movs	r5, #22
 80097c0:	4620      	mov	r0, r4
 80097c2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80097c6:	1886      	adds	r6, r0, r2
 80097c8:	428e      	cmp	r6, r1
 80097ca:	bfde      	ittt	le
 80097cc:	1b89      	suble	r1, r1, r6
 80097ce:	18b0      	addle	r0, r6, r2
 80097d0:	18a4      	addle	r4, r4, r2
 80097d2:	0049      	lsls	r1, r1, #1
 80097d4:	3d01      	subs	r5, #1
 80097d6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80097da:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80097de:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80097e2:	d1f0      	bne.n	80097c6 <__ieee754_sqrt+0x92>
 80097e4:	462a      	mov	r2, r5
 80097e6:	f04f 0e20 	mov.w	lr, #32
 80097ea:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80097ee:	4281      	cmp	r1, r0
 80097f0:	eb06 0c05 	add.w	ip, r6, r5
 80097f4:	dc02      	bgt.n	80097fc <__ieee754_sqrt+0xc8>
 80097f6:	d113      	bne.n	8009820 <__ieee754_sqrt+0xec>
 80097f8:	459c      	cmp	ip, r3
 80097fa:	d811      	bhi.n	8009820 <__ieee754_sqrt+0xec>
 80097fc:	f1bc 0f00 	cmp.w	ip, #0
 8009800:	eb0c 0506 	add.w	r5, ip, r6
 8009804:	da43      	bge.n	800988e <__ieee754_sqrt+0x15a>
 8009806:	2d00      	cmp	r5, #0
 8009808:	db41      	blt.n	800988e <__ieee754_sqrt+0x15a>
 800980a:	f100 0801 	add.w	r8, r0, #1
 800980e:	1a09      	subs	r1, r1, r0
 8009810:	459c      	cmp	ip, r3
 8009812:	bf88      	it	hi
 8009814:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8009818:	eba3 030c 	sub.w	r3, r3, ip
 800981c:	4432      	add	r2, r6
 800981e:	4640      	mov	r0, r8
 8009820:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8009824:	f1be 0e01 	subs.w	lr, lr, #1
 8009828:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800982c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009830:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009834:	d1db      	bne.n	80097ee <__ieee754_sqrt+0xba>
 8009836:	430b      	orrs	r3, r1
 8009838:	d006      	beq.n	8009848 <__ieee754_sqrt+0x114>
 800983a:	1c50      	adds	r0, r2, #1
 800983c:	bf13      	iteet	ne
 800983e:	3201      	addne	r2, #1
 8009840:	3401      	addeq	r4, #1
 8009842:	4672      	moveq	r2, lr
 8009844:	f022 0201 	bicne.w	r2, r2, #1
 8009848:	1063      	asrs	r3, r4, #1
 800984a:	0852      	lsrs	r2, r2, #1
 800984c:	07e1      	lsls	r1, r4, #31
 800984e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009852:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009856:	bf48      	it	mi
 8009858:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800985c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8009860:	4614      	mov	r4, r2
 8009862:	e781      	b.n	8009768 <__ieee754_sqrt+0x34>
 8009864:	0ad9      	lsrs	r1, r3, #11
 8009866:	3815      	subs	r0, #21
 8009868:	055b      	lsls	r3, r3, #21
 800986a:	2900      	cmp	r1, #0
 800986c:	d0fa      	beq.n	8009864 <__ieee754_sqrt+0x130>
 800986e:	02cd      	lsls	r5, r1, #11
 8009870:	d50a      	bpl.n	8009888 <__ieee754_sqrt+0x154>
 8009872:	f1c2 0420 	rsb	r4, r2, #32
 8009876:	fa23 f404 	lsr.w	r4, r3, r4
 800987a:	1e55      	subs	r5, r2, #1
 800987c:	4093      	lsls	r3, r2
 800987e:	4321      	orrs	r1, r4
 8009880:	1b42      	subs	r2, r0, r5
 8009882:	e78a      	b.n	800979a <__ieee754_sqrt+0x66>
 8009884:	4610      	mov	r0, r2
 8009886:	e7f0      	b.n	800986a <__ieee754_sqrt+0x136>
 8009888:	0049      	lsls	r1, r1, #1
 800988a:	3201      	adds	r2, #1
 800988c:	e7ef      	b.n	800986e <__ieee754_sqrt+0x13a>
 800988e:	4680      	mov	r8, r0
 8009890:	e7bd      	b.n	800980e <__ieee754_sqrt+0xda>
 8009892:	bf00      	nop
 8009894:	7ff00000 	.word	0x7ff00000

08009898 <__errno>:
 8009898:	4b01      	ldr	r3, [pc, #4]	; (80098a0 <__errno+0x8>)
 800989a:	6818      	ldr	r0, [r3, #0]
 800989c:	4770      	bx	lr
 800989e:	bf00      	nop
 80098a0:	200000a4 	.word	0x200000a4

080098a4 <__libc_init_array>:
 80098a4:	b570      	push	{r4, r5, r6, lr}
 80098a6:	4d0d      	ldr	r5, [pc, #52]	; (80098dc <__libc_init_array+0x38>)
 80098a8:	4c0d      	ldr	r4, [pc, #52]	; (80098e0 <__libc_init_array+0x3c>)
 80098aa:	1b64      	subs	r4, r4, r5
 80098ac:	10a4      	asrs	r4, r4, #2
 80098ae:	2600      	movs	r6, #0
 80098b0:	42a6      	cmp	r6, r4
 80098b2:	d109      	bne.n	80098c8 <__libc_init_array+0x24>
 80098b4:	4d0b      	ldr	r5, [pc, #44]	; (80098e4 <__libc_init_array+0x40>)
 80098b6:	4c0c      	ldr	r4, [pc, #48]	; (80098e8 <__libc_init_array+0x44>)
 80098b8:	f004 fd1c 	bl	800e2f4 <_init>
 80098bc:	1b64      	subs	r4, r4, r5
 80098be:	10a4      	asrs	r4, r4, #2
 80098c0:	2600      	movs	r6, #0
 80098c2:	42a6      	cmp	r6, r4
 80098c4:	d105      	bne.n	80098d2 <__libc_init_array+0x2e>
 80098c6:	bd70      	pop	{r4, r5, r6, pc}
 80098c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80098cc:	4798      	blx	r3
 80098ce:	3601      	adds	r6, #1
 80098d0:	e7ee      	b.n	80098b0 <__libc_init_array+0xc>
 80098d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80098d6:	4798      	blx	r3
 80098d8:	3601      	adds	r6, #1
 80098da:	e7f2      	b.n	80098c2 <__libc_init_array+0x1e>
 80098dc:	0800e9bc 	.word	0x0800e9bc
 80098e0:	0800e9bc 	.word	0x0800e9bc
 80098e4:	0800e9bc 	.word	0x0800e9bc
 80098e8:	0800e9c0 	.word	0x0800e9c0

080098ec <memcpy>:
 80098ec:	440a      	add	r2, r1
 80098ee:	4291      	cmp	r1, r2
 80098f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80098f4:	d100      	bne.n	80098f8 <memcpy+0xc>
 80098f6:	4770      	bx	lr
 80098f8:	b510      	push	{r4, lr}
 80098fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009902:	4291      	cmp	r1, r2
 8009904:	d1f9      	bne.n	80098fa <memcpy+0xe>
 8009906:	bd10      	pop	{r4, pc}

08009908 <memset>:
 8009908:	4402      	add	r2, r0
 800990a:	4603      	mov	r3, r0
 800990c:	4293      	cmp	r3, r2
 800990e:	d100      	bne.n	8009912 <memset+0xa>
 8009910:	4770      	bx	lr
 8009912:	f803 1b01 	strb.w	r1, [r3], #1
 8009916:	e7f9      	b.n	800990c <memset+0x4>

08009918 <__cvt>:
 8009918:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800991c:	ec55 4b10 	vmov	r4, r5, d0
 8009920:	2d00      	cmp	r5, #0
 8009922:	460e      	mov	r6, r1
 8009924:	4619      	mov	r1, r3
 8009926:	462b      	mov	r3, r5
 8009928:	bfbb      	ittet	lt
 800992a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800992e:	461d      	movlt	r5, r3
 8009930:	2300      	movge	r3, #0
 8009932:	232d      	movlt	r3, #45	; 0x2d
 8009934:	700b      	strb	r3, [r1, #0]
 8009936:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009938:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800993c:	4691      	mov	r9, r2
 800993e:	f023 0820 	bic.w	r8, r3, #32
 8009942:	bfbc      	itt	lt
 8009944:	4622      	movlt	r2, r4
 8009946:	4614      	movlt	r4, r2
 8009948:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800994c:	d005      	beq.n	800995a <__cvt+0x42>
 800994e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009952:	d100      	bne.n	8009956 <__cvt+0x3e>
 8009954:	3601      	adds	r6, #1
 8009956:	2102      	movs	r1, #2
 8009958:	e000      	b.n	800995c <__cvt+0x44>
 800995a:	2103      	movs	r1, #3
 800995c:	ab03      	add	r3, sp, #12
 800995e:	9301      	str	r3, [sp, #4]
 8009960:	ab02      	add	r3, sp, #8
 8009962:	9300      	str	r3, [sp, #0]
 8009964:	ec45 4b10 	vmov	d0, r4, r5
 8009968:	4653      	mov	r3, sl
 800996a:	4632      	mov	r2, r6
 800996c:	f001 fefc 	bl	800b768 <_dtoa_r>
 8009970:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009974:	4607      	mov	r7, r0
 8009976:	d102      	bne.n	800997e <__cvt+0x66>
 8009978:	f019 0f01 	tst.w	r9, #1
 800997c:	d022      	beq.n	80099c4 <__cvt+0xac>
 800997e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009982:	eb07 0906 	add.w	r9, r7, r6
 8009986:	d110      	bne.n	80099aa <__cvt+0x92>
 8009988:	783b      	ldrb	r3, [r7, #0]
 800998a:	2b30      	cmp	r3, #48	; 0x30
 800998c:	d10a      	bne.n	80099a4 <__cvt+0x8c>
 800998e:	2200      	movs	r2, #0
 8009990:	2300      	movs	r3, #0
 8009992:	4620      	mov	r0, r4
 8009994:	4629      	mov	r1, r5
 8009996:	f7f7 f897 	bl	8000ac8 <__aeabi_dcmpeq>
 800999a:	b918      	cbnz	r0, 80099a4 <__cvt+0x8c>
 800999c:	f1c6 0601 	rsb	r6, r6, #1
 80099a0:	f8ca 6000 	str.w	r6, [sl]
 80099a4:	f8da 3000 	ldr.w	r3, [sl]
 80099a8:	4499      	add	r9, r3
 80099aa:	2200      	movs	r2, #0
 80099ac:	2300      	movs	r3, #0
 80099ae:	4620      	mov	r0, r4
 80099b0:	4629      	mov	r1, r5
 80099b2:	f7f7 f889 	bl	8000ac8 <__aeabi_dcmpeq>
 80099b6:	b108      	cbz	r0, 80099bc <__cvt+0xa4>
 80099b8:	f8cd 900c 	str.w	r9, [sp, #12]
 80099bc:	2230      	movs	r2, #48	; 0x30
 80099be:	9b03      	ldr	r3, [sp, #12]
 80099c0:	454b      	cmp	r3, r9
 80099c2:	d307      	bcc.n	80099d4 <__cvt+0xbc>
 80099c4:	9b03      	ldr	r3, [sp, #12]
 80099c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80099c8:	1bdb      	subs	r3, r3, r7
 80099ca:	4638      	mov	r0, r7
 80099cc:	6013      	str	r3, [r2, #0]
 80099ce:	b004      	add	sp, #16
 80099d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099d4:	1c59      	adds	r1, r3, #1
 80099d6:	9103      	str	r1, [sp, #12]
 80099d8:	701a      	strb	r2, [r3, #0]
 80099da:	e7f0      	b.n	80099be <__cvt+0xa6>

080099dc <__exponent>:
 80099dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80099de:	4603      	mov	r3, r0
 80099e0:	2900      	cmp	r1, #0
 80099e2:	bfb8      	it	lt
 80099e4:	4249      	neglt	r1, r1
 80099e6:	f803 2b02 	strb.w	r2, [r3], #2
 80099ea:	bfb4      	ite	lt
 80099ec:	222d      	movlt	r2, #45	; 0x2d
 80099ee:	222b      	movge	r2, #43	; 0x2b
 80099f0:	2909      	cmp	r1, #9
 80099f2:	7042      	strb	r2, [r0, #1]
 80099f4:	dd2a      	ble.n	8009a4c <__exponent+0x70>
 80099f6:	f10d 0407 	add.w	r4, sp, #7
 80099fa:	46a4      	mov	ip, r4
 80099fc:	270a      	movs	r7, #10
 80099fe:	46a6      	mov	lr, r4
 8009a00:	460a      	mov	r2, r1
 8009a02:	fb91 f6f7 	sdiv	r6, r1, r7
 8009a06:	fb07 1516 	mls	r5, r7, r6, r1
 8009a0a:	3530      	adds	r5, #48	; 0x30
 8009a0c:	2a63      	cmp	r2, #99	; 0x63
 8009a0e:	f104 34ff 	add.w	r4, r4, #4294967295
 8009a12:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009a16:	4631      	mov	r1, r6
 8009a18:	dcf1      	bgt.n	80099fe <__exponent+0x22>
 8009a1a:	3130      	adds	r1, #48	; 0x30
 8009a1c:	f1ae 0502 	sub.w	r5, lr, #2
 8009a20:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009a24:	1c44      	adds	r4, r0, #1
 8009a26:	4629      	mov	r1, r5
 8009a28:	4561      	cmp	r1, ip
 8009a2a:	d30a      	bcc.n	8009a42 <__exponent+0x66>
 8009a2c:	f10d 0209 	add.w	r2, sp, #9
 8009a30:	eba2 020e 	sub.w	r2, r2, lr
 8009a34:	4565      	cmp	r5, ip
 8009a36:	bf88      	it	hi
 8009a38:	2200      	movhi	r2, #0
 8009a3a:	4413      	add	r3, r2
 8009a3c:	1a18      	subs	r0, r3, r0
 8009a3e:	b003      	add	sp, #12
 8009a40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a46:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009a4a:	e7ed      	b.n	8009a28 <__exponent+0x4c>
 8009a4c:	2330      	movs	r3, #48	; 0x30
 8009a4e:	3130      	adds	r1, #48	; 0x30
 8009a50:	7083      	strb	r3, [r0, #2]
 8009a52:	70c1      	strb	r1, [r0, #3]
 8009a54:	1d03      	adds	r3, r0, #4
 8009a56:	e7f1      	b.n	8009a3c <__exponent+0x60>

08009a58 <_printf_float>:
 8009a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a5c:	ed2d 8b02 	vpush	{d8}
 8009a60:	b08d      	sub	sp, #52	; 0x34
 8009a62:	460c      	mov	r4, r1
 8009a64:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009a68:	4616      	mov	r6, r2
 8009a6a:	461f      	mov	r7, r3
 8009a6c:	4605      	mov	r5, r0
 8009a6e:	f003 f98f 	bl	800cd90 <_localeconv_r>
 8009a72:	f8d0 a000 	ldr.w	sl, [r0]
 8009a76:	4650      	mov	r0, sl
 8009a78:	f7f6 fbaa 	bl	80001d0 <strlen>
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	930a      	str	r3, [sp, #40]	; 0x28
 8009a80:	6823      	ldr	r3, [r4, #0]
 8009a82:	9305      	str	r3, [sp, #20]
 8009a84:	f8d8 3000 	ldr.w	r3, [r8]
 8009a88:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009a8c:	3307      	adds	r3, #7
 8009a8e:	f023 0307 	bic.w	r3, r3, #7
 8009a92:	f103 0208 	add.w	r2, r3, #8
 8009a96:	f8c8 2000 	str.w	r2, [r8]
 8009a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a9e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009aa2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009aa6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009aaa:	9307      	str	r3, [sp, #28]
 8009aac:	f8cd 8018 	str.w	r8, [sp, #24]
 8009ab0:	ee08 0a10 	vmov	s16, r0
 8009ab4:	4b9f      	ldr	r3, [pc, #636]	; (8009d34 <_printf_float+0x2dc>)
 8009ab6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009aba:	f04f 32ff 	mov.w	r2, #4294967295
 8009abe:	f7f7 f835 	bl	8000b2c <__aeabi_dcmpun>
 8009ac2:	bb88      	cbnz	r0, 8009b28 <_printf_float+0xd0>
 8009ac4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009ac8:	4b9a      	ldr	r3, [pc, #616]	; (8009d34 <_printf_float+0x2dc>)
 8009aca:	f04f 32ff 	mov.w	r2, #4294967295
 8009ace:	f7f7 f80f 	bl	8000af0 <__aeabi_dcmple>
 8009ad2:	bb48      	cbnz	r0, 8009b28 <_printf_float+0xd0>
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	4640      	mov	r0, r8
 8009ada:	4649      	mov	r1, r9
 8009adc:	f7f6 fffe 	bl	8000adc <__aeabi_dcmplt>
 8009ae0:	b110      	cbz	r0, 8009ae8 <_printf_float+0x90>
 8009ae2:	232d      	movs	r3, #45	; 0x2d
 8009ae4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ae8:	4b93      	ldr	r3, [pc, #588]	; (8009d38 <_printf_float+0x2e0>)
 8009aea:	4894      	ldr	r0, [pc, #592]	; (8009d3c <_printf_float+0x2e4>)
 8009aec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009af0:	bf94      	ite	ls
 8009af2:	4698      	movls	r8, r3
 8009af4:	4680      	movhi	r8, r0
 8009af6:	2303      	movs	r3, #3
 8009af8:	6123      	str	r3, [r4, #16]
 8009afa:	9b05      	ldr	r3, [sp, #20]
 8009afc:	f023 0204 	bic.w	r2, r3, #4
 8009b00:	6022      	str	r2, [r4, #0]
 8009b02:	f04f 0900 	mov.w	r9, #0
 8009b06:	9700      	str	r7, [sp, #0]
 8009b08:	4633      	mov	r3, r6
 8009b0a:	aa0b      	add	r2, sp, #44	; 0x2c
 8009b0c:	4621      	mov	r1, r4
 8009b0e:	4628      	mov	r0, r5
 8009b10:	f000 f9d8 	bl	8009ec4 <_printf_common>
 8009b14:	3001      	adds	r0, #1
 8009b16:	f040 8090 	bne.w	8009c3a <_printf_float+0x1e2>
 8009b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8009b1e:	b00d      	add	sp, #52	; 0x34
 8009b20:	ecbd 8b02 	vpop	{d8}
 8009b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b28:	4642      	mov	r2, r8
 8009b2a:	464b      	mov	r3, r9
 8009b2c:	4640      	mov	r0, r8
 8009b2e:	4649      	mov	r1, r9
 8009b30:	f7f6 fffc 	bl	8000b2c <__aeabi_dcmpun>
 8009b34:	b140      	cbz	r0, 8009b48 <_printf_float+0xf0>
 8009b36:	464b      	mov	r3, r9
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	bfbc      	itt	lt
 8009b3c:	232d      	movlt	r3, #45	; 0x2d
 8009b3e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009b42:	487f      	ldr	r0, [pc, #508]	; (8009d40 <_printf_float+0x2e8>)
 8009b44:	4b7f      	ldr	r3, [pc, #508]	; (8009d44 <_printf_float+0x2ec>)
 8009b46:	e7d1      	b.n	8009aec <_printf_float+0x94>
 8009b48:	6863      	ldr	r3, [r4, #4]
 8009b4a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009b4e:	9206      	str	r2, [sp, #24]
 8009b50:	1c5a      	adds	r2, r3, #1
 8009b52:	d13f      	bne.n	8009bd4 <_printf_float+0x17c>
 8009b54:	2306      	movs	r3, #6
 8009b56:	6063      	str	r3, [r4, #4]
 8009b58:	9b05      	ldr	r3, [sp, #20]
 8009b5a:	6861      	ldr	r1, [r4, #4]
 8009b5c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009b60:	2300      	movs	r3, #0
 8009b62:	9303      	str	r3, [sp, #12]
 8009b64:	ab0a      	add	r3, sp, #40	; 0x28
 8009b66:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009b6a:	ab09      	add	r3, sp, #36	; 0x24
 8009b6c:	ec49 8b10 	vmov	d0, r8, r9
 8009b70:	9300      	str	r3, [sp, #0]
 8009b72:	6022      	str	r2, [r4, #0]
 8009b74:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009b78:	4628      	mov	r0, r5
 8009b7a:	f7ff fecd 	bl	8009918 <__cvt>
 8009b7e:	9b06      	ldr	r3, [sp, #24]
 8009b80:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009b82:	2b47      	cmp	r3, #71	; 0x47
 8009b84:	4680      	mov	r8, r0
 8009b86:	d108      	bne.n	8009b9a <_printf_float+0x142>
 8009b88:	1cc8      	adds	r0, r1, #3
 8009b8a:	db02      	blt.n	8009b92 <_printf_float+0x13a>
 8009b8c:	6863      	ldr	r3, [r4, #4]
 8009b8e:	4299      	cmp	r1, r3
 8009b90:	dd41      	ble.n	8009c16 <_printf_float+0x1be>
 8009b92:	f1ab 0b02 	sub.w	fp, fp, #2
 8009b96:	fa5f fb8b 	uxtb.w	fp, fp
 8009b9a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009b9e:	d820      	bhi.n	8009be2 <_printf_float+0x18a>
 8009ba0:	3901      	subs	r1, #1
 8009ba2:	465a      	mov	r2, fp
 8009ba4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009ba8:	9109      	str	r1, [sp, #36]	; 0x24
 8009baa:	f7ff ff17 	bl	80099dc <__exponent>
 8009bae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009bb0:	1813      	adds	r3, r2, r0
 8009bb2:	2a01      	cmp	r2, #1
 8009bb4:	4681      	mov	r9, r0
 8009bb6:	6123      	str	r3, [r4, #16]
 8009bb8:	dc02      	bgt.n	8009bc0 <_printf_float+0x168>
 8009bba:	6822      	ldr	r2, [r4, #0]
 8009bbc:	07d2      	lsls	r2, r2, #31
 8009bbe:	d501      	bpl.n	8009bc4 <_printf_float+0x16c>
 8009bc0:	3301      	adds	r3, #1
 8009bc2:	6123      	str	r3, [r4, #16]
 8009bc4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d09c      	beq.n	8009b06 <_printf_float+0xae>
 8009bcc:	232d      	movs	r3, #45	; 0x2d
 8009bce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bd2:	e798      	b.n	8009b06 <_printf_float+0xae>
 8009bd4:	9a06      	ldr	r2, [sp, #24]
 8009bd6:	2a47      	cmp	r2, #71	; 0x47
 8009bd8:	d1be      	bne.n	8009b58 <_printf_float+0x100>
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d1bc      	bne.n	8009b58 <_printf_float+0x100>
 8009bde:	2301      	movs	r3, #1
 8009be0:	e7b9      	b.n	8009b56 <_printf_float+0xfe>
 8009be2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009be6:	d118      	bne.n	8009c1a <_printf_float+0x1c2>
 8009be8:	2900      	cmp	r1, #0
 8009bea:	6863      	ldr	r3, [r4, #4]
 8009bec:	dd0b      	ble.n	8009c06 <_printf_float+0x1ae>
 8009bee:	6121      	str	r1, [r4, #16]
 8009bf0:	b913      	cbnz	r3, 8009bf8 <_printf_float+0x1a0>
 8009bf2:	6822      	ldr	r2, [r4, #0]
 8009bf4:	07d0      	lsls	r0, r2, #31
 8009bf6:	d502      	bpl.n	8009bfe <_printf_float+0x1a6>
 8009bf8:	3301      	adds	r3, #1
 8009bfa:	440b      	add	r3, r1
 8009bfc:	6123      	str	r3, [r4, #16]
 8009bfe:	65a1      	str	r1, [r4, #88]	; 0x58
 8009c00:	f04f 0900 	mov.w	r9, #0
 8009c04:	e7de      	b.n	8009bc4 <_printf_float+0x16c>
 8009c06:	b913      	cbnz	r3, 8009c0e <_printf_float+0x1b6>
 8009c08:	6822      	ldr	r2, [r4, #0]
 8009c0a:	07d2      	lsls	r2, r2, #31
 8009c0c:	d501      	bpl.n	8009c12 <_printf_float+0x1ba>
 8009c0e:	3302      	adds	r3, #2
 8009c10:	e7f4      	b.n	8009bfc <_printf_float+0x1a4>
 8009c12:	2301      	movs	r3, #1
 8009c14:	e7f2      	b.n	8009bfc <_printf_float+0x1a4>
 8009c16:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009c1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c1c:	4299      	cmp	r1, r3
 8009c1e:	db05      	blt.n	8009c2c <_printf_float+0x1d4>
 8009c20:	6823      	ldr	r3, [r4, #0]
 8009c22:	6121      	str	r1, [r4, #16]
 8009c24:	07d8      	lsls	r0, r3, #31
 8009c26:	d5ea      	bpl.n	8009bfe <_printf_float+0x1a6>
 8009c28:	1c4b      	adds	r3, r1, #1
 8009c2a:	e7e7      	b.n	8009bfc <_printf_float+0x1a4>
 8009c2c:	2900      	cmp	r1, #0
 8009c2e:	bfd4      	ite	le
 8009c30:	f1c1 0202 	rsble	r2, r1, #2
 8009c34:	2201      	movgt	r2, #1
 8009c36:	4413      	add	r3, r2
 8009c38:	e7e0      	b.n	8009bfc <_printf_float+0x1a4>
 8009c3a:	6823      	ldr	r3, [r4, #0]
 8009c3c:	055a      	lsls	r2, r3, #21
 8009c3e:	d407      	bmi.n	8009c50 <_printf_float+0x1f8>
 8009c40:	6923      	ldr	r3, [r4, #16]
 8009c42:	4642      	mov	r2, r8
 8009c44:	4631      	mov	r1, r6
 8009c46:	4628      	mov	r0, r5
 8009c48:	47b8      	blx	r7
 8009c4a:	3001      	adds	r0, #1
 8009c4c:	d12c      	bne.n	8009ca8 <_printf_float+0x250>
 8009c4e:	e764      	b.n	8009b1a <_printf_float+0xc2>
 8009c50:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009c54:	f240 80e0 	bls.w	8009e18 <_printf_float+0x3c0>
 8009c58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	2300      	movs	r3, #0
 8009c60:	f7f6 ff32 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c64:	2800      	cmp	r0, #0
 8009c66:	d034      	beq.n	8009cd2 <_printf_float+0x27a>
 8009c68:	4a37      	ldr	r2, [pc, #220]	; (8009d48 <_printf_float+0x2f0>)
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	4631      	mov	r1, r6
 8009c6e:	4628      	mov	r0, r5
 8009c70:	47b8      	blx	r7
 8009c72:	3001      	adds	r0, #1
 8009c74:	f43f af51 	beq.w	8009b1a <_printf_float+0xc2>
 8009c78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c7c:	429a      	cmp	r2, r3
 8009c7e:	db02      	blt.n	8009c86 <_printf_float+0x22e>
 8009c80:	6823      	ldr	r3, [r4, #0]
 8009c82:	07d8      	lsls	r0, r3, #31
 8009c84:	d510      	bpl.n	8009ca8 <_printf_float+0x250>
 8009c86:	ee18 3a10 	vmov	r3, s16
 8009c8a:	4652      	mov	r2, sl
 8009c8c:	4631      	mov	r1, r6
 8009c8e:	4628      	mov	r0, r5
 8009c90:	47b8      	blx	r7
 8009c92:	3001      	adds	r0, #1
 8009c94:	f43f af41 	beq.w	8009b1a <_printf_float+0xc2>
 8009c98:	f04f 0800 	mov.w	r8, #0
 8009c9c:	f104 091a 	add.w	r9, r4, #26
 8009ca0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ca2:	3b01      	subs	r3, #1
 8009ca4:	4543      	cmp	r3, r8
 8009ca6:	dc09      	bgt.n	8009cbc <_printf_float+0x264>
 8009ca8:	6823      	ldr	r3, [r4, #0]
 8009caa:	079b      	lsls	r3, r3, #30
 8009cac:	f100 8105 	bmi.w	8009eba <_printf_float+0x462>
 8009cb0:	68e0      	ldr	r0, [r4, #12]
 8009cb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009cb4:	4298      	cmp	r0, r3
 8009cb6:	bfb8      	it	lt
 8009cb8:	4618      	movlt	r0, r3
 8009cba:	e730      	b.n	8009b1e <_printf_float+0xc6>
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	464a      	mov	r2, r9
 8009cc0:	4631      	mov	r1, r6
 8009cc2:	4628      	mov	r0, r5
 8009cc4:	47b8      	blx	r7
 8009cc6:	3001      	adds	r0, #1
 8009cc8:	f43f af27 	beq.w	8009b1a <_printf_float+0xc2>
 8009ccc:	f108 0801 	add.w	r8, r8, #1
 8009cd0:	e7e6      	b.n	8009ca0 <_printf_float+0x248>
 8009cd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	dc39      	bgt.n	8009d4c <_printf_float+0x2f4>
 8009cd8:	4a1b      	ldr	r2, [pc, #108]	; (8009d48 <_printf_float+0x2f0>)
 8009cda:	2301      	movs	r3, #1
 8009cdc:	4631      	mov	r1, r6
 8009cde:	4628      	mov	r0, r5
 8009ce0:	47b8      	blx	r7
 8009ce2:	3001      	adds	r0, #1
 8009ce4:	f43f af19 	beq.w	8009b1a <_printf_float+0xc2>
 8009ce8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009cec:	4313      	orrs	r3, r2
 8009cee:	d102      	bne.n	8009cf6 <_printf_float+0x29e>
 8009cf0:	6823      	ldr	r3, [r4, #0]
 8009cf2:	07d9      	lsls	r1, r3, #31
 8009cf4:	d5d8      	bpl.n	8009ca8 <_printf_float+0x250>
 8009cf6:	ee18 3a10 	vmov	r3, s16
 8009cfa:	4652      	mov	r2, sl
 8009cfc:	4631      	mov	r1, r6
 8009cfe:	4628      	mov	r0, r5
 8009d00:	47b8      	blx	r7
 8009d02:	3001      	adds	r0, #1
 8009d04:	f43f af09 	beq.w	8009b1a <_printf_float+0xc2>
 8009d08:	f04f 0900 	mov.w	r9, #0
 8009d0c:	f104 0a1a 	add.w	sl, r4, #26
 8009d10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d12:	425b      	negs	r3, r3
 8009d14:	454b      	cmp	r3, r9
 8009d16:	dc01      	bgt.n	8009d1c <_printf_float+0x2c4>
 8009d18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d1a:	e792      	b.n	8009c42 <_printf_float+0x1ea>
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	4652      	mov	r2, sl
 8009d20:	4631      	mov	r1, r6
 8009d22:	4628      	mov	r0, r5
 8009d24:	47b8      	blx	r7
 8009d26:	3001      	adds	r0, #1
 8009d28:	f43f aef7 	beq.w	8009b1a <_printf_float+0xc2>
 8009d2c:	f109 0901 	add.w	r9, r9, #1
 8009d30:	e7ee      	b.n	8009d10 <_printf_float+0x2b8>
 8009d32:	bf00      	nop
 8009d34:	7fefffff 	.word	0x7fefffff
 8009d38:	0800e50c 	.word	0x0800e50c
 8009d3c:	0800e510 	.word	0x0800e510
 8009d40:	0800e518 	.word	0x0800e518
 8009d44:	0800e514 	.word	0x0800e514
 8009d48:	0800e51c 	.word	0x0800e51c
 8009d4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009d50:	429a      	cmp	r2, r3
 8009d52:	bfa8      	it	ge
 8009d54:	461a      	movge	r2, r3
 8009d56:	2a00      	cmp	r2, #0
 8009d58:	4691      	mov	r9, r2
 8009d5a:	dc37      	bgt.n	8009dcc <_printf_float+0x374>
 8009d5c:	f04f 0b00 	mov.w	fp, #0
 8009d60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009d64:	f104 021a 	add.w	r2, r4, #26
 8009d68:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009d6a:	9305      	str	r3, [sp, #20]
 8009d6c:	eba3 0309 	sub.w	r3, r3, r9
 8009d70:	455b      	cmp	r3, fp
 8009d72:	dc33      	bgt.n	8009ddc <_printf_float+0x384>
 8009d74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d78:	429a      	cmp	r2, r3
 8009d7a:	db3b      	blt.n	8009df4 <_printf_float+0x39c>
 8009d7c:	6823      	ldr	r3, [r4, #0]
 8009d7e:	07da      	lsls	r2, r3, #31
 8009d80:	d438      	bmi.n	8009df4 <_printf_float+0x39c>
 8009d82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d84:	9a05      	ldr	r2, [sp, #20]
 8009d86:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d88:	1a9a      	subs	r2, r3, r2
 8009d8a:	eba3 0901 	sub.w	r9, r3, r1
 8009d8e:	4591      	cmp	r9, r2
 8009d90:	bfa8      	it	ge
 8009d92:	4691      	movge	r9, r2
 8009d94:	f1b9 0f00 	cmp.w	r9, #0
 8009d98:	dc35      	bgt.n	8009e06 <_printf_float+0x3ae>
 8009d9a:	f04f 0800 	mov.w	r8, #0
 8009d9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009da2:	f104 0a1a 	add.w	sl, r4, #26
 8009da6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009daa:	1a9b      	subs	r3, r3, r2
 8009dac:	eba3 0309 	sub.w	r3, r3, r9
 8009db0:	4543      	cmp	r3, r8
 8009db2:	f77f af79 	ble.w	8009ca8 <_printf_float+0x250>
 8009db6:	2301      	movs	r3, #1
 8009db8:	4652      	mov	r2, sl
 8009dba:	4631      	mov	r1, r6
 8009dbc:	4628      	mov	r0, r5
 8009dbe:	47b8      	blx	r7
 8009dc0:	3001      	adds	r0, #1
 8009dc2:	f43f aeaa 	beq.w	8009b1a <_printf_float+0xc2>
 8009dc6:	f108 0801 	add.w	r8, r8, #1
 8009dca:	e7ec      	b.n	8009da6 <_printf_float+0x34e>
 8009dcc:	4613      	mov	r3, r2
 8009dce:	4631      	mov	r1, r6
 8009dd0:	4642      	mov	r2, r8
 8009dd2:	4628      	mov	r0, r5
 8009dd4:	47b8      	blx	r7
 8009dd6:	3001      	adds	r0, #1
 8009dd8:	d1c0      	bne.n	8009d5c <_printf_float+0x304>
 8009dda:	e69e      	b.n	8009b1a <_printf_float+0xc2>
 8009ddc:	2301      	movs	r3, #1
 8009dde:	4631      	mov	r1, r6
 8009de0:	4628      	mov	r0, r5
 8009de2:	9205      	str	r2, [sp, #20]
 8009de4:	47b8      	blx	r7
 8009de6:	3001      	adds	r0, #1
 8009de8:	f43f ae97 	beq.w	8009b1a <_printf_float+0xc2>
 8009dec:	9a05      	ldr	r2, [sp, #20]
 8009dee:	f10b 0b01 	add.w	fp, fp, #1
 8009df2:	e7b9      	b.n	8009d68 <_printf_float+0x310>
 8009df4:	ee18 3a10 	vmov	r3, s16
 8009df8:	4652      	mov	r2, sl
 8009dfa:	4631      	mov	r1, r6
 8009dfc:	4628      	mov	r0, r5
 8009dfe:	47b8      	blx	r7
 8009e00:	3001      	adds	r0, #1
 8009e02:	d1be      	bne.n	8009d82 <_printf_float+0x32a>
 8009e04:	e689      	b.n	8009b1a <_printf_float+0xc2>
 8009e06:	9a05      	ldr	r2, [sp, #20]
 8009e08:	464b      	mov	r3, r9
 8009e0a:	4442      	add	r2, r8
 8009e0c:	4631      	mov	r1, r6
 8009e0e:	4628      	mov	r0, r5
 8009e10:	47b8      	blx	r7
 8009e12:	3001      	adds	r0, #1
 8009e14:	d1c1      	bne.n	8009d9a <_printf_float+0x342>
 8009e16:	e680      	b.n	8009b1a <_printf_float+0xc2>
 8009e18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e1a:	2a01      	cmp	r2, #1
 8009e1c:	dc01      	bgt.n	8009e22 <_printf_float+0x3ca>
 8009e1e:	07db      	lsls	r3, r3, #31
 8009e20:	d538      	bpl.n	8009e94 <_printf_float+0x43c>
 8009e22:	2301      	movs	r3, #1
 8009e24:	4642      	mov	r2, r8
 8009e26:	4631      	mov	r1, r6
 8009e28:	4628      	mov	r0, r5
 8009e2a:	47b8      	blx	r7
 8009e2c:	3001      	adds	r0, #1
 8009e2e:	f43f ae74 	beq.w	8009b1a <_printf_float+0xc2>
 8009e32:	ee18 3a10 	vmov	r3, s16
 8009e36:	4652      	mov	r2, sl
 8009e38:	4631      	mov	r1, r6
 8009e3a:	4628      	mov	r0, r5
 8009e3c:	47b8      	blx	r7
 8009e3e:	3001      	adds	r0, #1
 8009e40:	f43f ae6b 	beq.w	8009b1a <_printf_float+0xc2>
 8009e44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009e48:	2200      	movs	r2, #0
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	f7f6 fe3c 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e50:	b9d8      	cbnz	r0, 8009e8a <_printf_float+0x432>
 8009e52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e54:	f108 0201 	add.w	r2, r8, #1
 8009e58:	3b01      	subs	r3, #1
 8009e5a:	4631      	mov	r1, r6
 8009e5c:	4628      	mov	r0, r5
 8009e5e:	47b8      	blx	r7
 8009e60:	3001      	adds	r0, #1
 8009e62:	d10e      	bne.n	8009e82 <_printf_float+0x42a>
 8009e64:	e659      	b.n	8009b1a <_printf_float+0xc2>
 8009e66:	2301      	movs	r3, #1
 8009e68:	4652      	mov	r2, sl
 8009e6a:	4631      	mov	r1, r6
 8009e6c:	4628      	mov	r0, r5
 8009e6e:	47b8      	blx	r7
 8009e70:	3001      	adds	r0, #1
 8009e72:	f43f ae52 	beq.w	8009b1a <_printf_float+0xc2>
 8009e76:	f108 0801 	add.w	r8, r8, #1
 8009e7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e7c:	3b01      	subs	r3, #1
 8009e7e:	4543      	cmp	r3, r8
 8009e80:	dcf1      	bgt.n	8009e66 <_printf_float+0x40e>
 8009e82:	464b      	mov	r3, r9
 8009e84:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009e88:	e6dc      	b.n	8009c44 <_printf_float+0x1ec>
 8009e8a:	f04f 0800 	mov.w	r8, #0
 8009e8e:	f104 0a1a 	add.w	sl, r4, #26
 8009e92:	e7f2      	b.n	8009e7a <_printf_float+0x422>
 8009e94:	2301      	movs	r3, #1
 8009e96:	4642      	mov	r2, r8
 8009e98:	e7df      	b.n	8009e5a <_printf_float+0x402>
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	464a      	mov	r2, r9
 8009e9e:	4631      	mov	r1, r6
 8009ea0:	4628      	mov	r0, r5
 8009ea2:	47b8      	blx	r7
 8009ea4:	3001      	adds	r0, #1
 8009ea6:	f43f ae38 	beq.w	8009b1a <_printf_float+0xc2>
 8009eaa:	f108 0801 	add.w	r8, r8, #1
 8009eae:	68e3      	ldr	r3, [r4, #12]
 8009eb0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009eb2:	1a5b      	subs	r3, r3, r1
 8009eb4:	4543      	cmp	r3, r8
 8009eb6:	dcf0      	bgt.n	8009e9a <_printf_float+0x442>
 8009eb8:	e6fa      	b.n	8009cb0 <_printf_float+0x258>
 8009eba:	f04f 0800 	mov.w	r8, #0
 8009ebe:	f104 0919 	add.w	r9, r4, #25
 8009ec2:	e7f4      	b.n	8009eae <_printf_float+0x456>

08009ec4 <_printf_common>:
 8009ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ec8:	4616      	mov	r6, r2
 8009eca:	4699      	mov	r9, r3
 8009ecc:	688a      	ldr	r2, [r1, #8]
 8009ece:	690b      	ldr	r3, [r1, #16]
 8009ed0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	bfb8      	it	lt
 8009ed8:	4613      	movlt	r3, r2
 8009eda:	6033      	str	r3, [r6, #0]
 8009edc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ee0:	4607      	mov	r7, r0
 8009ee2:	460c      	mov	r4, r1
 8009ee4:	b10a      	cbz	r2, 8009eea <_printf_common+0x26>
 8009ee6:	3301      	adds	r3, #1
 8009ee8:	6033      	str	r3, [r6, #0]
 8009eea:	6823      	ldr	r3, [r4, #0]
 8009eec:	0699      	lsls	r1, r3, #26
 8009eee:	bf42      	ittt	mi
 8009ef0:	6833      	ldrmi	r3, [r6, #0]
 8009ef2:	3302      	addmi	r3, #2
 8009ef4:	6033      	strmi	r3, [r6, #0]
 8009ef6:	6825      	ldr	r5, [r4, #0]
 8009ef8:	f015 0506 	ands.w	r5, r5, #6
 8009efc:	d106      	bne.n	8009f0c <_printf_common+0x48>
 8009efe:	f104 0a19 	add.w	sl, r4, #25
 8009f02:	68e3      	ldr	r3, [r4, #12]
 8009f04:	6832      	ldr	r2, [r6, #0]
 8009f06:	1a9b      	subs	r3, r3, r2
 8009f08:	42ab      	cmp	r3, r5
 8009f0a:	dc26      	bgt.n	8009f5a <_printf_common+0x96>
 8009f0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009f10:	1e13      	subs	r3, r2, #0
 8009f12:	6822      	ldr	r2, [r4, #0]
 8009f14:	bf18      	it	ne
 8009f16:	2301      	movne	r3, #1
 8009f18:	0692      	lsls	r2, r2, #26
 8009f1a:	d42b      	bmi.n	8009f74 <_printf_common+0xb0>
 8009f1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009f20:	4649      	mov	r1, r9
 8009f22:	4638      	mov	r0, r7
 8009f24:	47c0      	blx	r8
 8009f26:	3001      	adds	r0, #1
 8009f28:	d01e      	beq.n	8009f68 <_printf_common+0xa4>
 8009f2a:	6823      	ldr	r3, [r4, #0]
 8009f2c:	68e5      	ldr	r5, [r4, #12]
 8009f2e:	6832      	ldr	r2, [r6, #0]
 8009f30:	f003 0306 	and.w	r3, r3, #6
 8009f34:	2b04      	cmp	r3, #4
 8009f36:	bf08      	it	eq
 8009f38:	1aad      	subeq	r5, r5, r2
 8009f3a:	68a3      	ldr	r3, [r4, #8]
 8009f3c:	6922      	ldr	r2, [r4, #16]
 8009f3e:	bf0c      	ite	eq
 8009f40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f44:	2500      	movne	r5, #0
 8009f46:	4293      	cmp	r3, r2
 8009f48:	bfc4      	itt	gt
 8009f4a:	1a9b      	subgt	r3, r3, r2
 8009f4c:	18ed      	addgt	r5, r5, r3
 8009f4e:	2600      	movs	r6, #0
 8009f50:	341a      	adds	r4, #26
 8009f52:	42b5      	cmp	r5, r6
 8009f54:	d11a      	bne.n	8009f8c <_printf_common+0xc8>
 8009f56:	2000      	movs	r0, #0
 8009f58:	e008      	b.n	8009f6c <_printf_common+0xa8>
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	4652      	mov	r2, sl
 8009f5e:	4649      	mov	r1, r9
 8009f60:	4638      	mov	r0, r7
 8009f62:	47c0      	blx	r8
 8009f64:	3001      	adds	r0, #1
 8009f66:	d103      	bne.n	8009f70 <_printf_common+0xac>
 8009f68:	f04f 30ff 	mov.w	r0, #4294967295
 8009f6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f70:	3501      	adds	r5, #1
 8009f72:	e7c6      	b.n	8009f02 <_printf_common+0x3e>
 8009f74:	18e1      	adds	r1, r4, r3
 8009f76:	1c5a      	adds	r2, r3, #1
 8009f78:	2030      	movs	r0, #48	; 0x30
 8009f7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009f7e:	4422      	add	r2, r4
 8009f80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009f84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009f88:	3302      	adds	r3, #2
 8009f8a:	e7c7      	b.n	8009f1c <_printf_common+0x58>
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	4622      	mov	r2, r4
 8009f90:	4649      	mov	r1, r9
 8009f92:	4638      	mov	r0, r7
 8009f94:	47c0      	blx	r8
 8009f96:	3001      	adds	r0, #1
 8009f98:	d0e6      	beq.n	8009f68 <_printf_common+0xa4>
 8009f9a:	3601      	adds	r6, #1
 8009f9c:	e7d9      	b.n	8009f52 <_printf_common+0x8e>
	...

08009fa0 <_printf_i>:
 8009fa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009fa4:	7e0f      	ldrb	r7, [r1, #24]
 8009fa6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009fa8:	2f78      	cmp	r7, #120	; 0x78
 8009faa:	4691      	mov	r9, r2
 8009fac:	4680      	mov	r8, r0
 8009fae:	460c      	mov	r4, r1
 8009fb0:	469a      	mov	sl, r3
 8009fb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009fb6:	d807      	bhi.n	8009fc8 <_printf_i+0x28>
 8009fb8:	2f62      	cmp	r7, #98	; 0x62
 8009fba:	d80a      	bhi.n	8009fd2 <_printf_i+0x32>
 8009fbc:	2f00      	cmp	r7, #0
 8009fbe:	f000 80d8 	beq.w	800a172 <_printf_i+0x1d2>
 8009fc2:	2f58      	cmp	r7, #88	; 0x58
 8009fc4:	f000 80a3 	beq.w	800a10e <_printf_i+0x16e>
 8009fc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009fcc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009fd0:	e03a      	b.n	800a048 <_printf_i+0xa8>
 8009fd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009fd6:	2b15      	cmp	r3, #21
 8009fd8:	d8f6      	bhi.n	8009fc8 <_printf_i+0x28>
 8009fda:	a101      	add	r1, pc, #4	; (adr r1, 8009fe0 <_printf_i+0x40>)
 8009fdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009fe0:	0800a039 	.word	0x0800a039
 8009fe4:	0800a04d 	.word	0x0800a04d
 8009fe8:	08009fc9 	.word	0x08009fc9
 8009fec:	08009fc9 	.word	0x08009fc9
 8009ff0:	08009fc9 	.word	0x08009fc9
 8009ff4:	08009fc9 	.word	0x08009fc9
 8009ff8:	0800a04d 	.word	0x0800a04d
 8009ffc:	08009fc9 	.word	0x08009fc9
 800a000:	08009fc9 	.word	0x08009fc9
 800a004:	08009fc9 	.word	0x08009fc9
 800a008:	08009fc9 	.word	0x08009fc9
 800a00c:	0800a159 	.word	0x0800a159
 800a010:	0800a07d 	.word	0x0800a07d
 800a014:	0800a13b 	.word	0x0800a13b
 800a018:	08009fc9 	.word	0x08009fc9
 800a01c:	08009fc9 	.word	0x08009fc9
 800a020:	0800a17b 	.word	0x0800a17b
 800a024:	08009fc9 	.word	0x08009fc9
 800a028:	0800a07d 	.word	0x0800a07d
 800a02c:	08009fc9 	.word	0x08009fc9
 800a030:	08009fc9 	.word	0x08009fc9
 800a034:	0800a143 	.word	0x0800a143
 800a038:	682b      	ldr	r3, [r5, #0]
 800a03a:	1d1a      	adds	r2, r3, #4
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	602a      	str	r2, [r5, #0]
 800a040:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a044:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a048:	2301      	movs	r3, #1
 800a04a:	e0a3      	b.n	800a194 <_printf_i+0x1f4>
 800a04c:	6820      	ldr	r0, [r4, #0]
 800a04e:	6829      	ldr	r1, [r5, #0]
 800a050:	0606      	lsls	r6, r0, #24
 800a052:	f101 0304 	add.w	r3, r1, #4
 800a056:	d50a      	bpl.n	800a06e <_printf_i+0xce>
 800a058:	680e      	ldr	r6, [r1, #0]
 800a05a:	602b      	str	r3, [r5, #0]
 800a05c:	2e00      	cmp	r6, #0
 800a05e:	da03      	bge.n	800a068 <_printf_i+0xc8>
 800a060:	232d      	movs	r3, #45	; 0x2d
 800a062:	4276      	negs	r6, r6
 800a064:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a068:	485e      	ldr	r0, [pc, #376]	; (800a1e4 <_printf_i+0x244>)
 800a06a:	230a      	movs	r3, #10
 800a06c:	e019      	b.n	800a0a2 <_printf_i+0x102>
 800a06e:	680e      	ldr	r6, [r1, #0]
 800a070:	602b      	str	r3, [r5, #0]
 800a072:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a076:	bf18      	it	ne
 800a078:	b236      	sxthne	r6, r6
 800a07a:	e7ef      	b.n	800a05c <_printf_i+0xbc>
 800a07c:	682b      	ldr	r3, [r5, #0]
 800a07e:	6820      	ldr	r0, [r4, #0]
 800a080:	1d19      	adds	r1, r3, #4
 800a082:	6029      	str	r1, [r5, #0]
 800a084:	0601      	lsls	r1, r0, #24
 800a086:	d501      	bpl.n	800a08c <_printf_i+0xec>
 800a088:	681e      	ldr	r6, [r3, #0]
 800a08a:	e002      	b.n	800a092 <_printf_i+0xf2>
 800a08c:	0646      	lsls	r6, r0, #25
 800a08e:	d5fb      	bpl.n	800a088 <_printf_i+0xe8>
 800a090:	881e      	ldrh	r6, [r3, #0]
 800a092:	4854      	ldr	r0, [pc, #336]	; (800a1e4 <_printf_i+0x244>)
 800a094:	2f6f      	cmp	r7, #111	; 0x6f
 800a096:	bf0c      	ite	eq
 800a098:	2308      	moveq	r3, #8
 800a09a:	230a      	movne	r3, #10
 800a09c:	2100      	movs	r1, #0
 800a09e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a0a2:	6865      	ldr	r5, [r4, #4]
 800a0a4:	60a5      	str	r5, [r4, #8]
 800a0a6:	2d00      	cmp	r5, #0
 800a0a8:	bfa2      	ittt	ge
 800a0aa:	6821      	ldrge	r1, [r4, #0]
 800a0ac:	f021 0104 	bicge.w	r1, r1, #4
 800a0b0:	6021      	strge	r1, [r4, #0]
 800a0b2:	b90e      	cbnz	r6, 800a0b8 <_printf_i+0x118>
 800a0b4:	2d00      	cmp	r5, #0
 800a0b6:	d04d      	beq.n	800a154 <_printf_i+0x1b4>
 800a0b8:	4615      	mov	r5, r2
 800a0ba:	fbb6 f1f3 	udiv	r1, r6, r3
 800a0be:	fb03 6711 	mls	r7, r3, r1, r6
 800a0c2:	5dc7      	ldrb	r7, [r0, r7]
 800a0c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a0c8:	4637      	mov	r7, r6
 800a0ca:	42bb      	cmp	r3, r7
 800a0cc:	460e      	mov	r6, r1
 800a0ce:	d9f4      	bls.n	800a0ba <_printf_i+0x11a>
 800a0d0:	2b08      	cmp	r3, #8
 800a0d2:	d10b      	bne.n	800a0ec <_printf_i+0x14c>
 800a0d4:	6823      	ldr	r3, [r4, #0]
 800a0d6:	07de      	lsls	r6, r3, #31
 800a0d8:	d508      	bpl.n	800a0ec <_printf_i+0x14c>
 800a0da:	6923      	ldr	r3, [r4, #16]
 800a0dc:	6861      	ldr	r1, [r4, #4]
 800a0de:	4299      	cmp	r1, r3
 800a0e0:	bfde      	ittt	le
 800a0e2:	2330      	movle	r3, #48	; 0x30
 800a0e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a0e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a0ec:	1b52      	subs	r2, r2, r5
 800a0ee:	6122      	str	r2, [r4, #16]
 800a0f0:	f8cd a000 	str.w	sl, [sp]
 800a0f4:	464b      	mov	r3, r9
 800a0f6:	aa03      	add	r2, sp, #12
 800a0f8:	4621      	mov	r1, r4
 800a0fa:	4640      	mov	r0, r8
 800a0fc:	f7ff fee2 	bl	8009ec4 <_printf_common>
 800a100:	3001      	adds	r0, #1
 800a102:	d14c      	bne.n	800a19e <_printf_i+0x1fe>
 800a104:	f04f 30ff 	mov.w	r0, #4294967295
 800a108:	b004      	add	sp, #16
 800a10a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a10e:	4835      	ldr	r0, [pc, #212]	; (800a1e4 <_printf_i+0x244>)
 800a110:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a114:	6829      	ldr	r1, [r5, #0]
 800a116:	6823      	ldr	r3, [r4, #0]
 800a118:	f851 6b04 	ldr.w	r6, [r1], #4
 800a11c:	6029      	str	r1, [r5, #0]
 800a11e:	061d      	lsls	r5, r3, #24
 800a120:	d514      	bpl.n	800a14c <_printf_i+0x1ac>
 800a122:	07df      	lsls	r7, r3, #31
 800a124:	bf44      	itt	mi
 800a126:	f043 0320 	orrmi.w	r3, r3, #32
 800a12a:	6023      	strmi	r3, [r4, #0]
 800a12c:	b91e      	cbnz	r6, 800a136 <_printf_i+0x196>
 800a12e:	6823      	ldr	r3, [r4, #0]
 800a130:	f023 0320 	bic.w	r3, r3, #32
 800a134:	6023      	str	r3, [r4, #0]
 800a136:	2310      	movs	r3, #16
 800a138:	e7b0      	b.n	800a09c <_printf_i+0xfc>
 800a13a:	6823      	ldr	r3, [r4, #0]
 800a13c:	f043 0320 	orr.w	r3, r3, #32
 800a140:	6023      	str	r3, [r4, #0]
 800a142:	2378      	movs	r3, #120	; 0x78
 800a144:	4828      	ldr	r0, [pc, #160]	; (800a1e8 <_printf_i+0x248>)
 800a146:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a14a:	e7e3      	b.n	800a114 <_printf_i+0x174>
 800a14c:	0659      	lsls	r1, r3, #25
 800a14e:	bf48      	it	mi
 800a150:	b2b6      	uxthmi	r6, r6
 800a152:	e7e6      	b.n	800a122 <_printf_i+0x182>
 800a154:	4615      	mov	r5, r2
 800a156:	e7bb      	b.n	800a0d0 <_printf_i+0x130>
 800a158:	682b      	ldr	r3, [r5, #0]
 800a15a:	6826      	ldr	r6, [r4, #0]
 800a15c:	6961      	ldr	r1, [r4, #20]
 800a15e:	1d18      	adds	r0, r3, #4
 800a160:	6028      	str	r0, [r5, #0]
 800a162:	0635      	lsls	r5, r6, #24
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	d501      	bpl.n	800a16c <_printf_i+0x1cc>
 800a168:	6019      	str	r1, [r3, #0]
 800a16a:	e002      	b.n	800a172 <_printf_i+0x1d2>
 800a16c:	0670      	lsls	r0, r6, #25
 800a16e:	d5fb      	bpl.n	800a168 <_printf_i+0x1c8>
 800a170:	8019      	strh	r1, [r3, #0]
 800a172:	2300      	movs	r3, #0
 800a174:	6123      	str	r3, [r4, #16]
 800a176:	4615      	mov	r5, r2
 800a178:	e7ba      	b.n	800a0f0 <_printf_i+0x150>
 800a17a:	682b      	ldr	r3, [r5, #0]
 800a17c:	1d1a      	adds	r2, r3, #4
 800a17e:	602a      	str	r2, [r5, #0]
 800a180:	681d      	ldr	r5, [r3, #0]
 800a182:	6862      	ldr	r2, [r4, #4]
 800a184:	2100      	movs	r1, #0
 800a186:	4628      	mov	r0, r5
 800a188:	f7f6 f82a 	bl	80001e0 <memchr>
 800a18c:	b108      	cbz	r0, 800a192 <_printf_i+0x1f2>
 800a18e:	1b40      	subs	r0, r0, r5
 800a190:	6060      	str	r0, [r4, #4]
 800a192:	6863      	ldr	r3, [r4, #4]
 800a194:	6123      	str	r3, [r4, #16]
 800a196:	2300      	movs	r3, #0
 800a198:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a19c:	e7a8      	b.n	800a0f0 <_printf_i+0x150>
 800a19e:	6923      	ldr	r3, [r4, #16]
 800a1a0:	462a      	mov	r2, r5
 800a1a2:	4649      	mov	r1, r9
 800a1a4:	4640      	mov	r0, r8
 800a1a6:	47d0      	blx	sl
 800a1a8:	3001      	adds	r0, #1
 800a1aa:	d0ab      	beq.n	800a104 <_printf_i+0x164>
 800a1ac:	6823      	ldr	r3, [r4, #0]
 800a1ae:	079b      	lsls	r3, r3, #30
 800a1b0:	d413      	bmi.n	800a1da <_printf_i+0x23a>
 800a1b2:	68e0      	ldr	r0, [r4, #12]
 800a1b4:	9b03      	ldr	r3, [sp, #12]
 800a1b6:	4298      	cmp	r0, r3
 800a1b8:	bfb8      	it	lt
 800a1ba:	4618      	movlt	r0, r3
 800a1bc:	e7a4      	b.n	800a108 <_printf_i+0x168>
 800a1be:	2301      	movs	r3, #1
 800a1c0:	4632      	mov	r2, r6
 800a1c2:	4649      	mov	r1, r9
 800a1c4:	4640      	mov	r0, r8
 800a1c6:	47d0      	blx	sl
 800a1c8:	3001      	adds	r0, #1
 800a1ca:	d09b      	beq.n	800a104 <_printf_i+0x164>
 800a1cc:	3501      	adds	r5, #1
 800a1ce:	68e3      	ldr	r3, [r4, #12]
 800a1d0:	9903      	ldr	r1, [sp, #12]
 800a1d2:	1a5b      	subs	r3, r3, r1
 800a1d4:	42ab      	cmp	r3, r5
 800a1d6:	dcf2      	bgt.n	800a1be <_printf_i+0x21e>
 800a1d8:	e7eb      	b.n	800a1b2 <_printf_i+0x212>
 800a1da:	2500      	movs	r5, #0
 800a1dc:	f104 0619 	add.w	r6, r4, #25
 800a1e0:	e7f5      	b.n	800a1ce <_printf_i+0x22e>
 800a1e2:	bf00      	nop
 800a1e4:	0800e51e 	.word	0x0800e51e
 800a1e8:	0800e52f 	.word	0x0800e52f

0800a1ec <_scanf_float>:
 800a1ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1f0:	b087      	sub	sp, #28
 800a1f2:	4617      	mov	r7, r2
 800a1f4:	9303      	str	r3, [sp, #12]
 800a1f6:	688b      	ldr	r3, [r1, #8]
 800a1f8:	1e5a      	subs	r2, r3, #1
 800a1fa:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a1fe:	bf83      	ittte	hi
 800a200:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a204:	195b      	addhi	r3, r3, r5
 800a206:	9302      	strhi	r3, [sp, #8]
 800a208:	2300      	movls	r3, #0
 800a20a:	bf86      	itte	hi
 800a20c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a210:	608b      	strhi	r3, [r1, #8]
 800a212:	9302      	strls	r3, [sp, #8]
 800a214:	680b      	ldr	r3, [r1, #0]
 800a216:	468b      	mov	fp, r1
 800a218:	2500      	movs	r5, #0
 800a21a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a21e:	f84b 3b1c 	str.w	r3, [fp], #28
 800a222:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a226:	4680      	mov	r8, r0
 800a228:	460c      	mov	r4, r1
 800a22a:	465e      	mov	r6, fp
 800a22c:	46aa      	mov	sl, r5
 800a22e:	46a9      	mov	r9, r5
 800a230:	9501      	str	r5, [sp, #4]
 800a232:	68a2      	ldr	r2, [r4, #8]
 800a234:	b152      	cbz	r2, 800a24c <_scanf_float+0x60>
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	781b      	ldrb	r3, [r3, #0]
 800a23a:	2b4e      	cmp	r3, #78	; 0x4e
 800a23c:	d864      	bhi.n	800a308 <_scanf_float+0x11c>
 800a23e:	2b40      	cmp	r3, #64	; 0x40
 800a240:	d83c      	bhi.n	800a2bc <_scanf_float+0xd0>
 800a242:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a246:	b2c8      	uxtb	r0, r1
 800a248:	280e      	cmp	r0, #14
 800a24a:	d93a      	bls.n	800a2c2 <_scanf_float+0xd6>
 800a24c:	f1b9 0f00 	cmp.w	r9, #0
 800a250:	d003      	beq.n	800a25a <_scanf_float+0x6e>
 800a252:	6823      	ldr	r3, [r4, #0]
 800a254:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a258:	6023      	str	r3, [r4, #0]
 800a25a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a25e:	f1ba 0f01 	cmp.w	sl, #1
 800a262:	f200 8113 	bhi.w	800a48c <_scanf_float+0x2a0>
 800a266:	455e      	cmp	r6, fp
 800a268:	f200 8105 	bhi.w	800a476 <_scanf_float+0x28a>
 800a26c:	2501      	movs	r5, #1
 800a26e:	4628      	mov	r0, r5
 800a270:	b007      	add	sp, #28
 800a272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a276:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a27a:	2a0d      	cmp	r2, #13
 800a27c:	d8e6      	bhi.n	800a24c <_scanf_float+0x60>
 800a27e:	a101      	add	r1, pc, #4	; (adr r1, 800a284 <_scanf_float+0x98>)
 800a280:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a284:	0800a3c3 	.word	0x0800a3c3
 800a288:	0800a24d 	.word	0x0800a24d
 800a28c:	0800a24d 	.word	0x0800a24d
 800a290:	0800a24d 	.word	0x0800a24d
 800a294:	0800a423 	.word	0x0800a423
 800a298:	0800a3fb 	.word	0x0800a3fb
 800a29c:	0800a24d 	.word	0x0800a24d
 800a2a0:	0800a24d 	.word	0x0800a24d
 800a2a4:	0800a3d1 	.word	0x0800a3d1
 800a2a8:	0800a24d 	.word	0x0800a24d
 800a2ac:	0800a24d 	.word	0x0800a24d
 800a2b0:	0800a24d 	.word	0x0800a24d
 800a2b4:	0800a24d 	.word	0x0800a24d
 800a2b8:	0800a389 	.word	0x0800a389
 800a2bc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a2c0:	e7db      	b.n	800a27a <_scanf_float+0x8e>
 800a2c2:	290e      	cmp	r1, #14
 800a2c4:	d8c2      	bhi.n	800a24c <_scanf_float+0x60>
 800a2c6:	a001      	add	r0, pc, #4	; (adr r0, 800a2cc <_scanf_float+0xe0>)
 800a2c8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a2cc:	0800a37b 	.word	0x0800a37b
 800a2d0:	0800a24d 	.word	0x0800a24d
 800a2d4:	0800a37b 	.word	0x0800a37b
 800a2d8:	0800a40f 	.word	0x0800a40f
 800a2dc:	0800a24d 	.word	0x0800a24d
 800a2e0:	0800a329 	.word	0x0800a329
 800a2e4:	0800a365 	.word	0x0800a365
 800a2e8:	0800a365 	.word	0x0800a365
 800a2ec:	0800a365 	.word	0x0800a365
 800a2f0:	0800a365 	.word	0x0800a365
 800a2f4:	0800a365 	.word	0x0800a365
 800a2f8:	0800a365 	.word	0x0800a365
 800a2fc:	0800a365 	.word	0x0800a365
 800a300:	0800a365 	.word	0x0800a365
 800a304:	0800a365 	.word	0x0800a365
 800a308:	2b6e      	cmp	r3, #110	; 0x6e
 800a30a:	d809      	bhi.n	800a320 <_scanf_float+0x134>
 800a30c:	2b60      	cmp	r3, #96	; 0x60
 800a30e:	d8b2      	bhi.n	800a276 <_scanf_float+0x8a>
 800a310:	2b54      	cmp	r3, #84	; 0x54
 800a312:	d077      	beq.n	800a404 <_scanf_float+0x218>
 800a314:	2b59      	cmp	r3, #89	; 0x59
 800a316:	d199      	bne.n	800a24c <_scanf_float+0x60>
 800a318:	2d07      	cmp	r5, #7
 800a31a:	d197      	bne.n	800a24c <_scanf_float+0x60>
 800a31c:	2508      	movs	r5, #8
 800a31e:	e029      	b.n	800a374 <_scanf_float+0x188>
 800a320:	2b74      	cmp	r3, #116	; 0x74
 800a322:	d06f      	beq.n	800a404 <_scanf_float+0x218>
 800a324:	2b79      	cmp	r3, #121	; 0x79
 800a326:	e7f6      	b.n	800a316 <_scanf_float+0x12a>
 800a328:	6821      	ldr	r1, [r4, #0]
 800a32a:	05c8      	lsls	r0, r1, #23
 800a32c:	d51a      	bpl.n	800a364 <_scanf_float+0x178>
 800a32e:	9b02      	ldr	r3, [sp, #8]
 800a330:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a334:	6021      	str	r1, [r4, #0]
 800a336:	f109 0901 	add.w	r9, r9, #1
 800a33a:	b11b      	cbz	r3, 800a344 <_scanf_float+0x158>
 800a33c:	3b01      	subs	r3, #1
 800a33e:	3201      	adds	r2, #1
 800a340:	9302      	str	r3, [sp, #8]
 800a342:	60a2      	str	r2, [r4, #8]
 800a344:	68a3      	ldr	r3, [r4, #8]
 800a346:	3b01      	subs	r3, #1
 800a348:	60a3      	str	r3, [r4, #8]
 800a34a:	6923      	ldr	r3, [r4, #16]
 800a34c:	3301      	adds	r3, #1
 800a34e:	6123      	str	r3, [r4, #16]
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	3b01      	subs	r3, #1
 800a354:	2b00      	cmp	r3, #0
 800a356:	607b      	str	r3, [r7, #4]
 800a358:	f340 8084 	ble.w	800a464 <_scanf_float+0x278>
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	3301      	adds	r3, #1
 800a360:	603b      	str	r3, [r7, #0]
 800a362:	e766      	b.n	800a232 <_scanf_float+0x46>
 800a364:	eb1a 0f05 	cmn.w	sl, r5
 800a368:	f47f af70 	bne.w	800a24c <_scanf_float+0x60>
 800a36c:	6822      	ldr	r2, [r4, #0]
 800a36e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a372:	6022      	str	r2, [r4, #0]
 800a374:	f806 3b01 	strb.w	r3, [r6], #1
 800a378:	e7e4      	b.n	800a344 <_scanf_float+0x158>
 800a37a:	6822      	ldr	r2, [r4, #0]
 800a37c:	0610      	lsls	r0, r2, #24
 800a37e:	f57f af65 	bpl.w	800a24c <_scanf_float+0x60>
 800a382:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a386:	e7f4      	b.n	800a372 <_scanf_float+0x186>
 800a388:	f1ba 0f00 	cmp.w	sl, #0
 800a38c:	d10e      	bne.n	800a3ac <_scanf_float+0x1c0>
 800a38e:	f1b9 0f00 	cmp.w	r9, #0
 800a392:	d10e      	bne.n	800a3b2 <_scanf_float+0x1c6>
 800a394:	6822      	ldr	r2, [r4, #0]
 800a396:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a39a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a39e:	d108      	bne.n	800a3b2 <_scanf_float+0x1c6>
 800a3a0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a3a4:	6022      	str	r2, [r4, #0]
 800a3a6:	f04f 0a01 	mov.w	sl, #1
 800a3aa:	e7e3      	b.n	800a374 <_scanf_float+0x188>
 800a3ac:	f1ba 0f02 	cmp.w	sl, #2
 800a3b0:	d055      	beq.n	800a45e <_scanf_float+0x272>
 800a3b2:	2d01      	cmp	r5, #1
 800a3b4:	d002      	beq.n	800a3bc <_scanf_float+0x1d0>
 800a3b6:	2d04      	cmp	r5, #4
 800a3b8:	f47f af48 	bne.w	800a24c <_scanf_float+0x60>
 800a3bc:	3501      	adds	r5, #1
 800a3be:	b2ed      	uxtb	r5, r5
 800a3c0:	e7d8      	b.n	800a374 <_scanf_float+0x188>
 800a3c2:	f1ba 0f01 	cmp.w	sl, #1
 800a3c6:	f47f af41 	bne.w	800a24c <_scanf_float+0x60>
 800a3ca:	f04f 0a02 	mov.w	sl, #2
 800a3ce:	e7d1      	b.n	800a374 <_scanf_float+0x188>
 800a3d0:	b97d      	cbnz	r5, 800a3f2 <_scanf_float+0x206>
 800a3d2:	f1b9 0f00 	cmp.w	r9, #0
 800a3d6:	f47f af3c 	bne.w	800a252 <_scanf_float+0x66>
 800a3da:	6822      	ldr	r2, [r4, #0]
 800a3dc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a3e0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a3e4:	f47f af39 	bne.w	800a25a <_scanf_float+0x6e>
 800a3e8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a3ec:	6022      	str	r2, [r4, #0]
 800a3ee:	2501      	movs	r5, #1
 800a3f0:	e7c0      	b.n	800a374 <_scanf_float+0x188>
 800a3f2:	2d03      	cmp	r5, #3
 800a3f4:	d0e2      	beq.n	800a3bc <_scanf_float+0x1d0>
 800a3f6:	2d05      	cmp	r5, #5
 800a3f8:	e7de      	b.n	800a3b8 <_scanf_float+0x1cc>
 800a3fa:	2d02      	cmp	r5, #2
 800a3fc:	f47f af26 	bne.w	800a24c <_scanf_float+0x60>
 800a400:	2503      	movs	r5, #3
 800a402:	e7b7      	b.n	800a374 <_scanf_float+0x188>
 800a404:	2d06      	cmp	r5, #6
 800a406:	f47f af21 	bne.w	800a24c <_scanf_float+0x60>
 800a40a:	2507      	movs	r5, #7
 800a40c:	e7b2      	b.n	800a374 <_scanf_float+0x188>
 800a40e:	6822      	ldr	r2, [r4, #0]
 800a410:	0591      	lsls	r1, r2, #22
 800a412:	f57f af1b 	bpl.w	800a24c <_scanf_float+0x60>
 800a416:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a41a:	6022      	str	r2, [r4, #0]
 800a41c:	f8cd 9004 	str.w	r9, [sp, #4]
 800a420:	e7a8      	b.n	800a374 <_scanf_float+0x188>
 800a422:	6822      	ldr	r2, [r4, #0]
 800a424:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a428:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a42c:	d006      	beq.n	800a43c <_scanf_float+0x250>
 800a42e:	0550      	lsls	r0, r2, #21
 800a430:	f57f af0c 	bpl.w	800a24c <_scanf_float+0x60>
 800a434:	f1b9 0f00 	cmp.w	r9, #0
 800a438:	f43f af0f 	beq.w	800a25a <_scanf_float+0x6e>
 800a43c:	0591      	lsls	r1, r2, #22
 800a43e:	bf58      	it	pl
 800a440:	9901      	ldrpl	r1, [sp, #4]
 800a442:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a446:	bf58      	it	pl
 800a448:	eba9 0101 	subpl.w	r1, r9, r1
 800a44c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a450:	bf58      	it	pl
 800a452:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a456:	6022      	str	r2, [r4, #0]
 800a458:	f04f 0900 	mov.w	r9, #0
 800a45c:	e78a      	b.n	800a374 <_scanf_float+0x188>
 800a45e:	f04f 0a03 	mov.w	sl, #3
 800a462:	e787      	b.n	800a374 <_scanf_float+0x188>
 800a464:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a468:	4639      	mov	r1, r7
 800a46a:	4640      	mov	r0, r8
 800a46c:	4798      	blx	r3
 800a46e:	2800      	cmp	r0, #0
 800a470:	f43f aedf 	beq.w	800a232 <_scanf_float+0x46>
 800a474:	e6ea      	b.n	800a24c <_scanf_float+0x60>
 800a476:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a47a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a47e:	463a      	mov	r2, r7
 800a480:	4640      	mov	r0, r8
 800a482:	4798      	blx	r3
 800a484:	6923      	ldr	r3, [r4, #16]
 800a486:	3b01      	subs	r3, #1
 800a488:	6123      	str	r3, [r4, #16]
 800a48a:	e6ec      	b.n	800a266 <_scanf_float+0x7a>
 800a48c:	1e6b      	subs	r3, r5, #1
 800a48e:	2b06      	cmp	r3, #6
 800a490:	d825      	bhi.n	800a4de <_scanf_float+0x2f2>
 800a492:	2d02      	cmp	r5, #2
 800a494:	d836      	bhi.n	800a504 <_scanf_float+0x318>
 800a496:	455e      	cmp	r6, fp
 800a498:	f67f aee8 	bls.w	800a26c <_scanf_float+0x80>
 800a49c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a4a0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a4a4:	463a      	mov	r2, r7
 800a4a6:	4640      	mov	r0, r8
 800a4a8:	4798      	blx	r3
 800a4aa:	6923      	ldr	r3, [r4, #16]
 800a4ac:	3b01      	subs	r3, #1
 800a4ae:	6123      	str	r3, [r4, #16]
 800a4b0:	e7f1      	b.n	800a496 <_scanf_float+0x2aa>
 800a4b2:	9802      	ldr	r0, [sp, #8]
 800a4b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a4b8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a4bc:	9002      	str	r0, [sp, #8]
 800a4be:	463a      	mov	r2, r7
 800a4c0:	4640      	mov	r0, r8
 800a4c2:	4798      	blx	r3
 800a4c4:	6923      	ldr	r3, [r4, #16]
 800a4c6:	3b01      	subs	r3, #1
 800a4c8:	6123      	str	r3, [r4, #16]
 800a4ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a4ce:	fa5f fa8a 	uxtb.w	sl, sl
 800a4d2:	f1ba 0f02 	cmp.w	sl, #2
 800a4d6:	d1ec      	bne.n	800a4b2 <_scanf_float+0x2c6>
 800a4d8:	3d03      	subs	r5, #3
 800a4da:	b2ed      	uxtb	r5, r5
 800a4dc:	1b76      	subs	r6, r6, r5
 800a4de:	6823      	ldr	r3, [r4, #0]
 800a4e0:	05da      	lsls	r2, r3, #23
 800a4e2:	d52f      	bpl.n	800a544 <_scanf_float+0x358>
 800a4e4:	055b      	lsls	r3, r3, #21
 800a4e6:	d510      	bpl.n	800a50a <_scanf_float+0x31e>
 800a4e8:	455e      	cmp	r6, fp
 800a4ea:	f67f aebf 	bls.w	800a26c <_scanf_float+0x80>
 800a4ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a4f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a4f6:	463a      	mov	r2, r7
 800a4f8:	4640      	mov	r0, r8
 800a4fa:	4798      	blx	r3
 800a4fc:	6923      	ldr	r3, [r4, #16]
 800a4fe:	3b01      	subs	r3, #1
 800a500:	6123      	str	r3, [r4, #16]
 800a502:	e7f1      	b.n	800a4e8 <_scanf_float+0x2fc>
 800a504:	46aa      	mov	sl, r5
 800a506:	9602      	str	r6, [sp, #8]
 800a508:	e7df      	b.n	800a4ca <_scanf_float+0x2de>
 800a50a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a50e:	6923      	ldr	r3, [r4, #16]
 800a510:	2965      	cmp	r1, #101	; 0x65
 800a512:	f103 33ff 	add.w	r3, r3, #4294967295
 800a516:	f106 35ff 	add.w	r5, r6, #4294967295
 800a51a:	6123      	str	r3, [r4, #16]
 800a51c:	d00c      	beq.n	800a538 <_scanf_float+0x34c>
 800a51e:	2945      	cmp	r1, #69	; 0x45
 800a520:	d00a      	beq.n	800a538 <_scanf_float+0x34c>
 800a522:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a526:	463a      	mov	r2, r7
 800a528:	4640      	mov	r0, r8
 800a52a:	4798      	blx	r3
 800a52c:	6923      	ldr	r3, [r4, #16]
 800a52e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a532:	3b01      	subs	r3, #1
 800a534:	1eb5      	subs	r5, r6, #2
 800a536:	6123      	str	r3, [r4, #16]
 800a538:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a53c:	463a      	mov	r2, r7
 800a53e:	4640      	mov	r0, r8
 800a540:	4798      	blx	r3
 800a542:	462e      	mov	r6, r5
 800a544:	6825      	ldr	r5, [r4, #0]
 800a546:	f015 0510 	ands.w	r5, r5, #16
 800a54a:	d159      	bne.n	800a600 <_scanf_float+0x414>
 800a54c:	7035      	strb	r5, [r6, #0]
 800a54e:	6823      	ldr	r3, [r4, #0]
 800a550:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a554:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a558:	d11b      	bne.n	800a592 <_scanf_float+0x3a6>
 800a55a:	9b01      	ldr	r3, [sp, #4]
 800a55c:	454b      	cmp	r3, r9
 800a55e:	eba3 0209 	sub.w	r2, r3, r9
 800a562:	d123      	bne.n	800a5ac <_scanf_float+0x3c0>
 800a564:	2200      	movs	r2, #0
 800a566:	4659      	mov	r1, fp
 800a568:	4640      	mov	r0, r8
 800a56a:	f000 ff27 	bl	800b3bc <_strtod_r>
 800a56e:	6822      	ldr	r2, [r4, #0]
 800a570:	9b03      	ldr	r3, [sp, #12]
 800a572:	f012 0f02 	tst.w	r2, #2
 800a576:	ec57 6b10 	vmov	r6, r7, d0
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	d021      	beq.n	800a5c2 <_scanf_float+0x3d6>
 800a57e:	9903      	ldr	r1, [sp, #12]
 800a580:	1d1a      	adds	r2, r3, #4
 800a582:	600a      	str	r2, [r1, #0]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	e9c3 6700 	strd	r6, r7, [r3]
 800a58a:	68e3      	ldr	r3, [r4, #12]
 800a58c:	3301      	adds	r3, #1
 800a58e:	60e3      	str	r3, [r4, #12]
 800a590:	e66d      	b.n	800a26e <_scanf_float+0x82>
 800a592:	9b04      	ldr	r3, [sp, #16]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d0e5      	beq.n	800a564 <_scanf_float+0x378>
 800a598:	9905      	ldr	r1, [sp, #20]
 800a59a:	230a      	movs	r3, #10
 800a59c:	462a      	mov	r2, r5
 800a59e:	3101      	adds	r1, #1
 800a5a0:	4640      	mov	r0, r8
 800a5a2:	f000 ff93 	bl	800b4cc <_strtol_r>
 800a5a6:	9b04      	ldr	r3, [sp, #16]
 800a5a8:	9e05      	ldr	r6, [sp, #20]
 800a5aa:	1ac2      	subs	r2, r0, r3
 800a5ac:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a5b0:	429e      	cmp	r6, r3
 800a5b2:	bf28      	it	cs
 800a5b4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a5b8:	4912      	ldr	r1, [pc, #72]	; (800a604 <_scanf_float+0x418>)
 800a5ba:	4630      	mov	r0, r6
 800a5bc:	f000 f8ba 	bl	800a734 <siprintf>
 800a5c0:	e7d0      	b.n	800a564 <_scanf_float+0x378>
 800a5c2:	9903      	ldr	r1, [sp, #12]
 800a5c4:	f012 0f04 	tst.w	r2, #4
 800a5c8:	f103 0204 	add.w	r2, r3, #4
 800a5cc:	600a      	str	r2, [r1, #0]
 800a5ce:	d1d9      	bne.n	800a584 <_scanf_float+0x398>
 800a5d0:	f8d3 8000 	ldr.w	r8, [r3]
 800a5d4:	ee10 2a10 	vmov	r2, s0
 800a5d8:	ee10 0a10 	vmov	r0, s0
 800a5dc:	463b      	mov	r3, r7
 800a5de:	4639      	mov	r1, r7
 800a5e0:	f7f6 faa4 	bl	8000b2c <__aeabi_dcmpun>
 800a5e4:	b128      	cbz	r0, 800a5f2 <_scanf_float+0x406>
 800a5e6:	4808      	ldr	r0, [pc, #32]	; (800a608 <_scanf_float+0x41c>)
 800a5e8:	f000 f89e 	bl	800a728 <nanf>
 800a5ec:	ed88 0a00 	vstr	s0, [r8]
 800a5f0:	e7cb      	b.n	800a58a <_scanf_float+0x39e>
 800a5f2:	4630      	mov	r0, r6
 800a5f4:	4639      	mov	r1, r7
 800a5f6:	f7f6 faf7 	bl	8000be8 <__aeabi_d2f>
 800a5fa:	f8c8 0000 	str.w	r0, [r8]
 800a5fe:	e7c4      	b.n	800a58a <_scanf_float+0x39e>
 800a600:	2500      	movs	r5, #0
 800a602:	e634      	b.n	800a26e <_scanf_float+0x82>
 800a604:	0800e540 	.word	0x0800e540
 800a608:	0800e9b0 	.word	0x0800e9b0

0800a60c <iprintf>:
 800a60c:	b40f      	push	{r0, r1, r2, r3}
 800a60e:	4b0a      	ldr	r3, [pc, #40]	; (800a638 <iprintf+0x2c>)
 800a610:	b513      	push	{r0, r1, r4, lr}
 800a612:	681c      	ldr	r4, [r3, #0]
 800a614:	b124      	cbz	r4, 800a620 <iprintf+0x14>
 800a616:	69a3      	ldr	r3, [r4, #24]
 800a618:	b913      	cbnz	r3, 800a620 <iprintf+0x14>
 800a61a:	4620      	mov	r0, r4
 800a61c:	f001 ffac 	bl	800c578 <__sinit>
 800a620:	ab05      	add	r3, sp, #20
 800a622:	9a04      	ldr	r2, [sp, #16]
 800a624:	68a1      	ldr	r1, [r4, #8]
 800a626:	9301      	str	r3, [sp, #4]
 800a628:	4620      	mov	r0, r4
 800a62a:	f003 fb75 	bl	800dd18 <_vfiprintf_r>
 800a62e:	b002      	add	sp, #8
 800a630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a634:	b004      	add	sp, #16
 800a636:	4770      	bx	lr
 800a638:	200000a4 	.word	0x200000a4

0800a63c <_puts_r>:
 800a63c:	b570      	push	{r4, r5, r6, lr}
 800a63e:	460e      	mov	r6, r1
 800a640:	4605      	mov	r5, r0
 800a642:	b118      	cbz	r0, 800a64c <_puts_r+0x10>
 800a644:	6983      	ldr	r3, [r0, #24]
 800a646:	b90b      	cbnz	r3, 800a64c <_puts_r+0x10>
 800a648:	f001 ff96 	bl	800c578 <__sinit>
 800a64c:	69ab      	ldr	r3, [r5, #24]
 800a64e:	68ac      	ldr	r4, [r5, #8]
 800a650:	b913      	cbnz	r3, 800a658 <_puts_r+0x1c>
 800a652:	4628      	mov	r0, r5
 800a654:	f001 ff90 	bl	800c578 <__sinit>
 800a658:	4b2c      	ldr	r3, [pc, #176]	; (800a70c <_puts_r+0xd0>)
 800a65a:	429c      	cmp	r4, r3
 800a65c:	d120      	bne.n	800a6a0 <_puts_r+0x64>
 800a65e:	686c      	ldr	r4, [r5, #4]
 800a660:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a662:	07db      	lsls	r3, r3, #31
 800a664:	d405      	bmi.n	800a672 <_puts_r+0x36>
 800a666:	89a3      	ldrh	r3, [r4, #12]
 800a668:	0598      	lsls	r0, r3, #22
 800a66a:	d402      	bmi.n	800a672 <_puts_r+0x36>
 800a66c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a66e:	f002 fb94 	bl	800cd9a <__retarget_lock_acquire_recursive>
 800a672:	89a3      	ldrh	r3, [r4, #12]
 800a674:	0719      	lsls	r1, r3, #28
 800a676:	d51d      	bpl.n	800a6b4 <_puts_r+0x78>
 800a678:	6923      	ldr	r3, [r4, #16]
 800a67a:	b1db      	cbz	r3, 800a6b4 <_puts_r+0x78>
 800a67c:	3e01      	subs	r6, #1
 800a67e:	68a3      	ldr	r3, [r4, #8]
 800a680:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a684:	3b01      	subs	r3, #1
 800a686:	60a3      	str	r3, [r4, #8]
 800a688:	bb39      	cbnz	r1, 800a6da <_puts_r+0x9e>
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	da38      	bge.n	800a700 <_puts_r+0xc4>
 800a68e:	4622      	mov	r2, r4
 800a690:	210a      	movs	r1, #10
 800a692:	4628      	mov	r0, r5
 800a694:	f000 ff1c 	bl	800b4d0 <__swbuf_r>
 800a698:	3001      	adds	r0, #1
 800a69a:	d011      	beq.n	800a6c0 <_puts_r+0x84>
 800a69c:	250a      	movs	r5, #10
 800a69e:	e011      	b.n	800a6c4 <_puts_r+0x88>
 800a6a0:	4b1b      	ldr	r3, [pc, #108]	; (800a710 <_puts_r+0xd4>)
 800a6a2:	429c      	cmp	r4, r3
 800a6a4:	d101      	bne.n	800a6aa <_puts_r+0x6e>
 800a6a6:	68ac      	ldr	r4, [r5, #8]
 800a6a8:	e7da      	b.n	800a660 <_puts_r+0x24>
 800a6aa:	4b1a      	ldr	r3, [pc, #104]	; (800a714 <_puts_r+0xd8>)
 800a6ac:	429c      	cmp	r4, r3
 800a6ae:	bf08      	it	eq
 800a6b0:	68ec      	ldreq	r4, [r5, #12]
 800a6b2:	e7d5      	b.n	800a660 <_puts_r+0x24>
 800a6b4:	4621      	mov	r1, r4
 800a6b6:	4628      	mov	r0, r5
 800a6b8:	f000 ff5c 	bl	800b574 <__swsetup_r>
 800a6bc:	2800      	cmp	r0, #0
 800a6be:	d0dd      	beq.n	800a67c <_puts_r+0x40>
 800a6c0:	f04f 35ff 	mov.w	r5, #4294967295
 800a6c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a6c6:	07da      	lsls	r2, r3, #31
 800a6c8:	d405      	bmi.n	800a6d6 <_puts_r+0x9a>
 800a6ca:	89a3      	ldrh	r3, [r4, #12]
 800a6cc:	059b      	lsls	r3, r3, #22
 800a6ce:	d402      	bmi.n	800a6d6 <_puts_r+0x9a>
 800a6d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6d2:	f002 fb63 	bl	800cd9c <__retarget_lock_release_recursive>
 800a6d6:	4628      	mov	r0, r5
 800a6d8:	bd70      	pop	{r4, r5, r6, pc}
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	da04      	bge.n	800a6e8 <_puts_r+0xac>
 800a6de:	69a2      	ldr	r2, [r4, #24]
 800a6e0:	429a      	cmp	r2, r3
 800a6e2:	dc06      	bgt.n	800a6f2 <_puts_r+0xb6>
 800a6e4:	290a      	cmp	r1, #10
 800a6e6:	d004      	beq.n	800a6f2 <_puts_r+0xb6>
 800a6e8:	6823      	ldr	r3, [r4, #0]
 800a6ea:	1c5a      	adds	r2, r3, #1
 800a6ec:	6022      	str	r2, [r4, #0]
 800a6ee:	7019      	strb	r1, [r3, #0]
 800a6f0:	e7c5      	b.n	800a67e <_puts_r+0x42>
 800a6f2:	4622      	mov	r2, r4
 800a6f4:	4628      	mov	r0, r5
 800a6f6:	f000 feeb 	bl	800b4d0 <__swbuf_r>
 800a6fa:	3001      	adds	r0, #1
 800a6fc:	d1bf      	bne.n	800a67e <_puts_r+0x42>
 800a6fe:	e7df      	b.n	800a6c0 <_puts_r+0x84>
 800a700:	6823      	ldr	r3, [r4, #0]
 800a702:	250a      	movs	r5, #10
 800a704:	1c5a      	adds	r2, r3, #1
 800a706:	6022      	str	r2, [r4, #0]
 800a708:	701d      	strb	r5, [r3, #0]
 800a70a:	e7db      	b.n	800a6c4 <_puts_r+0x88>
 800a70c:	0800e74c 	.word	0x0800e74c
 800a710:	0800e76c 	.word	0x0800e76c
 800a714:	0800e72c 	.word	0x0800e72c

0800a718 <puts>:
 800a718:	4b02      	ldr	r3, [pc, #8]	; (800a724 <puts+0xc>)
 800a71a:	4601      	mov	r1, r0
 800a71c:	6818      	ldr	r0, [r3, #0]
 800a71e:	f7ff bf8d 	b.w	800a63c <_puts_r>
 800a722:	bf00      	nop
 800a724:	200000a4 	.word	0x200000a4

0800a728 <nanf>:
 800a728:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a730 <nanf+0x8>
 800a72c:	4770      	bx	lr
 800a72e:	bf00      	nop
 800a730:	7fc00000 	.word	0x7fc00000

0800a734 <siprintf>:
 800a734:	b40e      	push	{r1, r2, r3}
 800a736:	b500      	push	{lr}
 800a738:	b09c      	sub	sp, #112	; 0x70
 800a73a:	ab1d      	add	r3, sp, #116	; 0x74
 800a73c:	9002      	str	r0, [sp, #8]
 800a73e:	9006      	str	r0, [sp, #24]
 800a740:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a744:	4809      	ldr	r0, [pc, #36]	; (800a76c <siprintf+0x38>)
 800a746:	9107      	str	r1, [sp, #28]
 800a748:	9104      	str	r1, [sp, #16]
 800a74a:	4909      	ldr	r1, [pc, #36]	; (800a770 <siprintf+0x3c>)
 800a74c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a750:	9105      	str	r1, [sp, #20]
 800a752:	6800      	ldr	r0, [r0, #0]
 800a754:	9301      	str	r3, [sp, #4]
 800a756:	a902      	add	r1, sp, #8
 800a758:	f003 f9b4 	bl	800dac4 <_svfiprintf_r>
 800a75c:	9b02      	ldr	r3, [sp, #8]
 800a75e:	2200      	movs	r2, #0
 800a760:	701a      	strb	r2, [r3, #0]
 800a762:	b01c      	add	sp, #112	; 0x70
 800a764:	f85d eb04 	ldr.w	lr, [sp], #4
 800a768:	b003      	add	sp, #12
 800a76a:	4770      	bx	lr
 800a76c:	200000a4 	.word	0x200000a4
 800a770:	ffff0208 	.word	0xffff0208

0800a774 <sulp>:
 800a774:	b570      	push	{r4, r5, r6, lr}
 800a776:	4604      	mov	r4, r0
 800a778:	460d      	mov	r5, r1
 800a77a:	ec45 4b10 	vmov	d0, r4, r5
 800a77e:	4616      	mov	r6, r2
 800a780:	f002 fefe 	bl	800d580 <__ulp>
 800a784:	ec51 0b10 	vmov	r0, r1, d0
 800a788:	b17e      	cbz	r6, 800a7aa <sulp+0x36>
 800a78a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a78e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a792:	2b00      	cmp	r3, #0
 800a794:	dd09      	ble.n	800a7aa <sulp+0x36>
 800a796:	051b      	lsls	r3, r3, #20
 800a798:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a79c:	2400      	movs	r4, #0
 800a79e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a7a2:	4622      	mov	r2, r4
 800a7a4:	462b      	mov	r3, r5
 800a7a6:	f7f5 ff27 	bl	80005f8 <__aeabi_dmul>
 800a7aa:	bd70      	pop	{r4, r5, r6, pc}
 800a7ac:	0000      	movs	r0, r0
	...

0800a7b0 <_strtod_l>:
 800a7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7b4:	ed2d 8b02 	vpush	{d8}
 800a7b8:	b09d      	sub	sp, #116	; 0x74
 800a7ba:	461f      	mov	r7, r3
 800a7bc:	2300      	movs	r3, #0
 800a7be:	9318      	str	r3, [sp, #96]	; 0x60
 800a7c0:	4ba2      	ldr	r3, [pc, #648]	; (800aa4c <_strtod_l+0x29c>)
 800a7c2:	9213      	str	r2, [sp, #76]	; 0x4c
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	9305      	str	r3, [sp, #20]
 800a7c8:	4604      	mov	r4, r0
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	4688      	mov	r8, r1
 800a7ce:	f7f5 fcff 	bl	80001d0 <strlen>
 800a7d2:	f04f 0a00 	mov.w	sl, #0
 800a7d6:	4605      	mov	r5, r0
 800a7d8:	f04f 0b00 	mov.w	fp, #0
 800a7dc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a7e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a7e2:	781a      	ldrb	r2, [r3, #0]
 800a7e4:	2a2b      	cmp	r2, #43	; 0x2b
 800a7e6:	d04e      	beq.n	800a886 <_strtod_l+0xd6>
 800a7e8:	d83b      	bhi.n	800a862 <_strtod_l+0xb2>
 800a7ea:	2a0d      	cmp	r2, #13
 800a7ec:	d834      	bhi.n	800a858 <_strtod_l+0xa8>
 800a7ee:	2a08      	cmp	r2, #8
 800a7f0:	d834      	bhi.n	800a85c <_strtod_l+0xac>
 800a7f2:	2a00      	cmp	r2, #0
 800a7f4:	d03e      	beq.n	800a874 <_strtod_l+0xc4>
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	930a      	str	r3, [sp, #40]	; 0x28
 800a7fa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a7fc:	7833      	ldrb	r3, [r6, #0]
 800a7fe:	2b30      	cmp	r3, #48	; 0x30
 800a800:	f040 80b0 	bne.w	800a964 <_strtod_l+0x1b4>
 800a804:	7873      	ldrb	r3, [r6, #1]
 800a806:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a80a:	2b58      	cmp	r3, #88	; 0x58
 800a80c:	d168      	bne.n	800a8e0 <_strtod_l+0x130>
 800a80e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a810:	9301      	str	r3, [sp, #4]
 800a812:	ab18      	add	r3, sp, #96	; 0x60
 800a814:	9702      	str	r7, [sp, #8]
 800a816:	9300      	str	r3, [sp, #0]
 800a818:	4a8d      	ldr	r2, [pc, #564]	; (800aa50 <_strtod_l+0x2a0>)
 800a81a:	ab19      	add	r3, sp, #100	; 0x64
 800a81c:	a917      	add	r1, sp, #92	; 0x5c
 800a81e:	4620      	mov	r0, r4
 800a820:	f001 ffae 	bl	800c780 <__gethex>
 800a824:	f010 0707 	ands.w	r7, r0, #7
 800a828:	4605      	mov	r5, r0
 800a82a:	d005      	beq.n	800a838 <_strtod_l+0x88>
 800a82c:	2f06      	cmp	r7, #6
 800a82e:	d12c      	bne.n	800a88a <_strtod_l+0xda>
 800a830:	3601      	adds	r6, #1
 800a832:	2300      	movs	r3, #0
 800a834:	9617      	str	r6, [sp, #92]	; 0x5c
 800a836:	930a      	str	r3, [sp, #40]	; 0x28
 800a838:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	f040 8590 	bne.w	800b360 <_strtod_l+0xbb0>
 800a840:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a842:	b1eb      	cbz	r3, 800a880 <_strtod_l+0xd0>
 800a844:	4652      	mov	r2, sl
 800a846:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a84a:	ec43 2b10 	vmov	d0, r2, r3
 800a84e:	b01d      	add	sp, #116	; 0x74
 800a850:	ecbd 8b02 	vpop	{d8}
 800a854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a858:	2a20      	cmp	r2, #32
 800a85a:	d1cc      	bne.n	800a7f6 <_strtod_l+0x46>
 800a85c:	3301      	adds	r3, #1
 800a85e:	9317      	str	r3, [sp, #92]	; 0x5c
 800a860:	e7be      	b.n	800a7e0 <_strtod_l+0x30>
 800a862:	2a2d      	cmp	r2, #45	; 0x2d
 800a864:	d1c7      	bne.n	800a7f6 <_strtod_l+0x46>
 800a866:	2201      	movs	r2, #1
 800a868:	920a      	str	r2, [sp, #40]	; 0x28
 800a86a:	1c5a      	adds	r2, r3, #1
 800a86c:	9217      	str	r2, [sp, #92]	; 0x5c
 800a86e:	785b      	ldrb	r3, [r3, #1]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d1c2      	bne.n	800a7fa <_strtod_l+0x4a>
 800a874:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a876:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	f040 856e 	bne.w	800b35c <_strtod_l+0xbac>
 800a880:	4652      	mov	r2, sl
 800a882:	465b      	mov	r3, fp
 800a884:	e7e1      	b.n	800a84a <_strtod_l+0x9a>
 800a886:	2200      	movs	r2, #0
 800a888:	e7ee      	b.n	800a868 <_strtod_l+0xb8>
 800a88a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a88c:	b13a      	cbz	r2, 800a89e <_strtod_l+0xee>
 800a88e:	2135      	movs	r1, #53	; 0x35
 800a890:	a81a      	add	r0, sp, #104	; 0x68
 800a892:	f002 ff80 	bl	800d796 <__copybits>
 800a896:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a898:	4620      	mov	r0, r4
 800a89a:	f002 fb3f 	bl	800cf1c <_Bfree>
 800a89e:	3f01      	subs	r7, #1
 800a8a0:	2f04      	cmp	r7, #4
 800a8a2:	d806      	bhi.n	800a8b2 <_strtod_l+0x102>
 800a8a4:	e8df f007 	tbb	[pc, r7]
 800a8a8:	1714030a 	.word	0x1714030a
 800a8ac:	0a          	.byte	0x0a
 800a8ad:	00          	.byte	0x00
 800a8ae:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800a8b2:	0728      	lsls	r0, r5, #28
 800a8b4:	d5c0      	bpl.n	800a838 <_strtod_l+0x88>
 800a8b6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a8ba:	e7bd      	b.n	800a838 <_strtod_l+0x88>
 800a8bc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800a8c0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a8c2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a8c6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a8ca:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a8ce:	e7f0      	b.n	800a8b2 <_strtod_l+0x102>
 800a8d0:	f8df b180 	ldr.w	fp, [pc, #384]	; 800aa54 <_strtod_l+0x2a4>
 800a8d4:	e7ed      	b.n	800a8b2 <_strtod_l+0x102>
 800a8d6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a8da:	f04f 3aff 	mov.w	sl, #4294967295
 800a8de:	e7e8      	b.n	800a8b2 <_strtod_l+0x102>
 800a8e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a8e2:	1c5a      	adds	r2, r3, #1
 800a8e4:	9217      	str	r2, [sp, #92]	; 0x5c
 800a8e6:	785b      	ldrb	r3, [r3, #1]
 800a8e8:	2b30      	cmp	r3, #48	; 0x30
 800a8ea:	d0f9      	beq.n	800a8e0 <_strtod_l+0x130>
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d0a3      	beq.n	800a838 <_strtod_l+0x88>
 800a8f0:	2301      	movs	r3, #1
 800a8f2:	f04f 0900 	mov.w	r9, #0
 800a8f6:	9304      	str	r3, [sp, #16]
 800a8f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a8fa:	9308      	str	r3, [sp, #32]
 800a8fc:	f8cd 901c 	str.w	r9, [sp, #28]
 800a900:	464f      	mov	r7, r9
 800a902:	220a      	movs	r2, #10
 800a904:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a906:	7806      	ldrb	r6, [r0, #0]
 800a908:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a90c:	b2d9      	uxtb	r1, r3
 800a90e:	2909      	cmp	r1, #9
 800a910:	d92a      	bls.n	800a968 <_strtod_l+0x1b8>
 800a912:	9905      	ldr	r1, [sp, #20]
 800a914:	462a      	mov	r2, r5
 800a916:	f003 fb8a 	bl	800e02e <strncmp>
 800a91a:	b398      	cbz	r0, 800a984 <_strtod_l+0x1d4>
 800a91c:	2000      	movs	r0, #0
 800a91e:	4632      	mov	r2, r6
 800a920:	463d      	mov	r5, r7
 800a922:	9005      	str	r0, [sp, #20]
 800a924:	4603      	mov	r3, r0
 800a926:	2a65      	cmp	r2, #101	; 0x65
 800a928:	d001      	beq.n	800a92e <_strtod_l+0x17e>
 800a92a:	2a45      	cmp	r2, #69	; 0x45
 800a92c:	d118      	bne.n	800a960 <_strtod_l+0x1b0>
 800a92e:	b91d      	cbnz	r5, 800a938 <_strtod_l+0x188>
 800a930:	9a04      	ldr	r2, [sp, #16]
 800a932:	4302      	orrs	r2, r0
 800a934:	d09e      	beq.n	800a874 <_strtod_l+0xc4>
 800a936:	2500      	movs	r5, #0
 800a938:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800a93c:	f108 0201 	add.w	r2, r8, #1
 800a940:	9217      	str	r2, [sp, #92]	; 0x5c
 800a942:	f898 2001 	ldrb.w	r2, [r8, #1]
 800a946:	2a2b      	cmp	r2, #43	; 0x2b
 800a948:	d075      	beq.n	800aa36 <_strtod_l+0x286>
 800a94a:	2a2d      	cmp	r2, #45	; 0x2d
 800a94c:	d07b      	beq.n	800aa46 <_strtod_l+0x296>
 800a94e:	f04f 0c00 	mov.w	ip, #0
 800a952:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a956:	2909      	cmp	r1, #9
 800a958:	f240 8082 	bls.w	800aa60 <_strtod_l+0x2b0>
 800a95c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a960:	2600      	movs	r6, #0
 800a962:	e09d      	b.n	800aaa0 <_strtod_l+0x2f0>
 800a964:	2300      	movs	r3, #0
 800a966:	e7c4      	b.n	800a8f2 <_strtod_l+0x142>
 800a968:	2f08      	cmp	r7, #8
 800a96a:	bfd8      	it	le
 800a96c:	9907      	ldrle	r1, [sp, #28]
 800a96e:	f100 0001 	add.w	r0, r0, #1
 800a972:	bfda      	itte	le
 800a974:	fb02 3301 	mlale	r3, r2, r1, r3
 800a978:	9307      	strle	r3, [sp, #28]
 800a97a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800a97e:	3701      	adds	r7, #1
 800a980:	9017      	str	r0, [sp, #92]	; 0x5c
 800a982:	e7bf      	b.n	800a904 <_strtod_l+0x154>
 800a984:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a986:	195a      	adds	r2, r3, r5
 800a988:	9217      	str	r2, [sp, #92]	; 0x5c
 800a98a:	5d5a      	ldrb	r2, [r3, r5]
 800a98c:	2f00      	cmp	r7, #0
 800a98e:	d037      	beq.n	800aa00 <_strtod_l+0x250>
 800a990:	9005      	str	r0, [sp, #20]
 800a992:	463d      	mov	r5, r7
 800a994:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a998:	2b09      	cmp	r3, #9
 800a99a:	d912      	bls.n	800a9c2 <_strtod_l+0x212>
 800a99c:	2301      	movs	r3, #1
 800a99e:	e7c2      	b.n	800a926 <_strtod_l+0x176>
 800a9a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a9a2:	1c5a      	adds	r2, r3, #1
 800a9a4:	9217      	str	r2, [sp, #92]	; 0x5c
 800a9a6:	785a      	ldrb	r2, [r3, #1]
 800a9a8:	3001      	adds	r0, #1
 800a9aa:	2a30      	cmp	r2, #48	; 0x30
 800a9ac:	d0f8      	beq.n	800a9a0 <_strtod_l+0x1f0>
 800a9ae:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a9b2:	2b08      	cmp	r3, #8
 800a9b4:	f200 84d9 	bhi.w	800b36a <_strtod_l+0xbba>
 800a9b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a9ba:	9005      	str	r0, [sp, #20]
 800a9bc:	2000      	movs	r0, #0
 800a9be:	9308      	str	r3, [sp, #32]
 800a9c0:	4605      	mov	r5, r0
 800a9c2:	3a30      	subs	r2, #48	; 0x30
 800a9c4:	f100 0301 	add.w	r3, r0, #1
 800a9c8:	d014      	beq.n	800a9f4 <_strtod_l+0x244>
 800a9ca:	9905      	ldr	r1, [sp, #20]
 800a9cc:	4419      	add	r1, r3
 800a9ce:	9105      	str	r1, [sp, #20]
 800a9d0:	462b      	mov	r3, r5
 800a9d2:	eb00 0e05 	add.w	lr, r0, r5
 800a9d6:	210a      	movs	r1, #10
 800a9d8:	4573      	cmp	r3, lr
 800a9da:	d113      	bne.n	800aa04 <_strtod_l+0x254>
 800a9dc:	182b      	adds	r3, r5, r0
 800a9de:	2b08      	cmp	r3, #8
 800a9e0:	f105 0501 	add.w	r5, r5, #1
 800a9e4:	4405      	add	r5, r0
 800a9e6:	dc1c      	bgt.n	800aa22 <_strtod_l+0x272>
 800a9e8:	9907      	ldr	r1, [sp, #28]
 800a9ea:	230a      	movs	r3, #10
 800a9ec:	fb03 2301 	mla	r3, r3, r1, r2
 800a9f0:	9307      	str	r3, [sp, #28]
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a9f6:	1c51      	adds	r1, r2, #1
 800a9f8:	9117      	str	r1, [sp, #92]	; 0x5c
 800a9fa:	7852      	ldrb	r2, [r2, #1]
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	e7c9      	b.n	800a994 <_strtod_l+0x1e4>
 800aa00:	4638      	mov	r0, r7
 800aa02:	e7d2      	b.n	800a9aa <_strtod_l+0x1fa>
 800aa04:	2b08      	cmp	r3, #8
 800aa06:	dc04      	bgt.n	800aa12 <_strtod_l+0x262>
 800aa08:	9e07      	ldr	r6, [sp, #28]
 800aa0a:	434e      	muls	r6, r1
 800aa0c:	9607      	str	r6, [sp, #28]
 800aa0e:	3301      	adds	r3, #1
 800aa10:	e7e2      	b.n	800a9d8 <_strtod_l+0x228>
 800aa12:	f103 0c01 	add.w	ip, r3, #1
 800aa16:	f1bc 0f10 	cmp.w	ip, #16
 800aa1a:	bfd8      	it	le
 800aa1c:	fb01 f909 	mulle.w	r9, r1, r9
 800aa20:	e7f5      	b.n	800aa0e <_strtod_l+0x25e>
 800aa22:	2d10      	cmp	r5, #16
 800aa24:	bfdc      	itt	le
 800aa26:	230a      	movle	r3, #10
 800aa28:	fb03 2909 	mlale	r9, r3, r9, r2
 800aa2c:	e7e1      	b.n	800a9f2 <_strtod_l+0x242>
 800aa2e:	2300      	movs	r3, #0
 800aa30:	9305      	str	r3, [sp, #20]
 800aa32:	2301      	movs	r3, #1
 800aa34:	e77c      	b.n	800a930 <_strtod_l+0x180>
 800aa36:	f04f 0c00 	mov.w	ip, #0
 800aa3a:	f108 0202 	add.w	r2, r8, #2
 800aa3e:	9217      	str	r2, [sp, #92]	; 0x5c
 800aa40:	f898 2002 	ldrb.w	r2, [r8, #2]
 800aa44:	e785      	b.n	800a952 <_strtod_l+0x1a2>
 800aa46:	f04f 0c01 	mov.w	ip, #1
 800aa4a:	e7f6      	b.n	800aa3a <_strtod_l+0x28a>
 800aa4c:	0800e7f4 	.word	0x0800e7f4
 800aa50:	0800e548 	.word	0x0800e548
 800aa54:	7ff00000 	.word	0x7ff00000
 800aa58:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800aa5a:	1c51      	adds	r1, r2, #1
 800aa5c:	9117      	str	r1, [sp, #92]	; 0x5c
 800aa5e:	7852      	ldrb	r2, [r2, #1]
 800aa60:	2a30      	cmp	r2, #48	; 0x30
 800aa62:	d0f9      	beq.n	800aa58 <_strtod_l+0x2a8>
 800aa64:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800aa68:	2908      	cmp	r1, #8
 800aa6a:	f63f af79 	bhi.w	800a960 <_strtod_l+0x1b0>
 800aa6e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800aa72:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800aa74:	9206      	str	r2, [sp, #24]
 800aa76:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800aa78:	1c51      	adds	r1, r2, #1
 800aa7a:	9117      	str	r1, [sp, #92]	; 0x5c
 800aa7c:	7852      	ldrb	r2, [r2, #1]
 800aa7e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800aa82:	2e09      	cmp	r6, #9
 800aa84:	d937      	bls.n	800aaf6 <_strtod_l+0x346>
 800aa86:	9e06      	ldr	r6, [sp, #24]
 800aa88:	1b89      	subs	r1, r1, r6
 800aa8a:	2908      	cmp	r1, #8
 800aa8c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800aa90:	dc02      	bgt.n	800aa98 <_strtod_l+0x2e8>
 800aa92:	4576      	cmp	r6, lr
 800aa94:	bfa8      	it	ge
 800aa96:	4676      	movge	r6, lr
 800aa98:	f1bc 0f00 	cmp.w	ip, #0
 800aa9c:	d000      	beq.n	800aaa0 <_strtod_l+0x2f0>
 800aa9e:	4276      	negs	r6, r6
 800aaa0:	2d00      	cmp	r5, #0
 800aaa2:	d14d      	bne.n	800ab40 <_strtod_l+0x390>
 800aaa4:	9904      	ldr	r1, [sp, #16]
 800aaa6:	4301      	orrs	r1, r0
 800aaa8:	f47f aec6 	bne.w	800a838 <_strtod_l+0x88>
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	f47f aee1 	bne.w	800a874 <_strtod_l+0xc4>
 800aab2:	2a69      	cmp	r2, #105	; 0x69
 800aab4:	d027      	beq.n	800ab06 <_strtod_l+0x356>
 800aab6:	dc24      	bgt.n	800ab02 <_strtod_l+0x352>
 800aab8:	2a49      	cmp	r2, #73	; 0x49
 800aaba:	d024      	beq.n	800ab06 <_strtod_l+0x356>
 800aabc:	2a4e      	cmp	r2, #78	; 0x4e
 800aabe:	f47f aed9 	bne.w	800a874 <_strtod_l+0xc4>
 800aac2:	499f      	ldr	r1, [pc, #636]	; (800ad40 <_strtod_l+0x590>)
 800aac4:	a817      	add	r0, sp, #92	; 0x5c
 800aac6:	f002 f8b3 	bl	800cc30 <__match>
 800aaca:	2800      	cmp	r0, #0
 800aacc:	f43f aed2 	beq.w	800a874 <_strtod_l+0xc4>
 800aad0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aad2:	781b      	ldrb	r3, [r3, #0]
 800aad4:	2b28      	cmp	r3, #40	; 0x28
 800aad6:	d12d      	bne.n	800ab34 <_strtod_l+0x384>
 800aad8:	499a      	ldr	r1, [pc, #616]	; (800ad44 <_strtod_l+0x594>)
 800aada:	aa1a      	add	r2, sp, #104	; 0x68
 800aadc:	a817      	add	r0, sp, #92	; 0x5c
 800aade:	f002 f8bb 	bl	800cc58 <__hexnan>
 800aae2:	2805      	cmp	r0, #5
 800aae4:	d126      	bne.n	800ab34 <_strtod_l+0x384>
 800aae6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aae8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800aaec:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800aaf0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800aaf4:	e6a0      	b.n	800a838 <_strtod_l+0x88>
 800aaf6:	210a      	movs	r1, #10
 800aaf8:	fb01 2e0e 	mla	lr, r1, lr, r2
 800aafc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800ab00:	e7b9      	b.n	800aa76 <_strtod_l+0x2c6>
 800ab02:	2a6e      	cmp	r2, #110	; 0x6e
 800ab04:	e7db      	b.n	800aabe <_strtod_l+0x30e>
 800ab06:	4990      	ldr	r1, [pc, #576]	; (800ad48 <_strtod_l+0x598>)
 800ab08:	a817      	add	r0, sp, #92	; 0x5c
 800ab0a:	f002 f891 	bl	800cc30 <__match>
 800ab0e:	2800      	cmp	r0, #0
 800ab10:	f43f aeb0 	beq.w	800a874 <_strtod_l+0xc4>
 800ab14:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ab16:	498d      	ldr	r1, [pc, #564]	; (800ad4c <_strtod_l+0x59c>)
 800ab18:	3b01      	subs	r3, #1
 800ab1a:	a817      	add	r0, sp, #92	; 0x5c
 800ab1c:	9317      	str	r3, [sp, #92]	; 0x5c
 800ab1e:	f002 f887 	bl	800cc30 <__match>
 800ab22:	b910      	cbnz	r0, 800ab2a <_strtod_l+0x37a>
 800ab24:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ab26:	3301      	adds	r3, #1
 800ab28:	9317      	str	r3, [sp, #92]	; 0x5c
 800ab2a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800ad5c <_strtod_l+0x5ac>
 800ab2e:	f04f 0a00 	mov.w	sl, #0
 800ab32:	e681      	b.n	800a838 <_strtod_l+0x88>
 800ab34:	4886      	ldr	r0, [pc, #536]	; (800ad50 <_strtod_l+0x5a0>)
 800ab36:	f003 fa1f 	bl	800df78 <nan>
 800ab3a:	ec5b ab10 	vmov	sl, fp, d0
 800ab3e:	e67b      	b.n	800a838 <_strtod_l+0x88>
 800ab40:	9b05      	ldr	r3, [sp, #20]
 800ab42:	9807      	ldr	r0, [sp, #28]
 800ab44:	1af3      	subs	r3, r6, r3
 800ab46:	2f00      	cmp	r7, #0
 800ab48:	bf08      	it	eq
 800ab4a:	462f      	moveq	r7, r5
 800ab4c:	2d10      	cmp	r5, #16
 800ab4e:	9306      	str	r3, [sp, #24]
 800ab50:	46a8      	mov	r8, r5
 800ab52:	bfa8      	it	ge
 800ab54:	f04f 0810 	movge.w	r8, #16
 800ab58:	f7f5 fcd4 	bl	8000504 <__aeabi_ui2d>
 800ab5c:	2d09      	cmp	r5, #9
 800ab5e:	4682      	mov	sl, r0
 800ab60:	468b      	mov	fp, r1
 800ab62:	dd13      	ble.n	800ab8c <_strtod_l+0x3dc>
 800ab64:	4b7b      	ldr	r3, [pc, #492]	; (800ad54 <_strtod_l+0x5a4>)
 800ab66:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ab6a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ab6e:	f7f5 fd43 	bl	80005f8 <__aeabi_dmul>
 800ab72:	4682      	mov	sl, r0
 800ab74:	4648      	mov	r0, r9
 800ab76:	468b      	mov	fp, r1
 800ab78:	f7f5 fcc4 	bl	8000504 <__aeabi_ui2d>
 800ab7c:	4602      	mov	r2, r0
 800ab7e:	460b      	mov	r3, r1
 800ab80:	4650      	mov	r0, sl
 800ab82:	4659      	mov	r1, fp
 800ab84:	f7f5 fb82 	bl	800028c <__adddf3>
 800ab88:	4682      	mov	sl, r0
 800ab8a:	468b      	mov	fp, r1
 800ab8c:	2d0f      	cmp	r5, #15
 800ab8e:	dc38      	bgt.n	800ac02 <_strtod_l+0x452>
 800ab90:	9b06      	ldr	r3, [sp, #24]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	f43f ae50 	beq.w	800a838 <_strtod_l+0x88>
 800ab98:	dd24      	ble.n	800abe4 <_strtod_l+0x434>
 800ab9a:	2b16      	cmp	r3, #22
 800ab9c:	dc0b      	bgt.n	800abb6 <_strtod_l+0x406>
 800ab9e:	496d      	ldr	r1, [pc, #436]	; (800ad54 <_strtod_l+0x5a4>)
 800aba0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aba4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aba8:	4652      	mov	r2, sl
 800abaa:	465b      	mov	r3, fp
 800abac:	f7f5 fd24 	bl	80005f8 <__aeabi_dmul>
 800abb0:	4682      	mov	sl, r0
 800abb2:	468b      	mov	fp, r1
 800abb4:	e640      	b.n	800a838 <_strtod_l+0x88>
 800abb6:	9a06      	ldr	r2, [sp, #24]
 800abb8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800abbc:	4293      	cmp	r3, r2
 800abbe:	db20      	blt.n	800ac02 <_strtod_l+0x452>
 800abc0:	4c64      	ldr	r4, [pc, #400]	; (800ad54 <_strtod_l+0x5a4>)
 800abc2:	f1c5 050f 	rsb	r5, r5, #15
 800abc6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800abca:	4652      	mov	r2, sl
 800abcc:	465b      	mov	r3, fp
 800abce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800abd2:	f7f5 fd11 	bl	80005f8 <__aeabi_dmul>
 800abd6:	9b06      	ldr	r3, [sp, #24]
 800abd8:	1b5d      	subs	r5, r3, r5
 800abda:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800abde:	e9d4 2300 	ldrd	r2, r3, [r4]
 800abe2:	e7e3      	b.n	800abac <_strtod_l+0x3fc>
 800abe4:	9b06      	ldr	r3, [sp, #24]
 800abe6:	3316      	adds	r3, #22
 800abe8:	db0b      	blt.n	800ac02 <_strtod_l+0x452>
 800abea:	9b05      	ldr	r3, [sp, #20]
 800abec:	1b9e      	subs	r6, r3, r6
 800abee:	4b59      	ldr	r3, [pc, #356]	; (800ad54 <_strtod_l+0x5a4>)
 800abf0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800abf4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800abf8:	4650      	mov	r0, sl
 800abfa:	4659      	mov	r1, fp
 800abfc:	f7f5 fe26 	bl	800084c <__aeabi_ddiv>
 800ac00:	e7d6      	b.n	800abb0 <_strtod_l+0x400>
 800ac02:	9b06      	ldr	r3, [sp, #24]
 800ac04:	eba5 0808 	sub.w	r8, r5, r8
 800ac08:	4498      	add	r8, r3
 800ac0a:	f1b8 0f00 	cmp.w	r8, #0
 800ac0e:	dd74      	ble.n	800acfa <_strtod_l+0x54a>
 800ac10:	f018 030f 	ands.w	r3, r8, #15
 800ac14:	d00a      	beq.n	800ac2c <_strtod_l+0x47c>
 800ac16:	494f      	ldr	r1, [pc, #316]	; (800ad54 <_strtod_l+0x5a4>)
 800ac18:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ac1c:	4652      	mov	r2, sl
 800ac1e:	465b      	mov	r3, fp
 800ac20:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac24:	f7f5 fce8 	bl	80005f8 <__aeabi_dmul>
 800ac28:	4682      	mov	sl, r0
 800ac2a:	468b      	mov	fp, r1
 800ac2c:	f038 080f 	bics.w	r8, r8, #15
 800ac30:	d04f      	beq.n	800acd2 <_strtod_l+0x522>
 800ac32:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800ac36:	dd22      	ble.n	800ac7e <_strtod_l+0x4ce>
 800ac38:	2500      	movs	r5, #0
 800ac3a:	462e      	mov	r6, r5
 800ac3c:	9507      	str	r5, [sp, #28]
 800ac3e:	9505      	str	r5, [sp, #20]
 800ac40:	2322      	movs	r3, #34	; 0x22
 800ac42:	f8df b118 	ldr.w	fp, [pc, #280]	; 800ad5c <_strtod_l+0x5ac>
 800ac46:	6023      	str	r3, [r4, #0]
 800ac48:	f04f 0a00 	mov.w	sl, #0
 800ac4c:	9b07      	ldr	r3, [sp, #28]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	f43f adf2 	beq.w	800a838 <_strtod_l+0x88>
 800ac54:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ac56:	4620      	mov	r0, r4
 800ac58:	f002 f960 	bl	800cf1c <_Bfree>
 800ac5c:	9905      	ldr	r1, [sp, #20]
 800ac5e:	4620      	mov	r0, r4
 800ac60:	f002 f95c 	bl	800cf1c <_Bfree>
 800ac64:	4631      	mov	r1, r6
 800ac66:	4620      	mov	r0, r4
 800ac68:	f002 f958 	bl	800cf1c <_Bfree>
 800ac6c:	9907      	ldr	r1, [sp, #28]
 800ac6e:	4620      	mov	r0, r4
 800ac70:	f002 f954 	bl	800cf1c <_Bfree>
 800ac74:	4629      	mov	r1, r5
 800ac76:	4620      	mov	r0, r4
 800ac78:	f002 f950 	bl	800cf1c <_Bfree>
 800ac7c:	e5dc      	b.n	800a838 <_strtod_l+0x88>
 800ac7e:	4b36      	ldr	r3, [pc, #216]	; (800ad58 <_strtod_l+0x5a8>)
 800ac80:	9304      	str	r3, [sp, #16]
 800ac82:	2300      	movs	r3, #0
 800ac84:	ea4f 1828 	mov.w	r8, r8, asr #4
 800ac88:	4650      	mov	r0, sl
 800ac8a:	4659      	mov	r1, fp
 800ac8c:	4699      	mov	r9, r3
 800ac8e:	f1b8 0f01 	cmp.w	r8, #1
 800ac92:	dc21      	bgt.n	800acd8 <_strtod_l+0x528>
 800ac94:	b10b      	cbz	r3, 800ac9a <_strtod_l+0x4ea>
 800ac96:	4682      	mov	sl, r0
 800ac98:	468b      	mov	fp, r1
 800ac9a:	4b2f      	ldr	r3, [pc, #188]	; (800ad58 <_strtod_l+0x5a8>)
 800ac9c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800aca0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800aca4:	4652      	mov	r2, sl
 800aca6:	465b      	mov	r3, fp
 800aca8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800acac:	f7f5 fca4 	bl	80005f8 <__aeabi_dmul>
 800acb0:	4b2a      	ldr	r3, [pc, #168]	; (800ad5c <_strtod_l+0x5ac>)
 800acb2:	460a      	mov	r2, r1
 800acb4:	400b      	ands	r3, r1
 800acb6:	492a      	ldr	r1, [pc, #168]	; (800ad60 <_strtod_l+0x5b0>)
 800acb8:	428b      	cmp	r3, r1
 800acba:	4682      	mov	sl, r0
 800acbc:	d8bc      	bhi.n	800ac38 <_strtod_l+0x488>
 800acbe:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800acc2:	428b      	cmp	r3, r1
 800acc4:	bf86      	itte	hi
 800acc6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800ad64 <_strtod_l+0x5b4>
 800acca:	f04f 3aff 	movhi.w	sl, #4294967295
 800acce:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800acd2:	2300      	movs	r3, #0
 800acd4:	9304      	str	r3, [sp, #16]
 800acd6:	e084      	b.n	800ade2 <_strtod_l+0x632>
 800acd8:	f018 0f01 	tst.w	r8, #1
 800acdc:	d005      	beq.n	800acea <_strtod_l+0x53a>
 800acde:	9b04      	ldr	r3, [sp, #16]
 800ace0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace4:	f7f5 fc88 	bl	80005f8 <__aeabi_dmul>
 800ace8:	2301      	movs	r3, #1
 800acea:	9a04      	ldr	r2, [sp, #16]
 800acec:	3208      	adds	r2, #8
 800acee:	f109 0901 	add.w	r9, r9, #1
 800acf2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800acf6:	9204      	str	r2, [sp, #16]
 800acf8:	e7c9      	b.n	800ac8e <_strtod_l+0x4de>
 800acfa:	d0ea      	beq.n	800acd2 <_strtod_l+0x522>
 800acfc:	f1c8 0800 	rsb	r8, r8, #0
 800ad00:	f018 020f 	ands.w	r2, r8, #15
 800ad04:	d00a      	beq.n	800ad1c <_strtod_l+0x56c>
 800ad06:	4b13      	ldr	r3, [pc, #76]	; (800ad54 <_strtod_l+0x5a4>)
 800ad08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad0c:	4650      	mov	r0, sl
 800ad0e:	4659      	mov	r1, fp
 800ad10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad14:	f7f5 fd9a 	bl	800084c <__aeabi_ddiv>
 800ad18:	4682      	mov	sl, r0
 800ad1a:	468b      	mov	fp, r1
 800ad1c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800ad20:	d0d7      	beq.n	800acd2 <_strtod_l+0x522>
 800ad22:	f1b8 0f1f 	cmp.w	r8, #31
 800ad26:	dd1f      	ble.n	800ad68 <_strtod_l+0x5b8>
 800ad28:	2500      	movs	r5, #0
 800ad2a:	462e      	mov	r6, r5
 800ad2c:	9507      	str	r5, [sp, #28]
 800ad2e:	9505      	str	r5, [sp, #20]
 800ad30:	2322      	movs	r3, #34	; 0x22
 800ad32:	f04f 0a00 	mov.w	sl, #0
 800ad36:	f04f 0b00 	mov.w	fp, #0
 800ad3a:	6023      	str	r3, [r4, #0]
 800ad3c:	e786      	b.n	800ac4c <_strtod_l+0x49c>
 800ad3e:	bf00      	nop
 800ad40:	0800e519 	.word	0x0800e519
 800ad44:	0800e55c 	.word	0x0800e55c
 800ad48:	0800e511 	.word	0x0800e511
 800ad4c:	0800e69c 	.word	0x0800e69c
 800ad50:	0800e9b0 	.word	0x0800e9b0
 800ad54:	0800e890 	.word	0x0800e890
 800ad58:	0800e868 	.word	0x0800e868
 800ad5c:	7ff00000 	.word	0x7ff00000
 800ad60:	7ca00000 	.word	0x7ca00000
 800ad64:	7fefffff 	.word	0x7fefffff
 800ad68:	f018 0310 	ands.w	r3, r8, #16
 800ad6c:	bf18      	it	ne
 800ad6e:	236a      	movne	r3, #106	; 0x6a
 800ad70:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800b120 <_strtod_l+0x970>
 800ad74:	9304      	str	r3, [sp, #16]
 800ad76:	4650      	mov	r0, sl
 800ad78:	4659      	mov	r1, fp
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	f018 0f01 	tst.w	r8, #1
 800ad80:	d004      	beq.n	800ad8c <_strtod_l+0x5dc>
 800ad82:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ad86:	f7f5 fc37 	bl	80005f8 <__aeabi_dmul>
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800ad90:	f109 0908 	add.w	r9, r9, #8
 800ad94:	d1f2      	bne.n	800ad7c <_strtod_l+0x5cc>
 800ad96:	b10b      	cbz	r3, 800ad9c <_strtod_l+0x5ec>
 800ad98:	4682      	mov	sl, r0
 800ad9a:	468b      	mov	fp, r1
 800ad9c:	9b04      	ldr	r3, [sp, #16]
 800ad9e:	b1c3      	cbz	r3, 800add2 <_strtod_l+0x622>
 800ada0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ada4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	4659      	mov	r1, fp
 800adac:	dd11      	ble.n	800add2 <_strtod_l+0x622>
 800adae:	2b1f      	cmp	r3, #31
 800adb0:	f340 8124 	ble.w	800affc <_strtod_l+0x84c>
 800adb4:	2b34      	cmp	r3, #52	; 0x34
 800adb6:	bfde      	ittt	le
 800adb8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800adbc:	f04f 33ff 	movle.w	r3, #4294967295
 800adc0:	fa03 f202 	lslle.w	r2, r3, r2
 800adc4:	f04f 0a00 	mov.w	sl, #0
 800adc8:	bfcc      	ite	gt
 800adca:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800adce:	ea02 0b01 	andle.w	fp, r2, r1
 800add2:	2200      	movs	r2, #0
 800add4:	2300      	movs	r3, #0
 800add6:	4650      	mov	r0, sl
 800add8:	4659      	mov	r1, fp
 800adda:	f7f5 fe75 	bl	8000ac8 <__aeabi_dcmpeq>
 800adde:	2800      	cmp	r0, #0
 800ade0:	d1a2      	bne.n	800ad28 <_strtod_l+0x578>
 800ade2:	9b07      	ldr	r3, [sp, #28]
 800ade4:	9300      	str	r3, [sp, #0]
 800ade6:	9908      	ldr	r1, [sp, #32]
 800ade8:	462b      	mov	r3, r5
 800adea:	463a      	mov	r2, r7
 800adec:	4620      	mov	r0, r4
 800adee:	f002 f8fd 	bl	800cfec <__s2b>
 800adf2:	9007      	str	r0, [sp, #28]
 800adf4:	2800      	cmp	r0, #0
 800adf6:	f43f af1f 	beq.w	800ac38 <_strtod_l+0x488>
 800adfa:	9b05      	ldr	r3, [sp, #20]
 800adfc:	1b9e      	subs	r6, r3, r6
 800adfe:	9b06      	ldr	r3, [sp, #24]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	bfb4      	ite	lt
 800ae04:	4633      	movlt	r3, r6
 800ae06:	2300      	movge	r3, #0
 800ae08:	930c      	str	r3, [sp, #48]	; 0x30
 800ae0a:	9b06      	ldr	r3, [sp, #24]
 800ae0c:	2500      	movs	r5, #0
 800ae0e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ae12:	9312      	str	r3, [sp, #72]	; 0x48
 800ae14:	462e      	mov	r6, r5
 800ae16:	9b07      	ldr	r3, [sp, #28]
 800ae18:	4620      	mov	r0, r4
 800ae1a:	6859      	ldr	r1, [r3, #4]
 800ae1c:	f002 f83e 	bl	800ce9c <_Balloc>
 800ae20:	9005      	str	r0, [sp, #20]
 800ae22:	2800      	cmp	r0, #0
 800ae24:	f43f af0c 	beq.w	800ac40 <_strtod_l+0x490>
 800ae28:	9b07      	ldr	r3, [sp, #28]
 800ae2a:	691a      	ldr	r2, [r3, #16]
 800ae2c:	3202      	adds	r2, #2
 800ae2e:	f103 010c 	add.w	r1, r3, #12
 800ae32:	0092      	lsls	r2, r2, #2
 800ae34:	300c      	adds	r0, #12
 800ae36:	f7fe fd59 	bl	80098ec <memcpy>
 800ae3a:	ec4b ab10 	vmov	d0, sl, fp
 800ae3e:	aa1a      	add	r2, sp, #104	; 0x68
 800ae40:	a919      	add	r1, sp, #100	; 0x64
 800ae42:	4620      	mov	r0, r4
 800ae44:	f002 fc18 	bl	800d678 <__d2b>
 800ae48:	ec4b ab18 	vmov	d8, sl, fp
 800ae4c:	9018      	str	r0, [sp, #96]	; 0x60
 800ae4e:	2800      	cmp	r0, #0
 800ae50:	f43f aef6 	beq.w	800ac40 <_strtod_l+0x490>
 800ae54:	2101      	movs	r1, #1
 800ae56:	4620      	mov	r0, r4
 800ae58:	f002 f962 	bl	800d120 <__i2b>
 800ae5c:	4606      	mov	r6, r0
 800ae5e:	2800      	cmp	r0, #0
 800ae60:	f43f aeee 	beq.w	800ac40 <_strtod_l+0x490>
 800ae64:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ae66:	9904      	ldr	r1, [sp, #16]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	bfab      	itete	ge
 800ae6c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800ae6e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800ae70:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800ae72:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800ae76:	bfac      	ite	ge
 800ae78:	eb03 0902 	addge.w	r9, r3, r2
 800ae7c:	1ad7      	sublt	r7, r2, r3
 800ae7e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ae80:	eba3 0801 	sub.w	r8, r3, r1
 800ae84:	4490      	add	r8, r2
 800ae86:	4ba1      	ldr	r3, [pc, #644]	; (800b10c <_strtod_l+0x95c>)
 800ae88:	f108 38ff 	add.w	r8, r8, #4294967295
 800ae8c:	4598      	cmp	r8, r3
 800ae8e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ae92:	f280 80c7 	bge.w	800b024 <_strtod_l+0x874>
 800ae96:	eba3 0308 	sub.w	r3, r3, r8
 800ae9a:	2b1f      	cmp	r3, #31
 800ae9c:	eba2 0203 	sub.w	r2, r2, r3
 800aea0:	f04f 0101 	mov.w	r1, #1
 800aea4:	f300 80b1 	bgt.w	800b00a <_strtod_l+0x85a>
 800aea8:	fa01 f303 	lsl.w	r3, r1, r3
 800aeac:	930d      	str	r3, [sp, #52]	; 0x34
 800aeae:	2300      	movs	r3, #0
 800aeb0:	9308      	str	r3, [sp, #32]
 800aeb2:	eb09 0802 	add.w	r8, r9, r2
 800aeb6:	9b04      	ldr	r3, [sp, #16]
 800aeb8:	45c1      	cmp	r9, r8
 800aeba:	4417      	add	r7, r2
 800aebc:	441f      	add	r7, r3
 800aebe:	464b      	mov	r3, r9
 800aec0:	bfa8      	it	ge
 800aec2:	4643      	movge	r3, r8
 800aec4:	42bb      	cmp	r3, r7
 800aec6:	bfa8      	it	ge
 800aec8:	463b      	movge	r3, r7
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	bfc2      	ittt	gt
 800aece:	eba8 0803 	subgt.w	r8, r8, r3
 800aed2:	1aff      	subgt	r7, r7, r3
 800aed4:	eba9 0903 	subgt.w	r9, r9, r3
 800aed8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	dd17      	ble.n	800af0e <_strtod_l+0x75e>
 800aede:	4631      	mov	r1, r6
 800aee0:	461a      	mov	r2, r3
 800aee2:	4620      	mov	r0, r4
 800aee4:	f002 f9dc 	bl	800d2a0 <__pow5mult>
 800aee8:	4606      	mov	r6, r0
 800aeea:	2800      	cmp	r0, #0
 800aeec:	f43f aea8 	beq.w	800ac40 <_strtod_l+0x490>
 800aef0:	4601      	mov	r1, r0
 800aef2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800aef4:	4620      	mov	r0, r4
 800aef6:	f002 f929 	bl	800d14c <__multiply>
 800aefa:	900b      	str	r0, [sp, #44]	; 0x2c
 800aefc:	2800      	cmp	r0, #0
 800aefe:	f43f ae9f 	beq.w	800ac40 <_strtod_l+0x490>
 800af02:	9918      	ldr	r1, [sp, #96]	; 0x60
 800af04:	4620      	mov	r0, r4
 800af06:	f002 f809 	bl	800cf1c <_Bfree>
 800af0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af0c:	9318      	str	r3, [sp, #96]	; 0x60
 800af0e:	f1b8 0f00 	cmp.w	r8, #0
 800af12:	f300 808c 	bgt.w	800b02e <_strtod_l+0x87e>
 800af16:	9b06      	ldr	r3, [sp, #24]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	dd08      	ble.n	800af2e <_strtod_l+0x77e>
 800af1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800af1e:	9905      	ldr	r1, [sp, #20]
 800af20:	4620      	mov	r0, r4
 800af22:	f002 f9bd 	bl	800d2a0 <__pow5mult>
 800af26:	9005      	str	r0, [sp, #20]
 800af28:	2800      	cmp	r0, #0
 800af2a:	f43f ae89 	beq.w	800ac40 <_strtod_l+0x490>
 800af2e:	2f00      	cmp	r7, #0
 800af30:	dd08      	ble.n	800af44 <_strtod_l+0x794>
 800af32:	9905      	ldr	r1, [sp, #20]
 800af34:	463a      	mov	r2, r7
 800af36:	4620      	mov	r0, r4
 800af38:	f002 fa0c 	bl	800d354 <__lshift>
 800af3c:	9005      	str	r0, [sp, #20]
 800af3e:	2800      	cmp	r0, #0
 800af40:	f43f ae7e 	beq.w	800ac40 <_strtod_l+0x490>
 800af44:	f1b9 0f00 	cmp.w	r9, #0
 800af48:	dd08      	ble.n	800af5c <_strtod_l+0x7ac>
 800af4a:	4631      	mov	r1, r6
 800af4c:	464a      	mov	r2, r9
 800af4e:	4620      	mov	r0, r4
 800af50:	f002 fa00 	bl	800d354 <__lshift>
 800af54:	4606      	mov	r6, r0
 800af56:	2800      	cmp	r0, #0
 800af58:	f43f ae72 	beq.w	800ac40 <_strtod_l+0x490>
 800af5c:	9a05      	ldr	r2, [sp, #20]
 800af5e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800af60:	4620      	mov	r0, r4
 800af62:	f002 fa83 	bl	800d46c <__mdiff>
 800af66:	4605      	mov	r5, r0
 800af68:	2800      	cmp	r0, #0
 800af6a:	f43f ae69 	beq.w	800ac40 <_strtod_l+0x490>
 800af6e:	68c3      	ldr	r3, [r0, #12]
 800af70:	930b      	str	r3, [sp, #44]	; 0x2c
 800af72:	2300      	movs	r3, #0
 800af74:	60c3      	str	r3, [r0, #12]
 800af76:	4631      	mov	r1, r6
 800af78:	f002 fa5c 	bl	800d434 <__mcmp>
 800af7c:	2800      	cmp	r0, #0
 800af7e:	da60      	bge.n	800b042 <_strtod_l+0x892>
 800af80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af82:	ea53 030a 	orrs.w	r3, r3, sl
 800af86:	f040 8082 	bne.w	800b08e <_strtod_l+0x8de>
 800af8a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d17d      	bne.n	800b08e <_strtod_l+0x8de>
 800af92:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800af96:	0d1b      	lsrs	r3, r3, #20
 800af98:	051b      	lsls	r3, r3, #20
 800af9a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800af9e:	d976      	bls.n	800b08e <_strtod_l+0x8de>
 800afa0:	696b      	ldr	r3, [r5, #20]
 800afa2:	b913      	cbnz	r3, 800afaa <_strtod_l+0x7fa>
 800afa4:	692b      	ldr	r3, [r5, #16]
 800afa6:	2b01      	cmp	r3, #1
 800afa8:	dd71      	ble.n	800b08e <_strtod_l+0x8de>
 800afaa:	4629      	mov	r1, r5
 800afac:	2201      	movs	r2, #1
 800afae:	4620      	mov	r0, r4
 800afb0:	f002 f9d0 	bl	800d354 <__lshift>
 800afb4:	4631      	mov	r1, r6
 800afb6:	4605      	mov	r5, r0
 800afb8:	f002 fa3c 	bl	800d434 <__mcmp>
 800afbc:	2800      	cmp	r0, #0
 800afbe:	dd66      	ble.n	800b08e <_strtod_l+0x8de>
 800afc0:	9904      	ldr	r1, [sp, #16]
 800afc2:	4a53      	ldr	r2, [pc, #332]	; (800b110 <_strtod_l+0x960>)
 800afc4:	465b      	mov	r3, fp
 800afc6:	2900      	cmp	r1, #0
 800afc8:	f000 8081 	beq.w	800b0ce <_strtod_l+0x91e>
 800afcc:	ea02 010b 	and.w	r1, r2, fp
 800afd0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800afd4:	dc7b      	bgt.n	800b0ce <_strtod_l+0x91e>
 800afd6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800afda:	f77f aea9 	ble.w	800ad30 <_strtod_l+0x580>
 800afde:	4b4d      	ldr	r3, [pc, #308]	; (800b114 <_strtod_l+0x964>)
 800afe0:	4650      	mov	r0, sl
 800afe2:	4659      	mov	r1, fp
 800afe4:	2200      	movs	r2, #0
 800afe6:	f7f5 fb07 	bl	80005f8 <__aeabi_dmul>
 800afea:	460b      	mov	r3, r1
 800afec:	4303      	orrs	r3, r0
 800afee:	bf08      	it	eq
 800aff0:	2322      	moveq	r3, #34	; 0x22
 800aff2:	4682      	mov	sl, r0
 800aff4:	468b      	mov	fp, r1
 800aff6:	bf08      	it	eq
 800aff8:	6023      	streq	r3, [r4, #0]
 800affa:	e62b      	b.n	800ac54 <_strtod_l+0x4a4>
 800affc:	f04f 32ff 	mov.w	r2, #4294967295
 800b000:	fa02 f303 	lsl.w	r3, r2, r3
 800b004:	ea03 0a0a 	and.w	sl, r3, sl
 800b008:	e6e3      	b.n	800add2 <_strtod_l+0x622>
 800b00a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800b00e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800b012:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800b016:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800b01a:	fa01 f308 	lsl.w	r3, r1, r8
 800b01e:	9308      	str	r3, [sp, #32]
 800b020:	910d      	str	r1, [sp, #52]	; 0x34
 800b022:	e746      	b.n	800aeb2 <_strtod_l+0x702>
 800b024:	2300      	movs	r3, #0
 800b026:	9308      	str	r3, [sp, #32]
 800b028:	2301      	movs	r3, #1
 800b02a:	930d      	str	r3, [sp, #52]	; 0x34
 800b02c:	e741      	b.n	800aeb2 <_strtod_l+0x702>
 800b02e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b030:	4642      	mov	r2, r8
 800b032:	4620      	mov	r0, r4
 800b034:	f002 f98e 	bl	800d354 <__lshift>
 800b038:	9018      	str	r0, [sp, #96]	; 0x60
 800b03a:	2800      	cmp	r0, #0
 800b03c:	f47f af6b 	bne.w	800af16 <_strtod_l+0x766>
 800b040:	e5fe      	b.n	800ac40 <_strtod_l+0x490>
 800b042:	465f      	mov	r7, fp
 800b044:	d16e      	bne.n	800b124 <_strtod_l+0x974>
 800b046:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b048:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b04c:	b342      	cbz	r2, 800b0a0 <_strtod_l+0x8f0>
 800b04e:	4a32      	ldr	r2, [pc, #200]	; (800b118 <_strtod_l+0x968>)
 800b050:	4293      	cmp	r3, r2
 800b052:	d128      	bne.n	800b0a6 <_strtod_l+0x8f6>
 800b054:	9b04      	ldr	r3, [sp, #16]
 800b056:	4651      	mov	r1, sl
 800b058:	b1eb      	cbz	r3, 800b096 <_strtod_l+0x8e6>
 800b05a:	4b2d      	ldr	r3, [pc, #180]	; (800b110 <_strtod_l+0x960>)
 800b05c:	403b      	ands	r3, r7
 800b05e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b062:	f04f 32ff 	mov.w	r2, #4294967295
 800b066:	d819      	bhi.n	800b09c <_strtod_l+0x8ec>
 800b068:	0d1b      	lsrs	r3, r3, #20
 800b06a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b06e:	fa02 f303 	lsl.w	r3, r2, r3
 800b072:	4299      	cmp	r1, r3
 800b074:	d117      	bne.n	800b0a6 <_strtod_l+0x8f6>
 800b076:	4b29      	ldr	r3, [pc, #164]	; (800b11c <_strtod_l+0x96c>)
 800b078:	429f      	cmp	r7, r3
 800b07a:	d102      	bne.n	800b082 <_strtod_l+0x8d2>
 800b07c:	3101      	adds	r1, #1
 800b07e:	f43f addf 	beq.w	800ac40 <_strtod_l+0x490>
 800b082:	4b23      	ldr	r3, [pc, #140]	; (800b110 <_strtod_l+0x960>)
 800b084:	403b      	ands	r3, r7
 800b086:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b08a:	f04f 0a00 	mov.w	sl, #0
 800b08e:	9b04      	ldr	r3, [sp, #16]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d1a4      	bne.n	800afde <_strtod_l+0x82e>
 800b094:	e5de      	b.n	800ac54 <_strtod_l+0x4a4>
 800b096:	f04f 33ff 	mov.w	r3, #4294967295
 800b09a:	e7ea      	b.n	800b072 <_strtod_l+0x8c2>
 800b09c:	4613      	mov	r3, r2
 800b09e:	e7e8      	b.n	800b072 <_strtod_l+0x8c2>
 800b0a0:	ea53 030a 	orrs.w	r3, r3, sl
 800b0a4:	d08c      	beq.n	800afc0 <_strtod_l+0x810>
 800b0a6:	9b08      	ldr	r3, [sp, #32]
 800b0a8:	b1db      	cbz	r3, 800b0e2 <_strtod_l+0x932>
 800b0aa:	423b      	tst	r3, r7
 800b0ac:	d0ef      	beq.n	800b08e <_strtod_l+0x8de>
 800b0ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0b0:	9a04      	ldr	r2, [sp, #16]
 800b0b2:	4650      	mov	r0, sl
 800b0b4:	4659      	mov	r1, fp
 800b0b6:	b1c3      	cbz	r3, 800b0ea <_strtod_l+0x93a>
 800b0b8:	f7ff fb5c 	bl	800a774 <sulp>
 800b0bc:	4602      	mov	r2, r0
 800b0be:	460b      	mov	r3, r1
 800b0c0:	ec51 0b18 	vmov	r0, r1, d8
 800b0c4:	f7f5 f8e2 	bl	800028c <__adddf3>
 800b0c8:	4682      	mov	sl, r0
 800b0ca:	468b      	mov	fp, r1
 800b0cc:	e7df      	b.n	800b08e <_strtod_l+0x8de>
 800b0ce:	4013      	ands	r3, r2
 800b0d0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b0d4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b0d8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b0dc:	f04f 3aff 	mov.w	sl, #4294967295
 800b0e0:	e7d5      	b.n	800b08e <_strtod_l+0x8de>
 800b0e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b0e4:	ea13 0f0a 	tst.w	r3, sl
 800b0e8:	e7e0      	b.n	800b0ac <_strtod_l+0x8fc>
 800b0ea:	f7ff fb43 	bl	800a774 <sulp>
 800b0ee:	4602      	mov	r2, r0
 800b0f0:	460b      	mov	r3, r1
 800b0f2:	ec51 0b18 	vmov	r0, r1, d8
 800b0f6:	f7f5 f8c7 	bl	8000288 <__aeabi_dsub>
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	4682      	mov	sl, r0
 800b100:	468b      	mov	fp, r1
 800b102:	f7f5 fce1 	bl	8000ac8 <__aeabi_dcmpeq>
 800b106:	2800      	cmp	r0, #0
 800b108:	d0c1      	beq.n	800b08e <_strtod_l+0x8de>
 800b10a:	e611      	b.n	800ad30 <_strtod_l+0x580>
 800b10c:	fffffc02 	.word	0xfffffc02
 800b110:	7ff00000 	.word	0x7ff00000
 800b114:	39500000 	.word	0x39500000
 800b118:	000fffff 	.word	0x000fffff
 800b11c:	7fefffff 	.word	0x7fefffff
 800b120:	0800e570 	.word	0x0800e570
 800b124:	4631      	mov	r1, r6
 800b126:	4628      	mov	r0, r5
 800b128:	f002 fb02 	bl	800d730 <__ratio>
 800b12c:	ec59 8b10 	vmov	r8, r9, d0
 800b130:	ee10 0a10 	vmov	r0, s0
 800b134:	2200      	movs	r2, #0
 800b136:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b13a:	4649      	mov	r1, r9
 800b13c:	f7f5 fcd8 	bl	8000af0 <__aeabi_dcmple>
 800b140:	2800      	cmp	r0, #0
 800b142:	d07a      	beq.n	800b23a <_strtod_l+0xa8a>
 800b144:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b146:	2b00      	cmp	r3, #0
 800b148:	d04a      	beq.n	800b1e0 <_strtod_l+0xa30>
 800b14a:	4b95      	ldr	r3, [pc, #596]	; (800b3a0 <_strtod_l+0xbf0>)
 800b14c:	2200      	movs	r2, #0
 800b14e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b152:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800b3a0 <_strtod_l+0xbf0>
 800b156:	f04f 0800 	mov.w	r8, #0
 800b15a:	4b92      	ldr	r3, [pc, #584]	; (800b3a4 <_strtod_l+0xbf4>)
 800b15c:	403b      	ands	r3, r7
 800b15e:	930d      	str	r3, [sp, #52]	; 0x34
 800b160:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b162:	4b91      	ldr	r3, [pc, #580]	; (800b3a8 <_strtod_l+0xbf8>)
 800b164:	429a      	cmp	r2, r3
 800b166:	f040 80b0 	bne.w	800b2ca <_strtod_l+0xb1a>
 800b16a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b16e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800b172:	ec4b ab10 	vmov	d0, sl, fp
 800b176:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b17a:	f002 fa01 	bl	800d580 <__ulp>
 800b17e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b182:	ec53 2b10 	vmov	r2, r3, d0
 800b186:	f7f5 fa37 	bl	80005f8 <__aeabi_dmul>
 800b18a:	4652      	mov	r2, sl
 800b18c:	465b      	mov	r3, fp
 800b18e:	f7f5 f87d 	bl	800028c <__adddf3>
 800b192:	460b      	mov	r3, r1
 800b194:	4983      	ldr	r1, [pc, #524]	; (800b3a4 <_strtod_l+0xbf4>)
 800b196:	4a85      	ldr	r2, [pc, #532]	; (800b3ac <_strtod_l+0xbfc>)
 800b198:	4019      	ands	r1, r3
 800b19a:	4291      	cmp	r1, r2
 800b19c:	4682      	mov	sl, r0
 800b19e:	d960      	bls.n	800b262 <_strtod_l+0xab2>
 800b1a0:	ee18 3a90 	vmov	r3, s17
 800b1a4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b1a8:	4293      	cmp	r3, r2
 800b1aa:	d104      	bne.n	800b1b6 <_strtod_l+0xa06>
 800b1ac:	ee18 3a10 	vmov	r3, s16
 800b1b0:	3301      	adds	r3, #1
 800b1b2:	f43f ad45 	beq.w	800ac40 <_strtod_l+0x490>
 800b1b6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800b3b8 <_strtod_l+0xc08>
 800b1ba:	f04f 3aff 	mov.w	sl, #4294967295
 800b1be:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b1c0:	4620      	mov	r0, r4
 800b1c2:	f001 feab 	bl	800cf1c <_Bfree>
 800b1c6:	9905      	ldr	r1, [sp, #20]
 800b1c8:	4620      	mov	r0, r4
 800b1ca:	f001 fea7 	bl	800cf1c <_Bfree>
 800b1ce:	4631      	mov	r1, r6
 800b1d0:	4620      	mov	r0, r4
 800b1d2:	f001 fea3 	bl	800cf1c <_Bfree>
 800b1d6:	4629      	mov	r1, r5
 800b1d8:	4620      	mov	r0, r4
 800b1da:	f001 fe9f 	bl	800cf1c <_Bfree>
 800b1de:	e61a      	b.n	800ae16 <_strtod_l+0x666>
 800b1e0:	f1ba 0f00 	cmp.w	sl, #0
 800b1e4:	d11b      	bne.n	800b21e <_strtod_l+0xa6e>
 800b1e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b1ea:	b9f3      	cbnz	r3, 800b22a <_strtod_l+0xa7a>
 800b1ec:	4b6c      	ldr	r3, [pc, #432]	; (800b3a0 <_strtod_l+0xbf0>)
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	4640      	mov	r0, r8
 800b1f2:	4649      	mov	r1, r9
 800b1f4:	f7f5 fc72 	bl	8000adc <__aeabi_dcmplt>
 800b1f8:	b9d0      	cbnz	r0, 800b230 <_strtod_l+0xa80>
 800b1fa:	4640      	mov	r0, r8
 800b1fc:	4649      	mov	r1, r9
 800b1fe:	4b6c      	ldr	r3, [pc, #432]	; (800b3b0 <_strtod_l+0xc00>)
 800b200:	2200      	movs	r2, #0
 800b202:	f7f5 f9f9 	bl	80005f8 <__aeabi_dmul>
 800b206:	4680      	mov	r8, r0
 800b208:	4689      	mov	r9, r1
 800b20a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b20e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800b212:	9315      	str	r3, [sp, #84]	; 0x54
 800b214:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b218:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b21c:	e79d      	b.n	800b15a <_strtod_l+0x9aa>
 800b21e:	f1ba 0f01 	cmp.w	sl, #1
 800b222:	d102      	bne.n	800b22a <_strtod_l+0xa7a>
 800b224:	2f00      	cmp	r7, #0
 800b226:	f43f ad83 	beq.w	800ad30 <_strtod_l+0x580>
 800b22a:	4b62      	ldr	r3, [pc, #392]	; (800b3b4 <_strtod_l+0xc04>)
 800b22c:	2200      	movs	r2, #0
 800b22e:	e78e      	b.n	800b14e <_strtod_l+0x99e>
 800b230:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800b3b0 <_strtod_l+0xc00>
 800b234:	f04f 0800 	mov.w	r8, #0
 800b238:	e7e7      	b.n	800b20a <_strtod_l+0xa5a>
 800b23a:	4b5d      	ldr	r3, [pc, #372]	; (800b3b0 <_strtod_l+0xc00>)
 800b23c:	4640      	mov	r0, r8
 800b23e:	4649      	mov	r1, r9
 800b240:	2200      	movs	r2, #0
 800b242:	f7f5 f9d9 	bl	80005f8 <__aeabi_dmul>
 800b246:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b248:	4680      	mov	r8, r0
 800b24a:	4689      	mov	r9, r1
 800b24c:	b933      	cbnz	r3, 800b25c <_strtod_l+0xaac>
 800b24e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b252:	900e      	str	r0, [sp, #56]	; 0x38
 800b254:	930f      	str	r3, [sp, #60]	; 0x3c
 800b256:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b25a:	e7dd      	b.n	800b218 <_strtod_l+0xa68>
 800b25c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800b260:	e7f9      	b.n	800b256 <_strtod_l+0xaa6>
 800b262:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b266:	9b04      	ldr	r3, [sp, #16]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d1a8      	bne.n	800b1be <_strtod_l+0xa0e>
 800b26c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b270:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b272:	0d1b      	lsrs	r3, r3, #20
 800b274:	051b      	lsls	r3, r3, #20
 800b276:	429a      	cmp	r2, r3
 800b278:	d1a1      	bne.n	800b1be <_strtod_l+0xa0e>
 800b27a:	4640      	mov	r0, r8
 800b27c:	4649      	mov	r1, r9
 800b27e:	f7f5 fd1b 	bl	8000cb8 <__aeabi_d2lz>
 800b282:	f7f5 f98b 	bl	800059c <__aeabi_l2d>
 800b286:	4602      	mov	r2, r0
 800b288:	460b      	mov	r3, r1
 800b28a:	4640      	mov	r0, r8
 800b28c:	4649      	mov	r1, r9
 800b28e:	f7f4 fffb 	bl	8000288 <__aeabi_dsub>
 800b292:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b294:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b298:	ea43 030a 	orr.w	r3, r3, sl
 800b29c:	4313      	orrs	r3, r2
 800b29e:	4680      	mov	r8, r0
 800b2a0:	4689      	mov	r9, r1
 800b2a2:	d055      	beq.n	800b350 <_strtod_l+0xba0>
 800b2a4:	a336      	add	r3, pc, #216	; (adr r3, 800b380 <_strtod_l+0xbd0>)
 800b2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2aa:	f7f5 fc17 	bl	8000adc <__aeabi_dcmplt>
 800b2ae:	2800      	cmp	r0, #0
 800b2b0:	f47f acd0 	bne.w	800ac54 <_strtod_l+0x4a4>
 800b2b4:	a334      	add	r3, pc, #208	; (adr r3, 800b388 <_strtod_l+0xbd8>)
 800b2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ba:	4640      	mov	r0, r8
 800b2bc:	4649      	mov	r1, r9
 800b2be:	f7f5 fc2b 	bl	8000b18 <__aeabi_dcmpgt>
 800b2c2:	2800      	cmp	r0, #0
 800b2c4:	f43f af7b 	beq.w	800b1be <_strtod_l+0xa0e>
 800b2c8:	e4c4      	b.n	800ac54 <_strtod_l+0x4a4>
 800b2ca:	9b04      	ldr	r3, [sp, #16]
 800b2cc:	b333      	cbz	r3, 800b31c <_strtod_l+0xb6c>
 800b2ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b2d0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b2d4:	d822      	bhi.n	800b31c <_strtod_l+0xb6c>
 800b2d6:	a32e      	add	r3, pc, #184	; (adr r3, 800b390 <_strtod_l+0xbe0>)
 800b2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2dc:	4640      	mov	r0, r8
 800b2de:	4649      	mov	r1, r9
 800b2e0:	f7f5 fc06 	bl	8000af0 <__aeabi_dcmple>
 800b2e4:	b1a0      	cbz	r0, 800b310 <_strtod_l+0xb60>
 800b2e6:	4649      	mov	r1, r9
 800b2e8:	4640      	mov	r0, r8
 800b2ea:	f7f5 fc5d 	bl	8000ba8 <__aeabi_d2uiz>
 800b2ee:	2801      	cmp	r0, #1
 800b2f0:	bf38      	it	cc
 800b2f2:	2001      	movcc	r0, #1
 800b2f4:	f7f5 f906 	bl	8000504 <__aeabi_ui2d>
 800b2f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b2fa:	4680      	mov	r8, r0
 800b2fc:	4689      	mov	r9, r1
 800b2fe:	bb23      	cbnz	r3, 800b34a <_strtod_l+0xb9a>
 800b300:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b304:	9010      	str	r0, [sp, #64]	; 0x40
 800b306:	9311      	str	r3, [sp, #68]	; 0x44
 800b308:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b30c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b310:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b312:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b314:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b318:	1a9b      	subs	r3, r3, r2
 800b31a:	9309      	str	r3, [sp, #36]	; 0x24
 800b31c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b320:	eeb0 0a48 	vmov.f32	s0, s16
 800b324:	eef0 0a68 	vmov.f32	s1, s17
 800b328:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b32c:	f002 f928 	bl	800d580 <__ulp>
 800b330:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b334:	ec53 2b10 	vmov	r2, r3, d0
 800b338:	f7f5 f95e 	bl	80005f8 <__aeabi_dmul>
 800b33c:	ec53 2b18 	vmov	r2, r3, d8
 800b340:	f7f4 ffa4 	bl	800028c <__adddf3>
 800b344:	4682      	mov	sl, r0
 800b346:	468b      	mov	fp, r1
 800b348:	e78d      	b.n	800b266 <_strtod_l+0xab6>
 800b34a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800b34e:	e7db      	b.n	800b308 <_strtod_l+0xb58>
 800b350:	a311      	add	r3, pc, #68	; (adr r3, 800b398 <_strtod_l+0xbe8>)
 800b352:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b356:	f7f5 fbc1 	bl	8000adc <__aeabi_dcmplt>
 800b35a:	e7b2      	b.n	800b2c2 <_strtod_l+0xb12>
 800b35c:	2300      	movs	r3, #0
 800b35e:	930a      	str	r3, [sp, #40]	; 0x28
 800b360:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b362:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b364:	6013      	str	r3, [r2, #0]
 800b366:	f7ff ba6b 	b.w	800a840 <_strtod_l+0x90>
 800b36a:	2a65      	cmp	r2, #101	; 0x65
 800b36c:	f43f ab5f 	beq.w	800aa2e <_strtod_l+0x27e>
 800b370:	2a45      	cmp	r2, #69	; 0x45
 800b372:	f43f ab5c 	beq.w	800aa2e <_strtod_l+0x27e>
 800b376:	2301      	movs	r3, #1
 800b378:	f7ff bb94 	b.w	800aaa4 <_strtod_l+0x2f4>
 800b37c:	f3af 8000 	nop.w
 800b380:	94a03595 	.word	0x94a03595
 800b384:	3fdfffff 	.word	0x3fdfffff
 800b388:	35afe535 	.word	0x35afe535
 800b38c:	3fe00000 	.word	0x3fe00000
 800b390:	ffc00000 	.word	0xffc00000
 800b394:	41dfffff 	.word	0x41dfffff
 800b398:	94a03595 	.word	0x94a03595
 800b39c:	3fcfffff 	.word	0x3fcfffff
 800b3a0:	3ff00000 	.word	0x3ff00000
 800b3a4:	7ff00000 	.word	0x7ff00000
 800b3a8:	7fe00000 	.word	0x7fe00000
 800b3ac:	7c9fffff 	.word	0x7c9fffff
 800b3b0:	3fe00000 	.word	0x3fe00000
 800b3b4:	bff00000 	.word	0xbff00000
 800b3b8:	7fefffff 	.word	0x7fefffff

0800b3bc <_strtod_r>:
 800b3bc:	4b01      	ldr	r3, [pc, #4]	; (800b3c4 <_strtod_r+0x8>)
 800b3be:	f7ff b9f7 	b.w	800a7b0 <_strtod_l>
 800b3c2:	bf00      	nop
 800b3c4:	2000010c 	.word	0x2000010c

0800b3c8 <_strtol_l.constprop.0>:
 800b3c8:	2b01      	cmp	r3, #1
 800b3ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3ce:	d001      	beq.n	800b3d4 <_strtol_l.constprop.0+0xc>
 800b3d0:	2b24      	cmp	r3, #36	; 0x24
 800b3d2:	d906      	bls.n	800b3e2 <_strtol_l.constprop.0+0x1a>
 800b3d4:	f7fe fa60 	bl	8009898 <__errno>
 800b3d8:	2316      	movs	r3, #22
 800b3da:	6003      	str	r3, [r0, #0]
 800b3dc:	2000      	movs	r0, #0
 800b3de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3e2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b4c8 <_strtol_l.constprop.0+0x100>
 800b3e6:	460d      	mov	r5, r1
 800b3e8:	462e      	mov	r6, r5
 800b3ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b3ee:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b3f2:	f017 0708 	ands.w	r7, r7, #8
 800b3f6:	d1f7      	bne.n	800b3e8 <_strtol_l.constprop.0+0x20>
 800b3f8:	2c2d      	cmp	r4, #45	; 0x2d
 800b3fa:	d132      	bne.n	800b462 <_strtol_l.constprop.0+0x9a>
 800b3fc:	782c      	ldrb	r4, [r5, #0]
 800b3fe:	2701      	movs	r7, #1
 800b400:	1cb5      	adds	r5, r6, #2
 800b402:	2b00      	cmp	r3, #0
 800b404:	d05b      	beq.n	800b4be <_strtol_l.constprop.0+0xf6>
 800b406:	2b10      	cmp	r3, #16
 800b408:	d109      	bne.n	800b41e <_strtol_l.constprop.0+0x56>
 800b40a:	2c30      	cmp	r4, #48	; 0x30
 800b40c:	d107      	bne.n	800b41e <_strtol_l.constprop.0+0x56>
 800b40e:	782c      	ldrb	r4, [r5, #0]
 800b410:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b414:	2c58      	cmp	r4, #88	; 0x58
 800b416:	d14d      	bne.n	800b4b4 <_strtol_l.constprop.0+0xec>
 800b418:	786c      	ldrb	r4, [r5, #1]
 800b41a:	2310      	movs	r3, #16
 800b41c:	3502      	adds	r5, #2
 800b41e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b422:	f108 38ff 	add.w	r8, r8, #4294967295
 800b426:	f04f 0c00 	mov.w	ip, #0
 800b42a:	fbb8 f9f3 	udiv	r9, r8, r3
 800b42e:	4666      	mov	r6, ip
 800b430:	fb03 8a19 	mls	sl, r3, r9, r8
 800b434:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b438:	f1be 0f09 	cmp.w	lr, #9
 800b43c:	d816      	bhi.n	800b46c <_strtol_l.constprop.0+0xa4>
 800b43e:	4674      	mov	r4, lr
 800b440:	42a3      	cmp	r3, r4
 800b442:	dd24      	ble.n	800b48e <_strtol_l.constprop.0+0xc6>
 800b444:	f1bc 0f00 	cmp.w	ip, #0
 800b448:	db1e      	blt.n	800b488 <_strtol_l.constprop.0+0xc0>
 800b44a:	45b1      	cmp	r9, r6
 800b44c:	d31c      	bcc.n	800b488 <_strtol_l.constprop.0+0xc0>
 800b44e:	d101      	bne.n	800b454 <_strtol_l.constprop.0+0x8c>
 800b450:	45a2      	cmp	sl, r4
 800b452:	db19      	blt.n	800b488 <_strtol_l.constprop.0+0xc0>
 800b454:	fb06 4603 	mla	r6, r6, r3, r4
 800b458:	f04f 0c01 	mov.w	ip, #1
 800b45c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b460:	e7e8      	b.n	800b434 <_strtol_l.constprop.0+0x6c>
 800b462:	2c2b      	cmp	r4, #43	; 0x2b
 800b464:	bf04      	itt	eq
 800b466:	782c      	ldrbeq	r4, [r5, #0]
 800b468:	1cb5      	addeq	r5, r6, #2
 800b46a:	e7ca      	b.n	800b402 <_strtol_l.constprop.0+0x3a>
 800b46c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b470:	f1be 0f19 	cmp.w	lr, #25
 800b474:	d801      	bhi.n	800b47a <_strtol_l.constprop.0+0xb2>
 800b476:	3c37      	subs	r4, #55	; 0x37
 800b478:	e7e2      	b.n	800b440 <_strtol_l.constprop.0+0x78>
 800b47a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b47e:	f1be 0f19 	cmp.w	lr, #25
 800b482:	d804      	bhi.n	800b48e <_strtol_l.constprop.0+0xc6>
 800b484:	3c57      	subs	r4, #87	; 0x57
 800b486:	e7db      	b.n	800b440 <_strtol_l.constprop.0+0x78>
 800b488:	f04f 3cff 	mov.w	ip, #4294967295
 800b48c:	e7e6      	b.n	800b45c <_strtol_l.constprop.0+0x94>
 800b48e:	f1bc 0f00 	cmp.w	ip, #0
 800b492:	da05      	bge.n	800b4a0 <_strtol_l.constprop.0+0xd8>
 800b494:	2322      	movs	r3, #34	; 0x22
 800b496:	6003      	str	r3, [r0, #0]
 800b498:	4646      	mov	r6, r8
 800b49a:	b942      	cbnz	r2, 800b4ae <_strtol_l.constprop.0+0xe6>
 800b49c:	4630      	mov	r0, r6
 800b49e:	e79e      	b.n	800b3de <_strtol_l.constprop.0+0x16>
 800b4a0:	b107      	cbz	r7, 800b4a4 <_strtol_l.constprop.0+0xdc>
 800b4a2:	4276      	negs	r6, r6
 800b4a4:	2a00      	cmp	r2, #0
 800b4a6:	d0f9      	beq.n	800b49c <_strtol_l.constprop.0+0xd4>
 800b4a8:	f1bc 0f00 	cmp.w	ip, #0
 800b4ac:	d000      	beq.n	800b4b0 <_strtol_l.constprop.0+0xe8>
 800b4ae:	1e69      	subs	r1, r5, #1
 800b4b0:	6011      	str	r1, [r2, #0]
 800b4b2:	e7f3      	b.n	800b49c <_strtol_l.constprop.0+0xd4>
 800b4b4:	2430      	movs	r4, #48	; 0x30
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d1b1      	bne.n	800b41e <_strtol_l.constprop.0+0x56>
 800b4ba:	2308      	movs	r3, #8
 800b4bc:	e7af      	b.n	800b41e <_strtol_l.constprop.0+0x56>
 800b4be:	2c30      	cmp	r4, #48	; 0x30
 800b4c0:	d0a5      	beq.n	800b40e <_strtol_l.constprop.0+0x46>
 800b4c2:	230a      	movs	r3, #10
 800b4c4:	e7ab      	b.n	800b41e <_strtol_l.constprop.0+0x56>
 800b4c6:	bf00      	nop
 800b4c8:	0800e599 	.word	0x0800e599

0800b4cc <_strtol_r>:
 800b4cc:	f7ff bf7c 	b.w	800b3c8 <_strtol_l.constprop.0>

0800b4d0 <__swbuf_r>:
 800b4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4d2:	460e      	mov	r6, r1
 800b4d4:	4614      	mov	r4, r2
 800b4d6:	4605      	mov	r5, r0
 800b4d8:	b118      	cbz	r0, 800b4e2 <__swbuf_r+0x12>
 800b4da:	6983      	ldr	r3, [r0, #24]
 800b4dc:	b90b      	cbnz	r3, 800b4e2 <__swbuf_r+0x12>
 800b4de:	f001 f84b 	bl	800c578 <__sinit>
 800b4e2:	4b21      	ldr	r3, [pc, #132]	; (800b568 <__swbuf_r+0x98>)
 800b4e4:	429c      	cmp	r4, r3
 800b4e6:	d12b      	bne.n	800b540 <__swbuf_r+0x70>
 800b4e8:	686c      	ldr	r4, [r5, #4]
 800b4ea:	69a3      	ldr	r3, [r4, #24]
 800b4ec:	60a3      	str	r3, [r4, #8]
 800b4ee:	89a3      	ldrh	r3, [r4, #12]
 800b4f0:	071a      	lsls	r2, r3, #28
 800b4f2:	d52f      	bpl.n	800b554 <__swbuf_r+0x84>
 800b4f4:	6923      	ldr	r3, [r4, #16]
 800b4f6:	b36b      	cbz	r3, 800b554 <__swbuf_r+0x84>
 800b4f8:	6923      	ldr	r3, [r4, #16]
 800b4fa:	6820      	ldr	r0, [r4, #0]
 800b4fc:	1ac0      	subs	r0, r0, r3
 800b4fe:	6963      	ldr	r3, [r4, #20]
 800b500:	b2f6      	uxtb	r6, r6
 800b502:	4283      	cmp	r3, r0
 800b504:	4637      	mov	r7, r6
 800b506:	dc04      	bgt.n	800b512 <__swbuf_r+0x42>
 800b508:	4621      	mov	r1, r4
 800b50a:	4628      	mov	r0, r5
 800b50c:	f000 ffa0 	bl	800c450 <_fflush_r>
 800b510:	bb30      	cbnz	r0, 800b560 <__swbuf_r+0x90>
 800b512:	68a3      	ldr	r3, [r4, #8]
 800b514:	3b01      	subs	r3, #1
 800b516:	60a3      	str	r3, [r4, #8]
 800b518:	6823      	ldr	r3, [r4, #0]
 800b51a:	1c5a      	adds	r2, r3, #1
 800b51c:	6022      	str	r2, [r4, #0]
 800b51e:	701e      	strb	r6, [r3, #0]
 800b520:	6963      	ldr	r3, [r4, #20]
 800b522:	3001      	adds	r0, #1
 800b524:	4283      	cmp	r3, r0
 800b526:	d004      	beq.n	800b532 <__swbuf_r+0x62>
 800b528:	89a3      	ldrh	r3, [r4, #12]
 800b52a:	07db      	lsls	r3, r3, #31
 800b52c:	d506      	bpl.n	800b53c <__swbuf_r+0x6c>
 800b52e:	2e0a      	cmp	r6, #10
 800b530:	d104      	bne.n	800b53c <__swbuf_r+0x6c>
 800b532:	4621      	mov	r1, r4
 800b534:	4628      	mov	r0, r5
 800b536:	f000 ff8b 	bl	800c450 <_fflush_r>
 800b53a:	b988      	cbnz	r0, 800b560 <__swbuf_r+0x90>
 800b53c:	4638      	mov	r0, r7
 800b53e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b540:	4b0a      	ldr	r3, [pc, #40]	; (800b56c <__swbuf_r+0x9c>)
 800b542:	429c      	cmp	r4, r3
 800b544:	d101      	bne.n	800b54a <__swbuf_r+0x7a>
 800b546:	68ac      	ldr	r4, [r5, #8]
 800b548:	e7cf      	b.n	800b4ea <__swbuf_r+0x1a>
 800b54a:	4b09      	ldr	r3, [pc, #36]	; (800b570 <__swbuf_r+0xa0>)
 800b54c:	429c      	cmp	r4, r3
 800b54e:	bf08      	it	eq
 800b550:	68ec      	ldreq	r4, [r5, #12]
 800b552:	e7ca      	b.n	800b4ea <__swbuf_r+0x1a>
 800b554:	4621      	mov	r1, r4
 800b556:	4628      	mov	r0, r5
 800b558:	f000 f80c 	bl	800b574 <__swsetup_r>
 800b55c:	2800      	cmp	r0, #0
 800b55e:	d0cb      	beq.n	800b4f8 <__swbuf_r+0x28>
 800b560:	f04f 37ff 	mov.w	r7, #4294967295
 800b564:	e7ea      	b.n	800b53c <__swbuf_r+0x6c>
 800b566:	bf00      	nop
 800b568:	0800e74c 	.word	0x0800e74c
 800b56c:	0800e76c 	.word	0x0800e76c
 800b570:	0800e72c 	.word	0x0800e72c

0800b574 <__swsetup_r>:
 800b574:	4b32      	ldr	r3, [pc, #200]	; (800b640 <__swsetup_r+0xcc>)
 800b576:	b570      	push	{r4, r5, r6, lr}
 800b578:	681d      	ldr	r5, [r3, #0]
 800b57a:	4606      	mov	r6, r0
 800b57c:	460c      	mov	r4, r1
 800b57e:	b125      	cbz	r5, 800b58a <__swsetup_r+0x16>
 800b580:	69ab      	ldr	r3, [r5, #24]
 800b582:	b913      	cbnz	r3, 800b58a <__swsetup_r+0x16>
 800b584:	4628      	mov	r0, r5
 800b586:	f000 fff7 	bl	800c578 <__sinit>
 800b58a:	4b2e      	ldr	r3, [pc, #184]	; (800b644 <__swsetup_r+0xd0>)
 800b58c:	429c      	cmp	r4, r3
 800b58e:	d10f      	bne.n	800b5b0 <__swsetup_r+0x3c>
 800b590:	686c      	ldr	r4, [r5, #4]
 800b592:	89a3      	ldrh	r3, [r4, #12]
 800b594:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b598:	0719      	lsls	r1, r3, #28
 800b59a:	d42c      	bmi.n	800b5f6 <__swsetup_r+0x82>
 800b59c:	06dd      	lsls	r5, r3, #27
 800b59e:	d411      	bmi.n	800b5c4 <__swsetup_r+0x50>
 800b5a0:	2309      	movs	r3, #9
 800b5a2:	6033      	str	r3, [r6, #0]
 800b5a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b5a8:	81a3      	strh	r3, [r4, #12]
 800b5aa:	f04f 30ff 	mov.w	r0, #4294967295
 800b5ae:	e03e      	b.n	800b62e <__swsetup_r+0xba>
 800b5b0:	4b25      	ldr	r3, [pc, #148]	; (800b648 <__swsetup_r+0xd4>)
 800b5b2:	429c      	cmp	r4, r3
 800b5b4:	d101      	bne.n	800b5ba <__swsetup_r+0x46>
 800b5b6:	68ac      	ldr	r4, [r5, #8]
 800b5b8:	e7eb      	b.n	800b592 <__swsetup_r+0x1e>
 800b5ba:	4b24      	ldr	r3, [pc, #144]	; (800b64c <__swsetup_r+0xd8>)
 800b5bc:	429c      	cmp	r4, r3
 800b5be:	bf08      	it	eq
 800b5c0:	68ec      	ldreq	r4, [r5, #12]
 800b5c2:	e7e6      	b.n	800b592 <__swsetup_r+0x1e>
 800b5c4:	0758      	lsls	r0, r3, #29
 800b5c6:	d512      	bpl.n	800b5ee <__swsetup_r+0x7a>
 800b5c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b5ca:	b141      	cbz	r1, 800b5de <__swsetup_r+0x6a>
 800b5cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b5d0:	4299      	cmp	r1, r3
 800b5d2:	d002      	beq.n	800b5da <__swsetup_r+0x66>
 800b5d4:	4630      	mov	r0, r6
 800b5d6:	f002 f939 	bl	800d84c <_free_r>
 800b5da:	2300      	movs	r3, #0
 800b5dc:	6363      	str	r3, [r4, #52]	; 0x34
 800b5de:	89a3      	ldrh	r3, [r4, #12]
 800b5e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b5e4:	81a3      	strh	r3, [r4, #12]
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	6063      	str	r3, [r4, #4]
 800b5ea:	6923      	ldr	r3, [r4, #16]
 800b5ec:	6023      	str	r3, [r4, #0]
 800b5ee:	89a3      	ldrh	r3, [r4, #12]
 800b5f0:	f043 0308 	orr.w	r3, r3, #8
 800b5f4:	81a3      	strh	r3, [r4, #12]
 800b5f6:	6923      	ldr	r3, [r4, #16]
 800b5f8:	b94b      	cbnz	r3, 800b60e <__swsetup_r+0x9a>
 800b5fa:	89a3      	ldrh	r3, [r4, #12]
 800b5fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b600:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b604:	d003      	beq.n	800b60e <__swsetup_r+0x9a>
 800b606:	4621      	mov	r1, r4
 800b608:	4630      	mov	r0, r6
 800b60a:	f001 fbed 	bl	800cde8 <__smakebuf_r>
 800b60e:	89a0      	ldrh	r0, [r4, #12]
 800b610:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b614:	f010 0301 	ands.w	r3, r0, #1
 800b618:	d00a      	beq.n	800b630 <__swsetup_r+0xbc>
 800b61a:	2300      	movs	r3, #0
 800b61c:	60a3      	str	r3, [r4, #8]
 800b61e:	6963      	ldr	r3, [r4, #20]
 800b620:	425b      	negs	r3, r3
 800b622:	61a3      	str	r3, [r4, #24]
 800b624:	6923      	ldr	r3, [r4, #16]
 800b626:	b943      	cbnz	r3, 800b63a <__swsetup_r+0xc6>
 800b628:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b62c:	d1ba      	bne.n	800b5a4 <__swsetup_r+0x30>
 800b62e:	bd70      	pop	{r4, r5, r6, pc}
 800b630:	0781      	lsls	r1, r0, #30
 800b632:	bf58      	it	pl
 800b634:	6963      	ldrpl	r3, [r4, #20]
 800b636:	60a3      	str	r3, [r4, #8]
 800b638:	e7f4      	b.n	800b624 <__swsetup_r+0xb0>
 800b63a:	2000      	movs	r0, #0
 800b63c:	e7f7      	b.n	800b62e <__swsetup_r+0xba>
 800b63e:	bf00      	nop
 800b640:	200000a4 	.word	0x200000a4
 800b644:	0800e74c 	.word	0x0800e74c
 800b648:	0800e76c 	.word	0x0800e76c
 800b64c:	0800e72c 	.word	0x0800e72c

0800b650 <quorem>:
 800b650:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b654:	6903      	ldr	r3, [r0, #16]
 800b656:	690c      	ldr	r4, [r1, #16]
 800b658:	42a3      	cmp	r3, r4
 800b65a:	4607      	mov	r7, r0
 800b65c:	f2c0 8081 	blt.w	800b762 <quorem+0x112>
 800b660:	3c01      	subs	r4, #1
 800b662:	f101 0814 	add.w	r8, r1, #20
 800b666:	f100 0514 	add.w	r5, r0, #20
 800b66a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b66e:	9301      	str	r3, [sp, #4]
 800b670:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b674:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b678:	3301      	adds	r3, #1
 800b67a:	429a      	cmp	r2, r3
 800b67c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b680:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b684:	fbb2 f6f3 	udiv	r6, r2, r3
 800b688:	d331      	bcc.n	800b6ee <quorem+0x9e>
 800b68a:	f04f 0e00 	mov.w	lr, #0
 800b68e:	4640      	mov	r0, r8
 800b690:	46ac      	mov	ip, r5
 800b692:	46f2      	mov	sl, lr
 800b694:	f850 2b04 	ldr.w	r2, [r0], #4
 800b698:	b293      	uxth	r3, r2
 800b69a:	fb06 e303 	mla	r3, r6, r3, lr
 800b69e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b6a2:	b29b      	uxth	r3, r3
 800b6a4:	ebaa 0303 	sub.w	r3, sl, r3
 800b6a8:	f8dc a000 	ldr.w	sl, [ip]
 800b6ac:	0c12      	lsrs	r2, r2, #16
 800b6ae:	fa13 f38a 	uxtah	r3, r3, sl
 800b6b2:	fb06 e202 	mla	r2, r6, r2, lr
 800b6b6:	9300      	str	r3, [sp, #0]
 800b6b8:	9b00      	ldr	r3, [sp, #0]
 800b6ba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b6be:	b292      	uxth	r2, r2
 800b6c0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b6c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b6c8:	f8bd 3000 	ldrh.w	r3, [sp]
 800b6cc:	4581      	cmp	r9, r0
 800b6ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b6d2:	f84c 3b04 	str.w	r3, [ip], #4
 800b6d6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b6da:	d2db      	bcs.n	800b694 <quorem+0x44>
 800b6dc:	f855 300b 	ldr.w	r3, [r5, fp]
 800b6e0:	b92b      	cbnz	r3, 800b6ee <quorem+0x9e>
 800b6e2:	9b01      	ldr	r3, [sp, #4]
 800b6e4:	3b04      	subs	r3, #4
 800b6e6:	429d      	cmp	r5, r3
 800b6e8:	461a      	mov	r2, r3
 800b6ea:	d32e      	bcc.n	800b74a <quorem+0xfa>
 800b6ec:	613c      	str	r4, [r7, #16]
 800b6ee:	4638      	mov	r0, r7
 800b6f0:	f001 fea0 	bl	800d434 <__mcmp>
 800b6f4:	2800      	cmp	r0, #0
 800b6f6:	db24      	blt.n	800b742 <quorem+0xf2>
 800b6f8:	3601      	adds	r6, #1
 800b6fa:	4628      	mov	r0, r5
 800b6fc:	f04f 0c00 	mov.w	ip, #0
 800b700:	f858 2b04 	ldr.w	r2, [r8], #4
 800b704:	f8d0 e000 	ldr.w	lr, [r0]
 800b708:	b293      	uxth	r3, r2
 800b70a:	ebac 0303 	sub.w	r3, ip, r3
 800b70e:	0c12      	lsrs	r2, r2, #16
 800b710:	fa13 f38e 	uxtah	r3, r3, lr
 800b714:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b718:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b71c:	b29b      	uxth	r3, r3
 800b71e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b722:	45c1      	cmp	r9, r8
 800b724:	f840 3b04 	str.w	r3, [r0], #4
 800b728:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b72c:	d2e8      	bcs.n	800b700 <quorem+0xb0>
 800b72e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b732:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b736:	b922      	cbnz	r2, 800b742 <quorem+0xf2>
 800b738:	3b04      	subs	r3, #4
 800b73a:	429d      	cmp	r5, r3
 800b73c:	461a      	mov	r2, r3
 800b73e:	d30a      	bcc.n	800b756 <quorem+0x106>
 800b740:	613c      	str	r4, [r7, #16]
 800b742:	4630      	mov	r0, r6
 800b744:	b003      	add	sp, #12
 800b746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b74a:	6812      	ldr	r2, [r2, #0]
 800b74c:	3b04      	subs	r3, #4
 800b74e:	2a00      	cmp	r2, #0
 800b750:	d1cc      	bne.n	800b6ec <quorem+0x9c>
 800b752:	3c01      	subs	r4, #1
 800b754:	e7c7      	b.n	800b6e6 <quorem+0x96>
 800b756:	6812      	ldr	r2, [r2, #0]
 800b758:	3b04      	subs	r3, #4
 800b75a:	2a00      	cmp	r2, #0
 800b75c:	d1f0      	bne.n	800b740 <quorem+0xf0>
 800b75e:	3c01      	subs	r4, #1
 800b760:	e7eb      	b.n	800b73a <quorem+0xea>
 800b762:	2000      	movs	r0, #0
 800b764:	e7ee      	b.n	800b744 <quorem+0xf4>
	...

0800b768 <_dtoa_r>:
 800b768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b76c:	ed2d 8b04 	vpush	{d8-d9}
 800b770:	ec57 6b10 	vmov	r6, r7, d0
 800b774:	b093      	sub	sp, #76	; 0x4c
 800b776:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b778:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b77c:	9106      	str	r1, [sp, #24]
 800b77e:	ee10 aa10 	vmov	sl, s0
 800b782:	4604      	mov	r4, r0
 800b784:	9209      	str	r2, [sp, #36]	; 0x24
 800b786:	930c      	str	r3, [sp, #48]	; 0x30
 800b788:	46bb      	mov	fp, r7
 800b78a:	b975      	cbnz	r5, 800b7aa <_dtoa_r+0x42>
 800b78c:	2010      	movs	r0, #16
 800b78e:	f001 fb6b 	bl	800ce68 <malloc>
 800b792:	4602      	mov	r2, r0
 800b794:	6260      	str	r0, [r4, #36]	; 0x24
 800b796:	b920      	cbnz	r0, 800b7a2 <_dtoa_r+0x3a>
 800b798:	4ba7      	ldr	r3, [pc, #668]	; (800ba38 <_dtoa_r+0x2d0>)
 800b79a:	21ea      	movs	r1, #234	; 0xea
 800b79c:	48a7      	ldr	r0, [pc, #668]	; (800ba3c <_dtoa_r+0x2d4>)
 800b79e:	f002 fc79 	bl	800e094 <__assert_func>
 800b7a2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b7a6:	6005      	str	r5, [r0, #0]
 800b7a8:	60c5      	str	r5, [r0, #12]
 800b7aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b7ac:	6819      	ldr	r1, [r3, #0]
 800b7ae:	b151      	cbz	r1, 800b7c6 <_dtoa_r+0x5e>
 800b7b0:	685a      	ldr	r2, [r3, #4]
 800b7b2:	604a      	str	r2, [r1, #4]
 800b7b4:	2301      	movs	r3, #1
 800b7b6:	4093      	lsls	r3, r2
 800b7b8:	608b      	str	r3, [r1, #8]
 800b7ba:	4620      	mov	r0, r4
 800b7bc:	f001 fbae 	bl	800cf1c <_Bfree>
 800b7c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	601a      	str	r2, [r3, #0]
 800b7c6:	1e3b      	subs	r3, r7, #0
 800b7c8:	bfaa      	itet	ge
 800b7ca:	2300      	movge	r3, #0
 800b7cc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b7d0:	f8c8 3000 	strge.w	r3, [r8]
 800b7d4:	4b9a      	ldr	r3, [pc, #616]	; (800ba40 <_dtoa_r+0x2d8>)
 800b7d6:	bfbc      	itt	lt
 800b7d8:	2201      	movlt	r2, #1
 800b7da:	f8c8 2000 	strlt.w	r2, [r8]
 800b7de:	ea33 030b 	bics.w	r3, r3, fp
 800b7e2:	d11b      	bne.n	800b81c <_dtoa_r+0xb4>
 800b7e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b7e6:	f242 730f 	movw	r3, #9999	; 0x270f
 800b7ea:	6013      	str	r3, [r2, #0]
 800b7ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b7f0:	4333      	orrs	r3, r6
 800b7f2:	f000 8592 	beq.w	800c31a <_dtoa_r+0xbb2>
 800b7f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b7f8:	b963      	cbnz	r3, 800b814 <_dtoa_r+0xac>
 800b7fa:	4b92      	ldr	r3, [pc, #584]	; (800ba44 <_dtoa_r+0x2dc>)
 800b7fc:	e022      	b.n	800b844 <_dtoa_r+0xdc>
 800b7fe:	4b92      	ldr	r3, [pc, #584]	; (800ba48 <_dtoa_r+0x2e0>)
 800b800:	9301      	str	r3, [sp, #4]
 800b802:	3308      	adds	r3, #8
 800b804:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b806:	6013      	str	r3, [r2, #0]
 800b808:	9801      	ldr	r0, [sp, #4]
 800b80a:	b013      	add	sp, #76	; 0x4c
 800b80c:	ecbd 8b04 	vpop	{d8-d9}
 800b810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b814:	4b8b      	ldr	r3, [pc, #556]	; (800ba44 <_dtoa_r+0x2dc>)
 800b816:	9301      	str	r3, [sp, #4]
 800b818:	3303      	adds	r3, #3
 800b81a:	e7f3      	b.n	800b804 <_dtoa_r+0x9c>
 800b81c:	2200      	movs	r2, #0
 800b81e:	2300      	movs	r3, #0
 800b820:	4650      	mov	r0, sl
 800b822:	4659      	mov	r1, fp
 800b824:	f7f5 f950 	bl	8000ac8 <__aeabi_dcmpeq>
 800b828:	ec4b ab19 	vmov	d9, sl, fp
 800b82c:	4680      	mov	r8, r0
 800b82e:	b158      	cbz	r0, 800b848 <_dtoa_r+0xe0>
 800b830:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b832:	2301      	movs	r3, #1
 800b834:	6013      	str	r3, [r2, #0]
 800b836:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b838:	2b00      	cmp	r3, #0
 800b83a:	f000 856b 	beq.w	800c314 <_dtoa_r+0xbac>
 800b83e:	4883      	ldr	r0, [pc, #524]	; (800ba4c <_dtoa_r+0x2e4>)
 800b840:	6018      	str	r0, [r3, #0]
 800b842:	1e43      	subs	r3, r0, #1
 800b844:	9301      	str	r3, [sp, #4]
 800b846:	e7df      	b.n	800b808 <_dtoa_r+0xa0>
 800b848:	ec4b ab10 	vmov	d0, sl, fp
 800b84c:	aa10      	add	r2, sp, #64	; 0x40
 800b84e:	a911      	add	r1, sp, #68	; 0x44
 800b850:	4620      	mov	r0, r4
 800b852:	f001 ff11 	bl	800d678 <__d2b>
 800b856:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b85a:	ee08 0a10 	vmov	s16, r0
 800b85e:	2d00      	cmp	r5, #0
 800b860:	f000 8084 	beq.w	800b96c <_dtoa_r+0x204>
 800b864:	ee19 3a90 	vmov	r3, s19
 800b868:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b86c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b870:	4656      	mov	r6, sl
 800b872:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b876:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b87a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b87e:	4b74      	ldr	r3, [pc, #464]	; (800ba50 <_dtoa_r+0x2e8>)
 800b880:	2200      	movs	r2, #0
 800b882:	4630      	mov	r0, r6
 800b884:	4639      	mov	r1, r7
 800b886:	f7f4 fcff 	bl	8000288 <__aeabi_dsub>
 800b88a:	a365      	add	r3, pc, #404	; (adr r3, 800ba20 <_dtoa_r+0x2b8>)
 800b88c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b890:	f7f4 feb2 	bl	80005f8 <__aeabi_dmul>
 800b894:	a364      	add	r3, pc, #400	; (adr r3, 800ba28 <_dtoa_r+0x2c0>)
 800b896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b89a:	f7f4 fcf7 	bl	800028c <__adddf3>
 800b89e:	4606      	mov	r6, r0
 800b8a0:	4628      	mov	r0, r5
 800b8a2:	460f      	mov	r7, r1
 800b8a4:	f7f4 fe3e 	bl	8000524 <__aeabi_i2d>
 800b8a8:	a361      	add	r3, pc, #388	; (adr r3, 800ba30 <_dtoa_r+0x2c8>)
 800b8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ae:	f7f4 fea3 	bl	80005f8 <__aeabi_dmul>
 800b8b2:	4602      	mov	r2, r0
 800b8b4:	460b      	mov	r3, r1
 800b8b6:	4630      	mov	r0, r6
 800b8b8:	4639      	mov	r1, r7
 800b8ba:	f7f4 fce7 	bl	800028c <__adddf3>
 800b8be:	4606      	mov	r6, r0
 800b8c0:	460f      	mov	r7, r1
 800b8c2:	f7f5 f949 	bl	8000b58 <__aeabi_d2iz>
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	9000      	str	r0, [sp, #0]
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	4630      	mov	r0, r6
 800b8ce:	4639      	mov	r1, r7
 800b8d0:	f7f5 f904 	bl	8000adc <__aeabi_dcmplt>
 800b8d4:	b150      	cbz	r0, 800b8ec <_dtoa_r+0x184>
 800b8d6:	9800      	ldr	r0, [sp, #0]
 800b8d8:	f7f4 fe24 	bl	8000524 <__aeabi_i2d>
 800b8dc:	4632      	mov	r2, r6
 800b8de:	463b      	mov	r3, r7
 800b8e0:	f7f5 f8f2 	bl	8000ac8 <__aeabi_dcmpeq>
 800b8e4:	b910      	cbnz	r0, 800b8ec <_dtoa_r+0x184>
 800b8e6:	9b00      	ldr	r3, [sp, #0]
 800b8e8:	3b01      	subs	r3, #1
 800b8ea:	9300      	str	r3, [sp, #0]
 800b8ec:	9b00      	ldr	r3, [sp, #0]
 800b8ee:	2b16      	cmp	r3, #22
 800b8f0:	d85a      	bhi.n	800b9a8 <_dtoa_r+0x240>
 800b8f2:	9a00      	ldr	r2, [sp, #0]
 800b8f4:	4b57      	ldr	r3, [pc, #348]	; (800ba54 <_dtoa_r+0x2ec>)
 800b8f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8fe:	ec51 0b19 	vmov	r0, r1, d9
 800b902:	f7f5 f8eb 	bl	8000adc <__aeabi_dcmplt>
 800b906:	2800      	cmp	r0, #0
 800b908:	d050      	beq.n	800b9ac <_dtoa_r+0x244>
 800b90a:	9b00      	ldr	r3, [sp, #0]
 800b90c:	3b01      	subs	r3, #1
 800b90e:	9300      	str	r3, [sp, #0]
 800b910:	2300      	movs	r3, #0
 800b912:	930b      	str	r3, [sp, #44]	; 0x2c
 800b914:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b916:	1b5d      	subs	r5, r3, r5
 800b918:	1e6b      	subs	r3, r5, #1
 800b91a:	9305      	str	r3, [sp, #20]
 800b91c:	bf45      	ittet	mi
 800b91e:	f1c5 0301 	rsbmi	r3, r5, #1
 800b922:	9304      	strmi	r3, [sp, #16]
 800b924:	2300      	movpl	r3, #0
 800b926:	2300      	movmi	r3, #0
 800b928:	bf4c      	ite	mi
 800b92a:	9305      	strmi	r3, [sp, #20]
 800b92c:	9304      	strpl	r3, [sp, #16]
 800b92e:	9b00      	ldr	r3, [sp, #0]
 800b930:	2b00      	cmp	r3, #0
 800b932:	db3d      	blt.n	800b9b0 <_dtoa_r+0x248>
 800b934:	9b05      	ldr	r3, [sp, #20]
 800b936:	9a00      	ldr	r2, [sp, #0]
 800b938:	920a      	str	r2, [sp, #40]	; 0x28
 800b93a:	4413      	add	r3, r2
 800b93c:	9305      	str	r3, [sp, #20]
 800b93e:	2300      	movs	r3, #0
 800b940:	9307      	str	r3, [sp, #28]
 800b942:	9b06      	ldr	r3, [sp, #24]
 800b944:	2b09      	cmp	r3, #9
 800b946:	f200 8089 	bhi.w	800ba5c <_dtoa_r+0x2f4>
 800b94a:	2b05      	cmp	r3, #5
 800b94c:	bfc4      	itt	gt
 800b94e:	3b04      	subgt	r3, #4
 800b950:	9306      	strgt	r3, [sp, #24]
 800b952:	9b06      	ldr	r3, [sp, #24]
 800b954:	f1a3 0302 	sub.w	r3, r3, #2
 800b958:	bfcc      	ite	gt
 800b95a:	2500      	movgt	r5, #0
 800b95c:	2501      	movle	r5, #1
 800b95e:	2b03      	cmp	r3, #3
 800b960:	f200 8087 	bhi.w	800ba72 <_dtoa_r+0x30a>
 800b964:	e8df f003 	tbb	[pc, r3]
 800b968:	59383a2d 	.word	0x59383a2d
 800b96c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b970:	441d      	add	r5, r3
 800b972:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b976:	2b20      	cmp	r3, #32
 800b978:	bfc1      	itttt	gt
 800b97a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b97e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b982:	fa0b f303 	lslgt.w	r3, fp, r3
 800b986:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b98a:	bfda      	itte	le
 800b98c:	f1c3 0320 	rsble	r3, r3, #32
 800b990:	fa06 f003 	lslle.w	r0, r6, r3
 800b994:	4318      	orrgt	r0, r3
 800b996:	f7f4 fdb5 	bl	8000504 <__aeabi_ui2d>
 800b99a:	2301      	movs	r3, #1
 800b99c:	4606      	mov	r6, r0
 800b99e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b9a2:	3d01      	subs	r5, #1
 800b9a4:	930e      	str	r3, [sp, #56]	; 0x38
 800b9a6:	e76a      	b.n	800b87e <_dtoa_r+0x116>
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	e7b2      	b.n	800b912 <_dtoa_r+0x1aa>
 800b9ac:	900b      	str	r0, [sp, #44]	; 0x2c
 800b9ae:	e7b1      	b.n	800b914 <_dtoa_r+0x1ac>
 800b9b0:	9b04      	ldr	r3, [sp, #16]
 800b9b2:	9a00      	ldr	r2, [sp, #0]
 800b9b4:	1a9b      	subs	r3, r3, r2
 800b9b6:	9304      	str	r3, [sp, #16]
 800b9b8:	4253      	negs	r3, r2
 800b9ba:	9307      	str	r3, [sp, #28]
 800b9bc:	2300      	movs	r3, #0
 800b9be:	930a      	str	r3, [sp, #40]	; 0x28
 800b9c0:	e7bf      	b.n	800b942 <_dtoa_r+0x1da>
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	9308      	str	r3, [sp, #32]
 800b9c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	dc55      	bgt.n	800ba78 <_dtoa_r+0x310>
 800b9cc:	2301      	movs	r3, #1
 800b9ce:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b9d2:	461a      	mov	r2, r3
 800b9d4:	9209      	str	r2, [sp, #36]	; 0x24
 800b9d6:	e00c      	b.n	800b9f2 <_dtoa_r+0x28a>
 800b9d8:	2301      	movs	r3, #1
 800b9da:	e7f3      	b.n	800b9c4 <_dtoa_r+0x25c>
 800b9dc:	2300      	movs	r3, #0
 800b9de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b9e0:	9308      	str	r3, [sp, #32]
 800b9e2:	9b00      	ldr	r3, [sp, #0]
 800b9e4:	4413      	add	r3, r2
 800b9e6:	9302      	str	r3, [sp, #8]
 800b9e8:	3301      	adds	r3, #1
 800b9ea:	2b01      	cmp	r3, #1
 800b9ec:	9303      	str	r3, [sp, #12]
 800b9ee:	bfb8      	it	lt
 800b9f0:	2301      	movlt	r3, #1
 800b9f2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	6042      	str	r2, [r0, #4]
 800b9f8:	2204      	movs	r2, #4
 800b9fa:	f102 0614 	add.w	r6, r2, #20
 800b9fe:	429e      	cmp	r6, r3
 800ba00:	6841      	ldr	r1, [r0, #4]
 800ba02:	d93d      	bls.n	800ba80 <_dtoa_r+0x318>
 800ba04:	4620      	mov	r0, r4
 800ba06:	f001 fa49 	bl	800ce9c <_Balloc>
 800ba0a:	9001      	str	r0, [sp, #4]
 800ba0c:	2800      	cmp	r0, #0
 800ba0e:	d13b      	bne.n	800ba88 <_dtoa_r+0x320>
 800ba10:	4b11      	ldr	r3, [pc, #68]	; (800ba58 <_dtoa_r+0x2f0>)
 800ba12:	4602      	mov	r2, r0
 800ba14:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ba18:	e6c0      	b.n	800b79c <_dtoa_r+0x34>
 800ba1a:	2301      	movs	r3, #1
 800ba1c:	e7df      	b.n	800b9de <_dtoa_r+0x276>
 800ba1e:	bf00      	nop
 800ba20:	636f4361 	.word	0x636f4361
 800ba24:	3fd287a7 	.word	0x3fd287a7
 800ba28:	8b60c8b3 	.word	0x8b60c8b3
 800ba2c:	3fc68a28 	.word	0x3fc68a28
 800ba30:	509f79fb 	.word	0x509f79fb
 800ba34:	3fd34413 	.word	0x3fd34413
 800ba38:	0800e6a6 	.word	0x0800e6a6
 800ba3c:	0800e6bd 	.word	0x0800e6bd
 800ba40:	7ff00000 	.word	0x7ff00000
 800ba44:	0800e6a2 	.word	0x0800e6a2
 800ba48:	0800e699 	.word	0x0800e699
 800ba4c:	0800e51d 	.word	0x0800e51d
 800ba50:	3ff80000 	.word	0x3ff80000
 800ba54:	0800e890 	.word	0x0800e890
 800ba58:	0800e718 	.word	0x0800e718
 800ba5c:	2501      	movs	r5, #1
 800ba5e:	2300      	movs	r3, #0
 800ba60:	9306      	str	r3, [sp, #24]
 800ba62:	9508      	str	r5, [sp, #32]
 800ba64:	f04f 33ff 	mov.w	r3, #4294967295
 800ba68:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	2312      	movs	r3, #18
 800ba70:	e7b0      	b.n	800b9d4 <_dtoa_r+0x26c>
 800ba72:	2301      	movs	r3, #1
 800ba74:	9308      	str	r3, [sp, #32]
 800ba76:	e7f5      	b.n	800ba64 <_dtoa_r+0x2fc>
 800ba78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba7a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ba7e:	e7b8      	b.n	800b9f2 <_dtoa_r+0x28a>
 800ba80:	3101      	adds	r1, #1
 800ba82:	6041      	str	r1, [r0, #4]
 800ba84:	0052      	lsls	r2, r2, #1
 800ba86:	e7b8      	b.n	800b9fa <_dtoa_r+0x292>
 800ba88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba8a:	9a01      	ldr	r2, [sp, #4]
 800ba8c:	601a      	str	r2, [r3, #0]
 800ba8e:	9b03      	ldr	r3, [sp, #12]
 800ba90:	2b0e      	cmp	r3, #14
 800ba92:	f200 809d 	bhi.w	800bbd0 <_dtoa_r+0x468>
 800ba96:	2d00      	cmp	r5, #0
 800ba98:	f000 809a 	beq.w	800bbd0 <_dtoa_r+0x468>
 800ba9c:	9b00      	ldr	r3, [sp, #0]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	dd32      	ble.n	800bb08 <_dtoa_r+0x3a0>
 800baa2:	4ab7      	ldr	r2, [pc, #732]	; (800bd80 <_dtoa_r+0x618>)
 800baa4:	f003 030f 	and.w	r3, r3, #15
 800baa8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800baac:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bab0:	9b00      	ldr	r3, [sp, #0]
 800bab2:	05d8      	lsls	r0, r3, #23
 800bab4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800bab8:	d516      	bpl.n	800bae8 <_dtoa_r+0x380>
 800baba:	4bb2      	ldr	r3, [pc, #712]	; (800bd84 <_dtoa_r+0x61c>)
 800babc:	ec51 0b19 	vmov	r0, r1, d9
 800bac0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bac4:	f7f4 fec2 	bl	800084c <__aeabi_ddiv>
 800bac8:	f007 070f 	and.w	r7, r7, #15
 800bacc:	4682      	mov	sl, r0
 800bace:	468b      	mov	fp, r1
 800bad0:	2503      	movs	r5, #3
 800bad2:	4eac      	ldr	r6, [pc, #688]	; (800bd84 <_dtoa_r+0x61c>)
 800bad4:	b957      	cbnz	r7, 800baec <_dtoa_r+0x384>
 800bad6:	4642      	mov	r2, r8
 800bad8:	464b      	mov	r3, r9
 800bada:	4650      	mov	r0, sl
 800badc:	4659      	mov	r1, fp
 800bade:	f7f4 feb5 	bl	800084c <__aeabi_ddiv>
 800bae2:	4682      	mov	sl, r0
 800bae4:	468b      	mov	fp, r1
 800bae6:	e028      	b.n	800bb3a <_dtoa_r+0x3d2>
 800bae8:	2502      	movs	r5, #2
 800baea:	e7f2      	b.n	800bad2 <_dtoa_r+0x36a>
 800baec:	07f9      	lsls	r1, r7, #31
 800baee:	d508      	bpl.n	800bb02 <_dtoa_r+0x39a>
 800baf0:	4640      	mov	r0, r8
 800baf2:	4649      	mov	r1, r9
 800baf4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800baf8:	f7f4 fd7e 	bl	80005f8 <__aeabi_dmul>
 800bafc:	3501      	adds	r5, #1
 800bafe:	4680      	mov	r8, r0
 800bb00:	4689      	mov	r9, r1
 800bb02:	107f      	asrs	r7, r7, #1
 800bb04:	3608      	adds	r6, #8
 800bb06:	e7e5      	b.n	800bad4 <_dtoa_r+0x36c>
 800bb08:	f000 809b 	beq.w	800bc42 <_dtoa_r+0x4da>
 800bb0c:	9b00      	ldr	r3, [sp, #0]
 800bb0e:	4f9d      	ldr	r7, [pc, #628]	; (800bd84 <_dtoa_r+0x61c>)
 800bb10:	425e      	negs	r6, r3
 800bb12:	4b9b      	ldr	r3, [pc, #620]	; (800bd80 <_dtoa_r+0x618>)
 800bb14:	f006 020f 	and.w	r2, r6, #15
 800bb18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb20:	ec51 0b19 	vmov	r0, r1, d9
 800bb24:	f7f4 fd68 	bl	80005f8 <__aeabi_dmul>
 800bb28:	1136      	asrs	r6, r6, #4
 800bb2a:	4682      	mov	sl, r0
 800bb2c:	468b      	mov	fp, r1
 800bb2e:	2300      	movs	r3, #0
 800bb30:	2502      	movs	r5, #2
 800bb32:	2e00      	cmp	r6, #0
 800bb34:	d17a      	bne.n	800bc2c <_dtoa_r+0x4c4>
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d1d3      	bne.n	800bae2 <_dtoa_r+0x37a>
 800bb3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	f000 8082 	beq.w	800bc46 <_dtoa_r+0x4de>
 800bb42:	4b91      	ldr	r3, [pc, #580]	; (800bd88 <_dtoa_r+0x620>)
 800bb44:	2200      	movs	r2, #0
 800bb46:	4650      	mov	r0, sl
 800bb48:	4659      	mov	r1, fp
 800bb4a:	f7f4 ffc7 	bl	8000adc <__aeabi_dcmplt>
 800bb4e:	2800      	cmp	r0, #0
 800bb50:	d079      	beq.n	800bc46 <_dtoa_r+0x4de>
 800bb52:	9b03      	ldr	r3, [sp, #12]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d076      	beq.n	800bc46 <_dtoa_r+0x4de>
 800bb58:	9b02      	ldr	r3, [sp, #8]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	dd36      	ble.n	800bbcc <_dtoa_r+0x464>
 800bb5e:	9b00      	ldr	r3, [sp, #0]
 800bb60:	4650      	mov	r0, sl
 800bb62:	4659      	mov	r1, fp
 800bb64:	1e5f      	subs	r7, r3, #1
 800bb66:	2200      	movs	r2, #0
 800bb68:	4b88      	ldr	r3, [pc, #544]	; (800bd8c <_dtoa_r+0x624>)
 800bb6a:	f7f4 fd45 	bl	80005f8 <__aeabi_dmul>
 800bb6e:	9e02      	ldr	r6, [sp, #8]
 800bb70:	4682      	mov	sl, r0
 800bb72:	468b      	mov	fp, r1
 800bb74:	3501      	adds	r5, #1
 800bb76:	4628      	mov	r0, r5
 800bb78:	f7f4 fcd4 	bl	8000524 <__aeabi_i2d>
 800bb7c:	4652      	mov	r2, sl
 800bb7e:	465b      	mov	r3, fp
 800bb80:	f7f4 fd3a 	bl	80005f8 <__aeabi_dmul>
 800bb84:	4b82      	ldr	r3, [pc, #520]	; (800bd90 <_dtoa_r+0x628>)
 800bb86:	2200      	movs	r2, #0
 800bb88:	f7f4 fb80 	bl	800028c <__adddf3>
 800bb8c:	46d0      	mov	r8, sl
 800bb8e:	46d9      	mov	r9, fp
 800bb90:	4682      	mov	sl, r0
 800bb92:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800bb96:	2e00      	cmp	r6, #0
 800bb98:	d158      	bne.n	800bc4c <_dtoa_r+0x4e4>
 800bb9a:	4b7e      	ldr	r3, [pc, #504]	; (800bd94 <_dtoa_r+0x62c>)
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	4640      	mov	r0, r8
 800bba0:	4649      	mov	r1, r9
 800bba2:	f7f4 fb71 	bl	8000288 <__aeabi_dsub>
 800bba6:	4652      	mov	r2, sl
 800bba8:	465b      	mov	r3, fp
 800bbaa:	4680      	mov	r8, r0
 800bbac:	4689      	mov	r9, r1
 800bbae:	f7f4 ffb3 	bl	8000b18 <__aeabi_dcmpgt>
 800bbb2:	2800      	cmp	r0, #0
 800bbb4:	f040 8295 	bne.w	800c0e2 <_dtoa_r+0x97a>
 800bbb8:	4652      	mov	r2, sl
 800bbba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bbbe:	4640      	mov	r0, r8
 800bbc0:	4649      	mov	r1, r9
 800bbc2:	f7f4 ff8b 	bl	8000adc <__aeabi_dcmplt>
 800bbc6:	2800      	cmp	r0, #0
 800bbc8:	f040 8289 	bne.w	800c0de <_dtoa_r+0x976>
 800bbcc:	ec5b ab19 	vmov	sl, fp, d9
 800bbd0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	f2c0 8148 	blt.w	800be68 <_dtoa_r+0x700>
 800bbd8:	9a00      	ldr	r2, [sp, #0]
 800bbda:	2a0e      	cmp	r2, #14
 800bbdc:	f300 8144 	bgt.w	800be68 <_dtoa_r+0x700>
 800bbe0:	4b67      	ldr	r3, [pc, #412]	; (800bd80 <_dtoa_r+0x618>)
 800bbe2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bbe6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bbea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	f280 80d5 	bge.w	800bd9c <_dtoa_r+0x634>
 800bbf2:	9b03      	ldr	r3, [sp, #12]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	f300 80d1 	bgt.w	800bd9c <_dtoa_r+0x634>
 800bbfa:	f040 826f 	bne.w	800c0dc <_dtoa_r+0x974>
 800bbfe:	4b65      	ldr	r3, [pc, #404]	; (800bd94 <_dtoa_r+0x62c>)
 800bc00:	2200      	movs	r2, #0
 800bc02:	4640      	mov	r0, r8
 800bc04:	4649      	mov	r1, r9
 800bc06:	f7f4 fcf7 	bl	80005f8 <__aeabi_dmul>
 800bc0a:	4652      	mov	r2, sl
 800bc0c:	465b      	mov	r3, fp
 800bc0e:	f7f4 ff79 	bl	8000b04 <__aeabi_dcmpge>
 800bc12:	9e03      	ldr	r6, [sp, #12]
 800bc14:	4637      	mov	r7, r6
 800bc16:	2800      	cmp	r0, #0
 800bc18:	f040 8245 	bne.w	800c0a6 <_dtoa_r+0x93e>
 800bc1c:	9d01      	ldr	r5, [sp, #4]
 800bc1e:	2331      	movs	r3, #49	; 0x31
 800bc20:	f805 3b01 	strb.w	r3, [r5], #1
 800bc24:	9b00      	ldr	r3, [sp, #0]
 800bc26:	3301      	adds	r3, #1
 800bc28:	9300      	str	r3, [sp, #0]
 800bc2a:	e240      	b.n	800c0ae <_dtoa_r+0x946>
 800bc2c:	07f2      	lsls	r2, r6, #31
 800bc2e:	d505      	bpl.n	800bc3c <_dtoa_r+0x4d4>
 800bc30:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc34:	f7f4 fce0 	bl	80005f8 <__aeabi_dmul>
 800bc38:	3501      	adds	r5, #1
 800bc3a:	2301      	movs	r3, #1
 800bc3c:	1076      	asrs	r6, r6, #1
 800bc3e:	3708      	adds	r7, #8
 800bc40:	e777      	b.n	800bb32 <_dtoa_r+0x3ca>
 800bc42:	2502      	movs	r5, #2
 800bc44:	e779      	b.n	800bb3a <_dtoa_r+0x3d2>
 800bc46:	9f00      	ldr	r7, [sp, #0]
 800bc48:	9e03      	ldr	r6, [sp, #12]
 800bc4a:	e794      	b.n	800bb76 <_dtoa_r+0x40e>
 800bc4c:	9901      	ldr	r1, [sp, #4]
 800bc4e:	4b4c      	ldr	r3, [pc, #304]	; (800bd80 <_dtoa_r+0x618>)
 800bc50:	4431      	add	r1, r6
 800bc52:	910d      	str	r1, [sp, #52]	; 0x34
 800bc54:	9908      	ldr	r1, [sp, #32]
 800bc56:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bc5a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bc5e:	2900      	cmp	r1, #0
 800bc60:	d043      	beq.n	800bcea <_dtoa_r+0x582>
 800bc62:	494d      	ldr	r1, [pc, #308]	; (800bd98 <_dtoa_r+0x630>)
 800bc64:	2000      	movs	r0, #0
 800bc66:	f7f4 fdf1 	bl	800084c <__aeabi_ddiv>
 800bc6a:	4652      	mov	r2, sl
 800bc6c:	465b      	mov	r3, fp
 800bc6e:	f7f4 fb0b 	bl	8000288 <__aeabi_dsub>
 800bc72:	9d01      	ldr	r5, [sp, #4]
 800bc74:	4682      	mov	sl, r0
 800bc76:	468b      	mov	fp, r1
 800bc78:	4649      	mov	r1, r9
 800bc7a:	4640      	mov	r0, r8
 800bc7c:	f7f4 ff6c 	bl	8000b58 <__aeabi_d2iz>
 800bc80:	4606      	mov	r6, r0
 800bc82:	f7f4 fc4f 	bl	8000524 <__aeabi_i2d>
 800bc86:	4602      	mov	r2, r0
 800bc88:	460b      	mov	r3, r1
 800bc8a:	4640      	mov	r0, r8
 800bc8c:	4649      	mov	r1, r9
 800bc8e:	f7f4 fafb 	bl	8000288 <__aeabi_dsub>
 800bc92:	3630      	adds	r6, #48	; 0x30
 800bc94:	f805 6b01 	strb.w	r6, [r5], #1
 800bc98:	4652      	mov	r2, sl
 800bc9a:	465b      	mov	r3, fp
 800bc9c:	4680      	mov	r8, r0
 800bc9e:	4689      	mov	r9, r1
 800bca0:	f7f4 ff1c 	bl	8000adc <__aeabi_dcmplt>
 800bca4:	2800      	cmp	r0, #0
 800bca6:	d163      	bne.n	800bd70 <_dtoa_r+0x608>
 800bca8:	4642      	mov	r2, r8
 800bcaa:	464b      	mov	r3, r9
 800bcac:	4936      	ldr	r1, [pc, #216]	; (800bd88 <_dtoa_r+0x620>)
 800bcae:	2000      	movs	r0, #0
 800bcb0:	f7f4 faea 	bl	8000288 <__aeabi_dsub>
 800bcb4:	4652      	mov	r2, sl
 800bcb6:	465b      	mov	r3, fp
 800bcb8:	f7f4 ff10 	bl	8000adc <__aeabi_dcmplt>
 800bcbc:	2800      	cmp	r0, #0
 800bcbe:	f040 80b5 	bne.w	800be2c <_dtoa_r+0x6c4>
 800bcc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bcc4:	429d      	cmp	r5, r3
 800bcc6:	d081      	beq.n	800bbcc <_dtoa_r+0x464>
 800bcc8:	4b30      	ldr	r3, [pc, #192]	; (800bd8c <_dtoa_r+0x624>)
 800bcca:	2200      	movs	r2, #0
 800bccc:	4650      	mov	r0, sl
 800bcce:	4659      	mov	r1, fp
 800bcd0:	f7f4 fc92 	bl	80005f8 <__aeabi_dmul>
 800bcd4:	4b2d      	ldr	r3, [pc, #180]	; (800bd8c <_dtoa_r+0x624>)
 800bcd6:	4682      	mov	sl, r0
 800bcd8:	468b      	mov	fp, r1
 800bcda:	4640      	mov	r0, r8
 800bcdc:	4649      	mov	r1, r9
 800bcde:	2200      	movs	r2, #0
 800bce0:	f7f4 fc8a 	bl	80005f8 <__aeabi_dmul>
 800bce4:	4680      	mov	r8, r0
 800bce6:	4689      	mov	r9, r1
 800bce8:	e7c6      	b.n	800bc78 <_dtoa_r+0x510>
 800bcea:	4650      	mov	r0, sl
 800bcec:	4659      	mov	r1, fp
 800bcee:	f7f4 fc83 	bl	80005f8 <__aeabi_dmul>
 800bcf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bcf4:	9d01      	ldr	r5, [sp, #4]
 800bcf6:	930f      	str	r3, [sp, #60]	; 0x3c
 800bcf8:	4682      	mov	sl, r0
 800bcfa:	468b      	mov	fp, r1
 800bcfc:	4649      	mov	r1, r9
 800bcfe:	4640      	mov	r0, r8
 800bd00:	f7f4 ff2a 	bl	8000b58 <__aeabi_d2iz>
 800bd04:	4606      	mov	r6, r0
 800bd06:	f7f4 fc0d 	bl	8000524 <__aeabi_i2d>
 800bd0a:	3630      	adds	r6, #48	; 0x30
 800bd0c:	4602      	mov	r2, r0
 800bd0e:	460b      	mov	r3, r1
 800bd10:	4640      	mov	r0, r8
 800bd12:	4649      	mov	r1, r9
 800bd14:	f7f4 fab8 	bl	8000288 <__aeabi_dsub>
 800bd18:	f805 6b01 	strb.w	r6, [r5], #1
 800bd1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd1e:	429d      	cmp	r5, r3
 800bd20:	4680      	mov	r8, r0
 800bd22:	4689      	mov	r9, r1
 800bd24:	f04f 0200 	mov.w	r2, #0
 800bd28:	d124      	bne.n	800bd74 <_dtoa_r+0x60c>
 800bd2a:	4b1b      	ldr	r3, [pc, #108]	; (800bd98 <_dtoa_r+0x630>)
 800bd2c:	4650      	mov	r0, sl
 800bd2e:	4659      	mov	r1, fp
 800bd30:	f7f4 faac 	bl	800028c <__adddf3>
 800bd34:	4602      	mov	r2, r0
 800bd36:	460b      	mov	r3, r1
 800bd38:	4640      	mov	r0, r8
 800bd3a:	4649      	mov	r1, r9
 800bd3c:	f7f4 feec 	bl	8000b18 <__aeabi_dcmpgt>
 800bd40:	2800      	cmp	r0, #0
 800bd42:	d173      	bne.n	800be2c <_dtoa_r+0x6c4>
 800bd44:	4652      	mov	r2, sl
 800bd46:	465b      	mov	r3, fp
 800bd48:	4913      	ldr	r1, [pc, #76]	; (800bd98 <_dtoa_r+0x630>)
 800bd4a:	2000      	movs	r0, #0
 800bd4c:	f7f4 fa9c 	bl	8000288 <__aeabi_dsub>
 800bd50:	4602      	mov	r2, r0
 800bd52:	460b      	mov	r3, r1
 800bd54:	4640      	mov	r0, r8
 800bd56:	4649      	mov	r1, r9
 800bd58:	f7f4 fec0 	bl	8000adc <__aeabi_dcmplt>
 800bd5c:	2800      	cmp	r0, #0
 800bd5e:	f43f af35 	beq.w	800bbcc <_dtoa_r+0x464>
 800bd62:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bd64:	1e6b      	subs	r3, r5, #1
 800bd66:	930f      	str	r3, [sp, #60]	; 0x3c
 800bd68:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bd6c:	2b30      	cmp	r3, #48	; 0x30
 800bd6e:	d0f8      	beq.n	800bd62 <_dtoa_r+0x5fa>
 800bd70:	9700      	str	r7, [sp, #0]
 800bd72:	e049      	b.n	800be08 <_dtoa_r+0x6a0>
 800bd74:	4b05      	ldr	r3, [pc, #20]	; (800bd8c <_dtoa_r+0x624>)
 800bd76:	f7f4 fc3f 	bl	80005f8 <__aeabi_dmul>
 800bd7a:	4680      	mov	r8, r0
 800bd7c:	4689      	mov	r9, r1
 800bd7e:	e7bd      	b.n	800bcfc <_dtoa_r+0x594>
 800bd80:	0800e890 	.word	0x0800e890
 800bd84:	0800e868 	.word	0x0800e868
 800bd88:	3ff00000 	.word	0x3ff00000
 800bd8c:	40240000 	.word	0x40240000
 800bd90:	401c0000 	.word	0x401c0000
 800bd94:	40140000 	.word	0x40140000
 800bd98:	3fe00000 	.word	0x3fe00000
 800bd9c:	9d01      	ldr	r5, [sp, #4]
 800bd9e:	4656      	mov	r6, sl
 800bda0:	465f      	mov	r7, fp
 800bda2:	4642      	mov	r2, r8
 800bda4:	464b      	mov	r3, r9
 800bda6:	4630      	mov	r0, r6
 800bda8:	4639      	mov	r1, r7
 800bdaa:	f7f4 fd4f 	bl	800084c <__aeabi_ddiv>
 800bdae:	f7f4 fed3 	bl	8000b58 <__aeabi_d2iz>
 800bdb2:	4682      	mov	sl, r0
 800bdb4:	f7f4 fbb6 	bl	8000524 <__aeabi_i2d>
 800bdb8:	4642      	mov	r2, r8
 800bdba:	464b      	mov	r3, r9
 800bdbc:	f7f4 fc1c 	bl	80005f8 <__aeabi_dmul>
 800bdc0:	4602      	mov	r2, r0
 800bdc2:	460b      	mov	r3, r1
 800bdc4:	4630      	mov	r0, r6
 800bdc6:	4639      	mov	r1, r7
 800bdc8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800bdcc:	f7f4 fa5c 	bl	8000288 <__aeabi_dsub>
 800bdd0:	f805 6b01 	strb.w	r6, [r5], #1
 800bdd4:	9e01      	ldr	r6, [sp, #4]
 800bdd6:	9f03      	ldr	r7, [sp, #12]
 800bdd8:	1bae      	subs	r6, r5, r6
 800bdda:	42b7      	cmp	r7, r6
 800bddc:	4602      	mov	r2, r0
 800bdde:	460b      	mov	r3, r1
 800bde0:	d135      	bne.n	800be4e <_dtoa_r+0x6e6>
 800bde2:	f7f4 fa53 	bl	800028c <__adddf3>
 800bde6:	4642      	mov	r2, r8
 800bde8:	464b      	mov	r3, r9
 800bdea:	4606      	mov	r6, r0
 800bdec:	460f      	mov	r7, r1
 800bdee:	f7f4 fe93 	bl	8000b18 <__aeabi_dcmpgt>
 800bdf2:	b9d0      	cbnz	r0, 800be2a <_dtoa_r+0x6c2>
 800bdf4:	4642      	mov	r2, r8
 800bdf6:	464b      	mov	r3, r9
 800bdf8:	4630      	mov	r0, r6
 800bdfa:	4639      	mov	r1, r7
 800bdfc:	f7f4 fe64 	bl	8000ac8 <__aeabi_dcmpeq>
 800be00:	b110      	cbz	r0, 800be08 <_dtoa_r+0x6a0>
 800be02:	f01a 0f01 	tst.w	sl, #1
 800be06:	d110      	bne.n	800be2a <_dtoa_r+0x6c2>
 800be08:	4620      	mov	r0, r4
 800be0a:	ee18 1a10 	vmov	r1, s16
 800be0e:	f001 f885 	bl	800cf1c <_Bfree>
 800be12:	2300      	movs	r3, #0
 800be14:	9800      	ldr	r0, [sp, #0]
 800be16:	702b      	strb	r3, [r5, #0]
 800be18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be1a:	3001      	adds	r0, #1
 800be1c:	6018      	str	r0, [r3, #0]
 800be1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800be20:	2b00      	cmp	r3, #0
 800be22:	f43f acf1 	beq.w	800b808 <_dtoa_r+0xa0>
 800be26:	601d      	str	r5, [r3, #0]
 800be28:	e4ee      	b.n	800b808 <_dtoa_r+0xa0>
 800be2a:	9f00      	ldr	r7, [sp, #0]
 800be2c:	462b      	mov	r3, r5
 800be2e:	461d      	mov	r5, r3
 800be30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800be34:	2a39      	cmp	r2, #57	; 0x39
 800be36:	d106      	bne.n	800be46 <_dtoa_r+0x6de>
 800be38:	9a01      	ldr	r2, [sp, #4]
 800be3a:	429a      	cmp	r2, r3
 800be3c:	d1f7      	bne.n	800be2e <_dtoa_r+0x6c6>
 800be3e:	9901      	ldr	r1, [sp, #4]
 800be40:	2230      	movs	r2, #48	; 0x30
 800be42:	3701      	adds	r7, #1
 800be44:	700a      	strb	r2, [r1, #0]
 800be46:	781a      	ldrb	r2, [r3, #0]
 800be48:	3201      	adds	r2, #1
 800be4a:	701a      	strb	r2, [r3, #0]
 800be4c:	e790      	b.n	800bd70 <_dtoa_r+0x608>
 800be4e:	4ba6      	ldr	r3, [pc, #664]	; (800c0e8 <_dtoa_r+0x980>)
 800be50:	2200      	movs	r2, #0
 800be52:	f7f4 fbd1 	bl	80005f8 <__aeabi_dmul>
 800be56:	2200      	movs	r2, #0
 800be58:	2300      	movs	r3, #0
 800be5a:	4606      	mov	r6, r0
 800be5c:	460f      	mov	r7, r1
 800be5e:	f7f4 fe33 	bl	8000ac8 <__aeabi_dcmpeq>
 800be62:	2800      	cmp	r0, #0
 800be64:	d09d      	beq.n	800bda2 <_dtoa_r+0x63a>
 800be66:	e7cf      	b.n	800be08 <_dtoa_r+0x6a0>
 800be68:	9a08      	ldr	r2, [sp, #32]
 800be6a:	2a00      	cmp	r2, #0
 800be6c:	f000 80d7 	beq.w	800c01e <_dtoa_r+0x8b6>
 800be70:	9a06      	ldr	r2, [sp, #24]
 800be72:	2a01      	cmp	r2, #1
 800be74:	f300 80ba 	bgt.w	800bfec <_dtoa_r+0x884>
 800be78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800be7a:	2a00      	cmp	r2, #0
 800be7c:	f000 80b2 	beq.w	800bfe4 <_dtoa_r+0x87c>
 800be80:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800be84:	9e07      	ldr	r6, [sp, #28]
 800be86:	9d04      	ldr	r5, [sp, #16]
 800be88:	9a04      	ldr	r2, [sp, #16]
 800be8a:	441a      	add	r2, r3
 800be8c:	9204      	str	r2, [sp, #16]
 800be8e:	9a05      	ldr	r2, [sp, #20]
 800be90:	2101      	movs	r1, #1
 800be92:	441a      	add	r2, r3
 800be94:	4620      	mov	r0, r4
 800be96:	9205      	str	r2, [sp, #20]
 800be98:	f001 f942 	bl	800d120 <__i2b>
 800be9c:	4607      	mov	r7, r0
 800be9e:	2d00      	cmp	r5, #0
 800bea0:	dd0c      	ble.n	800bebc <_dtoa_r+0x754>
 800bea2:	9b05      	ldr	r3, [sp, #20]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	dd09      	ble.n	800bebc <_dtoa_r+0x754>
 800bea8:	42ab      	cmp	r3, r5
 800beaa:	9a04      	ldr	r2, [sp, #16]
 800beac:	bfa8      	it	ge
 800beae:	462b      	movge	r3, r5
 800beb0:	1ad2      	subs	r2, r2, r3
 800beb2:	9204      	str	r2, [sp, #16]
 800beb4:	9a05      	ldr	r2, [sp, #20]
 800beb6:	1aed      	subs	r5, r5, r3
 800beb8:	1ad3      	subs	r3, r2, r3
 800beba:	9305      	str	r3, [sp, #20]
 800bebc:	9b07      	ldr	r3, [sp, #28]
 800bebe:	b31b      	cbz	r3, 800bf08 <_dtoa_r+0x7a0>
 800bec0:	9b08      	ldr	r3, [sp, #32]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	f000 80af 	beq.w	800c026 <_dtoa_r+0x8be>
 800bec8:	2e00      	cmp	r6, #0
 800beca:	dd13      	ble.n	800bef4 <_dtoa_r+0x78c>
 800becc:	4639      	mov	r1, r7
 800bece:	4632      	mov	r2, r6
 800bed0:	4620      	mov	r0, r4
 800bed2:	f001 f9e5 	bl	800d2a0 <__pow5mult>
 800bed6:	ee18 2a10 	vmov	r2, s16
 800beda:	4601      	mov	r1, r0
 800bedc:	4607      	mov	r7, r0
 800bede:	4620      	mov	r0, r4
 800bee0:	f001 f934 	bl	800d14c <__multiply>
 800bee4:	ee18 1a10 	vmov	r1, s16
 800bee8:	4680      	mov	r8, r0
 800beea:	4620      	mov	r0, r4
 800beec:	f001 f816 	bl	800cf1c <_Bfree>
 800bef0:	ee08 8a10 	vmov	s16, r8
 800bef4:	9b07      	ldr	r3, [sp, #28]
 800bef6:	1b9a      	subs	r2, r3, r6
 800bef8:	d006      	beq.n	800bf08 <_dtoa_r+0x7a0>
 800befa:	ee18 1a10 	vmov	r1, s16
 800befe:	4620      	mov	r0, r4
 800bf00:	f001 f9ce 	bl	800d2a0 <__pow5mult>
 800bf04:	ee08 0a10 	vmov	s16, r0
 800bf08:	2101      	movs	r1, #1
 800bf0a:	4620      	mov	r0, r4
 800bf0c:	f001 f908 	bl	800d120 <__i2b>
 800bf10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	4606      	mov	r6, r0
 800bf16:	f340 8088 	ble.w	800c02a <_dtoa_r+0x8c2>
 800bf1a:	461a      	mov	r2, r3
 800bf1c:	4601      	mov	r1, r0
 800bf1e:	4620      	mov	r0, r4
 800bf20:	f001 f9be 	bl	800d2a0 <__pow5mult>
 800bf24:	9b06      	ldr	r3, [sp, #24]
 800bf26:	2b01      	cmp	r3, #1
 800bf28:	4606      	mov	r6, r0
 800bf2a:	f340 8081 	ble.w	800c030 <_dtoa_r+0x8c8>
 800bf2e:	f04f 0800 	mov.w	r8, #0
 800bf32:	6933      	ldr	r3, [r6, #16]
 800bf34:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bf38:	6918      	ldr	r0, [r3, #16]
 800bf3a:	f001 f8a1 	bl	800d080 <__hi0bits>
 800bf3e:	f1c0 0020 	rsb	r0, r0, #32
 800bf42:	9b05      	ldr	r3, [sp, #20]
 800bf44:	4418      	add	r0, r3
 800bf46:	f010 001f 	ands.w	r0, r0, #31
 800bf4a:	f000 8092 	beq.w	800c072 <_dtoa_r+0x90a>
 800bf4e:	f1c0 0320 	rsb	r3, r0, #32
 800bf52:	2b04      	cmp	r3, #4
 800bf54:	f340 808a 	ble.w	800c06c <_dtoa_r+0x904>
 800bf58:	f1c0 001c 	rsb	r0, r0, #28
 800bf5c:	9b04      	ldr	r3, [sp, #16]
 800bf5e:	4403      	add	r3, r0
 800bf60:	9304      	str	r3, [sp, #16]
 800bf62:	9b05      	ldr	r3, [sp, #20]
 800bf64:	4403      	add	r3, r0
 800bf66:	4405      	add	r5, r0
 800bf68:	9305      	str	r3, [sp, #20]
 800bf6a:	9b04      	ldr	r3, [sp, #16]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	dd07      	ble.n	800bf80 <_dtoa_r+0x818>
 800bf70:	ee18 1a10 	vmov	r1, s16
 800bf74:	461a      	mov	r2, r3
 800bf76:	4620      	mov	r0, r4
 800bf78:	f001 f9ec 	bl	800d354 <__lshift>
 800bf7c:	ee08 0a10 	vmov	s16, r0
 800bf80:	9b05      	ldr	r3, [sp, #20]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	dd05      	ble.n	800bf92 <_dtoa_r+0x82a>
 800bf86:	4631      	mov	r1, r6
 800bf88:	461a      	mov	r2, r3
 800bf8a:	4620      	mov	r0, r4
 800bf8c:	f001 f9e2 	bl	800d354 <__lshift>
 800bf90:	4606      	mov	r6, r0
 800bf92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d06e      	beq.n	800c076 <_dtoa_r+0x90e>
 800bf98:	ee18 0a10 	vmov	r0, s16
 800bf9c:	4631      	mov	r1, r6
 800bf9e:	f001 fa49 	bl	800d434 <__mcmp>
 800bfa2:	2800      	cmp	r0, #0
 800bfa4:	da67      	bge.n	800c076 <_dtoa_r+0x90e>
 800bfa6:	9b00      	ldr	r3, [sp, #0]
 800bfa8:	3b01      	subs	r3, #1
 800bfaa:	ee18 1a10 	vmov	r1, s16
 800bfae:	9300      	str	r3, [sp, #0]
 800bfb0:	220a      	movs	r2, #10
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	4620      	mov	r0, r4
 800bfb6:	f000 ffd3 	bl	800cf60 <__multadd>
 800bfba:	9b08      	ldr	r3, [sp, #32]
 800bfbc:	ee08 0a10 	vmov	s16, r0
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	f000 81b1 	beq.w	800c328 <_dtoa_r+0xbc0>
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	4639      	mov	r1, r7
 800bfca:	220a      	movs	r2, #10
 800bfcc:	4620      	mov	r0, r4
 800bfce:	f000 ffc7 	bl	800cf60 <__multadd>
 800bfd2:	9b02      	ldr	r3, [sp, #8]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	4607      	mov	r7, r0
 800bfd8:	f300 808e 	bgt.w	800c0f8 <_dtoa_r+0x990>
 800bfdc:	9b06      	ldr	r3, [sp, #24]
 800bfde:	2b02      	cmp	r3, #2
 800bfe0:	dc51      	bgt.n	800c086 <_dtoa_r+0x91e>
 800bfe2:	e089      	b.n	800c0f8 <_dtoa_r+0x990>
 800bfe4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bfe6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bfea:	e74b      	b.n	800be84 <_dtoa_r+0x71c>
 800bfec:	9b03      	ldr	r3, [sp, #12]
 800bfee:	1e5e      	subs	r6, r3, #1
 800bff0:	9b07      	ldr	r3, [sp, #28]
 800bff2:	42b3      	cmp	r3, r6
 800bff4:	bfbf      	itttt	lt
 800bff6:	9b07      	ldrlt	r3, [sp, #28]
 800bff8:	9607      	strlt	r6, [sp, #28]
 800bffa:	1af2      	sublt	r2, r6, r3
 800bffc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800bffe:	bfb6      	itet	lt
 800c000:	189b      	addlt	r3, r3, r2
 800c002:	1b9e      	subge	r6, r3, r6
 800c004:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c006:	9b03      	ldr	r3, [sp, #12]
 800c008:	bfb8      	it	lt
 800c00a:	2600      	movlt	r6, #0
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	bfb7      	itett	lt
 800c010:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c014:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c018:	1a9d      	sublt	r5, r3, r2
 800c01a:	2300      	movlt	r3, #0
 800c01c:	e734      	b.n	800be88 <_dtoa_r+0x720>
 800c01e:	9e07      	ldr	r6, [sp, #28]
 800c020:	9d04      	ldr	r5, [sp, #16]
 800c022:	9f08      	ldr	r7, [sp, #32]
 800c024:	e73b      	b.n	800be9e <_dtoa_r+0x736>
 800c026:	9a07      	ldr	r2, [sp, #28]
 800c028:	e767      	b.n	800befa <_dtoa_r+0x792>
 800c02a:	9b06      	ldr	r3, [sp, #24]
 800c02c:	2b01      	cmp	r3, #1
 800c02e:	dc18      	bgt.n	800c062 <_dtoa_r+0x8fa>
 800c030:	f1ba 0f00 	cmp.w	sl, #0
 800c034:	d115      	bne.n	800c062 <_dtoa_r+0x8fa>
 800c036:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c03a:	b993      	cbnz	r3, 800c062 <_dtoa_r+0x8fa>
 800c03c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c040:	0d1b      	lsrs	r3, r3, #20
 800c042:	051b      	lsls	r3, r3, #20
 800c044:	b183      	cbz	r3, 800c068 <_dtoa_r+0x900>
 800c046:	9b04      	ldr	r3, [sp, #16]
 800c048:	3301      	adds	r3, #1
 800c04a:	9304      	str	r3, [sp, #16]
 800c04c:	9b05      	ldr	r3, [sp, #20]
 800c04e:	3301      	adds	r3, #1
 800c050:	9305      	str	r3, [sp, #20]
 800c052:	f04f 0801 	mov.w	r8, #1
 800c056:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c058:	2b00      	cmp	r3, #0
 800c05a:	f47f af6a 	bne.w	800bf32 <_dtoa_r+0x7ca>
 800c05e:	2001      	movs	r0, #1
 800c060:	e76f      	b.n	800bf42 <_dtoa_r+0x7da>
 800c062:	f04f 0800 	mov.w	r8, #0
 800c066:	e7f6      	b.n	800c056 <_dtoa_r+0x8ee>
 800c068:	4698      	mov	r8, r3
 800c06a:	e7f4      	b.n	800c056 <_dtoa_r+0x8ee>
 800c06c:	f43f af7d 	beq.w	800bf6a <_dtoa_r+0x802>
 800c070:	4618      	mov	r0, r3
 800c072:	301c      	adds	r0, #28
 800c074:	e772      	b.n	800bf5c <_dtoa_r+0x7f4>
 800c076:	9b03      	ldr	r3, [sp, #12]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	dc37      	bgt.n	800c0ec <_dtoa_r+0x984>
 800c07c:	9b06      	ldr	r3, [sp, #24]
 800c07e:	2b02      	cmp	r3, #2
 800c080:	dd34      	ble.n	800c0ec <_dtoa_r+0x984>
 800c082:	9b03      	ldr	r3, [sp, #12]
 800c084:	9302      	str	r3, [sp, #8]
 800c086:	9b02      	ldr	r3, [sp, #8]
 800c088:	b96b      	cbnz	r3, 800c0a6 <_dtoa_r+0x93e>
 800c08a:	4631      	mov	r1, r6
 800c08c:	2205      	movs	r2, #5
 800c08e:	4620      	mov	r0, r4
 800c090:	f000 ff66 	bl	800cf60 <__multadd>
 800c094:	4601      	mov	r1, r0
 800c096:	4606      	mov	r6, r0
 800c098:	ee18 0a10 	vmov	r0, s16
 800c09c:	f001 f9ca 	bl	800d434 <__mcmp>
 800c0a0:	2800      	cmp	r0, #0
 800c0a2:	f73f adbb 	bgt.w	800bc1c <_dtoa_r+0x4b4>
 800c0a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0a8:	9d01      	ldr	r5, [sp, #4]
 800c0aa:	43db      	mvns	r3, r3
 800c0ac:	9300      	str	r3, [sp, #0]
 800c0ae:	f04f 0800 	mov.w	r8, #0
 800c0b2:	4631      	mov	r1, r6
 800c0b4:	4620      	mov	r0, r4
 800c0b6:	f000 ff31 	bl	800cf1c <_Bfree>
 800c0ba:	2f00      	cmp	r7, #0
 800c0bc:	f43f aea4 	beq.w	800be08 <_dtoa_r+0x6a0>
 800c0c0:	f1b8 0f00 	cmp.w	r8, #0
 800c0c4:	d005      	beq.n	800c0d2 <_dtoa_r+0x96a>
 800c0c6:	45b8      	cmp	r8, r7
 800c0c8:	d003      	beq.n	800c0d2 <_dtoa_r+0x96a>
 800c0ca:	4641      	mov	r1, r8
 800c0cc:	4620      	mov	r0, r4
 800c0ce:	f000 ff25 	bl	800cf1c <_Bfree>
 800c0d2:	4639      	mov	r1, r7
 800c0d4:	4620      	mov	r0, r4
 800c0d6:	f000 ff21 	bl	800cf1c <_Bfree>
 800c0da:	e695      	b.n	800be08 <_dtoa_r+0x6a0>
 800c0dc:	2600      	movs	r6, #0
 800c0de:	4637      	mov	r7, r6
 800c0e0:	e7e1      	b.n	800c0a6 <_dtoa_r+0x93e>
 800c0e2:	9700      	str	r7, [sp, #0]
 800c0e4:	4637      	mov	r7, r6
 800c0e6:	e599      	b.n	800bc1c <_dtoa_r+0x4b4>
 800c0e8:	40240000 	.word	0x40240000
 800c0ec:	9b08      	ldr	r3, [sp, #32]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	f000 80ca 	beq.w	800c288 <_dtoa_r+0xb20>
 800c0f4:	9b03      	ldr	r3, [sp, #12]
 800c0f6:	9302      	str	r3, [sp, #8]
 800c0f8:	2d00      	cmp	r5, #0
 800c0fa:	dd05      	ble.n	800c108 <_dtoa_r+0x9a0>
 800c0fc:	4639      	mov	r1, r7
 800c0fe:	462a      	mov	r2, r5
 800c100:	4620      	mov	r0, r4
 800c102:	f001 f927 	bl	800d354 <__lshift>
 800c106:	4607      	mov	r7, r0
 800c108:	f1b8 0f00 	cmp.w	r8, #0
 800c10c:	d05b      	beq.n	800c1c6 <_dtoa_r+0xa5e>
 800c10e:	6879      	ldr	r1, [r7, #4]
 800c110:	4620      	mov	r0, r4
 800c112:	f000 fec3 	bl	800ce9c <_Balloc>
 800c116:	4605      	mov	r5, r0
 800c118:	b928      	cbnz	r0, 800c126 <_dtoa_r+0x9be>
 800c11a:	4b87      	ldr	r3, [pc, #540]	; (800c338 <_dtoa_r+0xbd0>)
 800c11c:	4602      	mov	r2, r0
 800c11e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c122:	f7ff bb3b 	b.w	800b79c <_dtoa_r+0x34>
 800c126:	693a      	ldr	r2, [r7, #16]
 800c128:	3202      	adds	r2, #2
 800c12a:	0092      	lsls	r2, r2, #2
 800c12c:	f107 010c 	add.w	r1, r7, #12
 800c130:	300c      	adds	r0, #12
 800c132:	f7fd fbdb 	bl	80098ec <memcpy>
 800c136:	2201      	movs	r2, #1
 800c138:	4629      	mov	r1, r5
 800c13a:	4620      	mov	r0, r4
 800c13c:	f001 f90a 	bl	800d354 <__lshift>
 800c140:	9b01      	ldr	r3, [sp, #4]
 800c142:	f103 0901 	add.w	r9, r3, #1
 800c146:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c14a:	4413      	add	r3, r2
 800c14c:	9305      	str	r3, [sp, #20]
 800c14e:	f00a 0301 	and.w	r3, sl, #1
 800c152:	46b8      	mov	r8, r7
 800c154:	9304      	str	r3, [sp, #16]
 800c156:	4607      	mov	r7, r0
 800c158:	4631      	mov	r1, r6
 800c15a:	ee18 0a10 	vmov	r0, s16
 800c15e:	f7ff fa77 	bl	800b650 <quorem>
 800c162:	4641      	mov	r1, r8
 800c164:	9002      	str	r0, [sp, #8]
 800c166:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c16a:	ee18 0a10 	vmov	r0, s16
 800c16e:	f001 f961 	bl	800d434 <__mcmp>
 800c172:	463a      	mov	r2, r7
 800c174:	9003      	str	r0, [sp, #12]
 800c176:	4631      	mov	r1, r6
 800c178:	4620      	mov	r0, r4
 800c17a:	f001 f977 	bl	800d46c <__mdiff>
 800c17e:	68c2      	ldr	r2, [r0, #12]
 800c180:	f109 3bff 	add.w	fp, r9, #4294967295
 800c184:	4605      	mov	r5, r0
 800c186:	bb02      	cbnz	r2, 800c1ca <_dtoa_r+0xa62>
 800c188:	4601      	mov	r1, r0
 800c18a:	ee18 0a10 	vmov	r0, s16
 800c18e:	f001 f951 	bl	800d434 <__mcmp>
 800c192:	4602      	mov	r2, r0
 800c194:	4629      	mov	r1, r5
 800c196:	4620      	mov	r0, r4
 800c198:	9207      	str	r2, [sp, #28]
 800c19a:	f000 febf 	bl	800cf1c <_Bfree>
 800c19e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c1a2:	ea43 0102 	orr.w	r1, r3, r2
 800c1a6:	9b04      	ldr	r3, [sp, #16]
 800c1a8:	430b      	orrs	r3, r1
 800c1aa:	464d      	mov	r5, r9
 800c1ac:	d10f      	bne.n	800c1ce <_dtoa_r+0xa66>
 800c1ae:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c1b2:	d02a      	beq.n	800c20a <_dtoa_r+0xaa2>
 800c1b4:	9b03      	ldr	r3, [sp, #12]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	dd02      	ble.n	800c1c0 <_dtoa_r+0xa58>
 800c1ba:	9b02      	ldr	r3, [sp, #8]
 800c1bc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c1c0:	f88b a000 	strb.w	sl, [fp]
 800c1c4:	e775      	b.n	800c0b2 <_dtoa_r+0x94a>
 800c1c6:	4638      	mov	r0, r7
 800c1c8:	e7ba      	b.n	800c140 <_dtoa_r+0x9d8>
 800c1ca:	2201      	movs	r2, #1
 800c1cc:	e7e2      	b.n	800c194 <_dtoa_r+0xa2c>
 800c1ce:	9b03      	ldr	r3, [sp, #12]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	db04      	blt.n	800c1de <_dtoa_r+0xa76>
 800c1d4:	9906      	ldr	r1, [sp, #24]
 800c1d6:	430b      	orrs	r3, r1
 800c1d8:	9904      	ldr	r1, [sp, #16]
 800c1da:	430b      	orrs	r3, r1
 800c1dc:	d122      	bne.n	800c224 <_dtoa_r+0xabc>
 800c1de:	2a00      	cmp	r2, #0
 800c1e0:	ddee      	ble.n	800c1c0 <_dtoa_r+0xa58>
 800c1e2:	ee18 1a10 	vmov	r1, s16
 800c1e6:	2201      	movs	r2, #1
 800c1e8:	4620      	mov	r0, r4
 800c1ea:	f001 f8b3 	bl	800d354 <__lshift>
 800c1ee:	4631      	mov	r1, r6
 800c1f0:	ee08 0a10 	vmov	s16, r0
 800c1f4:	f001 f91e 	bl	800d434 <__mcmp>
 800c1f8:	2800      	cmp	r0, #0
 800c1fa:	dc03      	bgt.n	800c204 <_dtoa_r+0xa9c>
 800c1fc:	d1e0      	bne.n	800c1c0 <_dtoa_r+0xa58>
 800c1fe:	f01a 0f01 	tst.w	sl, #1
 800c202:	d0dd      	beq.n	800c1c0 <_dtoa_r+0xa58>
 800c204:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c208:	d1d7      	bne.n	800c1ba <_dtoa_r+0xa52>
 800c20a:	2339      	movs	r3, #57	; 0x39
 800c20c:	f88b 3000 	strb.w	r3, [fp]
 800c210:	462b      	mov	r3, r5
 800c212:	461d      	mov	r5, r3
 800c214:	3b01      	subs	r3, #1
 800c216:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c21a:	2a39      	cmp	r2, #57	; 0x39
 800c21c:	d071      	beq.n	800c302 <_dtoa_r+0xb9a>
 800c21e:	3201      	adds	r2, #1
 800c220:	701a      	strb	r2, [r3, #0]
 800c222:	e746      	b.n	800c0b2 <_dtoa_r+0x94a>
 800c224:	2a00      	cmp	r2, #0
 800c226:	dd07      	ble.n	800c238 <_dtoa_r+0xad0>
 800c228:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c22c:	d0ed      	beq.n	800c20a <_dtoa_r+0xaa2>
 800c22e:	f10a 0301 	add.w	r3, sl, #1
 800c232:	f88b 3000 	strb.w	r3, [fp]
 800c236:	e73c      	b.n	800c0b2 <_dtoa_r+0x94a>
 800c238:	9b05      	ldr	r3, [sp, #20]
 800c23a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c23e:	4599      	cmp	r9, r3
 800c240:	d047      	beq.n	800c2d2 <_dtoa_r+0xb6a>
 800c242:	ee18 1a10 	vmov	r1, s16
 800c246:	2300      	movs	r3, #0
 800c248:	220a      	movs	r2, #10
 800c24a:	4620      	mov	r0, r4
 800c24c:	f000 fe88 	bl	800cf60 <__multadd>
 800c250:	45b8      	cmp	r8, r7
 800c252:	ee08 0a10 	vmov	s16, r0
 800c256:	f04f 0300 	mov.w	r3, #0
 800c25a:	f04f 020a 	mov.w	r2, #10
 800c25e:	4641      	mov	r1, r8
 800c260:	4620      	mov	r0, r4
 800c262:	d106      	bne.n	800c272 <_dtoa_r+0xb0a>
 800c264:	f000 fe7c 	bl	800cf60 <__multadd>
 800c268:	4680      	mov	r8, r0
 800c26a:	4607      	mov	r7, r0
 800c26c:	f109 0901 	add.w	r9, r9, #1
 800c270:	e772      	b.n	800c158 <_dtoa_r+0x9f0>
 800c272:	f000 fe75 	bl	800cf60 <__multadd>
 800c276:	4639      	mov	r1, r7
 800c278:	4680      	mov	r8, r0
 800c27a:	2300      	movs	r3, #0
 800c27c:	220a      	movs	r2, #10
 800c27e:	4620      	mov	r0, r4
 800c280:	f000 fe6e 	bl	800cf60 <__multadd>
 800c284:	4607      	mov	r7, r0
 800c286:	e7f1      	b.n	800c26c <_dtoa_r+0xb04>
 800c288:	9b03      	ldr	r3, [sp, #12]
 800c28a:	9302      	str	r3, [sp, #8]
 800c28c:	9d01      	ldr	r5, [sp, #4]
 800c28e:	ee18 0a10 	vmov	r0, s16
 800c292:	4631      	mov	r1, r6
 800c294:	f7ff f9dc 	bl	800b650 <quorem>
 800c298:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c29c:	9b01      	ldr	r3, [sp, #4]
 800c29e:	f805 ab01 	strb.w	sl, [r5], #1
 800c2a2:	1aea      	subs	r2, r5, r3
 800c2a4:	9b02      	ldr	r3, [sp, #8]
 800c2a6:	4293      	cmp	r3, r2
 800c2a8:	dd09      	ble.n	800c2be <_dtoa_r+0xb56>
 800c2aa:	ee18 1a10 	vmov	r1, s16
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	220a      	movs	r2, #10
 800c2b2:	4620      	mov	r0, r4
 800c2b4:	f000 fe54 	bl	800cf60 <__multadd>
 800c2b8:	ee08 0a10 	vmov	s16, r0
 800c2bc:	e7e7      	b.n	800c28e <_dtoa_r+0xb26>
 800c2be:	9b02      	ldr	r3, [sp, #8]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	bfc8      	it	gt
 800c2c4:	461d      	movgt	r5, r3
 800c2c6:	9b01      	ldr	r3, [sp, #4]
 800c2c8:	bfd8      	it	le
 800c2ca:	2501      	movle	r5, #1
 800c2cc:	441d      	add	r5, r3
 800c2ce:	f04f 0800 	mov.w	r8, #0
 800c2d2:	ee18 1a10 	vmov	r1, s16
 800c2d6:	2201      	movs	r2, #1
 800c2d8:	4620      	mov	r0, r4
 800c2da:	f001 f83b 	bl	800d354 <__lshift>
 800c2de:	4631      	mov	r1, r6
 800c2e0:	ee08 0a10 	vmov	s16, r0
 800c2e4:	f001 f8a6 	bl	800d434 <__mcmp>
 800c2e8:	2800      	cmp	r0, #0
 800c2ea:	dc91      	bgt.n	800c210 <_dtoa_r+0xaa8>
 800c2ec:	d102      	bne.n	800c2f4 <_dtoa_r+0xb8c>
 800c2ee:	f01a 0f01 	tst.w	sl, #1
 800c2f2:	d18d      	bne.n	800c210 <_dtoa_r+0xaa8>
 800c2f4:	462b      	mov	r3, r5
 800c2f6:	461d      	mov	r5, r3
 800c2f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c2fc:	2a30      	cmp	r2, #48	; 0x30
 800c2fe:	d0fa      	beq.n	800c2f6 <_dtoa_r+0xb8e>
 800c300:	e6d7      	b.n	800c0b2 <_dtoa_r+0x94a>
 800c302:	9a01      	ldr	r2, [sp, #4]
 800c304:	429a      	cmp	r2, r3
 800c306:	d184      	bne.n	800c212 <_dtoa_r+0xaaa>
 800c308:	9b00      	ldr	r3, [sp, #0]
 800c30a:	3301      	adds	r3, #1
 800c30c:	9300      	str	r3, [sp, #0]
 800c30e:	2331      	movs	r3, #49	; 0x31
 800c310:	7013      	strb	r3, [r2, #0]
 800c312:	e6ce      	b.n	800c0b2 <_dtoa_r+0x94a>
 800c314:	4b09      	ldr	r3, [pc, #36]	; (800c33c <_dtoa_r+0xbd4>)
 800c316:	f7ff ba95 	b.w	800b844 <_dtoa_r+0xdc>
 800c31a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	f47f aa6e 	bne.w	800b7fe <_dtoa_r+0x96>
 800c322:	4b07      	ldr	r3, [pc, #28]	; (800c340 <_dtoa_r+0xbd8>)
 800c324:	f7ff ba8e 	b.w	800b844 <_dtoa_r+0xdc>
 800c328:	9b02      	ldr	r3, [sp, #8]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	dcae      	bgt.n	800c28c <_dtoa_r+0xb24>
 800c32e:	9b06      	ldr	r3, [sp, #24]
 800c330:	2b02      	cmp	r3, #2
 800c332:	f73f aea8 	bgt.w	800c086 <_dtoa_r+0x91e>
 800c336:	e7a9      	b.n	800c28c <_dtoa_r+0xb24>
 800c338:	0800e718 	.word	0x0800e718
 800c33c:	0800e51c 	.word	0x0800e51c
 800c340:	0800e699 	.word	0x0800e699

0800c344 <__sflush_r>:
 800c344:	898a      	ldrh	r2, [r1, #12]
 800c346:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c34a:	4605      	mov	r5, r0
 800c34c:	0710      	lsls	r0, r2, #28
 800c34e:	460c      	mov	r4, r1
 800c350:	d458      	bmi.n	800c404 <__sflush_r+0xc0>
 800c352:	684b      	ldr	r3, [r1, #4]
 800c354:	2b00      	cmp	r3, #0
 800c356:	dc05      	bgt.n	800c364 <__sflush_r+0x20>
 800c358:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	dc02      	bgt.n	800c364 <__sflush_r+0x20>
 800c35e:	2000      	movs	r0, #0
 800c360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c364:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c366:	2e00      	cmp	r6, #0
 800c368:	d0f9      	beq.n	800c35e <__sflush_r+0x1a>
 800c36a:	2300      	movs	r3, #0
 800c36c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c370:	682f      	ldr	r7, [r5, #0]
 800c372:	602b      	str	r3, [r5, #0]
 800c374:	d032      	beq.n	800c3dc <__sflush_r+0x98>
 800c376:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c378:	89a3      	ldrh	r3, [r4, #12]
 800c37a:	075a      	lsls	r2, r3, #29
 800c37c:	d505      	bpl.n	800c38a <__sflush_r+0x46>
 800c37e:	6863      	ldr	r3, [r4, #4]
 800c380:	1ac0      	subs	r0, r0, r3
 800c382:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c384:	b10b      	cbz	r3, 800c38a <__sflush_r+0x46>
 800c386:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c388:	1ac0      	subs	r0, r0, r3
 800c38a:	2300      	movs	r3, #0
 800c38c:	4602      	mov	r2, r0
 800c38e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c390:	6a21      	ldr	r1, [r4, #32]
 800c392:	4628      	mov	r0, r5
 800c394:	47b0      	blx	r6
 800c396:	1c43      	adds	r3, r0, #1
 800c398:	89a3      	ldrh	r3, [r4, #12]
 800c39a:	d106      	bne.n	800c3aa <__sflush_r+0x66>
 800c39c:	6829      	ldr	r1, [r5, #0]
 800c39e:	291d      	cmp	r1, #29
 800c3a0:	d82c      	bhi.n	800c3fc <__sflush_r+0xb8>
 800c3a2:	4a2a      	ldr	r2, [pc, #168]	; (800c44c <__sflush_r+0x108>)
 800c3a4:	40ca      	lsrs	r2, r1
 800c3a6:	07d6      	lsls	r6, r2, #31
 800c3a8:	d528      	bpl.n	800c3fc <__sflush_r+0xb8>
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	6062      	str	r2, [r4, #4]
 800c3ae:	04d9      	lsls	r1, r3, #19
 800c3b0:	6922      	ldr	r2, [r4, #16]
 800c3b2:	6022      	str	r2, [r4, #0]
 800c3b4:	d504      	bpl.n	800c3c0 <__sflush_r+0x7c>
 800c3b6:	1c42      	adds	r2, r0, #1
 800c3b8:	d101      	bne.n	800c3be <__sflush_r+0x7a>
 800c3ba:	682b      	ldr	r3, [r5, #0]
 800c3bc:	b903      	cbnz	r3, 800c3c0 <__sflush_r+0x7c>
 800c3be:	6560      	str	r0, [r4, #84]	; 0x54
 800c3c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c3c2:	602f      	str	r7, [r5, #0]
 800c3c4:	2900      	cmp	r1, #0
 800c3c6:	d0ca      	beq.n	800c35e <__sflush_r+0x1a>
 800c3c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c3cc:	4299      	cmp	r1, r3
 800c3ce:	d002      	beq.n	800c3d6 <__sflush_r+0x92>
 800c3d0:	4628      	mov	r0, r5
 800c3d2:	f001 fa3b 	bl	800d84c <_free_r>
 800c3d6:	2000      	movs	r0, #0
 800c3d8:	6360      	str	r0, [r4, #52]	; 0x34
 800c3da:	e7c1      	b.n	800c360 <__sflush_r+0x1c>
 800c3dc:	6a21      	ldr	r1, [r4, #32]
 800c3de:	2301      	movs	r3, #1
 800c3e0:	4628      	mov	r0, r5
 800c3e2:	47b0      	blx	r6
 800c3e4:	1c41      	adds	r1, r0, #1
 800c3e6:	d1c7      	bne.n	800c378 <__sflush_r+0x34>
 800c3e8:	682b      	ldr	r3, [r5, #0]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d0c4      	beq.n	800c378 <__sflush_r+0x34>
 800c3ee:	2b1d      	cmp	r3, #29
 800c3f0:	d001      	beq.n	800c3f6 <__sflush_r+0xb2>
 800c3f2:	2b16      	cmp	r3, #22
 800c3f4:	d101      	bne.n	800c3fa <__sflush_r+0xb6>
 800c3f6:	602f      	str	r7, [r5, #0]
 800c3f8:	e7b1      	b.n	800c35e <__sflush_r+0x1a>
 800c3fa:	89a3      	ldrh	r3, [r4, #12]
 800c3fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c400:	81a3      	strh	r3, [r4, #12]
 800c402:	e7ad      	b.n	800c360 <__sflush_r+0x1c>
 800c404:	690f      	ldr	r7, [r1, #16]
 800c406:	2f00      	cmp	r7, #0
 800c408:	d0a9      	beq.n	800c35e <__sflush_r+0x1a>
 800c40a:	0793      	lsls	r3, r2, #30
 800c40c:	680e      	ldr	r6, [r1, #0]
 800c40e:	bf08      	it	eq
 800c410:	694b      	ldreq	r3, [r1, #20]
 800c412:	600f      	str	r7, [r1, #0]
 800c414:	bf18      	it	ne
 800c416:	2300      	movne	r3, #0
 800c418:	eba6 0807 	sub.w	r8, r6, r7
 800c41c:	608b      	str	r3, [r1, #8]
 800c41e:	f1b8 0f00 	cmp.w	r8, #0
 800c422:	dd9c      	ble.n	800c35e <__sflush_r+0x1a>
 800c424:	6a21      	ldr	r1, [r4, #32]
 800c426:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c428:	4643      	mov	r3, r8
 800c42a:	463a      	mov	r2, r7
 800c42c:	4628      	mov	r0, r5
 800c42e:	47b0      	blx	r6
 800c430:	2800      	cmp	r0, #0
 800c432:	dc06      	bgt.n	800c442 <__sflush_r+0xfe>
 800c434:	89a3      	ldrh	r3, [r4, #12]
 800c436:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c43a:	81a3      	strh	r3, [r4, #12]
 800c43c:	f04f 30ff 	mov.w	r0, #4294967295
 800c440:	e78e      	b.n	800c360 <__sflush_r+0x1c>
 800c442:	4407      	add	r7, r0
 800c444:	eba8 0800 	sub.w	r8, r8, r0
 800c448:	e7e9      	b.n	800c41e <__sflush_r+0xda>
 800c44a:	bf00      	nop
 800c44c:	20400001 	.word	0x20400001

0800c450 <_fflush_r>:
 800c450:	b538      	push	{r3, r4, r5, lr}
 800c452:	690b      	ldr	r3, [r1, #16]
 800c454:	4605      	mov	r5, r0
 800c456:	460c      	mov	r4, r1
 800c458:	b913      	cbnz	r3, 800c460 <_fflush_r+0x10>
 800c45a:	2500      	movs	r5, #0
 800c45c:	4628      	mov	r0, r5
 800c45e:	bd38      	pop	{r3, r4, r5, pc}
 800c460:	b118      	cbz	r0, 800c46a <_fflush_r+0x1a>
 800c462:	6983      	ldr	r3, [r0, #24]
 800c464:	b90b      	cbnz	r3, 800c46a <_fflush_r+0x1a>
 800c466:	f000 f887 	bl	800c578 <__sinit>
 800c46a:	4b14      	ldr	r3, [pc, #80]	; (800c4bc <_fflush_r+0x6c>)
 800c46c:	429c      	cmp	r4, r3
 800c46e:	d11b      	bne.n	800c4a8 <_fflush_r+0x58>
 800c470:	686c      	ldr	r4, [r5, #4]
 800c472:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d0ef      	beq.n	800c45a <_fflush_r+0xa>
 800c47a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c47c:	07d0      	lsls	r0, r2, #31
 800c47e:	d404      	bmi.n	800c48a <_fflush_r+0x3a>
 800c480:	0599      	lsls	r1, r3, #22
 800c482:	d402      	bmi.n	800c48a <_fflush_r+0x3a>
 800c484:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c486:	f000 fc88 	bl	800cd9a <__retarget_lock_acquire_recursive>
 800c48a:	4628      	mov	r0, r5
 800c48c:	4621      	mov	r1, r4
 800c48e:	f7ff ff59 	bl	800c344 <__sflush_r>
 800c492:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c494:	07da      	lsls	r2, r3, #31
 800c496:	4605      	mov	r5, r0
 800c498:	d4e0      	bmi.n	800c45c <_fflush_r+0xc>
 800c49a:	89a3      	ldrh	r3, [r4, #12]
 800c49c:	059b      	lsls	r3, r3, #22
 800c49e:	d4dd      	bmi.n	800c45c <_fflush_r+0xc>
 800c4a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c4a2:	f000 fc7b 	bl	800cd9c <__retarget_lock_release_recursive>
 800c4a6:	e7d9      	b.n	800c45c <_fflush_r+0xc>
 800c4a8:	4b05      	ldr	r3, [pc, #20]	; (800c4c0 <_fflush_r+0x70>)
 800c4aa:	429c      	cmp	r4, r3
 800c4ac:	d101      	bne.n	800c4b2 <_fflush_r+0x62>
 800c4ae:	68ac      	ldr	r4, [r5, #8]
 800c4b0:	e7df      	b.n	800c472 <_fflush_r+0x22>
 800c4b2:	4b04      	ldr	r3, [pc, #16]	; (800c4c4 <_fflush_r+0x74>)
 800c4b4:	429c      	cmp	r4, r3
 800c4b6:	bf08      	it	eq
 800c4b8:	68ec      	ldreq	r4, [r5, #12]
 800c4ba:	e7da      	b.n	800c472 <_fflush_r+0x22>
 800c4bc:	0800e74c 	.word	0x0800e74c
 800c4c0:	0800e76c 	.word	0x0800e76c
 800c4c4:	0800e72c 	.word	0x0800e72c

0800c4c8 <std>:
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	b510      	push	{r4, lr}
 800c4cc:	4604      	mov	r4, r0
 800c4ce:	e9c0 3300 	strd	r3, r3, [r0]
 800c4d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c4d6:	6083      	str	r3, [r0, #8]
 800c4d8:	8181      	strh	r1, [r0, #12]
 800c4da:	6643      	str	r3, [r0, #100]	; 0x64
 800c4dc:	81c2      	strh	r2, [r0, #14]
 800c4de:	6183      	str	r3, [r0, #24]
 800c4e0:	4619      	mov	r1, r3
 800c4e2:	2208      	movs	r2, #8
 800c4e4:	305c      	adds	r0, #92	; 0x5c
 800c4e6:	f7fd fa0f 	bl	8009908 <memset>
 800c4ea:	4b05      	ldr	r3, [pc, #20]	; (800c500 <std+0x38>)
 800c4ec:	6263      	str	r3, [r4, #36]	; 0x24
 800c4ee:	4b05      	ldr	r3, [pc, #20]	; (800c504 <std+0x3c>)
 800c4f0:	62a3      	str	r3, [r4, #40]	; 0x28
 800c4f2:	4b05      	ldr	r3, [pc, #20]	; (800c508 <std+0x40>)
 800c4f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c4f6:	4b05      	ldr	r3, [pc, #20]	; (800c50c <std+0x44>)
 800c4f8:	6224      	str	r4, [r4, #32]
 800c4fa:	6323      	str	r3, [r4, #48]	; 0x30
 800c4fc:	bd10      	pop	{r4, pc}
 800c4fe:	bf00      	nop
 800c500:	0800dfa9 	.word	0x0800dfa9
 800c504:	0800dfcb 	.word	0x0800dfcb
 800c508:	0800e003 	.word	0x0800e003
 800c50c:	0800e027 	.word	0x0800e027

0800c510 <_cleanup_r>:
 800c510:	4901      	ldr	r1, [pc, #4]	; (800c518 <_cleanup_r+0x8>)
 800c512:	f000 b8af 	b.w	800c674 <_fwalk_reent>
 800c516:	bf00      	nop
 800c518:	0800c451 	.word	0x0800c451

0800c51c <__sfmoreglue>:
 800c51c:	b570      	push	{r4, r5, r6, lr}
 800c51e:	2268      	movs	r2, #104	; 0x68
 800c520:	1e4d      	subs	r5, r1, #1
 800c522:	4355      	muls	r5, r2
 800c524:	460e      	mov	r6, r1
 800c526:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c52a:	f001 f9fb 	bl	800d924 <_malloc_r>
 800c52e:	4604      	mov	r4, r0
 800c530:	b140      	cbz	r0, 800c544 <__sfmoreglue+0x28>
 800c532:	2100      	movs	r1, #0
 800c534:	e9c0 1600 	strd	r1, r6, [r0]
 800c538:	300c      	adds	r0, #12
 800c53a:	60a0      	str	r0, [r4, #8]
 800c53c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c540:	f7fd f9e2 	bl	8009908 <memset>
 800c544:	4620      	mov	r0, r4
 800c546:	bd70      	pop	{r4, r5, r6, pc}

0800c548 <__sfp_lock_acquire>:
 800c548:	4801      	ldr	r0, [pc, #4]	; (800c550 <__sfp_lock_acquire+0x8>)
 800c54a:	f000 bc26 	b.w	800cd9a <__retarget_lock_acquire_recursive>
 800c54e:	bf00      	nop
 800c550:	20000559 	.word	0x20000559

0800c554 <__sfp_lock_release>:
 800c554:	4801      	ldr	r0, [pc, #4]	; (800c55c <__sfp_lock_release+0x8>)
 800c556:	f000 bc21 	b.w	800cd9c <__retarget_lock_release_recursive>
 800c55a:	bf00      	nop
 800c55c:	20000559 	.word	0x20000559

0800c560 <__sinit_lock_acquire>:
 800c560:	4801      	ldr	r0, [pc, #4]	; (800c568 <__sinit_lock_acquire+0x8>)
 800c562:	f000 bc1a 	b.w	800cd9a <__retarget_lock_acquire_recursive>
 800c566:	bf00      	nop
 800c568:	2000055a 	.word	0x2000055a

0800c56c <__sinit_lock_release>:
 800c56c:	4801      	ldr	r0, [pc, #4]	; (800c574 <__sinit_lock_release+0x8>)
 800c56e:	f000 bc15 	b.w	800cd9c <__retarget_lock_release_recursive>
 800c572:	bf00      	nop
 800c574:	2000055a 	.word	0x2000055a

0800c578 <__sinit>:
 800c578:	b510      	push	{r4, lr}
 800c57a:	4604      	mov	r4, r0
 800c57c:	f7ff fff0 	bl	800c560 <__sinit_lock_acquire>
 800c580:	69a3      	ldr	r3, [r4, #24]
 800c582:	b11b      	cbz	r3, 800c58c <__sinit+0x14>
 800c584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c588:	f7ff bff0 	b.w	800c56c <__sinit_lock_release>
 800c58c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c590:	6523      	str	r3, [r4, #80]	; 0x50
 800c592:	4b13      	ldr	r3, [pc, #76]	; (800c5e0 <__sinit+0x68>)
 800c594:	4a13      	ldr	r2, [pc, #76]	; (800c5e4 <__sinit+0x6c>)
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	62a2      	str	r2, [r4, #40]	; 0x28
 800c59a:	42a3      	cmp	r3, r4
 800c59c:	bf04      	itt	eq
 800c59e:	2301      	moveq	r3, #1
 800c5a0:	61a3      	streq	r3, [r4, #24]
 800c5a2:	4620      	mov	r0, r4
 800c5a4:	f000 f820 	bl	800c5e8 <__sfp>
 800c5a8:	6060      	str	r0, [r4, #4]
 800c5aa:	4620      	mov	r0, r4
 800c5ac:	f000 f81c 	bl	800c5e8 <__sfp>
 800c5b0:	60a0      	str	r0, [r4, #8]
 800c5b2:	4620      	mov	r0, r4
 800c5b4:	f000 f818 	bl	800c5e8 <__sfp>
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	60e0      	str	r0, [r4, #12]
 800c5bc:	2104      	movs	r1, #4
 800c5be:	6860      	ldr	r0, [r4, #4]
 800c5c0:	f7ff ff82 	bl	800c4c8 <std>
 800c5c4:	68a0      	ldr	r0, [r4, #8]
 800c5c6:	2201      	movs	r2, #1
 800c5c8:	2109      	movs	r1, #9
 800c5ca:	f7ff ff7d 	bl	800c4c8 <std>
 800c5ce:	68e0      	ldr	r0, [r4, #12]
 800c5d0:	2202      	movs	r2, #2
 800c5d2:	2112      	movs	r1, #18
 800c5d4:	f7ff ff78 	bl	800c4c8 <std>
 800c5d8:	2301      	movs	r3, #1
 800c5da:	61a3      	str	r3, [r4, #24]
 800c5dc:	e7d2      	b.n	800c584 <__sinit+0xc>
 800c5de:	bf00      	nop
 800c5e0:	0800e508 	.word	0x0800e508
 800c5e4:	0800c511 	.word	0x0800c511

0800c5e8 <__sfp>:
 800c5e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5ea:	4607      	mov	r7, r0
 800c5ec:	f7ff ffac 	bl	800c548 <__sfp_lock_acquire>
 800c5f0:	4b1e      	ldr	r3, [pc, #120]	; (800c66c <__sfp+0x84>)
 800c5f2:	681e      	ldr	r6, [r3, #0]
 800c5f4:	69b3      	ldr	r3, [r6, #24]
 800c5f6:	b913      	cbnz	r3, 800c5fe <__sfp+0x16>
 800c5f8:	4630      	mov	r0, r6
 800c5fa:	f7ff ffbd 	bl	800c578 <__sinit>
 800c5fe:	3648      	adds	r6, #72	; 0x48
 800c600:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c604:	3b01      	subs	r3, #1
 800c606:	d503      	bpl.n	800c610 <__sfp+0x28>
 800c608:	6833      	ldr	r3, [r6, #0]
 800c60a:	b30b      	cbz	r3, 800c650 <__sfp+0x68>
 800c60c:	6836      	ldr	r6, [r6, #0]
 800c60e:	e7f7      	b.n	800c600 <__sfp+0x18>
 800c610:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c614:	b9d5      	cbnz	r5, 800c64c <__sfp+0x64>
 800c616:	4b16      	ldr	r3, [pc, #88]	; (800c670 <__sfp+0x88>)
 800c618:	60e3      	str	r3, [r4, #12]
 800c61a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c61e:	6665      	str	r5, [r4, #100]	; 0x64
 800c620:	f000 fbba 	bl	800cd98 <__retarget_lock_init_recursive>
 800c624:	f7ff ff96 	bl	800c554 <__sfp_lock_release>
 800c628:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c62c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c630:	6025      	str	r5, [r4, #0]
 800c632:	61a5      	str	r5, [r4, #24]
 800c634:	2208      	movs	r2, #8
 800c636:	4629      	mov	r1, r5
 800c638:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c63c:	f7fd f964 	bl	8009908 <memset>
 800c640:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c644:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c648:	4620      	mov	r0, r4
 800c64a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c64c:	3468      	adds	r4, #104	; 0x68
 800c64e:	e7d9      	b.n	800c604 <__sfp+0x1c>
 800c650:	2104      	movs	r1, #4
 800c652:	4638      	mov	r0, r7
 800c654:	f7ff ff62 	bl	800c51c <__sfmoreglue>
 800c658:	4604      	mov	r4, r0
 800c65a:	6030      	str	r0, [r6, #0]
 800c65c:	2800      	cmp	r0, #0
 800c65e:	d1d5      	bne.n	800c60c <__sfp+0x24>
 800c660:	f7ff ff78 	bl	800c554 <__sfp_lock_release>
 800c664:	230c      	movs	r3, #12
 800c666:	603b      	str	r3, [r7, #0]
 800c668:	e7ee      	b.n	800c648 <__sfp+0x60>
 800c66a:	bf00      	nop
 800c66c:	0800e508 	.word	0x0800e508
 800c670:	ffff0001 	.word	0xffff0001

0800c674 <_fwalk_reent>:
 800c674:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c678:	4606      	mov	r6, r0
 800c67a:	4688      	mov	r8, r1
 800c67c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c680:	2700      	movs	r7, #0
 800c682:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c686:	f1b9 0901 	subs.w	r9, r9, #1
 800c68a:	d505      	bpl.n	800c698 <_fwalk_reent+0x24>
 800c68c:	6824      	ldr	r4, [r4, #0]
 800c68e:	2c00      	cmp	r4, #0
 800c690:	d1f7      	bne.n	800c682 <_fwalk_reent+0xe>
 800c692:	4638      	mov	r0, r7
 800c694:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c698:	89ab      	ldrh	r3, [r5, #12]
 800c69a:	2b01      	cmp	r3, #1
 800c69c:	d907      	bls.n	800c6ae <_fwalk_reent+0x3a>
 800c69e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c6a2:	3301      	adds	r3, #1
 800c6a4:	d003      	beq.n	800c6ae <_fwalk_reent+0x3a>
 800c6a6:	4629      	mov	r1, r5
 800c6a8:	4630      	mov	r0, r6
 800c6aa:	47c0      	blx	r8
 800c6ac:	4307      	orrs	r7, r0
 800c6ae:	3568      	adds	r5, #104	; 0x68
 800c6b0:	e7e9      	b.n	800c686 <_fwalk_reent+0x12>

0800c6b2 <rshift>:
 800c6b2:	6903      	ldr	r3, [r0, #16]
 800c6b4:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c6b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c6bc:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c6c0:	f100 0414 	add.w	r4, r0, #20
 800c6c4:	dd45      	ble.n	800c752 <rshift+0xa0>
 800c6c6:	f011 011f 	ands.w	r1, r1, #31
 800c6ca:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c6ce:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c6d2:	d10c      	bne.n	800c6ee <rshift+0x3c>
 800c6d4:	f100 0710 	add.w	r7, r0, #16
 800c6d8:	4629      	mov	r1, r5
 800c6da:	42b1      	cmp	r1, r6
 800c6dc:	d334      	bcc.n	800c748 <rshift+0x96>
 800c6de:	1a9b      	subs	r3, r3, r2
 800c6e0:	009b      	lsls	r3, r3, #2
 800c6e2:	1eea      	subs	r2, r5, #3
 800c6e4:	4296      	cmp	r6, r2
 800c6e6:	bf38      	it	cc
 800c6e8:	2300      	movcc	r3, #0
 800c6ea:	4423      	add	r3, r4
 800c6ec:	e015      	b.n	800c71a <rshift+0x68>
 800c6ee:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c6f2:	f1c1 0820 	rsb	r8, r1, #32
 800c6f6:	40cf      	lsrs	r7, r1
 800c6f8:	f105 0e04 	add.w	lr, r5, #4
 800c6fc:	46a1      	mov	r9, r4
 800c6fe:	4576      	cmp	r6, lr
 800c700:	46f4      	mov	ip, lr
 800c702:	d815      	bhi.n	800c730 <rshift+0x7e>
 800c704:	1a9a      	subs	r2, r3, r2
 800c706:	0092      	lsls	r2, r2, #2
 800c708:	3a04      	subs	r2, #4
 800c70a:	3501      	adds	r5, #1
 800c70c:	42ae      	cmp	r6, r5
 800c70e:	bf38      	it	cc
 800c710:	2200      	movcc	r2, #0
 800c712:	18a3      	adds	r3, r4, r2
 800c714:	50a7      	str	r7, [r4, r2]
 800c716:	b107      	cbz	r7, 800c71a <rshift+0x68>
 800c718:	3304      	adds	r3, #4
 800c71a:	1b1a      	subs	r2, r3, r4
 800c71c:	42a3      	cmp	r3, r4
 800c71e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c722:	bf08      	it	eq
 800c724:	2300      	moveq	r3, #0
 800c726:	6102      	str	r2, [r0, #16]
 800c728:	bf08      	it	eq
 800c72a:	6143      	streq	r3, [r0, #20]
 800c72c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c730:	f8dc c000 	ldr.w	ip, [ip]
 800c734:	fa0c fc08 	lsl.w	ip, ip, r8
 800c738:	ea4c 0707 	orr.w	r7, ip, r7
 800c73c:	f849 7b04 	str.w	r7, [r9], #4
 800c740:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c744:	40cf      	lsrs	r7, r1
 800c746:	e7da      	b.n	800c6fe <rshift+0x4c>
 800c748:	f851 cb04 	ldr.w	ip, [r1], #4
 800c74c:	f847 cf04 	str.w	ip, [r7, #4]!
 800c750:	e7c3      	b.n	800c6da <rshift+0x28>
 800c752:	4623      	mov	r3, r4
 800c754:	e7e1      	b.n	800c71a <rshift+0x68>

0800c756 <__hexdig_fun>:
 800c756:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c75a:	2b09      	cmp	r3, #9
 800c75c:	d802      	bhi.n	800c764 <__hexdig_fun+0xe>
 800c75e:	3820      	subs	r0, #32
 800c760:	b2c0      	uxtb	r0, r0
 800c762:	4770      	bx	lr
 800c764:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c768:	2b05      	cmp	r3, #5
 800c76a:	d801      	bhi.n	800c770 <__hexdig_fun+0x1a>
 800c76c:	3847      	subs	r0, #71	; 0x47
 800c76e:	e7f7      	b.n	800c760 <__hexdig_fun+0xa>
 800c770:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c774:	2b05      	cmp	r3, #5
 800c776:	d801      	bhi.n	800c77c <__hexdig_fun+0x26>
 800c778:	3827      	subs	r0, #39	; 0x27
 800c77a:	e7f1      	b.n	800c760 <__hexdig_fun+0xa>
 800c77c:	2000      	movs	r0, #0
 800c77e:	4770      	bx	lr

0800c780 <__gethex>:
 800c780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c784:	ed2d 8b02 	vpush	{d8}
 800c788:	b089      	sub	sp, #36	; 0x24
 800c78a:	ee08 0a10 	vmov	s16, r0
 800c78e:	9304      	str	r3, [sp, #16]
 800c790:	4bb4      	ldr	r3, [pc, #720]	; (800ca64 <__gethex+0x2e4>)
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	9301      	str	r3, [sp, #4]
 800c796:	4618      	mov	r0, r3
 800c798:	468b      	mov	fp, r1
 800c79a:	4690      	mov	r8, r2
 800c79c:	f7f3 fd18 	bl	80001d0 <strlen>
 800c7a0:	9b01      	ldr	r3, [sp, #4]
 800c7a2:	f8db 2000 	ldr.w	r2, [fp]
 800c7a6:	4403      	add	r3, r0
 800c7a8:	4682      	mov	sl, r0
 800c7aa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c7ae:	9305      	str	r3, [sp, #20]
 800c7b0:	1c93      	adds	r3, r2, #2
 800c7b2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c7b6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c7ba:	32fe      	adds	r2, #254	; 0xfe
 800c7bc:	18d1      	adds	r1, r2, r3
 800c7be:	461f      	mov	r7, r3
 800c7c0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c7c4:	9100      	str	r1, [sp, #0]
 800c7c6:	2830      	cmp	r0, #48	; 0x30
 800c7c8:	d0f8      	beq.n	800c7bc <__gethex+0x3c>
 800c7ca:	f7ff ffc4 	bl	800c756 <__hexdig_fun>
 800c7ce:	4604      	mov	r4, r0
 800c7d0:	2800      	cmp	r0, #0
 800c7d2:	d13a      	bne.n	800c84a <__gethex+0xca>
 800c7d4:	9901      	ldr	r1, [sp, #4]
 800c7d6:	4652      	mov	r2, sl
 800c7d8:	4638      	mov	r0, r7
 800c7da:	f001 fc28 	bl	800e02e <strncmp>
 800c7de:	4605      	mov	r5, r0
 800c7e0:	2800      	cmp	r0, #0
 800c7e2:	d168      	bne.n	800c8b6 <__gethex+0x136>
 800c7e4:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c7e8:	eb07 060a 	add.w	r6, r7, sl
 800c7ec:	f7ff ffb3 	bl	800c756 <__hexdig_fun>
 800c7f0:	2800      	cmp	r0, #0
 800c7f2:	d062      	beq.n	800c8ba <__gethex+0x13a>
 800c7f4:	4633      	mov	r3, r6
 800c7f6:	7818      	ldrb	r0, [r3, #0]
 800c7f8:	2830      	cmp	r0, #48	; 0x30
 800c7fa:	461f      	mov	r7, r3
 800c7fc:	f103 0301 	add.w	r3, r3, #1
 800c800:	d0f9      	beq.n	800c7f6 <__gethex+0x76>
 800c802:	f7ff ffa8 	bl	800c756 <__hexdig_fun>
 800c806:	2301      	movs	r3, #1
 800c808:	fab0 f480 	clz	r4, r0
 800c80c:	0964      	lsrs	r4, r4, #5
 800c80e:	4635      	mov	r5, r6
 800c810:	9300      	str	r3, [sp, #0]
 800c812:	463a      	mov	r2, r7
 800c814:	4616      	mov	r6, r2
 800c816:	3201      	adds	r2, #1
 800c818:	7830      	ldrb	r0, [r6, #0]
 800c81a:	f7ff ff9c 	bl	800c756 <__hexdig_fun>
 800c81e:	2800      	cmp	r0, #0
 800c820:	d1f8      	bne.n	800c814 <__gethex+0x94>
 800c822:	9901      	ldr	r1, [sp, #4]
 800c824:	4652      	mov	r2, sl
 800c826:	4630      	mov	r0, r6
 800c828:	f001 fc01 	bl	800e02e <strncmp>
 800c82c:	b980      	cbnz	r0, 800c850 <__gethex+0xd0>
 800c82e:	b94d      	cbnz	r5, 800c844 <__gethex+0xc4>
 800c830:	eb06 050a 	add.w	r5, r6, sl
 800c834:	462a      	mov	r2, r5
 800c836:	4616      	mov	r6, r2
 800c838:	3201      	adds	r2, #1
 800c83a:	7830      	ldrb	r0, [r6, #0]
 800c83c:	f7ff ff8b 	bl	800c756 <__hexdig_fun>
 800c840:	2800      	cmp	r0, #0
 800c842:	d1f8      	bne.n	800c836 <__gethex+0xb6>
 800c844:	1bad      	subs	r5, r5, r6
 800c846:	00ad      	lsls	r5, r5, #2
 800c848:	e004      	b.n	800c854 <__gethex+0xd4>
 800c84a:	2400      	movs	r4, #0
 800c84c:	4625      	mov	r5, r4
 800c84e:	e7e0      	b.n	800c812 <__gethex+0x92>
 800c850:	2d00      	cmp	r5, #0
 800c852:	d1f7      	bne.n	800c844 <__gethex+0xc4>
 800c854:	7833      	ldrb	r3, [r6, #0]
 800c856:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c85a:	2b50      	cmp	r3, #80	; 0x50
 800c85c:	d13b      	bne.n	800c8d6 <__gethex+0x156>
 800c85e:	7873      	ldrb	r3, [r6, #1]
 800c860:	2b2b      	cmp	r3, #43	; 0x2b
 800c862:	d02c      	beq.n	800c8be <__gethex+0x13e>
 800c864:	2b2d      	cmp	r3, #45	; 0x2d
 800c866:	d02e      	beq.n	800c8c6 <__gethex+0x146>
 800c868:	1c71      	adds	r1, r6, #1
 800c86a:	f04f 0900 	mov.w	r9, #0
 800c86e:	7808      	ldrb	r0, [r1, #0]
 800c870:	f7ff ff71 	bl	800c756 <__hexdig_fun>
 800c874:	1e43      	subs	r3, r0, #1
 800c876:	b2db      	uxtb	r3, r3
 800c878:	2b18      	cmp	r3, #24
 800c87a:	d82c      	bhi.n	800c8d6 <__gethex+0x156>
 800c87c:	f1a0 0210 	sub.w	r2, r0, #16
 800c880:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c884:	f7ff ff67 	bl	800c756 <__hexdig_fun>
 800c888:	1e43      	subs	r3, r0, #1
 800c88a:	b2db      	uxtb	r3, r3
 800c88c:	2b18      	cmp	r3, #24
 800c88e:	d91d      	bls.n	800c8cc <__gethex+0x14c>
 800c890:	f1b9 0f00 	cmp.w	r9, #0
 800c894:	d000      	beq.n	800c898 <__gethex+0x118>
 800c896:	4252      	negs	r2, r2
 800c898:	4415      	add	r5, r2
 800c89a:	f8cb 1000 	str.w	r1, [fp]
 800c89e:	b1e4      	cbz	r4, 800c8da <__gethex+0x15a>
 800c8a0:	9b00      	ldr	r3, [sp, #0]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	bf14      	ite	ne
 800c8a6:	2700      	movne	r7, #0
 800c8a8:	2706      	moveq	r7, #6
 800c8aa:	4638      	mov	r0, r7
 800c8ac:	b009      	add	sp, #36	; 0x24
 800c8ae:	ecbd 8b02 	vpop	{d8}
 800c8b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8b6:	463e      	mov	r6, r7
 800c8b8:	4625      	mov	r5, r4
 800c8ba:	2401      	movs	r4, #1
 800c8bc:	e7ca      	b.n	800c854 <__gethex+0xd4>
 800c8be:	f04f 0900 	mov.w	r9, #0
 800c8c2:	1cb1      	adds	r1, r6, #2
 800c8c4:	e7d3      	b.n	800c86e <__gethex+0xee>
 800c8c6:	f04f 0901 	mov.w	r9, #1
 800c8ca:	e7fa      	b.n	800c8c2 <__gethex+0x142>
 800c8cc:	230a      	movs	r3, #10
 800c8ce:	fb03 0202 	mla	r2, r3, r2, r0
 800c8d2:	3a10      	subs	r2, #16
 800c8d4:	e7d4      	b.n	800c880 <__gethex+0x100>
 800c8d6:	4631      	mov	r1, r6
 800c8d8:	e7df      	b.n	800c89a <__gethex+0x11a>
 800c8da:	1bf3      	subs	r3, r6, r7
 800c8dc:	3b01      	subs	r3, #1
 800c8de:	4621      	mov	r1, r4
 800c8e0:	2b07      	cmp	r3, #7
 800c8e2:	dc0b      	bgt.n	800c8fc <__gethex+0x17c>
 800c8e4:	ee18 0a10 	vmov	r0, s16
 800c8e8:	f000 fad8 	bl	800ce9c <_Balloc>
 800c8ec:	4604      	mov	r4, r0
 800c8ee:	b940      	cbnz	r0, 800c902 <__gethex+0x182>
 800c8f0:	4b5d      	ldr	r3, [pc, #372]	; (800ca68 <__gethex+0x2e8>)
 800c8f2:	4602      	mov	r2, r0
 800c8f4:	21de      	movs	r1, #222	; 0xde
 800c8f6:	485d      	ldr	r0, [pc, #372]	; (800ca6c <__gethex+0x2ec>)
 800c8f8:	f001 fbcc 	bl	800e094 <__assert_func>
 800c8fc:	3101      	adds	r1, #1
 800c8fe:	105b      	asrs	r3, r3, #1
 800c900:	e7ee      	b.n	800c8e0 <__gethex+0x160>
 800c902:	f100 0914 	add.w	r9, r0, #20
 800c906:	f04f 0b00 	mov.w	fp, #0
 800c90a:	f1ca 0301 	rsb	r3, sl, #1
 800c90e:	f8cd 9008 	str.w	r9, [sp, #8]
 800c912:	f8cd b000 	str.w	fp, [sp]
 800c916:	9306      	str	r3, [sp, #24]
 800c918:	42b7      	cmp	r7, r6
 800c91a:	d340      	bcc.n	800c99e <__gethex+0x21e>
 800c91c:	9802      	ldr	r0, [sp, #8]
 800c91e:	9b00      	ldr	r3, [sp, #0]
 800c920:	f840 3b04 	str.w	r3, [r0], #4
 800c924:	eba0 0009 	sub.w	r0, r0, r9
 800c928:	1080      	asrs	r0, r0, #2
 800c92a:	0146      	lsls	r6, r0, #5
 800c92c:	6120      	str	r0, [r4, #16]
 800c92e:	4618      	mov	r0, r3
 800c930:	f000 fba6 	bl	800d080 <__hi0bits>
 800c934:	1a30      	subs	r0, r6, r0
 800c936:	f8d8 6000 	ldr.w	r6, [r8]
 800c93a:	42b0      	cmp	r0, r6
 800c93c:	dd63      	ble.n	800ca06 <__gethex+0x286>
 800c93e:	1b87      	subs	r7, r0, r6
 800c940:	4639      	mov	r1, r7
 800c942:	4620      	mov	r0, r4
 800c944:	f000 ff4a 	bl	800d7dc <__any_on>
 800c948:	4682      	mov	sl, r0
 800c94a:	b1a8      	cbz	r0, 800c978 <__gethex+0x1f8>
 800c94c:	1e7b      	subs	r3, r7, #1
 800c94e:	1159      	asrs	r1, r3, #5
 800c950:	f003 021f 	and.w	r2, r3, #31
 800c954:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c958:	f04f 0a01 	mov.w	sl, #1
 800c95c:	fa0a f202 	lsl.w	r2, sl, r2
 800c960:	420a      	tst	r2, r1
 800c962:	d009      	beq.n	800c978 <__gethex+0x1f8>
 800c964:	4553      	cmp	r3, sl
 800c966:	dd05      	ble.n	800c974 <__gethex+0x1f4>
 800c968:	1eb9      	subs	r1, r7, #2
 800c96a:	4620      	mov	r0, r4
 800c96c:	f000 ff36 	bl	800d7dc <__any_on>
 800c970:	2800      	cmp	r0, #0
 800c972:	d145      	bne.n	800ca00 <__gethex+0x280>
 800c974:	f04f 0a02 	mov.w	sl, #2
 800c978:	4639      	mov	r1, r7
 800c97a:	4620      	mov	r0, r4
 800c97c:	f7ff fe99 	bl	800c6b2 <rshift>
 800c980:	443d      	add	r5, r7
 800c982:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c986:	42ab      	cmp	r3, r5
 800c988:	da4c      	bge.n	800ca24 <__gethex+0x2a4>
 800c98a:	ee18 0a10 	vmov	r0, s16
 800c98e:	4621      	mov	r1, r4
 800c990:	f000 fac4 	bl	800cf1c <_Bfree>
 800c994:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c996:	2300      	movs	r3, #0
 800c998:	6013      	str	r3, [r2, #0]
 800c99a:	27a3      	movs	r7, #163	; 0xa3
 800c99c:	e785      	b.n	800c8aa <__gethex+0x12a>
 800c99e:	1e73      	subs	r3, r6, #1
 800c9a0:	9a05      	ldr	r2, [sp, #20]
 800c9a2:	9303      	str	r3, [sp, #12]
 800c9a4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c9a8:	4293      	cmp	r3, r2
 800c9aa:	d019      	beq.n	800c9e0 <__gethex+0x260>
 800c9ac:	f1bb 0f20 	cmp.w	fp, #32
 800c9b0:	d107      	bne.n	800c9c2 <__gethex+0x242>
 800c9b2:	9b02      	ldr	r3, [sp, #8]
 800c9b4:	9a00      	ldr	r2, [sp, #0]
 800c9b6:	f843 2b04 	str.w	r2, [r3], #4
 800c9ba:	9302      	str	r3, [sp, #8]
 800c9bc:	2300      	movs	r3, #0
 800c9be:	9300      	str	r3, [sp, #0]
 800c9c0:	469b      	mov	fp, r3
 800c9c2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c9c6:	f7ff fec6 	bl	800c756 <__hexdig_fun>
 800c9ca:	9b00      	ldr	r3, [sp, #0]
 800c9cc:	f000 000f 	and.w	r0, r0, #15
 800c9d0:	fa00 f00b 	lsl.w	r0, r0, fp
 800c9d4:	4303      	orrs	r3, r0
 800c9d6:	9300      	str	r3, [sp, #0]
 800c9d8:	f10b 0b04 	add.w	fp, fp, #4
 800c9dc:	9b03      	ldr	r3, [sp, #12]
 800c9de:	e00d      	b.n	800c9fc <__gethex+0x27c>
 800c9e0:	9b03      	ldr	r3, [sp, #12]
 800c9e2:	9a06      	ldr	r2, [sp, #24]
 800c9e4:	4413      	add	r3, r2
 800c9e6:	42bb      	cmp	r3, r7
 800c9e8:	d3e0      	bcc.n	800c9ac <__gethex+0x22c>
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	9901      	ldr	r1, [sp, #4]
 800c9ee:	9307      	str	r3, [sp, #28]
 800c9f0:	4652      	mov	r2, sl
 800c9f2:	f001 fb1c 	bl	800e02e <strncmp>
 800c9f6:	9b07      	ldr	r3, [sp, #28]
 800c9f8:	2800      	cmp	r0, #0
 800c9fa:	d1d7      	bne.n	800c9ac <__gethex+0x22c>
 800c9fc:	461e      	mov	r6, r3
 800c9fe:	e78b      	b.n	800c918 <__gethex+0x198>
 800ca00:	f04f 0a03 	mov.w	sl, #3
 800ca04:	e7b8      	b.n	800c978 <__gethex+0x1f8>
 800ca06:	da0a      	bge.n	800ca1e <__gethex+0x29e>
 800ca08:	1a37      	subs	r7, r6, r0
 800ca0a:	4621      	mov	r1, r4
 800ca0c:	ee18 0a10 	vmov	r0, s16
 800ca10:	463a      	mov	r2, r7
 800ca12:	f000 fc9f 	bl	800d354 <__lshift>
 800ca16:	1bed      	subs	r5, r5, r7
 800ca18:	4604      	mov	r4, r0
 800ca1a:	f100 0914 	add.w	r9, r0, #20
 800ca1e:	f04f 0a00 	mov.w	sl, #0
 800ca22:	e7ae      	b.n	800c982 <__gethex+0x202>
 800ca24:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ca28:	42a8      	cmp	r0, r5
 800ca2a:	dd72      	ble.n	800cb12 <__gethex+0x392>
 800ca2c:	1b45      	subs	r5, r0, r5
 800ca2e:	42ae      	cmp	r6, r5
 800ca30:	dc36      	bgt.n	800caa0 <__gethex+0x320>
 800ca32:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ca36:	2b02      	cmp	r3, #2
 800ca38:	d02a      	beq.n	800ca90 <__gethex+0x310>
 800ca3a:	2b03      	cmp	r3, #3
 800ca3c:	d02c      	beq.n	800ca98 <__gethex+0x318>
 800ca3e:	2b01      	cmp	r3, #1
 800ca40:	d11c      	bne.n	800ca7c <__gethex+0x2fc>
 800ca42:	42ae      	cmp	r6, r5
 800ca44:	d11a      	bne.n	800ca7c <__gethex+0x2fc>
 800ca46:	2e01      	cmp	r6, #1
 800ca48:	d112      	bne.n	800ca70 <__gethex+0x2f0>
 800ca4a:	9a04      	ldr	r2, [sp, #16]
 800ca4c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ca50:	6013      	str	r3, [r2, #0]
 800ca52:	2301      	movs	r3, #1
 800ca54:	6123      	str	r3, [r4, #16]
 800ca56:	f8c9 3000 	str.w	r3, [r9]
 800ca5a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ca5c:	2762      	movs	r7, #98	; 0x62
 800ca5e:	601c      	str	r4, [r3, #0]
 800ca60:	e723      	b.n	800c8aa <__gethex+0x12a>
 800ca62:	bf00      	nop
 800ca64:	0800e7f4 	.word	0x0800e7f4
 800ca68:	0800e718 	.word	0x0800e718
 800ca6c:	0800e78c 	.word	0x0800e78c
 800ca70:	1e71      	subs	r1, r6, #1
 800ca72:	4620      	mov	r0, r4
 800ca74:	f000 feb2 	bl	800d7dc <__any_on>
 800ca78:	2800      	cmp	r0, #0
 800ca7a:	d1e6      	bne.n	800ca4a <__gethex+0x2ca>
 800ca7c:	ee18 0a10 	vmov	r0, s16
 800ca80:	4621      	mov	r1, r4
 800ca82:	f000 fa4b 	bl	800cf1c <_Bfree>
 800ca86:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ca88:	2300      	movs	r3, #0
 800ca8a:	6013      	str	r3, [r2, #0]
 800ca8c:	2750      	movs	r7, #80	; 0x50
 800ca8e:	e70c      	b.n	800c8aa <__gethex+0x12a>
 800ca90:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d1f2      	bne.n	800ca7c <__gethex+0x2fc>
 800ca96:	e7d8      	b.n	800ca4a <__gethex+0x2ca>
 800ca98:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d1d5      	bne.n	800ca4a <__gethex+0x2ca>
 800ca9e:	e7ed      	b.n	800ca7c <__gethex+0x2fc>
 800caa0:	1e6f      	subs	r7, r5, #1
 800caa2:	f1ba 0f00 	cmp.w	sl, #0
 800caa6:	d131      	bne.n	800cb0c <__gethex+0x38c>
 800caa8:	b127      	cbz	r7, 800cab4 <__gethex+0x334>
 800caaa:	4639      	mov	r1, r7
 800caac:	4620      	mov	r0, r4
 800caae:	f000 fe95 	bl	800d7dc <__any_on>
 800cab2:	4682      	mov	sl, r0
 800cab4:	117b      	asrs	r3, r7, #5
 800cab6:	2101      	movs	r1, #1
 800cab8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800cabc:	f007 071f 	and.w	r7, r7, #31
 800cac0:	fa01 f707 	lsl.w	r7, r1, r7
 800cac4:	421f      	tst	r7, r3
 800cac6:	4629      	mov	r1, r5
 800cac8:	4620      	mov	r0, r4
 800caca:	bf18      	it	ne
 800cacc:	f04a 0a02 	orrne.w	sl, sl, #2
 800cad0:	1b76      	subs	r6, r6, r5
 800cad2:	f7ff fdee 	bl	800c6b2 <rshift>
 800cad6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cada:	2702      	movs	r7, #2
 800cadc:	f1ba 0f00 	cmp.w	sl, #0
 800cae0:	d048      	beq.n	800cb74 <__gethex+0x3f4>
 800cae2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cae6:	2b02      	cmp	r3, #2
 800cae8:	d015      	beq.n	800cb16 <__gethex+0x396>
 800caea:	2b03      	cmp	r3, #3
 800caec:	d017      	beq.n	800cb1e <__gethex+0x39e>
 800caee:	2b01      	cmp	r3, #1
 800caf0:	d109      	bne.n	800cb06 <__gethex+0x386>
 800caf2:	f01a 0f02 	tst.w	sl, #2
 800caf6:	d006      	beq.n	800cb06 <__gethex+0x386>
 800caf8:	f8d9 0000 	ldr.w	r0, [r9]
 800cafc:	ea4a 0a00 	orr.w	sl, sl, r0
 800cb00:	f01a 0f01 	tst.w	sl, #1
 800cb04:	d10e      	bne.n	800cb24 <__gethex+0x3a4>
 800cb06:	f047 0710 	orr.w	r7, r7, #16
 800cb0a:	e033      	b.n	800cb74 <__gethex+0x3f4>
 800cb0c:	f04f 0a01 	mov.w	sl, #1
 800cb10:	e7d0      	b.n	800cab4 <__gethex+0x334>
 800cb12:	2701      	movs	r7, #1
 800cb14:	e7e2      	b.n	800cadc <__gethex+0x35c>
 800cb16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cb18:	f1c3 0301 	rsb	r3, r3, #1
 800cb1c:	9315      	str	r3, [sp, #84]	; 0x54
 800cb1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d0f0      	beq.n	800cb06 <__gethex+0x386>
 800cb24:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cb28:	f104 0314 	add.w	r3, r4, #20
 800cb2c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800cb30:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800cb34:	f04f 0c00 	mov.w	ip, #0
 800cb38:	4618      	mov	r0, r3
 800cb3a:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb3e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cb42:	d01c      	beq.n	800cb7e <__gethex+0x3fe>
 800cb44:	3201      	adds	r2, #1
 800cb46:	6002      	str	r2, [r0, #0]
 800cb48:	2f02      	cmp	r7, #2
 800cb4a:	f104 0314 	add.w	r3, r4, #20
 800cb4e:	d13f      	bne.n	800cbd0 <__gethex+0x450>
 800cb50:	f8d8 2000 	ldr.w	r2, [r8]
 800cb54:	3a01      	subs	r2, #1
 800cb56:	42b2      	cmp	r2, r6
 800cb58:	d10a      	bne.n	800cb70 <__gethex+0x3f0>
 800cb5a:	1171      	asrs	r1, r6, #5
 800cb5c:	2201      	movs	r2, #1
 800cb5e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cb62:	f006 061f 	and.w	r6, r6, #31
 800cb66:	fa02 f606 	lsl.w	r6, r2, r6
 800cb6a:	421e      	tst	r6, r3
 800cb6c:	bf18      	it	ne
 800cb6e:	4617      	movne	r7, r2
 800cb70:	f047 0720 	orr.w	r7, r7, #32
 800cb74:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cb76:	601c      	str	r4, [r3, #0]
 800cb78:	9b04      	ldr	r3, [sp, #16]
 800cb7a:	601d      	str	r5, [r3, #0]
 800cb7c:	e695      	b.n	800c8aa <__gethex+0x12a>
 800cb7e:	4299      	cmp	r1, r3
 800cb80:	f843 cc04 	str.w	ip, [r3, #-4]
 800cb84:	d8d8      	bhi.n	800cb38 <__gethex+0x3b8>
 800cb86:	68a3      	ldr	r3, [r4, #8]
 800cb88:	459b      	cmp	fp, r3
 800cb8a:	db19      	blt.n	800cbc0 <__gethex+0x440>
 800cb8c:	6861      	ldr	r1, [r4, #4]
 800cb8e:	ee18 0a10 	vmov	r0, s16
 800cb92:	3101      	adds	r1, #1
 800cb94:	f000 f982 	bl	800ce9c <_Balloc>
 800cb98:	4681      	mov	r9, r0
 800cb9a:	b918      	cbnz	r0, 800cba4 <__gethex+0x424>
 800cb9c:	4b1a      	ldr	r3, [pc, #104]	; (800cc08 <__gethex+0x488>)
 800cb9e:	4602      	mov	r2, r0
 800cba0:	2184      	movs	r1, #132	; 0x84
 800cba2:	e6a8      	b.n	800c8f6 <__gethex+0x176>
 800cba4:	6922      	ldr	r2, [r4, #16]
 800cba6:	3202      	adds	r2, #2
 800cba8:	f104 010c 	add.w	r1, r4, #12
 800cbac:	0092      	lsls	r2, r2, #2
 800cbae:	300c      	adds	r0, #12
 800cbb0:	f7fc fe9c 	bl	80098ec <memcpy>
 800cbb4:	4621      	mov	r1, r4
 800cbb6:	ee18 0a10 	vmov	r0, s16
 800cbba:	f000 f9af 	bl	800cf1c <_Bfree>
 800cbbe:	464c      	mov	r4, r9
 800cbc0:	6923      	ldr	r3, [r4, #16]
 800cbc2:	1c5a      	adds	r2, r3, #1
 800cbc4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cbc8:	6122      	str	r2, [r4, #16]
 800cbca:	2201      	movs	r2, #1
 800cbcc:	615a      	str	r2, [r3, #20]
 800cbce:	e7bb      	b.n	800cb48 <__gethex+0x3c8>
 800cbd0:	6922      	ldr	r2, [r4, #16]
 800cbd2:	455a      	cmp	r2, fp
 800cbd4:	dd0b      	ble.n	800cbee <__gethex+0x46e>
 800cbd6:	2101      	movs	r1, #1
 800cbd8:	4620      	mov	r0, r4
 800cbda:	f7ff fd6a 	bl	800c6b2 <rshift>
 800cbde:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cbe2:	3501      	adds	r5, #1
 800cbe4:	42ab      	cmp	r3, r5
 800cbe6:	f6ff aed0 	blt.w	800c98a <__gethex+0x20a>
 800cbea:	2701      	movs	r7, #1
 800cbec:	e7c0      	b.n	800cb70 <__gethex+0x3f0>
 800cbee:	f016 061f 	ands.w	r6, r6, #31
 800cbf2:	d0fa      	beq.n	800cbea <__gethex+0x46a>
 800cbf4:	4453      	add	r3, sl
 800cbf6:	f1c6 0620 	rsb	r6, r6, #32
 800cbfa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800cbfe:	f000 fa3f 	bl	800d080 <__hi0bits>
 800cc02:	42b0      	cmp	r0, r6
 800cc04:	dbe7      	blt.n	800cbd6 <__gethex+0x456>
 800cc06:	e7f0      	b.n	800cbea <__gethex+0x46a>
 800cc08:	0800e718 	.word	0x0800e718

0800cc0c <L_shift>:
 800cc0c:	f1c2 0208 	rsb	r2, r2, #8
 800cc10:	0092      	lsls	r2, r2, #2
 800cc12:	b570      	push	{r4, r5, r6, lr}
 800cc14:	f1c2 0620 	rsb	r6, r2, #32
 800cc18:	6843      	ldr	r3, [r0, #4]
 800cc1a:	6804      	ldr	r4, [r0, #0]
 800cc1c:	fa03 f506 	lsl.w	r5, r3, r6
 800cc20:	432c      	orrs	r4, r5
 800cc22:	40d3      	lsrs	r3, r2
 800cc24:	6004      	str	r4, [r0, #0]
 800cc26:	f840 3f04 	str.w	r3, [r0, #4]!
 800cc2a:	4288      	cmp	r0, r1
 800cc2c:	d3f4      	bcc.n	800cc18 <L_shift+0xc>
 800cc2e:	bd70      	pop	{r4, r5, r6, pc}

0800cc30 <__match>:
 800cc30:	b530      	push	{r4, r5, lr}
 800cc32:	6803      	ldr	r3, [r0, #0]
 800cc34:	3301      	adds	r3, #1
 800cc36:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc3a:	b914      	cbnz	r4, 800cc42 <__match+0x12>
 800cc3c:	6003      	str	r3, [r0, #0]
 800cc3e:	2001      	movs	r0, #1
 800cc40:	bd30      	pop	{r4, r5, pc}
 800cc42:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc46:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800cc4a:	2d19      	cmp	r5, #25
 800cc4c:	bf98      	it	ls
 800cc4e:	3220      	addls	r2, #32
 800cc50:	42a2      	cmp	r2, r4
 800cc52:	d0f0      	beq.n	800cc36 <__match+0x6>
 800cc54:	2000      	movs	r0, #0
 800cc56:	e7f3      	b.n	800cc40 <__match+0x10>

0800cc58 <__hexnan>:
 800cc58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc5c:	680b      	ldr	r3, [r1, #0]
 800cc5e:	115e      	asrs	r6, r3, #5
 800cc60:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cc64:	f013 031f 	ands.w	r3, r3, #31
 800cc68:	b087      	sub	sp, #28
 800cc6a:	bf18      	it	ne
 800cc6c:	3604      	addne	r6, #4
 800cc6e:	2500      	movs	r5, #0
 800cc70:	1f37      	subs	r7, r6, #4
 800cc72:	4690      	mov	r8, r2
 800cc74:	6802      	ldr	r2, [r0, #0]
 800cc76:	9301      	str	r3, [sp, #4]
 800cc78:	4682      	mov	sl, r0
 800cc7a:	f846 5c04 	str.w	r5, [r6, #-4]
 800cc7e:	46b9      	mov	r9, r7
 800cc80:	463c      	mov	r4, r7
 800cc82:	9502      	str	r5, [sp, #8]
 800cc84:	46ab      	mov	fp, r5
 800cc86:	7851      	ldrb	r1, [r2, #1]
 800cc88:	1c53      	adds	r3, r2, #1
 800cc8a:	9303      	str	r3, [sp, #12]
 800cc8c:	b341      	cbz	r1, 800cce0 <__hexnan+0x88>
 800cc8e:	4608      	mov	r0, r1
 800cc90:	9205      	str	r2, [sp, #20]
 800cc92:	9104      	str	r1, [sp, #16]
 800cc94:	f7ff fd5f 	bl	800c756 <__hexdig_fun>
 800cc98:	2800      	cmp	r0, #0
 800cc9a:	d14f      	bne.n	800cd3c <__hexnan+0xe4>
 800cc9c:	9904      	ldr	r1, [sp, #16]
 800cc9e:	9a05      	ldr	r2, [sp, #20]
 800cca0:	2920      	cmp	r1, #32
 800cca2:	d818      	bhi.n	800ccd6 <__hexnan+0x7e>
 800cca4:	9b02      	ldr	r3, [sp, #8]
 800cca6:	459b      	cmp	fp, r3
 800cca8:	dd13      	ble.n	800ccd2 <__hexnan+0x7a>
 800ccaa:	454c      	cmp	r4, r9
 800ccac:	d206      	bcs.n	800ccbc <__hexnan+0x64>
 800ccae:	2d07      	cmp	r5, #7
 800ccb0:	dc04      	bgt.n	800ccbc <__hexnan+0x64>
 800ccb2:	462a      	mov	r2, r5
 800ccb4:	4649      	mov	r1, r9
 800ccb6:	4620      	mov	r0, r4
 800ccb8:	f7ff ffa8 	bl	800cc0c <L_shift>
 800ccbc:	4544      	cmp	r4, r8
 800ccbe:	d950      	bls.n	800cd62 <__hexnan+0x10a>
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	f1a4 0904 	sub.w	r9, r4, #4
 800ccc6:	f844 3c04 	str.w	r3, [r4, #-4]
 800ccca:	f8cd b008 	str.w	fp, [sp, #8]
 800ccce:	464c      	mov	r4, r9
 800ccd0:	461d      	mov	r5, r3
 800ccd2:	9a03      	ldr	r2, [sp, #12]
 800ccd4:	e7d7      	b.n	800cc86 <__hexnan+0x2e>
 800ccd6:	2929      	cmp	r1, #41	; 0x29
 800ccd8:	d156      	bne.n	800cd88 <__hexnan+0x130>
 800ccda:	3202      	adds	r2, #2
 800ccdc:	f8ca 2000 	str.w	r2, [sl]
 800cce0:	f1bb 0f00 	cmp.w	fp, #0
 800cce4:	d050      	beq.n	800cd88 <__hexnan+0x130>
 800cce6:	454c      	cmp	r4, r9
 800cce8:	d206      	bcs.n	800ccf8 <__hexnan+0xa0>
 800ccea:	2d07      	cmp	r5, #7
 800ccec:	dc04      	bgt.n	800ccf8 <__hexnan+0xa0>
 800ccee:	462a      	mov	r2, r5
 800ccf0:	4649      	mov	r1, r9
 800ccf2:	4620      	mov	r0, r4
 800ccf4:	f7ff ff8a 	bl	800cc0c <L_shift>
 800ccf8:	4544      	cmp	r4, r8
 800ccfa:	d934      	bls.n	800cd66 <__hexnan+0x10e>
 800ccfc:	f1a8 0204 	sub.w	r2, r8, #4
 800cd00:	4623      	mov	r3, r4
 800cd02:	f853 1b04 	ldr.w	r1, [r3], #4
 800cd06:	f842 1f04 	str.w	r1, [r2, #4]!
 800cd0a:	429f      	cmp	r7, r3
 800cd0c:	d2f9      	bcs.n	800cd02 <__hexnan+0xaa>
 800cd0e:	1b3b      	subs	r3, r7, r4
 800cd10:	f023 0303 	bic.w	r3, r3, #3
 800cd14:	3304      	adds	r3, #4
 800cd16:	3401      	adds	r4, #1
 800cd18:	3e03      	subs	r6, #3
 800cd1a:	42b4      	cmp	r4, r6
 800cd1c:	bf88      	it	hi
 800cd1e:	2304      	movhi	r3, #4
 800cd20:	4443      	add	r3, r8
 800cd22:	2200      	movs	r2, #0
 800cd24:	f843 2b04 	str.w	r2, [r3], #4
 800cd28:	429f      	cmp	r7, r3
 800cd2a:	d2fb      	bcs.n	800cd24 <__hexnan+0xcc>
 800cd2c:	683b      	ldr	r3, [r7, #0]
 800cd2e:	b91b      	cbnz	r3, 800cd38 <__hexnan+0xe0>
 800cd30:	4547      	cmp	r7, r8
 800cd32:	d127      	bne.n	800cd84 <__hexnan+0x12c>
 800cd34:	2301      	movs	r3, #1
 800cd36:	603b      	str	r3, [r7, #0]
 800cd38:	2005      	movs	r0, #5
 800cd3a:	e026      	b.n	800cd8a <__hexnan+0x132>
 800cd3c:	3501      	adds	r5, #1
 800cd3e:	2d08      	cmp	r5, #8
 800cd40:	f10b 0b01 	add.w	fp, fp, #1
 800cd44:	dd06      	ble.n	800cd54 <__hexnan+0xfc>
 800cd46:	4544      	cmp	r4, r8
 800cd48:	d9c3      	bls.n	800ccd2 <__hexnan+0x7a>
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	f844 3c04 	str.w	r3, [r4, #-4]
 800cd50:	2501      	movs	r5, #1
 800cd52:	3c04      	subs	r4, #4
 800cd54:	6822      	ldr	r2, [r4, #0]
 800cd56:	f000 000f 	and.w	r0, r0, #15
 800cd5a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800cd5e:	6022      	str	r2, [r4, #0]
 800cd60:	e7b7      	b.n	800ccd2 <__hexnan+0x7a>
 800cd62:	2508      	movs	r5, #8
 800cd64:	e7b5      	b.n	800ccd2 <__hexnan+0x7a>
 800cd66:	9b01      	ldr	r3, [sp, #4]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d0df      	beq.n	800cd2c <__hexnan+0xd4>
 800cd6c:	f04f 32ff 	mov.w	r2, #4294967295
 800cd70:	f1c3 0320 	rsb	r3, r3, #32
 800cd74:	fa22 f303 	lsr.w	r3, r2, r3
 800cd78:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cd7c:	401a      	ands	r2, r3
 800cd7e:	f846 2c04 	str.w	r2, [r6, #-4]
 800cd82:	e7d3      	b.n	800cd2c <__hexnan+0xd4>
 800cd84:	3f04      	subs	r7, #4
 800cd86:	e7d1      	b.n	800cd2c <__hexnan+0xd4>
 800cd88:	2004      	movs	r0, #4
 800cd8a:	b007      	add	sp, #28
 800cd8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cd90 <_localeconv_r>:
 800cd90:	4800      	ldr	r0, [pc, #0]	; (800cd94 <_localeconv_r+0x4>)
 800cd92:	4770      	bx	lr
 800cd94:	200001fc 	.word	0x200001fc

0800cd98 <__retarget_lock_init_recursive>:
 800cd98:	4770      	bx	lr

0800cd9a <__retarget_lock_acquire_recursive>:
 800cd9a:	4770      	bx	lr

0800cd9c <__retarget_lock_release_recursive>:
 800cd9c:	4770      	bx	lr

0800cd9e <__swhatbuf_r>:
 800cd9e:	b570      	push	{r4, r5, r6, lr}
 800cda0:	460e      	mov	r6, r1
 800cda2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cda6:	2900      	cmp	r1, #0
 800cda8:	b096      	sub	sp, #88	; 0x58
 800cdaa:	4614      	mov	r4, r2
 800cdac:	461d      	mov	r5, r3
 800cdae:	da08      	bge.n	800cdc2 <__swhatbuf_r+0x24>
 800cdb0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	602a      	str	r2, [r5, #0]
 800cdb8:	061a      	lsls	r2, r3, #24
 800cdba:	d410      	bmi.n	800cdde <__swhatbuf_r+0x40>
 800cdbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cdc0:	e00e      	b.n	800cde0 <__swhatbuf_r+0x42>
 800cdc2:	466a      	mov	r2, sp
 800cdc4:	f001 f9a6 	bl	800e114 <_fstat_r>
 800cdc8:	2800      	cmp	r0, #0
 800cdca:	dbf1      	blt.n	800cdb0 <__swhatbuf_r+0x12>
 800cdcc:	9a01      	ldr	r2, [sp, #4]
 800cdce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cdd2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cdd6:	425a      	negs	r2, r3
 800cdd8:	415a      	adcs	r2, r3
 800cdda:	602a      	str	r2, [r5, #0]
 800cddc:	e7ee      	b.n	800cdbc <__swhatbuf_r+0x1e>
 800cdde:	2340      	movs	r3, #64	; 0x40
 800cde0:	2000      	movs	r0, #0
 800cde2:	6023      	str	r3, [r4, #0]
 800cde4:	b016      	add	sp, #88	; 0x58
 800cde6:	bd70      	pop	{r4, r5, r6, pc}

0800cde8 <__smakebuf_r>:
 800cde8:	898b      	ldrh	r3, [r1, #12]
 800cdea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cdec:	079d      	lsls	r5, r3, #30
 800cdee:	4606      	mov	r6, r0
 800cdf0:	460c      	mov	r4, r1
 800cdf2:	d507      	bpl.n	800ce04 <__smakebuf_r+0x1c>
 800cdf4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cdf8:	6023      	str	r3, [r4, #0]
 800cdfa:	6123      	str	r3, [r4, #16]
 800cdfc:	2301      	movs	r3, #1
 800cdfe:	6163      	str	r3, [r4, #20]
 800ce00:	b002      	add	sp, #8
 800ce02:	bd70      	pop	{r4, r5, r6, pc}
 800ce04:	ab01      	add	r3, sp, #4
 800ce06:	466a      	mov	r2, sp
 800ce08:	f7ff ffc9 	bl	800cd9e <__swhatbuf_r>
 800ce0c:	9900      	ldr	r1, [sp, #0]
 800ce0e:	4605      	mov	r5, r0
 800ce10:	4630      	mov	r0, r6
 800ce12:	f000 fd87 	bl	800d924 <_malloc_r>
 800ce16:	b948      	cbnz	r0, 800ce2c <__smakebuf_r+0x44>
 800ce18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce1c:	059a      	lsls	r2, r3, #22
 800ce1e:	d4ef      	bmi.n	800ce00 <__smakebuf_r+0x18>
 800ce20:	f023 0303 	bic.w	r3, r3, #3
 800ce24:	f043 0302 	orr.w	r3, r3, #2
 800ce28:	81a3      	strh	r3, [r4, #12]
 800ce2a:	e7e3      	b.n	800cdf4 <__smakebuf_r+0xc>
 800ce2c:	4b0d      	ldr	r3, [pc, #52]	; (800ce64 <__smakebuf_r+0x7c>)
 800ce2e:	62b3      	str	r3, [r6, #40]	; 0x28
 800ce30:	89a3      	ldrh	r3, [r4, #12]
 800ce32:	6020      	str	r0, [r4, #0]
 800ce34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce38:	81a3      	strh	r3, [r4, #12]
 800ce3a:	9b00      	ldr	r3, [sp, #0]
 800ce3c:	6163      	str	r3, [r4, #20]
 800ce3e:	9b01      	ldr	r3, [sp, #4]
 800ce40:	6120      	str	r0, [r4, #16]
 800ce42:	b15b      	cbz	r3, 800ce5c <__smakebuf_r+0x74>
 800ce44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce48:	4630      	mov	r0, r6
 800ce4a:	f001 f975 	bl	800e138 <_isatty_r>
 800ce4e:	b128      	cbz	r0, 800ce5c <__smakebuf_r+0x74>
 800ce50:	89a3      	ldrh	r3, [r4, #12]
 800ce52:	f023 0303 	bic.w	r3, r3, #3
 800ce56:	f043 0301 	orr.w	r3, r3, #1
 800ce5a:	81a3      	strh	r3, [r4, #12]
 800ce5c:	89a0      	ldrh	r0, [r4, #12]
 800ce5e:	4305      	orrs	r5, r0
 800ce60:	81a5      	strh	r5, [r4, #12]
 800ce62:	e7cd      	b.n	800ce00 <__smakebuf_r+0x18>
 800ce64:	0800c511 	.word	0x0800c511

0800ce68 <malloc>:
 800ce68:	4b02      	ldr	r3, [pc, #8]	; (800ce74 <malloc+0xc>)
 800ce6a:	4601      	mov	r1, r0
 800ce6c:	6818      	ldr	r0, [r3, #0]
 800ce6e:	f000 bd59 	b.w	800d924 <_malloc_r>
 800ce72:	bf00      	nop
 800ce74:	200000a4 	.word	0x200000a4

0800ce78 <__ascii_mbtowc>:
 800ce78:	b082      	sub	sp, #8
 800ce7a:	b901      	cbnz	r1, 800ce7e <__ascii_mbtowc+0x6>
 800ce7c:	a901      	add	r1, sp, #4
 800ce7e:	b142      	cbz	r2, 800ce92 <__ascii_mbtowc+0x1a>
 800ce80:	b14b      	cbz	r3, 800ce96 <__ascii_mbtowc+0x1e>
 800ce82:	7813      	ldrb	r3, [r2, #0]
 800ce84:	600b      	str	r3, [r1, #0]
 800ce86:	7812      	ldrb	r2, [r2, #0]
 800ce88:	1e10      	subs	r0, r2, #0
 800ce8a:	bf18      	it	ne
 800ce8c:	2001      	movne	r0, #1
 800ce8e:	b002      	add	sp, #8
 800ce90:	4770      	bx	lr
 800ce92:	4610      	mov	r0, r2
 800ce94:	e7fb      	b.n	800ce8e <__ascii_mbtowc+0x16>
 800ce96:	f06f 0001 	mvn.w	r0, #1
 800ce9a:	e7f8      	b.n	800ce8e <__ascii_mbtowc+0x16>

0800ce9c <_Balloc>:
 800ce9c:	b570      	push	{r4, r5, r6, lr}
 800ce9e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cea0:	4604      	mov	r4, r0
 800cea2:	460d      	mov	r5, r1
 800cea4:	b976      	cbnz	r6, 800cec4 <_Balloc+0x28>
 800cea6:	2010      	movs	r0, #16
 800cea8:	f7ff ffde 	bl	800ce68 <malloc>
 800ceac:	4602      	mov	r2, r0
 800ceae:	6260      	str	r0, [r4, #36]	; 0x24
 800ceb0:	b920      	cbnz	r0, 800cebc <_Balloc+0x20>
 800ceb2:	4b18      	ldr	r3, [pc, #96]	; (800cf14 <_Balloc+0x78>)
 800ceb4:	4818      	ldr	r0, [pc, #96]	; (800cf18 <_Balloc+0x7c>)
 800ceb6:	2166      	movs	r1, #102	; 0x66
 800ceb8:	f001 f8ec 	bl	800e094 <__assert_func>
 800cebc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cec0:	6006      	str	r6, [r0, #0]
 800cec2:	60c6      	str	r6, [r0, #12]
 800cec4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cec6:	68f3      	ldr	r3, [r6, #12]
 800cec8:	b183      	cbz	r3, 800ceec <_Balloc+0x50>
 800ceca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cecc:	68db      	ldr	r3, [r3, #12]
 800cece:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ced2:	b9b8      	cbnz	r0, 800cf04 <_Balloc+0x68>
 800ced4:	2101      	movs	r1, #1
 800ced6:	fa01 f605 	lsl.w	r6, r1, r5
 800ceda:	1d72      	adds	r2, r6, #5
 800cedc:	0092      	lsls	r2, r2, #2
 800cede:	4620      	mov	r0, r4
 800cee0:	f000 fc9d 	bl	800d81e <_calloc_r>
 800cee4:	b160      	cbz	r0, 800cf00 <_Balloc+0x64>
 800cee6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ceea:	e00e      	b.n	800cf0a <_Balloc+0x6e>
 800ceec:	2221      	movs	r2, #33	; 0x21
 800ceee:	2104      	movs	r1, #4
 800cef0:	4620      	mov	r0, r4
 800cef2:	f000 fc94 	bl	800d81e <_calloc_r>
 800cef6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cef8:	60f0      	str	r0, [r6, #12]
 800cefa:	68db      	ldr	r3, [r3, #12]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d1e4      	bne.n	800ceca <_Balloc+0x2e>
 800cf00:	2000      	movs	r0, #0
 800cf02:	bd70      	pop	{r4, r5, r6, pc}
 800cf04:	6802      	ldr	r2, [r0, #0]
 800cf06:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cf10:	e7f7      	b.n	800cf02 <_Balloc+0x66>
 800cf12:	bf00      	nop
 800cf14:	0800e6a6 	.word	0x0800e6a6
 800cf18:	0800e808 	.word	0x0800e808

0800cf1c <_Bfree>:
 800cf1c:	b570      	push	{r4, r5, r6, lr}
 800cf1e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cf20:	4605      	mov	r5, r0
 800cf22:	460c      	mov	r4, r1
 800cf24:	b976      	cbnz	r6, 800cf44 <_Bfree+0x28>
 800cf26:	2010      	movs	r0, #16
 800cf28:	f7ff ff9e 	bl	800ce68 <malloc>
 800cf2c:	4602      	mov	r2, r0
 800cf2e:	6268      	str	r0, [r5, #36]	; 0x24
 800cf30:	b920      	cbnz	r0, 800cf3c <_Bfree+0x20>
 800cf32:	4b09      	ldr	r3, [pc, #36]	; (800cf58 <_Bfree+0x3c>)
 800cf34:	4809      	ldr	r0, [pc, #36]	; (800cf5c <_Bfree+0x40>)
 800cf36:	218a      	movs	r1, #138	; 0x8a
 800cf38:	f001 f8ac 	bl	800e094 <__assert_func>
 800cf3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cf40:	6006      	str	r6, [r0, #0]
 800cf42:	60c6      	str	r6, [r0, #12]
 800cf44:	b13c      	cbz	r4, 800cf56 <_Bfree+0x3a>
 800cf46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cf48:	6862      	ldr	r2, [r4, #4]
 800cf4a:	68db      	ldr	r3, [r3, #12]
 800cf4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cf50:	6021      	str	r1, [r4, #0]
 800cf52:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cf56:	bd70      	pop	{r4, r5, r6, pc}
 800cf58:	0800e6a6 	.word	0x0800e6a6
 800cf5c:	0800e808 	.word	0x0800e808

0800cf60 <__multadd>:
 800cf60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf64:	690d      	ldr	r5, [r1, #16]
 800cf66:	4607      	mov	r7, r0
 800cf68:	460c      	mov	r4, r1
 800cf6a:	461e      	mov	r6, r3
 800cf6c:	f101 0c14 	add.w	ip, r1, #20
 800cf70:	2000      	movs	r0, #0
 800cf72:	f8dc 3000 	ldr.w	r3, [ip]
 800cf76:	b299      	uxth	r1, r3
 800cf78:	fb02 6101 	mla	r1, r2, r1, r6
 800cf7c:	0c1e      	lsrs	r6, r3, #16
 800cf7e:	0c0b      	lsrs	r3, r1, #16
 800cf80:	fb02 3306 	mla	r3, r2, r6, r3
 800cf84:	b289      	uxth	r1, r1
 800cf86:	3001      	adds	r0, #1
 800cf88:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cf8c:	4285      	cmp	r5, r0
 800cf8e:	f84c 1b04 	str.w	r1, [ip], #4
 800cf92:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cf96:	dcec      	bgt.n	800cf72 <__multadd+0x12>
 800cf98:	b30e      	cbz	r6, 800cfde <__multadd+0x7e>
 800cf9a:	68a3      	ldr	r3, [r4, #8]
 800cf9c:	42ab      	cmp	r3, r5
 800cf9e:	dc19      	bgt.n	800cfd4 <__multadd+0x74>
 800cfa0:	6861      	ldr	r1, [r4, #4]
 800cfa2:	4638      	mov	r0, r7
 800cfa4:	3101      	adds	r1, #1
 800cfa6:	f7ff ff79 	bl	800ce9c <_Balloc>
 800cfaa:	4680      	mov	r8, r0
 800cfac:	b928      	cbnz	r0, 800cfba <__multadd+0x5a>
 800cfae:	4602      	mov	r2, r0
 800cfb0:	4b0c      	ldr	r3, [pc, #48]	; (800cfe4 <__multadd+0x84>)
 800cfb2:	480d      	ldr	r0, [pc, #52]	; (800cfe8 <__multadd+0x88>)
 800cfb4:	21b5      	movs	r1, #181	; 0xb5
 800cfb6:	f001 f86d 	bl	800e094 <__assert_func>
 800cfba:	6922      	ldr	r2, [r4, #16]
 800cfbc:	3202      	adds	r2, #2
 800cfbe:	f104 010c 	add.w	r1, r4, #12
 800cfc2:	0092      	lsls	r2, r2, #2
 800cfc4:	300c      	adds	r0, #12
 800cfc6:	f7fc fc91 	bl	80098ec <memcpy>
 800cfca:	4621      	mov	r1, r4
 800cfcc:	4638      	mov	r0, r7
 800cfce:	f7ff ffa5 	bl	800cf1c <_Bfree>
 800cfd2:	4644      	mov	r4, r8
 800cfd4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cfd8:	3501      	adds	r5, #1
 800cfda:	615e      	str	r6, [r3, #20]
 800cfdc:	6125      	str	r5, [r4, #16]
 800cfde:	4620      	mov	r0, r4
 800cfe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfe4:	0800e718 	.word	0x0800e718
 800cfe8:	0800e808 	.word	0x0800e808

0800cfec <__s2b>:
 800cfec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cff0:	460c      	mov	r4, r1
 800cff2:	4615      	mov	r5, r2
 800cff4:	461f      	mov	r7, r3
 800cff6:	2209      	movs	r2, #9
 800cff8:	3308      	adds	r3, #8
 800cffa:	4606      	mov	r6, r0
 800cffc:	fb93 f3f2 	sdiv	r3, r3, r2
 800d000:	2100      	movs	r1, #0
 800d002:	2201      	movs	r2, #1
 800d004:	429a      	cmp	r2, r3
 800d006:	db09      	blt.n	800d01c <__s2b+0x30>
 800d008:	4630      	mov	r0, r6
 800d00a:	f7ff ff47 	bl	800ce9c <_Balloc>
 800d00e:	b940      	cbnz	r0, 800d022 <__s2b+0x36>
 800d010:	4602      	mov	r2, r0
 800d012:	4b19      	ldr	r3, [pc, #100]	; (800d078 <__s2b+0x8c>)
 800d014:	4819      	ldr	r0, [pc, #100]	; (800d07c <__s2b+0x90>)
 800d016:	21ce      	movs	r1, #206	; 0xce
 800d018:	f001 f83c 	bl	800e094 <__assert_func>
 800d01c:	0052      	lsls	r2, r2, #1
 800d01e:	3101      	adds	r1, #1
 800d020:	e7f0      	b.n	800d004 <__s2b+0x18>
 800d022:	9b08      	ldr	r3, [sp, #32]
 800d024:	6143      	str	r3, [r0, #20]
 800d026:	2d09      	cmp	r5, #9
 800d028:	f04f 0301 	mov.w	r3, #1
 800d02c:	6103      	str	r3, [r0, #16]
 800d02e:	dd16      	ble.n	800d05e <__s2b+0x72>
 800d030:	f104 0909 	add.w	r9, r4, #9
 800d034:	46c8      	mov	r8, r9
 800d036:	442c      	add	r4, r5
 800d038:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d03c:	4601      	mov	r1, r0
 800d03e:	3b30      	subs	r3, #48	; 0x30
 800d040:	220a      	movs	r2, #10
 800d042:	4630      	mov	r0, r6
 800d044:	f7ff ff8c 	bl	800cf60 <__multadd>
 800d048:	45a0      	cmp	r8, r4
 800d04a:	d1f5      	bne.n	800d038 <__s2b+0x4c>
 800d04c:	f1a5 0408 	sub.w	r4, r5, #8
 800d050:	444c      	add	r4, r9
 800d052:	1b2d      	subs	r5, r5, r4
 800d054:	1963      	adds	r3, r4, r5
 800d056:	42bb      	cmp	r3, r7
 800d058:	db04      	blt.n	800d064 <__s2b+0x78>
 800d05a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d05e:	340a      	adds	r4, #10
 800d060:	2509      	movs	r5, #9
 800d062:	e7f6      	b.n	800d052 <__s2b+0x66>
 800d064:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d068:	4601      	mov	r1, r0
 800d06a:	3b30      	subs	r3, #48	; 0x30
 800d06c:	220a      	movs	r2, #10
 800d06e:	4630      	mov	r0, r6
 800d070:	f7ff ff76 	bl	800cf60 <__multadd>
 800d074:	e7ee      	b.n	800d054 <__s2b+0x68>
 800d076:	bf00      	nop
 800d078:	0800e718 	.word	0x0800e718
 800d07c:	0800e808 	.word	0x0800e808

0800d080 <__hi0bits>:
 800d080:	0c03      	lsrs	r3, r0, #16
 800d082:	041b      	lsls	r3, r3, #16
 800d084:	b9d3      	cbnz	r3, 800d0bc <__hi0bits+0x3c>
 800d086:	0400      	lsls	r0, r0, #16
 800d088:	2310      	movs	r3, #16
 800d08a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d08e:	bf04      	itt	eq
 800d090:	0200      	lsleq	r0, r0, #8
 800d092:	3308      	addeq	r3, #8
 800d094:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d098:	bf04      	itt	eq
 800d09a:	0100      	lsleq	r0, r0, #4
 800d09c:	3304      	addeq	r3, #4
 800d09e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d0a2:	bf04      	itt	eq
 800d0a4:	0080      	lsleq	r0, r0, #2
 800d0a6:	3302      	addeq	r3, #2
 800d0a8:	2800      	cmp	r0, #0
 800d0aa:	db05      	blt.n	800d0b8 <__hi0bits+0x38>
 800d0ac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d0b0:	f103 0301 	add.w	r3, r3, #1
 800d0b4:	bf08      	it	eq
 800d0b6:	2320      	moveq	r3, #32
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	4770      	bx	lr
 800d0bc:	2300      	movs	r3, #0
 800d0be:	e7e4      	b.n	800d08a <__hi0bits+0xa>

0800d0c0 <__lo0bits>:
 800d0c0:	6803      	ldr	r3, [r0, #0]
 800d0c2:	f013 0207 	ands.w	r2, r3, #7
 800d0c6:	4601      	mov	r1, r0
 800d0c8:	d00b      	beq.n	800d0e2 <__lo0bits+0x22>
 800d0ca:	07da      	lsls	r2, r3, #31
 800d0cc:	d423      	bmi.n	800d116 <__lo0bits+0x56>
 800d0ce:	0798      	lsls	r0, r3, #30
 800d0d0:	bf49      	itett	mi
 800d0d2:	085b      	lsrmi	r3, r3, #1
 800d0d4:	089b      	lsrpl	r3, r3, #2
 800d0d6:	2001      	movmi	r0, #1
 800d0d8:	600b      	strmi	r3, [r1, #0]
 800d0da:	bf5c      	itt	pl
 800d0dc:	600b      	strpl	r3, [r1, #0]
 800d0de:	2002      	movpl	r0, #2
 800d0e0:	4770      	bx	lr
 800d0e2:	b298      	uxth	r0, r3
 800d0e4:	b9a8      	cbnz	r0, 800d112 <__lo0bits+0x52>
 800d0e6:	0c1b      	lsrs	r3, r3, #16
 800d0e8:	2010      	movs	r0, #16
 800d0ea:	b2da      	uxtb	r2, r3
 800d0ec:	b90a      	cbnz	r2, 800d0f2 <__lo0bits+0x32>
 800d0ee:	3008      	adds	r0, #8
 800d0f0:	0a1b      	lsrs	r3, r3, #8
 800d0f2:	071a      	lsls	r2, r3, #28
 800d0f4:	bf04      	itt	eq
 800d0f6:	091b      	lsreq	r3, r3, #4
 800d0f8:	3004      	addeq	r0, #4
 800d0fa:	079a      	lsls	r2, r3, #30
 800d0fc:	bf04      	itt	eq
 800d0fe:	089b      	lsreq	r3, r3, #2
 800d100:	3002      	addeq	r0, #2
 800d102:	07da      	lsls	r2, r3, #31
 800d104:	d403      	bmi.n	800d10e <__lo0bits+0x4e>
 800d106:	085b      	lsrs	r3, r3, #1
 800d108:	f100 0001 	add.w	r0, r0, #1
 800d10c:	d005      	beq.n	800d11a <__lo0bits+0x5a>
 800d10e:	600b      	str	r3, [r1, #0]
 800d110:	4770      	bx	lr
 800d112:	4610      	mov	r0, r2
 800d114:	e7e9      	b.n	800d0ea <__lo0bits+0x2a>
 800d116:	2000      	movs	r0, #0
 800d118:	4770      	bx	lr
 800d11a:	2020      	movs	r0, #32
 800d11c:	4770      	bx	lr
	...

0800d120 <__i2b>:
 800d120:	b510      	push	{r4, lr}
 800d122:	460c      	mov	r4, r1
 800d124:	2101      	movs	r1, #1
 800d126:	f7ff feb9 	bl	800ce9c <_Balloc>
 800d12a:	4602      	mov	r2, r0
 800d12c:	b928      	cbnz	r0, 800d13a <__i2b+0x1a>
 800d12e:	4b05      	ldr	r3, [pc, #20]	; (800d144 <__i2b+0x24>)
 800d130:	4805      	ldr	r0, [pc, #20]	; (800d148 <__i2b+0x28>)
 800d132:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d136:	f000 ffad 	bl	800e094 <__assert_func>
 800d13a:	2301      	movs	r3, #1
 800d13c:	6144      	str	r4, [r0, #20]
 800d13e:	6103      	str	r3, [r0, #16]
 800d140:	bd10      	pop	{r4, pc}
 800d142:	bf00      	nop
 800d144:	0800e718 	.word	0x0800e718
 800d148:	0800e808 	.word	0x0800e808

0800d14c <__multiply>:
 800d14c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d150:	4691      	mov	r9, r2
 800d152:	690a      	ldr	r2, [r1, #16]
 800d154:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d158:	429a      	cmp	r2, r3
 800d15a:	bfb8      	it	lt
 800d15c:	460b      	movlt	r3, r1
 800d15e:	460c      	mov	r4, r1
 800d160:	bfbc      	itt	lt
 800d162:	464c      	movlt	r4, r9
 800d164:	4699      	movlt	r9, r3
 800d166:	6927      	ldr	r7, [r4, #16]
 800d168:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d16c:	68a3      	ldr	r3, [r4, #8]
 800d16e:	6861      	ldr	r1, [r4, #4]
 800d170:	eb07 060a 	add.w	r6, r7, sl
 800d174:	42b3      	cmp	r3, r6
 800d176:	b085      	sub	sp, #20
 800d178:	bfb8      	it	lt
 800d17a:	3101      	addlt	r1, #1
 800d17c:	f7ff fe8e 	bl	800ce9c <_Balloc>
 800d180:	b930      	cbnz	r0, 800d190 <__multiply+0x44>
 800d182:	4602      	mov	r2, r0
 800d184:	4b44      	ldr	r3, [pc, #272]	; (800d298 <__multiply+0x14c>)
 800d186:	4845      	ldr	r0, [pc, #276]	; (800d29c <__multiply+0x150>)
 800d188:	f240 115d 	movw	r1, #349	; 0x15d
 800d18c:	f000 ff82 	bl	800e094 <__assert_func>
 800d190:	f100 0514 	add.w	r5, r0, #20
 800d194:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d198:	462b      	mov	r3, r5
 800d19a:	2200      	movs	r2, #0
 800d19c:	4543      	cmp	r3, r8
 800d19e:	d321      	bcc.n	800d1e4 <__multiply+0x98>
 800d1a0:	f104 0314 	add.w	r3, r4, #20
 800d1a4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d1a8:	f109 0314 	add.w	r3, r9, #20
 800d1ac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d1b0:	9202      	str	r2, [sp, #8]
 800d1b2:	1b3a      	subs	r2, r7, r4
 800d1b4:	3a15      	subs	r2, #21
 800d1b6:	f022 0203 	bic.w	r2, r2, #3
 800d1ba:	3204      	adds	r2, #4
 800d1bc:	f104 0115 	add.w	r1, r4, #21
 800d1c0:	428f      	cmp	r7, r1
 800d1c2:	bf38      	it	cc
 800d1c4:	2204      	movcc	r2, #4
 800d1c6:	9201      	str	r2, [sp, #4]
 800d1c8:	9a02      	ldr	r2, [sp, #8]
 800d1ca:	9303      	str	r3, [sp, #12]
 800d1cc:	429a      	cmp	r2, r3
 800d1ce:	d80c      	bhi.n	800d1ea <__multiply+0x9e>
 800d1d0:	2e00      	cmp	r6, #0
 800d1d2:	dd03      	ble.n	800d1dc <__multiply+0x90>
 800d1d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d05a      	beq.n	800d292 <__multiply+0x146>
 800d1dc:	6106      	str	r6, [r0, #16]
 800d1de:	b005      	add	sp, #20
 800d1e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1e4:	f843 2b04 	str.w	r2, [r3], #4
 800d1e8:	e7d8      	b.n	800d19c <__multiply+0x50>
 800d1ea:	f8b3 a000 	ldrh.w	sl, [r3]
 800d1ee:	f1ba 0f00 	cmp.w	sl, #0
 800d1f2:	d024      	beq.n	800d23e <__multiply+0xf2>
 800d1f4:	f104 0e14 	add.w	lr, r4, #20
 800d1f8:	46a9      	mov	r9, r5
 800d1fa:	f04f 0c00 	mov.w	ip, #0
 800d1fe:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d202:	f8d9 1000 	ldr.w	r1, [r9]
 800d206:	fa1f fb82 	uxth.w	fp, r2
 800d20a:	b289      	uxth	r1, r1
 800d20c:	fb0a 110b 	mla	r1, sl, fp, r1
 800d210:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d214:	f8d9 2000 	ldr.w	r2, [r9]
 800d218:	4461      	add	r1, ip
 800d21a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d21e:	fb0a c20b 	mla	r2, sl, fp, ip
 800d222:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d226:	b289      	uxth	r1, r1
 800d228:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d22c:	4577      	cmp	r7, lr
 800d22e:	f849 1b04 	str.w	r1, [r9], #4
 800d232:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d236:	d8e2      	bhi.n	800d1fe <__multiply+0xb2>
 800d238:	9a01      	ldr	r2, [sp, #4]
 800d23a:	f845 c002 	str.w	ip, [r5, r2]
 800d23e:	9a03      	ldr	r2, [sp, #12]
 800d240:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d244:	3304      	adds	r3, #4
 800d246:	f1b9 0f00 	cmp.w	r9, #0
 800d24a:	d020      	beq.n	800d28e <__multiply+0x142>
 800d24c:	6829      	ldr	r1, [r5, #0]
 800d24e:	f104 0c14 	add.w	ip, r4, #20
 800d252:	46ae      	mov	lr, r5
 800d254:	f04f 0a00 	mov.w	sl, #0
 800d258:	f8bc b000 	ldrh.w	fp, [ip]
 800d25c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d260:	fb09 220b 	mla	r2, r9, fp, r2
 800d264:	4492      	add	sl, r2
 800d266:	b289      	uxth	r1, r1
 800d268:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d26c:	f84e 1b04 	str.w	r1, [lr], #4
 800d270:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d274:	f8be 1000 	ldrh.w	r1, [lr]
 800d278:	0c12      	lsrs	r2, r2, #16
 800d27a:	fb09 1102 	mla	r1, r9, r2, r1
 800d27e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d282:	4567      	cmp	r7, ip
 800d284:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d288:	d8e6      	bhi.n	800d258 <__multiply+0x10c>
 800d28a:	9a01      	ldr	r2, [sp, #4]
 800d28c:	50a9      	str	r1, [r5, r2]
 800d28e:	3504      	adds	r5, #4
 800d290:	e79a      	b.n	800d1c8 <__multiply+0x7c>
 800d292:	3e01      	subs	r6, #1
 800d294:	e79c      	b.n	800d1d0 <__multiply+0x84>
 800d296:	bf00      	nop
 800d298:	0800e718 	.word	0x0800e718
 800d29c:	0800e808 	.word	0x0800e808

0800d2a0 <__pow5mult>:
 800d2a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2a4:	4615      	mov	r5, r2
 800d2a6:	f012 0203 	ands.w	r2, r2, #3
 800d2aa:	4606      	mov	r6, r0
 800d2ac:	460f      	mov	r7, r1
 800d2ae:	d007      	beq.n	800d2c0 <__pow5mult+0x20>
 800d2b0:	4c25      	ldr	r4, [pc, #148]	; (800d348 <__pow5mult+0xa8>)
 800d2b2:	3a01      	subs	r2, #1
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d2ba:	f7ff fe51 	bl	800cf60 <__multadd>
 800d2be:	4607      	mov	r7, r0
 800d2c0:	10ad      	asrs	r5, r5, #2
 800d2c2:	d03d      	beq.n	800d340 <__pow5mult+0xa0>
 800d2c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d2c6:	b97c      	cbnz	r4, 800d2e8 <__pow5mult+0x48>
 800d2c8:	2010      	movs	r0, #16
 800d2ca:	f7ff fdcd 	bl	800ce68 <malloc>
 800d2ce:	4602      	mov	r2, r0
 800d2d0:	6270      	str	r0, [r6, #36]	; 0x24
 800d2d2:	b928      	cbnz	r0, 800d2e0 <__pow5mult+0x40>
 800d2d4:	4b1d      	ldr	r3, [pc, #116]	; (800d34c <__pow5mult+0xac>)
 800d2d6:	481e      	ldr	r0, [pc, #120]	; (800d350 <__pow5mult+0xb0>)
 800d2d8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d2dc:	f000 feda 	bl	800e094 <__assert_func>
 800d2e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d2e4:	6004      	str	r4, [r0, #0]
 800d2e6:	60c4      	str	r4, [r0, #12]
 800d2e8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d2ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d2f0:	b94c      	cbnz	r4, 800d306 <__pow5mult+0x66>
 800d2f2:	f240 2171 	movw	r1, #625	; 0x271
 800d2f6:	4630      	mov	r0, r6
 800d2f8:	f7ff ff12 	bl	800d120 <__i2b>
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	f8c8 0008 	str.w	r0, [r8, #8]
 800d302:	4604      	mov	r4, r0
 800d304:	6003      	str	r3, [r0, #0]
 800d306:	f04f 0900 	mov.w	r9, #0
 800d30a:	07eb      	lsls	r3, r5, #31
 800d30c:	d50a      	bpl.n	800d324 <__pow5mult+0x84>
 800d30e:	4639      	mov	r1, r7
 800d310:	4622      	mov	r2, r4
 800d312:	4630      	mov	r0, r6
 800d314:	f7ff ff1a 	bl	800d14c <__multiply>
 800d318:	4639      	mov	r1, r7
 800d31a:	4680      	mov	r8, r0
 800d31c:	4630      	mov	r0, r6
 800d31e:	f7ff fdfd 	bl	800cf1c <_Bfree>
 800d322:	4647      	mov	r7, r8
 800d324:	106d      	asrs	r5, r5, #1
 800d326:	d00b      	beq.n	800d340 <__pow5mult+0xa0>
 800d328:	6820      	ldr	r0, [r4, #0]
 800d32a:	b938      	cbnz	r0, 800d33c <__pow5mult+0x9c>
 800d32c:	4622      	mov	r2, r4
 800d32e:	4621      	mov	r1, r4
 800d330:	4630      	mov	r0, r6
 800d332:	f7ff ff0b 	bl	800d14c <__multiply>
 800d336:	6020      	str	r0, [r4, #0]
 800d338:	f8c0 9000 	str.w	r9, [r0]
 800d33c:	4604      	mov	r4, r0
 800d33e:	e7e4      	b.n	800d30a <__pow5mult+0x6a>
 800d340:	4638      	mov	r0, r7
 800d342:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d346:	bf00      	nop
 800d348:	0800e958 	.word	0x0800e958
 800d34c:	0800e6a6 	.word	0x0800e6a6
 800d350:	0800e808 	.word	0x0800e808

0800d354 <__lshift>:
 800d354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d358:	460c      	mov	r4, r1
 800d35a:	6849      	ldr	r1, [r1, #4]
 800d35c:	6923      	ldr	r3, [r4, #16]
 800d35e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d362:	68a3      	ldr	r3, [r4, #8]
 800d364:	4607      	mov	r7, r0
 800d366:	4691      	mov	r9, r2
 800d368:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d36c:	f108 0601 	add.w	r6, r8, #1
 800d370:	42b3      	cmp	r3, r6
 800d372:	db0b      	blt.n	800d38c <__lshift+0x38>
 800d374:	4638      	mov	r0, r7
 800d376:	f7ff fd91 	bl	800ce9c <_Balloc>
 800d37a:	4605      	mov	r5, r0
 800d37c:	b948      	cbnz	r0, 800d392 <__lshift+0x3e>
 800d37e:	4602      	mov	r2, r0
 800d380:	4b2a      	ldr	r3, [pc, #168]	; (800d42c <__lshift+0xd8>)
 800d382:	482b      	ldr	r0, [pc, #172]	; (800d430 <__lshift+0xdc>)
 800d384:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d388:	f000 fe84 	bl	800e094 <__assert_func>
 800d38c:	3101      	adds	r1, #1
 800d38e:	005b      	lsls	r3, r3, #1
 800d390:	e7ee      	b.n	800d370 <__lshift+0x1c>
 800d392:	2300      	movs	r3, #0
 800d394:	f100 0114 	add.w	r1, r0, #20
 800d398:	f100 0210 	add.w	r2, r0, #16
 800d39c:	4618      	mov	r0, r3
 800d39e:	4553      	cmp	r3, sl
 800d3a0:	db37      	blt.n	800d412 <__lshift+0xbe>
 800d3a2:	6920      	ldr	r0, [r4, #16]
 800d3a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d3a8:	f104 0314 	add.w	r3, r4, #20
 800d3ac:	f019 091f 	ands.w	r9, r9, #31
 800d3b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d3b4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d3b8:	d02f      	beq.n	800d41a <__lshift+0xc6>
 800d3ba:	f1c9 0e20 	rsb	lr, r9, #32
 800d3be:	468a      	mov	sl, r1
 800d3c0:	f04f 0c00 	mov.w	ip, #0
 800d3c4:	681a      	ldr	r2, [r3, #0]
 800d3c6:	fa02 f209 	lsl.w	r2, r2, r9
 800d3ca:	ea42 020c 	orr.w	r2, r2, ip
 800d3ce:	f84a 2b04 	str.w	r2, [sl], #4
 800d3d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3d6:	4298      	cmp	r0, r3
 800d3d8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d3dc:	d8f2      	bhi.n	800d3c4 <__lshift+0x70>
 800d3de:	1b03      	subs	r3, r0, r4
 800d3e0:	3b15      	subs	r3, #21
 800d3e2:	f023 0303 	bic.w	r3, r3, #3
 800d3e6:	3304      	adds	r3, #4
 800d3e8:	f104 0215 	add.w	r2, r4, #21
 800d3ec:	4290      	cmp	r0, r2
 800d3ee:	bf38      	it	cc
 800d3f0:	2304      	movcc	r3, #4
 800d3f2:	f841 c003 	str.w	ip, [r1, r3]
 800d3f6:	f1bc 0f00 	cmp.w	ip, #0
 800d3fa:	d001      	beq.n	800d400 <__lshift+0xac>
 800d3fc:	f108 0602 	add.w	r6, r8, #2
 800d400:	3e01      	subs	r6, #1
 800d402:	4638      	mov	r0, r7
 800d404:	612e      	str	r6, [r5, #16]
 800d406:	4621      	mov	r1, r4
 800d408:	f7ff fd88 	bl	800cf1c <_Bfree>
 800d40c:	4628      	mov	r0, r5
 800d40e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d412:	f842 0f04 	str.w	r0, [r2, #4]!
 800d416:	3301      	adds	r3, #1
 800d418:	e7c1      	b.n	800d39e <__lshift+0x4a>
 800d41a:	3904      	subs	r1, #4
 800d41c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d420:	f841 2f04 	str.w	r2, [r1, #4]!
 800d424:	4298      	cmp	r0, r3
 800d426:	d8f9      	bhi.n	800d41c <__lshift+0xc8>
 800d428:	e7ea      	b.n	800d400 <__lshift+0xac>
 800d42a:	bf00      	nop
 800d42c:	0800e718 	.word	0x0800e718
 800d430:	0800e808 	.word	0x0800e808

0800d434 <__mcmp>:
 800d434:	b530      	push	{r4, r5, lr}
 800d436:	6902      	ldr	r2, [r0, #16]
 800d438:	690c      	ldr	r4, [r1, #16]
 800d43a:	1b12      	subs	r2, r2, r4
 800d43c:	d10e      	bne.n	800d45c <__mcmp+0x28>
 800d43e:	f100 0314 	add.w	r3, r0, #20
 800d442:	3114      	adds	r1, #20
 800d444:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d448:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d44c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d450:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d454:	42a5      	cmp	r5, r4
 800d456:	d003      	beq.n	800d460 <__mcmp+0x2c>
 800d458:	d305      	bcc.n	800d466 <__mcmp+0x32>
 800d45a:	2201      	movs	r2, #1
 800d45c:	4610      	mov	r0, r2
 800d45e:	bd30      	pop	{r4, r5, pc}
 800d460:	4283      	cmp	r3, r0
 800d462:	d3f3      	bcc.n	800d44c <__mcmp+0x18>
 800d464:	e7fa      	b.n	800d45c <__mcmp+0x28>
 800d466:	f04f 32ff 	mov.w	r2, #4294967295
 800d46a:	e7f7      	b.n	800d45c <__mcmp+0x28>

0800d46c <__mdiff>:
 800d46c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d470:	460c      	mov	r4, r1
 800d472:	4606      	mov	r6, r0
 800d474:	4611      	mov	r1, r2
 800d476:	4620      	mov	r0, r4
 800d478:	4690      	mov	r8, r2
 800d47a:	f7ff ffdb 	bl	800d434 <__mcmp>
 800d47e:	1e05      	subs	r5, r0, #0
 800d480:	d110      	bne.n	800d4a4 <__mdiff+0x38>
 800d482:	4629      	mov	r1, r5
 800d484:	4630      	mov	r0, r6
 800d486:	f7ff fd09 	bl	800ce9c <_Balloc>
 800d48a:	b930      	cbnz	r0, 800d49a <__mdiff+0x2e>
 800d48c:	4b3a      	ldr	r3, [pc, #232]	; (800d578 <__mdiff+0x10c>)
 800d48e:	4602      	mov	r2, r0
 800d490:	f240 2132 	movw	r1, #562	; 0x232
 800d494:	4839      	ldr	r0, [pc, #228]	; (800d57c <__mdiff+0x110>)
 800d496:	f000 fdfd 	bl	800e094 <__assert_func>
 800d49a:	2301      	movs	r3, #1
 800d49c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d4a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4a4:	bfa4      	itt	ge
 800d4a6:	4643      	movge	r3, r8
 800d4a8:	46a0      	movge	r8, r4
 800d4aa:	4630      	mov	r0, r6
 800d4ac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d4b0:	bfa6      	itte	ge
 800d4b2:	461c      	movge	r4, r3
 800d4b4:	2500      	movge	r5, #0
 800d4b6:	2501      	movlt	r5, #1
 800d4b8:	f7ff fcf0 	bl	800ce9c <_Balloc>
 800d4bc:	b920      	cbnz	r0, 800d4c8 <__mdiff+0x5c>
 800d4be:	4b2e      	ldr	r3, [pc, #184]	; (800d578 <__mdiff+0x10c>)
 800d4c0:	4602      	mov	r2, r0
 800d4c2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d4c6:	e7e5      	b.n	800d494 <__mdiff+0x28>
 800d4c8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d4cc:	6926      	ldr	r6, [r4, #16]
 800d4ce:	60c5      	str	r5, [r0, #12]
 800d4d0:	f104 0914 	add.w	r9, r4, #20
 800d4d4:	f108 0514 	add.w	r5, r8, #20
 800d4d8:	f100 0e14 	add.w	lr, r0, #20
 800d4dc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d4e0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d4e4:	f108 0210 	add.w	r2, r8, #16
 800d4e8:	46f2      	mov	sl, lr
 800d4ea:	2100      	movs	r1, #0
 800d4ec:	f859 3b04 	ldr.w	r3, [r9], #4
 800d4f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d4f4:	fa1f f883 	uxth.w	r8, r3
 800d4f8:	fa11 f18b 	uxtah	r1, r1, fp
 800d4fc:	0c1b      	lsrs	r3, r3, #16
 800d4fe:	eba1 0808 	sub.w	r8, r1, r8
 800d502:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d506:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d50a:	fa1f f888 	uxth.w	r8, r8
 800d50e:	1419      	asrs	r1, r3, #16
 800d510:	454e      	cmp	r6, r9
 800d512:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d516:	f84a 3b04 	str.w	r3, [sl], #4
 800d51a:	d8e7      	bhi.n	800d4ec <__mdiff+0x80>
 800d51c:	1b33      	subs	r3, r6, r4
 800d51e:	3b15      	subs	r3, #21
 800d520:	f023 0303 	bic.w	r3, r3, #3
 800d524:	3304      	adds	r3, #4
 800d526:	3415      	adds	r4, #21
 800d528:	42a6      	cmp	r6, r4
 800d52a:	bf38      	it	cc
 800d52c:	2304      	movcc	r3, #4
 800d52e:	441d      	add	r5, r3
 800d530:	4473      	add	r3, lr
 800d532:	469e      	mov	lr, r3
 800d534:	462e      	mov	r6, r5
 800d536:	4566      	cmp	r6, ip
 800d538:	d30e      	bcc.n	800d558 <__mdiff+0xec>
 800d53a:	f10c 0203 	add.w	r2, ip, #3
 800d53e:	1b52      	subs	r2, r2, r5
 800d540:	f022 0203 	bic.w	r2, r2, #3
 800d544:	3d03      	subs	r5, #3
 800d546:	45ac      	cmp	ip, r5
 800d548:	bf38      	it	cc
 800d54a:	2200      	movcc	r2, #0
 800d54c:	441a      	add	r2, r3
 800d54e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d552:	b17b      	cbz	r3, 800d574 <__mdiff+0x108>
 800d554:	6107      	str	r7, [r0, #16]
 800d556:	e7a3      	b.n	800d4a0 <__mdiff+0x34>
 800d558:	f856 8b04 	ldr.w	r8, [r6], #4
 800d55c:	fa11 f288 	uxtah	r2, r1, r8
 800d560:	1414      	asrs	r4, r2, #16
 800d562:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d566:	b292      	uxth	r2, r2
 800d568:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d56c:	f84e 2b04 	str.w	r2, [lr], #4
 800d570:	1421      	asrs	r1, r4, #16
 800d572:	e7e0      	b.n	800d536 <__mdiff+0xca>
 800d574:	3f01      	subs	r7, #1
 800d576:	e7ea      	b.n	800d54e <__mdiff+0xe2>
 800d578:	0800e718 	.word	0x0800e718
 800d57c:	0800e808 	.word	0x0800e808

0800d580 <__ulp>:
 800d580:	b082      	sub	sp, #8
 800d582:	ed8d 0b00 	vstr	d0, [sp]
 800d586:	9b01      	ldr	r3, [sp, #4]
 800d588:	4912      	ldr	r1, [pc, #72]	; (800d5d4 <__ulp+0x54>)
 800d58a:	4019      	ands	r1, r3
 800d58c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800d590:	2900      	cmp	r1, #0
 800d592:	dd05      	ble.n	800d5a0 <__ulp+0x20>
 800d594:	2200      	movs	r2, #0
 800d596:	460b      	mov	r3, r1
 800d598:	ec43 2b10 	vmov	d0, r2, r3
 800d59c:	b002      	add	sp, #8
 800d59e:	4770      	bx	lr
 800d5a0:	4249      	negs	r1, r1
 800d5a2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800d5a6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800d5aa:	f04f 0200 	mov.w	r2, #0
 800d5ae:	f04f 0300 	mov.w	r3, #0
 800d5b2:	da04      	bge.n	800d5be <__ulp+0x3e>
 800d5b4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800d5b8:	fa41 f300 	asr.w	r3, r1, r0
 800d5bc:	e7ec      	b.n	800d598 <__ulp+0x18>
 800d5be:	f1a0 0114 	sub.w	r1, r0, #20
 800d5c2:	291e      	cmp	r1, #30
 800d5c4:	bfda      	itte	le
 800d5c6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800d5ca:	fa20 f101 	lsrle.w	r1, r0, r1
 800d5ce:	2101      	movgt	r1, #1
 800d5d0:	460a      	mov	r2, r1
 800d5d2:	e7e1      	b.n	800d598 <__ulp+0x18>
 800d5d4:	7ff00000 	.word	0x7ff00000

0800d5d8 <__b2d>:
 800d5d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5da:	6905      	ldr	r5, [r0, #16]
 800d5dc:	f100 0714 	add.w	r7, r0, #20
 800d5e0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d5e4:	1f2e      	subs	r6, r5, #4
 800d5e6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d5ea:	4620      	mov	r0, r4
 800d5ec:	f7ff fd48 	bl	800d080 <__hi0bits>
 800d5f0:	f1c0 0320 	rsb	r3, r0, #32
 800d5f4:	280a      	cmp	r0, #10
 800d5f6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d674 <__b2d+0x9c>
 800d5fa:	600b      	str	r3, [r1, #0]
 800d5fc:	dc14      	bgt.n	800d628 <__b2d+0x50>
 800d5fe:	f1c0 0e0b 	rsb	lr, r0, #11
 800d602:	fa24 f10e 	lsr.w	r1, r4, lr
 800d606:	42b7      	cmp	r7, r6
 800d608:	ea41 030c 	orr.w	r3, r1, ip
 800d60c:	bf34      	ite	cc
 800d60e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d612:	2100      	movcs	r1, #0
 800d614:	3015      	adds	r0, #21
 800d616:	fa04 f000 	lsl.w	r0, r4, r0
 800d61a:	fa21 f10e 	lsr.w	r1, r1, lr
 800d61e:	ea40 0201 	orr.w	r2, r0, r1
 800d622:	ec43 2b10 	vmov	d0, r2, r3
 800d626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d628:	42b7      	cmp	r7, r6
 800d62a:	bf3a      	itte	cc
 800d62c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d630:	f1a5 0608 	subcc.w	r6, r5, #8
 800d634:	2100      	movcs	r1, #0
 800d636:	380b      	subs	r0, #11
 800d638:	d017      	beq.n	800d66a <__b2d+0x92>
 800d63a:	f1c0 0c20 	rsb	ip, r0, #32
 800d63e:	fa04 f500 	lsl.w	r5, r4, r0
 800d642:	42be      	cmp	r6, r7
 800d644:	fa21 f40c 	lsr.w	r4, r1, ip
 800d648:	ea45 0504 	orr.w	r5, r5, r4
 800d64c:	bf8c      	ite	hi
 800d64e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d652:	2400      	movls	r4, #0
 800d654:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800d658:	fa01 f000 	lsl.w	r0, r1, r0
 800d65c:	fa24 f40c 	lsr.w	r4, r4, ip
 800d660:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d664:	ea40 0204 	orr.w	r2, r0, r4
 800d668:	e7db      	b.n	800d622 <__b2d+0x4a>
 800d66a:	ea44 030c 	orr.w	r3, r4, ip
 800d66e:	460a      	mov	r2, r1
 800d670:	e7d7      	b.n	800d622 <__b2d+0x4a>
 800d672:	bf00      	nop
 800d674:	3ff00000 	.word	0x3ff00000

0800d678 <__d2b>:
 800d678:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d67c:	4689      	mov	r9, r1
 800d67e:	2101      	movs	r1, #1
 800d680:	ec57 6b10 	vmov	r6, r7, d0
 800d684:	4690      	mov	r8, r2
 800d686:	f7ff fc09 	bl	800ce9c <_Balloc>
 800d68a:	4604      	mov	r4, r0
 800d68c:	b930      	cbnz	r0, 800d69c <__d2b+0x24>
 800d68e:	4602      	mov	r2, r0
 800d690:	4b25      	ldr	r3, [pc, #148]	; (800d728 <__d2b+0xb0>)
 800d692:	4826      	ldr	r0, [pc, #152]	; (800d72c <__d2b+0xb4>)
 800d694:	f240 310a 	movw	r1, #778	; 0x30a
 800d698:	f000 fcfc 	bl	800e094 <__assert_func>
 800d69c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d6a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d6a4:	bb35      	cbnz	r5, 800d6f4 <__d2b+0x7c>
 800d6a6:	2e00      	cmp	r6, #0
 800d6a8:	9301      	str	r3, [sp, #4]
 800d6aa:	d028      	beq.n	800d6fe <__d2b+0x86>
 800d6ac:	4668      	mov	r0, sp
 800d6ae:	9600      	str	r6, [sp, #0]
 800d6b0:	f7ff fd06 	bl	800d0c0 <__lo0bits>
 800d6b4:	9900      	ldr	r1, [sp, #0]
 800d6b6:	b300      	cbz	r0, 800d6fa <__d2b+0x82>
 800d6b8:	9a01      	ldr	r2, [sp, #4]
 800d6ba:	f1c0 0320 	rsb	r3, r0, #32
 800d6be:	fa02 f303 	lsl.w	r3, r2, r3
 800d6c2:	430b      	orrs	r3, r1
 800d6c4:	40c2      	lsrs	r2, r0
 800d6c6:	6163      	str	r3, [r4, #20]
 800d6c8:	9201      	str	r2, [sp, #4]
 800d6ca:	9b01      	ldr	r3, [sp, #4]
 800d6cc:	61a3      	str	r3, [r4, #24]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	bf14      	ite	ne
 800d6d2:	2202      	movne	r2, #2
 800d6d4:	2201      	moveq	r2, #1
 800d6d6:	6122      	str	r2, [r4, #16]
 800d6d8:	b1d5      	cbz	r5, 800d710 <__d2b+0x98>
 800d6da:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d6de:	4405      	add	r5, r0
 800d6e0:	f8c9 5000 	str.w	r5, [r9]
 800d6e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d6e8:	f8c8 0000 	str.w	r0, [r8]
 800d6ec:	4620      	mov	r0, r4
 800d6ee:	b003      	add	sp, #12
 800d6f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d6f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d6f8:	e7d5      	b.n	800d6a6 <__d2b+0x2e>
 800d6fa:	6161      	str	r1, [r4, #20]
 800d6fc:	e7e5      	b.n	800d6ca <__d2b+0x52>
 800d6fe:	a801      	add	r0, sp, #4
 800d700:	f7ff fcde 	bl	800d0c0 <__lo0bits>
 800d704:	9b01      	ldr	r3, [sp, #4]
 800d706:	6163      	str	r3, [r4, #20]
 800d708:	2201      	movs	r2, #1
 800d70a:	6122      	str	r2, [r4, #16]
 800d70c:	3020      	adds	r0, #32
 800d70e:	e7e3      	b.n	800d6d8 <__d2b+0x60>
 800d710:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d714:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d718:	f8c9 0000 	str.w	r0, [r9]
 800d71c:	6918      	ldr	r0, [r3, #16]
 800d71e:	f7ff fcaf 	bl	800d080 <__hi0bits>
 800d722:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d726:	e7df      	b.n	800d6e8 <__d2b+0x70>
 800d728:	0800e718 	.word	0x0800e718
 800d72c:	0800e808 	.word	0x0800e808

0800d730 <__ratio>:
 800d730:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d734:	4688      	mov	r8, r1
 800d736:	4669      	mov	r1, sp
 800d738:	4681      	mov	r9, r0
 800d73a:	f7ff ff4d 	bl	800d5d8 <__b2d>
 800d73e:	a901      	add	r1, sp, #4
 800d740:	4640      	mov	r0, r8
 800d742:	ec55 4b10 	vmov	r4, r5, d0
 800d746:	f7ff ff47 	bl	800d5d8 <__b2d>
 800d74a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d74e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d752:	eba3 0c02 	sub.w	ip, r3, r2
 800d756:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d75a:	1a9b      	subs	r3, r3, r2
 800d75c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d760:	ec51 0b10 	vmov	r0, r1, d0
 800d764:	2b00      	cmp	r3, #0
 800d766:	bfd6      	itet	le
 800d768:	460a      	movle	r2, r1
 800d76a:	462a      	movgt	r2, r5
 800d76c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d770:	468b      	mov	fp, r1
 800d772:	462f      	mov	r7, r5
 800d774:	bfd4      	ite	le
 800d776:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d77a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d77e:	4620      	mov	r0, r4
 800d780:	ee10 2a10 	vmov	r2, s0
 800d784:	465b      	mov	r3, fp
 800d786:	4639      	mov	r1, r7
 800d788:	f7f3 f860 	bl	800084c <__aeabi_ddiv>
 800d78c:	ec41 0b10 	vmov	d0, r0, r1
 800d790:	b003      	add	sp, #12
 800d792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d796 <__copybits>:
 800d796:	3901      	subs	r1, #1
 800d798:	b570      	push	{r4, r5, r6, lr}
 800d79a:	1149      	asrs	r1, r1, #5
 800d79c:	6914      	ldr	r4, [r2, #16]
 800d79e:	3101      	adds	r1, #1
 800d7a0:	f102 0314 	add.w	r3, r2, #20
 800d7a4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d7a8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d7ac:	1f05      	subs	r5, r0, #4
 800d7ae:	42a3      	cmp	r3, r4
 800d7b0:	d30c      	bcc.n	800d7cc <__copybits+0x36>
 800d7b2:	1aa3      	subs	r3, r4, r2
 800d7b4:	3b11      	subs	r3, #17
 800d7b6:	f023 0303 	bic.w	r3, r3, #3
 800d7ba:	3211      	adds	r2, #17
 800d7bc:	42a2      	cmp	r2, r4
 800d7be:	bf88      	it	hi
 800d7c0:	2300      	movhi	r3, #0
 800d7c2:	4418      	add	r0, r3
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	4288      	cmp	r0, r1
 800d7c8:	d305      	bcc.n	800d7d6 <__copybits+0x40>
 800d7ca:	bd70      	pop	{r4, r5, r6, pc}
 800d7cc:	f853 6b04 	ldr.w	r6, [r3], #4
 800d7d0:	f845 6f04 	str.w	r6, [r5, #4]!
 800d7d4:	e7eb      	b.n	800d7ae <__copybits+0x18>
 800d7d6:	f840 3b04 	str.w	r3, [r0], #4
 800d7da:	e7f4      	b.n	800d7c6 <__copybits+0x30>

0800d7dc <__any_on>:
 800d7dc:	f100 0214 	add.w	r2, r0, #20
 800d7e0:	6900      	ldr	r0, [r0, #16]
 800d7e2:	114b      	asrs	r3, r1, #5
 800d7e4:	4298      	cmp	r0, r3
 800d7e6:	b510      	push	{r4, lr}
 800d7e8:	db11      	blt.n	800d80e <__any_on+0x32>
 800d7ea:	dd0a      	ble.n	800d802 <__any_on+0x26>
 800d7ec:	f011 011f 	ands.w	r1, r1, #31
 800d7f0:	d007      	beq.n	800d802 <__any_on+0x26>
 800d7f2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d7f6:	fa24 f001 	lsr.w	r0, r4, r1
 800d7fa:	fa00 f101 	lsl.w	r1, r0, r1
 800d7fe:	428c      	cmp	r4, r1
 800d800:	d10b      	bne.n	800d81a <__any_on+0x3e>
 800d802:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d806:	4293      	cmp	r3, r2
 800d808:	d803      	bhi.n	800d812 <__any_on+0x36>
 800d80a:	2000      	movs	r0, #0
 800d80c:	bd10      	pop	{r4, pc}
 800d80e:	4603      	mov	r3, r0
 800d810:	e7f7      	b.n	800d802 <__any_on+0x26>
 800d812:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d816:	2900      	cmp	r1, #0
 800d818:	d0f5      	beq.n	800d806 <__any_on+0x2a>
 800d81a:	2001      	movs	r0, #1
 800d81c:	e7f6      	b.n	800d80c <__any_on+0x30>

0800d81e <_calloc_r>:
 800d81e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d820:	fba1 2402 	umull	r2, r4, r1, r2
 800d824:	b94c      	cbnz	r4, 800d83a <_calloc_r+0x1c>
 800d826:	4611      	mov	r1, r2
 800d828:	9201      	str	r2, [sp, #4]
 800d82a:	f000 f87b 	bl	800d924 <_malloc_r>
 800d82e:	9a01      	ldr	r2, [sp, #4]
 800d830:	4605      	mov	r5, r0
 800d832:	b930      	cbnz	r0, 800d842 <_calloc_r+0x24>
 800d834:	4628      	mov	r0, r5
 800d836:	b003      	add	sp, #12
 800d838:	bd30      	pop	{r4, r5, pc}
 800d83a:	220c      	movs	r2, #12
 800d83c:	6002      	str	r2, [r0, #0]
 800d83e:	2500      	movs	r5, #0
 800d840:	e7f8      	b.n	800d834 <_calloc_r+0x16>
 800d842:	4621      	mov	r1, r4
 800d844:	f7fc f860 	bl	8009908 <memset>
 800d848:	e7f4      	b.n	800d834 <_calloc_r+0x16>
	...

0800d84c <_free_r>:
 800d84c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d84e:	2900      	cmp	r1, #0
 800d850:	d044      	beq.n	800d8dc <_free_r+0x90>
 800d852:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d856:	9001      	str	r0, [sp, #4]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	f1a1 0404 	sub.w	r4, r1, #4
 800d85e:	bfb8      	it	lt
 800d860:	18e4      	addlt	r4, r4, r3
 800d862:	f000 fca5 	bl	800e1b0 <__malloc_lock>
 800d866:	4a1e      	ldr	r2, [pc, #120]	; (800d8e0 <_free_r+0x94>)
 800d868:	9801      	ldr	r0, [sp, #4]
 800d86a:	6813      	ldr	r3, [r2, #0]
 800d86c:	b933      	cbnz	r3, 800d87c <_free_r+0x30>
 800d86e:	6063      	str	r3, [r4, #4]
 800d870:	6014      	str	r4, [r2, #0]
 800d872:	b003      	add	sp, #12
 800d874:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d878:	f000 bca0 	b.w	800e1bc <__malloc_unlock>
 800d87c:	42a3      	cmp	r3, r4
 800d87e:	d908      	bls.n	800d892 <_free_r+0x46>
 800d880:	6825      	ldr	r5, [r4, #0]
 800d882:	1961      	adds	r1, r4, r5
 800d884:	428b      	cmp	r3, r1
 800d886:	bf01      	itttt	eq
 800d888:	6819      	ldreq	r1, [r3, #0]
 800d88a:	685b      	ldreq	r3, [r3, #4]
 800d88c:	1949      	addeq	r1, r1, r5
 800d88e:	6021      	streq	r1, [r4, #0]
 800d890:	e7ed      	b.n	800d86e <_free_r+0x22>
 800d892:	461a      	mov	r2, r3
 800d894:	685b      	ldr	r3, [r3, #4]
 800d896:	b10b      	cbz	r3, 800d89c <_free_r+0x50>
 800d898:	42a3      	cmp	r3, r4
 800d89a:	d9fa      	bls.n	800d892 <_free_r+0x46>
 800d89c:	6811      	ldr	r1, [r2, #0]
 800d89e:	1855      	adds	r5, r2, r1
 800d8a0:	42a5      	cmp	r5, r4
 800d8a2:	d10b      	bne.n	800d8bc <_free_r+0x70>
 800d8a4:	6824      	ldr	r4, [r4, #0]
 800d8a6:	4421      	add	r1, r4
 800d8a8:	1854      	adds	r4, r2, r1
 800d8aa:	42a3      	cmp	r3, r4
 800d8ac:	6011      	str	r1, [r2, #0]
 800d8ae:	d1e0      	bne.n	800d872 <_free_r+0x26>
 800d8b0:	681c      	ldr	r4, [r3, #0]
 800d8b2:	685b      	ldr	r3, [r3, #4]
 800d8b4:	6053      	str	r3, [r2, #4]
 800d8b6:	4421      	add	r1, r4
 800d8b8:	6011      	str	r1, [r2, #0]
 800d8ba:	e7da      	b.n	800d872 <_free_r+0x26>
 800d8bc:	d902      	bls.n	800d8c4 <_free_r+0x78>
 800d8be:	230c      	movs	r3, #12
 800d8c0:	6003      	str	r3, [r0, #0]
 800d8c2:	e7d6      	b.n	800d872 <_free_r+0x26>
 800d8c4:	6825      	ldr	r5, [r4, #0]
 800d8c6:	1961      	adds	r1, r4, r5
 800d8c8:	428b      	cmp	r3, r1
 800d8ca:	bf04      	itt	eq
 800d8cc:	6819      	ldreq	r1, [r3, #0]
 800d8ce:	685b      	ldreq	r3, [r3, #4]
 800d8d0:	6063      	str	r3, [r4, #4]
 800d8d2:	bf04      	itt	eq
 800d8d4:	1949      	addeq	r1, r1, r5
 800d8d6:	6021      	streq	r1, [r4, #0]
 800d8d8:	6054      	str	r4, [r2, #4]
 800d8da:	e7ca      	b.n	800d872 <_free_r+0x26>
 800d8dc:	b003      	add	sp, #12
 800d8de:	bd30      	pop	{r4, r5, pc}
 800d8e0:	2000055c 	.word	0x2000055c

0800d8e4 <sbrk_aligned>:
 800d8e4:	b570      	push	{r4, r5, r6, lr}
 800d8e6:	4e0e      	ldr	r6, [pc, #56]	; (800d920 <sbrk_aligned+0x3c>)
 800d8e8:	460c      	mov	r4, r1
 800d8ea:	6831      	ldr	r1, [r6, #0]
 800d8ec:	4605      	mov	r5, r0
 800d8ee:	b911      	cbnz	r1, 800d8f6 <sbrk_aligned+0x12>
 800d8f0:	f000 fb4a 	bl	800df88 <_sbrk_r>
 800d8f4:	6030      	str	r0, [r6, #0]
 800d8f6:	4621      	mov	r1, r4
 800d8f8:	4628      	mov	r0, r5
 800d8fa:	f000 fb45 	bl	800df88 <_sbrk_r>
 800d8fe:	1c43      	adds	r3, r0, #1
 800d900:	d00a      	beq.n	800d918 <sbrk_aligned+0x34>
 800d902:	1cc4      	adds	r4, r0, #3
 800d904:	f024 0403 	bic.w	r4, r4, #3
 800d908:	42a0      	cmp	r0, r4
 800d90a:	d007      	beq.n	800d91c <sbrk_aligned+0x38>
 800d90c:	1a21      	subs	r1, r4, r0
 800d90e:	4628      	mov	r0, r5
 800d910:	f000 fb3a 	bl	800df88 <_sbrk_r>
 800d914:	3001      	adds	r0, #1
 800d916:	d101      	bne.n	800d91c <sbrk_aligned+0x38>
 800d918:	f04f 34ff 	mov.w	r4, #4294967295
 800d91c:	4620      	mov	r0, r4
 800d91e:	bd70      	pop	{r4, r5, r6, pc}
 800d920:	20000560 	.word	0x20000560

0800d924 <_malloc_r>:
 800d924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d928:	1ccd      	adds	r5, r1, #3
 800d92a:	f025 0503 	bic.w	r5, r5, #3
 800d92e:	3508      	adds	r5, #8
 800d930:	2d0c      	cmp	r5, #12
 800d932:	bf38      	it	cc
 800d934:	250c      	movcc	r5, #12
 800d936:	2d00      	cmp	r5, #0
 800d938:	4607      	mov	r7, r0
 800d93a:	db01      	blt.n	800d940 <_malloc_r+0x1c>
 800d93c:	42a9      	cmp	r1, r5
 800d93e:	d905      	bls.n	800d94c <_malloc_r+0x28>
 800d940:	230c      	movs	r3, #12
 800d942:	603b      	str	r3, [r7, #0]
 800d944:	2600      	movs	r6, #0
 800d946:	4630      	mov	r0, r6
 800d948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d94c:	4e2e      	ldr	r6, [pc, #184]	; (800da08 <_malloc_r+0xe4>)
 800d94e:	f000 fc2f 	bl	800e1b0 <__malloc_lock>
 800d952:	6833      	ldr	r3, [r6, #0]
 800d954:	461c      	mov	r4, r3
 800d956:	bb34      	cbnz	r4, 800d9a6 <_malloc_r+0x82>
 800d958:	4629      	mov	r1, r5
 800d95a:	4638      	mov	r0, r7
 800d95c:	f7ff ffc2 	bl	800d8e4 <sbrk_aligned>
 800d960:	1c43      	adds	r3, r0, #1
 800d962:	4604      	mov	r4, r0
 800d964:	d14d      	bne.n	800da02 <_malloc_r+0xde>
 800d966:	6834      	ldr	r4, [r6, #0]
 800d968:	4626      	mov	r6, r4
 800d96a:	2e00      	cmp	r6, #0
 800d96c:	d140      	bne.n	800d9f0 <_malloc_r+0xcc>
 800d96e:	6823      	ldr	r3, [r4, #0]
 800d970:	4631      	mov	r1, r6
 800d972:	4638      	mov	r0, r7
 800d974:	eb04 0803 	add.w	r8, r4, r3
 800d978:	f000 fb06 	bl	800df88 <_sbrk_r>
 800d97c:	4580      	cmp	r8, r0
 800d97e:	d13a      	bne.n	800d9f6 <_malloc_r+0xd2>
 800d980:	6821      	ldr	r1, [r4, #0]
 800d982:	3503      	adds	r5, #3
 800d984:	1a6d      	subs	r5, r5, r1
 800d986:	f025 0503 	bic.w	r5, r5, #3
 800d98a:	3508      	adds	r5, #8
 800d98c:	2d0c      	cmp	r5, #12
 800d98e:	bf38      	it	cc
 800d990:	250c      	movcc	r5, #12
 800d992:	4629      	mov	r1, r5
 800d994:	4638      	mov	r0, r7
 800d996:	f7ff ffa5 	bl	800d8e4 <sbrk_aligned>
 800d99a:	3001      	adds	r0, #1
 800d99c:	d02b      	beq.n	800d9f6 <_malloc_r+0xd2>
 800d99e:	6823      	ldr	r3, [r4, #0]
 800d9a0:	442b      	add	r3, r5
 800d9a2:	6023      	str	r3, [r4, #0]
 800d9a4:	e00e      	b.n	800d9c4 <_malloc_r+0xa0>
 800d9a6:	6822      	ldr	r2, [r4, #0]
 800d9a8:	1b52      	subs	r2, r2, r5
 800d9aa:	d41e      	bmi.n	800d9ea <_malloc_r+0xc6>
 800d9ac:	2a0b      	cmp	r2, #11
 800d9ae:	d916      	bls.n	800d9de <_malloc_r+0xba>
 800d9b0:	1961      	adds	r1, r4, r5
 800d9b2:	42a3      	cmp	r3, r4
 800d9b4:	6025      	str	r5, [r4, #0]
 800d9b6:	bf18      	it	ne
 800d9b8:	6059      	strne	r1, [r3, #4]
 800d9ba:	6863      	ldr	r3, [r4, #4]
 800d9bc:	bf08      	it	eq
 800d9be:	6031      	streq	r1, [r6, #0]
 800d9c0:	5162      	str	r2, [r4, r5]
 800d9c2:	604b      	str	r3, [r1, #4]
 800d9c4:	4638      	mov	r0, r7
 800d9c6:	f104 060b 	add.w	r6, r4, #11
 800d9ca:	f000 fbf7 	bl	800e1bc <__malloc_unlock>
 800d9ce:	f026 0607 	bic.w	r6, r6, #7
 800d9d2:	1d23      	adds	r3, r4, #4
 800d9d4:	1af2      	subs	r2, r6, r3
 800d9d6:	d0b6      	beq.n	800d946 <_malloc_r+0x22>
 800d9d8:	1b9b      	subs	r3, r3, r6
 800d9da:	50a3      	str	r3, [r4, r2]
 800d9dc:	e7b3      	b.n	800d946 <_malloc_r+0x22>
 800d9de:	6862      	ldr	r2, [r4, #4]
 800d9e0:	42a3      	cmp	r3, r4
 800d9e2:	bf0c      	ite	eq
 800d9e4:	6032      	streq	r2, [r6, #0]
 800d9e6:	605a      	strne	r2, [r3, #4]
 800d9e8:	e7ec      	b.n	800d9c4 <_malloc_r+0xa0>
 800d9ea:	4623      	mov	r3, r4
 800d9ec:	6864      	ldr	r4, [r4, #4]
 800d9ee:	e7b2      	b.n	800d956 <_malloc_r+0x32>
 800d9f0:	4634      	mov	r4, r6
 800d9f2:	6876      	ldr	r6, [r6, #4]
 800d9f4:	e7b9      	b.n	800d96a <_malloc_r+0x46>
 800d9f6:	230c      	movs	r3, #12
 800d9f8:	603b      	str	r3, [r7, #0]
 800d9fa:	4638      	mov	r0, r7
 800d9fc:	f000 fbde 	bl	800e1bc <__malloc_unlock>
 800da00:	e7a1      	b.n	800d946 <_malloc_r+0x22>
 800da02:	6025      	str	r5, [r4, #0]
 800da04:	e7de      	b.n	800d9c4 <_malloc_r+0xa0>
 800da06:	bf00      	nop
 800da08:	2000055c 	.word	0x2000055c

0800da0c <__ssputs_r>:
 800da0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da10:	688e      	ldr	r6, [r1, #8]
 800da12:	429e      	cmp	r6, r3
 800da14:	4682      	mov	sl, r0
 800da16:	460c      	mov	r4, r1
 800da18:	4690      	mov	r8, r2
 800da1a:	461f      	mov	r7, r3
 800da1c:	d838      	bhi.n	800da90 <__ssputs_r+0x84>
 800da1e:	898a      	ldrh	r2, [r1, #12]
 800da20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800da24:	d032      	beq.n	800da8c <__ssputs_r+0x80>
 800da26:	6825      	ldr	r5, [r4, #0]
 800da28:	6909      	ldr	r1, [r1, #16]
 800da2a:	eba5 0901 	sub.w	r9, r5, r1
 800da2e:	6965      	ldr	r5, [r4, #20]
 800da30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800da34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800da38:	3301      	adds	r3, #1
 800da3a:	444b      	add	r3, r9
 800da3c:	106d      	asrs	r5, r5, #1
 800da3e:	429d      	cmp	r5, r3
 800da40:	bf38      	it	cc
 800da42:	461d      	movcc	r5, r3
 800da44:	0553      	lsls	r3, r2, #21
 800da46:	d531      	bpl.n	800daac <__ssputs_r+0xa0>
 800da48:	4629      	mov	r1, r5
 800da4a:	f7ff ff6b 	bl	800d924 <_malloc_r>
 800da4e:	4606      	mov	r6, r0
 800da50:	b950      	cbnz	r0, 800da68 <__ssputs_r+0x5c>
 800da52:	230c      	movs	r3, #12
 800da54:	f8ca 3000 	str.w	r3, [sl]
 800da58:	89a3      	ldrh	r3, [r4, #12]
 800da5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da5e:	81a3      	strh	r3, [r4, #12]
 800da60:	f04f 30ff 	mov.w	r0, #4294967295
 800da64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da68:	6921      	ldr	r1, [r4, #16]
 800da6a:	464a      	mov	r2, r9
 800da6c:	f7fb ff3e 	bl	80098ec <memcpy>
 800da70:	89a3      	ldrh	r3, [r4, #12]
 800da72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800da76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da7a:	81a3      	strh	r3, [r4, #12]
 800da7c:	6126      	str	r6, [r4, #16]
 800da7e:	6165      	str	r5, [r4, #20]
 800da80:	444e      	add	r6, r9
 800da82:	eba5 0509 	sub.w	r5, r5, r9
 800da86:	6026      	str	r6, [r4, #0]
 800da88:	60a5      	str	r5, [r4, #8]
 800da8a:	463e      	mov	r6, r7
 800da8c:	42be      	cmp	r6, r7
 800da8e:	d900      	bls.n	800da92 <__ssputs_r+0x86>
 800da90:	463e      	mov	r6, r7
 800da92:	6820      	ldr	r0, [r4, #0]
 800da94:	4632      	mov	r2, r6
 800da96:	4641      	mov	r1, r8
 800da98:	f000 fb70 	bl	800e17c <memmove>
 800da9c:	68a3      	ldr	r3, [r4, #8]
 800da9e:	1b9b      	subs	r3, r3, r6
 800daa0:	60a3      	str	r3, [r4, #8]
 800daa2:	6823      	ldr	r3, [r4, #0]
 800daa4:	4433      	add	r3, r6
 800daa6:	6023      	str	r3, [r4, #0]
 800daa8:	2000      	movs	r0, #0
 800daaa:	e7db      	b.n	800da64 <__ssputs_r+0x58>
 800daac:	462a      	mov	r2, r5
 800daae:	f000 fb8b 	bl	800e1c8 <_realloc_r>
 800dab2:	4606      	mov	r6, r0
 800dab4:	2800      	cmp	r0, #0
 800dab6:	d1e1      	bne.n	800da7c <__ssputs_r+0x70>
 800dab8:	6921      	ldr	r1, [r4, #16]
 800daba:	4650      	mov	r0, sl
 800dabc:	f7ff fec6 	bl	800d84c <_free_r>
 800dac0:	e7c7      	b.n	800da52 <__ssputs_r+0x46>
	...

0800dac4 <_svfiprintf_r>:
 800dac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dac8:	4698      	mov	r8, r3
 800daca:	898b      	ldrh	r3, [r1, #12]
 800dacc:	061b      	lsls	r3, r3, #24
 800dace:	b09d      	sub	sp, #116	; 0x74
 800dad0:	4607      	mov	r7, r0
 800dad2:	460d      	mov	r5, r1
 800dad4:	4614      	mov	r4, r2
 800dad6:	d50e      	bpl.n	800daf6 <_svfiprintf_r+0x32>
 800dad8:	690b      	ldr	r3, [r1, #16]
 800dada:	b963      	cbnz	r3, 800daf6 <_svfiprintf_r+0x32>
 800dadc:	2140      	movs	r1, #64	; 0x40
 800dade:	f7ff ff21 	bl	800d924 <_malloc_r>
 800dae2:	6028      	str	r0, [r5, #0]
 800dae4:	6128      	str	r0, [r5, #16]
 800dae6:	b920      	cbnz	r0, 800daf2 <_svfiprintf_r+0x2e>
 800dae8:	230c      	movs	r3, #12
 800daea:	603b      	str	r3, [r7, #0]
 800daec:	f04f 30ff 	mov.w	r0, #4294967295
 800daf0:	e0d1      	b.n	800dc96 <_svfiprintf_r+0x1d2>
 800daf2:	2340      	movs	r3, #64	; 0x40
 800daf4:	616b      	str	r3, [r5, #20]
 800daf6:	2300      	movs	r3, #0
 800daf8:	9309      	str	r3, [sp, #36]	; 0x24
 800dafa:	2320      	movs	r3, #32
 800dafc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800db00:	f8cd 800c 	str.w	r8, [sp, #12]
 800db04:	2330      	movs	r3, #48	; 0x30
 800db06:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800dcb0 <_svfiprintf_r+0x1ec>
 800db0a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800db0e:	f04f 0901 	mov.w	r9, #1
 800db12:	4623      	mov	r3, r4
 800db14:	469a      	mov	sl, r3
 800db16:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db1a:	b10a      	cbz	r2, 800db20 <_svfiprintf_r+0x5c>
 800db1c:	2a25      	cmp	r2, #37	; 0x25
 800db1e:	d1f9      	bne.n	800db14 <_svfiprintf_r+0x50>
 800db20:	ebba 0b04 	subs.w	fp, sl, r4
 800db24:	d00b      	beq.n	800db3e <_svfiprintf_r+0x7a>
 800db26:	465b      	mov	r3, fp
 800db28:	4622      	mov	r2, r4
 800db2a:	4629      	mov	r1, r5
 800db2c:	4638      	mov	r0, r7
 800db2e:	f7ff ff6d 	bl	800da0c <__ssputs_r>
 800db32:	3001      	adds	r0, #1
 800db34:	f000 80aa 	beq.w	800dc8c <_svfiprintf_r+0x1c8>
 800db38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800db3a:	445a      	add	r2, fp
 800db3c:	9209      	str	r2, [sp, #36]	; 0x24
 800db3e:	f89a 3000 	ldrb.w	r3, [sl]
 800db42:	2b00      	cmp	r3, #0
 800db44:	f000 80a2 	beq.w	800dc8c <_svfiprintf_r+0x1c8>
 800db48:	2300      	movs	r3, #0
 800db4a:	f04f 32ff 	mov.w	r2, #4294967295
 800db4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db52:	f10a 0a01 	add.w	sl, sl, #1
 800db56:	9304      	str	r3, [sp, #16]
 800db58:	9307      	str	r3, [sp, #28]
 800db5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800db5e:	931a      	str	r3, [sp, #104]	; 0x68
 800db60:	4654      	mov	r4, sl
 800db62:	2205      	movs	r2, #5
 800db64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db68:	4851      	ldr	r0, [pc, #324]	; (800dcb0 <_svfiprintf_r+0x1ec>)
 800db6a:	f7f2 fb39 	bl	80001e0 <memchr>
 800db6e:	9a04      	ldr	r2, [sp, #16]
 800db70:	b9d8      	cbnz	r0, 800dbaa <_svfiprintf_r+0xe6>
 800db72:	06d0      	lsls	r0, r2, #27
 800db74:	bf44      	itt	mi
 800db76:	2320      	movmi	r3, #32
 800db78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db7c:	0711      	lsls	r1, r2, #28
 800db7e:	bf44      	itt	mi
 800db80:	232b      	movmi	r3, #43	; 0x2b
 800db82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db86:	f89a 3000 	ldrb.w	r3, [sl]
 800db8a:	2b2a      	cmp	r3, #42	; 0x2a
 800db8c:	d015      	beq.n	800dbba <_svfiprintf_r+0xf6>
 800db8e:	9a07      	ldr	r2, [sp, #28]
 800db90:	4654      	mov	r4, sl
 800db92:	2000      	movs	r0, #0
 800db94:	f04f 0c0a 	mov.w	ip, #10
 800db98:	4621      	mov	r1, r4
 800db9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db9e:	3b30      	subs	r3, #48	; 0x30
 800dba0:	2b09      	cmp	r3, #9
 800dba2:	d94e      	bls.n	800dc42 <_svfiprintf_r+0x17e>
 800dba4:	b1b0      	cbz	r0, 800dbd4 <_svfiprintf_r+0x110>
 800dba6:	9207      	str	r2, [sp, #28]
 800dba8:	e014      	b.n	800dbd4 <_svfiprintf_r+0x110>
 800dbaa:	eba0 0308 	sub.w	r3, r0, r8
 800dbae:	fa09 f303 	lsl.w	r3, r9, r3
 800dbb2:	4313      	orrs	r3, r2
 800dbb4:	9304      	str	r3, [sp, #16]
 800dbb6:	46a2      	mov	sl, r4
 800dbb8:	e7d2      	b.n	800db60 <_svfiprintf_r+0x9c>
 800dbba:	9b03      	ldr	r3, [sp, #12]
 800dbbc:	1d19      	adds	r1, r3, #4
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	9103      	str	r1, [sp, #12]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	bfbb      	ittet	lt
 800dbc6:	425b      	neglt	r3, r3
 800dbc8:	f042 0202 	orrlt.w	r2, r2, #2
 800dbcc:	9307      	strge	r3, [sp, #28]
 800dbce:	9307      	strlt	r3, [sp, #28]
 800dbd0:	bfb8      	it	lt
 800dbd2:	9204      	strlt	r2, [sp, #16]
 800dbd4:	7823      	ldrb	r3, [r4, #0]
 800dbd6:	2b2e      	cmp	r3, #46	; 0x2e
 800dbd8:	d10c      	bne.n	800dbf4 <_svfiprintf_r+0x130>
 800dbda:	7863      	ldrb	r3, [r4, #1]
 800dbdc:	2b2a      	cmp	r3, #42	; 0x2a
 800dbde:	d135      	bne.n	800dc4c <_svfiprintf_r+0x188>
 800dbe0:	9b03      	ldr	r3, [sp, #12]
 800dbe2:	1d1a      	adds	r2, r3, #4
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	9203      	str	r2, [sp, #12]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	bfb8      	it	lt
 800dbec:	f04f 33ff 	movlt.w	r3, #4294967295
 800dbf0:	3402      	adds	r4, #2
 800dbf2:	9305      	str	r3, [sp, #20]
 800dbf4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800dcc0 <_svfiprintf_r+0x1fc>
 800dbf8:	7821      	ldrb	r1, [r4, #0]
 800dbfa:	2203      	movs	r2, #3
 800dbfc:	4650      	mov	r0, sl
 800dbfe:	f7f2 faef 	bl	80001e0 <memchr>
 800dc02:	b140      	cbz	r0, 800dc16 <_svfiprintf_r+0x152>
 800dc04:	2340      	movs	r3, #64	; 0x40
 800dc06:	eba0 000a 	sub.w	r0, r0, sl
 800dc0a:	fa03 f000 	lsl.w	r0, r3, r0
 800dc0e:	9b04      	ldr	r3, [sp, #16]
 800dc10:	4303      	orrs	r3, r0
 800dc12:	3401      	adds	r4, #1
 800dc14:	9304      	str	r3, [sp, #16]
 800dc16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc1a:	4826      	ldr	r0, [pc, #152]	; (800dcb4 <_svfiprintf_r+0x1f0>)
 800dc1c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dc20:	2206      	movs	r2, #6
 800dc22:	f7f2 fadd 	bl	80001e0 <memchr>
 800dc26:	2800      	cmp	r0, #0
 800dc28:	d038      	beq.n	800dc9c <_svfiprintf_r+0x1d8>
 800dc2a:	4b23      	ldr	r3, [pc, #140]	; (800dcb8 <_svfiprintf_r+0x1f4>)
 800dc2c:	bb1b      	cbnz	r3, 800dc76 <_svfiprintf_r+0x1b2>
 800dc2e:	9b03      	ldr	r3, [sp, #12]
 800dc30:	3307      	adds	r3, #7
 800dc32:	f023 0307 	bic.w	r3, r3, #7
 800dc36:	3308      	adds	r3, #8
 800dc38:	9303      	str	r3, [sp, #12]
 800dc3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc3c:	4433      	add	r3, r6
 800dc3e:	9309      	str	r3, [sp, #36]	; 0x24
 800dc40:	e767      	b.n	800db12 <_svfiprintf_r+0x4e>
 800dc42:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc46:	460c      	mov	r4, r1
 800dc48:	2001      	movs	r0, #1
 800dc4a:	e7a5      	b.n	800db98 <_svfiprintf_r+0xd4>
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	3401      	adds	r4, #1
 800dc50:	9305      	str	r3, [sp, #20]
 800dc52:	4619      	mov	r1, r3
 800dc54:	f04f 0c0a 	mov.w	ip, #10
 800dc58:	4620      	mov	r0, r4
 800dc5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc5e:	3a30      	subs	r2, #48	; 0x30
 800dc60:	2a09      	cmp	r2, #9
 800dc62:	d903      	bls.n	800dc6c <_svfiprintf_r+0x1a8>
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d0c5      	beq.n	800dbf4 <_svfiprintf_r+0x130>
 800dc68:	9105      	str	r1, [sp, #20]
 800dc6a:	e7c3      	b.n	800dbf4 <_svfiprintf_r+0x130>
 800dc6c:	fb0c 2101 	mla	r1, ip, r1, r2
 800dc70:	4604      	mov	r4, r0
 800dc72:	2301      	movs	r3, #1
 800dc74:	e7f0      	b.n	800dc58 <_svfiprintf_r+0x194>
 800dc76:	ab03      	add	r3, sp, #12
 800dc78:	9300      	str	r3, [sp, #0]
 800dc7a:	462a      	mov	r2, r5
 800dc7c:	4b0f      	ldr	r3, [pc, #60]	; (800dcbc <_svfiprintf_r+0x1f8>)
 800dc7e:	a904      	add	r1, sp, #16
 800dc80:	4638      	mov	r0, r7
 800dc82:	f7fb fee9 	bl	8009a58 <_printf_float>
 800dc86:	1c42      	adds	r2, r0, #1
 800dc88:	4606      	mov	r6, r0
 800dc8a:	d1d6      	bne.n	800dc3a <_svfiprintf_r+0x176>
 800dc8c:	89ab      	ldrh	r3, [r5, #12]
 800dc8e:	065b      	lsls	r3, r3, #25
 800dc90:	f53f af2c 	bmi.w	800daec <_svfiprintf_r+0x28>
 800dc94:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dc96:	b01d      	add	sp, #116	; 0x74
 800dc98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc9c:	ab03      	add	r3, sp, #12
 800dc9e:	9300      	str	r3, [sp, #0]
 800dca0:	462a      	mov	r2, r5
 800dca2:	4b06      	ldr	r3, [pc, #24]	; (800dcbc <_svfiprintf_r+0x1f8>)
 800dca4:	a904      	add	r1, sp, #16
 800dca6:	4638      	mov	r0, r7
 800dca8:	f7fc f97a 	bl	8009fa0 <_printf_i>
 800dcac:	e7eb      	b.n	800dc86 <_svfiprintf_r+0x1c2>
 800dcae:	bf00      	nop
 800dcb0:	0800e964 	.word	0x0800e964
 800dcb4:	0800e96e 	.word	0x0800e96e
 800dcb8:	08009a59 	.word	0x08009a59
 800dcbc:	0800da0d 	.word	0x0800da0d
 800dcc0:	0800e96a 	.word	0x0800e96a

0800dcc4 <__sfputc_r>:
 800dcc4:	6893      	ldr	r3, [r2, #8]
 800dcc6:	3b01      	subs	r3, #1
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	b410      	push	{r4}
 800dccc:	6093      	str	r3, [r2, #8]
 800dcce:	da08      	bge.n	800dce2 <__sfputc_r+0x1e>
 800dcd0:	6994      	ldr	r4, [r2, #24]
 800dcd2:	42a3      	cmp	r3, r4
 800dcd4:	db01      	blt.n	800dcda <__sfputc_r+0x16>
 800dcd6:	290a      	cmp	r1, #10
 800dcd8:	d103      	bne.n	800dce2 <__sfputc_r+0x1e>
 800dcda:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dcde:	f7fd bbf7 	b.w	800b4d0 <__swbuf_r>
 800dce2:	6813      	ldr	r3, [r2, #0]
 800dce4:	1c58      	adds	r0, r3, #1
 800dce6:	6010      	str	r0, [r2, #0]
 800dce8:	7019      	strb	r1, [r3, #0]
 800dcea:	4608      	mov	r0, r1
 800dcec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dcf0:	4770      	bx	lr

0800dcf2 <__sfputs_r>:
 800dcf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcf4:	4606      	mov	r6, r0
 800dcf6:	460f      	mov	r7, r1
 800dcf8:	4614      	mov	r4, r2
 800dcfa:	18d5      	adds	r5, r2, r3
 800dcfc:	42ac      	cmp	r4, r5
 800dcfe:	d101      	bne.n	800dd04 <__sfputs_r+0x12>
 800dd00:	2000      	movs	r0, #0
 800dd02:	e007      	b.n	800dd14 <__sfputs_r+0x22>
 800dd04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd08:	463a      	mov	r2, r7
 800dd0a:	4630      	mov	r0, r6
 800dd0c:	f7ff ffda 	bl	800dcc4 <__sfputc_r>
 800dd10:	1c43      	adds	r3, r0, #1
 800dd12:	d1f3      	bne.n	800dcfc <__sfputs_r+0xa>
 800dd14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dd18 <_vfiprintf_r>:
 800dd18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd1c:	460d      	mov	r5, r1
 800dd1e:	b09d      	sub	sp, #116	; 0x74
 800dd20:	4614      	mov	r4, r2
 800dd22:	4698      	mov	r8, r3
 800dd24:	4606      	mov	r6, r0
 800dd26:	b118      	cbz	r0, 800dd30 <_vfiprintf_r+0x18>
 800dd28:	6983      	ldr	r3, [r0, #24]
 800dd2a:	b90b      	cbnz	r3, 800dd30 <_vfiprintf_r+0x18>
 800dd2c:	f7fe fc24 	bl	800c578 <__sinit>
 800dd30:	4b89      	ldr	r3, [pc, #548]	; (800df58 <_vfiprintf_r+0x240>)
 800dd32:	429d      	cmp	r5, r3
 800dd34:	d11b      	bne.n	800dd6e <_vfiprintf_r+0x56>
 800dd36:	6875      	ldr	r5, [r6, #4]
 800dd38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dd3a:	07d9      	lsls	r1, r3, #31
 800dd3c:	d405      	bmi.n	800dd4a <_vfiprintf_r+0x32>
 800dd3e:	89ab      	ldrh	r3, [r5, #12]
 800dd40:	059a      	lsls	r2, r3, #22
 800dd42:	d402      	bmi.n	800dd4a <_vfiprintf_r+0x32>
 800dd44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dd46:	f7ff f828 	bl	800cd9a <__retarget_lock_acquire_recursive>
 800dd4a:	89ab      	ldrh	r3, [r5, #12]
 800dd4c:	071b      	lsls	r3, r3, #28
 800dd4e:	d501      	bpl.n	800dd54 <_vfiprintf_r+0x3c>
 800dd50:	692b      	ldr	r3, [r5, #16]
 800dd52:	b9eb      	cbnz	r3, 800dd90 <_vfiprintf_r+0x78>
 800dd54:	4629      	mov	r1, r5
 800dd56:	4630      	mov	r0, r6
 800dd58:	f7fd fc0c 	bl	800b574 <__swsetup_r>
 800dd5c:	b1c0      	cbz	r0, 800dd90 <_vfiprintf_r+0x78>
 800dd5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dd60:	07dc      	lsls	r4, r3, #31
 800dd62:	d50e      	bpl.n	800dd82 <_vfiprintf_r+0x6a>
 800dd64:	f04f 30ff 	mov.w	r0, #4294967295
 800dd68:	b01d      	add	sp, #116	; 0x74
 800dd6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd6e:	4b7b      	ldr	r3, [pc, #492]	; (800df5c <_vfiprintf_r+0x244>)
 800dd70:	429d      	cmp	r5, r3
 800dd72:	d101      	bne.n	800dd78 <_vfiprintf_r+0x60>
 800dd74:	68b5      	ldr	r5, [r6, #8]
 800dd76:	e7df      	b.n	800dd38 <_vfiprintf_r+0x20>
 800dd78:	4b79      	ldr	r3, [pc, #484]	; (800df60 <_vfiprintf_r+0x248>)
 800dd7a:	429d      	cmp	r5, r3
 800dd7c:	bf08      	it	eq
 800dd7e:	68f5      	ldreq	r5, [r6, #12]
 800dd80:	e7da      	b.n	800dd38 <_vfiprintf_r+0x20>
 800dd82:	89ab      	ldrh	r3, [r5, #12]
 800dd84:	0598      	lsls	r0, r3, #22
 800dd86:	d4ed      	bmi.n	800dd64 <_vfiprintf_r+0x4c>
 800dd88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dd8a:	f7ff f807 	bl	800cd9c <__retarget_lock_release_recursive>
 800dd8e:	e7e9      	b.n	800dd64 <_vfiprintf_r+0x4c>
 800dd90:	2300      	movs	r3, #0
 800dd92:	9309      	str	r3, [sp, #36]	; 0x24
 800dd94:	2320      	movs	r3, #32
 800dd96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dd9a:	f8cd 800c 	str.w	r8, [sp, #12]
 800dd9e:	2330      	movs	r3, #48	; 0x30
 800dda0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800df64 <_vfiprintf_r+0x24c>
 800dda4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dda8:	f04f 0901 	mov.w	r9, #1
 800ddac:	4623      	mov	r3, r4
 800ddae:	469a      	mov	sl, r3
 800ddb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ddb4:	b10a      	cbz	r2, 800ddba <_vfiprintf_r+0xa2>
 800ddb6:	2a25      	cmp	r2, #37	; 0x25
 800ddb8:	d1f9      	bne.n	800ddae <_vfiprintf_r+0x96>
 800ddba:	ebba 0b04 	subs.w	fp, sl, r4
 800ddbe:	d00b      	beq.n	800ddd8 <_vfiprintf_r+0xc0>
 800ddc0:	465b      	mov	r3, fp
 800ddc2:	4622      	mov	r2, r4
 800ddc4:	4629      	mov	r1, r5
 800ddc6:	4630      	mov	r0, r6
 800ddc8:	f7ff ff93 	bl	800dcf2 <__sfputs_r>
 800ddcc:	3001      	adds	r0, #1
 800ddce:	f000 80aa 	beq.w	800df26 <_vfiprintf_r+0x20e>
 800ddd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ddd4:	445a      	add	r2, fp
 800ddd6:	9209      	str	r2, [sp, #36]	; 0x24
 800ddd8:	f89a 3000 	ldrb.w	r3, [sl]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	f000 80a2 	beq.w	800df26 <_vfiprintf_r+0x20e>
 800dde2:	2300      	movs	r3, #0
 800dde4:	f04f 32ff 	mov.w	r2, #4294967295
 800dde8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ddec:	f10a 0a01 	add.w	sl, sl, #1
 800ddf0:	9304      	str	r3, [sp, #16]
 800ddf2:	9307      	str	r3, [sp, #28]
 800ddf4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ddf8:	931a      	str	r3, [sp, #104]	; 0x68
 800ddfa:	4654      	mov	r4, sl
 800ddfc:	2205      	movs	r2, #5
 800ddfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de02:	4858      	ldr	r0, [pc, #352]	; (800df64 <_vfiprintf_r+0x24c>)
 800de04:	f7f2 f9ec 	bl	80001e0 <memchr>
 800de08:	9a04      	ldr	r2, [sp, #16]
 800de0a:	b9d8      	cbnz	r0, 800de44 <_vfiprintf_r+0x12c>
 800de0c:	06d1      	lsls	r1, r2, #27
 800de0e:	bf44      	itt	mi
 800de10:	2320      	movmi	r3, #32
 800de12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de16:	0713      	lsls	r3, r2, #28
 800de18:	bf44      	itt	mi
 800de1a:	232b      	movmi	r3, #43	; 0x2b
 800de1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de20:	f89a 3000 	ldrb.w	r3, [sl]
 800de24:	2b2a      	cmp	r3, #42	; 0x2a
 800de26:	d015      	beq.n	800de54 <_vfiprintf_r+0x13c>
 800de28:	9a07      	ldr	r2, [sp, #28]
 800de2a:	4654      	mov	r4, sl
 800de2c:	2000      	movs	r0, #0
 800de2e:	f04f 0c0a 	mov.w	ip, #10
 800de32:	4621      	mov	r1, r4
 800de34:	f811 3b01 	ldrb.w	r3, [r1], #1
 800de38:	3b30      	subs	r3, #48	; 0x30
 800de3a:	2b09      	cmp	r3, #9
 800de3c:	d94e      	bls.n	800dedc <_vfiprintf_r+0x1c4>
 800de3e:	b1b0      	cbz	r0, 800de6e <_vfiprintf_r+0x156>
 800de40:	9207      	str	r2, [sp, #28]
 800de42:	e014      	b.n	800de6e <_vfiprintf_r+0x156>
 800de44:	eba0 0308 	sub.w	r3, r0, r8
 800de48:	fa09 f303 	lsl.w	r3, r9, r3
 800de4c:	4313      	orrs	r3, r2
 800de4e:	9304      	str	r3, [sp, #16]
 800de50:	46a2      	mov	sl, r4
 800de52:	e7d2      	b.n	800ddfa <_vfiprintf_r+0xe2>
 800de54:	9b03      	ldr	r3, [sp, #12]
 800de56:	1d19      	adds	r1, r3, #4
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	9103      	str	r1, [sp, #12]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	bfbb      	ittet	lt
 800de60:	425b      	neglt	r3, r3
 800de62:	f042 0202 	orrlt.w	r2, r2, #2
 800de66:	9307      	strge	r3, [sp, #28]
 800de68:	9307      	strlt	r3, [sp, #28]
 800de6a:	bfb8      	it	lt
 800de6c:	9204      	strlt	r2, [sp, #16]
 800de6e:	7823      	ldrb	r3, [r4, #0]
 800de70:	2b2e      	cmp	r3, #46	; 0x2e
 800de72:	d10c      	bne.n	800de8e <_vfiprintf_r+0x176>
 800de74:	7863      	ldrb	r3, [r4, #1]
 800de76:	2b2a      	cmp	r3, #42	; 0x2a
 800de78:	d135      	bne.n	800dee6 <_vfiprintf_r+0x1ce>
 800de7a:	9b03      	ldr	r3, [sp, #12]
 800de7c:	1d1a      	adds	r2, r3, #4
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	9203      	str	r2, [sp, #12]
 800de82:	2b00      	cmp	r3, #0
 800de84:	bfb8      	it	lt
 800de86:	f04f 33ff 	movlt.w	r3, #4294967295
 800de8a:	3402      	adds	r4, #2
 800de8c:	9305      	str	r3, [sp, #20]
 800de8e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800df74 <_vfiprintf_r+0x25c>
 800de92:	7821      	ldrb	r1, [r4, #0]
 800de94:	2203      	movs	r2, #3
 800de96:	4650      	mov	r0, sl
 800de98:	f7f2 f9a2 	bl	80001e0 <memchr>
 800de9c:	b140      	cbz	r0, 800deb0 <_vfiprintf_r+0x198>
 800de9e:	2340      	movs	r3, #64	; 0x40
 800dea0:	eba0 000a 	sub.w	r0, r0, sl
 800dea4:	fa03 f000 	lsl.w	r0, r3, r0
 800dea8:	9b04      	ldr	r3, [sp, #16]
 800deaa:	4303      	orrs	r3, r0
 800deac:	3401      	adds	r4, #1
 800deae:	9304      	str	r3, [sp, #16]
 800deb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800deb4:	482c      	ldr	r0, [pc, #176]	; (800df68 <_vfiprintf_r+0x250>)
 800deb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800deba:	2206      	movs	r2, #6
 800debc:	f7f2 f990 	bl	80001e0 <memchr>
 800dec0:	2800      	cmp	r0, #0
 800dec2:	d03f      	beq.n	800df44 <_vfiprintf_r+0x22c>
 800dec4:	4b29      	ldr	r3, [pc, #164]	; (800df6c <_vfiprintf_r+0x254>)
 800dec6:	bb1b      	cbnz	r3, 800df10 <_vfiprintf_r+0x1f8>
 800dec8:	9b03      	ldr	r3, [sp, #12]
 800deca:	3307      	adds	r3, #7
 800decc:	f023 0307 	bic.w	r3, r3, #7
 800ded0:	3308      	adds	r3, #8
 800ded2:	9303      	str	r3, [sp, #12]
 800ded4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ded6:	443b      	add	r3, r7
 800ded8:	9309      	str	r3, [sp, #36]	; 0x24
 800deda:	e767      	b.n	800ddac <_vfiprintf_r+0x94>
 800dedc:	fb0c 3202 	mla	r2, ip, r2, r3
 800dee0:	460c      	mov	r4, r1
 800dee2:	2001      	movs	r0, #1
 800dee4:	e7a5      	b.n	800de32 <_vfiprintf_r+0x11a>
 800dee6:	2300      	movs	r3, #0
 800dee8:	3401      	adds	r4, #1
 800deea:	9305      	str	r3, [sp, #20]
 800deec:	4619      	mov	r1, r3
 800deee:	f04f 0c0a 	mov.w	ip, #10
 800def2:	4620      	mov	r0, r4
 800def4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800def8:	3a30      	subs	r2, #48	; 0x30
 800defa:	2a09      	cmp	r2, #9
 800defc:	d903      	bls.n	800df06 <_vfiprintf_r+0x1ee>
 800defe:	2b00      	cmp	r3, #0
 800df00:	d0c5      	beq.n	800de8e <_vfiprintf_r+0x176>
 800df02:	9105      	str	r1, [sp, #20]
 800df04:	e7c3      	b.n	800de8e <_vfiprintf_r+0x176>
 800df06:	fb0c 2101 	mla	r1, ip, r1, r2
 800df0a:	4604      	mov	r4, r0
 800df0c:	2301      	movs	r3, #1
 800df0e:	e7f0      	b.n	800def2 <_vfiprintf_r+0x1da>
 800df10:	ab03      	add	r3, sp, #12
 800df12:	9300      	str	r3, [sp, #0]
 800df14:	462a      	mov	r2, r5
 800df16:	4b16      	ldr	r3, [pc, #88]	; (800df70 <_vfiprintf_r+0x258>)
 800df18:	a904      	add	r1, sp, #16
 800df1a:	4630      	mov	r0, r6
 800df1c:	f7fb fd9c 	bl	8009a58 <_printf_float>
 800df20:	4607      	mov	r7, r0
 800df22:	1c78      	adds	r0, r7, #1
 800df24:	d1d6      	bne.n	800ded4 <_vfiprintf_r+0x1bc>
 800df26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800df28:	07d9      	lsls	r1, r3, #31
 800df2a:	d405      	bmi.n	800df38 <_vfiprintf_r+0x220>
 800df2c:	89ab      	ldrh	r3, [r5, #12]
 800df2e:	059a      	lsls	r2, r3, #22
 800df30:	d402      	bmi.n	800df38 <_vfiprintf_r+0x220>
 800df32:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800df34:	f7fe ff32 	bl	800cd9c <__retarget_lock_release_recursive>
 800df38:	89ab      	ldrh	r3, [r5, #12]
 800df3a:	065b      	lsls	r3, r3, #25
 800df3c:	f53f af12 	bmi.w	800dd64 <_vfiprintf_r+0x4c>
 800df40:	9809      	ldr	r0, [sp, #36]	; 0x24
 800df42:	e711      	b.n	800dd68 <_vfiprintf_r+0x50>
 800df44:	ab03      	add	r3, sp, #12
 800df46:	9300      	str	r3, [sp, #0]
 800df48:	462a      	mov	r2, r5
 800df4a:	4b09      	ldr	r3, [pc, #36]	; (800df70 <_vfiprintf_r+0x258>)
 800df4c:	a904      	add	r1, sp, #16
 800df4e:	4630      	mov	r0, r6
 800df50:	f7fc f826 	bl	8009fa0 <_printf_i>
 800df54:	e7e4      	b.n	800df20 <_vfiprintf_r+0x208>
 800df56:	bf00      	nop
 800df58:	0800e74c 	.word	0x0800e74c
 800df5c:	0800e76c 	.word	0x0800e76c
 800df60:	0800e72c 	.word	0x0800e72c
 800df64:	0800e964 	.word	0x0800e964
 800df68:	0800e96e 	.word	0x0800e96e
 800df6c:	08009a59 	.word	0x08009a59
 800df70:	0800dcf3 	.word	0x0800dcf3
 800df74:	0800e96a 	.word	0x0800e96a

0800df78 <nan>:
 800df78:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800df80 <nan+0x8>
 800df7c:	4770      	bx	lr
 800df7e:	bf00      	nop
 800df80:	00000000 	.word	0x00000000
 800df84:	7ff80000 	.word	0x7ff80000

0800df88 <_sbrk_r>:
 800df88:	b538      	push	{r3, r4, r5, lr}
 800df8a:	4d06      	ldr	r5, [pc, #24]	; (800dfa4 <_sbrk_r+0x1c>)
 800df8c:	2300      	movs	r3, #0
 800df8e:	4604      	mov	r4, r0
 800df90:	4608      	mov	r0, r1
 800df92:	602b      	str	r3, [r5, #0]
 800df94:	f7f4 fb5a 	bl	800264c <_sbrk>
 800df98:	1c43      	adds	r3, r0, #1
 800df9a:	d102      	bne.n	800dfa2 <_sbrk_r+0x1a>
 800df9c:	682b      	ldr	r3, [r5, #0]
 800df9e:	b103      	cbz	r3, 800dfa2 <_sbrk_r+0x1a>
 800dfa0:	6023      	str	r3, [r4, #0]
 800dfa2:	bd38      	pop	{r3, r4, r5, pc}
 800dfa4:	20000564 	.word	0x20000564

0800dfa8 <__sread>:
 800dfa8:	b510      	push	{r4, lr}
 800dfaa:	460c      	mov	r4, r1
 800dfac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dfb0:	f000 f93a 	bl	800e228 <_read_r>
 800dfb4:	2800      	cmp	r0, #0
 800dfb6:	bfab      	itete	ge
 800dfb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dfba:	89a3      	ldrhlt	r3, [r4, #12]
 800dfbc:	181b      	addge	r3, r3, r0
 800dfbe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dfc2:	bfac      	ite	ge
 800dfc4:	6563      	strge	r3, [r4, #84]	; 0x54
 800dfc6:	81a3      	strhlt	r3, [r4, #12]
 800dfc8:	bd10      	pop	{r4, pc}

0800dfca <__swrite>:
 800dfca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfce:	461f      	mov	r7, r3
 800dfd0:	898b      	ldrh	r3, [r1, #12]
 800dfd2:	05db      	lsls	r3, r3, #23
 800dfd4:	4605      	mov	r5, r0
 800dfd6:	460c      	mov	r4, r1
 800dfd8:	4616      	mov	r6, r2
 800dfda:	d505      	bpl.n	800dfe8 <__swrite+0x1e>
 800dfdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dfe0:	2302      	movs	r3, #2
 800dfe2:	2200      	movs	r2, #0
 800dfe4:	f000 f8b8 	bl	800e158 <_lseek_r>
 800dfe8:	89a3      	ldrh	r3, [r4, #12]
 800dfea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dfee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dff2:	81a3      	strh	r3, [r4, #12]
 800dff4:	4632      	mov	r2, r6
 800dff6:	463b      	mov	r3, r7
 800dff8:	4628      	mov	r0, r5
 800dffa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dffe:	f000 b837 	b.w	800e070 <_write_r>

0800e002 <__sseek>:
 800e002:	b510      	push	{r4, lr}
 800e004:	460c      	mov	r4, r1
 800e006:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e00a:	f000 f8a5 	bl	800e158 <_lseek_r>
 800e00e:	1c43      	adds	r3, r0, #1
 800e010:	89a3      	ldrh	r3, [r4, #12]
 800e012:	bf15      	itete	ne
 800e014:	6560      	strne	r0, [r4, #84]	; 0x54
 800e016:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e01a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e01e:	81a3      	strheq	r3, [r4, #12]
 800e020:	bf18      	it	ne
 800e022:	81a3      	strhne	r3, [r4, #12]
 800e024:	bd10      	pop	{r4, pc}

0800e026 <__sclose>:
 800e026:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e02a:	f000 b851 	b.w	800e0d0 <_close_r>

0800e02e <strncmp>:
 800e02e:	b510      	push	{r4, lr}
 800e030:	b17a      	cbz	r2, 800e052 <strncmp+0x24>
 800e032:	4603      	mov	r3, r0
 800e034:	3901      	subs	r1, #1
 800e036:	1884      	adds	r4, r0, r2
 800e038:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e03c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e040:	4290      	cmp	r0, r2
 800e042:	d101      	bne.n	800e048 <strncmp+0x1a>
 800e044:	42a3      	cmp	r3, r4
 800e046:	d101      	bne.n	800e04c <strncmp+0x1e>
 800e048:	1a80      	subs	r0, r0, r2
 800e04a:	bd10      	pop	{r4, pc}
 800e04c:	2800      	cmp	r0, #0
 800e04e:	d1f3      	bne.n	800e038 <strncmp+0xa>
 800e050:	e7fa      	b.n	800e048 <strncmp+0x1a>
 800e052:	4610      	mov	r0, r2
 800e054:	e7f9      	b.n	800e04a <strncmp+0x1c>

0800e056 <__ascii_wctomb>:
 800e056:	b149      	cbz	r1, 800e06c <__ascii_wctomb+0x16>
 800e058:	2aff      	cmp	r2, #255	; 0xff
 800e05a:	bf85      	ittet	hi
 800e05c:	238a      	movhi	r3, #138	; 0x8a
 800e05e:	6003      	strhi	r3, [r0, #0]
 800e060:	700a      	strbls	r2, [r1, #0]
 800e062:	f04f 30ff 	movhi.w	r0, #4294967295
 800e066:	bf98      	it	ls
 800e068:	2001      	movls	r0, #1
 800e06a:	4770      	bx	lr
 800e06c:	4608      	mov	r0, r1
 800e06e:	4770      	bx	lr

0800e070 <_write_r>:
 800e070:	b538      	push	{r3, r4, r5, lr}
 800e072:	4d07      	ldr	r5, [pc, #28]	; (800e090 <_write_r+0x20>)
 800e074:	4604      	mov	r4, r0
 800e076:	4608      	mov	r0, r1
 800e078:	4611      	mov	r1, r2
 800e07a:	2200      	movs	r2, #0
 800e07c:	602a      	str	r2, [r5, #0]
 800e07e:	461a      	mov	r2, r3
 800e080:	f7f2 ffba 	bl	8000ff8 <_write>
 800e084:	1c43      	adds	r3, r0, #1
 800e086:	d102      	bne.n	800e08e <_write_r+0x1e>
 800e088:	682b      	ldr	r3, [r5, #0]
 800e08a:	b103      	cbz	r3, 800e08e <_write_r+0x1e>
 800e08c:	6023      	str	r3, [r4, #0]
 800e08e:	bd38      	pop	{r3, r4, r5, pc}
 800e090:	20000564 	.word	0x20000564

0800e094 <__assert_func>:
 800e094:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e096:	4614      	mov	r4, r2
 800e098:	461a      	mov	r2, r3
 800e09a:	4b09      	ldr	r3, [pc, #36]	; (800e0c0 <__assert_func+0x2c>)
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	4605      	mov	r5, r0
 800e0a0:	68d8      	ldr	r0, [r3, #12]
 800e0a2:	b14c      	cbz	r4, 800e0b8 <__assert_func+0x24>
 800e0a4:	4b07      	ldr	r3, [pc, #28]	; (800e0c4 <__assert_func+0x30>)
 800e0a6:	9100      	str	r1, [sp, #0]
 800e0a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e0ac:	4906      	ldr	r1, [pc, #24]	; (800e0c8 <__assert_func+0x34>)
 800e0ae:	462b      	mov	r3, r5
 800e0b0:	f000 f81e 	bl	800e0f0 <fiprintf>
 800e0b4:	f000 f8ca 	bl	800e24c <abort>
 800e0b8:	4b04      	ldr	r3, [pc, #16]	; (800e0cc <__assert_func+0x38>)
 800e0ba:	461c      	mov	r4, r3
 800e0bc:	e7f3      	b.n	800e0a6 <__assert_func+0x12>
 800e0be:	bf00      	nop
 800e0c0:	200000a4 	.word	0x200000a4
 800e0c4:	0800e975 	.word	0x0800e975
 800e0c8:	0800e982 	.word	0x0800e982
 800e0cc:	0800e9b0 	.word	0x0800e9b0

0800e0d0 <_close_r>:
 800e0d0:	b538      	push	{r3, r4, r5, lr}
 800e0d2:	4d06      	ldr	r5, [pc, #24]	; (800e0ec <_close_r+0x1c>)
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	4604      	mov	r4, r0
 800e0d8:	4608      	mov	r0, r1
 800e0da:	602b      	str	r3, [r5, #0]
 800e0dc:	f7f4 fa81 	bl	80025e2 <_close>
 800e0e0:	1c43      	adds	r3, r0, #1
 800e0e2:	d102      	bne.n	800e0ea <_close_r+0x1a>
 800e0e4:	682b      	ldr	r3, [r5, #0]
 800e0e6:	b103      	cbz	r3, 800e0ea <_close_r+0x1a>
 800e0e8:	6023      	str	r3, [r4, #0]
 800e0ea:	bd38      	pop	{r3, r4, r5, pc}
 800e0ec:	20000564 	.word	0x20000564

0800e0f0 <fiprintf>:
 800e0f0:	b40e      	push	{r1, r2, r3}
 800e0f2:	b503      	push	{r0, r1, lr}
 800e0f4:	4601      	mov	r1, r0
 800e0f6:	ab03      	add	r3, sp, #12
 800e0f8:	4805      	ldr	r0, [pc, #20]	; (800e110 <fiprintf+0x20>)
 800e0fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800e0fe:	6800      	ldr	r0, [r0, #0]
 800e100:	9301      	str	r3, [sp, #4]
 800e102:	f7ff fe09 	bl	800dd18 <_vfiprintf_r>
 800e106:	b002      	add	sp, #8
 800e108:	f85d eb04 	ldr.w	lr, [sp], #4
 800e10c:	b003      	add	sp, #12
 800e10e:	4770      	bx	lr
 800e110:	200000a4 	.word	0x200000a4

0800e114 <_fstat_r>:
 800e114:	b538      	push	{r3, r4, r5, lr}
 800e116:	4d07      	ldr	r5, [pc, #28]	; (800e134 <_fstat_r+0x20>)
 800e118:	2300      	movs	r3, #0
 800e11a:	4604      	mov	r4, r0
 800e11c:	4608      	mov	r0, r1
 800e11e:	4611      	mov	r1, r2
 800e120:	602b      	str	r3, [r5, #0]
 800e122:	f7f4 fa6a 	bl	80025fa <_fstat>
 800e126:	1c43      	adds	r3, r0, #1
 800e128:	d102      	bne.n	800e130 <_fstat_r+0x1c>
 800e12a:	682b      	ldr	r3, [r5, #0]
 800e12c:	b103      	cbz	r3, 800e130 <_fstat_r+0x1c>
 800e12e:	6023      	str	r3, [r4, #0]
 800e130:	bd38      	pop	{r3, r4, r5, pc}
 800e132:	bf00      	nop
 800e134:	20000564 	.word	0x20000564

0800e138 <_isatty_r>:
 800e138:	b538      	push	{r3, r4, r5, lr}
 800e13a:	4d06      	ldr	r5, [pc, #24]	; (800e154 <_isatty_r+0x1c>)
 800e13c:	2300      	movs	r3, #0
 800e13e:	4604      	mov	r4, r0
 800e140:	4608      	mov	r0, r1
 800e142:	602b      	str	r3, [r5, #0]
 800e144:	f7f4 fa69 	bl	800261a <_isatty>
 800e148:	1c43      	adds	r3, r0, #1
 800e14a:	d102      	bne.n	800e152 <_isatty_r+0x1a>
 800e14c:	682b      	ldr	r3, [r5, #0]
 800e14e:	b103      	cbz	r3, 800e152 <_isatty_r+0x1a>
 800e150:	6023      	str	r3, [r4, #0]
 800e152:	bd38      	pop	{r3, r4, r5, pc}
 800e154:	20000564 	.word	0x20000564

0800e158 <_lseek_r>:
 800e158:	b538      	push	{r3, r4, r5, lr}
 800e15a:	4d07      	ldr	r5, [pc, #28]	; (800e178 <_lseek_r+0x20>)
 800e15c:	4604      	mov	r4, r0
 800e15e:	4608      	mov	r0, r1
 800e160:	4611      	mov	r1, r2
 800e162:	2200      	movs	r2, #0
 800e164:	602a      	str	r2, [r5, #0]
 800e166:	461a      	mov	r2, r3
 800e168:	f7f4 fa62 	bl	8002630 <_lseek>
 800e16c:	1c43      	adds	r3, r0, #1
 800e16e:	d102      	bne.n	800e176 <_lseek_r+0x1e>
 800e170:	682b      	ldr	r3, [r5, #0]
 800e172:	b103      	cbz	r3, 800e176 <_lseek_r+0x1e>
 800e174:	6023      	str	r3, [r4, #0]
 800e176:	bd38      	pop	{r3, r4, r5, pc}
 800e178:	20000564 	.word	0x20000564

0800e17c <memmove>:
 800e17c:	4288      	cmp	r0, r1
 800e17e:	b510      	push	{r4, lr}
 800e180:	eb01 0402 	add.w	r4, r1, r2
 800e184:	d902      	bls.n	800e18c <memmove+0x10>
 800e186:	4284      	cmp	r4, r0
 800e188:	4623      	mov	r3, r4
 800e18a:	d807      	bhi.n	800e19c <memmove+0x20>
 800e18c:	1e43      	subs	r3, r0, #1
 800e18e:	42a1      	cmp	r1, r4
 800e190:	d008      	beq.n	800e1a4 <memmove+0x28>
 800e192:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e196:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e19a:	e7f8      	b.n	800e18e <memmove+0x12>
 800e19c:	4402      	add	r2, r0
 800e19e:	4601      	mov	r1, r0
 800e1a0:	428a      	cmp	r2, r1
 800e1a2:	d100      	bne.n	800e1a6 <memmove+0x2a>
 800e1a4:	bd10      	pop	{r4, pc}
 800e1a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e1aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e1ae:	e7f7      	b.n	800e1a0 <memmove+0x24>

0800e1b0 <__malloc_lock>:
 800e1b0:	4801      	ldr	r0, [pc, #4]	; (800e1b8 <__malloc_lock+0x8>)
 800e1b2:	f7fe bdf2 	b.w	800cd9a <__retarget_lock_acquire_recursive>
 800e1b6:	bf00      	nop
 800e1b8:	20000558 	.word	0x20000558

0800e1bc <__malloc_unlock>:
 800e1bc:	4801      	ldr	r0, [pc, #4]	; (800e1c4 <__malloc_unlock+0x8>)
 800e1be:	f7fe bded 	b.w	800cd9c <__retarget_lock_release_recursive>
 800e1c2:	bf00      	nop
 800e1c4:	20000558 	.word	0x20000558

0800e1c8 <_realloc_r>:
 800e1c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1cc:	4680      	mov	r8, r0
 800e1ce:	4614      	mov	r4, r2
 800e1d0:	460e      	mov	r6, r1
 800e1d2:	b921      	cbnz	r1, 800e1de <_realloc_r+0x16>
 800e1d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e1d8:	4611      	mov	r1, r2
 800e1da:	f7ff bba3 	b.w	800d924 <_malloc_r>
 800e1de:	b92a      	cbnz	r2, 800e1ec <_realloc_r+0x24>
 800e1e0:	f7ff fb34 	bl	800d84c <_free_r>
 800e1e4:	4625      	mov	r5, r4
 800e1e6:	4628      	mov	r0, r5
 800e1e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1ec:	f000 f835 	bl	800e25a <_malloc_usable_size_r>
 800e1f0:	4284      	cmp	r4, r0
 800e1f2:	4607      	mov	r7, r0
 800e1f4:	d802      	bhi.n	800e1fc <_realloc_r+0x34>
 800e1f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e1fa:	d812      	bhi.n	800e222 <_realloc_r+0x5a>
 800e1fc:	4621      	mov	r1, r4
 800e1fe:	4640      	mov	r0, r8
 800e200:	f7ff fb90 	bl	800d924 <_malloc_r>
 800e204:	4605      	mov	r5, r0
 800e206:	2800      	cmp	r0, #0
 800e208:	d0ed      	beq.n	800e1e6 <_realloc_r+0x1e>
 800e20a:	42bc      	cmp	r4, r7
 800e20c:	4622      	mov	r2, r4
 800e20e:	4631      	mov	r1, r6
 800e210:	bf28      	it	cs
 800e212:	463a      	movcs	r2, r7
 800e214:	f7fb fb6a 	bl	80098ec <memcpy>
 800e218:	4631      	mov	r1, r6
 800e21a:	4640      	mov	r0, r8
 800e21c:	f7ff fb16 	bl	800d84c <_free_r>
 800e220:	e7e1      	b.n	800e1e6 <_realloc_r+0x1e>
 800e222:	4635      	mov	r5, r6
 800e224:	e7df      	b.n	800e1e6 <_realloc_r+0x1e>
	...

0800e228 <_read_r>:
 800e228:	b538      	push	{r3, r4, r5, lr}
 800e22a:	4d07      	ldr	r5, [pc, #28]	; (800e248 <_read_r+0x20>)
 800e22c:	4604      	mov	r4, r0
 800e22e:	4608      	mov	r0, r1
 800e230:	4611      	mov	r1, r2
 800e232:	2200      	movs	r2, #0
 800e234:	602a      	str	r2, [r5, #0]
 800e236:	461a      	mov	r2, r3
 800e238:	f7f4 f9b6 	bl	80025a8 <_read>
 800e23c:	1c43      	adds	r3, r0, #1
 800e23e:	d102      	bne.n	800e246 <_read_r+0x1e>
 800e240:	682b      	ldr	r3, [r5, #0]
 800e242:	b103      	cbz	r3, 800e246 <_read_r+0x1e>
 800e244:	6023      	str	r3, [r4, #0]
 800e246:	bd38      	pop	{r3, r4, r5, pc}
 800e248:	20000564 	.word	0x20000564

0800e24c <abort>:
 800e24c:	b508      	push	{r3, lr}
 800e24e:	2006      	movs	r0, #6
 800e250:	f000 f834 	bl	800e2bc <raise>
 800e254:	2001      	movs	r0, #1
 800e256:	f7f4 f99d 	bl	8002594 <_exit>

0800e25a <_malloc_usable_size_r>:
 800e25a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e25e:	1f18      	subs	r0, r3, #4
 800e260:	2b00      	cmp	r3, #0
 800e262:	bfbc      	itt	lt
 800e264:	580b      	ldrlt	r3, [r1, r0]
 800e266:	18c0      	addlt	r0, r0, r3
 800e268:	4770      	bx	lr

0800e26a <_raise_r>:
 800e26a:	291f      	cmp	r1, #31
 800e26c:	b538      	push	{r3, r4, r5, lr}
 800e26e:	4604      	mov	r4, r0
 800e270:	460d      	mov	r5, r1
 800e272:	d904      	bls.n	800e27e <_raise_r+0x14>
 800e274:	2316      	movs	r3, #22
 800e276:	6003      	str	r3, [r0, #0]
 800e278:	f04f 30ff 	mov.w	r0, #4294967295
 800e27c:	bd38      	pop	{r3, r4, r5, pc}
 800e27e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e280:	b112      	cbz	r2, 800e288 <_raise_r+0x1e>
 800e282:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e286:	b94b      	cbnz	r3, 800e29c <_raise_r+0x32>
 800e288:	4620      	mov	r0, r4
 800e28a:	f000 f831 	bl	800e2f0 <_getpid_r>
 800e28e:	462a      	mov	r2, r5
 800e290:	4601      	mov	r1, r0
 800e292:	4620      	mov	r0, r4
 800e294:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e298:	f000 b818 	b.w	800e2cc <_kill_r>
 800e29c:	2b01      	cmp	r3, #1
 800e29e:	d00a      	beq.n	800e2b6 <_raise_r+0x4c>
 800e2a0:	1c59      	adds	r1, r3, #1
 800e2a2:	d103      	bne.n	800e2ac <_raise_r+0x42>
 800e2a4:	2316      	movs	r3, #22
 800e2a6:	6003      	str	r3, [r0, #0]
 800e2a8:	2001      	movs	r0, #1
 800e2aa:	e7e7      	b.n	800e27c <_raise_r+0x12>
 800e2ac:	2400      	movs	r4, #0
 800e2ae:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e2b2:	4628      	mov	r0, r5
 800e2b4:	4798      	blx	r3
 800e2b6:	2000      	movs	r0, #0
 800e2b8:	e7e0      	b.n	800e27c <_raise_r+0x12>
	...

0800e2bc <raise>:
 800e2bc:	4b02      	ldr	r3, [pc, #8]	; (800e2c8 <raise+0xc>)
 800e2be:	4601      	mov	r1, r0
 800e2c0:	6818      	ldr	r0, [r3, #0]
 800e2c2:	f7ff bfd2 	b.w	800e26a <_raise_r>
 800e2c6:	bf00      	nop
 800e2c8:	200000a4 	.word	0x200000a4

0800e2cc <_kill_r>:
 800e2cc:	b538      	push	{r3, r4, r5, lr}
 800e2ce:	4d07      	ldr	r5, [pc, #28]	; (800e2ec <_kill_r+0x20>)
 800e2d0:	2300      	movs	r3, #0
 800e2d2:	4604      	mov	r4, r0
 800e2d4:	4608      	mov	r0, r1
 800e2d6:	4611      	mov	r1, r2
 800e2d8:	602b      	str	r3, [r5, #0]
 800e2da:	f7f4 f94b 	bl	8002574 <_kill>
 800e2de:	1c43      	adds	r3, r0, #1
 800e2e0:	d102      	bne.n	800e2e8 <_kill_r+0x1c>
 800e2e2:	682b      	ldr	r3, [r5, #0]
 800e2e4:	b103      	cbz	r3, 800e2e8 <_kill_r+0x1c>
 800e2e6:	6023      	str	r3, [r4, #0]
 800e2e8:	bd38      	pop	{r3, r4, r5, pc}
 800e2ea:	bf00      	nop
 800e2ec:	20000564 	.word	0x20000564

0800e2f0 <_getpid_r>:
 800e2f0:	f7f4 b938 	b.w	8002564 <_getpid>

0800e2f4 <_init>:
 800e2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2f6:	bf00      	nop
 800e2f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2fa:	bc08      	pop	{r3}
 800e2fc:	469e      	mov	lr, r3
 800e2fe:	4770      	bx	lr

0800e300 <_fini>:
 800e300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e302:	bf00      	nop
 800e304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e306:	bc08      	pop	{r3}
 800e308:	469e      	mov	lr, r3
 800e30a:	4770      	bx	lr
