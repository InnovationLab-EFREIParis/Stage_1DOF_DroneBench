
1DOF_Bench.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bcdc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000059c  0800be70  0800be70  0001be70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c40c  0800c40c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c40c  0800c40c  0001c40c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c414  0800c414  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c414  0800c414  0001c414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c418  0800c418  0001c418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800c41c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  200001e0  0800c5fc  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a0  0800c5fc  000203a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d193  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fe7  00000000  00000000  0003d3a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001428  00000000  00000000  00040390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001300  00000000  00000000  000417b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b178  00000000  00000000  00042ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017622  00000000  00000000  0006dc30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010a287  00000000  00000000  00085252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018f4d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b2c  00000000  00000000  0018f52c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800be54 	.word	0x0800be54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800be54 	.word	0x0800be54

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fee:	b09b      	sub	sp, #108	; 0x6c
 8000ff0:	af16      	add	r7, sp, #88	; 0x58
	/* USER CODE BEGIN 1 */
	enum states etat;
	etat = init_uc;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	73fb      	strb	r3, [r7, #15]

	int val;


	//char buffer [size];
	int k = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	607b      	str	r3, [r7, #4]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000ffa:	f000 fe2b 	bl	8001c54 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000ffe:	f000 f8f3 	bl	80011e8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001002:	f000 fa7f 	bl	8001504 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8001006:	f000 fa2f 	bl	8001468 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 800100a:	f000 f93f 	bl	800128c <MX_ADC1_Init>
	MX_DMA_Init();
 800100e:	f000 fa5b 	bl	80014c8 <MX_DMA_Init>
	MX_TIM3_Init();
 8001012:	f000 f9b1 	bl	8001378 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	// Light up green led
	setGreenLed();
 8001016:	f000 fae0 	bl	80015da <setGreenLed>
	// blink green led
	blinkGreenLed(10, 100);
 800101a:	2164      	movs	r1, #100	; 0x64
 800101c:	200a      	movs	r0, #10
 800101e:	f000 fae6 	bl	80015ee <blinkGreenLed>
	// Welcome message on UART
	printf("Hello from main\r\n");
 8001022:	4865      	ldr	r0, [pc, #404]	; (80011b8 <main+0x1cc>)
 8001024:	f007 f970 	bl	8008308 <puts>
	//sendWelcomeMsgRS232(&huart2);
	//la fonction au dessus pose des soucis
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001028:	2104      	movs	r1, #4
 800102a:	4864      	ldr	r0, [pc, #400]	; (80011bc <main+0x1d0>)
 800102c:	f004 fb4a 	bl	80056c4 <HAL_TIM_PWM_Start>
	//NOus mettons ici la valeur minimale pour emettre un signal vers notre ESC dans notre registre capture and compare register

	TIM3->CCR2 = valeur_min_moteur;
 8001030:	4b63      	ldr	r3, [pc, #396]	; (80011c0 <main+0x1d4>)
 8001032:	f44f 62bd 	mov.w	r2, #1512	; 0x5e8
 8001036:	639a      	str	r2, [r3, #56]	; 0x38
	y_print(&huart2, " 0 to 6 to change state \r\n", 26);
 8001038:	221a      	movs	r2, #26
 800103a:	4962      	ldr	r1, [pc, #392]	; (80011c4 <main+0x1d8>)
 800103c:	4862      	ldr	r0, [pc, #392]	; (80011c8 <main+0x1dc>)
 800103e:	f000 fdc8 	bl	8001bd2 <y_print>
	HAL_Delay(5000);
 8001042:	f241 3088 	movw	r0, #5000	; 0x1388
 8001046:	f000 fe81 	bl	8001d4c <HAL_Delay>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		__HAL_UART_CLEAR_OREFLAG(&huart2);
 800104a:	4b5f      	ldr	r3, [pc, #380]	; (80011c8 <main+0x1dc>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2208      	movs	r2, #8
 8001050:	621a      	str	r2, [r3, #32]

		//differents etats qu'on peut avoir
		//idle_mode,init_uc,init_motor,motor_ready,manual_mode,auto_mode,info_mode
		val = load_adc(hadc1, 5);
 8001052:	4c5e      	ldr	r4, [pc, #376]	; (80011cc <main+0x1e0>)
 8001054:	2305      	movs	r3, #5
 8001056:	9315      	str	r3, [sp, #84]	; 0x54
 8001058:	4668      	mov	r0, sp
 800105a:	f104 0310 	add.w	r3, r4, #16
 800105e:	2254      	movs	r2, #84	; 0x54
 8001060:	4619      	mov	r1, r3
 8001062:	f006 fa53 	bl	800750c <memcpy>
 8001066:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800106a:	f000 fd87 	bl	8001b7c <load_adc>
 800106e:	60b8      	str	r0, [r7, #8]
		if (val > 2025)
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	f240 72e9 	movw	r2, #2025	; 0x7e9
 8001076:	4293      	cmp	r3, r2
 8001078:	dd02      	ble.n	8001080 <main+0x94>
			val = 2025;
 800107a:	f240 73e9 	movw	r3, #2025	; 0x7e9
 800107e:	60bb      	str	r3, [r7, #8]
		//sprintf(valchar,"%d \n\r",val);
		load_pwm(htim3, val);
 8001080:	4e4e      	ldr	r6, [pc, #312]	; (80011bc <main+0x1d0>)
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	930f      	str	r3, [sp, #60]	; 0x3c
 8001086:	466d      	mov	r5, sp
 8001088:	f106 0410 	add.w	r4, r6, #16
 800108c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800108e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001090:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001092:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001094:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001096:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001098:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800109c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80010a0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80010a4:	f000 fd86 	bl	8001bb4 <load_pwm>
		//Error_Handler();
		//load_pwm(htim3, 1400);
		//HAL_Delay(1000);
		//---------changement d'etat-------

		switch (etat) {
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
 80010aa:	2b05      	cmp	r3, #5
 80010ac:	f200 8082 	bhi.w	80011b4 <main+0x1c8>
 80010b0:	a201      	add	r2, pc, #4	; (adr r2, 80010b8 <main+0xcc>)
 80010b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b6:	bf00      	nop
 80010b8:	080010d1 	.word	0x080010d1
 80010bc:	08001135 	.word	0x08001135
 80010c0:	08001155 	.word	0x08001155
 80010c4:	08001195 	.word	0x08001195
 80010c8:	08001175 	.word	0x08001175
 80010cc:	080010e5 	.word	0x080010e5
				case init_uc:
					//traitement des sorties
					/*if (HAL_UART_Transmit(&huart2, (uint8_t*) "UC Initialization \n\r", 22,
					 100) != HAL_OK)
					 Error_Handler();*/
					printf("Init Micro Controleur\r\n");
 80010d0:	483f      	ldr	r0, [pc, #252]	; (80011d0 <main+0x1e4>)
 80010d2:	f007 f919 	bl	8008308 <puts>
					HAL_Delay(3000);
 80010d6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80010da:	f000 fe37 	bl	8001d4c <HAL_Delay>
					//traitement des entrées (transitions)
					etat = info_mode;
 80010de:	2305      	movs	r3, #5
 80010e0:	73fb      	strb	r3, [r7, #15]
					break;
 80010e2:	e068      	b.n	80011b6 <main+0x1ca>

				case info_mode:
					//if (HAL_UART_Transmit(&huart2, (uint8_t*) "Info mode\n\r", 12, 100)
						//	!= HAL_OK)
						//Error_Handler();
					printf("Info mode\r\n");
 80010e4:	483b      	ldr	r0, [pc, #236]	; (80011d4 <main+0x1e8>)
 80010e6:	f007 f90f 	bl	8008308 <puts>
					HAL_Delay(3000);
 80010ea:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80010ee:	f000 fe2d 	bl	8001d4c <HAL_Delay>
					//sortie de la boucle
					do {
						__HAL_UART_CLEAR_OREFLAG(&huart2);
 80010f2:	4b35      	ldr	r3, [pc, #212]	; (80011c8 <main+0x1dc>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2208      	movs	r2, #8
 80010f8:	621a      	str	r2, [r3, #32]
						if (HAL_UART_Receive(&huart2, (uint8_t*) r_buffer, 2, 10)
 80010fa:	4639      	mov	r1, r7
 80010fc:	230a      	movs	r3, #10
 80010fe:	2202      	movs	r2, #2
 8001100:	4831      	ldr	r0, [pc, #196]	; (80011c8 <main+0x1dc>)
 8001102:	f005 fccd 	bl	8006aa0 <HAL_UART_Receive>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d10b      	bne.n	8001124 <main+0x138>
								== HAL_OK) {
							HAL_Delay(50);
 800110c:	2032      	movs	r0, #50	; 0x32
 800110e:	f000 fe1d 	bl	8001d4c <HAL_Delay>
							HAL_UART_Transmit(&huart2, (uint8_t*) r_buffer, 2, 10);
 8001112:	4639      	mov	r1, r7
 8001114:	230a      	movs	r3, #10
 8001116:	2202      	movs	r2, #2
 8001118:	482b      	ldr	r0, [pc, #172]	; (80011c8 <main+0x1dc>)
 800111a:	f005 fc2d 	bl	8006978 <HAL_UART_Transmit>
							HAL_Delay(50);
 800111e:	2032      	movs	r0, #50	; 0x32
 8001120:	f000 fe14 	bl	8001d4c <HAL_Delay>
						}

					} while (r_buffer[0] != '0');
 8001124:	783b      	ldrb	r3, [r7, #0]
 8001126:	2b30      	cmp	r3, #48	; 0x30
 8001128:	d1e3      	bne.n	80010f2 <main+0x106>

					etat = init_uc;
 800112a:	2300      	movs	r3, #0
 800112c:	73fb      	strb	r3, [r7, #15]
					// Reinitialisation du buffer
					r_buffer[0] = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	703b      	strb	r3, [r7, #0]
					//printf("%f");
					//le programme freeze dans l'etat info
					break;
 8001132:	e040      	b.n	80011b6 <main+0x1ca>

				case init_motor:
					if (HAL_UART_Transmit(&huart2,
 8001134:	2364      	movs	r3, #100	; 0x64
 8001136:	2218      	movs	r2, #24
 8001138:	4927      	ldr	r1, [pc, #156]	; (80011d8 <main+0x1ec>)
 800113a:	4823      	ldr	r0, [pc, #140]	; (80011c8 <main+0x1dc>)
 800113c:	f005 fc1c 	bl	8006978 <HAL_UART_Transmit>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <main+0x15e>
							(uint8_t*) "Motor Initialization \r\n", 24, 100) != HAL_OK)
						Error_Handler();
 8001146:	f000 fa43 	bl	80015d0 <Error_Handler>
					HAL_Delay(3000);
 800114a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800114e:	f000 fdfd 	bl	8001d4c <HAL_Delay>
					break;
 8001152:	e030      	b.n	80011b6 <main+0x1ca>

				case motor_ready:
					if (HAL_UART_Transmit(&huart2, (uint8_t*) "Motor ready \n\r", 15,
 8001154:	2364      	movs	r3, #100	; 0x64
 8001156:	220f      	movs	r2, #15
 8001158:	4920      	ldr	r1, [pc, #128]	; (80011dc <main+0x1f0>)
 800115a:	481b      	ldr	r0, [pc, #108]	; (80011c8 <main+0x1dc>)
 800115c:	f005 fc0c 	bl	8006978 <HAL_UART_Transmit>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <main+0x17e>
							100) != HAL_OK)
						Error_Handler();
 8001166:	f000 fa33 	bl	80015d0 <Error_Handler>
					HAL_Delay(3000);
 800116a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800116e:	f000 fded 	bl	8001d4c <HAL_Delay>

					break;
 8001172:	e020      	b.n	80011b6 <main+0x1ca>

				case auto_mode:
					if (HAL_UART_Transmit(&huart2, (uint8_t*) "Auto mode \n\r", 15, 100)
 8001174:	2364      	movs	r3, #100	; 0x64
 8001176:	220f      	movs	r2, #15
 8001178:	4919      	ldr	r1, [pc, #100]	; (80011e0 <main+0x1f4>)
 800117a:	4813      	ldr	r0, [pc, #76]	; (80011c8 <main+0x1dc>)
 800117c:	f005 fbfc 	bl	8006978 <HAL_UART_Transmit>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <main+0x19e>
							!= HAL_OK)
						Error_Handler();
 8001186:	f000 fa23 	bl	80015d0 <Error_Handler>
					HAL_Delay(3000);
 800118a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800118e:	f000 fddd 	bl	8001d4c <HAL_Delay>

					break;
 8001192:	e010      	b.n	80011b6 <main+0x1ca>

				case manual_mode:
					if (HAL_UART_Transmit(&huart2, (uint8_t*) "Manual mode \n\r", 15,
 8001194:	2364      	movs	r3, #100	; 0x64
 8001196:	220f      	movs	r2, #15
 8001198:	4912      	ldr	r1, [pc, #72]	; (80011e4 <main+0x1f8>)
 800119a:	480b      	ldr	r0, [pc, #44]	; (80011c8 <main+0x1dc>)
 800119c:	f005 fbec 	bl	8006978 <HAL_UART_Transmit>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <main+0x1be>
							100) != HAL_OK)
						Error_Handler();
 80011a6:	f000 fa13 	bl	80015d0 <Error_Handler>
					HAL_Delay(3000);
 80011aa:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80011ae:	f000 fdcd 	bl	8001d4c <HAL_Delay>

					break;
 80011b2:	e000      	b.n	80011b6 <main+0x1ca>
				default:
					break;
 80011b4:	bf00      	nop
		__HAL_UART_CLEAR_OREFLAG(&huart2);
 80011b6:	e748      	b.n	800104a <main+0x5e>
 80011b8:	0800be70 	.word	0x0800be70
 80011bc:	2000028c 	.word	0x2000028c
 80011c0:	40000400 	.word	0x40000400
 80011c4:	0800be84 	.word	0x0800be84
 80011c8:	20000208 	.word	0x20000208
 80011cc:	200002dc 	.word	0x200002dc
 80011d0:	0800bea0 	.word	0x0800bea0
 80011d4:	0800beb8 	.word	0x0800beb8
 80011d8:	0800bec4 	.word	0x0800bec4
 80011dc:	0800bedc 	.word	0x0800bedc
 80011e0:	0800beec 	.word	0x0800beec
 80011e4:	0800befc 	.word	0x0800befc

080011e8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b096      	sub	sp, #88	; 0x58
 80011ec:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	2244      	movs	r2, #68	; 0x44
 80011f4:	2100      	movs	r1, #0
 80011f6:	4618      	mov	r0, r3
 80011f8:	f006 f996 	bl	8007528 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80011fc:	463b      	mov	r3, r7
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	605a      	str	r2, [r3, #4]
 8001204:	609a      	str	r2, [r3, #8]
 8001206:	60da      	str	r2, [r3, #12]
 8001208:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 800120a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800120e:	f002 fea3 	bl	8003f58 <HAL_PWREx_ControlVoltageScaling>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 8001218:	f000 f9da 	bl	80015d0 <Error_Handler>
	}
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800121c:	2302      	movs	r3, #2
 800121e:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001220:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001224:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001226:	2310      	movs	r3, #16
 8001228:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800122a:	2302      	movs	r3, #2
 800122c:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800122e:	2302      	movs	r3, #2
 8001230:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8001232:	2301      	movs	r3, #1
 8001234:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 8001236:	230a      	movs	r3, #10
 8001238:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800123a:	2307      	movs	r3, #7
 800123c:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800123e:	2302      	movs	r3, #2
 8001240:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001242:	2302      	movs	r3, #2
 8001244:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001246:	f107 0314 	add.w	r3, r7, #20
 800124a:	4618      	mov	r0, r3
 800124c:	f002 feda 	bl	8004004 <HAL_RCC_OscConfig>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <SystemClock_Config+0x72>
		Error_Handler();
 8001256:	f000 f9bb 	bl	80015d0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800125a:	230f      	movs	r3, #15
 800125c:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800125e:	2303      	movs	r3, #3
 8001260:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001262:	2300      	movs	r3, #0
 8001264:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001266:	2300      	movs	r3, #0
 8001268:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800126a:	2300      	movs	r3, #0
 800126c:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 800126e:	463b      	mov	r3, r7
 8001270:	2104      	movs	r1, #4
 8001272:	4618      	mov	r0, r3
 8001274:	f003 faac 	bl	80047d0 <HAL_RCC_ClockConfig>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <SystemClock_Config+0x9a>
		Error_Handler();
 800127e:	f000 f9a7 	bl	80015d0 <Error_Handler>
	}
}
 8001282:	bf00      	nop
 8001284:	3758      	adds	r7, #88	; 0x58
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 800128c:	b580      	push	{r7, lr}
 800128e:	b08a      	sub	sp, #40	; 0x28
 8001290:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 8001292:	f107 031c 	add.w	r3, r7, #28
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 800129e:	1d3b      	adds	r3, r7, #4
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	611a      	str	r2, [r3, #16]
 80012ac:	615a      	str	r2, [r3, #20]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 80012ae:	4b2f      	ldr	r3, [pc, #188]	; (800136c <MX_ADC1_Init+0xe0>)
 80012b0:	4a2f      	ldr	r2, [pc, #188]	; (8001370 <MX_ADC1_Init+0xe4>)
 80012b2:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80012b4:	4b2d      	ldr	r3, [pc, #180]	; (800136c <MX_ADC1_Init+0xe0>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012ba:	4b2c      	ldr	r3, [pc, #176]	; (800136c <MX_ADC1_Init+0xe0>)
 80012bc:	2200      	movs	r2, #0
 80012be:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012c0:	4b2a      	ldr	r3, [pc, #168]	; (800136c <MX_ADC1_Init+0xe0>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012c6:	4b29      	ldr	r3, [pc, #164]	; (800136c <MX_ADC1_Init+0xe0>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012cc:	4b27      	ldr	r3, [pc, #156]	; (800136c <MX_ADC1_Init+0xe0>)
 80012ce:	2204      	movs	r2, #4
 80012d0:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 80012d2:	4b26      	ldr	r3, [pc, #152]	; (800136c <MX_ADC1_Init+0xe0>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80012d8:	4b24      	ldr	r3, [pc, #144]	; (800136c <MX_ADC1_Init+0xe0>)
 80012da:	2200      	movs	r2, #0
 80012dc:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 80012de:	4b23      	ldr	r3, [pc, #140]	; (800136c <MX_ADC1_Init+0xe0>)
 80012e0:	2201      	movs	r2, #1
 80012e2:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012e4:	4b21      	ldr	r3, [pc, #132]	; (800136c <MX_ADC1_Init+0xe0>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012ec:	4b1f      	ldr	r3, [pc, #124]	; (800136c <MX_ADC1_Init+0xe0>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012f2:	4b1e      	ldr	r3, [pc, #120]	; (800136c <MX_ADC1_Init+0xe0>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80012f8:	4b1c      	ldr	r3, [pc, #112]	; (800136c <MX_ADC1_Init+0xe0>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001300:	4b1a      	ldr	r3, [pc, #104]	; (800136c <MX_ADC1_Init+0xe0>)
 8001302:	2200      	movs	r2, #0
 8001304:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 8001306:	4b19      	ldr	r3, [pc, #100]	; (800136c <MX_ADC1_Init+0xe0>)
 8001308:	2200      	movs	r2, #0
 800130a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800130e:	4817      	ldr	r0, [pc, #92]	; (800136c <MX_ADC1_Init+0xe0>)
 8001310:	f000 ff36 	bl	8002180 <HAL_ADC_Init>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_ADC1_Init+0x92>
		Error_Handler();
 800131a:	f000 f959 	bl	80015d0 <Error_Handler>
	}
	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 800131e:	2300      	movs	r3, #0
 8001320:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8001322:	f107 031c 	add.w	r3, r7, #28
 8001326:	4619      	mov	r1, r3
 8001328:	4810      	ldr	r0, [pc, #64]	; (800136c <MX_ADC1_Init+0xe0>)
 800132a:	f002 f901 	bl	8003530 <HAL_ADCEx_MultiModeConfigChannel>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_ADC1_Init+0xac>
		Error_Handler();
 8001334:	f000 f94c 	bl	80015d0 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 8001338:	4b0e      	ldr	r3, [pc, #56]	; (8001374 <MX_ADC1_Init+0xe8>)
 800133a:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800133c:	2306      	movs	r3, #6
 800133e:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001340:	2300      	movs	r3, #0
 8001342:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001344:	237f      	movs	r3, #127	; 0x7f
 8001346:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001348:	2304      	movs	r3, #4
 800134a:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 800134c:	2300      	movs	r3, #0
 800134e:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001350:	1d3b      	adds	r3, r7, #4
 8001352:	4619      	mov	r1, r3
 8001354:	4805      	ldr	r0, [pc, #20]	; (800136c <MX_ADC1_Init+0xe0>)
 8001356:	f001 fc41 	bl	8002bdc <HAL_ADC_ConfigChannel>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_ADC1_Init+0xd8>
		Error_Handler();
 8001360:	f000 f936 	bl	80015d0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001364:	bf00      	nop
 8001366:	3728      	adds	r7, #40	; 0x28
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	200002dc 	.word	0x200002dc
 8001370:	50040000 	.word	0x50040000
 8001374:	14f00020 	.word	0x14f00020

08001378 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001378:	b580      	push	{r7, lr}
 800137a:	b08e      	sub	sp, #56	; 0x38
 800137c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800137e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	605a      	str	r2, [r3, #4]
 8001388:	609a      	str	r2, [r3, #8]
 800138a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800138c:	f107 031c 	add.w	r3, r7, #28
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001398:	463b      	mov	r3, r7
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]
 80013a0:	609a      	str	r2, [r3, #8]
 80013a2:	60da      	str	r2, [r3, #12]
 80013a4:	611a      	str	r2, [r3, #16]
 80013a6:	615a      	str	r2, [r3, #20]
 80013a8:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80013aa:	4b2d      	ldr	r3, [pc, #180]	; (8001460 <MX_TIM3_Init+0xe8>)
 80013ac:	4a2d      	ldr	r2, [pc, #180]	; (8001464 <MX_TIM3_Init+0xec>)
 80013ae:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 38;
 80013b0:	4b2b      	ldr	r3, [pc, #172]	; (8001460 <MX_TIM3_Init+0xe8>)
 80013b2:	2226      	movs	r2, #38	; 0x26
 80013b4:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b6:	4b2a      	ldr	r3, [pc, #168]	; (8001460 <MX_TIM3_Init+0xe8>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 4096;
 80013bc:	4b28      	ldr	r3, [pc, #160]	; (8001460 <MX_TIM3_Init+0xe8>)
 80013be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013c2:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c4:	4b26      	ldr	r3, [pc, #152]	; (8001460 <MX_TIM3_Init+0xe8>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013ca:	4b25      	ldr	r3, [pc, #148]	; (8001460 <MX_TIM3_Init+0xe8>)
 80013cc:	2280      	movs	r2, #128	; 0x80
 80013ce:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 80013d0:	4823      	ldr	r0, [pc, #140]	; (8001460 <MX_TIM3_Init+0xe8>)
 80013d2:	f004 f8bf 	bl	8005554 <HAL_TIM_Base_Init>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_TIM3_Init+0x68>
		Error_Handler();
 80013dc:	f000 f8f8 	bl	80015d0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e4:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80013e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013ea:	4619      	mov	r1, r3
 80013ec:	481c      	ldr	r0, [pc, #112]	; (8001460 <MX_TIM3_Init+0xe8>)
 80013ee:	f004 fca3 	bl	8005d38 <HAL_TIM_ConfigClockSource>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM3_Init+0x84>
		Error_Handler();
 80013f8:	f000 f8ea 	bl	80015d0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 80013fc:	4818      	ldr	r0, [pc, #96]	; (8001460 <MX_TIM3_Init+0xe8>)
 80013fe:	f004 f900 	bl	8005602 <HAL_TIM_PWM_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_TIM3_Init+0x94>
		Error_Handler();
 8001408:	f000 f8e2 	bl	80015d0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800140c:	2300      	movs	r3, #0
 800140e:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001410:	2300      	movs	r3, #0
 8001412:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001414:	f107 031c 	add.w	r3, r7, #28
 8001418:	4619      	mov	r1, r3
 800141a:	4811      	ldr	r0, [pc, #68]	; (8001460 <MX_TIM3_Init+0xe8>)
 800141c:	f005 f9b8 	bl	8006790 <HAL_TIMEx_MasterConfigSynchronization>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_TIM3_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 8001426:	f000 f8d3 	bl	80015d0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800142a:	2360      	movs	r3, #96	; 0x60
 800142c:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 25;
 800142e:	2319      	movs	r3, #25
 8001430:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001432:	2300      	movs	r3, #0
 8001434:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001436:	2300      	movs	r3, #0
 8001438:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 800143a:	463b      	mov	r3, r7
 800143c:	2204      	movs	r2, #4
 800143e:	4619      	mov	r1, r3
 8001440:	4807      	ldr	r0, [pc, #28]	; (8001460 <MX_TIM3_Init+0xe8>)
 8001442:	f004 fb65 	bl	8005b10 <HAL_TIM_PWM_ConfigChannel>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_TIM3_Init+0xd8>
			!= HAL_OK) {
		Error_Handler();
 800144c:	f000 f8c0 	bl	80015d0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8001450:	4803      	ldr	r0, [pc, #12]	; (8001460 <MX_TIM3_Init+0xe8>)
 8001452:	f000 f9fd 	bl	8001850 <HAL_TIM_MspPostInit>

}
 8001456:	bf00      	nop
 8001458:	3738      	adds	r7, #56	; 0x38
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	2000028c 	.word	0x2000028c
 8001464:	40000400 	.word	0x40000400

08001468 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800146c:	4b14      	ldr	r3, [pc, #80]	; (80014c0 <MX_USART2_UART_Init+0x58>)
 800146e:	4a15      	ldr	r2, [pc, #84]	; (80014c4 <MX_USART2_UART_Init+0x5c>)
 8001470:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001472:	4b13      	ldr	r3, [pc, #76]	; (80014c0 <MX_USART2_UART_Init+0x58>)
 8001474:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001478:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800147a:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <MX_USART2_UART_Init+0x58>)
 800147c:	2200      	movs	r2, #0
 800147e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001480:	4b0f      	ldr	r3, [pc, #60]	; (80014c0 <MX_USART2_UART_Init+0x58>)
 8001482:	2200      	movs	r2, #0
 8001484:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001486:	4b0e      	ldr	r3, [pc, #56]	; (80014c0 <MX_USART2_UART_Init+0x58>)
 8001488:	2200      	movs	r2, #0
 800148a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800148c:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <MX_USART2_UART_Init+0x58>)
 800148e:	220c      	movs	r2, #12
 8001490:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001492:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <MX_USART2_UART_Init+0x58>)
 8001494:	2200      	movs	r2, #0
 8001496:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001498:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <MX_USART2_UART_Init+0x58>)
 800149a:	2200      	movs	r2, #0
 800149c:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800149e:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <MX_USART2_UART_Init+0x58>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014a4:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <MX_USART2_UART_Init+0x58>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80014aa:	4805      	ldr	r0, [pc, #20]	; (80014c0 <MX_USART2_UART_Init+0x58>)
 80014ac:	f005 fa16 	bl	80068dc <HAL_UART_Init>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_USART2_UART_Init+0x52>
		Error_Handler();
 80014b6:	f000 f88b 	bl	80015d0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000208 	.word	0x20000208
 80014c4:	40004400 	.word	0x40004400

080014c8 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80014ce:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <MX_DMA_Init+0x38>)
 80014d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014d2:	4a0b      	ldr	r2, [pc, #44]	; (8001500 <MX_DMA_Init+0x38>)
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	6493      	str	r3, [r2, #72]	; 0x48
 80014da:	4b09      	ldr	r3, [pc, #36]	; (8001500 <MX_DMA_Init+0x38>)
 80014dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	607b      	str	r3, [r7, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80014e6:	2200      	movs	r2, #0
 80014e8:	2100      	movs	r1, #0
 80014ea:	200b      	movs	r0, #11
 80014ec:	f002 f9ab 	bl	8003846 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80014f0:	200b      	movs	r0, #11
 80014f2:	f002 f9c4 	bl	800387e <HAL_NVIC_EnableIRQ>

}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40021000 	.word	0x40021000

08001504 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001504:	b580      	push	{r7, lr}
 8001506:	b08a      	sub	sp, #40	; 0x28
 8001508:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800150a:	f107 0314 	add.w	r3, r7, #20
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
 8001516:	60da      	str	r2, [r3, #12]
 8001518:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800151a:	4b2b      	ldr	r3, [pc, #172]	; (80015c8 <MX_GPIO_Init+0xc4>)
 800151c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151e:	4a2a      	ldr	r2, [pc, #168]	; (80015c8 <MX_GPIO_Init+0xc4>)
 8001520:	f043 0304 	orr.w	r3, r3, #4
 8001524:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001526:	4b28      	ldr	r3, [pc, #160]	; (80015c8 <MX_GPIO_Init+0xc4>)
 8001528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152a:	f003 0304 	and.w	r3, r3, #4
 800152e:	613b      	str	r3, [r7, #16]
 8001530:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001532:	4b25      	ldr	r3, [pc, #148]	; (80015c8 <MX_GPIO_Init+0xc4>)
 8001534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001536:	4a24      	ldr	r2, [pc, #144]	; (80015c8 <MX_GPIO_Init+0xc4>)
 8001538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800153c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800153e:	4b22      	ldr	r3, [pc, #136]	; (80015c8 <MX_GPIO_Init+0xc4>)
 8001540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800154a:	4b1f      	ldr	r3, [pc, #124]	; (80015c8 <MX_GPIO_Init+0xc4>)
 800154c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154e:	4a1e      	ldr	r2, [pc, #120]	; (80015c8 <MX_GPIO_Init+0xc4>)
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001556:	4b1c      	ldr	r3, [pc, #112]	; (80015c8 <MX_GPIO_Init+0xc4>)
 8001558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	60bb      	str	r3, [r7, #8]
 8001560:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001562:	4b19      	ldr	r3, [pc, #100]	; (80015c8 <MX_GPIO_Init+0xc4>)
 8001564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001566:	4a18      	ldr	r2, [pc, #96]	; (80015c8 <MX_GPIO_Init+0xc4>)
 8001568:	f043 0302 	orr.w	r3, r3, #2
 800156c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800156e:	4b16      	ldr	r3, [pc, #88]	; (80015c8 <MX_GPIO_Init+0xc4>)
 8001570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	607b      	str	r3, [r7, #4]
 8001578:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800157a:	2200      	movs	r2, #0
 800157c:	2120      	movs	r1, #32
 800157e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001582:	f002 fca9 	bl	8003ed8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001586:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800158a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800158c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001590:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001596:	f107 0314 	add.w	r3, r7, #20
 800159a:	4619      	mov	r1, r3
 800159c:	480b      	ldr	r0, [pc, #44]	; (80015cc <MX_GPIO_Init+0xc8>)
 800159e:	f002 faf1 	bl	8003b84 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 80015a2:	2320      	movs	r3, #32
 80015a4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a6:	2301      	movs	r3, #1
 80015a8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ae:	2300      	movs	r3, #0
 80015b0:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015b2:	f107 0314 	add.w	r3, r7, #20
 80015b6:	4619      	mov	r1, r3
 80015b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015bc:	f002 fae2 	bl	8003b84 <HAL_GPIO_Init>

}
 80015c0:	bf00      	nop
 80015c2:	3728      	adds	r7, #40	; 0x28
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40021000 	.word	0x40021000
 80015cc:	48000800 	.word	0x48000800

080015d0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015d4:	b672      	cpsid	i
}
 80015d6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80015d8:	e7fe      	b.n	80015d8 <Error_Handler+0x8>

080015da <setGreenLed>:
#include  <stdio.h>
#include  <errno.h>
#include  <sys/unistd.h> // STDOUT_FILENO, STDERR_FILENO

// On board green LED On
void setGreenLed() {
 80015da:	b580      	push	{r7, lr}
 80015dc:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 80015de:	2201      	movs	r2, #1
 80015e0:	2120      	movs	r1, #32
 80015e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015e6:	f002 fc77 	bl	8003ed8 <HAL_GPIO_WritePin>
}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}

080015ee <blinkGreenLed>:

// On board green LED blink
void blinkGreenLed(int nb, int delay) {
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b084      	sub	sp, #16
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
 80015f6:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < nb; i++) {
 80015f8:	2300      	movs	r3, #0
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	e00b      	b.n	8001616 <blinkGreenLed+0x28>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80015fe:	2120      	movs	r1, #32
 8001600:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001604:	f002 fc80 	bl	8003f08 <HAL_GPIO_TogglePin>
		HAL_Delay(delay);
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	4618      	mov	r0, r3
 800160c:	f000 fb9e 	bl	8001d4c <HAL_Delay>
	for (int i = 0; i < nb; i++) {
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	3301      	adds	r3, #1
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	68fa      	ldr	r2, [r7, #12]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	429a      	cmp	r2, r3
 800161c:	dbef      	blt.n	80015fe <blinkGreenLed+0x10>
	}
}
 800161e:	bf00      	nop
 8001620:	bf00      	nop
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <_write>:
		__HAL_UART_CLEAR_OREFLAG(huart);
	}
}

// Redefine _write function for printf
int _write(int file, char *data, int len) {
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
	if ((file != STDOUT_FILENO) && (file != STDERR_FILENO)) {
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d00a      	beq.n	8001650 <_write+0x28>
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2b02      	cmp	r3, #2
 800163e:	d007      	beq.n	8001650 <_write+0x28>
		errno = EBADF;
 8001640:	f005 ff3a 	bl	80074b8 <__errno>
 8001644:	4603      	mov	r3, r0
 8001646:	2209      	movs	r2, #9
 8001648:	601a      	str	r2, [r3, #0]
		return -1;
 800164a:	f04f 33ff 	mov.w	r3, #4294967295
 800164e:	e00f      	b.n	8001670 <_write+0x48>
	}

	// arbitrary timeout 1000
	HAL_StatusTypeDef status = HAL_UART_Transmit(&huart2, (uint8_t*) data, len,
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	b29a      	uxth	r2, r3
 8001654:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001658:	68b9      	ldr	r1, [r7, #8]
 800165a:	4807      	ldr	r0, [pc, #28]	; (8001678 <_write+0x50>)
 800165c:	f005 f98c 	bl	8006978 <HAL_UART_Transmit>
 8001660:	4603      	mov	r3, r0
 8001662:	75fb      	strb	r3, [r7, #23]
			1000);

	// return # of bytes written - as best we can tell
	return (status == HAL_OK ? len : 0);
 8001664:	7dfb      	ldrb	r3, [r7, #23]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d101      	bne.n	800166e <_write+0x46>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	e000      	b.n	8001670 <_write+0x48>
 800166e:	2300      	movs	r3, #0
}
 8001670:	4618      	mov	r0, r3
 8001672:	3718      	adds	r7, #24
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20000208 	.word	0x20000208

0800167c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001682:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <HAL_MspInit+0x44>)
 8001684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001686:	4a0e      	ldr	r2, [pc, #56]	; (80016c0 <HAL_MspInit+0x44>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	6613      	str	r3, [r2, #96]	; 0x60
 800168e:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <HAL_MspInit+0x44>)
 8001690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	607b      	str	r3, [r7, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800169a:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <HAL_MspInit+0x44>)
 800169c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800169e:	4a08      	ldr	r2, [pc, #32]	; (80016c0 <HAL_MspInit+0x44>)
 80016a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a4:	6593      	str	r3, [r2, #88]	; 0x58
 80016a6:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <HAL_MspInit+0x44>)
 80016a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ae:	603b      	str	r3, [r7, #0]
 80016b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016b2:	bf00      	nop
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	40021000 	.word	0x40021000

080016c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b0ac      	sub	sp, #176	; 0xb0
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	60da      	str	r2, [r3, #12]
 80016da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016dc:	f107 0314 	add.w	r3, r7, #20
 80016e0:	2288      	movs	r2, #136	; 0x88
 80016e2:	2100      	movs	r1, #0
 80016e4:	4618      	mov	r0, r3
 80016e6:	f005 ff1f 	bl	8007528 <memset>
  if(hadc->Instance==ADC1)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a41      	ldr	r2, [pc, #260]	; (80017f4 <HAL_ADC_MspInit+0x130>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d17a      	bne.n	80017ea <HAL_ADC_MspInit+0x126>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80016f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016f8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80016fa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80016fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001702:	2302      	movs	r3, #2
 8001704:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001706:	2301      	movs	r3, #1
 8001708:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800170a:	2308      	movs	r3, #8
 800170c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800170e:	2307      	movs	r3, #7
 8001710:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001712:	2302      	movs	r3, #2
 8001714:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001716:	2302      	movs	r3, #2
 8001718:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800171a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800171e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001720:	f107 0314 	add.w	r3, r7, #20
 8001724:	4618      	mov	r0, r3
 8001726:	f003 fa59 	bl	8004bdc <HAL_RCCEx_PeriphCLKConfig>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001730:	f7ff ff4e 	bl	80015d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001734:	4b30      	ldr	r3, [pc, #192]	; (80017f8 <HAL_ADC_MspInit+0x134>)
 8001736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001738:	4a2f      	ldr	r2, [pc, #188]	; (80017f8 <HAL_ADC_MspInit+0x134>)
 800173a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800173e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001740:	4b2d      	ldr	r3, [pc, #180]	; (80017f8 <HAL_ADC_MspInit+0x134>)
 8001742:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001744:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001748:	613b      	str	r3, [r7, #16]
 800174a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800174c:	4b2a      	ldr	r3, [pc, #168]	; (80017f8 <HAL_ADC_MspInit+0x134>)
 800174e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001750:	4a29      	ldr	r2, [pc, #164]	; (80017f8 <HAL_ADC_MspInit+0x134>)
 8001752:	f043 0301 	orr.w	r3, r3, #1
 8001756:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001758:	4b27      	ldr	r3, [pc, #156]	; (80017f8 <HAL_ADC_MspInit+0x134>)
 800175a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175c:	f003 0301 	and.w	r3, r3, #1
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001764:	2301      	movs	r3, #1
 8001766:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800176a:	230b      	movs	r3, #11
 800176c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001776:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800177a:	4619      	mov	r1, r3
 800177c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001780:	f002 fa00 	bl	8003b84 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001784:	4b1d      	ldr	r3, [pc, #116]	; (80017fc <HAL_ADC_MspInit+0x138>)
 8001786:	4a1e      	ldr	r2, [pc, #120]	; (8001800 <HAL_ADC_MspInit+0x13c>)
 8001788:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800178a:	4b1c      	ldr	r3, [pc, #112]	; (80017fc <HAL_ADC_MspInit+0x138>)
 800178c:	2200      	movs	r2, #0
 800178e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001790:	4b1a      	ldr	r3, [pc, #104]	; (80017fc <HAL_ADC_MspInit+0x138>)
 8001792:	2200      	movs	r2, #0
 8001794:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001796:	4b19      	ldr	r3, [pc, #100]	; (80017fc <HAL_ADC_MspInit+0x138>)
 8001798:	2200      	movs	r2, #0
 800179a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800179c:	4b17      	ldr	r3, [pc, #92]	; (80017fc <HAL_ADC_MspInit+0x138>)
 800179e:	2280      	movs	r2, #128	; 0x80
 80017a0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017a2:	4b16      	ldr	r3, [pc, #88]	; (80017fc <HAL_ADC_MspInit+0x138>)
 80017a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017a8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017aa:	4b14      	ldr	r3, [pc, #80]	; (80017fc <HAL_ADC_MspInit+0x138>)
 80017ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017b0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80017b2:	4b12      	ldr	r3, [pc, #72]	; (80017fc <HAL_ADC_MspInit+0x138>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80017b8:	4b10      	ldr	r3, [pc, #64]	; (80017fc <HAL_ADC_MspInit+0x138>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80017be:	480f      	ldr	r0, [pc, #60]	; (80017fc <HAL_ADC_MspInit+0x138>)
 80017c0:	f002 f878 	bl	80038b4 <HAL_DMA_Init>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 80017ca:	f7ff ff01 	bl	80015d0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a0a      	ldr	r2, [pc, #40]	; (80017fc <HAL_ADC_MspInit+0x138>)
 80017d2:	64da      	str	r2, [r3, #76]	; 0x4c
 80017d4:	4a09      	ldr	r2, [pc, #36]	; (80017fc <HAL_ADC_MspInit+0x138>)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80017da:	2200      	movs	r2, #0
 80017dc:	2100      	movs	r1, #0
 80017de:	2012      	movs	r0, #18
 80017e0:	f002 f831 	bl	8003846 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80017e4:	2012      	movs	r0, #18
 80017e6:	f002 f84a 	bl	800387e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017ea:	bf00      	nop
 80017ec:	37b0      	adds	r7, #176	; 0xb0
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	50040000 	.word	0x50040000
 80017f8:	40021000 	.word	0x40021000
 80017fc:	20000340 	.word	0x20000340
 8001800:	40020008 	.word	0x40020008

08001804 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a0d      	ldr	r2, [pc, #52]	; (8001848 <HAL_TIM_Base_MspInit+0x44>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d113      	bne.n	800183e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001816:	4b0d      	ldr	r3, [pc, #52]	; (800184c <HAL_TIM_Base_MspInit+0x48>)
 8001818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181a:	4a0c      	ldr	r2, [pc, #48]	; (800184c <HAL_TIM_Base_MspInit+0x48>)
 800181c:	f043 0302 	orr.w	r3, r3, #2
 8001820:	6593      	str	r3, [r2, #88]	; 0x58
 8001822:	4b0a      	ldr	r3, [pc, #40]	; (800184c <HAL_TIM_Base_MspInit+0x48>)
 8001824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800182e:	2200      	movs	r2, #0
 8001830:	2100      	movs	r1, #0
 8001832:	201d      	movs	r0, #29
 8001834:	f002 f807 	bl	8003846 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001838:	201d      	movs	r0, #29
 800183a:	f002 f820 	bl	800387e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800183e:	bf00      	nop
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40000400 	.word	0x40000400
 800184c:	40021000 	.word	0x40021000

08001850 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b088      	sub	sp, #32
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001858:	f107 030c 	add.w	r3, r7, #12
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a11      	ldr	r2, [pc, #68]	; (80018b4 <HAL_TIM_MspPostInit+0x64>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d11c      	bne.n	80018ac <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001872:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <HAL_TIM_MspPostInit+0x68>)
 8001874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001876:	4a10      	ldr	r2, [pc, #64]	; (80018b8 <HAL_TIM_MspPostInit+0x68>)
 8001878:	f043 0301 	orr.w	r3, r3, #1
 800187c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800187e:	4b0e      	ldr	r3, [pc, #56]	; (80018b8 <HAL_TIM_MspPostInit+0x68>)
 8001880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	60bb      	str	r3, [r7, #8]
 8001888:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800188a:	2380      	movs	r3, #128	; 0x80
 800188c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188e:	2302      	movs	r3, #2
 8001890:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001892:	2300      	movs	r3, #0
 8001894:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001896:	2300      	movs	r3, #0
 8001898:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800189a:	2302      	movs	r3, #2
 800189c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189e:	f107 030c 	add.w	r3, r7, #12
 80018a2:	4619      	mov	r1, r3
 80018a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018a8:	f002 f96c 	bl	8003b84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80018ac:	bf00      	nop
 80018ae:	3720      	adds	r7, #32
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	40000400 	.word	0x40000400
 80018b8:	40021000 	.word	0x40021000

080018bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b0ac      	sub	sp, #176	; 0xb0
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]
 80018d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018d4:	f107 0314 	add.w	r3, r7, #20
 80018d8:	2288      	movs	r2, #136	; 0x88
 80018da:	2100      	movs	r1, #0
 80018dc:	4618      	mov	r0, r3
 80018de:	f005 fe23 	bl	8007528 <memset>
  if(huart->Instance==USART2)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a21      	ldr	r2, [pc, #132]	; (800196c <HAL_UART_MspInit+0xb0>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d13b      	bne.n	8001964 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80018ec:	2302      	movs	r3, #2
 80018ee:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80018f0:	2300      	movs	r3, #0
 80018f2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018f4:	f107 0314 	add.w	r3, r7, #20
 80018f8:	4618      	mov	r0, r3
 80018fa:	f003 f96f 	bl	8004bdc <HAL_RCCEx_PeriphCLKConfig>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001904:	f7ff fe64 	bl	80015d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001908:	4b19      	ldr	r3, [pc, #100]	; (8001970 <HAL_UART_MspInit+0xb4>)
 800190a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800190c:	4a18      	ldr	r2, [pc, #96]	; (8001970 <HAL_UART_MspInit+0xb4>)
 800190e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001912:	6593      	str	r3, [r2, #88]	; 0x58
 8001914:	4b16      	ldr	r3, [pc, #88]	; (8001970 <HAL_UART_MspInit+0xb4>)
 8001916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191c:	613b      	str	r3, [r7, #16]
 800191e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001920:	4b13      	ldr	r3, [pc, #76]	; (8001970 <HAL_UART_MspInit+0xb4>)
 8001922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001924:	4a12      	ldr	r2, [pc, #72]	; (8001970 <HAL_UART_MspInit+0xb4>)
 8001926:	f043 0301 	orr.w	r3, r3, #1
 800192a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800192c:	4b10      	ldr	r3, [pc, #64]	; (8001970 <HAL_UART_MspInit+0xb4>)
 800192e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001930:	f003 0301 	and.w	r3, r3, #1
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001938:	230c      	movs	r3, #12
 800193a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193e:	2302      	movs	r3, #2
 8001940:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001944:	2300      	movs	r3, #0
 8001946:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800194a:	2303      	movs	r3, #3
 800194c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001950:	2307      	movs	r3, #7
 8001952:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001956:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800195a:	4619      	mov	r1, r3
 800195c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001960:	f002 f910 	bl	8003b84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001964:	bf00      	nop
 8001966:	37b0      	adds	r7, #176	; 0xb0
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40004400 	.word	0x40004400
 8001970:	40021000 	.word	0x40021000

08001974 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001978:	e7fe      	b.n	8001978 <NMI_Handler+0x4>

0800197a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800197a:	b480      	push	{r7}
 800197c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800197e:	e7fe      	b.n	800197e <HardFault_Handler+0x4>

08001980 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001984:	e7fe      	b.n	8001984 <MemManage_Handler+0x4>

08001986 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800198a:	e7fe      	b.n	800198a <BusFault_Handler+0x4>

0800198c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001990:	e7fe      	b.n	8001990 <UsageFault_Handler+0x4>

08001992 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019a4:	bf00      	nop
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr

080019ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019ae:	b480      	push	{r7}
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019c0:	f000 f9a4 	bl	8001d0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019c4:	bf00      	nop
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80019cc:	4802      	ldr	r0, [pc, #8]	; (80019d8 <DMA1_Channel1_IRQHandler+0x10>)
 80019ce:	f002 f829 	bl	8003a24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20000340 	.word	0x20000340

080019dc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80019e0:	4802      	ldr	r0, [pc, #8]	; (80019ec <ADC1_2_IRQHandler+0x10>)
 80019e2:	f000 fec3 	bl	800276c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	200002dc 	.word	0x200002dc

080019f0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80019f4:	4802      	ldr	r0, [pc, #8]	; (8001a00 <TIM3_IRQHandler+0x10>)
 80019f6:	f003 ff6b 	bl	80058d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	2000028c 	.word	0x2000028c

08001a04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
	return 1;
 8001a08:	2301      	movs	r3, #1
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <_kill>:

int _kill(int pid, int sig)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a1e:	f005 fd4b 	bl	80074b8 <__errno>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2216      	movs	r2, #22
 8001a26:	601a      	str	r2, [r3, #0]
	return -1;
 8001a28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <_exit>:

void _exit (int status)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f7ff ffe7 	bl	8001a14 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a46:	e7fe      	b.n	8001a46 <_exit+0x12>

08001a48 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a54:	2300      	movs	r3, #0
 8001a56:	617b      	str	r3, [r7, #20]
 8001a58:	e00a      	b.n	8001a70 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a5a:	f3af 8000 	nop.w
 8001a5e:	4601      	mov	r1, r0
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	1c5a      	adds	r2, r3, #1
 8001a64:	60ba      	str	r2, [r7, #8]
 8001a66:	b2ca      	uxtb	r2, r1
 8001a68:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	617b      	str	r3, [r7, #20]
 8001a70:	697a      	ldr	r2, [r7, #20]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	dbf0      	blt.n	8001a5a <_read+0x12>
	}

return len;
 8001a78:	687b      	ldr	r3, [r7, #4]
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3718      	adds	r7, #24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001a82:	b480      	push	{r7}
 8001a84:	b083      	sub	sp, #12
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
	return -1;
 8001a8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b083      	sub	sp, #12
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
 8001aa2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001aaa:	605a      	str	r2, [r3, #4]
	return 0;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <_isatty>:

int _isatty(int file)
{
 8001aba:	b480      	push	{r7}
 8001abc:	b083      	sub	sp, #12
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
	return 1;
 8001ac2:	2301      	movs	r3, #1
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
	return 0;
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3714      	adds	r7, #20
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
	...

08001aec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001af4:	4a14      	ldr	r2, [pc, #80]	; (8001b48 <_sbrk+0x5c>)
 8001af6:	4b15      	ldr	r3, [pc, #84]	; (8001b4c <_sbrk+0x60>)
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b00:	4b13      	ldr	r3, [pc, #76]	; (8001b50 <_sbrk+0x64>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d102      	bne.n	8001b0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b08:	4b11      	ldr	r3, [pc, #68]	; (8001b50 <_sbrk+0x64>)
 8001b0a:	4a12      	ldr	r2, [pc, #72]	; (8001b54 <_sbrk+0x68>)
 8001b0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b0e:	4b10      	ldr	r3, [pc, #64]	; (8001b50 <_sbrk+0x64>)
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4413      	add	r3, r2
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d207      	bcs.n	8001b2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b1c:	f005 fccc 	bl	80074b8 <__errno>
 8001b20:	4603      	mov	r3, r0
 8001b22:	220c      	movs	r2, #12
 8001b24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b26:	f04f 33ff 	mov.w	r3, #4294967295
 8001b2a:	e009      	b.n	8001b40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b2c:	4b08      	ldr	r3, [pc, #32]	; (8001b50 <_sbrk+0x64>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b32:	4b07      	ldr	r3, [pc, #28]	; (8001b50 <_sbrk+0x64>)
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4413      	add	r3, r2
 8001b3a:	4a05      	ldr	r2, [pc, #20]	; (8001b50 <_sbrk+0x64>)
 8001b3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3718      	adds	r7, #24
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	20018000 	.word	0x20018000
 8001b4c:	00000400 	.word	0x00000400
 8001b50:	200001fc 	.word	0x200001fc
 8001b54:	200003a0 	.word	0x200003a0

08001b58 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b5c:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <SystemInit+0x20>)
 8001b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b62:	4a05      	ldr	r2, [pc, #20]	; (8001b78 <SystemInit+0x20>)
 8001b64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001b6c:	bf00      	nop
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <load_adc>:
#include<stdio.h>


 float firm =0.1;

int load_adc(ADC_HandleTypeDef hadc, int polTime) {
 8001b7c:	b084      	sub	sp, #16
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	f107 0c08 	add.w	ip, r7, #8
 8001b86:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	HAL_ADC_Start(&hadc);
 8001b8a:	f107 0008 	add.w	r0, r7, #8
 8001b8e:	f000 fc4d 	bl	800242c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, polTime);
 8001b92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b94:	4619      	mov	r1, r3
 8001b96:	f107 0008 	add.w	r0, r7, #8
 8001b9a:	f000 fd01 	bl	80025a0 <HAL_ADC_PollForConversion>
	//if(HAL_ADC_GetValue(&hadc)==0)
	//return 1;
	return HAL_ADC_GetValue(&hadc);
 8001b9e:	f107 0008 	add.w	r0, r7, #8
 8001ba2:	f000 fdd5 	bl	8002750 <HAL_ADC_GetValue>
 8001ba6:	4603      	mov	r3, r0

}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	46bd      	mov	sp, r7
 8001bac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001bb0:	b004      	add	sp, #16
 8001bb2:	4770      	bx	lr

08001bb4 <load_pwm>:

void load_pwm(TIM_HandleTypeDef htimX, int val) {
 8001bb4:	b084      	sub	sp, #16
 8001bb6:	b490      	push	{r4, r7}
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	f107 0408 	add.w	r4, r7, #8
 8001bbe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	htimX.Instance->CCR2 = val;
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001bc6:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001bc8:	bf00      	nop
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc90      	pop	{r4, r7}
 8001bce:	b004      	add	sp, #16
 8001bd0:	4770      	bx	lr

08001bd2 <y_print>:

void y_print(UART_HandleTypeDef *huart, char *mess,int len) {
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b084      	sub	sp, #16
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	60f8      	str	r0, [r7, #12]
 8001bda:	60b9      	str	r1, [r7, #8]
 8001bdc:	607a      	str	r2, [r7, #4]

	if (HAL_UART_Transmit(huart, (uint8_t*) mess,len, 100) != HAL_OK)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	b29a      	uxth	r2, r3
 8001be2:	2364      	movs	r3, #100	; 0x64
 8001be4:	68b9      	ldr	r1, [r7, #8]
 8001be6:	68f8      	ldr	r0, [r7, #12]
 8001be8:	f004 fec6 	bl	8006978 <HAL_UART_Transmit>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <y_print+0x24>
		Error_Handler();
 8001bf2:	f7ff fced 	bl	80015d0 <Error_Handler>
}
 8001bf6:	bf00      	nop
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
	...

08001c00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c38 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c04:	f7ff ffa8 	bl	8001b58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c08:	480c      	ldr	r0, [pc, #48]	; (8001c3c <LoopForever+0x6>)
  ldr r1, =_edata
 8001c0a:	490d      	ldr	r1, [pc, #52]	; (8001c40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c0c:	4a0d      	ldr	r2, [pc, #52]	; (8001c44 <LoopForever+0xe>)
  movs r3, #0
 8001c0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c10:	e002      	b.n	8001c18 <LoopCopyDataInit>

08001c12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c16:	3304      	adds	r3, #4

08001c18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c1c:	d3f9      	bcc.n	8001c12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c1e:	4a0a      	ldr	r2, [pc, #40]	; (8001c48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c20:	4c0a      	ldr	r4, [pc, #40]	; (8001c4c <LoopForever+0x16>)
  movs r3, #0
 8001c22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c24:	e001      	b.n	8001c2a <LoopFillZerobss>

08001c26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c28:	3204      	adds	r2, #4

08001c2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c2c:	d3fb      	bcc.n	8001c26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c2e:	f005 fc49 	bl	80074c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c32:	f7ff f9db 	bl	8000fec <main>

08001c36 <LoopForever>:

LoopForever:
    b LoopForever
 8001c36:	e7fe      	b.n	8001c36 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c38:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001c3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c40:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001c44:	0800c41c 	.word	0x0800c41c
  ldr r2, =_sbss
 8001c48:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001c4c:	200003a0 	.word	0x200003a0

08001c50 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c50:	e7fe      	b.n	8001c50 <ADC3_IRQHandler>
	...

08001c54 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c5e:	4b0c      	ldr	r3, [pc, #48]	; (8001c90 <HAL_Init+0x3c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a0b      	ldr	r2, [pc, #44]	; (8001c90 <HAL_Init+0x3c>)
 8001c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c68:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c6a:	2003      	movs	r0, #3
 8001c6c:	f001 fde0 	bl	8003830 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c70:	2000      	movs	r0, #0
 8001c72:	f000 f80f 	bl	8001c94 <HAL_InitTick>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d002      	beq.n	8001c82 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	71fb      	strb	r3, [r7, #7]
 8001c80:	e001      	b.n	8001c86 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c82:	f7ff fcfb 	bl	800167c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c86:	79fb      	ldrb	r3, [r7, #7]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40022000 	.word	0x40022000

08001c94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001ca0:	4b17      	ldr	r3, [pc, #92]	; (8001d00 <HAL_InitTick+0x6c>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d023      	beq.n	8001cf0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ca8:	4b16      	ldr	r3, [pc, #88]	; (8001d04 <HAL_InitTick+0x70>)
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	4b14      	ldr	r3, [pc, #80]	; (8001d00 <HAL_InitTick+0x6c>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f001 fdeb 	bl	800389a <HAL_SYSTICK_Config>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d10f      	bne.n	8001cea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2b0f      	cmp	r3, #15
 8001cce:	d809      	bhi.n	8001ce4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	6879      	ldr	r1, [r7, #4]
 8001cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd8:	f001 fdb5 	bl	8003846 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cdc:	4a0a      	ldr	r2, [pc, #40]	; (8001d08 <HAL_InitTick+0x74>)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6013      	str	r3, [r2, #0]
 8001ce2:	e007      	b.n	8001cf4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	73fb      	strb	r3, [r7, #15]
 8001ce8:	e004      	b.n	8001cf4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	73fb      	strb	r3, [r7, #15]
 8001cee:	e001      	b.n	8001cf4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	20000008 	.word	0x20000008
 8001d04:	20000000 	.word	0x20000000
 8001d08:	20000004 	.word	0x20000004

08001d0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d10:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <HAL_IncTick+0x20>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	461a      	mov	r2, r3
 8001d16:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <HAL_IncTick+0x24>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	4a04      	ldr	r2, [pc, #16]	; (8001d30 <HAL_IncTick+0x24>)
 8001d1e:	6013      	str	r3, [r2, #0]
}
 8001d20:	bf00      	nop
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	20000008 	.word	0x20000008
 8001d30:	2000038c 	.word	0x2000038c

08001d34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  return uwTick;
 8001d38:	4b03      	ldr	r3, [pc, #12]	; (8001d48 <HAL_GetTick+0x14>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	2000038c 	.word	0x2000038c

08001d4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d54:	f7ff ffee 	bl	8001d34 <HAL_GetTick>
 8001d58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d64:	d005      	beq.n	8001d72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001d66:	4b0a      	ldr	r3, [pc, #40]	; (8001d90 <HAL_Delay+0x44>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	4413      	add	r3, r2
 8001d70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d72:	bf00      	nop
 8001d74:	f7ff ffde 	bl	8001d34 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d8f7      	bhi.n	8001d74 <HAL_Delay+0x28>
  {
  }
}
 8001d84:	bf00      	nop
 8001d86:	bf00      	nop
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	20000008 	.word	0x20000008

08001d94 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	431a      	orrs	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	609a      	str	r2, [r3, #8]
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
 8001dc2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	431a      	orrs	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b087      	sub	sp, #28
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
 8001e08:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	3360      	adds	r3, #96	; 0x60
 8001e0e:	461a      	mov	r2, r3
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	4413      	add	r3, r2
 8001e16:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	4b08      	ldr	r3, [pc, #32]	; (8001e40 <LL_ADC_SetOffset+0x44>)
 8001e1e:	4013      	ands	r3, r2
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001e34:	bf00      	nop
 8001e36:	371c      	adds	r7, #28
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr
 8001e40:	03fff000 	.word	0x03fff000

08001e44 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	3360      	adds	r3, #96	; 0x60
 8001e52:	461a      	mov	r2, r3
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	4413      	add	r3, r2
 8001e5a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3714      	adds	r7, #20
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b087      	sub	sp, #28
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	3360      	adds	r3, #96	; 0x60
 8001e80:	461a      	mov	r2, r3
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	4413      	add	r3, r2
 8001e88:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	431a      	orrs	r2, r3
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001e9a:	bf00      	nop
 8001e9c:	371c      	adds	r7, #28
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr

08001ea6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b083      	sub	sp, #12
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d101      	bne.n	8001ebe <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e000      	b.n	8001ec0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b087      	sub	sp, #28
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	3330      	adds	r3, #48	; 0x30
 8001edc:	461a      	mov	r2, r3
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	0a1b      	lsrs	r3, r3, #8
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	f003 030c 	and.w	r3, r3, #12
 8001ee8:	4413      	add	r3, r2
 8001eea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	f003 031f 	and.w	r3, r3, #31
 8001ef6:	211f      	movs	r1, #31
 8001ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8001efc:	43db      	mvns	r3, r3
 8001efe:	401a      	ands	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	0e9b      	lsrs	r3, r3, #26
 8001f04:	f003 011f 	and.w	r1, r3, #31
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	f003 031f 	and.w	r3, r3, #31
 8001f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f12:	431a      	orrs	r2, r3
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f18:	bf00      	nop
 8001f1a:	371c      	adds	r7, #28
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f30:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d101      	bne.n	8001f3c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e000      	b.n	8001f3e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr

08001f4a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	b087      	sub	sp, #28
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	60f8      	str	r0, [r7, #12]
 8001f52:	60b9      	str	r1, [r7, #8]
 8001f54:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	3314      	adds	r3, #20
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	0e5b      	lsrs	r3, r3, #25
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	f003 0304 	and.w	r3, r3, #4
 8001f66:	4413      	add	r3, r2
 8001f68:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	0d1b      	lsrs	r3, r3, #20
 8001f72:	f003 031f 	and.w	r3, r3, #31
 8001f76:	2107      	movs	r1, #7
 8001f78:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	401a      	ands	r2, r3
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	0d1b      	lsrs	r3, r3, #20
 8001f84:	f003 031f 	and.w	r3, r3, #31
 8001f88:	6879      	ldr	r1, [r7, #4]
 8001f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001f94:	bf00      	nop
 8001f96:	371c      	adds	r7, #28
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	401a      	ands	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f003 0318 	and.w	r3, r3, #24
 8001fc2:	4908      	ldr	r1, [pc, #32]	; (8001fe4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001fc4:	40d9      	lsrs	r1, r3
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	400b      	ands	r3, r1
 8001fca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fce:	431a      	orrs	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001fd6:	bf00      	nop
 8001fd8:	3714      	adds	r7, #20
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	0007ffff 	.word	0x0007ffff

08001fe8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f003 031f 	and.w	r3, r3, #31
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002014:	4618      	mov	r0, r3
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002030:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	6093      	str	r3, [r2, #8]
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002054:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002058:	d101      	bne.n	800205e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800205a:	2301      	movs	r3, #1
 800205c:	e000      	b.n	8002060 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800207c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002080:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80020a8:	d101      	bne.n	80020ae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80020aa:	2301      	movs	r3, #1
 80020ac:	e000      	b.n	80020b0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80020cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020d0:	f043 0201 	orr.w	r2, r3, #1
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d101      	bne.n	80020fc <LL_ADC_IsEnabled+0x18>
 80020f8:	2301      	movs	r3, #1
 80020fa:	e000      	b.n	80020fe <LL_ADC_IsEnabled+0x1a>
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr

0800210a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800210a:	b480      	push	{r7}
 800210c:	b083      	sub	sp, #12
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800211a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800211e:	f043 0204 	orr.w	r2, r3, #4
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002126:	bf00      	nop
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr

08002132 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002132:	b480      	push	{r7}
 8002134:	b083      	sub	sp, #12
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f003 0304 	and.w	r3, r3, #4
 8002142:	2b04      	cmp	r3, #4
 8002144:	d101      	bne.n	800214a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002146:	2301      	movs	r3, #1
 8002148:	e000      	b.n	800214c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800214a:	2300      	movs	r3, #0
}
 800214c:	4618      	mov	r0, r3
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f003 0308 	and.w	r3, r3, #8
 8002168:	2b08      	cmp	r3, #8
 800216a:	d101      	bne.n	8002170 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800216c:	2301      	movs	r3, #1
 800216e:	e000      	b.n	8002172 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
	...

08002180 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002180:	b590      	push	{r4, r7, lr}
 8002182:	b089      	sub	sp, #36	; 0x24
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002188:	2300      	movs	r3, #0
 800218a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800218c:	2300      	movs	r3, #0
 800218e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e136      	b.n	8002408 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d109      	bne.n	80021bc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f7ff fa8b 	bl	80016c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff ff3f 	bl	8002044 <LL_ADC_IsDeepPowerDownEnabled>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d004      	beq.n	80021d6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff ff25 	bl	8002020 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff ff5a 	bl	8002094 <LL_ADC_IsInternalRegulatorEnabled>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d115      	bne.n	8002212 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff ff3e 	bl	800206c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021f0:	4b87      	ldr	r3, [pc, #540]	; (8002410 <HAL_ADC_Init+0x290>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	099b      	lsrs	r3, r3, #6
 80021f6:	4a87      	ldr	r2, [pc, #540]	; (8002414 <HAL_ADC_Init+0x294>)
 80021f8:	fba2 2303 	umull	r2, r3, r2, r3
 80021fc:	099b      	lsrs	r3, r3, #6
 80021fe:	3301      	adds	r3, #1
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002204:	e002      	b.n	800220c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	3b01      	subs	r3, #1
 800220a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1f9      	bne.n	8002206 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff ff3c 	bl	8002094 <LL_ADC_IsInternalRegulatorEnabled>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d10d      	bne.n	800223e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002226:	f043 0210 	orr.w	r2, r3, #16
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002232:	f043 0201 	orr.w	r2, r3, #1
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4618      	mov	r0, r3
 8002244:	f7ff ff75 	bl	8002132 <LL_ADC_REG_IsConversionOngoing>
 8002248:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800224e:	f003 0310 	and.w	r3, r3, #16
 8002252:	2b00      	cmp	r3, #0
 8002254:	f040 80cf 	bne.w	80023f6 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	2b00      	cmp	r3, #0
 800225c:	f040 80cb 	bne.w	80023f6 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002264:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002268:	f043 0202 	orr.w	r2, r3, #2
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff ff35 	bl	80020e4 <LL_ADC_IsEnabled>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d115      	bne.n	80022ac <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002280:	4865      	ldr	r0, [pc, #404]	; (8002418 <HAL_ADC_Init+0x298>)
 8002282:	f7ff ff2f 	bl	80020e4 <LL_ADC_IsEnabled>
 8002286:	4604      	mov	r4, r0
 8002288:	4864      	ldr	r0, [pc, #400]	; (800241c <HAL_ADC_Init+0x29c>)
 800228a:	f7ff ff2b 	bl	80020e4 <LL_ADC_IsEnabled>
 800228e:	4603      	mov	r3, r0
 8002290:	431c      	orrs	r4, r3
 8002292:	4863      	ldr	r0, [pc, #396]	; (8002420 <HAL_ADC_Init+0x2a0>)
 8002294:	f7ff ff26 	bl	80020e4 <LL_ADC_IsEnabled>
 8002298:	4603      	mov	r3, r0
 800229a:	4323      	orrs	r3, r4
 800229c:	2b00      	cmp	r3, #0
 800229e:	d105      	bne.n	80022ac <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	4619      	mov	r1, r3
 80022a6:	485f      	ldr	r0, [pc, #380]	; (8002424 <HAL_ADC_Init+0x2a4>)
 80022a8:	f7ff fd74 	bl	8001d94 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	7e5b      	ldrb	r3, [r3, #25]
 80022b0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022b6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80022bc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80022c2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022ca:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022cc:	4313      	orrs	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d106      	bne.n	80022e8 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022de:	3b01      	subs	r3, #1
 80022e0:	045b      	lsls	r3, r3, #17
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d009      	beq.n	8002304 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	4313      	orrs	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68da      	ldr	r2, [r3, #12]
 800230a:	4b47      	ldr	r3, [pc, #284]	; (8002428 <HAL_ADC_Init+0x2a8>)
 800230c:	4013      	ands	r3, r2
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	6812      	ldr	r2, [r2, #0]
 8002312:	69b9      	ldr	r1, [r7, #24]
 8002314:	430b      	orrs	r3, r1
 8002316:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4618      	mov	r0, r3
 800231e:	f7ff ff08 	bl	8002132 <LL_ADC_REG_IsConversionOngoing>
 8002322:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4618      	mov	r0, r3
 800232a:	f7ff ff15 	bl	8002158 <LL_ADC_INJ_IsConversionOngoing>
 800232e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d13d      	bne.n	80023b2 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d13a      	bne.n	80023b2 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002340:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002348:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800234a:	4313      	orrs	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002358:	f023 0302 	bic.w	r3, r3, #2
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	6812      	ldr	r2, [r2, #0]
 8002360:	69b9      	ldr	r1, [r7, #24]
 8002362:	430b      	orrs	r3, r1
 8002364:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800236c:	2b01      	cmp	r3, #1
 800236e:	d118      	bne.n	80023a2 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800237a:	f023 0304 	bic.w	r3, r3, #4
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002386:	4311      	orrs	r1, r2
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800238c:	4311      	orrs	r1, r2
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002392:	430a      	orrs	r2, r1
 8002394:	431a      	orrs	r2, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f042 0201 	orr.w	r2, r2, #1
 800239e:	611a      	str	r2, [r3, #16]
 80023a0:	e007      	b.n	80023b2 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	691a      	ldr	r2, [r3, #16]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 0201 	bic.w	r2, r2, #1
 80023b0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d10c      	bne.n	80023d4 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c0:	f023 010f 	bic.w	r1, r3, #15
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	69db      	ldr	r3, [r3, #28]
 80023c8:	1e5a      	subs	r2, r3, #1
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	430a      	orrs	r2, r1
 80023d0:	631a      	str	r2, [r3, #48]	; 0x30
 80023d2:	e007      	b.n	80023e4 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f022 020f 	bic.w	r2, r2, #15
 80023e2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e8:	f023 0303 	bic.w	r3, r3, #3
 80023ec:	f043 0201 	orr.w	r2, r3, #1
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	655a      	str	r2, [r3, #84]	; 0x54
 80023f4:	e007      	b.n	8002406 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023fa:	f043 0210 	orr.w	r2, r3, #16
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002406:	7ffb      	ldrb	r3, [r7, #31]
}
 8002408:	4618      	mov	r0, r3
 800240a:	3724      	adds	r7, #36	; 0x24
 800240c:	46bd      	mov	sp, r7
 800240e:	bd90      	pop	{r4, r7, pc}
 8002410:	20000000 	.word	0x20000000
 8002414:	053e2d63 	.word	0x053e2d63
 8002418:	50040000 	.word	0x50040000
 800241c:	50040100 	.word	0x50040100
 8002420:	50040200 	.word	0x50040200
 8002424:	50040300 	.word	0x50040300
 8002428:	fff0c007 	.word	0xfff0c007

0800242c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002434:	4857      	ldr	r0, [pc, #348]	; (8002594 <HAL_ADC_Start+0x168>)
 8002436:	f7ff fdd7 	bl	8001fe8 <LL_ADC_GetMultimode>
 800243a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff fe76 	bl	8002132 <LL_ADC_REG_IsConversionOngoing>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	f040 809c 	bne.w	8002586 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002454:	2b01      	cmp	r3, #1
 8002456:	d101      	bne.n	800245c <HAL_ADC_Start+0x30>
 8002458:	2302      	movs	r3, #2
 800245a:	e097      	b.n	800258c <HAL_ADC_Start+0x160>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f000 ffa9 	bl	80033bc <ADC_Enable>
 800246a:	4603      	mov	r3, r0
 800246c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800246e:	7dfb      	ldrb	r3, [r7, #23]
 8002470:	2b00      	cmp	r3, #0
 8002472:	f040 8083 	bne.w	800257c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800247a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800247e:	f023 0301 	bic.w	r3, r3, #1
 8002482:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a42      	ldr	r2, [pc, #264]	; (8002598 <HAL_ADC_Start+0x16c>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d002      	beq.n	800249a <HAL_ADC_Start+0x6e>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	e000      	b.n	800249c <HAL_ADC_Start+0x70>
 800249a:	4b40      	ldr	r3, [pc, #256]	; (800259c <HAL_ADC_Start+0x170>)
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	6812      	ldr	r2, [r2, #0]
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d002      	beq.n	80024aa <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d105      	bne.n	80024b6 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024c2:	d106      	bne.n	80024d2 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c8:	f023 0206 	bic.w	r2, r3, #6
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	659a      	str	r2, [r3, #88]	; 0x58
 80024d0:	e002      	b.n	80024d8 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	221c      	movs	r2, #28
 80024de:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a2a      	ldr	r2, [pc, #168]	; (8002598 <HAL_ADC_Start+0x16c>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d002      	beq.n	80024f8 <HAL_ADC_Start+0xcc>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	e000      	b.n	80024fa <HAL_ADC_Start+0xce>
 80024f8:	4b28      	ldr	r3, [pc, #160]	; (800259c <HAL_ADC_Start+0x170>)
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	6812      	ldr	r2, [r2, #0]
 80024fe:	4293      	cmp	r3, r2
 8002500:	d008      	beq.n	8002514 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d005      	beq.n	8002514 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	2b05      	cmp	r3, #5
 800250c:	d002      	beq.n	8002514 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	2b09      	cmp	r3, #9
 8002512:	d114      	bne.n	800253e <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d007      	beq.n	8002532 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002526:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800252a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f7ff fde7 	bl	800210a <LL_ADC_REG_StartConversion>
 800253c:	e025      	b.n	800258a <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002542:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a12      	ldr	r2, [pc, #72]	; (8002598 <HAL_ADC_Start+0x16c>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d002      	beq.n	800255a <HAL_ADC_Start+0x12e>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	e000      	b.n	800255c <HAL_ADC_Start+0x130>
 800255a:	4b10      	ldr	r3, [pc, #64]	; (800259c <HAL_ADC_Start+0x170>)
 800255c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00f      	beq.n	800258a <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800256e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002572:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	655a      	str	r2, [r3, #84]	; 0x54
 800257a:	e006      	b.n	800258a <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002584:	e001      	b.n	800258a <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002586:	2302      	movs	r3, #2
 8002588:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800258a:	7dfb      	ldrb	r3, [r7, #23]
}
 800258c:	4618      	mov	r0, r3
 800258e:	3718      	adds	r7, #24
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	50040300 	.word	0x50040300
 8002598:	50040100 	.word	0x50040100
 800259c:	50040000 	.word	0x50040000

080025a0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b088      	sub	sp, #32
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025aa:	4866      	ldr	r0, [pc, #408]	; (8002744 <HAL_ADC_PollForConversion+0x1a4>)
 80025ac:	f7ff fd1c 	bl	8001fe8 <LL_ADC_GetMultimode>
 80025b0:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	2b08      	cmp	r3, #8
 80025b8:	d102      	bne.n	80025c0 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80025ba:	2308      	movs	r3, #8
 80025bc:	61fb      	str	r3, [r7, #28]
 80025be:	e02a      	b.n	8002616 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d005      	beq.n	80025d2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	2b05      	cmp	r3, #5
 80025ca:	d002      	beq.n	80025d2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	2b09      	cmp	r3, #9
 80025d0:	d111      	bne.n	80025f6 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d007      	beq.n	80025f0 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e4:	f043 0220 	orr.w	r2, r3, #32
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e0a4      	b.n	800273a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80025f0:	2304      	movs	r3, #4
 80025f2:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80025f4:	e00f      	b.n	8002616 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80025f6:	4853      	ldr	r0, [pc, #332]	; (8002744 <HAL_ADC_PollForConversion+0x1a4>)
 80025f8:	f7ff fd04 	bl	8002004 <LL_ADC_GetMultiDMATransfer>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d007      	beq.n	8002612 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002606:	f043 0220 	orr.w	r2, r3, #32
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e093      	b.n	800273a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002612:	2304      	movs	r3, #4
 8002614:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002616:	f7ff fb8d 	bl	8001d34 <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800261c:	e021      	b.n	8002662 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002624:	d01d      	beq.n	8002662 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002626:	f7ff fb85 	bl	8001d34 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	683a      	ldr	r2, [r7, #0]
 8002632:	429a      	cmp	r2, r3
 8002634:	d302      	bcc.n	800263c <HAL_ADC_PollForConversion+0x9c>
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d112      	bne.n	8002662 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	4013      	ands	r3, r2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d10b      	bne.n	8002662 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800264e:	f043 0204 	orr.w	r2, r3, #4
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e06b      	b.n	800273a <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	4013      	ands	r3, r2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d0d6      	beq.n	800261e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002674:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4618      	mov	r0, r3
 8002682:	f7ff fc10 	bl	8001ea6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d01c      	beq.n	80026c6 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	7e5b      	ldrb	r3, [r3, #25]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d118      	bne.n	80026c6 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0308 	and.w	r3, r3, #8
 800269e:	2b08      	cmp	r3, #8
 80026a0:	d111      	bne.n	80026c6 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d105      	bne.n	80026c6 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026be:	f043 0201 	orr.w	r2, r3, #1
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a1f      	ldr	r2, [pc, #124]	; (8002748 <HAL_ADC_PollForConversion+0x1a8>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d002      	beq.n	80026d6 <HAL_ADC_PollForConversion+0x136>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	e000      	b.n	80026d8 <HAL_ADC_PollForConversion+0x138>
 80026d6:	4b1d      	ldr	r3, [pc, #116]	; (800274c <HAL_ADC_PollForConversion+0x1ac>)
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	6812      	ldr	r2, [r2, #0]
 80026dc:	4293      	cmp	r3, r2
 80026de:	d008      	beq.n	80026f2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d005      	beq.n	80026f2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	2b05      	cmp	r3, #5
 80026ea:	d002      	beq.n	80026f2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	2b09      	cmp	r3, #9
 80026f0:	d104      	bne.n	80026fc <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	61bb      	str	r3, [r7, #24]
 80026fa:	e00c      	b.n	8002716 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a11      	ldr	r2, [pc, #68]	; (8002748 <HAL_ADC_PollForConversion+0x1a8>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d002      	beq.n	800270c <HAL_ADC_PollForConversion+0x16c>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	e000      	b.n	800270e <HAL_ADC_PollForConversion+0x16e>
 800270c:	4b0f      	ldr	r3, [pc, #60]	; (800274c <HAL_ADC_PollForConversion+0x1ac>)
 800270e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	2b08      	cmp	r3, #8
 800271a:	d104      	bne.n	8002726 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2208      	movs	r2, #8
 8002722:	601a      	str	r2, [r3, #0]
 8002724:	e008      	b.n	8002738 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d103      	bne.n	8002738 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	220c      	movs	r2, #12
 8002736:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3720      	adds	r7, #32
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	50040300 	.word	0x50040300
 8002748:	50040100 	.word	0x50040100
 800274c:	50040000 	.word	0x50040000

08002750 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800275e:	4618      	mov	r0, r3
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
	...

0800276c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b08a      	sub	sp, #40	; 0x28
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002774:	2300      	movs	r3, #0
 8002776:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002788:	4882      	ldr	r0, [pc, #520]	; (8002994 <HAL_ADC_IRQHandler+0x228>)
 800278a:	f7ff fc2d 	bl	8001fe8 <LL_ADC_GetMultimode>
 800278e:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d017      	beq.n	80027ca <HAL_ADC_IRQHandler+0x5e>
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	f003 0302 	and.w	r3, r3, #2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d012      	beq.n	80027ca <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a8:	f003 0310 	and.w	r3, r3, #16
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d105      	bne.n	80027bc <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b4:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f000 fead 	bl	800351c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2202      	movs	r2, #2
 80027c8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	f003 0304 	and.w	r3, r3, #4
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d004      	beq.n	80027de <HAL_ADC_IRQHandler+0x72>
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	f003 0304 	and.w	r3, r3, #4
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d10a      	bne.n	80027f4 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f000 8083 	beq.w	80028f0 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	f003 0308 	and.w	r3, r3, #8
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d07d      	beq.n	80028f0 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f8:	f003 0310 	and.w	r3, r3, #16
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d105      	bne.n	800280c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002804:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff fb48 	bl	8001ea6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d062      	beq.n	80028e2 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a5d      	ldr	r2, [pc, #372]	; (8002998 <HAL_ADC_IRQHandler+0x22c>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d002      	beq.n	800282c <HAL_ADC_IRQHandler+0xc0>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	e000      	b.n	800282e <HAL_ADC_IRQHandler+0xc2>
 800282c:	4b5b      	ldr	r3, [pc, #364]	; (800299c <HAL_ADC_IRQHandler+0x230>)
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	6812      	ldr	r2, [r2, #0]
 8002832:	4293      	cmp	r3, r2
 8002834:	d008      	beq.n	8002848 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d005      	beq.n	8002848 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	2b05      	cmp	r3, #5
 8002840:	d002      	beq.n	8002848 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	2b09      	cmp	r3, #9
 8002846:	d104      	bne.n	8002852 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	623b      	str	r3, [r7, #32]
 8002850:	e00c      	b.n	800286c <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a50      	ldr	r2, [pc, #320]	; (8002998 <HAL_ADC_IRQHandler+0x22c>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d002      	beq.n	8002862 <HAL_ADC_IRQHandler+0xf6>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	e000      	b.n	8002864 <HAL_ADC_IRQHandler+0xf8>
 8002862:	4b4e      	ldr	r3, [pc, #312]	; (800299c <HAL_ADC_IRQHandler+0x230>)
 8002864:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800286c:	6a3b      	ldr	r3, [r7, #32]
 800286e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d135      	bne.n	80028e2 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0308 	and.w	r3, r3, #8
 8002880:	2b08      	cmp	r3, #8
 8002882:	d12e      	bne.n	80028e2 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff fc52 	bl	8002132 <LL_ADC_REG_IsConversionOngoing>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d11a      	bne.n	80028ca <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	685a      	ldr	r2, [r3, #4]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f022 020c 	bic.w	r2, r2, #12
 80028a2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d112      	bne.n	80028e2 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c0:	f043 0201 	orr.w	r2, r3, #1
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	655a      	str	r2, [r3, #84]	; 0x54
 80028c8:	e00b      	b.n	80028e2 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ce:	f043 0210 	orr.w	r2, r3, #16
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028da:	f043 0201 	orr.w	r2, r3, #1
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 f95c 	bl	8002ba0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	220c      	movs	r2, #12
 80028ee:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	f003 0320 	and.w	r3, r3, #32
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d004      	beq.n	8002904 <HAL_ADC_IRQHandler+0x198>
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	f003 0320 	and.w	r3, r3, #32
 8002900:	2b00      	cmp	r3, #0
 8002902:	d10b      	bne.n	800291c <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800290a:	2b00      	cmp	r3, #0
 800290c:	f000 809f 	beq.w	8002a4e <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002916:	2b00      	cmp	r3, #0
 8002918:	f000 8099 	beq.w	8002a4e <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002920:	f003 0310 	and.w	r3, r3, #16
 8002924:	2b00      	cmp	r3, #0
 8002926:	d105      	bne.n	8002934 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800292c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff faf3 	bl	8001f24 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800293e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff faae 	bl	8001ea6 <LL_ADC_REG_IsTriggerSourceSWStart>
 800294a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a11      	ldr	r2, [pc, #68]	; (8002998 <HAL_ADC_IRQHandler+0x22c>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d002      	beq.n	800295c <HAL_ADC_IRQHandler+0x1f0>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	e000      	b.n	800295e <HAL_ADC_IRQHandler+0x1f2>
 800295c:	4b0f      	ldr	r3, [pc, #60]	; (800299c <HAL_ADC_IRQHandler+0x230>)
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	6812      	ldr	r2, [r2, #0]
 8002962:	4293      	cmp	r3, r2
 8002964:	d008      	beq.n	8002978 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d005      	beq.n	8002978 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	2b06      	cmp	r3, #6
 8002970:	d002      	beq.n	8002978 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	2b07      	cmp	r3, #7
 8002976:	d104      	bne.n	8002982 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	623b      	str	r3, [r7, #32]
 8002980:	e013      	b.n	80029aa <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a04      	ldr	r2, [pc, #16]	; (8002998 <HAL_ADC_IRQHandler+0x22c>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d009      	beq.n	80029a0 <HAL_ADC_IRQHandler+0x234>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	e007      	b.n	80029a2 <HAL_ADC_IRQHandler+0x236>
 8002992:	bf00      	nop
 8002994:	50040300 	.word	0x50040300
 8002998:	50040100 	.word	0x50040100
 800299c:	50040000 	.word	0x50040000
 80029a0:	4b7d      	ldr	r3, [pc, #500]	; (8002b98 <HAL_ADC_IRQHandler+0x42c>)
 80029a2:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d047      	beq.n	8002a40 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80029b0:	6a3b      	ldr	r3, [r7, #32]
 80029b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d007      	beq.n	80029ca <HAL_ADC_IRQHandler+0x25e>
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d03f      	beq.n	8002a40 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80029c0:	6a3b      	ldr	r3, [r7, #32]
 80029c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d13a      	bne.n	8002a40 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d4:	2b40      	cmp	r3, #64	; 0x40
 80029d6:	d133      	bne.n	8002a40 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80029d8:	6a3b      	ldr	r3, [r7, #32]
 80029da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d12e      	bne.n	8002a40 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7ff fbb6 	bl	8002158 <LL_ADC_INJ_IsConversionOngoing>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d11a      	bne.n	8002a28 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	685a      	ldr	r2, [r3, #4]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002a00:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d112      	bne.n	8002a40 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a1e:	f043 0201 	orr.w	r2, r3, #1
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	655a      	str	r2, [r3, #84]	; 0x54
 8002a26:	e00b      	b.n	8002a40 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a2c:	f043 0210 	orr.w	r2, r3, #16
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a38:	f043 0201 	orr.w	r2, r3, #1
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 fd43 	bl	80034cc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2260      	movs	r2, #96	; 0x60
 8002a4c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d011      	beq.n	8002a7c <HAL_ADC_IRQHandler+0x310>
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00c      	beq.n	8002a7c <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a66:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 f8a0 	bl	8002bb4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2280      	movs	r2, #128	; 0x80
 8002a7a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d012      	beq.n	8002aac <HAL_ADC_IRQHandler+0x340>
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d00d      	beq.n	8002aac <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a94:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f000 fd29 	bl	80034f4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002aaa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d012      	beq.n	8002adc <HAL_ADC_IRQHandler+0x370>
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d00d      	beq.n	8002adc <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f000 fd1b 	bl	8003508 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ada:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	f003 0310 	and.w	r3, r3, #16
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d036      	beq.n	8002b54 <HAL_ADC_IRQHandler+0x3e8>
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	f003 0310 	and.w	r3, r3, #16
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d031      	beq.n	8002b54 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d102      	bne.n	8002afe <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8002af8:	2301      	movs	r3, #1
 8002afa:	627b      	str	r3, [r7, #36]	; 0x24
 8002afc:	e014      	b.n	8002b28 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d008      	beq.n	8002b16 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002b04:	4825      	ldr	r0, [pc, #148]	; (8002b9c <HAL_ADC_IRQHandler+0x430>)
 8002b06:	f7ff fa7d 	bl	8002004 <LL_ADC_GetMultiDMATransfer>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d00b      	beq.n	8002b28 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002b10:	2301      	movs	r3, #1
 8002b12:	627b      	str	r3, [r7, #36]	; 0x24
 8002b14:	e008      	b.n	8002b28 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002b24:	2301      	movs	r3, #1
 8002b26:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d10e      	bne.n	8002b4c <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b32:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b3e:	f043 0202 	orr.w	r2, r3, #2
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 f83e 	bl	8002bc8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2210      	movs	r2, #16
 8002b52:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d018      	beq.n	8002b90 <HAL_ADC_IRQHandler+0x424>
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d013      	beq.n	8002b90 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b6c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b78:	f043 0208 	orr.w	r2, r3, #8
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b88:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 fca8 	bl	80034e0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002b90:	bf00      	nop
 8002b92:	3728      	adds	r7, #40	; 0x28
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	50040000 	.word	0x50040000
 8002b9c:	50040300 	.word	0x50040300

08002ba0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b0b6      	sub	sp, #216	; 0xd8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002be6:	2300      	movs	r3, #0
 8002be8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002bec:	2300      	movs	r3, #0
 8002bee:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d101      	bne.n	8002bfe <HAL_ADC_ConfigChannel+0x22>
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	e3c7      	b.n	800338e <HAL_ADC_ConfigChannel+0x7b2>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2201      	movs	r2, #1
 8002c02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7ff fa91 	bl	8002132 <LL_ADC_REG_IsConversionOngoing>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f040 83a8 	bne.w	8003368 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	2b05      	cmp	r3, #5
 8002c1e:	d824      	bhi.n	8002c6a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	3b02      	subs	r3, #2
 8002c26:	2b03      	cmp	r3, #3
 8002c28:	d81b      	bhi.n	8002c62 <HAL_ADC_ConfigChannel+0x86>
 8002c2a:	a201      	add	r2, pc, #4	; (adr r2, 8002c30 <HAL_ADC_ConfigChannel+0x54>)
 8002c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c30:	08002c41 	.word	0x08002c41
 8002c34:	08002c49 	.word	0x08002c49
 8002c38:	08002c51 	.word	0x08002c51
 8002c3c:	08002c59 	.word	0x08002c59
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	220c      	movs	r2, #12
 8002c44:	605a      	str	r2, [r3, #4]
          break;
 8002c46:	e011      	b.n	8002c6c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	2212      	movs	r2, #18
 8002c4c:	605a      	str	r2, [r3, #4]
          break;
 8002c4e:	e00d      	b.n	8002c6c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	2218      	movs	r2, #24
 8002c54:	605a      	str	r2, [r3, #4]
          break;
 8002c56:	e009      	b.n	8002c6c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c5e:	605a      	str	r2, [r3, #4]
          break;
 8002c60:	e004      	b.n	8002c6c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	2206      	movs	r2, #6
 8002c66:	605a      	str	r2, [r3, #4]
          break;
 8002c68:	e000      	b.n	8002c6c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002c6a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6818      	ldr	r0, [r3, #0]
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	6859      	ldr	r1, [r3, #4]
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	461a      	mov	r2, r3
 8002c7a:	f7ff f927 	bl	8001ecc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7ff fa55 	bl	8002132 <LL_ADC_REG_IsConversionOngoing>
 8002c88:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7ff fa61 	bl	8002158 <LL_ADC_INJ_IsConversionOngoing>
 8002c96:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c9a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f040 81a6 	bne.w	8002ff0 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ca4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	f040 81a1 	bne.w	8002ff0 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6818      	ldr	r0, [r3, #0]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	6819      	ldr	r1, [r3, #0]
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	461a      	mov	r2, r3
 8002cbc:	f7ff f945 	bl	8001f4a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	695a      	ldr	r2, [r3, #20]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	08db      	lsrs	r3, r3, #3
 8002ccc:	f003 0303 	and.w	r3, r3, #3
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	2b04      	cmp	r3, #4
 8002ce0:	d00a      	beq.n	8002cf8 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6818      	ldr	r0, [r3, #0]
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	6919      	ldr	r1, [r3, #16]
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002cf2:	f7ff f883 	bl	8001dfc <LL_ADC_SetOffset>
 8002cf6:	e17b      	b.n	8002ff0 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7ff f8a0 	bl	8001e44 <LL_ADC_GetOffsetChannel>
 8002d04:	4603      	mov	r3, r0
 8002d06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d10a      	bne.n	8002d24 <HAL_ADC_ConfigChannel+0x148>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2100      	movs	r1, #0
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7ff f895 	bl	8001e44 <LL_ADC_GetOffsetChannel>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	0e9b      	lsrs	r3, r3, #26
 8002d1e:	f003 021f 	and.w	r2, r3, #31
 8002d22:	e01e      	b.n	8002d62 <HAL_ADC_ConfigChannel+0x186>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2100      	movs	r1, #0
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7ff f88a 	bl	8001e44 <LL_ADC_GetOffsetChannel>
 8002d30:	4603      	mov	r3, r0
 8002d32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d36:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002d3a:	fa93 f3a3 	rbit	r3, r3
 8002d3e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002d46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002d4a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002d52:	2320      	movs	r3, #32
 8002d54:	e004      	b.n	8002d60 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002d56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d5a:	fab3 f383 	clz	r3, r3
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d105      	bne.n	8002d7a <HAL_ADC_ConfigChannel+0x19e>
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	0e9b      	lsrs	r3, r3, #26
 8002d74:	f003 031f 	and.w	r3, r3, #31
 8002d78:	e018      	b.n	8002dac <HAL_ADC_ConfigChannel+0x1d0>
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d82:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002d86:	fa93 f3a3 	rbit	r3, r3
 8002d8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002d8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002d96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002d9e:	2320      	movs	r3, #32
 8002da0:	e004      	b.n	8002dac <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002da2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002da6:	fab3 f383 	clz	r3, r3
 8002daa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d106      	bne.n	8002dbe <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2200      	movs	r2, #0
 8002db6:	2100      	movs	r1, #0
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff f859 	bl	8001e70 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2101      	movs	r1, #1
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7ff f83d 	bl	8001e44 <LL_ADC_GetOffsetChannel>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d10a      	bne.n	8002dea <HAL_ADC_ConfigChannel+0x20e>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2101      	movs	r1, #1
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7ff f832 	bl	8001e44 <LL_ADC_GetOffsetChannel>
 8002de0:	4603      	mov	r3, r0
 8002de2:	0e9b      	lsrs	r3, r3, #26
 8002de4:	f003 021f 	and.w	r2, r3, #31
 8002de8:	e01e      	b.n	8002e28 <HAL_ADC_ConfigChannel+0x24c>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2101      	movs	r1, #1
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7ff f827 	bl	8001e44 <LL_ADC_GetOffsetChannel>
 8002df6:	4603      	mov	r3, r0
 8002df8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002e00:	fa93 f3a3 	rbit	r3, r3
 8002e04:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002e08:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002e0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002e10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d101      	bne.n	8002e1c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002e18:	2320      	movs	r3, #32
 8002e1a:	e004      	b.n	8002e26 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002e1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002e20:	fab3 f383 	clz	r3, r3
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d105      	bne.n	8002e40 <HAL_ADC_ConfigChannel+0x264>
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	0e9b      	lsrs	r3, r3, #26
 8002e3a:	f003 031f 	and.w	r3, r3, #31
 8002e3e:	e018      	b.n	8002e72 <HAL_ADC_ConfigChannel+0x296>
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e4c:	fa93 f3a3 	rbit	r3, r3
 8002e50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002e54:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002e58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002e5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002e64:	2320      	movs	r3, #32
 8002e66:	e004      	b.n	8002e72 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002e68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e6c:	fab3 f383 	clz	r3, r3
 8002e70:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d106      	bne.n	8002e84 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	2101      	movs	r1, #1
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7fe fff6 	bl	8001e70 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2102      	movs	r1, #2
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7fe ffda 	bl	8001e44 <LL_ADC_GetOffsetChannel>
 8002e90:	4603      	mov	r3, r0
 8002e92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d10a      	bne.n	8002eb0 <HAL_ADC_ConfigChannel+0x2d4>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2102      	movs	r1, #2
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7fe ffcf 	bl	8001e44 <LL_ADC_GetOffsetChannel>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	0e9b      	lsrs	r3, r3, #26
 8002eaa:	f003 021f 	and.w	r2, r3, #31
 8002eae:	e01e      	b.n	8002eee <HAL_ADC_ConfigChannel+0x312>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2102      	movs	r1, #2
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7fe ffc4 	bl	8001e44 <LL_ADC_GetOffsetChannel>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ec6:	fa93 f3a3 	rbit	r3, r3
 8002eca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002ece:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ed2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002ed6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d101      	bne.n	8002ee2 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002ede:	2320      	movs	r3, #32
 8002ee0:	e004      	b.n	8002eec <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002ee2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002ee6:	fab3 f383 	clz	r3, r3
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d105      	bne.n	8002f06 <HAL_ADC_ConfigChannel+0x32a>
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	0e9b      	lsrs	r3, r3, #26
 8002f00:	f003 031f 	and.w	r3, r3, #31
 8002f04:	e016      	b.n	8002f34 <HAL_ADC_ConfigChannel+0x358>
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f12:	fa93 f3a3 	rbit	r3, r3
 8002f16:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002f18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002f1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002f26:	2320      	movs	r3, #32
 8002f28:	e004      	b.n	8002f34 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002f2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f2e:	fab3 f383 	clz	r3, r3
 8002f32:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d106      	bne.n	8002f46 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	2102      	movs	r1, #2
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7fe ff95 	bl	8001e70 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2103      	movs	r1, #3
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7fe ff79 	bl	8001e44 <LL_ADC_GetOffsetChannel>
 8002f52:	4603      	mov	r3, r0
 8002f54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d10a      	bne.n	8002f72 <HAL_ADC_ConfigChannel+0x396>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2103      	movs	r1, #3
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7fe ff6e 	bl	8001e44 <LL_ADC_GetOffsetChannel>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	0e9b      	lsrs	r3, r3, #26
 8002f6c:	f003 021f 	and.w	r2, r3, #31
 8002f70:	e017      	b.n	8002fa2 <HAL_ADC_ConfigChannel+0x3c6>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2103      	movs	r1, #3
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7fe ff63 	bl	8001e44 <LL_ADC_GetOffsetChannel>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f84:	fa93 f3a3 	rbit	r3, r3
 8002f88:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002f8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f8c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002f8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d101      	bne.n	8002f98 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002f94:	2320      	movs	r3, #32
 8002f96:	e003      	b.n	8002fa0 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002f98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f9a:	fab3 f383 	clz	r3, r3
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d105      	bne.n	8002fba <HAL_ADC_ConfigChannel+0x3de>
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	0e9b      	lsrs	r3, r3, #26
 8002fb4:	f003 031f 	and.w	r3, r3, #31
 8002fb8:	e011      	b.n	8002fde <HAL_ADC_ConfigChannel+0x402>
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002fc2:	fa93 f3a3 	rbit	r3, r3
 8002fc6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002fc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002fca:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002fcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002fd2:	2320      	movs	r3, #32
 8002fd4:	e003      	b.n	8002fde <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002fd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fd8:	fab3 f383 	clz	r3, r3
 8002fdc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d106      	bne.n	8002ff0 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	2103      	movs	r1, #3
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7fe ff40 	bl	8001e70 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7ff f875 	bl	80020e4 <LL_ADC_IsEnabled>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f040 813f 	bne.w	8003280 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6818      	ldr	r0, [r3, #0]
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	6819      	ldr	r1, [r3, #0]
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	461a      	mov	r2, r3
 8003010:	f7fe ffc6 	bl	8001fa0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	4a8e      	ldr	r2, [pc, #568]	; (8003254 <HAL_ADC_ConfigChannel+0x678>)
 800301a:	4293      	cmp	r3, r2
 800301c:	f040 8130 	bne.w	8003280 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800302c:	2b00      	cmp	r3, #0
 800302e:	d10b      	bne.n	8003048 <HAL_ADC_ConfigChannel+0x46c>
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	0e9b      	lsrs	r3, r3, #26
 8003036:	3301      	adds	r3, #1
 8003038:	f003 031f 	and.w	r3, r3, #31
 800303c:	2b09      	cmp	r3, #9
 800303e:	bf94      	ite	ls
 8003040:	2301      	movls	r3, #1
 8003042:	2300      	movhi	r3, #0
 8003044:	b2db      	uxtb	r3, r3
 8003046:	e019      	b.n	800307c <HAL_ADC_ConfigChannel+0x4a0>
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003050:	fa93 f3a3 	rbit	r3, r3
 8003054:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003056:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003058:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800305a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800305c:	2b00      	cmp	r3, #0
 800305e:	d101      	bne.n	8003064 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003060:	2320      	movs	r3, #32
 8003062:	e003      	b.n	800306c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003064:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003066:	fab3 f383 	clz	r3, r3
 800306a:	b2db      	uxtb	r3, r3
 800306c:	3301      	adds	r3, #1
 800306e:	f003 031f 	and.w	r3, r3, #31
 8003072:	2b09      	cmp	r3, #9
 8003074:	bf94      	ite	ls
 8003076:	2301      	movls	r3, #1
 8003078:	2300      	movhi	r3, #0
 800307a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800307c:	2b00      	cmp	r3, #0
 800307e:	d079      	beq.n	8003174 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003088:	2b00      	cmp	r3, #0
 800308a:	d107      	bne.n	800309c <HAL_ADC_ConfigChannel+0x4c0>
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	0e9b      	lsrs	r3, r3, #26
 8003092:	3301      	adds	r3, #1
 8003094:	069b      	lsls	r3, r3, #26
 8003096:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800309a:	e015      	b.n	80030c8 <HAL_ADC_ConfigChannel+0x4ec>
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030a4:	fa93 f3a3 	rbit	r3, r3
 80030a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80030aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030ac:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80030ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d101      	bne.n	80030b8 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80030b4:	2320      	movs	r3, #32
 80030b6:	e003      	b.n	80030c0 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80030b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030ba:	fab3 f383 	clz	r3, r3
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	3301      	adds	r3, #1
 80030c2:	069b      	lsls	r3, r3, #26
 80030c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d109      	bne.n	80030e8 <HAL_ADC_ConfigChannel+0x50c>
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	0e9b      	lsrs	r3, r3, #26
 80030da:	3301      	adds	r3, #1
 80030dc:	f003 031f 	and.w	r3, r3, #31
 80030e0:	2101      	movs	r1, #1
 80030e2:	fa01 f303 	lsl.w	r3, r1, r3
 80030e6:	e017      	b.n	8003118 <HAL_ADC_ConfigChannel+0x53c>
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030f0:	fa93 f3a3 	rbit	r3, r3
 80030f4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80030f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030f8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80030fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d101      	bne.n	8003104 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8003100:	2320      	movs	r3, #32
 8003102:	e003      	b.n	800310c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8003104:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003106:	fab3 f383 	clz	r3, r3
 800310a:	b2db      	uxtb	r3, r3
 800310c:	3301      	adds	r3, #1
 800310e:	f003 031f 	and.w	r3, r3, #31
 8003112:	2101      	movs	r1, #1
 8003114:	fa01 f303 	lsl.w	r3, r1, r3
 8003118:	ea42 0103 	orr.w	r1, r2, r3
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003124:	2b00      	cmp	r3, #0
 8003126:	d10a      	bne.n	800313e <HAL_ADC_ConfigChannel+0x562>
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	0e9b      	lsrs	r3, r3, #26
 800312e:	3301      	adds	r3, #1
 8003130:	f003 021f 	and.w	r2, r3, #31
 8003134:	4613      	mov	r3, r2
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	4413      	add	r3, r2
 800313a:	051b      	lsls	r3, r3, #20
 800313c:	e018      	b.n	8003170 <HAL_ADC_ConfigChannel+0x594>
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003146:	fa93 f3a3 	rbit	r3, r3
 800314a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800314c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800314e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003152:	2b00      	cmp	r3, #0
 8003154:	d101      	bne.n	800315a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8003156:	2320      	movs	r3, #32
 8003158:	e003      	b.n	8003162 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800315a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800315c:	fab3 f383 	clz	r3, r3
 8003160:	b2db      	uxtb	r3, r3
 8003162:	3301      	adds	r3, #1
 8003164:	f003 021f 	and.w	r2, r3, #31
 8003168:	4613      	mov	r3, r2
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	4413      	add	r3, r2
 800316e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003170:	430b      	orrs	r3, r1
 8003172:	e080      	b.n	8003276 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800317c:	2b00      	cmp	r3, #0
 800317e:	d107      	bne.n	8003190 <HAL_ADC_ConfigChannel+0x5b4>
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	0e9b      	lsrs	r3, r3, #26
 8003186:	3301      	adds	r3, #1
 8003188:	069b      	lsls	r3, r3, #26
 800318a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800318e:	e015      	b.n	80031bc <HAL_ADC_ConfigChannel+0x5e0>
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003198:	fa93 f3a3 	rbit	r3, r3
 800319c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800319e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80031a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d101      	bne.n	80031ac <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80031a8:	2320      	movs	r3, #32
 80031aa:	e003      	b.n	80031b4 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80031ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ae:	fab3 f383 	clz	r3, r3
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	3301      	adds	r3, #1
 80031b6:	069b      	lsls	r3, r3, #26
 80031b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d109      	bne.n	80031dc <HAL_ADC_ConfigChannel+0x600>
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	0e9b      	lsrs	r3, r3, #26
 80031ce:	3301      	adds	r3, #1
 80031d0:	f003 031f 	and.w	r3, r3, #31
 80031d4:	2101      	movs	r1, #1
 80031d6:	fa01 f303 	lsl.w	r3, r1, r3
 80031da:	e017      	b.n	800320c <HAL_ADC_ConfigChannel+0x630>
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e2:	6a3b      	ldr	r3, [r7, #32]
 80031e4:	fa93 f3a3 	rbit	r3, r3
 80031e8:	61fb      	str	r3, [r7, #28]
  return result;
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80031ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d101      	bne.n	80031f8 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80031f4:	2320      	movs	r3, #32
 80031f6:	e003      	b.n	8003200 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80031f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fa:	fab3 f383 	clz	r3, r3
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	3301      	adds	r3, #1
 8003202:	f003 031f 	and.w	r3, r3, #31
 8003206:	2101      	movs	r1, #1
 8003208:	fa01 f303 	lsl.w	r3, r1, r3
 800320c:	ea42 0103 	orr.w	r1, r2, r3
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003218:	2b00      	cmp	r3, #0
 800321a:	d10d      	bne.n	8003238 <HAL_ADC_ConfigChannel+0x65c>
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	0e9b      	lsrs	r3, r3, #26
 8003222:	3301      	adds	r3, #1
 8003224:	f003 021f 	and.w	r2, r3, #31
 8003228:	4613      	mov	r3, r2
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	4413      	add	r3, r2
 800322e:	3b1e      	subs	r3, #30
 8003230:	051b      	lsls	r3, r3, #20
 8003232:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003236:	e01d      	b.n	8003274 <HAL_ADC_ConfigChannel+0x698>
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	fa93 f3a3 	rbit	r3, r3
 8003244:	613b      	str	r3, [r7, #16]
  return result;
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d103      	bne.n	8003258 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003250:	2320      	movs	r3, #32
 8003252:	e005      	b.n	8003260 <HAL_ADC_ConfigChannel+0x684>
 8003254:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	fab3 f383 	clz	r3, r3
 800325e:	b2db      	uxtb	r3, r3
 8003260:	3301      	adds	r3, #1
 8003262:	f003 021f 	and.w	r2, r3, #31
 8003266:	4613      	mov	r3, r2
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	4413      	add	r3, r2
 800326c:	3b1e      	subs	r3, #30
 800326e:	051b      	lsls	r3, r3, #20
 8003270:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003274:	430b      	orrs	r3, r1
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	6892      	ldr	r2, [r2, #8]
 800327a:	4619      	mov	r1, r3
 800327c:	f7fe fe65 	bl	8001f4a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	4b44      	ldr	r3, [pc, #272]	; (8003398 <HAL_ADC_ConfigChannel+0x7bc>)
 8003286:	4013      	ands	r3, r2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d07a      	beq.n	8003382 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800328c:	4843      	ldr	r0, [pc, #268]	; (800339c <HAL_ADC_ConfigChannel+0x7c0>)
 800328e:	f7fe fda7 	bl	8001de0 <LL_ADC_GetCommonPathInternalCh>
 8003292:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a41      	ldr	r2, [pc, #260]	; (80033a0 <HAL_ADC_ConfigChannel+0x7c4>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d12c      	bne.n	80032fa <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80032a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80032a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d126      	bne.n	80032fa <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a3c      	ldr	r2, [pc, #240]	; (80033a4 <HAL_ADC_ConfigChannel+0x7c8>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d004      	beq.n	80032c0 <HAL_ADC_ConfigChannel+0x6e4>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a3b      	ldr	r2, [pc, #236]	; (80033a8 <HAL_ADC_ConfigChannel+0x7cc>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d15d      	bne.n	800337c <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80032c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80032c8:	4619      	mov	r1, r3
 80032ca:	4834      	ldr	r0, [pc, #208]	; (800339c <HAL_ADC_ConfigChannel+0x7c0>)
 80032cc:	f7fe fd75 	bl	8001dba <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032d0:	4b36      	ldr	r3, [pc, #216]	; (80033ac <HAL_ADC_ConfigChannel+0x7d0>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	099b      	lsrs	r3, r3, #6
 80032d6:	4a36      	ldr	r2, [pc, #216]	; (80033b0 <HAL_ADC_ConfigChannel+0x7d4>)
 80032d8:	fba2 2303 	umull	r2, r3, r2, r3
 80032dc:	099b      	lsrs	r3, r3, #6
 80032de:	1c5a      	adds	r2, r3, #1
 80032e0:	4613      	mov	r3, r2
 80032e2:	005b      	lsls	r3, r3, #1
 80032e4:	4413      	add	r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80032ea:	e002      	b.n	80032f2 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	3b01      	subs	r3, #1
 80032f0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d1f9      	bne.n	80032ec <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80032f8:	e040      	b.n	800337c <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a2d      	ldr	r2, [pc, #180]	; (80033b4 <HAL_ADC_ConfigChannel+0x7d8>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d118      	bne.n	8003336 <HAL_ADC_ConfigChannel+0x75a>
 8003304:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003308:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d112      	bne.n	8003336 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a23      	ldr	r2, [pc, #140]	; (80033a4 <HAL_ADC_ConfigChannel+0x7c8>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d004      	beq.n	8003324 <HAL_ADC_ConfigChannel+0x748>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a22      	ldr	r2, [pc, #136]	; (80033a8 <HAL_ADC_ConfigChannel+0x7cc>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d12d      	bne.n	8003380 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003324:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003328:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800332c:	4619      	mov	r1, r3
 800332e:	481b      	ldr	r0, [pc, #108]	; (800339c <HAL_ADC_ConfigChannel+0x7c0>)
 8003330:	f7fe fd43 	bl	8001dba <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003334:	e024      	b.n	8003380 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a1f      	ldr	r2, [pc, #124]	; (80033b8 <HAL_ADC_ConfigChannel+0x7dc>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d120      	bne.n	8003382 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003340:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003344:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d11a      	bne.n	8003382 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a14      	ldr	r2, [pc, #80]	; (80033a4 <HAL_ADC_ConfigChannel+0x7c8>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d115      	bne.n	8003382 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003356:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800335a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800335e:	4619      	mov	r1, r3
 8003360:	480e      	ldr	r0, [pc, #56]	; (800339c <HAL_ADC_ConfigChannel+0x7c0>)
 8003362:	f7fe fd2a 	bl	8001dba <LL_ADC_SetCommonPathInternalCh>
 8003366:	e00c      	b.n	8003382 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800336c:	f043 0220 	orr.w	r2, r3, #32
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800337a:	e002      	b.n	8003382 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800337c:	bf00      	nop
 800337e:	e000      	b.n	8003382 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003380:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800338a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800338e:	4618      	mov	r0, r3
 8003390:	37d8      	adds	r7, #216	; 0xd8
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	80080000 	.word	0x80080000
 800339c:	50040300 	.word	0x50040300
 80033a0:	c7520000 	.word	0xc7520000
 80033a4:	50040000 	.word	0x50040000
 80033a8:	50040200 	.word	0x50040200
 80033ac:	20000000 	.word	0x20000000
 80033b0:	053e2d63 	.word	0x053e2d63
 80033b4:	cb840000 	.word	0xcb840000
 80033b8:	80000001 	.word	0x80000001

080033bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7fe fe8b 	bl	80020e4 <LL_ADC_IsEnabled>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d14d      	bne.n	8003470 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	689a      	ldr	r2, [r3, #8]
 80033da:	4b28      	ldr	r3, [pc, #160]	; (800347c <ADC_Enable+0xc0>)
 80033dc:	4013      	ands	r3, r2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00d      	beq.n	80033fe <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e6:	f043 0210 	orr.w	r2, r3, #16
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f2:	f043 0201 	orr.w	r2, r3, #1
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e039      	b.n	8003472 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4618      	mov	r0, r3
 8003404:	f7fe fe5a 	bl	80020bc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003408:	f7fe fc94 	bl	8001d34 <HAL_GetTick>
 800340c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800340e:	e028      	b.n	8003462 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4618      	mov	r0, r3
 8003416:	f7fe fe65 	bl	80020e4 <LL_ADC_IsEnabled>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d104      	bne.n	800342a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4618      	mov	r0, r3
 8003426:	f7fe fe49 	bl	80020bc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800342a:	f7fe fc83 	bl	8001d34 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	2b02      	cmp	r3, #2
 8003436:	d914      	bls.n	8003462 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b01      	cmp	r3, #1
 8003444:	d00d      	beq.n	8003462 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800344a:	f043 0210 	orr.w	r2, r3, #16
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003456:	f043 0201 	orr.w	r2, r3, #1
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e007      	b.n	8003472 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0301 	and.w	r3, r3, #1
 800346c:	2b01      	cmp	r3, #1
 800346e:	d1cf      	bne.n	8003410 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3710      	adds	r7, #16
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	8000003f 	.word	0x8000003f

08003480 <LL_ADC_IsEnabled>:
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	2b01      	cmp	r3, #1
 8003492:	d101      	bne.n	8003498 <LL_ADC_IsEnabled+0x18>
 8003494:	2301      	movs	r3, #1
 8003496:	e000      	b.n	800349a <LL_ADC_IsEnabled+0x1a>
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	370c      	adds	r7, #12
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr

080034a6 <LL_ADC_REG_IsConversionOngoing>:
{
 80034a6:	b480      	push	{r7}
 80034a8:	b083      	sub	sp, #12
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f003 0304 	and.w	r3, r3, #4
 80034b6:	2b04      	cmp	r3, #4
 80034b8:	d101      	bne.n	80034be <LL_ADC_REG_IsConversionOngoing+0x18>
 80034ba:	2301      	movs	r3, #1
 80034bc:	e000      	b.n	80034c0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80034be:	2300      	movs	r3, #0
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003510:	bf00      	nop
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003530:	b590      	push	{r4, r7, lr}
 8003532:	b09f      	sub	sp, #124	; 0x7c
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800353a:	2300      	movs	r3, #0
 800353c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003546:	2b01      	cmp	r3, #1
 8003548:	d101      	bne.n	800354e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800354a:	2302      	movs	r3, #2
 800354c:	e093      	b.n	8003676 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2201      	movs	r2, #1
 8003552:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003556:	2300      	movs	r3, #0
 8003558:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800355a:	2300      	movs	r3, #0
 800355c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a47      	ldr	r2, [pc, #284]	; (8003680 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d102      	bne.n	800356e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003568:	4b46      	ldr	r3, [pc, #280]	; (8003684 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800356a:	60bb      	str	r3, [r7, #8]
 800356c:	e001      	b.n	8003572 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800356e:	2300      	movs	r3, #0
 8003570:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d10b      	bne.n	8003590 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800357c:	f043 0220 	orr.w	r2, r3, #32
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e072      	b.n	8003676 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	4618      	mov	r0, r3
 8003594:	f7ff ff87 	bl	80034a6 <LL_ADC_REG_IsConversionOngoing>
 8003598:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4618      	mov	r0, r3
 80035a0:	f7ff ff81 	bl	80034a6 <LL_ADC_REG_IsConversionOngoing>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d154      	bne.n	8003654 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80035aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d151      	bne.n	8003654 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80035b0:	4b35      	ldr	r3, [pc, #212]	; (8003688 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80035b2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d02c      	beq.n	8003616 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80035bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	6859      	ldr	r1, [r3, #4]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80035ce:	035b      	lsls	r3, r3, #13
 80035d0:	430b      	orrs	r3, r1
 80035d2:	431a      	orrs	r2, r3
 80035d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035d6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035d8:	4829      	ldr	r0, [pc, #164]	; (8003680 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80035da:	f7ff ff51 	bl	8003480 <LL_ADC_IsEnabled>
 80035de:	4604      	mov	r4, r0
 80035e0:	4828      	ldr	r0, [pc, #160]	; (8003684 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80035e2:	f7ff ff4d 	bl	8003480 <LL_ADC_IsEnabled>
 80035e6:	4603      	mov	r3, r0
 80035e8:	431c      	orrs	r4, r3
 80035ea:	4828      	ldr	r0, [pc, #160]	; (800368c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80035ec:	f7ff ff48 	bl	8003480 <LL_ADC_IsEnabled>
 80035f0:	4603      	mov	r3, r0
 80035f2:	4323      	orrs	r3, r4
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d137      	bne.n	8003668 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80035f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003600:	f023 030f 	bic.w	r3, r3, #15
 8003604:	683a      	ldr	r2, [r7, #0]
 8003606:	6811      	ldr	r1, [r2, #0]
 8003608:	683a      	ldr	r2, [r7, #0]
 800360a:	6892      	ldr	r2, [r2, #8]
 800360c:	430a      	orrs	r2, r1
 800360e:	431a      	orrs	r2, r3
 8003610:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003612:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003614:	e028      	b.n	8003668 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003616:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800361e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003620:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003622:	4817      	ldr	r0, [pc, #92]	; (8003680 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003624:	f7ff ff2c 	bl	8003480 <LL_ADC_IsEnabled>
 8003628:	4604      	mov	r4, r0
 800362a:	4816      	ldr	r0, [pc, #88]	; (8003684 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800362c:	f7ff ff28 	bl	8003480 <LL_ADC_IsEnabled>
 8003630:	4603      	mov	r3, r0
 8003632:	431c      	orrs	r4, r3
 8003634:	4815      	ldr	r0, [pc, #84]	; (800368c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003636:	f7ff ff23 	bl	8003480 <LL_ADC_IsEnabled>
 800363a:	4603      	mov	r3, r0
 800363c:	4323      	orrs	r3, r4
 800363e:	2b00      	cmp	r3, #0
 8003640:	d112      	bne.n	8003668 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003642:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800364a:	f023 030f 	bic.w	r3, r3, #15
 800364e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003650:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003652:	e009      	b.n	8003668 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003658:	f043 0220 	orr.w	r2, r3, #32
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003666:	e000      	b.n	800366a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003668:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003672:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003676:	4618      	mov	r0, r3
 8003678:	377c      	adds	r7, #124	; 0x7c
 800367a:	46bd      	mov	sp, r7
 800367c:	bd90      	pop	{r4, r7, pc}
 800367e:	bf00      	nop
 8003680:	50040000 	.word	0x50040000
 8003684:	50040100 	.word	0x50040100
 8003688:	50040300 	.word	0x50040300
 800368c:	50040200 	.word	0x50040200

08003690 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003690:	b480      	push	{r7}
 8003692:	b085      	sub	sp, #20
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f003 0307 	and.w	r3, r3, #7
 800369e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036a0:	4b0c      	ldr	r3, [pc, #48]	; (80036d4 <__NVIC_SetPriorityGrouping+0x44>)
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036a6:	68ba      	ldr	r2, [r7, #8]
 80036a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036ac:	4013      	ands	r3, r2
 80036ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036c2:	4a04      	ldr	r2, [pc, #16]	; (80036d4 <__NVIC_SetPriorityGrouping+0x44>)
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	60d3      	str	r3, [r2, #12]
}
 80036c8:	bf00      	nop
 80036ca:	3714      	adds	r7, #20
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr
 80036d4:	e000ed00 	.word	0xe000ed00

080036d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036d8:	b480      	push	{r7}
 80036da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036dc:	4b04      	ldr	r3, [pc, #16]	; (80036f0 <__NVIC_GetPriorityGrouping+0x18>)
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	0a1b      	lsrs	r3, r3, #8
 80036e2:	f003 0307 	and.w	r3, r3, #7
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr
 80036f0:	e000ed00 	.word	0xe000ed00

080036f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	4603      	mov	r3, r0
 80036fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003702:	2b00      	cmp	r3, #0
 8003704:	db0b      	blt.n	800371e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003706:	79fb      	ldrb	r3, [r7, #7]
 8003708:	f003 021f 	and.w	r2, r3, #31
 800370c:	4907      	ldr	r1, [pc, #28]	; (800372c <__NVIC_EnableIRQ+0x38>)
 800370e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003712:	095b      	lsrs	r3, r3, #5
 8003714:	2001      	movs	r0, #1
 8003716:	fa00 f202 	lsl.w	r2, r0, r2
 800371a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800371e:	bf00      	nop
 8003720:	370c      	adds	r7, #12
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	e000e100 	.word	0xe000e100

08003730 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	4603      	mov	r3, r0
 8003738:	6039      	str	r1, [r7, #0]
 800373a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800373c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003740:	2b00      	cmp	r3, #0
 8003742:	db0a      	blt.n	800375a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	b2da      	uxtb	r2, r3
 8003748:	490c      	ldr	r1, [pc, #48]	; (800377c <__NVIC_SetPriority+0x4c>)
 800374a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800374e:	0112      	lsls	r2, r2, #4
 8003750:	b2d2      	uxtb	r2, r2
 8003752:	440b      	add	r3, r1
 8003754:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003758:	e00a      	b.n	8003770 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	b2da      	uxtb	r2, r3
 800375e:	4908      	ldr	r1, [pc, #32]	; (8003780 <__NVIC_SetPriority+0x50>)
 8003760:	79fb      	ldrb	r3, [r7, #7]
 8003762:	f003 030f 	and.w	r3, r3, #15
 8003766:	3b04      	subs	r3, #4
 8003768:	0112      	lsls	r2, r2, #4
 800376a:	b2d2      	uxtb	r2, r2
 800376c:	440b      	add	r3, r1
 800376e:	761a      	strb	r2, [r3, #24]
}
 8003770:	bf00      	nop
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr
 800377c:	e000e100 	.word	0xe000e100
 8003780:	e000ed00 	.word	0xe000ed00

08003784 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003784:	b480      	push	{r7}
 8003786:	b089      	sub	sp, #36	; 0x24
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f003 0307 	and.w	r3, r3, #7
 8003796:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	f1c3 0307 	rsb	r3, r3, #7
 800379e:	2b04      	cmp	r3, #4
 80037a0:	bf28      	it	cs
 80037a2:	2304      	movcs	r3, #4
 80037a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	3304      	adds	r3, #4
 80037aa:	2b06      	cmp	r3, #6
 80037ac:	d902      	bls.n	80037b4 <NVIC_EncodePriority+0x30>
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	3b03      	subs	r3, #3
 80037b2:	e000      	b.n	80037b6 <NVIC_EncodePriority+0x32>
 80037b4:	2300      	movs	r3, #0
 80037b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037b8:	f04f 32ff 	mov.w	r2, #4294967295
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	fa02 f303 	lsl.w	r3, r2, r3
 80037c2:	43da      	mvns	r2, r3
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	401a      	ands	r2, r3
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037cc:	f04f 31ff 	mov.w	r1, #4294967295
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	fa01 f303 	lsl.w	r3, r1, r3
 80037d6:	43d9      	mvns	r1, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037dc:	4313      	orrs	r3, r2
         );
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3724      	adds	r7, #36	; 0x24
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
	...

080037ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	3b01      	subs	r3, #1
 80037f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037fc:	d301      	bcc.n	8003802 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037fe:	2301      	movs	r3, #1
 8003800:	e00f      	b.n	8003822 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003802:	4a0a      	ldr	r2, [pc, #40]	; (800382c <SysTick_Config+0x40>)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	3b01      	subs	r3, #1
 8003808:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800380a:	210f      	movs	r1, #15
 800380c:	f04f 30ff 	mov.w	r0, #4294967295
 8003810:	f7ff ff8e 	bl	8003730 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003814:	4b05      	ldr	r3, [pc, #20]	; (800382c <SysTick_Config+0x40>)
 8003816:	2200      	movs	r2, #0
 8003818:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800381a:	4b04      	ldr	r3, [pc, #16]	; (800382c <SysTick_Config+0x40>)
 800381c:	2207      	movs	r2, #7
 800381e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3708      	adds	r7, #8
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	e000e010 	.word	0xe000e010

08003830 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f7ff ff29 	bl	8003690 <__NVIC_SetPriorityGrouping>
}
 800383e:	bf00      	nop
 8003840:	3708      	adds	r7, #8
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b086      	sub	sp, #24
 800384a:	af00      	add	r7, sp, #0
 800384c:	4603      	mov	r3, r0
 800384e:	60b9      	str	r1, [r7, #8]
 8003850:	607a      	str	r2, [r7, #4]
 8003852:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003854:	2300      	movs	r3, #0
 8003856:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003858:	f7ff ff3e 	bl	80036d8 <__NVIC_GetPriorityGrouping>
 800385c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	68b9      	ldr	r1, [r7, #8]
 8003862:	6978      	ldr	r0, [r7, #20]
 8003864:	f7ff ff8e 	bl	8003784 <NVIC_EncodePriority>
 8003868:	4602      	mov	r2, r0
 800386a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800386e:	4611      	mov	r1, r2
 8003870:	4618      	mov	r0, r3
 8003872:	f7ff ff5d 	bl	8003730 <__NVIC_SetPriority>
}
 8003876:	bf00      	nop
 8003878:	3718      	adds	r7, #24
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}

0800387e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	b082      	sub	sp, #8
 8003882:	af00      	add	r7, sp, #0
 8003884:	4603      	mov	r3, r0
 8003886:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800388c:	4618      	mov	r0, r3
 800388e:	f7ff ff31 	bl	80036f4 <__NVIC_EnableIRQ>
}
 8003892:	bf00      	nop
 8003894:	3708      	adds	r7, #8
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b082      	sub	sp, #8
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f7ff ffa2 	bl	80037ec <SysTick_Config>
 80038a8:	4603      	mov	r3, r0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3708      	adds	r7, #8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
	...

080038b4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e098      	b.n	80039f8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	461a      	mov	r2, r3
 80038cc:	4b4d      	ldr	r3, [pc, #308]	; (8003a04 <HAL_DMA_Init+0x150>)
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d80f      	bhi.n	80038f2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	461a      	mov	r2, r3
 80038d8:	4b4b      	ldr	r3, [pc, #300]	; (8003a08 <HAL_DMA_Init+0x154>)
 80038da:	4413      	add	r3, r2
 80038dc:	4a4b      	ldr	r2, [pc, #300]	; (8003a0c <HAL_DMA_Init+0x158>)
 80038de:	fba2 2303 	umull	r2, r3, r2, r3
 80038e2:	091b      	lsrs	r3, r3, #4
 80038e4:	009a      	lsls	r2, r3, #2
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a48      	ldr	r2, [pc, #288]	; (8003a10 <HAL_DMA_Init+0x15c>)
 80038ee:	641a      	str	r2, [r3, #64]	; 0x40
 80038f0:	e00e      	b.n	8003910 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	461a      	mov	r2, r3
 80038f8:	4b46      	ldr	r3, [pc, #280]	; (8003a14 <HAL_DMA_Init+0x160>)
 80038fa:	4413      	add	r3, r2
 80038fc:	4a43      	ldr	r2, [pc, #268]	; (8003a0c <HAL_DMA_Init+0x158>)
 80038fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003902:	091b      	lsrs	r3, r3, #4
 8003904:	009a      	lsls	r2, r3, #2
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a42      	ldr	r2, [pc, #264]	; (8003a18 <HAL_DMA_Init+0x164>)
 800390e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2202      	movs	r2, #2
 8003914:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800392a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003934:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003940:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800394c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	4313      	orrs	r3, r2
 8003958:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800396a:	d039      	beq.n	80039e0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003970:	4a27      	ldr	r2, [pc, #156]	; (8003a10 <HAL_DMA_Init+0x15c>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d11a      	bne.n	80039ac <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003976:	4b29      	ldr	r3, [pc, #164]	; (8003a1c <HAL_DMA_Init+0x168>)
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397e:	f003 031c 	and.w	r3, r3, #28
 8003982:	210f      	movs	r1, #15
 8003984:	fa01 f303 	lsl.w	r3, r1, r3
 8003988:	43db      	mvns	r3, r3
 800398a:	4924      	ldr	r1, [pc, #144]	; (8003a1c <HAL_DMA_Init+0x168>)
 800398c:	4013      	ands	r3, r2
 800398e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003990:	4b22      	ldr	r3, [pc, #136]	; (8003a1c <HAL_DMA_Init+0x168>)
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6859      	ldr	r1, [r3, #4]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399c:	f003 031c 	and.w	r3, r3, #28
 80039a0:	fa01 f303 	lsl.w	r3, r1, r3
 80039a4:	491d      	ldr	r1, [pc, #116]	; (8003a1c <HAL_DMA_Init+0x168>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	600b      	str	r3, [r1, #0]
 80039aa:	e019      	b.n	80039e0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80039ac:	4b1c      	ldr	r3, [pc, #112]	; (8003a20 <HAL_DMA_Init+0x16c>)
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b4:	f003 031c 	and.w	r3, r3, #28
 80039b8:	210f      	movs	r1, #15
 80039ba:	fa01 f303 	lsl.w	r3, r1, r3
 80039be:	43db      	mvns	r3, r3
 80039c0:	4917      	ldr	r1, [pc, #92]	; (8003a20 <HAL_DMA_Init+0x16c>)
 80039c2:	4013      	ands	r3, r2
 80039c4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80039c6:	4b16      	ldr	r3, [pc, #88]	; (8003a20 <HAL_DMA_Init+0x16c>)
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6859      	ldr	r1, [r3, #4]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d2:	f003 031c 	and.w	r3, r3, #28
 80039d6:	fa01 f303 	lsl.w	r3, r1, r3
 80039da:	4911      	ldr	r1, [pc, #68]	; (8003a20 <HAL_DMA_Init+0x16c>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2201      	movs	r2, #1
 80039ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80039f6:	2300      	movs	r3, #0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3714      	adds	r7, #20
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr
 8003a04:	40020407 	.word	0x40020407
 8003a08:	bffdfff8 	.word	0xbffdfff8
 8003a0c:	cccccccd 	.word	0xcccccccd
 8003a10:	40020000 	.word	0x40020000
 8003a14:	bffdfbf8 	.word	0xbffdfbf8
 8003a18:	40020400 	.word	0x40020400
 8003a1c:	400200a8 	.word	0x400200a8
 8003a20:	400204a8 	.word	0x400204a8

08003a24 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a40:	f003 031c 	and.w	r3, r3, #28
 8003a44:	2204      	movs	r2, #4
 8003a46:	409a      	lsls	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d026      	beq.n	8003a9e <HAL_DMA_IRQHandler+0x7a>
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	f003 0304 	and.w	r3, r3, #4
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d021      	beq.n	8003a9e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0320 	and.w	r3, r3, #32
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d107      	bne.n	8003a78 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 0204 	bic.w	r2, r2, #4
 8003a76:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7c:	f003 021c 	and.w	r2, r3, #28
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a84:	2104      	movs	r1, #4
 8003a86:	fa01 f202 	lsl.w	r2, r1, r2
 8003a8a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d071      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003a9c:	e06c      	b.n	8003b78 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa2:	f003 031c 	and.w	r3, r3, #28
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	409a      	lsls	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	4013      	ands	r3, r2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d02e      	beq.n	8003b10 <HAL_DMA_IRQHandler+0xec>
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d029      	beq.n	8003b10 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0320 	and.w	r3, r3, #32
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d10b      	bne.n	8003ae2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 020a 	bic.w	r2, r2, #10
 8003ad8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2201      	movs	r2, #1
 8003ade:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae6:	f003 021c 	and.w	r2, r3, #28
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aee:	2102      	movs	r1, #2
 8003af0:	fa01 f202 	lsl.w	r2, r1, r2
 8003af4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d038      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003b0e:	e033      	b.n	8003b78 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b14:	f003 031c 	and.w	r3, r3, #28
 8003b18:	2208      	movs	r2, #8
 8003b1a:	409a      	lsls	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	4013      	ands	r3, r2
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d02a      	beq.n	8003b7a <HAL_DMA_IRQHandler+0x156>
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	f003 0308 	and.w	r3, r3, #8
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d025      	beq.n	8003b7a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f022 020e 	bic.w	r2, r2, #14
 8003b3c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b42:	f003 021c 	and.w	r2, r3, #28
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4a:	2101      	movs	r1, #1
 8003b4c:	fa01 f202 	lsl.w	r2, r1, r2
 8003b50:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2201      	movs	r2, #1
 8003b56:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d004      	beq.n	8003b7a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003b78:	bf00      	nop
 8003b7a:	bf00      	nop
}
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
	...

08003b84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b087      	sub	sp, #28
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b92:	e17f      	b.n	8003e94 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	2101      	movs	r1, #1
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f000 8171 	beq.w	8003e8e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f003 0303 	and.w	r3, r3, #3
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d005      	beq.n	8003bc4 <HAL_GPIO_Init+0x40>
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f003 0303 	and.w	r3, r3, #3
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d130      	bne.n	8003c26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	005b      	lsls	r3, r3, #1
 8003bce:	2203      	movs	r2, #3
 8003bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd4:	43db      	mvns	r3, r3
 8003bd6:	693a      	ldr	r2, [r7, #16]
 8003bd8:	4013      	ands	r3, r2
 8003bda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	68da      	ldr	r2, [r3, #12]
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	005b      	lsls	r3, r3, #1
 8003be4:	fa02 f303 	lsl.w	r3, r2, r3
 8003be8:	693a      	ldr	r2, [r7, #16]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	693a      	ldr	r2, [r7, #16]
 8003bf2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003c02:	43db      	mvns	r3, r3
 8003c04:	693a      	ldr	r2, [r7, #16]
 8003c06:	4013      	ands	r3, r2
 8003c08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	091b      	lsrs	r3, r3, #4
 8003c10:	f003 0201 	and.w	r2, r3, #1
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1a:	693a      	ldr	r2, [r7, #16]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f003 0303 	and.w	r3, r3, #3
 8003c2e:	2b03      	cmp	r3, #3
 8003c30:	d118      	bne.n	8003c64 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003c38:	2201      	movs	r2, #1
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c40:	43db      	mvns	r3, r3
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	4013      	ands	r3, r2
 8003c46:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	08db      	lsrs	r3, r3, #3
 8003c4e:	f003 0201 	and.w	r2, r3, #1
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	fa02 f303 	lsl.w	r3, r2, r3
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	693a      	ldr	r2, [r7, #16]
 8003c62:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f003 0303 	and.w	r3, r3, #3
 8003c6c:	2b03      	cmp	r3, #3
 8003c6e:	d017      	beq.n	8003ca0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	005b      	lsls	r3, r3, #1
 8003c7a:	2203      	movs	r2, #3
 8003c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c80:	43db      	mvns	r3, r3
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	4013      	ands	r3, r2
 8003c86:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	689a      	ldr	r2, [r3, #8]
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	005b      	lsls	r3, r3, #1
 8003c90:	fa02 f303 	lsl.w	r3, r2, r3
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f003 0303 	and.w	r3, r3, #3
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d123      	bne.n	8003cf4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	08da      	lsrs	r2, r3, #3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	3208      	adds	r2, #8
 8003cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	f003 0307 	and.w	r3, r3, #7
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	220f      	movs	r2, #15
 8003cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc8:	43db      	mvns	r3, r3
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	4013      	ands	r3, r2
 8003cce:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	691a      	ldr	r2, [r3, #16]
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	f003 0307 	and.w	r3, r3, #7
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	08da      	lsrs	r2, r3, #3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	3208      	adds	r2, #8
 8003cee:	6939      	ldr	r1, [r7, #16]
 8003cf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	005b      	lsls	r3, r3, #1
 8003cfe:	2203      	movs	r2, #3
 8003d00:	fa02 f303 	lsl.w	r3, r2, r3
 8003d04:	43db      	mvns	r3, r3
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	4013      	ands	r3, r2
 8003d0a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f003 0203 	and.w	r2, r3, #3
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	005b      	lsls	r3, r3, #1
 8003d18:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f000 80ac 	beq.w	8003e8e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d36:	4b5f      	ldr	r3, [pc, #380]	; (8003eb4 <HAL_GPIO_Init+0x330>)
 8003d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d3a:	4a5e      	ldr	r2, [pc, #376]	; (8003eb4 <HAL_GPIO_Init+0x330>)
 8003d3c:	f043 0301 	orr.w	r3, r3, #1
 8003d40:	6613      	str	r3, [r2, #96]	; 0x60
 8003d42:	4b5c      	ldr	r3, [pc, #368]	; (8003eb4 <HAL_GPIO_Init+0x330>)
 8003d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	60bb      	str	r3, [r7, #8]
 8003d4c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003d4e:	4a5a      	ldr	r2, [pc, #360]	; (8003eb8 <HAL_GPIO_Init+0x334>)
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	089b      	lsrs	r3, r3, #2
 8003d54:	3302      	adds	r3, #2
 8003d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	f003 0303 	and.w	r3, r3, #3
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	220f      	movs	r2, #15
 8003d66:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6a:	43db      	mvns	r3, r3
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	4013      	ands	r3, r2
 8003d70:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003d78:	d025      	beq.n	8003dc6 <HAL_GPIO_Init+0x242>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a4f      	ldr	r2, [pc, #316]	; (8003ebc <HAL_GPIO_Init+0x338>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d01f      	beq.n	8003dc2 <HAL_GPIO_Init+0x23e>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a4e      	ldr	r2, [pc, #312]	; (8003ec0 <HAL_GPIO_Init+0x33c>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d019      	beq.n	8003dbe <HAL_GPIO_Init+0x23a>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a4d      	ldr	r2, [pc, #308]	; (8003ec4 <HAL_GPIO_Init+0x340>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d013      	beq.n	8003dba <HAL_GPIO_Init+0x236>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a4c      	ldr	r2, [pc, #304]	; (8003ec8 <HAL_GPIO_Init+0x344>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d00d      	beq.n	8003db6 <HAL_GPIO_Init+0x232>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a4b      	ldr	r2, [pc, #300]	; (8003ecc <HAL_GPIO_Init+0x348>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d007      	beq.n	8003db2 <HAL_GPIO_Init+0x22e>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a4a      	ldr	r2, [pc, #296]	; (8003ed0 <HAL_GPIO_Init+0x34c>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d101      	bne.n	8003dae <HAL_GPIO_Init+0x22a>
 8003daa:	2306      	movs	r3, #6
 8003dac:	e00c      	b.n	8003dc8 <HAL_GPIO_Init+0x244>
 8003dae:	2307      	movs	r3, #7
 8003db0:	e00a      	b.n	8003dc8 <HAL_GPIO_Init+0x244>
 8003db2:	2305      	movs	r3, #5
 8003db4:	e008      	b.n	8003dc8 <HAL_GPIO_Init+0x244>
 8003db6:	2304      	movs	r3, #4
 8003db8:	e006      	b.n	8003dc8 <HAL_GPIO_Init+0x244>
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e004      	b.n	8003dc8 <HAL_GPIO_Init+0x244>
 8003dbe:	2302      	movs	r3, #2
 8003dc0:	e002      	b.n	8003dc8 <HAL_GPIO_Init+0x244>
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e000      	b.n	8003dc8 <HAL_GPIO_Init+0x244>
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	697a      	ldr	r2, [r7, #20]
 8003dca:	f002 0203 	and.w	r2, r2, #3
 8003dce:	0092      	lsls	r2, r2, #2
 8003dd0:	4093      	lsls	r3, r2
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003dd8:	4937      	ldr	r1, [pc, #220]	; (8003eb8 <HAL_GPIO_Init+0x334>)
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	089b      	lsrs	r3, r3, #2
 8003dde:	3302      	adds	r3, #2
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003de6:	4b3b      	ldr	r3, [pc, #236]	; (8003ed4 <HAL_GPIO_Init+0x350>)
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	43db      	mvns	r3, r3
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	4013      	ands	r3, r2
 8003df4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d003      	beq.n	8003e0a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003e02:	693a      	ldr	r2, [r7, #16]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e0a:	4a32      	ldr	r2, [pc, #200]	; (8003ed4 <HAL_GPIO_Init+0x350>)
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003e10:	4b30      	ldr	r3, [pc, #192]	; (8003ed4 <HAL_GPIO_Init+0x350>)
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	43db      	mvns	r3, r3
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d003      	beq.n	8003e34 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e34:	4a27      	ldr	r2, [pc, #156]	; (8003ed4 <HAL_GPIO_Init+0x350>)
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003e3a:	4b26      	ldr	r3, [pc, #152]	; (8003ed4 <HAL_GPIO_Init+0x350>)
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	43db      	mvns	r3, r3
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	4013      	ands	r3, r2
 8003e48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d003      	beq.n	8003e5e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e5e:	4a1d      	ldr	r2, [pc, #116]	; (8003ed4 <HAL_GPIO_Init+0x350>)
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003e64:	4b1b      	ldr	r3, [pc, #108]	; (8003ed4 <HAL_GPIO_Init+0x350>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	43db      	mvns	r3, r3
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	4013      	ands	r3, r2
 8003e72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d003      	beq.n	8003e88 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003e80:	693a      	ldr	r2, [r7, #16]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e88:	4a12      	ldr	r2, [pc, #72]	; (8003ed4 <HAL_GPIO_Init+0x350>)
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	3301      	adds	r3, #1
 8003e92:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f47f ae78 	bne.w	8003b94 <HAL_GPIO_Init+0x10>
  }
}
 8003ea4:	bf00      	nop
 8003ea6:	bf00      	nop
 8003ea8:	371c      	adds	r7, #28
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	40021000 	.word	0x40021000
 8003eb8:	40010000 	.word	0x40010000
 8003ebc:	48000400 	.word	0x48000400
 8003ec0:	48000800 	.word	0x48000800
 8003ec4:	48000c00 	.word	0x48000c00
 8003ec8:	48001000 	.word	0x48001000
 8003ecc:	48001400 	.word	0x48001400
 8003ed0:	48001800 	.word	0x48001800
 8003ed4:	40010400 	.word	0x40010400

08003ed8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	807b      	strh	r3, [r7, #2]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ee8:	787b      	ldrb	r3, [r7, #1]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d003      	beq.n	8003ef6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003eee:	887a      	ldrh	r2, [r7, #2]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ef4:	e002      	b.n	8003efc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ef6:	887a      	ldrh	r2, [r7, #2]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003efc:	bf00      	nop
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	460b      	mov	r3, r1
 8003f12:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	695b      	ldr	r3, [r3, #20]
 8003f18:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f1a:	887a      	ldrh	r2, [r7, #2]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	4013      	ands	r3, r2
 8003f20:	041a      	lsls	r2, r3, #16
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	43d9      	mvns	r1, r3
 8003f26:	887b      	ldrh	r3, [r7, #2]
 8003f28:	400b      	ands	r3, r1
 8003f2a:	431a      	orrs	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	619a      	str	r2, [r3, #24]
}
 8003f30:	bf00      	nop
 8003f32:	3714      	adds	r7, #20
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003f40:	4b04      	ldr	r3, [pc, #16]	; (8003f54 <HAL_PWREx_GetVoltageRange+0x18>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	40007000 	.word	0x40007000

08003f58 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b085      	sub	sp, #20
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f66:	d130      	bne.n	8003fca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f68:	4b23      	ldr	r3, [pc, #140]	; (8003ff8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f74:	d038      	beq.n	8003fe8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f76:	4b20      	ldr	r3, [pc, #128]	; (8003ff8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f7e:	4a1e      	ldr	r2, [pc, #120]	; (8003ff8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f84:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f86:	4b1d      	ldr	r3, [pc, #116]	; (8003ffc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2232      	movs	r2, #50	; 0x32
 8003f8c:	fb02 f303 	mul.w	r3, r2, r3
 8003f90:	4a1b      	ldr	r2, [pc, #108]	; (8004000 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003f92:	fba2 2303 	umull	r2, r3, r2, r3
 8003f96:	0c9b      	lsrs	r3, r3, #18
 8003f98:	3301      	adds	r3, #1
 8003f9a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f9c:	e002      	b.n	8003fa4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fa4:	4b14      	ldr	r3, [pc, #80]	; (8003ff8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fa6:	695b      	ldr	r3, [r3, #20]
 8003fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fb0:	d102      	bne.n	8003fb8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1f2      	bne.n	8003f9e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003fb8:	4b0f      	ldr	r3, [pc, #60]	; (8003ff8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fba:	695b      	ldr	r3, [r3, #20]
 8003fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fc4:	d110      	bne.n	8003fe8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e00f      	b.n	8003fea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003fca:	4b0b      	ldr	r3, [pc, #44]	; (8003ff8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003fd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fd6:	d007      	beq.n	8003fe8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003fd8:	4b07      	ldr	r3, [pc, #28]	; (8003ff8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003fe0:	4a05      	ldr	r2, [pc, #20]	; (8003ff8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fe2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003fe6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3714      	adds	r7, #20
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	40007000 	.word	0x40007000
 8003ffc:	20000000 	.word	0x20000000
 8004000:	431bde83 	.word	0x431bde83

08004004 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b088      	sub	sp, #32
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d101      	bne.n	8004016 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e3d4      	b.n	80047c0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004016:	4ba1      	ldr	r3, [pc, #644]	; (800429c <HAL_RCC_OscConfig+0x298>)
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f003 030c 	and.w	r3, r3, #12
 800401e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004020:	4b9e      	ldr	r3, [pc, #632]	; (800429c <HAL_RCC_OscConfig+0x298>)
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	f003 0303 	and.w	r3, r3, #3
 8004028:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0310 	and.w	r3, r3, #16
 8004032:	2b00      	cmp	r3, #0
 8004034:	f000 80e4 	beq.w	8004200 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d007      	beq.n	800404e <HAL_RCC_OscConfig+0x4a>
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	2b0c      	cmp	r3, #12
 8004042:	f040 808b 	bne.w	800415c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	2b01      	cmp	r3, #1
 800404a:	f040 8087 	bne.w	800415c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800404e:	4b93      	ldr	r3, [pc, #588]	; (800429c <HAL_RCC_OscConfig+0x298>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0302 	and.w	r3, r3, #2
 8004056:	2b00      	cmp	r3, #0
 8004058:	d005      	beq.n	8004066 <HAL_RCC_OscConfig+0x62>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d101      	bne.n	8004066 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e3ac      	b.n	80047c0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a1a      	ldr	r2, [r3, #32]
 800406a:	4b8c      	ldr	r3, [pc, #560]	; (800429c <HAL_RCC_OscConfig+0x298>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0308 	and.w	r3, r3, #8
 8004072:	2b00      	cmp	r3, #0
 8004074:	d004      	beq.n	8004080 <HAL_RCC_OscConfig+0x7c>
 8004076:	4b89      	ldr	r3, [pc, #548]	; (800429c <HAL_RCC_OscConfig+0x298>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800407e:	e005      	b.n	800408c <HAL_RCC_OscConfig+0x88>
 8004080:	4b86      	ldr	r3, [pc, #536]	; (800429c <HAL_RCC_OscConfig+0x298>)
 8004082:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004086:	091b      	lsrs	r3, r3, #4
 8004088:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800408c:	4293      	cmp	r3, r2
 800408e:	d223      	bcs.n	80040d8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a1b      	ldr	r3, [r3, #32]
 8004094:	4618      	mov	r0, r3
 8004096:	f000 fd41 	bl	8004b1c <RCC_SetFlashLatencyFromMSIRange>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d001      	beq.n	80040a4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e38d      	b.n	80047c0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040a4:	4b7d      	ldr	r3, [pc, #500]	; (800429c <HAL_RCC_OscConfig+0x298>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a7c      	ldr	r2, [pc, #496]	; (800429c <HAL_RCC_OscConfig+0x298>)
 80040aa:	f043 0308 	orr.w	r3, r3, #8
 80040ae:	6013      	str	r3, [r2, #0]
 80040b0:	4b7a      	ldr	r3, [pc, #488]	; (800429c <HAL_RCC_OscConfig+0x298>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a1b      	ldr	r3, [r3, #32]
 80040bc:	4977      	ldr	r1, [pc, #476]	; (800429c <HAL_RCC_OscConfig+0x298>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040c2:	4b76      	ldr	r3, [pc, #472]	; (800429c <HAL_RCC_OscConfig+0x298>)
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	69db      	ldr	r3, [r3, #28]
 80040ce:	021b      	lsls	r3, r3, #8
 80040d0:	4972      	ldr	r1, [pc, #456]	; (800429c <HAL_RCC_OscConfig+0x298>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	604b      	str	r3, [r1, #4]
 80040d6:	e025      	b.n	8004124 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040d8:	4b70      	ldr	r3, [pc, #448]	; (800429c <HAL_RCC_OscConfig+0x298>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a6f      	ldr	r2, [pc, #444]	; (800429c <HAL_RCC_OscConfig+0x298>)
 80040de:	f043 0308 	orr.w	r3, r3, #8
 80040e2:	6013      	str	r3, [r2, #0]
 80040e4:	4b6d      	ldr	r3, [pc, #436]	; (800429c <HAL_RCC_OscConfig+0x298>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a1b      	ldr	r3, [r3, #32]
 80040f0:	496a      	ldr	r1, [pc, #424]	; (800429c <HAL_RCC_OscConfig+0x298>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040f6:	4b69      	ldr	r3, [pc, #420]	; (800429c <HAL_RCC_OscConfig+0x298>)
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	69db      	ldr	r3, [r3, #28]
 8004102:	021b      	lsls	r3, r3, #8
 8004104:	4965      	ldr	r1, [pc, #404]	; (800429c <HAL_RCC_OscConfig+0x298>)
 8004106:	4313      	orrs	r3, r2
 8004108:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d109      	bne.n	8004124 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a1b      	ldr	r3, [r3, #32]
 8004114:	4618      	mov	r0, r3
 8004116:	f000 fd01 	bl	8004b1c <RCC_SetFlashLatencyFromMSIRange>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d001      	beq.n	8004124 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e34d      	b.n	80047c0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004124:	f000 fc36 	bl	8004994 <HAL_RCC_GetSysClockFreq>
 8004128:	4602      	mov	r2, r0
 800412a:	4b5c      	ldr	r3, [pc, #368]	; (800429c <HAL_RCC_OscConfig+0x298>)
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	091b      	lsrs	r3, r3, #4
 8004130:	f003 030f 	and.w	r3, r3, #15
 8004134:	495a      	ldr	r1, [pc, #360]	; (80042a0 <HAL_RCC_OscConfig+0x29c>)
 8004136:	5ccb      	ldrb	r3, [r1, r3]
 8004138:	f003 031f 	and.w	r3, r3, #31
 800413c:	fa22 f303 	lsr.w	r3, r2, r3
 8004140:	4a58      	ldr	r2, [pc, #352]	; (80042a4 <HAL_RCC_OscConfig+0x2a0>)
 8004142:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004144:	4b58      	ldr	r3, [pc, #352]	; (80042a8 <HAL_RCC_OscConfig+0x2a4>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4618      	mov	r0, r3
 800414a:	f7fd fda3 	bl	8001c94 <HAL_InitTick>
 800414e:	4603      	mov	r3, r0
 8004150:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004152:	7bfb      	ldrb	r3, [r7, #15]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d052      	beq.n	80041fe <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004158:	7bfb      	ldrb	r3, [r7, #15]
 800415a:	e331      	b.n	80047c0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	699b      	ldr	r3, [r3, #24]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d032      	beq.n	80041ca <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004164:	4b4d      	ldr	r3, [pc, #308]	; (800429c <HAL_RCC_OscConfig+0x298>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a4c      	ldr	r2, [pc, #304]	; (800429c <HAL_RCC_OscConfig+0x298>)
 800416a:	f043 0301 	orr.w	r3, r3, #1
 800416e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004170:	f7fd fde0 	bl	8001d34 <HAL_GetTick>
 8004174:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004176:	e008      	b.n	800418a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004178:	f7fd fddc 	bl	8001d34 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b02      	cmp	r3, #2
 8004184:	d901      	bls.n	800418a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e31a      	b.n	80047c0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800418a:	4b44      	ldr	r3, [pc, #272]	; (800429c <HAL_RCC_OscConfig+0x298>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d0f0      	beq.n	8004178 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004196:	4b41      	ldr	r3, [pc, #260]	; (800429c <HAL_RCC_OscConfig+0x298>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a40      	ldr	r2, [pc, #256]	; (800429c <HAL_RCC_OscConfig+0x298>)
 800419c:	f043 0308 	orr.w	r3, r3, #8
 80041a0:	6013      	str	r3, [r2, #0]
 80041a2:	4b3e      	ldr	r3, [pc, #248]	; (800429c <HAL_RCC_OscConfig+0x298>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a1b      	ldr	r3, [r3, #32]
 80041ae:	493b      	ldr	r1, [pc, #236]	; (800429c <HAL_RCC_OscConfig+0x298>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041b4:	4b39      	ldr	r3, [pc, #228]	; (800429c <HAL_RCC_OscConfig+0x298>)
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	69db      	ldr	r3, [r3, #28]
 80041c0:	021b      	lsls	r3, r3, #8
 80041c2:	4936      	ldr	r1, [pc, #216]	; (800429c <HAL_RCC_OscConfig+0x298>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	604b      	str	r3, [r1, #4]
 80041c8:	e01a      	b.n	8004200 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80041ca:	4b34      	ldr	r3, [pc, #208]	; (800429c <HAL_RCC_OscConfig+0x298>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a33      	ldr	r2, [pc, #204]	; (800429c <HAL_RCC_OscConfig+0x298>)
 80041d0:	f023 0301 	bic.w	r3, r3, #1
 80041d4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80041d6:	f7fd fdad 	bl	8001d34 <HAL_GetTick>
 80041da:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80041dc:	e008      	b.n	80041f0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041de:	f7fd fda9 	bl	8001d34 <HAL_GetTick>
 80041e2:	4602      	mov	r2, r0
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d901      	bls.n	80041f0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e2e7      	b.n	80047c0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80041f0:	4b2a      	ldr	r3, [pc, #168]	; (800429c <HAL_RCC_OscConfig+0x298>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0302 	and.w	r3, r3, #2
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1f0      	bne.n	80041de <HAL_RCC_OscConfig+0x1da>
 80041fc:	e000      	b.n	8004200 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80041fe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0301 	and.w	r3, r3, #1
 8004208:	2b00      	cmp	r3, #0
 800420a:	d074      	beq.n	80042f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	2b08      	cmp	r3, #8
 8004210:	d005      	beq.n	800421e <HAL_RCC_OscConfig+0x21a>
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	2b0c      	cmp	r3, #12
 8004216:	d10e      	bne.n	8004236 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	2b03      	cmp	r3, #3
 800421c:	d10b      	bne.n	8004236 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800421e:	4b1f      	ldr	r3, [pc, #124]	; (800429c <HAL_RCC_OscConfig+0x298>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d064      	beq.n	80042f4 <HAL_RCC_OscConfig+0x2f0>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d160      	bne.n	80042f4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e2c4      	b.n	80047c0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800423e:	d106      	bne.n	800424e <HAL_RCC_OscConfig+0x24a>
 8004240:	4b16      	ldr	r3, [pc, #88]	; (800429c <HAL_RCC_OscConfig+0x298>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a15      	ldr	r2, [pc, #84]	; (800429c <HAL_RCC_OscConfig+0x298>)
 8004246:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800424a:	6013      	str	r3, [r2, #0]
 800424c:	e01d      	b.n	800428a <HAL_RCC_OscConfig+0x286>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004256:	d10c      	bne.n	8004272 <HAL_RCC_OscConfig+0x26e>
 8004258:	4b10      	ldr	r3, [pc, #64]	; (800429c <HAL_RCC_OscConfig+0x298>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a0f      	ldr	r2, [pc, #60]	; (800429c <HAL_RCC_OscConfig+0x298>)
 800425e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004262:	6013      	str	r3, [r2, #0]
 8004264:	4b0d      	ldr	r3, [pc, #52]	; (800429c <HAL_RCC_OscConfig+0x298>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a0c      	ldr	r2, [pc, #48]	; (800429c <HAL_RCC_OscConfig+0x298>)
 800426a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800426e:	6013      	str	r3, [r2, #0]
 8004270:	e00b      	b.n	800428a <HAL_RCC_OscConfig+0x286>
 8004272:	4b0a      	ldr	r3, [pc, #40]	; (800429c <HAL_RCC_OscConfig+0x298>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a09      	ldr	r2, [pc, #36]	; (800429c <HAL_RCC_OscConfig+0x298>)
 8004278:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800427c:	6013      	str	r3, [r2, #0]
 800427e:	4b07      	ldr	r3, [pc, #28]	; (800429c <HAL_RCC_OscConfig+0x298>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a06      	ldr	r2, [pc, #24]	; (800429c <HAL_RCC_OscConfig+0x298>)
 8004284:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004288:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d01c      	beq.n	80042cc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004292:	f7fd fd4f 	bl	8001d34 <HAL_GetTick>
 8004296:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004298:	e011      	b.n	80042be <HAL_RCC_OscConfig+0x2ba>
 800429a:	bf00      	nop
 800429c:	40021000 	.word	0x40021000
 80042a0:	0800bf0c 	.word	0x0800bf0c
 80042a4:	20000000 	.word	0x20000000
 80042a8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042ac:	f7fd fd42 	bl	8001d34 <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	2b64      	cmp	r3, #100	; 0x64
 80042b8:	d901      	bls.n	80042be <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e280      	b.n	80047c0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042be:	4baf      	ldr	r3, [pc, #700]	; (800457c <HAL_RCC_OscConfig+0x578>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d0f0      	beq.n	80042ac <HAL_RCC_OscConfig+0x2a8>
 80042ca:	e014      	b.n	80042f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042cc:	f7fd fd32 	bl	8001d34 <HAL_GetTick>
 80042d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042d2:	e008      	b.n	80042e6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042d4:	f7fd fd2e 	bl	8001d34 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	2b64      	cmp	r3, #100	; 0x64
 80042e0:	d901      	bls.n	80042e6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e26c      	b.n	80047c0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042e6:	4ba5      	ldr	r3, [pc, #660]	; (800457c <HAL_RCC_OscConfig+0x578>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1f0      	bne.n	80042d4 <HAL_RCC_OscConfig+0x2d0>
 80042f2:	e000      	b.n	80042f6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0302 	and.w	r3, r3, #2
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d060      	beq.n	80043c4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	2b04      	cmp	r3, #4
 8004306:	d005      	beq.n	8004314 <HAL_RCC_OscConfig+0x310>
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	2b0c      	cmp	r3, #12
 800430c:	d119      	bne.n	8004342 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	2b02      	cmp	r3, #2
 8004312:	d116      	bne.n	8004342 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004314:	4b99      	ldr	r3, [pc, #612]	; (800457c <HAL_RCC_OscConfig+0x578>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800431c:	2b00      	cmp	r3, #0
 800431e:	d005      	beq.n	800432c <HAL_RCC_OscConfig+0x328>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d101      	bne.n	800432c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e249      	b.n	80047c0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800432c:	4b93      	ldr	r3, [pc, #588]	; (800457c <HAL_RCC_OscConfig+0x578>)
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	061b      	lsls	r3, r3, #24
 800433a:	4990      	ldr	r1, [pc, #576]	; (800457c <HAL_RCC_OscConfig+0x578>)
 800433c:	4313      	orrs	r3, r2
 800433e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004340:	e040      	b.n	80043c4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d023      	beq.n	8004392 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800434a:	4b8c      	ldr	r3, [pc, #560]	; (800457c <HAL_RCC_OscConfig+0x578>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a8b      	ldr	r2, [pc, #556]	; (800457c <HAL_RCC_OscConfig+0x578>)
 8004350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004354:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004356:	f7fd fced 	bl	8001d34 <HAL_GetTick>
 800435a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800435c:	e008      	b.n	8004370 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800435e:	f7fd fce9 	bl	8001d34 <HAL_GetTick>
 8004362:	4602      	mov	r2, r0
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	2b02      	cmp	r3, #2
 800436a:	d901      	bls.n	8004370 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e227      	b.n	80047c0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004370:	4b82      	ldr	r3, [pc, #520]	; (800457c <HAL_RCC_OscConfig+0x578>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004378:	2b00      	cmp	r3, #0
 800437a:	d0f0      	beq.n	800435e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800437c:	4b7f      	ldr	r3, [pc, #508]	; (800457c <HAL_RCC_OscConfig+0x578>)
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	691b      	ldr	r3, [r3, #16]
 8004388:	061b      	lsls	r3, r3, #24
 800438a:	497c      	ldr	r1, [pc, #496]	; (800457c <HAL_RCC_OscConfig+0x578>)
 800438c:	4313      	orrs	r3, r2
 800438e:	604b      	str	r3, [r1, #4]
 8004390:	e018      	b.n	80043c4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004392:	4b7a      	ldr	r3, [pc, #488]	; (800457c <HAL_RCC_OscConfig+0x578>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a79      	ldr	r2, [pc, #484]	; (800457c <HAL_RCC_OscConfig+0x578>)
 8004398:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800439c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800439e:	f7fd fcc9 	bl	8001d34 <HAL_GetTick>
 80043a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043a4:	e008      	b.n	80043b8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043a6:	f7fd fcc5 	bl	8001d34 <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d901      	bls.n	80043b8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e203      	b.n	80047c0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043b8:	4b70      	ldr	r3, [pc, #448]	; (800457c <HAL_RCC_OscConfig+0x578>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1f0      	bne.n	80043a6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0308 	and.w	r3, r3, #8
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d03c      	beq.n	800444a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	695b      	ldr	r3, [r3, #20]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d01c      	beq.n	8004412 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043d8:	4b68      	ldr	r3, [pc, #416]	; (800457c <HAL_RCC_OscConfig+0x578>)
 80043da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043de:	4a67      	ldr	r2, [pc, #412]	; (800457c <HAL_RCC_OscConfig+0x578>)
 80043e0:	f043 0301 	orr.w	r3, r3, #1
 80043e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043e8:	f7fd fca4 	bl	8001d34 <HAL_GetTick>
 80043ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043ee:	e008      	b.n	8004402 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043f0:	f7fd fca0 	bl	8001d34 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e1de      	b.n	80047c0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004402:	4b5e      	ldr	r3, [pc, #376]	; (800457c <HAL_RCC_OscConfig+0x578>)
 8004404:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004408:	f003 0302 	and.w	r3, r3, #2
 800440c:	2b00      	cmp	r3, #0
 800440e:	d0ef      	beq.n	80043f0 <HAL_RCC_OscConfig+0x3ec>
 8004410:	e01b      	b.n	800444a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004412:	4b5a      	ldr	r3, [pc, #360]	; (800457c <HAL_RCC_OscConfig+0x578>)
 8004414:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004418:	4a58      	ldr	r2, [pc, #352]	; (800457c <HAL_RCC_OscConfig+0x578>)
 800441a:	f023 0301 	bic.w	r3, r3, #1
 800441e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004422:	f7fd fc87 	bl	8001d34 <HAL_GetTick>
 8004426:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004428:	e008      	b.n	800443c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800442a:	f7fd fc83 	bl	8001d34 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	2b02      	cmp	r3, #2
 8004436:	d901      	bls.n	800443c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e1c1      	b.n	80047c0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800443c:	4b4f      	ldr	r3, [pc, #316]	; (800457c <HAL_RCC_OscConfig+0x578>)
 800443e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	2b00      	cmp	r3, #0
 8004448:	d1ef      	bne.n	800442a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0304 	and.w	r3, r3, #4
 8004452:	2b00      	cmp	r3, #0
 8004454:	f000 80a6 	beq.w	80045a4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004458:	2300      	movs	r3, #0
 800445a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800445c:	4b47      	ldr	r3, [pc, #284]	; (800457c <HAL_RCC_OscConfig+0x578>)
 800445e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004460:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d10d      	bne.n	8004484 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004468:	4b44      	ldr	r3, [pc, #272]	; (800457c <HAL_RCC_OscConfig+0x578>)
 800446a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800446c:	4a43      	ldr	r2, [pc, #268]	; (800457c <HAL_RCC_OscConfig+0x578>)
 800446e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004472:	6593      	str	r3, [r2, #88]	; 0x58
 8004474:	4b41      	ldr	r3, [pc, #260]	; (800457c <HAL_RCC_OscConfig+0x578>)
 8004476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800447c:	60bb      	str	r3, [r7, #8]
 800447e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004480:	2301      	movs	r3, #1
 8004482:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004484:	4b3e      	ldr	r3, [pc, #248]	; (8004580 <HAL_RCC_OscConfig+0x57c>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800448c:	2b00      	cmp	r3, #0
 800448e:	d118      	bne.n	80044c2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004490:	4b3b      	ldr	r3, [pc, #236]	; (8004580 <HAL_RCC_OscConfig+0x57c>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a3a      	ldr	r2, [pc, #232]	; (8004580 <HAL_RCC_OscConfig+0x57c>)
 8004496:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800449a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800449c:	f7fd fc4a 	bl	8001d34 <HAL_GetTick>
 80044a0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044a2:	e008      	b.n	80044b6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044a4:	f7fd fc46 	bl	8001d34 <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d901      	bls.n	80044b6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e184      	b.n	80047c0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044b6:	4b32      	ldr	r3, [pc, #200]	; (8004580 <HAL_RCC_OscConfig+0x57c>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d0f0      	beq.n	80044a4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d108      	bne.n	80044dc <HAL_RCC_OscConfig+0x4d8>
 80044ca:	4b2c      	ldr	r3, [pc, #176]	; (800457c <HAL_RCC_OscConfig+0x578>)
 80044cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d0:	4a2a      	ldr	r2, [pc, #168]	; (800457c <HAL_RCC_OscConfig+0x578>)
 80044d2:	f043 0301 	orr.w	r3, r3, #1
 80044d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044da:	e024      	b.n	8004526 <HAL_RCC_OscConfig+0x522>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	2b05      	cmp	r3, #5
 80044e2:	d110      	bne.n	8004506 <HAL_RCC_OscConfig+0x502>
 80044e4:	4b25      	ldr	r3, [pc, #148]	; (800457c <HAL_RCC_OscConfig+0x578>)
 80044e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ea:	4a24      	ldr	r2, [pc, #144]	; (800457c <HAL_RCC_OscConfig+0x578>)
 80044ec:	f043 0304 	orr.w	r3, r3, #4
 80044f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044f4:	4b21      	ldr	r3, [pc, #132]	; (800457c <HAL_RCC_OscConfig+0x578>)
 80044f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044fa:	4a20      	ldr	r2, [pc, #128]	; (800457c <HAL_RCC_OscConfig+0x578>)
 80044fc:	f043 0301 	orr.w	r3, r3, #1
 8004500:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004504:	e00f      	b.n	8004526 <HAL_RCC_OscConfig+0x522>
 8004506:	4b1d      	ldr	r3, [pc, #116]	; (800457c <HAL_RCC_OscConfig+0x578>)
 8004508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800450c:	4a1b      	ldr	r2, [pc, #108]	; (800457c <HAL_RCC_OscConfig+0x578>)
 800450e:	f023 0301 	bic.w	r3, r3, #1
 8004512:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004516:	4b19      	ldr	r3, [pc, #100]	; (800457c <HAL_RCC_OscConfig+0x578>)
 8004518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800451c:	4a17      	ldr	r2, [pc, #92]	; (800457c <HAL_RCC_OscConfig+0x578>)
 800451e:	f023 0304 	bic.w	r3, r3, #4
 8004522:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d016      	beq.n	800455c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800452e:	f7fd fc01 	bl	8001d34 <HAL_GetTick>
 8004532:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004534:	e00a      	b.n	800454c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004536:	f7fd fbfd 	bl	8001d34 <HAL_GetTick>
 800453a:	4602      	mov	r2, r0
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	f241 3288 	movw	r2, #5000	; 0x1388
 8004544:	4293      	cmp	r3, r2
 8004546:	d901      	bls.n	800454c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e139      	b.n	80047c0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800454c:	4b0b      	ldr	r3, [pc, #44]	; (800457c <HAL_RCC_OscConfig+0x578>)
 800454e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004552:	f003 0302 	and.w	r3, r3, #2
 8004556:	2b00      	cmp	r3, #0
 8004558:	d0ed      	beq.n	8004536 <HAL_RCC_OscConfig+0x532>
 800455a:	e01a      	b.n	8004592 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800455c:	f7fd fbea 	bl	8001d34 <HAL_GetTick>
 8004560:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004562:	e00f      	b.n	8004584 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004564:	f7fd fbe6 	bl	8001d34 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004572:	4293      	cmp	r3, r2
 8004574:	d906      	bls.n	8004584 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e122      	b.n	80047c0 <HAL_RCC_OscConfig+0x7bc>
 800457a:	bf00      	nop
 800457c:	40021000 	.word	0x40021000
 8004580:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004584:	4b90      	ldr	r3, [pc, #576]	; (80047c8 <HAL_RCC_OscConfig+0x7c4>)
 8004586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1e8      	bne.n	8004564 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004592:	7ffb      	ldrb	r3, [r7, #31]
 8004594:	2b01      	cmp	r3, #1
 8004596:	d105      	bne.n	80045a4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004598:	4b8b      	ldr	r3, [pc, #556]	; (80047c8 <HAL_RCC_OscConfig+0x7c4>)
 800459a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800459c:	4a8a      	ldr	r2, [pc, #552]	; (80047c8 <HAL_RCC_OscConfig+0x7c4>)
 800459e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045a2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	f000 8108 	beq.w	80047be <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	f040 80d0 	bne.w	8004758 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80045b8:	4b83      	ldr	r3, [pc, #524]	; (80047c8 <HAL_RCC_OscConfig+0x7c4>)
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	f003 0203 	and.w	r2, r3, #3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d130      	bne.n	800462e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d6:	3b01      	subs	r3, #1
 80045d8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80045da:	429a      	cmp	r2, r3
 80045dc:	d127      	bne.n	800462e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045e8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d11f      	bne.n	800462e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045f8:	2a07      	cmp	r2, #7
 80045fa:	bf14      	ite	ne
 80045fc:	2201      	movne	r2, #1
 80045fe:	2200      	moveq	r2, #0
 8004600:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004602:	4293      	cmp	r3, r2
 8004604:	d113      	bne.n	800462e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004610:	085b      	lsrs	r3, r3, #1
 8004612:	3b01      	subs	r3, #1
 8004614:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004616:	429a      	cmp	r2, r3
 8004618:	d109      	bne.n	800462e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004624:	085b      	lsrs	r3, r3, #1
 8004626:	3b01      	subs	r3, #1
 8004628:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800462a:	429a      	cmp	r2, r3
 800462c:	d06e      	beq.n	800470c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	2b0c      	cmp	r3, #12
 8004632:	d069      	beq.n	8004708 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004634:	4b64      	ldr	r3, [pc, #400]	; (80047c8 <HAL_RCC_OscConfig+0x7c4>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d105      	bne.n	800464c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004640:	4b61      	ldr	r3, [pc, #388]	; (80047c8 <HAL_RCC_OscConfig+0x7c4>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d001      	beq.n	8004650 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e0b7      	b.n	80047c0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004650:	4b5d      	ldr	r3, [pc, #372]	; (80047c8 <HAL_RCC_OscConfig+0x7c4>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a5c      	ldr	r2, [pc, #368]	; (80047c8 <HAL_RCC_OscConfig+0x7c4>)
 8004656:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800465a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800465c:	f7fd fb6a 	bl	8001d34 <HAL_GetTick>
 8004660:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004662:	e008      	b.n	8004676 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004664:	f7fd fb66 	bl	8001d34 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	2b02      	cmp	r3, #2
 8004670:	d901      	bls.n	8004676 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e0a4      	b.n	80047c0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004676:	4b54      	ldr	r3, [pc, #336]	; (80047c8 <HAL_RCC_OscConfig+0x7c4>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1f0      	bne.n	8004664 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004682:	4b51      	ldr	r3, [pc, #324]	; (80047c8 <HAL_RCC_OscConfig+0x7c4>)
 8004684:	68da      	ldr	r2, [r3, #12]
 8004686:	4b51      	ldr	r3, [pc, #324]	; (80047cc <HAL_RCC_OscConfig+0x7c8>)
 8004688:	4013      	ands	r3, r2
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004692:	3a01      	subs	r2, #1
 8004694:	0112      	lsls	r2, r2, #4
 8004696:	4311      	orrs	r1, r2
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800469c:	0212      	lsls	r2, r2, #8
 800469e:	4311      	orrs	r1, r2
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80046a4:	0852      	lsrs	r2, r2, #1
 80046a6:	3a01      	subs	r2, #1
 80046a8:	0552      	lsls	r2, r2, #21
 80046aa:	4311      	orrs	r1, r2
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80046b0:	0852      	lsrs	r2, r2, #1
 80046b2:	3a01      	subs	r2, #1
 80046b4:	0652      	lsls	r2, r2, #25
 80046b6:	4311      	orrs	r1, r2
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80046bc:	0912      	lsrs	r2, r2, #4
 80046be:	0452      	lsls	r2, r2, #17
 80046c0:	430a      	orrs	r2, r1
 80046c2:	4941      	ldr	r1, [pc, #260]	; (80047c8 <HAL_RCC_OscConfig+0x7c4>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80046c8:	4b3f      	ldr	r3, [pc, #252]	; (80047c8 <HAL_RCC_OscConfig+0x7c4>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a3e      	ldr	r2, [pc, #248]	; (80047c8 <HAL_RCC_OscConfig+0x7c4>)
 80046ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046d2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80046d4:	4b3c      	ldr	r3, [pc, #240]	; (80047c8 <HAL_RCC_OscConfig+0x7c4>)
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	4a3b      	ldr	r2, [pc, #236]	; (80047c8 <HAL_RCC_OscConfig+0x7c4>)
 80046da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046de:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80046e0:	f7fd fb28 	bl	8001d34 <HAL_GetTick>
 80046e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046e6:	e008      	b.n	80046fa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046e8:	f7fd fb24 	bl	8001d34 <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d901      	bls.n	80046fa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e062      	b.n	80047c0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046fa:	4b33      	ldr	r3, [pc, #204]	; (80047c8 <HAL_RCC_OscConfig+0x7c4>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d0f0      	beq.n	80046e8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004706:	e05a      	b.n	80047be <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e059      	b.n	80047c0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800470c:	4b2e      	ldr	r3, [pc, #184]	; (80047c8 <HAL_RCC_OscConfig+0x7c4>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d152      	bne.n	80047be <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004718:	4b2b      	ldr	r3, [pc, #172]	; (80047c8 <HAL_RCC_OscConfig+0x7c4>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a2a      	ldr	r2, [pc, #168]	; (80047c8 <HAL_RCC_OscConfig+0x7c4>)
 800471e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004722:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004724:	4b28      	ldr	r3, [pc, #160]	; (80047c8 <HAL_RCC_OscConfig+0x7c4>)
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	4a27      	ldr	r2, [pc, #156]	; (80047c8 <HAL_RCC_OscConfig+0x7c4>)
 800472a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800472e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004730:	f7fd fb00 	bl	8001d34 <HAL_GetTick>
 8004734:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004736:	e008      	b.n	800474a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004738:	f7fd fafc 	bl	8001d34 <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	2b02      	cmp	r3, #2
 8004744:	d901      	bls.n	800474a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e03a      	b.n	80047c0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800474a:	4b1f      	ldr	r3, [pc, #124]	; (80047c8 <HAL_RCC_OscConfig+0x7c4>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d0f0      	beq.n	8004738 <HAL_RCC_OscConfig+0x734>
 8004756:	e032      	b.n	80047be <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	2b0c      	cmp	r3, #12
 800475c:	d02d      	beq.n	80047ba <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800475e:	4b1a      	ldr	r3, [pc, #104]	; (80047c8 <HAL_RCC_OscConfig+0x7c4>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a19      	ldr	r2, [pc, #100]	; (80047c8 <HAL_RCC_OscConfig+0x7c4>)
 8004764:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004768:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800476a:	4b17      	ldr	r3, [pc, #92]	; (80047c8 <HAL_RCC_OscConfig+0x7c4>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d105      	bne.n	8004782 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004776:	4b14      	ldr	r3, [pc, #80]	; (80047c8 <HAL_RCC_OscConfig+0x7c4>)
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	4a13      	ldr	r2, [pc, #76]	; (80047c8 <HAL_RCC_OscConfig+0x7c4>)
 800477c:	f023 0303 	bic.w	r3, r3, #3
 8004780:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004782:	4b11      	ldr	r3, [pc, #68]	; (80047c8 <HAL_RCC_OscConfig+0x7c4>)
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	4a10      	ldr	r2, [pc, #64]	; (80047c8 <HAL_RCC_OscConfig+0x7c4>)
 8004788:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800478c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004790:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004792:	f7fd facf 	bl	8001d34 <HAL_GetTick>
 8004796:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004798:	e008      	b.n	80047ac <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800479a:	f7fd facb 	bl	8001d34 <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d901      	bls.n	80047ac <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e009      	b.n	80047c0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047ac:	4b06      	ldr	r3, [pc, #24]	; (80047c8 <HAL_RCC_OscConfig+0x7c4>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d1f0      	bne.n	800479a <HAL_RCC_OscConfig+0x796>
 80047b8:	e001      	b.n	80047be <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e000      	b.n	80047c0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3720      	adds	r7, #32
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	40021000 	.word	0x40021000
 80047cc:	f99d808c 	.word	0xf99d808c

080047d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d101      	bne.n	80047e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e0c8      	b.n	8004976 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047e4:	4b66      	ldr	r3, [pc, #408]	; (8004980 <HAL_RCC_ClockConfig+0x1b0>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0307 	and.w	r3, r3, #7
 80047ec:	683a      	ldr	r2, [r7, #0]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d910      	bls.n	8004814 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047f2:	4b63      	ldr	r3, [pc, #396]	; (8004980 <HAL_RCC_ClockConfig+0x1b0>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f023 0207 	bic.w	r2, r3, #7
 80047fa:	4961      	ldr	r1, [pc, #388]	; (8004980 <HAL_RCC_ClockConfig+0x1b0>)
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	4313      	orrs	r3, r2
 8004800:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004802:	4b5f      	ldr	r3, [pc, #380]	; (8004980 <HAL_RCC_ClockConfig+0x1b0>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0307 	and.w	r3, r3, #7
 800480a:	683a      	ldr	r2, [r7, #0]
 800480c:	429a      	cmp	r2, r3
 800480e:	d001      	beq.n	8004814 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e0b0      	b.n	8004976 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0301 	and.w	r3, r3, #1
 800481c:	2b00      	cmp	r3, #0
 800481e:	d04c      	beq.n	80048ba <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	2b03      	cmp	r3, #3
 8004826:	d107      	bne.n	8004838 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004828:	4b56      	ldr	r3, [pc, #344]	; (8004984 <HAL_RCC_ClockConfig+0x1b4>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d121      	bne.n	8004878 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e09e      	b.n	8004976 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	2b02      	cmp	r3, #2
 800483e:	d107      	bne.n	8004850 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004840:	4b50      	ldr	r3, [pc, #320]	; (8004984 <HAL_RCC_ClockConfig+0x1b4>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d115      	bne.n	8004878 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e092      	b.n	8004976 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d107      	bne.n	8004868 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004858:	4b4a      	ldr	r3, [pc, #296]	; (8004984 <HAL_RCC_ClockConfig+0x1b4>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0302 	and.w	r3, r3, #2
 8004860:	2b00      	cmp	r3, #0
 8004862:	d109      	bne.n	8004878 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e086      	b.n	8004976 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004868:	4b46      	ldr	r3, [pc, #280]	; (8004984 <HAL_RCC_ClockConfig+0x1b4>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004870:	2b00      	cmp	r3, #0
 8004872:	d101      	bne.n	8004878 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e07e      	b.n	8004976 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004878:	4b42      	ldr	r3, [pc, #264]	; (8004984 <HAL_RCC_ClockConfig+0x1b4>)
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f023 0203 	bic.w	r2, r3, #3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	493f      	ldr	r1, [pc, #252]	; (8004984 <HAL_RCC_ClockConfig+0x1b4>)
 8004886:	4313      	orrs	r3, r2
 8004888:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800488a:	f7fd fa53 	bl	8001d34 <HAL_GetTick>
 800488e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004890:	e00a      	b.n	80048a8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004892:	f7fd fa4f 	bl	8001d34 <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	f241 3288 	movw	r2, #5000	; 0x1388
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d901      	bls.n	80048a8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e066      	b.n	8004976 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048a8:	4b36      	ldr	r3, [pc, #216]	; (8004984 <HAL_RCC_ClockConfig+0x1b4>)
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f003 020c 	and.w	r2, r3, #12
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d1eb      	bne.n	8004892 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0302 	and.w	r3, r3, #2
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d008      	beq.n	80048d8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048c6:	4b2f      	ldr	r3, [pc, #188]	; (8004984 <HAL_RCC_ClockConfig+0x1b4>)
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	492c      	ldr	r1, [pc, #176]	; (8004984 <HAL_RCC_ClockConfig+0x1b4>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048d8:	4b29      	ldr	r3, [pc, #164]	; (8004980 <HAL_RCC_ClockConfig+0x1b0>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0307 	and.w	r3, r3, #7
 80048e0:	683a      	ldr	r2, [r7, #0]
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d210      	bcs.n	8004908 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048e6:	4b26      	ldr	r3, [pc, #152]	; (8004980 <HAL_RCC_ClockConfig+0x1b0>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f023 0207 	bic.w	r2, r3, #7
 80048ee:	4924      	ldr	r1, [pc, #144]	; (8004980 <HAL_RCC_ClockConfig+0x1b0>)
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048f6:	4b22      	ldr	r3, [pc, #136]	; (8004980 <HAL_RCC_ClockConfig+0x1b0>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0307 	and.w	r3, r3, #7
 80048fe:	683a      	ldr	r2, [r7, #0]
 8004900:	429a      	cmp	r2, r3
 8004902:	d001      	beq.n	8004908 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e036      	b.n	8004976 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0304 	and.w	r3, r3, #4
 8004910:	2b00      	cmp	r3, #0
 8004912:	d008      	beq.n	8004926 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004914:	4b1b      	ldr	r3, [pc, #108]	; (8004984 <HAL_RCC_ClockConfig+0x1b4>)
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	4918      	ldr	r1, [pc, #96]	; (8004984 <HAL_RCC_ClockConfig+0x1b4>)
 8004922:	4313      	orrs	r3, r2
 8004924:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0308 	and.w	r3, r3, #8
 800492e:	2b00      	cmp	r3, #0
 8004930:	d009      	beq.n	8004946 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004932:	4b14      	ldr	r3, [pc, #80]	; (8004984 <HAL_RCC_ClockConfig+0x1b4>)
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	00db      	lsls	r3, r3, #3
 8004940:	4910      	ldr	r1, [pc, #64]	; (8004984 <HAL_RCC_ClockConfig+0x1b4>)
 8004942:	4313      	orrs	r3, r2
 8004944:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004946:	f000 f825 	bl	8004994 <HAL_RCC_GetSysClockFreq>
 800494a:	4602      	mov	r2, r0
 800494c:	4b0d      	ldr	r3, [pc, #52]	; (8004984 <HAL_RCC_ClockConfig+0x1b4>)
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	091b      	lsrs	r3, r3, #4
 8004952:	f003 030f 	and.w	r3, r3, #15
 8004956:	490c      	ldr	r1, [pc, #48]	; (8004988 <HAL_RCC_ClockConfig+0x1b8>)
 8004958:	5ccb      	ldrb	r3, [r1, r3]
 800495a:	f003 031f 	and.w	r3, r3, #31
 800495e:	fa22 f303 	lsr.w	r3, r2, r3
 8004962:	4a0a      	ldr	r2, [pc, #40]	; (800498c <HAL_RCC_ClockConfig+0x1bc>)
 8004964:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004966:	4b0a      	ldr	r3, [pc, #40]	; (8004990 <HAL_RCC_ClockConfig+0x1c0>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4618      	mov	r0, r3
 800496c:	f7fd f992 	bl	8001c94 <HAL_InitTick>
 8004970:	4603      	mov	r3, r0
 8004972:	72fb      	strb	r3, [r7, #11]

  return status;
 8004974:	7afb      	ldrb	r3, [r7, #11]
}
 8004976:	4618      	mov	r0, r3
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	40022000 	.word	0x40022000
 8004984:	40021000 	.word	0x40021000
 8004988:	0800bf0c 	.word	0x0800bf0c
 800498c:	20000000 	.word	0x20000000
 8004990:	20000004 	.word	0x20000004

08004994 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004994:	b480      	push	{r7}
 8004996:	b089      	sub	sp, #36	; 0x24
 8004998:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800499a:	2300      	movs	r3, #0
 800499c:	61fb      	str	r3, [r7, #28]
 800499e:	2300      	movs	r3, #0
 80049a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049a2:	4b3e      	ldr	r3, [pc, #248]	; (8004a9c <HAL_RCC_GetSysClockFreq+0x108>)
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	f003 030c 	and.w	r3, r3, #12
 80049aa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049ac:	4b3b      	ldr	r3, [pc, #236]	; (8004a9c <HAL_RCC_GetSysClockFreq+0x108>)
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	f003 0303 	and.w	r3, r3, #3
 80049b4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d005      	beq.n	80049c8 <HAL_RCC_GetSysClockFreq+0x34>
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	2b0c      	cmp	r3, #12
 80049c0:	d121      	bne.n	8004a06 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d11e      	bne.n	8004a06 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80049c8:	4b34      	ldr	r3, [pc, #208]	; (8004a9c <HAL_RCC_GetSysClockFreq+0x108>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0308 	and.w	r3, r3, #8
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d107      	bne.n	80049e4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80049d4:	4b31      	ldr	r3, [pc, #196]	; (8004a9c <HAL_RCC_GetSysClockFreq+0x108>)
 80049d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049da:	0a1b      	lsrs	r3, r3, #8
 80049dc:	f003 030f 	and.w	r3, r3, #15
 80049e0:	61fb      	str	r3, [r7, #28]
 80049e2:	e005      	b.n	80049f0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80049e4:	4b2d      	ldr	r3, [pc, #180]	; (8004a9c <HAL_RCC_GetSysClockFreq+0x108>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	091b      	lsrs	r3, r3, #4
 80049ea:	f003 030f 	and.w	r3, r3, #15
 80049ee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80049f0:	4a2b      	ldr	r2, [pc, #172]	; (8004aa0 <HAL_RCC_GetSysClockFreq+0x10c>)
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049f8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d10d      	bne.n	8004a1c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a04:	e00a      	b.n	8004a1c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	2b04      	cmp	r3, #4
 8004a0a:	d102      	bne.n	8004a12 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a0c:	4b25      	ldr	r3, [pc, #148]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004a0e:	61bb      	str	r3, [r7, #24]
 8004a10:	e004      	b.n	8004a1c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	2b08      	cmp	r3, #8
 8004a16:	d101      	bne.n	8004a1c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a18:	4b23      	ldr	r3, [pc, #140]	; (8004aa8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004a1a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	2b0c      	cmp	r3, #12
 8004a20:	d134      	bne.n	8004a8c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a22:	4b1e      	ldr	r3, [pc, #120]	; (8004a9c <HAL_RCC_GetSysClockFreq+0x108>)
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	f003 0303 	and.w	r3, r3, #3
 8004a2a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d003      	beq.n	8004a3a <HAL_RCC_GetSysClockFreq+0xa6>
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	2b03      	cmp	r3, #3
 8004a36:	d003      	beq.n	8004a40 <HAL_RCC_GetSysClockFreq+0xac>
 8004a38:	e005      	b.n	8004a46 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004a3a:	4b1a      	ldr	r3, [pc, #104]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004a3c:	617b      	str	r3, [r7, #20]
      break;
 8004a3e:	e005      	b.n	8004a4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004a40:	4b19      	ldr	r3, [pc, #100]	; (8004aa8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004a42:	617b      	str	r3, [r7, #20]
      break;
 8004a44:	e002      	b.n	8004a4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	617b      	str	r3, [r7, #20]
      break;
 8004a4a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a4c:	4b13      	ldr	r3, [pc, #76]	; (8004a9c <HAL_RCC_GetSysClockFreq+0x108>)
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	091b      	lsrs	r3, r3, #4
 8004a52:	f003 0307 	and.w	r3, r3, #7
 8004a56:	3301      	adds	r3, #1
 8004a58:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004a5a:	4b10      	ldr	r3, [pc, #64]	; (8004a9c <HAL_RCC_GetSysClockFreq+0x108>)
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	0a1b      	lsrs	r3, r3, #8
 8004a60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a64:	697a      	ldr	r2, [r7, #20]
 8004a66:	fb02 f203 	mul.w	r2, r2, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a70:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a72:	4b0a      	ldr	r3, [pc, #40]	; (8004a9c <HAL_RCC_GetSysClockFreq+0x108>)
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	0e5b      	lsrs	r3, r3, #25
 8004a78:	f003 0303 	and.w	r3, r3, #3
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	005b      	lsls	r3, r3, #1
 8004a80:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004a82:	697a      	ldr	r2, [r7, #20]
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a8a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004a8c:	69bb      	ldr	r3, [r7, #24]
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3724      	adds	r7, #36	; 0x24
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	40021000 	.word	0x40021000
 8004aa0:	0800bf24 	.word	0x0800bf24
 8004aa4:	00f42400 	.word	0x00f42400
 8004aa8:	007a1200 	.word	0x007a1200

08004aac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004aac:	b480      	push	{r7}
 8004aae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ab0:	4b03      	ldr	r3, [pc, #12]	; (8004ac0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	20000000 	.word	0x20000000

08004ac4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004ac8:	f7ff fff0 	bl	8004aac <HAL_RCC_GetHCLKFreq>
 8004acc:	4602      	mov	r2, r0
 8004ace:	4b06      	ldr	r3, [pc, #24]	; (8004ae8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	0a1b      	lsrs	r3, r3, #8
 8004ad4:	f003 0307 	and.w	r3, r3, #7
 8004ad8:	4904      	ldr	r1, [pc, #16]	; (8004aec <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ada:	5ccb      	ldrb	r3, [r1, r3]
 8004adc:	f003 031f 	and.w	r3, r3, #31
 8004ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	40021000 	.word	0x40021000
 8004aec:	0800bf1c 	.word	0x0800bf1c

08004af0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004af4:	f7ff ffda 	bl	8004aac <HAL_RCC_GetHCLKFreq>
 8004af8:	4602      	mov	r2, r0
 8004afa:	4b06      	ldr	r3, [pc, #24]	; (8004b14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	0adb      	lsrs	r3, r3, #11
 8004b00:	f003 0307 	and.w	r3, r3, #7
 8004b04:	4904      	ldr	r1, [pc, #16]	; (8004b18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b06:	5ccb      	ldrb	r3, [r1, r3]
 8004b08:	f003 031f 	and.w	r3, r3, #31
 8004b0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	40021000 	.word	0x40021000
 8004b18:	0800bf1c 	.word	0x0800bf1c

08004b1c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b086      	sub	sp, #24
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004b24:	2300      	movs	r3, #0
 8004b26:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004b28:	4b2a      	ldr	r3, [pc, #168]	; (8004bd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d003      	beq.n	8004b3c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004b34:	f7ff fa02 	bl	8003f3c <HAL_PWREx_GetVoltageRange>
 8004b38:	6178      	str	r0, [r7, #20]
 8004b3a:	e014      	b.n	8004b66 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b3c:	4b25      	ldr	r3, [pc, #148]	; (8004bd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b40:	4a24      	ldr	r2, [pc, #144]	; (8004bd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b46:	6593      	str	r3, [r2, #88]	; 0x58
 8004b48:	4b22      	ldr	r3, [pc, #136]	; (8004bd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b50:	60fb      	str	r3, [r7, #12]
 8004b52:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004b54:	f7ff f9f2 	bl	8003f3c <HAL_PWREx_GetVoltageRange>
 8004b58:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004b5a:	4b1e      	ldr	r3, [pc, #120]	; (8004bd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b5e:	4a1d      	ldr	r2, [pc, #116]	; (8004bd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b64:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b6c:	d10b      	bne.n	8004b86 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2b80      	cmp	r3, #128	; 0x80
 8004b72:	d919      	bls.n	8004ba8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2ba0      	cmp	r3, #160	; 0xa0
 8004b78:	d902      	bls.n	8004b80 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004b7a:	2302      	movs	r3, #2
 8004b7c:	613b      	str	r3, [r7, #16]
 8004b7e:	e013      	b.n	8004ba8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004b80:	2301      	movs	r3, #1
 8004b82:	613b      	str	r3, [r7, #16]
 8004b84:	e010      	b.n	8004ba8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2b80      	cmp	r3, #128	; 0x80
 8004b8a:	d902      	bls.n	8004b92 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	613b      	str	r3, [r7, #16]
 8004b90:	e00a      	b.n	8004ba8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2b80      	cmp	r3, #128	; 0x80
 8004b96:	d102      	bne.n	8004b9e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004b98:	2302      	movs	r3, #2
 8004b9a:	613b      	str	r3, [r7, #16]
 8004b9c:	e004      	b.n	8004ba8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2b70      	cmp	r3, #112	; 0x70
 8004ba2:	d101      	bne.n	8004ba8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004ba8:	4b0b      	ldr	r3, [pc, #44]	; (8004bd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f023 0207 	bic.w	r2, r3, #7
 8004bb0:	4909      	ldr	r1, [pc, #36]	; (8004bd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004bb8:	4b07      	ldr	r3, [pc, #28]	; (8004bd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0307 	and.w	r3, r3, #7
 8004bc0:	693a      	ldr	r2, [r7, #16]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d001      	beq.n	8004bca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e000      	b.n	8004bcc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004bca:	2300      	movs	r3, #0
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3718      	adds	r7, #24
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	40021000 	.word	0x40021000
 8004bd8:	40022000 	.word	0x40022000

08004bdc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b086      	sub	sp, #24
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004be4:	2300      	movs	r3, #0
 8004be6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004be8:	2300      	movs	r3, #0
 8004bea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d041      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bfc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004c00:	d02a      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004c02:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004c06:	d824      	bhi.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004c08:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c0c:	d008      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004c0e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c12:	d81e      	bhi.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d00a      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004c18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c1c:	d010      	beq.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004c1e:	e018      	b.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004c20:	4b86      	ldr	r3, [pc, #536]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	4a85      	ldr	r2, [pc, #532]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c2a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c2c:	e015      	b.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	3304      	adds	r3, #4
 8004c32:	2100      	movs	r1, #0
 8004c34:	4618      	mov	r0, r3
 8004c36:	f000 fabb 	bl	80051b0 <RCCEx_PLLSAI1_Config>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c3e:	e00c      	b.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	3320      	adds	r3, #32
 8004c44:	2100      	movs	r1, #0
 8004c46:	4618      	mov	r0, r3
 8004c48:	f000 fba6 	bl	8005398 <RCCEx_PLLSAI2_Config>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c50:	e003      	b.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	74fb      	strb	r3, [r7, #19]
      break;
 8004c56:	e000      	b.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004c58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c5a:	7cfb      	ldrb	r3, [r7, #19]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d10b      	bne.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c60:	4b76      	ldr	r3, [pc, #472]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c66:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c6e:	4973      	ldr	r1, [pc, #460]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004c76:	e001      	b.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c78:	7cfb      	ldrb	r3, [r7, #19]
 8004c7a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d041      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c8c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004c90:	d02a      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004c92:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004c96:	d824      	bhi.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004c98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c9c:	d008      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004c9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ca2:	d81e      	bhi.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d00a      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004ca8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004cac:	d010      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004cae:	e018      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004cb0:	4b62      	ldr	r3, [pc, #392]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	4a61      	ldr	r2, [pc, #388]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cba:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004cbc:	e015      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	3304      	adds	r3, #4
 8004cc2:	2100      	movs	r1, #0
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f000 fa73 	bl	80051b0 <RCCEx_PLLSAI1_Config>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004cce:	e00c      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	3320      	adds	r3, #32
 8004cd4:	2100      	movs	r1, #0
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f000 fb5e 	bl	8005398 <RCCEx_PLLSAI2_Config>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004ce0:	e003      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	74fb      	strb	r3, [r7, #19]
      break;
 8004ce6:	e000      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004ce8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cea:	7cfb      	ldrb	r3, [r7, #19]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d10b      	bne.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004cf0:	4b52      	ldr	r3, [pc, #328]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cfe:	494f      	ldr	r1, [pc, #316]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004d06:	e001      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d08:	7cfb      	ldrb	r3, [r7, #19]
 8004d0a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	f000 80a0 	beq.w	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d1e:	4b47      	ldr	r3, [pc, #284]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d101      	bne.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e000      	b.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004d2e:	2300      	movs	r3, #0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d00d      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d34:	4b41      	ldr	r3, [pc, #260]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d38:	4a40      	ldr	r2, [pc, #256]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d3e:	6593      	str	r3, [r2, #88]	; 0x58
 8004d40:	4b3e      	ldr	r3, [pc, #248]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d48:	60bb      	str	r3, [r7, #8]
 8004d4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d50:	4b3b      	ldr	r3, [pc, #236]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a3a      	ldr	r2, [pc, #232]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004d56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d5a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d5c:	f7fc ffea 	bl	8001d34 <HAL_GetTick>
 8004d60:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004d62:	e009      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d64:	f7fc ffe6 	bl	8001d34 <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d902      	bls.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	74fb      	strb	r3, [r7, #19]
        break;
 8004d76:	e005      	b.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004d78:	4b31      	ldr	r3, [pc, #196]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d0ef      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004d84:	7cfb      	ldrb	r3, [r7, #19]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d15c      	bne.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d8a:	4b2c      	ldr	r3, [pc, #176]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d94:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d01f      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004da2:	697a      	ldr	r2, [r7, #20]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d019      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004da8:	4b24      	ldr	r3, [pc, #144]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004db2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004db4:	4b21      	ldr	r3, [pc, #132]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dba:	4a20      	ldr	r2, [pc, #128]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004dc4:	4b1d      	ldr	r3, [pc, #116]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dca:	4a1c      	ldr	r2, [pc, #112]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004dd4:	4a19      	ldr	r2, [pc, #100]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	f003 0301 	and.w	r3, r3, #1
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d016      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de6:	f7fc ffa5 	bl	8001d34 <HAL_GetTick>
 8004dea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dec:	e00b      	b.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dee:	f7fc ffa1 	bl	8001d34 <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d902      	bls.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004e00:	2303      	movs	r3, #3
 8004e02:	74fb      	strb	r3, [r7, #19]
            break;
 8004e04:	e006      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e06:	4b0d      	ldr	r3, [pc, #52]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e0c:	f003 0302 	and.w	r3, r3, #2
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d0ec      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004e14:	7cfb      	ldrb	r3, [r7, #19]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d10c      	bne.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e1a:	4b08      	ldr	r3, [pc, #32]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e2a:	4904      	ldr	r1, [pc, #16]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004e32:	e009      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e34:	7cfb      	ldrb	r3, [r7, #19]
 8004e36:	74bb      	strb	r3, [r7, #18]
 8004e38:	e006      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004e3a:	bf00      	nop
 8004e3c:	40021000 	.word	0x40021000
 8004e40:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e44:	7cfb      	ldrb	r3, [r7, #19]
 8004e46:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e48:	7c7b      	ldrb	r3, [r7, #17]
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d105      	bne.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e4e:	4b9e      	ldr	r3, [pc, #632]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e52:	4a9d      	ldr	r2, [pc, #628]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e58:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0301 	and.w	r3, r3, #1
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00a      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e66:	4b98      	ldr	r3, [pc, #608]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e6c:	f023 0203 	bic.w	r2, r3, #3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e74:	4994      	ldr	r1, [pc, #592]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 0302 	and.w	r3, r3, #2
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d00a      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e88:	4b8f      	ldr	r3, [pc, #572]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e8e:	f023 020c 	bic.w	r2, r3, #12
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e96:	498c      	ldr	r1, [pc, #560]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0304 	and.w	r3, r3, #4
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d00a      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004eaa:	4b87      	ldr	r3, [pc, #540]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb8:	4983      	ldr	r1, [pc, #524]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0308 	and.w	r3, r3, #8
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00a      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ecc:	4b7e      	ldr	r3, [pc, #504]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ed2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eda:	497b      	ldr	r1, [pc, #492]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004edc:	4313      	orrs	r3, r2
 8004ede:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0310 	and.w	r3, r3, #16
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d00a      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004eee:	4b76      	ldr	r3, [pc, #472]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ef4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004efc:	4972      	ldr	r1, [pc, #456]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0320 	and.w	r3, r3, #32
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d00a      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f10:	4b6d      	ldr	r3, [pc, #436]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f16:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f1e:	496a      	ldr	r1, [pc, #424]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f20:	4313      	orrs	r3, r2
 8004f22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00a      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f32:	4b65      	ldr	r3, [pc, #404]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f38:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f40:	4961      	ldr	r1, [pc, #388]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d00a      	beq.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004f54:	4b5c      	ldr	r3, [pc, #368]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f5a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f62:	4959      	ldr	r1, [pc, #356]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00a      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f76:	4b54      	ldr	r3, [pc, #336]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f7c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f84:	4950      	ldr	r1, [pc, #320]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f86:	4313      	orrs	r3, r2
 8004f88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00a      	beq.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f98:	4b4b      	ldr	r3, [pc, #300]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f9e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fa6:	4948      	ldr	r1, [pc, #288]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00a      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004fba:	4b43      	ldr	r3, [pc, #268]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fc0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc8:	493f      	ldr	r1, [pc, #252]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d028      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004fdc:	4b3a      	ldr	r3, [pc, #232]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fe2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fea:	4937      	ldr	r1, [pc, #220]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ff6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ffa:	d106      	bne.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ffc:	4b32      	ldr	r3, [pc, #200]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	4a31      	ldr	r2, [pc, #196]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005002:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005006:	60d3      	str	r3, [r2, #12]
 8005008:	e011      	b.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800500e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005012:	d10c      	bne.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	3304      	adds	r3, #4
 8005018:	2101      	movs	r1, #1
 800501a:	4618      	mov	r0, r3
 800501c:	f000 f8c8 	bl	80051b0 <RCCEx_PLLSAI1_Config>
 8005020:	4603      	mov	r3, r0
 8005022:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005024:	7cfb      	ldrb	r3, [r7, #19]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d001      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800502a:	7cfb      	ldrb	r3, [r7, #19]
 800502c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d028      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800503a:	4b23      	ldr	r3, [pc, #140]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800503c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005040:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005048:	491f      	ldr	r1, [pc, #124]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800504a:	4313      	orrs	r3, r2
 800504c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005054:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005058:	d106      	bne.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800505a:	4b1b      	ldr	r3, [pc, #108]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	4a1a      	ldr	r2, [pc, #104]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005060:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005064:	60d3      	str	r3, [r2, #12]
 8005066:	e011      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800506c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005070:	d10c      	bne.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	3304      	adds	r3, #4
 8005076:	2101      	movs	r1, #1
 8005078:	4618      	mov	r0, r3
 800507a:	f000 f899 	bl	80051b0 <RCCEx_PLLSAI1_Config>
 800507e:	4603      	mov	r3, r0
 8005080:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005082:	7cfb      	ldrb	r3, [r7, #19]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d001      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005088:	7cfb      	ldrb	r3, [r7, #19]
 800508a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005094:	2b00      	cmp	r3, #0
 8005096:	d02b      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005098:	4b0b      	ldr	r3, [pc, #44]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800509a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800509e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050a6:	4908      	ldr	r1, [pc, #32]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050a8:	4313      	orrs	r3, r2
 80050aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050b6:	d109      	bne.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050b8:	4b03      	ldr	r3, [pc, #12]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	4a02      	ldr	r2, [pc, #8]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050c2:	60d3      	str	r3, [r2, #12]
 80050c4:	e014      	b.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80050c6:	bf00      	nop
 80050c8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80050d4:	d10c      	bne.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	3304      	adds	r3, #4
 80050da:	2101      	movs	r1, #1
 80050dc:	4618      	mov	r0, r3
 80050de:	f000 f867 	bl	80051b0 <RCCEx_PLLSAI1_Config>
 80050e2:	4603      	mov	r3, r0
 80050e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80050e6:	7cfb      	ldrb	r3, [r7, #19]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d001      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80050ec:	7cfb      	ldrb	r3, [r7, #19]
 80050ee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d02f      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80050fc:	4b2b      	ldr	r3, [pc, #172]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80050fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005102:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800510a:	4928      	ldr	r1, [pc, #160]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800510c:	4313      	orrs	r3, r2
 800510e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005116:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800511a:	d10d      	bne.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	3304      	adds	r3, #4
 8005120:	2102      	movs	r1, #2
 8005122:	4618      	mov	r0, r3
 8005124:	f000 f844 	bl	80051b0 <RCCEx_PLLSAI1_Config>
 8005128:	4603      	mov	r3, r0
 800512a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800512c:	7cfb      	ldrb	r3, [r7, #19]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d014      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005132:	7cfb      	ldrb	r3, [r7, #19]
 8005134:	74bb      	strb	r3, [r7, #18]
 8005136:	e011      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800513c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005140:	d10c      	bne.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	3320      	adds	r3, #32
 8005146:	2102      	movs	r1, #2
 8005148:	4618      	mov	r0, r3
 800514a:	f000 f925 	bl	8005398 <RCCEx_PLLSAI2_Config>
 800514e:	4603      	mov	r3, r0
 8005150:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005152:	7cfb      	ldrb	r3, [r7, #19]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d001      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005158:	7cfb      	ldrb	r3, [r7, #19]
 800515a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005164:	2b00      	cmp	r3, #0
 8005166:	d00a      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005168:	4b10      	ldr	r3, [pc, #64]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800516a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800516e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005176:	490d      	ldr	r1, [pc, #52]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005178:	4313      	orrs	r3, r2
 800517a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00b      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800518a:	4b08      	ldr	r3, [pc, #32]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800518c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005190:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800519a:	4904      	ldr	r1, [pc, #16]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800519c:	4313      	orrs	r3, r2
 800519e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80051a2:	7cbb      	ldrb	r3, [r7, #18]
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3718      	adds	r7, #24
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}
 80051ac:	40021000 	.word	0x40021000

080051b0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80051ba:	2300      	movs	r3, #0
 80051bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80051be:	4b75      	ldr	r3, [pc, #468]	; (8005394 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	f003 0303 	and.w	r3, r3, #3
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d018      	beq.n	80051fc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80051ca:	4b72      	ldr	r3, [pc, #456]	; (8005394 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	f003 0203 	and.w	r2, r3, #3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d10d      	bne.n	80051f6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
       ||
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d009      	beq.n	80051f6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80051e2:	4b6c      	ldr	r3, [pc, #432]	; (8005394 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	091b      	lsrs	r3, r3, #4
 80051e8:	f003 0307 	and.w	r3, r3, #7
 80051ec:	1c5a      	adds	r2, r3, #1
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	685b      	ldr	r3, [r3, #4]
       ||
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d047      	beq.n	8005286 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	73fb      	strb	r3, [r7, #15]
 80051fa:	e044      	b.n	8005286 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2b03      	cmp	r3, #3
 8005202:	d018      	beq.n	8005236 <RCCEx_PLLSAI1_Config+0x86>
 8005204:	2b03      	cmp	r3, #3
 8005206:	d825      	bhi.n	8005254 <RCCEx_PLLSAI1_Config+0xa4>
 8005208:	2b01      	cmp	r3, #1
 800520a:	d002      	beq.n	8005212 <RCCEx_PLLSAI1_Config+0x62>
 800520c:	2b02      	cmp	r3, #2
 800520e:	d009      	beq.n	8005224 <RCCEx_PLLSAI1_Config+0x74>
 8005210:	e020      	b.n	8005254 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005212:	4b60      	ldr	r3, [pc, #384]	; (8005394 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0302 	and.w	r3, r3, #2
 800521a:	2b00      	cmp	r3, #0
 800521c:	d11d      	bne.n	800525a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005222:	e01a      	b.n	800525a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005224:	4b5b      	ldr	r3, [pc, #364]	; (8005394 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800522c:	2b00      	cmp	r3, #0
 800522e:	d116      	bne.n	800525e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005234:	e013      	b.n	800525e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005236:	4b57      	ldr	r3, [pc, #348]	; (8005394 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d10f      	bne.n	8005262 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005242:	4b54      	ldr	r3, [pc, #336]	; (8005394 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d109      	bne.n	8005262 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005252:	e006      	b.n	8005262 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	73fb      	strb	r3, [r7, #15]
      break;
 8005258:	e004      	b.n	8005264 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800525a:	bf00      	nop
 800525c:	e002      	b.n	8005264 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800525e:	bf00      	nop
 8005260:	e000      	b.n	8005264 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005262:	bf00      	nop
    }

    if(status == HAL_OK)
 8005264:	7bfb      	ldrb	r3, [r7, #15]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d10d      	bne.n	8005286 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800526a:	4b4a      	ldr	r3, [pc, #296]	; (8005394 <RCCEx_PLLSAI1_Config+0x1e4>)
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6819      	ldr	r1, [r3, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	3b01      	subs	r3, #1
 800527c:	011b      	lsls	r3, r3, #4
 800527e:	430b      	orrs	r3, r1
 8005280:	4944      	ldr	r1, [pc, #272]	; (8005394 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005282:	4313      	orrs	r3, r2
 8005284:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005286:	7bfb      	ldrb	r3, [r7, #15]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d17d      	bne.n	8005388 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800528c:	4b41      	ldr	r3, [pc, #260]	; (8005394 <RCCEx_PLLSAI1_Config+0x1e4>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a40      	ldr	r2, [pc, #256]	; (8005394 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005292:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005296:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005298:	f7fc fd4c 	bl	8001d34 <HAL_GetTick>
 800529c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800529e:	e009      	b.n	80052b4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80052a0:	f7fc fd48 	bl	8001d34 <HAL_GetTick>
 80052a4:	4602      	mov	r2, r0
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d902      	bls.n	80052b4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	73fb      	strb	r3, [r7, #15]
        break;
 80052b2:	e005      	b.n	80052c0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80052b4:	4b37      	ldr	r3, [pc, #220]	; (8005394 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d1ef      	bne.n	80052a0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80052c0:	7bfb      	ldrb	r3, [r7, #15]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d160      	bne.n	8005388 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d111      	bne.n	80052f0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80052cc:	4b31      	ldr	r3, [pc, #196]	; (8005394 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80052d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	6892      	ldr	r2, [r2, #8]
 80052dc:	0211      	lsls	r1, r2, #8
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	68d2      	ldr	r2, [r2, #12]
 80052e2:	0912      	lsrs	r2, r2, #4
 80052e4:	0452      	lsls	r2, r2, #17
 80052e6:	430a      	orrs	r2, r1
 80052e8:	492a      	ldr	r1, [pc, #168]	; (8005394 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052ea:	4313      	orrs	r3, r2
 80052ec:	610b      	str	r3, [r1, #16]
 80052ee:	e027      	b.n	8005340 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d112      	bne.n	800531c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80052f6:	4b27      	ldr	r3, [pc, #156]	; (8005394 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80052fe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	6892      	ldr	r2, [r2, #8]
 8005306:	0211      	lsls	r1, r2, #8
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	6912      	ldr	r2, [r2, #16]
 800530c:	0852      	lsrs	r2, r2, #1
 800530e:	3a01      	subs	r2, #1
 8005310:	0552      	lsls	r2, r2, #21
 8005312:	430a      	orrs	r2, r1
 8005314:	491f      	ldr	r1, [pc, #124]	; (8005394 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005316:	4313      	orrs	r3, r2
 8005318:	610b      	str	r3, [r1, #16]
 800531a:	e011      	b.n	8005340 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800531c:	4b1d      	ldr	r3, [pc, #116]	; (8005394 <RCCEx_PLLSAI1_Config+0x1e4>)
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005324:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	6892      	ldr	r2, [r2, #8]
 800532c:	0211      	lsls	r1, r2, #8
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	6952      	ldr	r2, [r2, #20]
 8005332:	0852      	lsrs	r2, r2, #1
 8005334:	3a01      	subs	r2, #1
 8005336:	0652      	lsls	r2, r2, #25
 8005338:	430a      	orrs	r2, r1
 800533a:	4916      	ldr	r1, [pc, #88]	; (8005394 <RCCEx_PLLSAI1_Config+0x1e4>)
 800533c:	4313      	orrs	r3, r2
 800533e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005340:	4b14      	ldr	r3, [pc, #80]	; (8005394 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a13      	ldr	r2, [pc, #76]	; (8005394 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005346:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800534a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800534c:	f7fc fcf2 	bl	8001d34 <HAL_GetTick>
 8005350:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005352:	e009      	b.n	8005368 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005354:	f7fc fcee 	bl	8001d34 <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	2b02      	cmp	r3, #2
 8005360:	d902      	bls.n	8005368 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	73fb      	strb	r3, [r7, #15]
          break;
 8005366:	e005      	b.n	8005374 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005368:	4b0a      	ldr	r3, [pc, #40]	; (8005394 <RCCEx_PLLSAI1_Config+0x1e4>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d0ef      	beq.n	8005354 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005374:	7bfb      	ldrb	r3, [r7, #15]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d106      	bne.n	8005388 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800537a:	4b06      	ldr	r3, [pc, #24]	; (8005394 <RCCEx_PLLSAI1_Config+0x1e4>)
 800537c:	691a      	ldr	r2, [r3, #16]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	699b      	ldr	r3, [r3, #24]
 8005382:	4904      	ldr	r1, [pc, #16]	; (8005394 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005384:	4313      	orrs	r3, r2
 8005386:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005388:	7bfb      	ldrb	r3, [r7, #15]
}
 800538a:	4618      	mov	r0, r3
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	40021000 	.word	0x40021000

08005398 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80053a2:	2300      	movs	r3, #0
 80053a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80053a6:	4b6a      	ldr	r3, [pc, #424]	; (8005550 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	f003 0303 	and.w	r3, r3, #3
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d018      	beq.n	80053e4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80053b2:	4b67      	ldr	r3, [pc, #412]	; (8005550 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	f003 0203 	and.w	r2, r3, #3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d10d      	bne.n	80053de <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
       ||
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d009      	beq.n	80053de <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80053ca:	4b61      	ldr	r3, [pc, #388]	; (8005550 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	091b      	lsrs	r3, r3, #4
 80053d0:	f003 0307 	and.w	r3, r3, #7
 80053d4:	1c5a      	adds	r2, r3, #1
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	685b      	ldr	r3, [r3, #4]
       ||
 80053da:	429a      	cmp	r2, r3
 80053dc:	d047      	beq.n	800546e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	73fb      	strb	r3, [r7, #15]
 80053e2:	e044      	b.n	800546e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2b03      	cmp	r3, #3
 80053ea:	d018      	beq.n	800541e <RCCEx_PLLSAI2_Config+0x86>
 80053ec:	2b03      	cmp	r3, #3
 80053ee:	d825      	bhi.n	800543c <RCCEx_PLLSAI2_Config+0xa4>
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d002      	beq.n	80053fa <RCCEx_PLLSAI2_Config+0x62>
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d009      	beq.n	800540c <RCCEx_PLLSAI2_Config+0x74>
 80053f8:	e020      	b.n	800543c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80053fa:	4b55      	ldr	r3, [pc, #340]	; (8005550 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0302 	and.w	r3, r3, #2
 8005402:	2b00      	cmp	r3, #0
 8005404:	d11d      	bne.n	8005442 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800540a:	e01a      	b.n	8005442 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800540c:	4b50      	ldr	r3, [pc, #320]	; (8005550 <RCCEx_PLLSAI2_Config+0x1b8>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005414:	2b00      	cmp	r3, #0
 8005416:	d116      	bne.n	8005446 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800541c:	e013      	b.n	8005446 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800541e:	4b4c      	ldr	r3, [pc, #304]	; (8005550 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d10f      	bne.n	800544a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800542a:	4b49      	ldr	r3, [pc, #292]	; (8005550 <RCCEx_PLLSAI2_Config+0x1b8>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005432:	2b00      	cmp	r3, #0
 8005434:	d109      	bne.n	800544a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800543a:	e006      	b.n	800544a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	73fb      	strb	r3, [r7, #15]
      break;
 8005440:	e004      	b.n	800544c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005442:	bf00      	nop
 8005444:	e002      	b.n	800544c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005446:	bf00      	nop
 8005448:	e000      	b.n	800544c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800544a:	bf00      	nop
    }

    if(status == HAL_OK)
 800544c:	7bfb      	ldrb	r3, [r7, #15]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d10d      	bne.n	800546e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005452:	4b3f      	ldr	r3, [pc, #252]	; (8005550 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6819      	ldr	r1, [r3, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	3b01      	subs	r3, #1
 8005464:	011b      	lsls	r3, r3, #4
 8005466:	430b      	orrs	r3, r1
 8005468:	4939      	ldr	r1, [pc, #228]	; (8005550 <RCCEx_PLLSAI2_Config+0x1b8>)
 800546a:	4313      	orrs	r3, r2
 800546c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800546e:	7bfb      	ldrb	r3, [r7, #15]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d167      	bne.n	8005544 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005474:	4b36      	ldr	r3, [pc, #216]	; (8005550 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a35      	ldr	r2, [pc, #212]	; (8005550 <RCCEx_PLLSAI2_Config+0x1b8>)
 800547a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800547e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005480:	f7fc fc58 	bl	8001d34 <HAL_GetTick>
 8005484:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005486:	e009      	b.n	800549c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005488:	f7fc fc54 	bl	8001d34 <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	2b02      	cmp	r3, #2
 8005494:	d902      	bls.n	800549c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	73fb      	strb	r3, [r7, #15]
        break;
 800549a:	e005      	b.n	80054a8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800549c:	4b2c      	ldr	r3, [pc, #176]	; (8005550 <RCCEx_PLLSAI2_Config+0x1b8>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d1ef      	bne.n	8005488 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80054a8:	7bfb      	ldrb	r3, [r7, #15]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d14a      	bne.n	8005544 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d111      	bne.n	80054d8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80054b4:	4b26      	ldr	r3, [pc, #152]	; (8005550 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054b6:	695b      	ldr	r3, [r3, #20]
 80054b8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80054bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	6892      	ldr	r2, [r2, #8]
 80054c4:	0211      	lsls	r1, r2, #8
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	68d2      	ldr	r2, [r2, #12]
 80054ca:	0912      	lsrs	r2, r2, #4
 80054cc:	0452      	lsls	r2, r2, #17
 80054ce:	430a      	orrs	r2, r1
 80054d0:	491f      	ldr	r1, [pc, #124]	; (8005550 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	614b      	str	r3, [r1, #20]
 80054d6:	e011      	b.n	80054fc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80054d8:	4b1d      	ldr	r3, [pc, #116]	; (8005550 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054da:	695b      	ldr	r3, [r3, #20]
 80054dc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80054e0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	6892      	ldr	r2, [r2, #8]
 80054e8:	0211      	lsls	r1, r2, #8
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	6912      	ldr	r2, [r2, #16]
 80054ee:	0852      	lsrs	r2, r2, #1
 80054f0:	3a01      	subs	r2, #1
 80054f2:	0652      	lsls	r2, r2, #25
 80054f4:	430a      	orrs	r2, r1
 80054f6:	4916      	ldr	r1, [pc, #88]	; (8005550 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054f8:	4313      	orrs	r3, r2
 80054fa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80054fc:	4b14      	ldr	r3, [pc, #80]	; (8005550 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a13      	ldr	r2, [pc, #76]	; (8005550 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005502:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005506:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005508:	f7fc fc14 	bl	8001d34 <HAL_GetTick>
 800550c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800550e:	e009      	b.n	8005524 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005510:	f7fc fc10 	bl	8001d34 <HAL_GetTick>
 8005514:	4602      	mov	r2, r0
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	2b02      	cmp	r3, #2
 800551c:	d902      	bls.n	8005524 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	73fb      	strb	r3, [r7, #15]
          break;
 8005522:	e005      	b.n	8005530 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005524:	4b0a      	ldr	r3, [pc, #40]	; (8005550 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800552c:	2b00      	cmp	r3, #0
 800552e:	d0ef      	beq.n	8005510 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005530:	7bfb      	ldrb	r3, [r7, #15]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d106      	bne.n	8005544 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005536:	4b06      	ldr	r3, [pc, #24]	; (8005550 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005538:	695a      	ldr	r2, [r3, #20]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	695b      	ldr	r3, [r3, #20]
 800553e:	4904      	ldr	r1, [pc, #16]	; (8005550 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005540:	4313      	orrs	r3, r2
 8005542:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005544:	7bfb      	ldrb	r3, [r7, #15]
}
 8005546:	4618      	mov	r0, r3
 8005548:	3710      	adds	r7, #16
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	40021000 	.word	0x40021000

08005554 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d101      	bne.n	8005566 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e049      	b.n	80055fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800556c:	b2db      	uxtb	r3, r3
 800556e:	2b00      	cmp	r3, #0
 8005570:	d106      	bne.n	8005580 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f7fc f942 	bl	8001804 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2202      	movs	r2, #2
 8005584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	3304      	adds	r3, #4
 8005590:	4619      	mov	r1, r3
 8005592:	4610      	mov	r0, r2
 8005594:	f000 fccc 	bl	8005f30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3708      	adds	r7, #8
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}

08005602 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005602:	b580      	push	{r7, lr}
 8005604:	b082      	sub	sp, #8
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d101      	bne.n	8005614 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e049      	b.n	80056a8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800561a:	b2db      	uxtb	r3, r3
 800561c:	2b00      	cmp	r3, #0
 800561e:	d106      	bne.n	800562e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f000 f841 	bl	80056b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2202      	movs	r2, #2
 8005632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	3304      	adds	r3, #4
 800563e:	4619      	mov	r1, r3
 8005640:	4610      	mov	r0, r2
 8005642:	f000 fc75 	bl	8005f30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2201      	movs	r2, #1
 800564a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2201      	movs	r2, #1
 8005652:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2201      	movs	r2, #1
 800565a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2201      	movs	r2, #1
 8005662:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2201      	movs	r2, #1
 800566a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2201      	movs	r2, #1
 8005672:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2201      	movs	r2, #1
 800567a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2201      	movs	r2, #1
 8005682:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2201      	movs	r2, #1
 800568a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2201      	movs	r2, #1
 8005692:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2201      	movs	r2, #1
 800569a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2201      	movs	r2, #1
 80056a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056a6:	2300      	movs	r3, #0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3708      	adds	r7, #8
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80056b8:	bf00      	nop
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d109      	bne.n	80056e8 <HAL_TIM_PWM_Start+0x24>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	2b01      	cmp	r3, #1
 80056de:	bf14      	ite	ne
 80056e0:	2301      	movne	r3, #1
 80056e2:	2300      	moveq	r3, #0
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	e03c      	b.n	8005762 <HAL_TIM_PWM_Start+0x9e>
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	2b04      	cmp	r3, #4
 80056ec:	d109      	bne.n	8005702 <HAL_TIM_PWM_Start+0x3e>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	bf14      	ite	ne
 80056fa:	2301      	movne	r3, #1
 80056fc:	2300      	moveq	r3, #0
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	e02f      	b.n	8005762 <HAL_TIM_PWM_Start+0x9e>
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	2b08      	cmp	r3, #8
 8005706:	d109      	bne.n	800571c <HAL_TIM_PWM_Start+0x58>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800570e:	b2db      	uxtb	r3, r3
 8005710:	2b01      	cmp	r3, #1
 8005712:	bf14      	ite	ne
 8005714:	2301      	movne	r3, #1
 8005716:	2300      	moveq	r3, #0
 8005718:	b2db      	uxtb	r3, r3
 800571a:	e022      	b.n	8005762 <HAL_TIM_PWM_Start+0x9e>
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	2b0c      	cmp	r3, #12
 8005720:	d109      	bne.n	8005736 <HAL_TIM_PWM_Start+0x72>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005728:	b2db      	uxtb	r3, r3
 800572a:	2b01      	cmp	r3, #1
 800572c:	bf14      	ite	ne
 800572e:	2301      	movne	r3, #1
 8005730:	2300      	moveq	r3, #0
 8005732:	b2db      	uxtb	r3, r3
 8005734:	e015      	b.n	8005762 <HAL_TIM_PWM_Start+0x9e>
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	2b10      	cmp	r3, #16
 800573a:	d109      	bne.n	8005750 <HAL_TIM_PWM_Start+0x8c>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005742:	b2db      	uxtb	r3, r3
 8005744:	2b01      	cmp	r3, #1
 8005746:	bf14      	ite	ne
 8005748:	2301      	movne	r3, #1
 800574a:	2300      	moveq	r3, #0
 800574c:	b2db      	uxtb	r3, r3
 800574e:	e008      	b.n	8005762 <HAL_TIM_PWM_Start+0x9e>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005756:	b2db      	uxtb	r3, r3
 8005758:	2b01      	cmp	r3, #1
 800575a:	bf14      	ite	ne
 800575c:	2301      	movne	r3, #1
 800575e:	2300      	moveq	r3, #0
 8005760:	b2db      	uxtb	r3, r3
 8005762:	2b00      	cmp	r3, #0
 8005764:	d001      	beq.n	800576a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e09c      	b.n	80058a4 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d104      	bne.n	800577a <HAL_TIM_PWM_Start+0xb6>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2202      	movs	r2, #2
 8005774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005778:	e023      	b.n	80057c2 <HAL_TIM_PWM_Start+0xfe>
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	2b04      	cmp	r3, #4
 800577e:	d104      	bne.n	800578a <HAL_TIM_PWM_Start+0xc6>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2202      	movs	r2, #2
 8005784:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005788:	e01b      	b.n	80057c2 <HAL_TIM_PWM_Start+0xfe>
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	2b08      	cmp	r3, #8
 800578e:	d104      	bne.n	800579a <HAL_TIM_PWM_Start+0xd6>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2202      	movs	r2, #2
 8005794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005798:	e013      	b.n	80057c2 <HAL_TIM_PWM_Start+0xfe>
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	2b0c      	cmp	r3, #12
 800579e:	d104      	bne.n	80057aa <HAL_TIM_PWM_Start+0xe6>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2202      	movs	r2, #2
 80057a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057a8:	e00b      	b.n	80057c2 <HAL_TIM_PWM_Start+0xfe>
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	2b10      	cmp	r3, #16
 80057ae:	d104      	bne.n	80057ba <HAL_TIM_PWM_Start+0xf6>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2202      	movs	r2, #2
 80057b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057b8:	e003      	b.n	80057c2 <HAL_TIM_PWM_Start+0xfe>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2202      	movs	r2, #2
 80057be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2201      	movs	r2, #1
 80057c8:	6839      	ldr	r1, [r7, #0]
 80057ca:	4618      	mov	r0, r3
 80057cc:	f000 ffba 	bl	8006744 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a35      	ldr	r2, [pc, #212]	; (80058ac <HAL_TIM_PWM_Start+0x1e8>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d013      	beq.n	8005802 <HAL_TIM_PWM_Start+0x13e>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a34      	ldr	r2, [pc, #208]	; (80058b0 <HAL_TIM_PWM_Start+0x1ec>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d00e      	beq.n	8005802 <HAL_TIM_PWM_Start+0x13e>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a32      	ldr	r2, [pc, #200]	; (80058b4 <HAL_TIM_PWM_Start+0x1f0>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d009      	beq.n	8005802 <HAL_TIM_PWM_Start+0x13e>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a31      	ldr	r2, [pc, #196]	; (80058b8 <HAL_TIM_PWM_Start+0x1f4>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d004      	beq.n	8005802 <HAL_TIM_PWM_Start+0x13e>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a2f      	ldr	r2, [pc, #188]	; (80058bc <HAL_TIM_PWM_Start+0x1f8>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d101      	bne.n	8005806 <HAL_TIM_PWM_Start+0x142>
 8005802:	2301      	movs	r3, #1
 8005804:	e000      	b.n	8005808 <HAL_TIM_PWM_Start+0x144>
 8005806:	2300      	movs	r3, #0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d007      	beq.n	800581c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800581a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a22      	ldr	r2, [pc, #136]	; (80058ac <HAL_TIM_PWM_Start+0x1e8>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d01d      	beq.n	8005862 <HAL_TIM_PWM_Start+0x19e>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800582e:	d018      	beq.n	8005862 <HAL_TIM_PWM_Start+0x19e>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a22      	ldr	r2, [pc, #136]	; (80058c0 <HAL_TIM_PWM_Start+0x1fc>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d013      	beq.n	8005862 <HAL_TIM_PWM_Start+0x19e>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a21      	ldr	r2, [pc, #132]	; (80058c4 <HAL_TIM_PWM_Start+0x200>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d00e      	beq.n	8005862 <HAL_TIM_PWM_Start+0x19e>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a1f      	ldr	r2, [pc, #124]	; (80058c8 <HAL_TIM_PWM_Start+0x204>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d009      	beq.n	8005862 <HAL_TIM_PWM_Start+0x19e>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a17      	ldr	r2, [pc, #92]	; (80058b0 <HAL_TIM_PWM_Start+0x1ec>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d004      	beq.n	8005862 <HAL_TIM_PWM_Start+0x19e>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a15      	ldr	r2, [pc, #84]	; (80058b4 <HAL_TIM_PWM_Start+0x1f0>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d115      	bne.n	800588e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	689a      	ldr	r2, [r3, #8]
 8005868:	4b18      	ldr	r3, [pc, #96]	; (80058cc <HAL_TIM_PWM_Start+0x208>)
 800586a:	4013      	ands	r3, r2
 800586c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2b06      	cmp	r3, #6
 8005872:	d015      	beq.n	80058a0 <HAL_TIM_PWM_Start+0x1dc>
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800587a:	d011      	beq.n	80058a0 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f042 0201 	orr.w	r2, r2, #1
 800588a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800588c:	e008      	b.n	80058a0 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f042 0201 	orr.w	r2, r2, #1
 800589c:	601a      	str	r2, [r3, #0]
 800589e:	e000      	b.n	80058a2 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80058a2:	2300      	movs	r3, #0
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3710      	adds	r7, #16
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	40012c00 	.word	0x40012c00
 80058b0:	40013400 	.word	0x40013400
 80058b4:	40014000 	.word	0x40014000
 80058b8:	40014400 	.word	0x40014400
 80058bc:	40014800 	.word	0x40014800
 80058c0:	40000400 	.word	0x40000400
 80058c4:	40000800 	.word	0x40000800
 80058c8:	40000c00 	.word	0x40000c00
 80058cc:	00010007 	.word	0x00010007

080058d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b082      	sub	sp, #8
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	f003 0302 	and.w	r3, r3, #2
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d122      	bne.n	800592c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	f003 0302 	and.w	r3, r3, #2
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	d11b      	bne.n	800592c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f06f 0202 	mvn.w	r2, #2
 80058fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2201      	movs	r2, #1
 8005902:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	699b      	ldr	r3, [r3, #24]
 800590a:	f003 0303 	and.w	r3, r3, #3
 800590e:	2b00      	cmp	r3, #0
 8005910:	d003      	beq.n	800591a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 faed 	bl	8005ef2 <HAL_TIM_IC_CaptureCallback>
 8005918:	e005      	b.n	8005926 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 fadf 	bl	8005ede <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f000 faf0 	bl	8005f06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	f003 0304 	and.w	r3, r3, #4
 8005936:	2b04      	cmp	r3, #4
 8005938:	d122      	bne.n	8005980 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	f003 0304 	and.w	r3, r3, #4
 8005944:	2b04      	cmp	r3, #4
 8005946:	d11b      	bne.n	8005980 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f06f 0204 	mvn.w	r2, #4
 8005950:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2202      	movs	r2, #2
 8005956:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	699b      	ldr	r3, [r3, #24]
 800595e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005962:	2b00      	cmp	r3, #0
 8005964:	d003      	beq.n	800596e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 fac3 	bl	8005ef2 <HAL_TIM_IC_CaptureCallback>
 800596c:	e005      	b.n	800597a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 fab5 	bl	8005ede <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f000 fac6 	bl	8005f06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	f003 0308 	and.w	r3, r3, #8
 800598a:	2b08      	cmp	r3, #8
 800598c:	d122      	bne.n	80059d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	f003 0308 	and.w	r3, r3, #8
 8005998:	2b08      	cmp	r3, #8
 800599a:	d11b      	bne.n	80059d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f06f 0208 	mvn.w	r2, #8
 80059a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2204      	movs	r2, #4
 80059aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	69db      	ldr	r3, [r3, #28]
 80059b2:	f003 0303 	and.w	r3, r3, #3
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d003      	beq.n	80059c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 fa99 	bl	8005ef2 <HAL_TIM_IC_CaptureCallback>
 80059c0:	e005      	b.n	80059ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 fa8b 	bl	8005ede <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 fa9c 	bl	8005f06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	f003 0310 	and.w	r3, r3, #16
 80059de:	2b10      	cmp	r3, #16
 80059e0:	d122      	bne.n	8005a28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	f003 0310 	and.w	r3, r3, #16
 80059ec:	2b10      	cmp	r3, #16
 80059ee:	d11b      	bne.n	8005a28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f06f 0210 	mvn.w	r2, #16
 80059f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2208      	movs	r2, #8
 80059fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	69db      	ldr	r3, [r3, #28]
 8005a06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d003      	beq.n	8005a16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 fa6f 	bl	8005ef2 <HAL_TIM_IC_CaptureCallback>
 8005a14:	e005      	b.n	8005a22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 fa61 	bl	8005ede <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 fa72 	bl	8005f06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	f003 0301 	and.w	r3, r3, #1
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d10e      	bne.n	8005a54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	f003 0301 	and.w	r3, r3, #1
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d107      	bne.n	8005a54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f06f 0201 	mvn.w	r2, #1
 8005a4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 fa3b 	bl	8005eca <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a5e:	2b80      	cmp	r3, #128	; 0x80
 8005a60:	d10e      	bne.n	8005a80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a6c:	2b80      	cmp	r3, #128	; 0x80
 8005a6e:	d107      	bne.n	8005a80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 ff1a 	bl	80068b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a8e:	d10e      	bne.n	8005aae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a9a:	2b80      	cmp	r3, #128	; 0x80
 8005a9c:	d107      	bne.n	8005aae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005aa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f000 ff0d 	bl	80068c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab8:	2b40      	cmp	r3, #64	; 0x40
 8005aba:	d10e      	bne.n	8005ada <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ac6:	2b40      	cmp	r3, #64	; 0x40
 8005ac8:	d107      	bne.n	8005ada <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ad2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 fa20 	bl	8005f1a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	f003 0320 	and.w	r3, r3, #32
 8005ae4:	2b20      	cmp	r3, #32
 8005ae6:	d10e      	bne.n	8005b06 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	f003 0320 	and.w	r3, r3, #32
 8005af2:	2b20      	cmp	r3, #32
 8005af4:	d107      	bne.n	8005b06 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f06f 0220 	mvn.w	r2, #32
 8005afe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f000 fecd 	bl	80068a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b06:	bf00      	nop
 8005b08:	3708      	adds	r7, #8
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
	...

08005b10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b086      	sub	sp, #24
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d101      	bne.n	8005b2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005b2a:	2302      	movs	r3, #2
 8005b2c:	e0ff      	b.n	8005d2e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2201      	movs	r2, #1
 8005b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2b14      	cmp	r3, #20
 8005b3a:	f200 80f0 	bhi.w	8005d1e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005b3e:	a201      	add	r2, pc, #4	; (adr r2, 8005b44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b44:	08005b99 	.word	0x08005b99
 8005b48:	08005d1f 	.word	0x08005d1f
 8005b4c:	08005d1f 	.word	0x08005d1f
 8005b50:	08005d1f 	.word	0x08005d1f
 8005b54:	08005bd9 	.word	0x08005bd9
 8005b58:	08005d1f 	.word	0x08005d1f
 8005b5c:	08005d1f 	.word	0x08005d1f
 8005b60:	08005d1f 	.word	0x08005d1f
 8005b64:	08005c1b 	.word	0x08005c1b
 8005b68:	08005d1f 	.word	0x08005d1f
 8005b6c:	08005d1f 	.word	0x08005d1f
 8005b70:	08005d1f 	.word	0x08005d1f
 8005b74:	08005c5b 	.word	0x08005c5b
 8005b78:	08005d1f 	.word	0x08005d1f
 8005b7c:	08005d1f 	.word	0x08005d1f
 8005b80:	08005d1f 	.word	0x08005d1f
 8005b84:	08005c9d 	.word	0x08005c9d
 8005b88:	08005d1f 	.word	0x08005d1f
 8005b8c:	08005d1f 	.word	0x08005d1f
 8005b90:	08005d1f 	.word	0x08005d1f
 8005b94:	08005cdd 	.word	0x08005cdd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	68b9      	ldr	r1, [r7, #8]
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f000 fa60 	bl	8006064 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	699a      	ldr	r2, [r3, #24]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f042 0208 	orr.w	r2, r2, #8
 8005bb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	699a      	ldr	r2, [r3, #24]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f022 0204 	bic.w	r2, r2, #4
 8005bc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	6999      	ldr	r1, [r3, #24]
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	691a      	ldr	r2, [r3, #16]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	430a      	orrs	r2, r1
 8005bd4:	619a      	str	r2, [r3, #24]
      break;
 8005bd6:	e0a5      	b.n	8005d24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68b9      	ldr	r1, [r7, #8]
 8005bde:	4618      	mov	r0, r3
 8005be0:	f000 fad0 	bl	8006184 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	699a      	ldr	r2, [r3, #24]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bf2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	699a      	ldr	r2, [r3, #24]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	6999      	ldr	r1, [r3, #24]
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	021a      	lsls	r2, r3, #8
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	430a      	orrs	r2, r1
 8005c16:	619a      	str	r2, [r3, #24]
      break;
 8005c18:	e084      	b.n	8005d24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68b9      	ldr	r1, [r7, #8]
 8005c20:	4618      	mov	r0, r3
 8005c22:	f000 fb39 	bl	8006298 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	69da      	ldr	r2, [r3, #28]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f042 0208 	orr.w	r2, r2, #8
 8005c34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	69da      	ldr	r2, [r3, #28]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f022 0204 	bic.w	r2, r2, #4
 8005c44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	69d9      	ldr	r1, [r3, #28]
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	691a      	ldr	r2, [r3, #16]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	430a      	orrs	r2, r1
 8005c56:	61da      	str	r2, [r3, #28]
      break;
 8005c58:	e064      	b.n	8005d24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	68b9      	ldr	r1, [r7, #8]
 8005c60:	4618      	mov	r0, r3
 8005c62:	f000 fba1 	bl	80063a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	69da      	ldr	r2, [r3, #28]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	69da      	ldr	r2, [r3, #28]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	69d9      	ldr	r1, [r3, #28]
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	021a      	lsls	r2, r3, #8
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	430a      	orrs	r2, r1
 8005c98:	61da      	str	r2, [r3, #28]
      break;
 8005c9a:	e043      	b.n	8005d24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	68b9      	ldr	r1, [r7, #8]
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f000 fbea 	bl	800647c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f042 0208 	orr.w	r2, r2, #8
 8005cb6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f022 0204 	bic.w	r2, r2, #4
 8005cc6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	691a      	ldr	r2, [r3, #16]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	430a      	orrs	r2, r1
 8005cd8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005cda:	e023      	b.n	8005d24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	68b9      	ldr	r1, [r7, #8]
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f000 fc2e 	bl	8006544 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cf6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d06:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	021a      	lsls	r2, r3, #8
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	430a      	orrs	r2, r1
 8005d1a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005d1c:	e002      	b.n	8005d24 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	75fb      	strb	r3, [r7, #23]
      break;
 8005d22:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3718      	adds	r7, #24
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop

08005d38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d42:	2300      	movs	r3, #0
 8005d44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d101      	bne.n	8005d54 <HAL_TIM_ConfigClockSource+0x1c>
 8005d50:	2302      	movs	r3, #2
 8005d52:	e0b6      	b.n	8005ec2 <HAL_TIM_ConfigClockSource+0x18a>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2202      	movs	r2, #2
 8005d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005d76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	68ba      	ldr	r2, [r7, #8]
 8005d86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d90:	d03e      	beq.n	8005e10 <HAL_TIM_ConfigClockSource+0xd8>
 8005d92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d96:	f200 8087 	bhi.w	8005ea8 <HAL_TIM_ConfigClockSource+0x170>
 8005d9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d9e:	f000 8086 	beq.w	8005eae <HAL_TIM_ConfigClockSource+0x176>
 8005da2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005da6:	d87f      	bhi.n	8005ea8 <HAL_TIM_ConfigClockSource+0x170>
 8005da8:	2b70      	cmp	r3, #112	; 0x70
 8005daa:	d01a      	beq.n	8005de2 <HAL_TIM_ConfigClockSource+0xaa>
 8005dac:	2b70      	cmp	r3, #112	; 0x70
 8005dae:	d87b      	bhi.n	8005ea8 <HAL_TIM_ConfigClockSource+0x170>
 8005db0:	2b60      	cmp	r3, #96	; 0x60
 8005db2:	d050      	beq.n	8005e56 <HAL_TIM_ConfigClockSource+0x11e>
 8005db4:	2b60      	cmp	r3, #96	; 0x60
 8005db6:	d877      	bhi.n	8005ea8 <HAL_TIM_ConfigClockSource+0x170>
 8005db8:	2b50      	cmp	r3, #80	; 0x50
 8005dba:	d03c      	beq.n	8005e36 <HAL_TIM_ConfigClockSource+0xfe>
 8005dbc:	2b50      	cmp	r3, #80	; 0x50
 8005dbe:	d873      	bhi.n	8005ea8 <HAL_TIM_ConfigClockSource+0x170>
 8005dc0:	2b40      	cmp	r3, #64	; 0x40
 8005dc2:	d058      	beq.n	8005e76 <HAL_TIM_ConfigClockSource+0x13e>
 8005dc4:	2b40      	cmp	r3, #64	; 0x40
 8005dc6:	d86f      	bhi.n	8005ea8 <HAL_TIM_ConfigClockSource+0x170>
 8005dc8:	2b30      	cmp	r3, #48	; 0x30
 8005dca:	d064      	beq.n	8005e96 <HAL_TIM_ConfigClockSource+0x15e>
 8005dcc:	2b30      	cmp	r3, #48	; 0x30
 8005dce:	d86b      	bhi.n	8005ea8 <HAL_TIM_ConfigClockSource+0x170>
 8005dd0:	2b20      	cmp	r3, #32
 8005dd2:	d060      	beq.n	8005e96 <HAL_TIM_ConfigClockSource+0x15e>
 8005dd4:	2b20      	cmp	r3, #32
 8005dd6:	d867      	bhi.n	8005ea8 <HAL_TIM_ConfigClockSource+0x170>
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d05c      	beq.n	8005e96 <HAL_TIM_ConfigClockSource+0x15e>
 8005ddc:	2b10      	cmp	r3, #16
 8005dde:	d05a      	beq.n	8005e96 <HAL_TIM_ConfigClockSource+0x15e>
 8005de0:	e062      	b.n	8005ea8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6818      	ldr	r0, [r3, #0]
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	6899      	ldr	r1, [r3, #8]
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	685a      	ldr	r2, [r3, #4]
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	f000 fc87 	bl	8006704 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005e04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	68ba      	ldr	r2, [r7, #8]
 8005e0c:	609a      	str	r2, [r3, #8]
      break;
 8005e0e:	e04f      	b.n	8005eb0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6818      	ldr	r0, [r3, #0]
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	6899      	ldr	r1, [r3, #8]
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	685a      	ldr	r2, [r3, #4]
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	f000 fc70 	bl	8006704 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	689a      	ldr	r2, [r3, #8]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e32:	609a      	str	r2, [r3, #8]
      break;
 8005e34:	e03c      	b.n	8005eb0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6818      	ldr	r0, [r3, #0]
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	6859      	ldr	r1, [r3, #4]
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	461a      	mov	r2, r3
 8005e44:	f000 fbe4 	bl	8006610 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	2150      	movs	r1, #80	; 0x50
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f000 fc3d 	bl	80066ce <TIM_ITRx_SetConfig>
      break;
 8005e54:	e02c      	b.n	8005eb0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6818      	ldr	r0, [r3, #0]
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	6859      	ldr	r1, [r3, #4]
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	461a      	mov	r2, r3
 8005e64:	f000 fc03 	bl	800666e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2160      	movs	r1, #96	; 0x60
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f000 fc2d 	bl	80066ce <TIM_ITRx_SetConfig>
      break;
 8005e74:	e01c      	b.n	8005eb0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6818      	ldr	r0, [r3, #0]
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	6859      	ldr	r1, [r3, #4]
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	461a      	mov	r2, r3
 8005e84:	f000 fbc4 	bl	8006610 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2140      	movs	r1, #64	; 0x40
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f000 fc1d 	bl	80066ce <TIM_ITRx_SetConfig>
      break;
 8005e94:	e00c      	b.n	8005eb0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	4610      	mov	r0, r2
 8005ea2:	f000 fc14 	bl	80066ce <TIM_ITRx_SetConfig>
      break;
 8005ea6:	e003      	b.n	8005eb0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	73fb      	strb	r3, [r7, #15]
      break;
 8005eac:	e000      	b.n	8005eb0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005eae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3710      	adds	r7, #16
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}

08005eca <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005eca:	b480      	push	{r7}
 8005ecc:	b083      	sub	sp, #12
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005ed2:	bf00      	nop
 8005ed4:	370c      	adds	r7, #12
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr

08005ede <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ede:	b480      	push	{r7}
 8005ee0:	b083      	sub	sp, #12
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ee6:	bf00      	nop
 8005ee8:	370c      	adds	r7, #12
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr

08005ef2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ef2:	b480      	push	{r7}
 8005ef4:	b083      	sub	sp, #12
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005efa:	bf00      	nop
 8005efc:	370c      	adds	r7, #12
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr

08005f06 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f06:	b480      	push	{r7}
 8005f08:	b083      	sub	sp, #12
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f0e:	bf00      	nop
 8005f10:	370c      	adds	r7, #12
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr

08005f1a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	b083      	sub	sp, #12
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f22:	bf00      	nop
 8005f24:	370c      	adds	r7, #12
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr
	...

08005f30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b085      	sub	sp, #20
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	4a40      	ldr	r2, [pc, #256]	; (8006044 <TIM_Base_SetConfig+0x114>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d013      	beq.n	8005f70 <TIM_Base_SetConfig+0x40>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f4e:	d00f      	beq.n	8005f70 <TIM_Base_SetConfig+0x40>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	4a3d      	ldr	r2, [pc, #244]	; (8006048 <TIM_Base_SetConfig+0x118>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d00b      	beq.n	8005f70 <TIM_Base_SetConfig+0x40>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4a3c      	ldr	r2, [pc, #240]	; (800604c <TIM_Base_SetConfig+0x11c>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d007      	beq.n	8005f70 <TIM_Base_SetConfig+0x40>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4a3b      	ldr	r2, [pc, #236]	; (8006050 <TIM_Base_SetConfig+0x120>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d003      	beq.n	8005f70 <TIM_Base_SetConfig+0x40>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a3a      	ldr	r2, [pc, #232]	; (8006054 <TIM_Base_SetConfig+0x124>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d108      	bne.n	8005f82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	68fa      	ldr	r2, [r7, #12]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a2f      	ldr	r2, [pc, #188]	; (8006044 <TIM_Base_SetConfig+0x114>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d01f      	beq.n	8005fca <TIM_Base_SetConfig+0x9a>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f90:	d01b      	beq.n	8005fca <TIM_Base_SetConfig+0x9a>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a2c      	ldr	r2, [pc, #176]	; (8006048 <TIM_Base_SetConfig+0x118>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d017      	beq.n	8005fca <TIM_Base_SetConfig+0x9a>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a2b      	ldr	r2, [pc, #172]	; (800604c <TIM_Base_SetConfig+0x11c>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d013      	beq.n	8005fca <TIM_Base_SetConfig+0x9a>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a2a      	ldr	r2, [pc, #168]	; (8006050 <TIM_Base_SetConfig+0x120>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d00f      	beq.n	8005fca <TIM_Base_SetConfig+0x9a>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a29      	ldr	r2, [pc, #164]	; (8006054 <TIM_Base_SetConfig+0x124>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d00b      	beq.n	8005fca <TIM_Base_SetConfig+0x9a>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a28      	ldr	r2, [pc, #160]	; (8006058 <TIM_Base_SetConfig+0x128>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d007      	beq.n	8005fca <TIM_Base_SetConfig+0x9a>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a27      	ldr	r2, [pc, #156]	; (800605c <TIM_Base_SetConfig+0x12c>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d003      	beq.n	8005fca <TIM_Base_SetConfig+0x9a>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a26      	ldr	r2, [pc, #152]	; (8006060 <TIM_Base_SetConfig+0x130>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d108      	bne.n	8005fdc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	68fa      	ldr	r2, [r7, #12]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	695b      	ldr	r3, [r3, #20]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	689a      	ldr	r2, [r3, #8]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a10      	ldr	r2, [pc, #64]	; (8006044 <TIM_Base_SetConfig+0x114>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d00f      	beq.n	8006028 <TIM_Base_SetConfig+0xf8>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a12      	ldr	r2, [pc, #72]	; (8006054 <TIM_Base_SetConfig+0x124>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d00b      	beq.n	8006028 <TIM_Base_SetConfig+0xf8>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4a11      	ldr	r2, [pc, #68]	; (8006058 <TIM_Base_SetConfig+0x128>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d007      	beq.n	8006028 <TIM_Base_SetConfig+0xf8>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	4a10      	ldr	r2, [pc, #64]	; (800605c <TIM_Base_SetConfig+0x12c>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d003      	beq.n	8006028 <TIM_Base_SetConfig+0xf8>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a0f      	ldr	r2, [pc, #60]	; (8006060 <TIM_Base_SetConfig+0x130>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d103      	bne.n	8006030 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	691a      	ldr	r2, [r3, #16]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	615a      	str	r2, [r3, #20]
}
 8006036:	bf00      	nop
 8006038:	3714      	adds	r7, #20
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr
 8006042:	bf00      	nop
 8006044:	40012c00 	.word	0x40012c00
 8006048:	40000400 	.word	0x40000400
 800604c:	40000800 	.word	0x40000800
 8006050:	40000c00 	.word	0x40000c00
 8006054:	40013400 	.word	0x40013400
 8006058:	40014000 	.word	0x40014000
 800605c:	40014400 	.word	0x40014400
 8006060:	40014800 	.word	0x40014800

08006064 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006064:	b480      	push	{r7}
 8006066:	b087      	sub	sp, #28
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6a1b      	ldr	r3, [r3, #32]
 8006072:	f023 0201 	bic.w	r2, r3, #1
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a1b      	ldr	r3, [r3, #32]
 800607e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	699b      	ldr	r3, [r3, #24]
 800608a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006096:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f023 0303 	bic.w	r3, r3, #3
 800609e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	f023 0302 	bic.w	r3, r3, #2
 80060b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	697a      	ldr	r2, [r7, #20]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4a2c      	ldr	r2, [pc, #176]	; (8006170 <TIM_OC1_SetConfig+0x10c>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d00f      	beq.n	80060e4 <TIM_OC1_SetConfig+0x80>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4a2b      	ldr	r2, [pc, #172]	; (8006174 <TIM_OC1_SetConfig+0x110>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d00b      	beq.n	80060e4 <TIM_OC1_SetConfig+0x80>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	4a2a      	ldr	r2, [pc, #168]	; (8006178 <TIM_OC1_SetConfig+0x114>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d007      	beq.n	80060e4 <TIM_OC1_SetConfig+0x80>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	4a29      	ldr	r2, [pc, #164]	; (800617c <TIM_OC1_SetConfig+0x118>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d003      	beq.n	80060e4 <TIM_OC1_SetConfig+0x80>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4a28      	ldr	r2, [pc, #160]	; (8006180 <TIM_OC1_SetConfig+0x11c>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d10c      	bne.n	80060fe <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	f023 0308 	bic.w	r3, r3, #8
 80060ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	697a      	ldr	r2, [r7, #20]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	f023 0304 	bic.w	r3, r3, #4
 80060fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	4a1b      	ldr	r2, [pc, #108]	; (8006170 <TIM_OC1_SetConfig+0x10c>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d00f      	beq.n	8006126 <TIM_OC1_SetConfig+0xc2>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4a1a      	ldr	r2, [pc, #104]	; (8006174 <TIM_OC1_SetConfig+0x110>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d00b      	beq.n	8006126 <TIM_OC1_SetConfig+0xc2>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4a19      	ldr	r2, [pc, #100]	; (8006178 <TIM_OC1_SetConfig+0x114>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d007      	beq.n	8006126 <TIM_OC1_SetConfig+0xc2>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a18      	ldr	r2, [pc, #96]	; (800617c <TIM_OC1_SetConfig+0x118>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d003      	beq.n	8006126 <TIM_OC1_SetConfig+0xc2>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a17      	ldr	r2, [pc, #92]	; (8006180 <TIM_OC1_SetConfig+0x11c>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d111      	bne.n	800614a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800612c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006134:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	695b      	ldr	r3, [r3, #20]
 800613a:	693a      	ldr	r2, [r7, #16]
 800613c:	4313      	orrs	r3, r2
 800613e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	699b      	ldr	r3, [r3, #24]
 8006144:	693a      	ldr	r2, [r7, #16]
 8006146:	4313      	orrs	r3, r2
 8006148:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	693a      	ldr	r2, [r7, #16]
 800614e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	68fa      	ldr	r2, [r7, #12]
 8006154:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	685a      	ldr	r2, [r3, #4]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	697a      	ldr	r2, [r7, #20]
 8006162:	621a      	str	r2, [r3, #32]
}
 8006164:	bf00      	nop
 8006166:	371c      	adds	r7, #28
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr
 8006170:	40012c00 	.word	0x40012c00
 8006174:	40013400 	.word	0x40013400
 8006178:	40014000 	.word	0x40014000
 800617c:	40014400 	.word	0x40014400
 8006180:	40014800 	.word	0x40014800

08006184 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006184:	b480      	push	{r7}
 8006186:	b087      	sub	sp, #28
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a1b      	ldr	r3, [r3, #32]
 8006192:	f023 0210 	bic.w	r2, r3, #16
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a1b      	ldr	r3, [r3, #32]
 800619e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	699b      	ldr	r3, [r3, #24]
 80061aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80061b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	021b      	lsls	r3, r3, #8
 80061c6:	68fa      	ldr	r2, [r7, #12]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	f023 0320 	bic.w	r3, r3, #32
 80061d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	011b      	lsls	r3, r3, #4
 80061da:	697a      	ldr	r2, [r7, #20]
 80061dc:	4313      	orrs	r3, r2
 80061de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	4a28      	ldr	r2, [pc, #160]	; (8006284 <TIM_OC2_SetConfig+0x100>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d003      	beq.n	80061f0 <TIM_OC2_SetConfig+0x6c>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	4a27      	ldr	r2, [pc, #156]	; (8006288 <TIM_OC2_SetConfig+0x104>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d10d      	bne.n	800620c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	011b      	lsls	r3, r3, #4
 80061fe:	697a      	ldr	r2, [r7, #20]
 8006200:	4313      	orrs	r3, r2
 8006202:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800620a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	4a1d      	ldr	r2, [pc, #116]	; (8006284 <TIM_OC2_SetConfig+0x100>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d00f      	beq.n	8006234 <TIM_OC2_SetConfig+0xb0>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	4a1c      	ldr	r2, [pc, #112]	; (8006288 <TIM_OC2_SetConfig+0x104>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d00b      	beq.n	8006234 <TIM_OC2_SetConfig+0xb0>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	4a1b      	ldr	r2, [pc, #108]	; (800628c <TIM_OC2_SetConfig+0x108>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d007      	beq.n	8006234 <TIM_OC2_SetConfig+0xb0>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	4a1a      	ldr	r2, [pc, #104]	; (8006290 <TIM_OC2_SetConfig+0x10c>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d003      	beq.n	8006234 <TIM_OC2_SetConfig+0xb0>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	4a19      	ldr	r2, [pc, #100]	; (8006294 <TIM_OC2_SetConfig+0x110>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d113      	bne.n	800625c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800623a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006242:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	695b      	ldr	r3, [r3, #20]
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	693a      	ldr	r2, [r7, #16]
 800624c:	4313      	orrs	r3, r2
 800624e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	699b      	ldr	r3, [r3, #24]
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	693a      	ldr	r2, [r7, #16]
 8006258:	4313      	orrs	r3, r2
 800625a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	693a      	ldr	r2, [r7, #16]
 8006260:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	685a      	ldr	r2, [r3, #4]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	697a      	ldr	r2, [r7, #20]
 8006274:	621a      	str	r2, [r3, #32]
}
 8006276:	bf00      	nop
 8006278:	371c      	adds	r7, #28
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr
 8006282:	bf00      	nop
 8006284:	40012c00 	.word	0x40012c00
 8006288:	40013400 	.word	0x40013400
 800628c:	40014000 	.word	0x40014000
 8006290:	40014400 	.word	0x40014400
 8006294:	40014800 	.word	0x40014800

08006298 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006298:	b480      	push	{r7}
 800629a:	b087      	sub	sp, #28
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6a1b      	ldr	r3, [r3, #32]
 80062a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6a1b      	ldr	r3, [r3, #32]
 80062b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	69db      	ldr	r3, [r3, #28]
 80062be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f023 0303 	bic.w	r3, r3, #3
 80062d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68fa      	ldr	r2, [r7, #12]
 80062da:	4313      	orrs	r3, r2
 80062dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	021b      	lsls	r3, r3, #8
 80062ec:	697a      	ldr	r2, [r7, #20]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4a27      	ldr	r2, [pc, #156]	; (8006394 <TIM_OC3_SetConfig+0xfc>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d003      	beq.n	8006302 <TIM_OC3_SetConfig+0x6a>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4a26      	ldr	r2, [pc, #152]	; (8006398 <TIM_OC3_SetConfig+0x100>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d10d      	bne.n	800631e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006308:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	021b      	lsls	r3, r3, #8
 8006310:	697a      	ldr	r2, [r7, #20]
 8006312:	4313      	orrs	r3, r2
 8006314:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800631c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a1c      	ldr	r2, [pc, #112]	; (8006394 <TIM_OC3_SetConfig+0xfc>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d00f      	beq.n	8006346 <TIM_OC3_SetConfig+0xae>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4a1b      	ldr	r2, [pc, #108]	; (8006398 <TIM_OC3_SetConfig+0x100>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d00b      	beq.n	8006346 <TIM_OC3_SetConfig+0xae>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4a1a      	ldr	r2, [pc, #104]	; (800639c <TIM_OC3_SetConfig+0x104>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d007      	beq.n	8006346 <TIM_OC3_SetConfig+0xae>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a19      	ldr	r2, [pc, #100]	; (80063a0 <TIM_OC3_SetConfig+0x108>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d003      	beq.n	8006346 <TIM_OC3_SetConfig+0xae>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4a18      	ldr	r2, [pc, #96]	; (80063a4 <TIM_OC3_SetConfig+0x10c>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d113      	bne.n	800636e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800634c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006354:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	695b      	ldr	r3, [r3, #20]
 800635a:	011b      	lsls	r3, r3, #4
 800635c:	693a      	ldr	r2, [r7, #16]
 800635e:	4313      	orrs	r3, r2
 8006360:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	699b      	ldr	r3, [r3, #24]
 8006366:	011b      	lsls	r3, r3, #4
 8006368:	693a      	ldr	r2, [r7, #16]
 800636a:	4313      	orrs	r3, r2
 800636c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	693a      	ldr	r2, [r7, #16]
 8006372:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	68fa      	ldr	r2, [r7, #12]
 8006378:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	685a      	ldr	r2, [r3, #4]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	697a      	ldr	r2, [r7, #20]
 8006386:	621a      	str	r2, [r3, #32]
}
 8006388:	bf00      	nop
 800638a:	371c      	adds	r7, #28
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr
 8006394:	40012c00 	.word	0x40012c00
 8006398:	40013400 	.word	0x40013400
 800639c:	40014000 	.word	0x40014000
 80063a0:	40014400 	.word	0x40014400
 80063a4:	40014800 	.word	0x40014800

080063a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b087      	sub	sp, #28
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a1b      	ldr	r3, [r3, #32]
 80063b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a1b      	ldr	r3, [r3, #32]
 80063c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	69db      	ldr	r3, [r3, #28]
 80063ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	021b      	lsls	r3, r3, #8
 80063ea:	68fa      	ldr	r2, [r7, #12]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	031b      	lsls	r3, r3, #12
 80063fe:	693a      	ldr	r2, [r7, #16]
 8006400:	4313      	orrs	r3, r2
 8006402:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4a18      	ldr	r2, [pc, #96]	; (8006468 <TIM_OC4_SetConfig+0xc0>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d00f      	beq.n	800642c <TIM_OC4_SetConfig+0x84>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4a17      	ldr	r2, [pc, #92]	; (800646c <TIM_OC4_SetConfig+0xc4>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d00b      	beq.n	800642c <TIM_OC4_SetConfig+0x84>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	4a16      	ldr	r2, [pc, #88]	; (8006470 <TIM_OC4_SetConfig+0xc8>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d007      	beq.n	800642c <TIM_OC4_SetConfig+0x84>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4a15      	ldr	r2, [pc, #84]	; (8006474 <TIM_OC4_SetConfig+0xcc>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d003      	beq.n	800642c <TIM_OC4_SetConfig+0x84>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a14      	ldr	r2, [pc, #80]	; (8006478 <TIM_OC4_SetConfig+0xd0>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d109      	bne.n	8006440 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006432:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	695b      	ldr	r3, [r3, #20]
 8006438:	019b      	lsls	r3, r3, #6
 800643a:	697a      	ldr	r2, [r7, #20]
 800643c:	4313      	orrs	r3, r2
 800643e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	697a      	ldr	r2, [r7, #20]
 8006444:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	685a      	ldr	r2, [r3, #4]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	693a      	ldr	r2, [r7, #16]
 8006458:	621a      	str	r2, [r3, #32]
}
 800645a:	bf00      	nop
 800645c:	371c      	adds	r7, #28
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr
 8006466:	bf00      	nop
 8006468:	40012c00 	.word	0x40012c00
 800646c:	40013400 	.word	0x40013400
 8006470:	40014000 	.word	0x40014000
 8006474:	40014400 	.word	0x40014400
 8006478:	40014800 	.word	0x40014800

0800647c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800647c:	b480      	push	{r7}
 800647e:	b087      	sub	sp, #28
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a1b      	ldr	r3, [r3, #32]
 800648a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a1b      	ldr	r3, [r3, #32]
 8006496:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80064c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	041b      	lsls	r3, r3, #16
 80064c8:	693a      	ldr	r2, [r7, #16]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4a17      	ldr	r2, [pc, #92]	; (8006530 <TIM_OC5_SetConfig+0xb4>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d00f      	beq.n	80064f6 <TIM_OC5_SetConfig+0x7a>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a16      	ldr	r2, [pc, #88]	; (8006534 <TIM_OC5_SetConfig+0xb8>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d00b      	beq.n	80064f6 <TIM_OC5_SetConfig+0x7a>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4a15      	ldr	r2, [pc, #84]	; (8006538 <TIM_OC5_SetConfig+0xbc>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d007      	beq.n	80064f6 <TIM_OC5_SetConfig+0x7a>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a14      	ldr	r2, [pc, #80]	; (800653c <TIM_OC5_SetConfig+0xc0>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d003      	beq.n	80064f6 <TIM_OC5_SetConfig+0x7a>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a13      	ldr	r2, [pc, #76]	; (8006540 <TIM_OC5_SetConfig+0xc4>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d109      	bne.n	800650a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	695b      	ldr	r3, [r3, #20]
 8006502:	021b      	lsls	r3, r3, #8
 8006504:	697a      	ldr	r2, [r7, #20]
 8006506:	4313      	orrs	r3, r2
 8006508:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	697a      	ldr	r2, [r7, #20]
 800650e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	68fa      	ldr	r2, [r7, #12]
 8006514:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	685a      	ldr	r2, [r3, #4]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	693a      	ldr	r2, [r7, #16]
 8006522:	621a      	str	r2, [r3, #32]
}
 8006524:	bf00      	nop
 8006526:	371c      	adds	r7, #28
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr
 8006530:	40012c00 	.word	0x40012c00
 8006534:	40013400 	.word	0x40013400
 8006538:	40014000 	.word	0x40014000
 800653c:	40014400 	.word	0x40014400
 8006540:	40014800 	.word	0x40014800

08006544 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006544:	b480      	push	{r7}
 8006546:	b087      	sub	sp, #28
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a1b      	ldr	r3, [r3, #32]
 8006552:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a1b      	ldr	r3, [r3, #32]
 800655e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800656a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006572:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006576:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	021b      	lsls	r3, r3, #8
 800657e:	68fa      	ldr	r2, [r7, #12]
 8006580:	4313      	orrs	r3, r2
 8006582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800658a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	051b      	lsls	r3, r3, #20
 8006592:	693a      	ldr	r2, [r7, #16]
 8006594:	4313      	orrs	r3, r2
 8006596:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	4a18      	ldr	r2, [pc, #96]	; (80065fc <TIM_OC6_SetConfig+0xb8>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d00f      	beq.n	80065c0 <TIM_OC6_SetConfig+0x7c>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	4a17      	ldr	r2, [pc, #92]	; (8006600 <TIM_OC6_SetConfig+0xbc>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d00b      	beq.n	80065c0 <TIM_OC6_SetConfig+0x7c>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	4a16      	ldr	r2, [pc, #88]	; (8006604 <TIM_OC6_SetConfig+0xc0>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d007      	beq.n	80065c0 <TIM_OC6_SetConfig+0x7c>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4a15      	ldr	r2, [pc, #84]	; (8006608 <TIM_OC6_SetConfig+0xc4>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d003      	beq.n	80065c0 <TIM_OC6_SetConfig+0x7c>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4a14      	ldr	r2, [pc, #80]	; (800660c <TIM_OC6_SetConfig+0xc8>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d109      	bne.n	80065d4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	695b      	ldr	r3, [r3, #20]
 80065cc:	029b      	lsls	r3, r3, #10
 80065ce:	697a      	ldr	r2, [r7, #20]
 80065d0:	4313      	orrs	r3, r2
 80065d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	697a      	ldr	r2, [r7, #20]
 80065d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	68fa      	ldr	r2, [r7, #12]
 80065de:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	685a      	ldr	r2, [r3, #4]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	693a      	ldr	r2, [r7, #16]
 80065ec:	621a      	str	r2, [r3, #32]
}
 80065ee:	bf00      	nop
 80065f0:	371c      	adds	r7, #28
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr
 80065fa:	bf00      	nop
 80065fc:	40012c00 	.word	0x40012c00
 8006600:	40013400 	.word	0x40013400
 8006604:	40014000 	.word	0x40014000
 8006608:	40014400 	.word	0x40014400
 800660c:	40014800 	.word	0x40014800

08006610 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006610:	b480      	push	{r7}
 8006612:	b087      	sub	sp, #28
 8006614:	af00      	add	r7, sp, #0
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	60b9      	str	r1, [r7, #8]
 800661a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	6a1b      	ldr	r3, [r3, #32]
 8006620:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	6a1b      	ldr	r3, [r3, #32]
 8006626:	f023 0201 	bic.w	r2, r3, #1
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	699b      	ldr	r3, [r3, #24]
 8006632:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800663a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	011b      	lsls	r3, r3, #4
 8006640:	693a      	ldr	r2, [r7, #16]
 8006642:	4313      	orrs	r3, r2
 8006644:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	f023 030a 	bic.w	r3, r3, #10
 800664c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800664e:	697a      	ldr	r2, [r7, #20]
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	4313      	orrs	r3, r2
 8006654:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	693a      	ldr	r2, [r7, #16]
 800665a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	697a      	ldr	r2, [r7, #20]
 8006660:	621a      	str	r2, [r3, #32]
}
 8006662:	bf00      	nop
 8006664:	371c      	adds	r7, #28
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr

0800666e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800666e:	b480      	push	{r7}
 8006670:	b087      	sub	sp, #28
 8006672:	af00      	add	r7, sp, #0
 8006674:	60f8      	str	r0, [r7, #12]
 8006676:	60b9      	str	r1, [r7, #8]
 8006678:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6a1b      	ldr	r3, [r3, #32]
 800667e:	f023 0210 	bic.w	r2, r3, #16
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	699b      	ldr	r3, [r3, #24]
 800668a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6a1b      	ldr	r3, [r3, #32]
 8006690:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006698:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	031b      	lsls	r3, r3, #12
 800669e:	697a      	ldr	r2, [r7, #20]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80066aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	011b      	lsls	r3, r3, #4
 80066b0:	693a      	ldr	r2, [r7, #16]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	697a      	ldr	r2, [r7, #20]
 80066ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	693a      	ldr	r2, [r7, #16]
 80066c0:	621a      	str	r2, [r3, #32]
}
 80066c2:	bf00      	nop
 80066c4:	371c      	adds	r7, #28
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr

080066ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80066ce:	b480      	push	{r7}
 80066d0:	b085      	sub	sp, #20
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
 80066d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066e6:	683a      	ldr	r2, [r7, #0]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	f043 0307 	orr.w	r3, r3, #7
 80066f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	68fa      	ldr	r2, [r7, #12]
 80066f6:	609a      	str	r2, [r3, #8]
}
 80066f8:	bf00      	nop
 80066fa:	3714      	adds	r7, #20
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr

08006704 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006704:	b480      	push	{r7}
 8006706:	b087      	sub	sp, #28
 8006708:	af00      	add	r7, sp, #0
 800670a:	60f8      	str	r0, [r7, #12]
 800670c:	60b9      	str	r1, [r7, #8]
 800670e:	607a      	str	r2, [r7, #4]
 8006710:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800671e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	021a      	lsls	r2, r3, #8
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	431a      	orrs	r2, r3
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	4313      	orrs	r3, r2
 800672c:	697a      	ldr	r2, [r7, #20]
 800672e:	4313      	orrs	r3, r2
 8006730:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	697a      	ldr	r2, [r7, #20]
 8006736:	609a      	str	r2, [r3, #8]
}
 8006738:	bf00      	nop
 800673a:	371c      	adds	r7, #28
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr

08006744 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006744:	b480      	push	{r7}
 8006746:	b087      	sub	sp, #28
 8006748:	af00      	add	r7, sp, #0
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	60b9      	str	r1, [r7, #8]
 800674e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	f003 031f 	and.w	r3, r3, #31
 8006756:	2201      	movs	r2, #1
 8006758:	fa02 f303 	lsl.w	r3, r2, r3
 800675c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	6a1a      	ldr	r2, [r3, #32]
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	43db      	mvns	r3, r3
 8006766:	401a      	ands	r2, r3
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6a1a      	ldr	r2, [r3, #32]
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	f003 031f 	and.w	r3, r3, #31
 8006776:	6879      	ldr	r1, [r7, #4]
 8006778:	fa01 f303 	lsl.w	r3, r1, r3
 800677c:	431a      	orrs	r2, r3
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	621a      	str	r2, [r3, #32]
}
 8006782:	bf00      	nop
 8006784:	371c      	adds	r7, #28
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr
	...

08006790 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006790:	b480      	push	{r7}
 8006792:	b085      	sub	sp, #20
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d101      	bne.n	80067a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067a4:	2302      	movs	r3, #2
 80067a6:	e068      	b.n	800687a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2202      	movs	r2, #2
 80067b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a2e      	ldr	r2, [pc, #184]	; (8006888 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d004      	beq.n	80067dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a2d      	ldr	r2, [pc, #180]	; (800688c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d108      	bne.n	80067ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80067e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	68fa      	ldr	r2, [r7, #12]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	68fa      	ldr	r2, [r7, #12]
 8006806:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a1e      	ldr	r2, [pc, #120]	; (8006888 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d01d      	beq.n	800684e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800681a:	d018      	beq.n	800684e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a1b      	ldr	r2, [pc, #108]	; (8006890 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d013      	beq.n	800684e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a1a      	ldr	r2, [pc, #104]	; (8006894 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d00e      	beq.n	800684e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a18      	ldr	r2, [pc, #96]	; (8006898 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d009      	beq.n	800684e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a13      	ldr	r2, [pc, #76]	; (800688c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d004      	beq.n	800684e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a14      	ldr	r2, [pc, #80]	; (800689c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d10c      	bne.n	8006868 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006854:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	68ba      	ldr	r2, [r7, #8]
 800685c:	4313      	orrs	r3, r2
 800685e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	68ba      	ldr	r2, [r7, #8]
 8006866:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2201      	movs	r2, #1
 800686c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3714      	adds	r7, #20
 800687e:	46bd      	mov	sp, r7
 8006880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006884:	4770      	bx	lr
 8006886:	bf00      	nop
 8006888:	40012c00 	.word	0x40012c00
 800688c:	40013400 	.word	0x40013400
 8006890:	40000400 	.word	0x40000400
 8006894:	40000800 	.word	0x40000800
 8006898:	40000c00 	.word	0x40000c00
 800689c:	40014000 	.word	0x40014000

080068a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80068a8:	bf00      	nop
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068bc:	bf00      	nop
 80068be:	370c      	adds	r7, #12
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr

080068c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b083      	sub	sp, #12
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80068d0:	bf00      	nop
 80068d2:	370c      	adds	r7, #12
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b082      	sub	sp, #8
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d101      	bne.n	80068ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	e040      	b.n	8006970 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d106      	bne.n	8006904 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f7fa ffdc 	bl	80018bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2224      	movs	r2, #36	; 0x24
 8006908:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f022 0201 	bic.w	r2, r2, #1
 8006918:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 f992 	bl	8006c44 <UART_SetConfig>
 8006920:	4603      	mov	r3, r0
 8006922:	2b01      	cmp	r3, #1
 8006924:	d101      	bne.n	800692a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e022      	b.n	8006970 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800692e:	2b00      	cmp	r3, #0
 8006930:	d002      	beq.n	8006938 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 fc10 	bl	8007158 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	685a      	ldr	r2, [r3, #4]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006946:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	689a      	ldr	r2, [r3, #8]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006956:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f042 0201 	orr.w	r2, r2, #1
 8006966:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f000 fc97 	bl	800729c <UART_CheckIdleState>
 800696e:	4603      	mov	r3, r0
}
 8006970:	4618      	mov	r0, r3
 8006972:	3708      	adds	r7, #8
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}

08006978 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b08a      	sub	sp, #40	; 0x28
 800697c:	af02      	add	r7, sp, #8
 800697e:	60f8      	str	r0, [r7, #12]
 8006980:	60b9      	str	r1, [r7, #8]
 8006982:	603b      	str	r3, [r7, #0]
 8006984:	4613      	mov	r3, r2
 8006986:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800698c:	2b20      	cmp	r3, #32
 800698e:	f040 8082 	bne.w	8006a96 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d002      	beq.n	800699e <HAL_UART_Transmit+0x26>
 8006998:	88fb      	ldrh	r3, [r7, #6]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d101      	bne.n	80069a2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	e07a      	b.n	8006a98 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d101      	bne.n	80069b0 <HAL_UART_Transmit+0x38>
 80069ac:	2302      	movs	r3, #2
 80069ae:	e073      	b.n	8006a98 <HAL_UART_Transmit+0x120>
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2221      	movs	r2, #33	; 0x21
 80069c4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80069c6:	f7fb f9b5 	bl	8001d34 <HAL_GetTick>
 80069ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	88fa      	ldrh	r2, [r7, #6]
 80069d0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	88fa      	ldrh	r2, [r7, #6]
 80069d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069e4:	d108      	bne.n	80069f8 <HAL_UART_Transmit+0x80>
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d104      	bne.n	80069f8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80069ee:	2300      	movs	r3, #0
 80069f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	61bb      	str	r3, [r7, #24]
 80069f6:	e003      	b.n	8006a00 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80069fc:	2300      	movs	r3, #0
 80069fe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006a08:	e02d      	b.n	8006a66 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	9300      	str	r3, [sp, #0]
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	2200      	movs	r2, #0
 8006a12:	2180      	movs	r1, #128	; 0x80
 8006a14:	68f8      	ldr	r0, [r7, #12]
 8006a16:	f000 fc8a 	bl	800732e <UART_WaitOnFlagUntilTimeout>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d001      	beq.n	8006a24 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006a20:	2303      	movs	r3, #3
 8006a22:	e039      	b.n	8006a98 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006a24:	69fb      	ldr	r3, [r7, #28]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d10b      	bne.n	8006a42 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a2a:	69bb      	ldr	r3, [r7, #24]
 8006a2c:	881a      	ldrh	r2, [r3, #0]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a36:	b292      	uxth	r2, r2
 8006a38:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	3302      	adds	r3, #2
 8006a3e:	61bb      	str	r3, [r7, #24]
 8006a40:	e008      	b.n	8006a54 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	781a      	ldrb	r2, [r3, #0]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	b292      	uxth	r2, r2
 8006a4c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	3301      	adds	r3, #1
 8006a52:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	b29a      	uxth	r2, r3
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d1cb      	bne.n	8006a0a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	9300      	str	r3, [sp, #0]
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	2140      	movs	r1, #64	; 0x40
 8006a7c:	68f8      	ldr	r0, [r7, #12]
 8006a7e:	f000 fc56 	bl	800732e <UART_WaitOnFlagUntilTimeout>
 8006a82:	4603      	mov	r3, r0
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d001      	beq.n	8006a8c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006a88:	2303      	movs	r3, #3
 8006a8a:	e005      	b.n	8006a98 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2220      	movs	r2, #32
 8006a90:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006a92:	2300      	movs	r3, #0
 8006a94:	e000      	b.n	8006a98 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006a96:	2302      	movs	r3, #2
  }
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3720      	adds	r7, #32
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b08a      	sub	sp, #40	; 0x28
 8006aa4:	af02      	add	r7, sp, #8
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	603b      	str	r3, [r7, #0]
 8006aac:	4613      	mov	r3, r2
 8006aae:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ab4:	2b20      	cmp	r3, #32
 8006ab6:	f040 80bf 	bne.w	8006c38 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d002      	beq.n	8006ac6 <HAL_UART_Receive+0x26>
 8006ac0:	88fb      	ldrh	r3, [r7, #6]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d101      	bne.n	8006aca <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e0b7      	b.n	8006c3a <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d101      	bne.n	8006ad8 <HAL_UART_Receive+0x38>
 8006ad4:	2302      	movs	r3, #2
 8006ad6:	e0b0      	b.n	8006c3a <HAL_UART_Receive+0x19a>
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2222      	movs	r2, #34	; 0x22
 8006aec:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2200      	movs	r2, #0
 8006af2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006af4:	f7fb f91e 	bl	8001d34 <HAL_GetTick>
 8006af8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	88fa      	ldrh	r2, [r7, #6]
 8006afe:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	88fa      	ldrh	r2, [r7, #6]
 8006b06:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b12:	d10e      	bne.n	8006b32 <HAL_UART_Receive+0x92>
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	691b      	ldr	r3, [r3, #16]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d105      	bne.n	8006b28 <HAL_UART_Receive+0x88>
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006b22:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006b26:	e02d      	b.n	8006b84 <HAL_UART_Receive+0xe4>
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	22ff      	movs	r2, #255	; 0xff
 8006b2c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006b30:	e028      	b.n	8006b84 <HAL_UART_Receive+0xe4>
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d10d      	bne.n	8006b56 <HAL_UART_Receive+0xb6>
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	691b      	ldr	r3, [r3, #16]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d104      	bne.n	8006b4c <HAL_UART_Receive+0xac>
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	22ff      	movs	r2, #255	; 0xff
 8006b46:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006b4a:	e01b      	b.n	8006b84 <HAL_UART_Receive+0xe4>
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	227f      	movs	r2, #127	; 0x7f
 8006b50:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006b54:	e016      	b.n	8006b84 <HAL_UART_Receive+0xe4>
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b5e:	d10d      	bne.n	8006b7c <HAL_UART_Receive+0xdc>
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	691b      	ldr	r3, [r3, #16]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d104      	bne.n	8006b72 <HAL_UART_Receive+0xd2>
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	227f      	movs	r2, #127	; 0x7f
 8006b6c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006b70:	e008      	b.n	8006b84 <HAL_UART_Receive+0xe4>
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	223f      	movs	r2, #63	; 0x3f
 8006b76:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006b7a:	e003      	b.n	8006b84 <HAL_UART_Receive+0xe4>
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006b8a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b94:	d108      	bne.n	8006ba8 <HAL_UART_Receive+0x108>
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d104      	bne.n	8006ba8 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	61bb      	str	r3, [r7, #24]
 8006ba6:	e003      	b.n	8006bb0 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006bac:	2300      	movs	r3, #0
 8006bae:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006bb8:	e033      	b.n	8006c22 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	9300      	str	r3, [sp, #0]
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	2120      	movs	r1, #32
 8006bc4:	68f8      	ldr	r0, [r7, #12]
 8006bc6:	f000 fbb2 	bl	800732e <UART_WaitOnFlagUntilTimeout>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d001      	beq.n	8006bd4 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8006bd0:	2303      	movs	r3, #3
 8006bd2:	e032      	b.n	8006c3a <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d10c      	bne.n	8006bf4 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006be0:	b29a      	uxth	r2, r3
 8006be2:	8a7b      	ldrh	r3, [r7, #18]
 8006be4:	4013      	ands	r3, r2
 8006be6:	b29a      	uxth	r2, r3
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006bec:	69bb      	ldr	r3, [r7, #24]
 8006bee:	3302      	adds	r3, #2
 8006bf0:	61bb      	str	r3, [r7, #24]
 8006bf2:	e00d      	b.n	8006c10 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	b2da      	uxtb	r2, r3
 8006bfe:	8a7b      	ldrh	r3, [r7, #18]
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	4013      	ands	r3, r2
 8006c04:	b2da      	uxtb	r2, r3
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	3301      	adds	r3, #1
 8006c0e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	3b01      	subs	r3, #1
 8006c1a:	b29a      	uxth	r2, r3
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d1c5      	bne.n	8006bba <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2220      	movs	r2, #32
 8006c32:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006c34:	2300      	movs	r3, #0
 8006c36:	e000      	b.n	8006c3a <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8006c38:	2302      	movs	r3, #2
  }
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3720      	adds	r7, #32
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
	...

08006c44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c44:	b5b0      	push	{r4, r5, r7, lr}
 8006c46:	b088      	sub	sp, #32
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	689a      	ldr	r2, [r3, #8]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	691b      	ldr	r3, [r3, #16]
 8006c58:	431a      	orrs	r2, r3
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	695b      	ldr	r3, [r3, #20]
 8006c5e:	431a      	orrs	r2, r3
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	69db      	ldr	r3, [r3, #28]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	4bad      	ldr	r3, [pc, #692]	; (8006f24 <UART_SetConfig+0x2e0>)
 8006c70:	4013      	ands	r3, r2
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	6812      	ldr	r2, [r2, #0]
 8006c76:	69f9      	ldr	r1, [r7, #28]
 8006c78:	430b      	orrs	r3, r1
 8006c7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	68da      	ldr	r2, [r3, #12]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	430a      	orrs	r2, r1
 8006c90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	699b      	ldr	r3, [r3, #24]
 8006c96:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4aa2      	ldr	r2, [pc, #648]	; (8006f28 <UART_SetConfig+0x2e4>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d004      	beq.n	8006cac <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a1b      	ldr	r3, [r3, #32]
 8006ca6:	69fa      	ldr	r2, [r7, #28]
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	69fa      	ldr	r2, [r7, #28]
 8006cbc:	430a      	orrs	r2, r1
 8006cbe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a99      	ldr	r2, [pc, #612]	; (8006f2c <UART_SetConfig+0x2e8>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d121      	bne.n	8006d0e <UART_SetConfig+0xca>
 8006cca:	4b99      	ldr	r3, [pc, #612]	; (8006f30 <UART_SetConfig+0x2ec>)
 8006ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cd0:	f003 0303 	and.w	r3, r3, #3
 8006cd4:	2b03      	cmp	r3, #3
 8006cd6:	d817      	bhi.n	8006d08 <UART_SetConfig+0xc4>
 8006cd8:	a201      	add	r2, pc, #4	; (adr r2, 8006ce0 <UART_SetConfig+0x9c>)
 8006cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cde:	bf00      	nop
 8006ce0:	08006cf1 	.word	0x08006cf1
 8006ce4:	08006cfd 	.word	0x08006cfd
 8006ce8:	08006cf7 	.word	0x08006cf7
 8006cec:	08006d03 	.word	0x08006d03
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	76fb      	strb	r3, [r7, #27]
 8006cf4:	e0e7      	b.n	8006ec6 <UART_SetConfig+0x282>
 8006cf6:	2302      	movs	r3, #2
 8006cf8:	76fb      	strb	r3, [r7, #27]
 8006cfa:	e0e4      	b.n	8006ec6 <UART_SetConfig+0x282>
 8006cfc:	2304      	movs	r3, #4
 8006cfe:	76fb      	strb	r3, [r7, #27]
 8006d00:	e0e1      	b.n	8006ec6 <UART_SetConfig+0x282>
 8006d02:	2308      	movs	r3, #8
 8006d04:	76fb      	strb	r3, [r7, #27]
 8006d06:	e0de      	b.n	8006ec6 <UART_SetConfig+0x282>
 8006d08:	2310      	movs	r3, #16
 8006d0a:	76fb      	strb	r3, [r7, #27]
 8006d0c:	e0db      	b.n	8006ec6 <UART_SetConfig+0x282>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a88      	ldr	r2, [pc, #544]	; (8006f34 <UART_SetConfig+0x2f0>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d132      	bne.n	8006d7e <UART_SetConfig+0x13a>
 8006d18:	4b85      	ldr	r3, [pc, #532]	; (8006f30 <UART_SetConfig+0x2ec>)
 8006d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d1e:	f003 030c 	and.w	r3, r3, #12
 8006d22:	2b0c      	cmp	r3, #12
 8006d24:	d828      	bhi.n	8006d78 <UART_SetConfig+0x134>
 8006d26:	a201      	add	r2, pc, #4	; (adr r2, 8006d2c <UART_SetConfig+0xe8>)
 8006d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d2c:	08006d61 	.word	0x08006d61
 8006d30:	08006d79 	.word	0x08006d79
 8006d34:	08006d79 	.word	0x08006d79
 8006d38:	08006d79 	.word	0x08006d79
 8006d3c:	08006d6d 	.word	0x08006d6d
 8006d40:	08006d79 	.word	0x08006d79
 8006d44:	08006d79 	.word	0x08006d79
 8006d48:	08006d79 	.word	0x08006d79
 8006d4c:	08006d67 	.word	0x08006d67
 8006d50:	08006d79 	.word	0x08006d79
 8006d54:	08006d79 	.word	0x08006d79
 8006d58:	08006d79 	.word	0x08006d79
 8006d5c:	08006d73 	.word	0x08006d73
 8006d60:	2300      	movs	r3, #0
 8006d62:	76fb      	strb	r3, [r7, #27]
 8006d64:	e0af      	b.n	8006ec6 <UART_SetConfig+0x282>
 8006d66:	2302      	movs	r3, #2
 8006d68:	76fb      	strb	r3, [r7, #27]
 8006d6a:	e0ac      	b.n	8006ec6 <UART_SetConfig+0x282>
 8006d6c:	2304      	movs	r3, #4
 8006d6e:	76fb      	strb	r3, [r7, #27]
 8006d70:	e0a9      	b.n	8006ec6 <UART_SetConfig+0x282>
 8006d72:	2308      	movs	r3, #8
 8006d74:	76fb      	strb	r3, [r7, #27]
 8006d76:	e0a6      	b.n	8006ec6 <UART_SetConfig+0x282>
 8006d78:	2310      	movs	r3, #16
 8006d7a:	76fb      	strb	r3, [r7, #27]
 8006d7c:	e0a3      	b.n	8006ec6 <UART_SetConfig+0x282>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a6d      	ldr	r2, [pc, #436]	; (8006f38 <UART_SetConfig+0x2f4>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d120      	bne.n	8006dca <UART_SetConfig+0x186>
 8006d88:	4b69      	ldr	r3, [pc, #420]	; (8006f30 <UART_SetConfig+0x2ec>)
 8006d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d8e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006d92:	2b30      	cmp	r3, #48	; 0x30
 8006d94:	d013      	beq.n	8006dbe <UART_SetConfig+0x17a>
 8006d96:	2b30      	cmp	r3, #48	; 0x30
 8006d98:	d814      	bhi.n	8006dc4 <UART_SetConfig+0x180>
 8006d9a:	2b20      	cmp	r3, #32
 8006d9c:	d009      	beq.n	8006db2 <UART_SetConfig+0x16e>
 8006d9e:	2b20      	cmp	r3, #32
 8006da0:	d810      	bhi.n	8006dc4 <UART_SetConfig+0x180>
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d002      	beq.n	8006dac <UART_SetConfig+0x168>
 8006da6:	2b10      	cmp	r3, #16
 8006da8:	d006      	beq.n	8006db8 <UART_SetConfig+0x174>
 8006daa:	e00b      	b.n	8006dc4 <UART_SetConfig+0x180>
 8006dac:	2300      	movs	r3, #0
 8006dae:	76fb      	strb	r3, [r7, #27]
 8006db0:	e089      	b.n	8006ec6 <UART_SetConfig+0x282>
 8006db2:	2302      	movs	r3, #2
 8006db4:	76fb      	strb	r3, [r7, #27]
 8006db6:	e086      	b.n	8006ec6 <UART_SetConfig+0x282>
 8006db8:	2304      	movs	r3, #4
 8006dba:	76fb      	strb	r3, [r7, #27]
 8006dbc:	e083      	b.n	8006ec6 <UART_SetConfig+0x282>
 8006dbe:	2308      	movs	r3, #8
 8006dc0:	76fb      	strb	r3, [r7, #27]
 8006dc2:	e080      	b.n	8006ec6 <UART_SetConfig+0x282>
 8006dc4:	2310      	movs	r3, #16
 8006dc6:	76fb      	strb	r3, [r7, #27]
 8006dc8:	e07d      	b.n	8006ec6 <UART_SetConfig+0x282>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a5b      	ldr	r2, [pc, #364]	; (8006f3c <UART_SetConfig+0x2f8>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d120      	bne.n	8006e16 <UART_SetConfig+0x1d2>
 8006dd4:	4b56      	ldr	r3, [pc, #344]	; (8006f30 <UART_SetConfig+0x2ec>)
 8006dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dda:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006dde:	2bc0      	cmp	r3, #192	; 0xc0
 8006de0:	d013      	beq.n	8006e0a <UART_SetConfig+0x1c6>
 8006de2:	2bc0      	cmp	r3, #192	; 0xc0
 8006de4:	d814      	bhi.n	8006e10 <UART_SetConfig+0x1cc>
 8006de6:	2b80      	cmp	r3, #128	; 0x80
 8006de8:	d009      	beq.n	8006dfe <UART_SetConfig+0x1ba>
 8006dea:	2b80      	cmp	r3, #128	; 0x80
 8006dec:	d810      	bhi.n	8006e10 <UART_SetConfig+0x1cc>
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d002      	beq.n	8006df8 <UART_SetConfig+0x1b4>
 8006df2:	2b40      	cmp	r3, #64	; 0x40
 8006df4:	d006      	beq.n	8006e04 <UART_SetConfig+0x1c0>
 8006df6:	e00b      	b.n	8006e10 <UART_SetConfig+0x1cc>
 8006df8:	2300      	movs	r3, #0
 8006dfa:	76fb      	strb	r3, [r7, #27]
 8006dfc:	e063      	b.n	8006ec6 <UART_SetConfig+0x282>
 8006dfe:	2302      	movs	r3, #2
 8006e00:	76fb      	strb	r3, [r7, #27]
 8006e02:	e060      	b.n	8006ec6 <UART_SetConfig+0x282>
 8006e04:	2304      	movs	r3, #4
 8006e06:	76fb      	strb	r3, [r7, #27]
 8006e08:	e05d      	b.n	8006ec6 <UART_SetConfig+0x282>
 8006e0a:	2308      	movs	r3, #8
 8006e0c:	76fb      	strb	r3, [r7, #27]
 8006e0e:	e05a      	b.n	8006ec6 <UART_SetConfig+0x282>
 8006e10:	2310      	movs	r3, #16
 8006e12:	76fb      	strb	r3, [r7, #27]
 8006e14:	e057      	b.n	8006ec6 <UART_SetConfig+0x282>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a49      	ldr	r2, [pc, #292]	; (8006f40 <UART_SetConfig+0x2fc>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d125      	bne.n	8006e6c <UART_SetConfig+0x228>
 8006e20:	4b43      	ldr	r3, [pc, #268]	; (8006f30 <UART_SetConfig+0x2ec>)
 8006e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e2e:	d017      	beq.n	8006e60 <UART_SetConfig+0x21c>
 8006e30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e34:	d817      	bhi.n	8006e66 <UART_SetConfig+0x222>
 8006e36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e3a:	d00b      	beq.n	8006e54 <UART_SetConfig+0x210>
 8006e3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e40:	d811      	bhi.n	8006e66 <UART_SetConfig+0x222>
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d003      	beq.n	8006e4e <UART_SetConfig+0x20a>
 8006e46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e4a:	d006      	beq.n	8006e5a <UART_SetConfig+0x216>
 8006e4c:	e00b      	b.n	8006e66 <UART_SetConfig+0x222>
 8006e4e:	2300      	movs	r3, #0
 8006e50:	76fb      	strb	r3, [r7, #27]
 8006e52:	e038      	b.n	8006ec6 <UART_SetConfig+0x282>
 8006e54:	2302      	movs	r3, #2
 8006e56:	76fb      	strb	r3, [r7, #27]
 8006e58:	e035      	b.n	8006ec6 <UART_SetConfig+0x282>
 8006e5a:	2304      	movs	r3, #4
 8006e5c:	76fb      	strb	r3, [r7, #27]
 8006e5e:	e032      	b.n	8006ec6 <UART_SetConfig+0x282>
 8006e60:	2308      	movs	r3, #8
 8006e62:	76fb      	strb	r3, [r7, #27]
 8006e64:	e02f      	b.n	8006ec6 <UART_SetConfig+0x282>
 8006e66:	2310      	movs	r3, #16
 8006e68:	76fb      	strb	r3, [r7, #27]
 8006e6a:	e02c      	b.n	8006ec6 <UART_SetConfig+0x282>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a2d      	ldr	r2, [pc, #180]	; (8006f28 <UART_SetConfig+0x2e4>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d125      	bne.n	8006ec2 <UART_SetConfig+0x27e>
 8006e76:	4b2e      	ldr	r3, [pc, #184]	; (8006f30 <UART_SetConfig+0x2ec>)
 8006e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e7c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006e80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e84:	d017      	beq.n	8006eb6 <UART_SetConfig+0x272>
 8006e86:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e8a:	d817      	bhi.n	8006ebc <UART_SetConfig+0x278>
 8006e8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e90:	d00b      	beq.n	8006eaa <UART_SetConfig+0x266>
 8006e92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e96:	d811      	bhi.n	8006ebc <UART_SetConfig+0x278>
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d003      	beq.n	8006ea4 <UART_SetConfig+0x260>
 8006e9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ea0:	d006      	beq.n	8006eb0 <UART_SetConfig+0x26c>
 8006ea2:	e00b      	b.n	8006ebc <UART_SetConfig+0x278>
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	76fb      	strb	r3, [r7, #27]
 8006ea8:	e00d      	b.n	8006ec6 <UART_SetConfig+0x282>
 8006eaa:	2302      	movs	r3, #2
 8006eac:	76fb      	strb	r3, [r7, #27]
 8006eae:	e00a      	b.n	8006ec6 <UART_SetConfig+0x282>
 8006eb0:	2304      	movs	r3, #4
 8006eb2:	76fb      	strb	r3, [r7, #27]
 8006eb4:	e007      	b.n	8006ec6 <UART_SetConfig+0x282>
 8006eb6:	2308      	movs	r3, #8
 8006eb8:	76fb      	strb	r3, [r7, #27]
 8006eba:	e004      	b.n	8006ec6 <UART_SetConfig+0x282>
 8006ebc:	2310      	movs	r3, #16
 8006ebe:	76fb      	strb	r3, [r7, #27]
 8006ec0:	e001      	b.n	8006ec6 <UART_SetConfig+0x282>
 8006ec2:	2310      	movs	r3, #16
 8006ec4:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a17      	ldr	r2, [pc, #92]	; (8006f28 <UART_SetConfig+0x2e4>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	f040 8087 	bne.w	8006fe0 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006ed2:	7efb      	ldrb	r3, [r7, #27]
 8006ed4:	2b08      	cmp	r3, #8
 8006ed6:	d837      	bhi.n	8006f48 <UART_SetConfig+0x304>
 8006ed8:	a201      	add	r2, pc, #4	; (adr r2, 8006ee0 <UART_SetConfig+0x29c>)
 8006eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ede:	bf00      	nop
 8006ee0:	08006f05 	.word	0x08006f05
 8006ee4:	08006f49 	.word	0x08006f49
 8006ee8:	08006f0d 	.word	0x08006f0d
 8006eec:	08006f49 	.word	0x08006f49
 8006ef0:	08006f13 	.word	0x08006f13
 8006ef4:	08006f49 	.word	0x08006f49
 8006ef8:	08006f49 	.word	0x08006f49
 8006efc:	08006f49 	.word	0x08006f49
 8006f00:	08006f1b 	.word	0x08006f1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f04:	f7fd fdde 	bl	8004ac4 <HAL_RCC_GetPCLK1Freq>
 8006f08:	6178      	str	r0, [r7, #20]
        break;
 8006f0a:	e022      	b.n	8006f52 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f0c:	4b0d      	ldr	r3, [pc, #52]	; (8006f44 <UART_SetConfig+0x300>)
 8006f0e:	617b      	str	r3, [r7, #20]
        break;
 8006f10:	e01f      	b.n	8006f52 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f12:	f7fd fd3f 	bl	8004994 <HAL_RCC_GetSysClockFreq>
 8006f16:	6178      	str	r0, [r7, #20]
        break;
 8006f18:	e01b      	b.n	8006f52 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f1e:	617b      	str	r3, [r7, #20]
        break;
 8006f20:	e017      	b.n	8006f52 <UART_SetConfig+0x30e>
 8006f22:	bf00      	nop
 8006f24:	efff69f3 	.word	0xefff69f3
 8006f28:	40008000 	.word	0x40008000
 8006f2c:	40013800 	.word	0x40013800
 8006f30:	40021000 	.word	0x40021000
 8006f34:	40004400 	.word	0x40004400
 8006f38:	40004800 	.word	0x40004800
 8006f3c:	40004c00 	.word	0x40004c00
 8006f40:	40005000 	.word	0x40005000
 8006f44:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	76bb      	strb	r3, [r7, #26]
        break;
 8006f50:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	f000 80f1 	beq.w	800713c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	685a      	ldr	r2, [r3, #4]
 8006f5e:	4613      	mov	r3, r2
 8006f60:	005b      	lsls	r3, r3, #1
 8006f62:	4413      	add	r3, r2
 8006f64:	697a      	ldr	r2, [r7, #20]
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d305      	bcc.n	8006f76 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006f70:	697a      	ldr	r2, [r7, #20]
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d902      	bls.n	8006f7c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	76bb      	strb	r3, [r7, #26]
 8006f7a:	e0df      	b.n	800713c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f04f 0100 	mov.w	r1, #0
 8006f84:	f04f 0200 	mov.w	r2, #0
 8006f88:	f04f 0300 	mov.w	r3, #0
 8006f8c:	020b      	lsls	r3, r1, #8
 8006f8e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006f92:	0202      	lsls	r2, r0, #8
 8006f94:	6879      	ldr	r1, [r7, #4]
 8006f96:	6849      	ldr	r1, [r1, #4]
 8006f98:	0849      	lsrs	r1, r1, #1
 8006f9a:	4608      	mov	r0, r1
 8006f9c:	f04f 0100 	mov.w	r1, #0
 8006fa0:	1814      	adds	r4, r2, r0
 8006fa2:	eb43 0501 	adc.w	r5, r3, r1
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	461a      	mov	r2, r3
 8006fac:	f04f 0300 	mov.w	r3, #0
 8006fb0:	4620      	mov	r0, r4
 8006fb2:	4629      	mov	r1, r5
 8006fb4:	f7f9 fe68 	bl	8000c88 <__aeabi_uldivmod>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	460b      	mov	r3, r1
 8006fbc:	4613      	mov	r3, r2
 8006fbe:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fc6:	d308      	bcc.n	8006fda <UART_SetConfig+0x396>
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fce:	d204      	bcs.n	8006fda <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	693a      	ldr	r2, [r7, #16]
 8006fd6:	60da      	str	r2, [r3, #12]
 8006fd8:	e0b0      	b.n	800713c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	76bb      	strb	r3, [r7, #26]
 8006fde:	e0ad      	b.n	800713c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	69db      	ldr	r3, [r3, #28]
 8006fe4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fe8:	d15b      	bne.n	80070a2 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8006fea:	7efb      	ldrb	r3, [r7, #27]
 8006fec:	2b08      	cmp	r3, #8
 8006fee:	d828      	bhi.n	8007042 <UART_SetConfig+0x3fe>
 8006ff0:	a201      	add	r2, pc, #4	; (adr r2, 8006ff8 <UART_SetConfig+0x3b4>)
 8006ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff6:	bf00      	nop
 8006ff8:	0800701d 	.word	0x0800701d
 8006ffc:	08007025 	.word	0x08007025
 8007000:	0800702d 	.word	0x0800702d
 8007004:	08007043 	.word	0x08007043
 8007008:	08007033 	.word	0x08007033
 800700c:	08007043 	.word	0x08007043
 8007010:	08007043 	.word	0x08007043
 8007014:	08007043 	.word	0x08007043
 8007018:	0800703b 	.word	0x0800703b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800701c:	f7fd fd52 	bl	8004ac4 <HAL_RCC_GetPCLK1Freq>
 8007020:	6178      	str	r0, [r7, #20]
        break;
 8007022:	e013      	b.n	800704c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007024:	f7fd fd64 	bl	8004af0 <HAL_RCC_GetPCLK2Freq>
 8007028:	6178      	str	r0, [r7, #20]
        break;
 800702a:	e00f      	b.n	800704c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800702c:	4b49      	ldr	r3, [pc, #292]	; (8007154 <UART_SetConfig+0x510>)
 800702e:	617b      	str	r3, [r7, #20]
        break;
 8007030:	e00c      	b.n	800704c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007032:	f7fd fcaf 	bl	8004994 <HAL_RCC_GetSysClockFreq>
 8007036:	6178      	str	r0, [r7, #20]
        break;
 8007038:	e008      	b.n	800704c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800703a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800703e:	617b      	str	r3, [r7, #20]
        break;
 8007040:	e004      	b.n	800704c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8007042:	2300      	movs	r3, #0
 8007044:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	76bb      	strb	r3, [r7, #26]
        break;
 800704a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d074      	beq.n	800713c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	005a      	lsls	r2, r3, #1
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	085b      	lsrs	r3, r3, #1
 800705c:	441a      	add	r2, r3
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	fbb2 f3f3 	udiv	r3, r2, r3
 8007066:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	2b0f      	cmp	r3, #15
 800706c:	d916      	bls.n	800709c <UART_SetConfig+0x458>
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007074:	d212      	bcs.n	800709c <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	b29b      	uxth	r3, r3
 800707a:	f023 030f 	bic.w	r3, r3, #15
 800707e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	085b      	lsrs	r3, r3, #1
 8007084:	b29b      	uxth	r3, r3
 8007086:	f003 0307 	and.w	r3, r3, #7
 800708a:	b29a      	uxth	r2, r3
 800708c:	89fb      	ldrh	r3, [r7, #14]
 800708e:	4313      	orrs	r3, r2
 8007090:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	89fa      	ldrh	r2, [r7, #14]
 8007098:	60da      	str	r2, [r3, #12]
 800709a:	e04f      	b.n	800713c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800709c:	2301      	movs	r3, #1
 800709e:	76bb      	strb	r3, [r7, #26]
 80070a0:	e04c      	b.n	800713c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80070a2:	7efb      	ldrb	r3, [r7, #27]
 80070a4:	2b08      	cmp	r3, #8
 80070a6:	d828      	bhi.n	80070fa <UART_SetConfig+0x4b6>
 80070a8:	a201      	add	r2, pc, #4	; (adr r2, 80070b0 <UART_SetConfig+0x46c>)
 80070aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ae:	bf00      	nop
 80070b0:	080070d5 	.word	0x080070d5
 80070b4:	080070dd 	.word	0x080070dd
 80070b8:	080070e5 	.word	0x080070e5
 80070bc:	080070fb 	.word	0x080070fb
 80070c0:	080070eb 	.word	0x080070eb
 80070c4:	080070fb 	.word	0x080070fb
 80070c8:	080070fb 	.word	0x080070fb
 80070cc:	080070fb 	.word	0x080070fb
 80070d0:	080070f3 	.word	0x080070f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070d4:	f7fd fcf6 	bl	8004ac4 <HAL_RCC_GetPCLK1Freq>
 80070d8:	6178      	str	r0, [r7, #20]
        break;
 80070da:	e013      	b.n	8007104 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070dc:	f7fd fd08 	bl	8004af0 <HAL_RCC_GetPCLK2Freq>
 80070e0:	6178      	str	r0, [r7, #20]
        break;
 80070e2:	e00f      	b.n	8007104 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070e4:	4b1b      	ldr	r3, [pc, #108]	; (8007154 <UART_SetConfig+0x510>)
 80070e6:	617b      	str	r3, [r7, #20]
        break;
 80070e8:	e00c      	b.n	8007104 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070ea:	f7fd fc53 	bl	8004994 <HAL_RCC_GetSysClockFreq>
 80070ee:	6178      	str	r0, [r7, #20]
        break;
 80070f0:	e008      	b.n	8007104 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070f6:	617b      	str	r3, [r7, #20]
        break;
 80070f8:	e004      	b.n	8007104 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80070fa:	2300      	movs	r3, #0
 80070fc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	76bb      	strb	r3, [r7, #26]
        break;
 8007102:	bf00      	nop
    }

    if (pclk != 0U)
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d018      	beq.n	800713c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	085a      	lsrs	r2, r3, #1
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	441a      	add	r2, r3
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	fbb2 f3f3 	udiv	r3, r2, r3
 800711c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	2b0f      	cmp	r3, #15
 8007122:	d909      	bls.n	8007138 <UART_SetConfig+0x4f4>
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800712a:	d205      	bcs.n	8007138 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	b29a      	uxth	r2, r3
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	60da      	str	r2, [r3, #12]
 8007136:	e001      	b.n	800713c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2200      	movs	r2, #0
 8007140:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2200      	movs	r2, #0
 8007146:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007148:	7ebb      	ldrb	r3, [r7, #26]
}
 800714a:	4618      	mov	r0, r3
 800714c:	3720      	adds	r7, #32
 800714e:	46bd      	mov	sp, r7
 8007150:	bdb0      	pop	{r4, r5, r7, pc}
 8007152:	bf00      	nop
 8007154:	00f42400 	.word	0x00f42400

08007158 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007158:	b480      	push	{r7}
 800715a:	b083      	sub	sp, #12
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007164:	f003 0301 	and.w	r3, r3, #1
 8007168:	2b00      	cmp	r3, #0
 800716a:	d00a      	beq.n	8007182 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	430a      	orrs	r2, r1
 8007180:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007186:	f003 0302 	and.w	r3, r3, #2
 800718a:	2b00      	cmp	r3, #0
 800718c:	d00a      	beq.n	80071a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	430a      	orrs	r2, r1
 80071a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a8:	f003 0304 	and.w	r3, r3, #4
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d00a      	beq.n	80071c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	430a      	orrs	r2, r1
 80071c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ca:	f003 0308 	and.w	r3, r3, #8
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d00a      	beq.n	80071e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	430a      	orrs	r2, r1
 80071e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ec:	f003 0310 	and.w	r3, r3, #16
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d00a      	beq.n	800720a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	430a      	orrs	r2, r1
 8007208:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800720e:	f003 0320 	and.w	r3, r3, #32
 8007212:	2b00      	cmp	r3, #0
 8007214:	d00a      	beq.n	800722c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	430a      	orrs	r2, r1
 800722a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007234:	2b00      	cmp	r3, #0
 8007236:	d01a      	beq.n	800726e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	430a      	orrs	r2, r1
 800724c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007252:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007256:	d10a      	bne.n	800726e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	430a      	orrs	r2, r1
 800726c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007276:	2b00      	cmp	r3, #0
 8007278:	d00a      	beq.n	8007290 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	430a      	orrs	r2, r1
 800728e:	605a      	str	r2, [r3, #4]
  }
}
 8007290:	bf00      	nop
 8007292:	370c      	adds	r7, #12
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr

0800729c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b086      	sub	sp, #24
 80072a0:	af02      	add	r7, sp, #8
 80072a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2200      	movs	r2, #0
 80072a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80072ac:	f7fa fd42 	bl	8001d34 <HAL_GetTick>
 80072b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f003 0308 	and.w	r3, r3, #8
 80072bc:	2b08      	cmp	r3, #8
 80072be:	d10e      	bne.n	80072de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80072c4:	9300      	str	r3, [sp, #0]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2200      	movs	r2, #0
 80072ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 f82d 	bl	800732e <UART_WaitOnFlagUntilTimeout>
 80072d4:	4603      	mov	r3, r0
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d001      	beq.n	80072de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072da:	2303      	movs	r3, #3
 80072dc:	e023      	b.n	8007326 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f003 0304 	and.w	r3, r3, #4
 80072e8:	2b04      	cmp	r3, #4
 80072ea:	d10e      	bne.n	800730a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80072f0:	9300      	str	r3, [sp, #0]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2200      	movs	r2, #0
 80072f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 f817 	bl	800732e <UART_WaitOnFlagUntilTimeout>
 8007300:	4603      	mov	r3, r0
 8007302:	2b00      	cmp	r3, #0
 8007304:	d001      	beq.n	800730a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007306:	2303      	movs	r3, #3
 8007308:	e00d      	b.n	8007326 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2220      	movs	r2, #32
 800730e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2220      	movs	r2, #32
 8007314:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2200      	movs	r2, #0
 8007320:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007324:	2300      	movs	r3, #0
}
 8007326:	4618      	mov	r0, r3
 8007328:	3710      	adds	r7, #16
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}

0800732e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800732e:	b580      	push	{r7, lr}
 8007330:	b09c      	sub	sp, #112	; 0x70
 8007332:	af00      	add	r7, sp, #0
 8007334:	60f8      	str	r0, [r7, #12]
 8007336:	60b9      	str	r1, [r7, #8]
 8007338:	603b      	str	r3, [r7, #0]
 800733a:	4613      	mov	r3, r2
 800733c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800733e:	e0a5      	b.n	800748c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007340:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007346:	f000 80a1 	beq.w	800748c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800734a:	f7fa fcf3 	bl	8001d34 <HAL_GetTick>
 800734e:	4602      	mov	r2, r0
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	1ad3      	subs	r3, r2, r3
 8007354:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007356:	429a      	cmp	r2, r3
 8007358:	d302      	bcc.n	8007360 <UART_WaitOnFlagUntilTimeout+0x32>
 800735a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800735c:	2b00      	cmp	r3, #0
 800735e:	d13e      	bne.n	80073de <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007366:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007368:	e853 3f00 	ldrex	r3, [r3]
 800736c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800736e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007370:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007374:	667b      	str	r3, [r7, #100]	; 0x64
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	461a      	mov	r2, r3
 800737c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800737e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007380:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007382:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007384:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007386:	e841 2300 	strex	r3, r2, [r1]
 800738a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800738c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800738e:	2b00      	cmp	r3, #0
 8007390:	d1e6      	bne.n	8007360 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	3308      	adds	r3, #8
 8007398:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800739a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800739c:	e853 3f00 	ldrex	r3, [r3]
 80073a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80073a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a4:	f023 0301 	bic.w	r3, r3, #1
 80073a8:	663b      	str	r3, [r7, #96]	; 0x60
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	3308      	adds	r3, #8
 80073b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80073b2:	64ba      	str	r2, [r7, #72]	; 0x48
 80073b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80073b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073ba:	e841 2300 	strex	r3, r2, [r1]
 80073be:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80073c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d1e5      	bne.n	8007392 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2220      	movs	r2, #32
 80073ca:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2220      	movs	r2, #32
 80073d0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2200      	movs	r2, #0
 80073d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80073da:	2303      	movs	r3, #3
 80073dc:	e067      	b.n	80074ae <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f003 0304 	and.w	r3, r3, #4
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d04f      	beq.n	800748c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	69db      	ldr	r3, [r3, #28]
 80073f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073fa:	d147      	bne.n	800748c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007404:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800740c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800740e:	e853 3f00 	ldrex	r3, [r3]
 8007412:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007416:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800741a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	461a      	mov	r2, r3
 8007422:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007424:	637b      	str	r3, [r7, #52]	; 0x34
 8007426:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007428:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800742a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800742c:	e841 2300 	strex	r3, r2, [r1]
 8007430:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007434:	2b00      	cmp	r3, #0
 8007436:	d1e6      	bne.n	8007406 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	3308      	adds	r3, #8
 800743e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	e853 3f00 	ldrex	r3, [r3]
 8007446:	613b      	str	r3, [r7, #16]
   return(result);
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	f023 0301 	bic.w	r3, r3, #1
 800744e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	3308      	adds	r3, #8
 8007456:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007458:	623a      	str	r2, [r7, #32]
 800745a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800745c:	69f9      	ldr	r1, [r7, #28]
 800745e:	6a3a      	ldr	r2, [r7, #32]
 8007460:	e841 2300 	strex	r3, r2, [r1]
 8007464:	61bb      	str	r3, [r7, #24]
   return(result);
 8007466:	69bb      	ldr	r3, [r7, #24]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d1e5      	bne.n	8007438 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2220      	movs	r2, #32
 8007470:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2220      	movs	r2, #32
 8007476:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2220      	movs	r2, #32
 800747c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2200      	movs	r2, #0
 8007484:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007488:	2303      	movs	r3, #3
 800748a:	e010      	b.n	80074ae <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	69da      	ldr	r2, [r3, #28]
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	4013      	ands	r3, r2
 8007496:	68ba      	ldr	r2, [r7, #8]
 8007498:	429a      	cmp	r2, r3
 800749a:	bf0c      	ite	eq
 800749c:	2301      	moveq	r3, #1
 800749e:	2300      	movne	r3, #0
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	461a      	mov	r2, r3
 80074a4:	79fb      	ldrb	r3, [r7, #7]
 80074a6:	429a      	cmp	r2, r3
 80074a8:	f43f af4a 	beq.w	8007340 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80074ac:	2300      	movs	r3, #0
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3770      	adds	r7, #112	; 0x70
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
	...

080074b8 <__errno>:
 80074b8:	4b01      	ldr	r3, [pc, #4]	; (80074c0 <__errno+0x8>)
 80074ba:	6818      	ldr	r0, [r3, #0]
 80074bc:	4770      	bx	lr
 80074be:	bf00      	nop
 80074c0:	2000000c 	.word	0x2000000c

080074c4 <__libc_init_array>:
 80074c4:	b570      	push	{r4, r5, r6, lr}
 80074c6:	4d0d      	ldr	r5, [pc, #52]	; (80074fc <__libc_init_array+0x38>)
 80074c8:	4c0d      	ldr	r4, [pc, #52]	; (8007500 <__libc_init_array+0x3c>)
 80074ca:	1b64      	subs	r4, r4, r5
 80074cc:	10a4      	asrs	r4, r4, #2
 80074ce:	2600      	movs	r6, #0
 80074d0:	42a6      	cmp	r6, r4
 80074d2:	d109      	bne.n	80074e8 <__libc_init_array+0x24>
 80074d4:	4d0b      	ldr	r5, [pc, #44]	; (8007504 <__libc_init_array+0x40>)
 80074d6:	4c0c      	ldr	r4, [pc, #48]	; (8007508 <__libc_init_array+0x44>)
 80074d8:	f004 fcbc 	bl	800be54 <_init>
 80074dc:	1b64      	subs	r4, r4, r5
 80074de:	10a4      	asrs	r4, r4, #2
 80074e0:	2600      	movs	r6, #0
 80074e2:	42a6      	cmp	r6, r4
 80074e4:	d105      	bne.n	80074f2 <__libc_init_array+0x2e>
 80074e6:	bd70      	pop	{r4, r5, r6, pc}
 80074e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80074ec:	4798      	blx	r3
 80074ee:	3601      	adds	r6, #1
 80074f0:	e7ee      	b.n	80074d0 <__libc_init_array+0xc>
 80074f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80074f6:	4798      	blx	r3
 80074f8:	3601      	adds	r6, #1
 80074fa:	e7f2      	b.n	80074e2 <__libc_init_array+0x1e>
 80074fc:	0800c414 	.word	0x0800c414
 8007500:	0800c414 	.word	0x0800c414
 8007504:	0800c414 	.word	0x0800c414
 8007508:	0800c418 	.word	0x0800c418

0800750c <memcpy>:
 800750c:	440a      	add	r2, r1
 800750e:	4291      	cmp	r1, r2
 8007510:	f100 33ff 	add.w	r3, r0, #4294967295
 8007514:	d100      	bne.n	8007518 <memcpy+0xc>
 8007516:	4770      	bx	lr
 8007518:	b510      	push	{r4, lr}
 800751a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800751e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007522:	4291      	cmp	r1, r2
 8007524:	d1f9      	bne.n	800751a <memcpy+0xe>
 8007526:	bd10      	pop	{r4, pc}

08007528 <memset>:
 8007528:	4402      	add	r2, r0
 800752a:	4603      	mov	r3, r0
 800752c:	4293      	cmp	r3, r2
 800752e:	d100      	bne.n	8007532 <memset+0xa>
 8007530:	4770      	bx	lr
 8007532:	f803 1b01 	strb.w	r1, [r3], #1
 8007536:	e7f9      	b.n	800752c <memset+0x4>

08007538 <__cvt>:
 8007538:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800753c:	ec55 4b10 	vmov	r4, r5, d0
 8007540:	2d00      	cmp	r5, #0
 8007542:	460e      	mov	r6, r1
 8007544:	4619      	mov	r1, r3
 8007546:	462b      	mov	r3, r5
 8007548:	bfbb      	ittet	lt
 800754a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800754e:	461d      	movlt	r5, r3
 8007550:	2300      	movge	r3, #0
 8007552:	232d      	movlt	r3, #45	; 0x2d
 8007554:	700b      	strb	r3, [r1, #0]
 8007556:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007558:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800755c:	4691      	mov	r9, r2
 800755e:	f023 0820 	bic.w	r8, r3, #32
 8007562:	bfbc      	itt	lt
 8007564:	4622      	movlt	r2, r4
 8007566:	4614      	movlt	r4, r2
 8007568:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800756c:	d005      	beq.n	800757a <__cvt+0x42>
 800756e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007572:	d100      	bne.n	8007576 <__cvt+0x3e>
 8007574:	3601      	adds	r6, #1
 8007576:	2102      	movs	r1, #2
 8007578:	e000      	b.n	800757c <__cvt+0x44>
 800757a:	2103      	movs	r1, #3
 800757c:	ab03      	add	r3, sp, #12
 800757e:	9301      	str	r3, [sp, #4]
 8007580:	ab02      	add	r3, sp, #8
 8007582:	9300      	str	r3, [sp, #0]
 8007584:	ec45 4b10 	vmov	d0, r4, r5
 8007588:	4653      	mov	r3, sl
 800758a:	4632      	mov	r2, r6
 800758c:	f001 feec 	bl	8009368 <_dtoa_r>
 8007590:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007594:	4607      	mov	r7, r0
 8007596:	d102      	bne.n	800759e <__cvt+0x66>
 8007598:	f019 0f01 	tst.w	r9, #1
 800759c:	d022      	beq.n	80075e4 <__cvt+0xac>
 800759e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80075a2:	eb07 0906 	add.w	r9, r7, r6
 80075a6:	d110      	bne.n	80075ca <__cvt+0x92>
 80075a8:	783b      	ldrb	r3, [r7, #0]
 80075aa:	2b30      	cmp	r3, #48	; 0x30
 80075ac:	d10a      	bne.n	80075c4 <__cvt+0x8c>
 80075ae:	2200      	movs	r2, #0
 80075b0:	2300      	movs	r3, #0
 80075b2:	4620      	mov	r0, r4
 80075b4:	4629      	mov	r1, r5
 80075b6:	f7f9 fa87 	bl	8000ac8 <__aeabi_dcmpeq>
 80075ba:	b918      	cbnz	r0, 80075c4 <__cvt+0x8c>
 80075bc:	f1c6 0601 	rsb	r6, r6, #1
 80075c0:	f8ca 6000 	str.w	r6, [sl]
 80075c4:	f8da 3000 	ldr.w	r3, [sl]
 80075c8:	4499      	add	r9, r3
 80075ca:	2200      	movs	r2, #0
 80075cc:	2300      	movs	r3, #0
 80075ce:	4620      	mov	r0, r4
 80075d0:	4629      	mov	r1, r5
 80075d2:	f7f9 fa79 	bl	8000ac8 <__aeabi_dcmpeq>
 80075d6:	b108      	cbz	r0, 80075dc <__cvt+0xa4>
 80075d8:	f8cd 900c 	str.w	r9, [sp, #12]
 80075dc:	2230      	movs	r2, #48	; 0x30
 80075de:	9b03      	ldr	r3, [sp, #12]
 80075e0:	454b      	cmp	r3, r9
 80075e2:	d307      	bcc.n	80075f4 <__cvt+0xbc>
 80075e4:	9b03      	ldr	r3, [sp, #12]
 80075e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80075e8:	1bdb      	subs	r3, r3, r7
 80075ea:	4638      	mov	r0, r7
 80075ec:	6013      	str	r3, [r2, #0]
 80075ee:	b004      	add	sp, #16
 80075f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075f4:	1c59      	adds	r1, r3, #1
 80075f6:	9103      	str	r1, [sp, #12]
 80075f8:	701a      	strb	r2, [r3, #0]
 80075fa:	e7f0      	b.n	80075de <__cvt+0xa6>

080075fc <__exponent>:
 80075fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80075fe:	4603      	mov	r3, r0
 8007600:	2900      	cmp	r1, #0
 8007602:	bfb8      	it	lt
 8007604:	4249      	neglt	r1, r1
 8007606:	f803 2b02 	strb.w	r2, [r3], #2
 800760a:	bfb4      	ite	lt
 800760c:	222d      	movlt	r2, #45	; 0x2d
 800760e:	222b      	movge	r2, #43	; 0x2b
 8007610:	2909      	cmp	r1, #9
 8007612:	7042      	strb	r2, [r0, #1]
 8007614:	dd2a      	ble.n	800766c <__exponent+0x70>
 8007616:	f10d 0407 	add.w	r4, sp, #7
 800761a:	46a4      	mov	ip, r4
 800761c:	270a      	movs	r7, #10
 800761e:	46a6      	mov	lr, r4
 8007620:	460a      	mov	r2, r1
 8007622:	fb91 f6f7 	sdiv	r6, r1, r7
 8007626:	fb07 1516 	mls	r5, r7, r6, r1
 800762a:	3530      	adds	r5, #48	; 0x30
 800762c:	2a63      	cmp	r2, #99	; 0x63
 800762e:	f104 34ff 	add.w	r4, r4, #4294967295
 8007632:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007636:	4631      	mov	r1, r6
 8007638:	dcf1      	bgt.n	800761e <__exponent+0x22>
 800763a:	3130      	adds	r1, #48	; 0x30
 800763c:	f1ae 0502 	sub.w	r5, lr, #2
 8007640:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007644:	1c44      	adds	r4, r0, #1
 8007646:	4629      	mov	r1, r5
 8007648:	4561      	cmp	r1, ip
 800764a:	d30a      	bcc.n	8007662 <__exponent+0x66>
 800764c:	f10d 0209 	add.w	r2, sp, #9
 8007650:	eba2 020e 	sub.w	r2, r2, lr
 8007654:	4565      	cmp	r5, ip
 8007656:	bf88      	it	hi
 8007658:	2200      	movhi	r2, #0
 800765a:	4413      	add	r3, r2
 800765c:	1a18      	subs	r0, r3, r0
 800765e:	b003      	add	sp, #12
 8007660:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007662:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007666:	f804 2f01 	strb.w	r2, [r4, #1]!
 800766a:	e7ed      	b.n	8007648 <__exponent+0x4c>
 800766c:	2330      	movs	r3, #48	; 0x30
 800766e:	3130      	adds	r1, #48	; 0x30
 8007670:	7083      	strb	r3, [r0, #2]
 8007672:	70c1      	strb	r1, [r0, #3]
 8007674:	1d03      	adds	r3, r0, #4
 8007676:	e7f1      	b.n	800765c <__exponent+0x60>

08007678 <_printf_float>:
 8007678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800767c:	ed2d 8b02 	vpush	{d8}
 8007680:	b08d      	sub	sp, #52	; 0x34
 8007682:	460c      	mov	r4, r1
 8007684:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007688:	4616      	mov	r6, r2
 800768a:	461f      	mov	r7, r3
 800768c:	4605      	mov	r5, r0
 800768e:	f003 f97d 	bl	800a98c <_localeconv_r>
 8007692:	f8d0 a000 	ldr.w	sl, [r0]
 8007696:	4650      	mov	r0, sl
 8007698:	f7f8 fd9a 	bl	80001d0 <strlen>
 800769c:	2300      	movs	r3, #0
 800769e:	930a      	str	r3, [sp, #40]	; 0x28
 80076a0:	6823      	ldr	r3, [r4, #0]
 80076a2:	9305      	str	r3, [sp, #20]
 80076a4:	f8d8 3000 	ldr.w	r3, [r8]
 80076a8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80076ac:	3307      	adds	r3, #7
 80076ae:	f023 0307 	bic.w	r3, r3, #7
 80076b2:	f103 0208 	add.w	r2, r3, #8
 80076b6:	f8c8 2000 	str.w	r2, [r8]
 80076ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076be:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80076c2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80076c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80076ca:	9307      	str	r3, [sp, #28]
 80076cc:	f8cd 8018 	str.w	r8, [sp, #24]
 80076d0:	ee08 0a10 	vmov	s16, r0
 80076d4:	4b9f      	ldr	r3, [pc, #636]	; (8007954 <_printf_float+0x2dc>)
 80076d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80076da:	f04f 32ff 	mov.w	r2, #4294967295
 80076de:	f7f9 fa25 	bl	8000b2c <__aeabi_dcmpun>
 80076e2:	bb88      	cbnz	r0, 8007748 <_printf_float+0xd0>
 80076e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80076e8:	4b9a      	ldr	r3, [pc, #616]	; (8007954 <_printf_float+0x2dc>)
 80076ea:	f04f 32ff 	mov.w	r2, #4294967295
 80076ee:	f7f9 f9ff 	bl	8000af0 <__aeabi_dcmple>
 80076f2:	bb48      	cbnz	r0, 8007748 <_printf_float+0xd0>
 80076f4:	2200      	movs	r2, #0
 80076f6:	2300      	movs	r3, #0
 80076f8:	4640      	mov	r0, r8
 80076fa:	4649      	mov	r1, r9
 80076fc:	f7f9 f9ee 	bl	8000adc <__aeabi_dcmplt>
 8007700:	b110      	cbz	r0, 8007708 <_printf_float+0x90>
 8007702:	232d      	movs	r3, #45	; 0x2d
 8007704:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007708:	4b93      	ldr	r3, [pc, #588]	; (8007958 <_printf_float+0x2e0>)
 800770a:	4894      	ldr	r0, [pc, #592]	; (800795c <_printf_float+0x2e4>)
 800770c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007710:	bf94      	ite	ls
 8007712:	4698      	movls	r8, r3
 8007714:	4680      	movhi	r8, r0
 8007716:	2303      	movs	r3, #3
 8007718:	6123      	str	r3, [r4, #16]
 800771a:	9b05      	ldr	r3, [sp, #20]
 800771c:	f023 0204 	bic.w	r2, r3, #4
 8007720:	6022      	str	r2, [r4, #0]
 8007722:	f04f 0900 	mov.w	r9, #0
 8007726:	9700      	str	r7, [sp, #0]
 8007728:	4633      	mov	r3, r6
 800772a:	aa0b      	add	r2, sp, #44	; 0x2c
 800772c:	4621      	mov	r1, r4
 800772e:	4628      	mov	r0, r5
 8007730:	f000 f9d8 	bl	8007ae4 <_printf_common>
 8007734:	3001      	adds	r0, #1
 8007736:	f040 8090 	bne.w	800785a <_printf_float+0x1e2>
 800773a:	f04f 30ff 	mov.w	r0, #4294967295
 800773e:	b00d      	add	sp, #52	; 0x34
 8007740:	ecbd 8b02 	vpop	{d8}
 8007744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007748:	4642      	mov	r2, r8
 800774a:	464b      	mov	r3, r9
 800774c:	4640      	mov	r0, r8
 800774e:	4649      	mov	r1, r9
 8007750:	f7f9 f9ec 	bl	8000b2c <__aeabi_dcmpun>
 8007754:	b140      	cbz	r0, 8007768 <_printf_float+0xf0>
 8007756:	464b      	mov	r3, r9
 8007758:	2b00      	cmp	r3, #0
 800775a:	bfbc      	itt	lt
 800775c:	232d      	movlt	r3, #45	; 0x2d
 800775e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007762:	487f      	ldr	r0, [pc, #508]	; (8007960 <_printf_float+0x2e8>)
 8007764:	4b7f      	ldr	r3, [pc, #508]	; (8007964 <_printf_float+0x2ec>)
 8007766:	e7d1      	b.n	800770c <_printf_float+0x94>
 8007768:	6863      	ldr	r3, [r4, #4]
 800776a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800776e:	9206      	str	r2, [sp, #24]
 8007770:	1c5a      	adds	r2, r3, #1
 8007772:	d13f      	bne.n	80077f4 <_printf_float+0x17c>
 8007774:	2306      	movs	r3, #6
 8007776:	6063      	str	r3, [r4, #4]
 8007778:	9b05      	ldr	r3, [sp, #20]
 800777a:	6861      	ldr	r1, [r4, #4]
 800777c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007780:	2300      	movs	r3, #0
 8007782:	9303      	str	r3, [sp, #12]
 8007784:	ab0a      	add	r3, sp, #40	; 0x28
 8007786:	e9cd b301 	strd	fp, r3, [sp, #4]
 800778a:	ab09      	add	r3, sp, #36	; 0x24
 800778c:	ec49 8b10 	vmov	d0, r8, r9
 8007790:	9300      	str	r3, [sp, #0]
 8007792:	6022      	str	r2, [r4, #0]
 8007794:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007798:	4628      	mov	r0, r5
 800779a:	f7ff fecd 	bl	8007538 <__cvt>
 800779e:	9b06      	ldr	r3, [sp, #24]
 80077a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80077a2:	2b47      	cmp	r3, #71	; 0x47
 80077a4:	4680      	mov	r8, r0
 80077a6:	d108      	bne.n	80077ba <_printf_float+0x142>
 80077a8:	1cc8      	adds	r0, r1, #3
 80077aa:	db02      	blt.n	80077b2 <_printf_float+0x13a>
 80077ac:	6863      	ldr	r3, [r4, #4]
 80077ae:	4299      	cmp	r1, r3
 80077b0:	dd41      	ble.n	8007836 <_printf_float+0x1be>
 80077b2:	f1ab 0b02 	sub.w	fp, fp, #2
 80077b6:	fa5f fb8b 	uxtb.w	fp, fp
 80077ba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80077be:	d820      	bhi.n	8007802 <_printf_float+0x18a>
 80077c0:	3901      	subs	r1, #1
 80077c2:	465a      	mov	r2, fp
 80077c4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80077c8:	9109      	str	r1, [sp, #36]	; 0x24
 80077ca:	f7ff ff17 	bl	80075fc <__exponent>
 80077ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077d0:	1813      	adds	r3, r2, r0
 80077d2:	2a01      	cmp	r2, #1
 80077d4:	4681      	mov	r9, r0
 80077d6:	6123      	str	r3, [r4, #16]
 80077d8:	dc02      	bgt.n	80077e0 <_printf_float+0x168>
 80077da:	6822      	ldr	r2, [r4, #0]
 80077dc:	07d2      	lsls	r2, r2, #31
 80077de:	d501      	bpl.n	80077e4 <_printf_float+0x16c>
 80077e0:	3301      	adds	r3, #1
 80077e2:	6123      	str	r3, [r4, #16]
 80077e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d09c      	beq.n	8007726 <_printf_float+0xae>
 80077ec:	232d      	movs	r3, #45	; 0x2d
 80077ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077f2:	e798      	b.n	8007726 <_printf_float+0xae>
 80077f4:	9a06      	ldr	r2, [sp, #24]
 80077f6:	2a47      	cmp	r2, #71	; 0x47
 80077f8:	d1be      	bne.n	8007778 <_printf_float+0x100>
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d1bc      	bne.n	8007778 <_printf_float+0x100>
 80077fe:	2301      	movs	r3, #1
 8007800:	e7b9      	b.n	8007776 <_printf_float+0xfe>
 8007802:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007806:	d118      	bne.n	800783a <_printf_float+0x1c2>
 8007808:	2900      	cmp	r1, #0
 800780a:	6863      	ldr	r3, [r4, #4]
 800780c:	dd0b      	ble.n	8007826 <_printf_float+0x1ae>
 800780e:	6121      	str	r1, [r4, #16]
 8007810:	b913      	cbnz	r3, 8007818 <_printf_float+0x1a0>
 8007812:	6822      	ldr	r2, [r4, #0]
 8007814:	07d0      	lsls	r0, r2, #31
 8007816:	d502      	bpl.n	800781e <_printf_float+0x1a6>
 8007818:	3301      	adds	r3, #1
 800781a:	440b      	add	r3, r1
 800781c:	6123      	str	r3, [r4, #16]
 800781e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007820:	f04f 0900 	mov.w	r9, #0
 8007824:	e7de      	b.n	80077e4 <_printf_float+0x16c>
 8007826:	b913      	cbnz	r3, 800782e <_printf_float+0x1b6>
 8007828:	6822      	ldr	r2, [r4, #0]
 800782a:	07d2      	lsls	r2, r2, #31
 800782c:	d501      	bpl.n	8007832 <_printf_float+0x1ba>
 800782e:	3302      	adds	r3, #2
 8007830:	e7f4      	b.n	800781c <_printf_float+0x1a4>
 8007832:	2301      	movs	r3, #1
 8007834:	e7f2      	b.n	800781c <_printf_float+0x1a4>
 8007836:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800783a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800783c:	4299      	cmp	r1, r3
 800783e:	db05      	blt.n	800784c <_printf_float+0x1d4>
 8007840:	6823      	ldr	r3, [r4, #0]
 8007842:	6121      	str	r1, [r4, #16]
 8007844:	07d8      	lsls	r0, r3, #31
 8007846:	d5ea      	bpl.n	800781e <_printf_float+0x1a6>
 8007848:	1c4b      	adds	r3, r1, #1
 800784a:	e7e7      	b.n	800781c <_printf_float+0x1a4>
 800784c:	2900      	cmp	r1, #0
 800784e:	bfd4      	ite	le
 8007850:	f1c1 0202 	rsble	r2, r1, #2
 8007854:	2201      	movgt	r2, #1
 8007856:	4413      	add	r3, r2
 8007858:	e7e0      	b.n	800781c <_printf_float+0x1a4>
 800785a:	6823      	ldr	r3, [r4, #0]
 800785c:	055a      	lsls	r2, r3, #21
 800785e:	d407      	bmi.n	8007870 <_printf_float+0x1f8>
 8007860:	6923      	ldr	r3, [r4, #16]
 8007862:	4642      	mov	r2, r8
 8007864:	4631      	mov	r1, r6
 8007866:	4628      	mov	r0, r5
 8007868:	47b8      	blx	r7
 800786a:	3001      	adds	r0, #1
 800786c:	d12c      	bne.n	80078c8 <_printf_float+0x250>
 800786e:	e764      	b.n	800773a <_printf_float+0xc2>
 8007870:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007874:	f240 80e0 	bls.w	8007a38 <_printf_float+0x3c0>
 8007878:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800787c:	2200      	movs	r2, #0
 800787e:	2300      	movs	r3, #0
 8007880:	f7f9 f922 	bl	8000ac8 <__aeabi_dcmpeq>
 8007884:	2800      	cmp	r0, #0
 8007886:	d034      	beq.n	80078f2 <_printf_float+0x27a>
 8007888:	4a37      	ldr	r2, [pc, #220]	; (8007968 <_printf_float+0x2f0>)
 800788a:	2301      	movs	r3, #1
 800788c:	4631      	mov	r1, r6
 800788e:	4628      	mov	r0, r5
 8007890:	47b8      	blx	r7
 8007892:	3001      	adds	r0, #1
 8007894:	f43f af51 	beq.w	800773a <_printf_float+0xc2>
 8007898:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800789c:	429a      	cmp	r2, r3
 800789e:	db02      	blt.n	80078a6 <_printf_float+0x22e>
 80078a0:	6823      	ldr	r3, [r4, #0]
 80078a2:	07d8      	lsls	r0, r3, #31
 80078a4:	d510      	bpl.n	80078c8 <_printf_float+0x250>
 80078a6:	ee18 3a10 	vmov	r3, s16
 80078aa:	4652      	mov	r2, sl
 80078ac:	4631      	mov	r1, r6
 80078ae:	4628      	mov	r0, r5
 80078b0:	47b8      	blx	r7
 80078b2:	3001      	adds	r0, #1
 80078b4:	f43f af41 	beq.w	800773a <_printf_float+0xc2>
 80078b8:	f04f 0800 	mov.w	r8, #0
 80078bc:	f104 091a 	add.w	r9, r4, #26
 80078c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078c2:	3b01      	subs	r3, #1
 80078c4:	4543      	cmp	r3, r8
 80078c6:	dc09      	bgt.n	80078dc <_printf_float+0x264>
 80078c8:	6823      	ldr	r3, [r4, #0]
 80078ca:	079b      	lsls	r3, r3, #30
 80078cc:	f100 8105 	bmi.w	8007ada <_printf_float+0x462>
 80078d0:	68e0      	ldr	r0, [r4, #12]
 80078d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078d4:	4298      	cmp	r0, r3
 80078d6:	bfb8      	it	lt
 80078d8:	4618      	movlt	r0, r3
 80078da:	e730      	b.n	800773e <_printf_float+0xc6>
 80078dc:	2301      	movs	r3, #1
 80078de:	464a      	mov	r2, r9
 80078e0:	4631      	mov	r1, r6
 80078e2:	4628      	mov	r0, r5
 80078e4:	47b8      	blx	r7
 80078e6:	3001      	adds	r0, #1
 80078e8:	f43f af27 	beq.w	800773a <_printf_float+0xc2>
 80078ec:	f108 0801 	add.w	r8, r8, #1
 80078f0:	e7e6      	b.n	80078c0 <_printf_float+0x248>
 80078f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	dc39      	bgt.n	800796c <_printf_float+0x2f4>
 80078f8:	4a1b      	ldr	r2, [pc, #108]	; (8007968 <_printf_float+0x2f0>)
 80078fa:	2301      	movs	r3, #1
 80078fc:	4631      	mov	r1, r6
 80078fe:	4628      	mov	r0, r5
 8007900:	47b8      	blx	r7
 8007902:	3001      	adds	r0, #1
 8007904:	f43f af19 	beq.w	800773a <_printf_float+0xc2>
 8007908:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800790c:	4313      	orrs	r3, r2
 800790e:	d102      	bne.n	8007916 <_printf_float+0x29e>
 8007910:	6823      	ldr	r3, [r4, #0]
 8007912:	07d9      	lsls	r1, r3, #31
 8007914:	d5d8      	bpl.n	80078c8 <_printf_float+0x250>
 8007916:	ee18 3a10 	vmov	r3, s16
 800791a:	4652      	mov	r2, sl
 800791c:	4631      	mov	r1, r6
 800791e:	4628      	mov	r0, r5
 8007920:	47b8      	blx	r7
 8007922:	3001      	adds	r0, #1
 8007924:	f43f af09 	beq.w	800773a <_printf_float+0xc2>
 8007928:	f04f 0900 	mov.w	r9, #0
 800792c:	f104 0a1a 	add.w	sl, r4, #26
 8007930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007932:	425b      	negs	r3, r3
 8007934:	454b      	cmp	r3, r9
 8007936:	dc01      	bgt.n	800793c <_printf_float+0x2c4>
 8007938:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800793a:	e792      	b.n	8007862 <_printf_float+0x1ea>
 800793c:	2301      	movs	r3, #1
 800793e:	4652      	mov	r2, sl
 8007940:	4631      	mov	r1, r6
 8007942:	4628      	mov	r0, r5
 8007944:	47b8      	blx	r7
 8007946:	3001      	adds	r0, #1
 8007948:	f43f aef7 	beq.w	800773a <_printf_float+0xc2>
 800794c:	f109 0901 	add.w	r9, r9, #1
 8007950:	e7ee      	b.n	8007930 <_printf_float+0x2b8>
 8007952:	bf00      	nop
 8007954:	7fefffff 	.word	0x7fefffff
 8007958:	0800bf58 	.word	0x0800bf58
 800795c:	0800bf5c 	.word	0x0800bf5c
 8007960:	0800bf64 	.word	0x0800bf64
 8007964:	0800bf60 	.word	0x0800bf60
 8007968:	0800bf68 	.word	0x0800bf68
 800796c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800796e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007970:	429a      	cmp	r2, r3
 8007972:	bfa8      	it	ge
 8007974:	461a      	movge	r2, r3
 8007976:	2a00      	cmp	r2, #0
 8007978:	4691      	mov	r9, r2
 800797a:	dc37      	bgt.n	80079ec <_printf_float+0x374>
 800797c:	f04f 0b00 	mov.w	fp, #0
 8007980:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007984:	f104 021a 	add.w	r2, r4, #26
 8007988:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800798a:	9305      	str	r3, [sp, #20]
 800798c:	eba3 0309 	sub.w	r3, r3, r9
 8007990:	455b      	cmp	r3, fp
 8007992:	dc33      	bgt.n	80079fc <_printf_float+0x384>
 8007994:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007998:	429a      	cmp	r2, r3
 800799a:	db3b      	blt.n	8007a14 <_printf_float+0x39c>
 800799c:	6823      	ldr	r3, [r4, #0]
 800799e:	07da      	lsls	r2, r3, #31
 80079a0:	d438      	bmi.n	8007a14 <_printf_float+0x39c>
 80079a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079a4:	9b05      	ldr	r3, [sp, #20]
 80079a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80079a8:	1ad3      	subs	r3, r2, r3
 80079aa:	eba2 0901 	sub.w	r9, r2, r1
 80079ae:	4599      	cmp	r9, r3
 80079b0:	bfa8      	it	ge
 80079b2:	4699      	movge	r9, r3
 80079b4:	f1b9 0f00 	cmp.w	r9, #0
 80079b8:	dc35      	bgt.n	8007a26 <_printf_float+0x3ae>
 80079ba:	f04f 0800 	mov.w	r8, #0
 80079be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80079c2:	f104 0a1a 	add.w	sl, r4, #26
 80079c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80079ca:	1a9b      	subs	r3, r3, r2
 80079cc:	eba3 0309 	sub.w	r3, r3, r9
 80079d0:	4543      	cmp	r3, r8
 80079d2:	f77f af79 	ble.w	80078c8 <_printf_float+0x250>
 80079d6:	2301      	movs	r3, #1
 80079d8:	4652      	mov	r2, sl
 80079da:	4631      	mov	r1, r6
 80079dc:	4628      	mov	r0, r5
 80079de:	47b8      	blx	r7
 80079e0:	3001      	adds	r0, #1
 80079e2:	f43f aeaa 	beq.w	800773a <_printf_float+0xc2>
 80079e6:	f108 0801 	add.w	r8, r8, #1
 80079ea:	e7ec      	b.n	80079c6 <_printf_float+0x34e>
 80079ec:	4613      	mov	r3, r2
 80079ee:	4631      	mov	r1, r6
 80079f0:	4642      	mov	r2, r8
 80079f2:	4628      	mov	r0, r5
 80079f4:	47b8      	blx	r7
 80079f6:	3001      	adds	r0, #1
 80079f8:	d1c0      	bne.n	800797c <_printf_float+0x304>
 80079fa:	e69e      	b.n	800773a <_printf_float+0xc2>
 80079fc:	2301      	movs	r3, #1
 80079fe:	4631      	mov	r1, r6
 8007a00:	4628      	mov	r0, r5
 8007a02:	9205      	str	r2, [sp, #20]
 8007a04:	47b8      	blx	r7
 8007a06:	3001      	adds	r0, #1
 8007a08:	f43f ae97 	beq.w	800773a <_printf_float+0xc2>
 8007a0c:	9a05      	ldr	r2, [sp, #20]
 8007a0e:	f10b 0b01 	add.w	fp, fp, #1
 8007a12:	e7b9      	b.n	8007988 <_printf_float+0x310>
 8007a14:	ee18 3a10 	vmov	r3, s16
 8007a18:	4652      	mov	r2, sl
 8007a1a:	4631      	mov	r1, r6
 8007a1c:	4628      	mov	r0, r5
 8007a1e:	47b8      	blx	r7
 8007a20:	3001      	adds	r0, #1
 8007a22:	d1be      	bne.n	80079a2 <_printf_float+0x32a>
 8007a24:	e689      	b.n	800773a <_printf_float+0xc2>
 8007a26:	9a05      	ldr	r2, [sp, #20]
 8007a28:	464b      	mov	r3, r9
 8007a2a:	4442      	add	r2, r8
 8007a2c:	4631      	mov	r1, r6
 8007a2e:	4628      	mov	r0, r5
 8007a30:	47b8      	blx	r7
 8007a32:	3001      	adds	r0, #1
 8007a34:	d1c1      	bne.n	80079ba <_printf_float+0x342>
 8007a36:	e680      	b.n	800773a <_printf_float+0xc2>
 8007a38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a3a:	2a01      	cmp	r2, #1
 8007a3c:	dc01      	bgt.n	8007a42 <_printf_float+0x3ca>
 8007a3e:	07db      	lsls	r3, r3, #31
 8007a40:	d538      	bpl.n	8007ab4 <_printf_float+0x43c>
 8007a42:	2301      	movs	r3, #1
 8007a44:	4642      	mov	r2, r8
 8007a46:	4631      	mov	r1, r6
 8007a48:	4628      	mov	r0, r5
 8007a4a:	47b8      	blx	r7
 8007a4c:	3001      	adds	r0, #1
 8007a4e:	f43f ae74 	beq.w	800773a <_printf_float+0xc2>
 8007a52:	ee18 3a10 	vmov	r3, s16
 8007a56:	4652      	mov	r2, sl
 8007a58:	4631      	mov	r1, r6
 8007a5a:	4628      	mov	r0, r5
 8007a5c:	47b8      	blx	r7
 8007a5e:	3001      	adds	r0, #1
 8007a60:	f43f ae6b 	beq.w	800773a <_printf_float+0xc2>
 8007a64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007a68:	2200      	movs	r2, #0
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	f7f9 f82c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a70:	b9d8      	cbnz	r0, 8007aaa <_printf_float+0x432>
 8007a72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a74:	f108 0201 	add.w	r2, r8, #1
 8007a78:	3b01      	subs	r3, #1
 8007a7a:	4631      	mov	r1, r6
 8007a7c:	4628      	mov	r0, r5
 8007a7e:	47b8      	blx	r7
 8007a80:	3001      	adds	r0, #1
 8007a82:	d10e      	bne.n	8007aa2 <_printf_float+0x42a>
 8007a84:	e659      	b.n	800773a <_printf_float+0xc2>
 8007a86:	2301      	movs	r3, #1
 8007a88:	4652      	mov	r2, sl
 8007a8a:	4631      	mov	r1, r6
 8007a8c:	4628      	mov	r0, r5
 8007a8e:	47b8      	blx	r7
 8007a90:	3001      	adds	r0, #1
 8007a92:	f43f ae52 	beq.w	800773a <_printf_float+0xc2>
 8007a96:	f108 0801 	add.w	r8, r8, #1
 8007a9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a9c:	3b01      	subs	r3, #1
 8007a9e:	4543      	cmp	r3, r8
 8007aa0:	dcf1      	bgt.n	8007a86 <_printf_float+0x40e>
 8007aa2:	464b      	mov	r3, r9
 8007aa4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007aa8:	e6dc      	b.n	8007864 <_printf_float+0x1ec>
 8007aaa:	f04f 0800 	mov.w	r8, #0
 8007aae:	f104 0a1a 	add.w	sl, r4, #26
 8007ab2:	e7f2      	b.n	8007a9a <_printf_float+0x422>
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	4642      	mov	r2, r8
 8007ab8:	e7df      	b.n	8007a7a <_printf_float+0x402>
 8007aba:	2301      	movs	r3, #1
 8007abc:	464a      	mov	r2, r9
 8007abe:	4631      	mov	r1, r6
 8007ac0:	4628      	mov	r0, r5
 8007ac2:	47b8      	blx	r7
 8007ac4:	3001      	adds	r0, #1
 8007ac6:	f43f ae38 	beq.w	800773a <_printf_float+0xc2>
 8007aca:	f108 0801 	add.w	r8, r8, #1
 8007ace:	68e3      	ldr	r3, [r4, #12]
 8007ad0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007ad2:	1a5b      	subs	r3, r3, r1
 8007ad4:	4543      	cmp	r3, r8
 8007ad6:	dcf0      	bgt.n	8007aba <_printf_float+0x442>
 8007ad8:	e6fa      	b.n	80078d0 <_printf_float+0x258>
 8007ada:	f04f 0800 	mov.w	r8, #0
 8007ade:	f104 0919 	add.w	r9, r4, #25
 8007ae2:	e7f4      	b.n	8007ace <_printf_float+0x456>

08007ae4 <_printf_common>:
 8007ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ae8:	4616      	mov	r6, r2
 8007aea:	4699      	mov	r9, r3
 8007aec:	688a      	ldr	r2, [r1, #8]
 8007aee:	690b      	ldr	r3, [r1, #16]
 8007af0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007af4:	4293      	cmp	r3, r2
 8007af6:	bfb8      	it	lt
 8007af8:	4613      	movlt	r3, r2
 8007afa:	6033      	str	r3, [r6, #0]
 8007afc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b00:	4607      	mov	r7, r0
 8007b02:	460c      	mov	r4, r1
 8007b04:	b10a      	cbz	r2, 8007b0a <_printf_common+0x26>
 8007b06:	3301      	adds	r3, #1
 8007b08:	6033      	str	r3, [r6, #0]
 8007b0a:	6823      	ldr	r3, [r4, #0]
 8007b0c:	0699      	lsls	r1, r3, #26
 8007b0e:	bf42      	ittt	mi
 8007b10:	6833      	ldrmi	r3, [r6, #0]
 8007b12:	3302      	addmi	r3, #2
 8007b14:	6033      	strmi	r3, [r6, #0]
 8007b16:	6825      	ldr	r5, [r4, #0]
 8007b18:	f015 0506 	ands.w	r5, r5, #6
 8007b1c:	d106      	bne.n	8007b2c <_printf_common+0x48>
 8007b1e:	f104 0a19 	add.w	sl, r4, #25
 8007b22:	68e3      	ldr	r3, [r4, #12]
 8007b24:	6832      	ldr	r2, [r6, #0]
 8007b26:	1a9b      	subs	r3, r3, r2
 8007b28:	42ab      	cmp	r3, r5
 8007b2a:	dc26      	bgt.n	8007b7a <_printf_common+0x96>
 8007b2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007b30:	1e13      	subs	r3, r2, #0
 8007b32:	6822      	ldr	r2, [r4, #0]
 8007b34:	bf18      	it	ne
 8007b36:	2301      	movne	r3, #1
 8007b38:	0692      	lsls	r2, r2, #26
 8007b3a:	d42b      	bmi.n	8007b94 <_printf_common+0xb0>
 8007b3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b40:	4649      	mov	r1, r9
 8007b42:	4638      	mov	r0, r7
 8007b44:	47c0      	blx	r8
 8007b46:	3001      	adds	r0, #1
 8007b48:	d01e      	beq.n	8007b88 <_printf_common+0xa4>
 8007b4a:	6823      	ldr	r3, [r4, #0]
 8007b4c:	68e5      	ldr	r5, [r4, #12]
 8007b4e:	6832      	ldr	r2, [r6, #0]
 8007b50:	f003 0306 	and.w	r3, r3, #6
 8007b54:	2b04      	cmp	r3, #4
 8007b56:	bf08      	it	eq
 8007b58:	1aad      	subeq	r5, r5, r2
 8007b5a:	68a3      	ldr	r3, [r4, #8]
 8007b5c:	6922      	ldr	r2, [r4, #16]
 8007b5e:	bf0c      	ite	eq
 8007b60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b64:	2500      	movne	r5, #0
 8007b66:	4293      	cmp	r3, r2
 8007b68:	bfc4      	itt	gt
 8007b6a:	1a9b      	subgt	r3, r3, r2
 8007b6c:	18ed      	addgt	r5, r5, r3
 8007b6e:	2600      	movs	r6, #0
 8007b70:	341a      	adds	r4, #26
 8007b72:	42b5      	cmp	r5, r6
 8007b74:	d11a      	bne.n	8007bac <_printf_common+0xc8>
 8007b76:	2000      	movs	r0, #0
 8007b78:	e008      	b.n	8007b8c <_printf_common+0xa8>
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	4652      	mov	r2, sl
 8007b7e:	4649      	mov	r1, r9
 8007b80:	4638      	mov	r0, r7
 8007b82:	47c0      	blx	r8
 8007b84:	3001      	adds	r0, #1
 8007b86:	d103      	bne.n	8007b90 <_printf_common+0xac>
 8007b88:	f04f 30ff 	mov.w	r0, #4294967295
 8007b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b90:	3501      	adds	r5, #1
 8007b92:	e7c6      	b.n	8007b22 <_printf_common+0x3e>
 8007b94:	18e1      	adds	r1, r4, r3
 8007b96:	1c5a      	adds	r2, r3, #1
 8007b98:	2030      	movs	r0, #48	; 0x30
 8007b9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b9e:	4422      	add	r2, r4
 8007ba0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007ba4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007ba8:	3302      	adds	r3, #2
 8007baa:	e7c7      	b.n	8007b3c <_printf_common+0x58>
 8007bac:	2301      	movs	r3, #1
 8007bae:	4622      	mov	r2, r4
 8007bb0:	4649      	mov	r1, r9
 8007bb2:	4638      	mov	r0, r7
 8007bb4:	47c0      	blx	r8
 8007bb6:	3001      	adds	r0, #1
 8007bb8:	d0e6      	beq.n	8007b88 <_printf_common+0xa4>
 8007bba:	3601      	adds	r6, #1
 8007bbc:	e7d9      	b.n	8007b72 <_printf_common+0x8e>
	...

08007bc0 <_printf_i>:
 8007bc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007bc4:	460c      	mov	r4, r1
 8007bc6:	4691      	mov	r9, r2
 8007bc8:	7e27      	ldrb	r7, [r4, #24]
 8007bca:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007bcc:	2f78      	cmp	r7, #120	; 0x78
 8007bce:	4680      	mov	r8, r0
 8007bd0:	469a      	mov	sl, r3
 8007bd2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007bd6:	d807      	bhi.n	8007be8 <_printf_i+0x28>
 8007bd8:	2f62      	cmp	r7, #98	; 0x62
 8007bda:	d80a      	bhi.n	8007bf2 <_printf_i+0x32>
 8007bdc:	2f00      	cmp	r7, #0
 8007bde:	f000 80d8 	beq.w	8007d92 <_printf_i+0x1d2>
 8007be2:	2f58      	cmp	r7, #88	; 0x58
 8007be4:	f000 80a3 	beq.w	8007d2e <_printf_i+0x16e>
 8007be8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007bec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007bf0:	e03a      	b.n	8007c68 <_printf_i+0xa8>
 8007bf2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007bf6:	2b15      	cmp	r3, #21
 8007bf8:	d8f6      	bhi.n	8007be8 <_printf_i+0x28>
 8007bfa:	a001      	add	r0, pc, #4	; (adr r0, 8007c00 <_printf_i+0x40>)
 8007bfc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007c00:	08007c59 	.word	0x08007c59
 8007c04:	08007c6d 	.word	0x08007c6d
 8007c08:	08007be9 	.word	0x08007be9
 8007c0c:	08007be9 	.word	0x08007be9
 8007c10:	08007be9 	.word	0x08007be9
 8007c14:	08007be9 	.word	0x08007be9
 8007c18:	08007c6d 	.word	0x08007c6d
 8007c1c:	08007be9 	.word	0x08007be9
 8007c20:	08007be9 	.word	0x08007be9
 8007c24:	08007be9 	.word	0x08007be9
 8007c28:	08007be9 	.word	0x08007be9
 8007c2c:	08007d79 	.word	0x08007d79
 8007c30:	08007c9d 	.word	0x08007c9d
 8007c34:	08007d5b 	.word	0x08007d5b
 8007c38:	08007be9 	.word	0x08007be9
 8007c3c:	08007be9 	.word	0x08007be9
 8007c40:	08007d9b 	.word	0x08007d9b
 8007c44:	08007be9 	.word	0x08007be9
 8007c48:	08007c9d 	.word	0x08007c9d
 8007c4c:	08007be9 	.word	0x08007be9
 8007c50:	08007be9 	.word	0x08007be9
 8007c54:	08007d63 	.word	0x08007d63
 8007c58:	680b      	ldr	r3, [r1, #0]
 8007c5a:	1d1a      	adds	r2, r3, #4
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	600a      	str	r2, [r1, #0]
 8007c60:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007c64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c68:	2301      	movs	r3, #1
 8007c6a:	e0a3      	b.n	8007db4 <_printf_i+0x1f4>
 8007c6c:	6825      	ldr	r5, [r4, #0]
 8007c6e:	6808      	ldr	r0, [r1, #0]
 8007c70:	062e      	lsls	r6, r5, #24
 8007c72:	f100 0304 	add.w	r3, r0, #4
 8007c76:	d50a      	bpl.n	8007c8e <_printf_i+0xce>
 8007c78:	6805      	ldr	r5, [r0, #0]
 8007c7a:	600b      	str	r3, [r1, #0]
 8007c7c:	2d00      	cmp	r5, #0
 8007c7e:	da03      	bge.n	8007c88 <_printf_i+0xc8>
 8007c80:	232d      	movs	r3, #45	; 0x2d
 8007c82:	426d      	negs	r5, r5
 8007c84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c88:	485e      	ldr	r0, [pc, #376]	; (8007e04 <_printf_i+0x244>)
 8007c8a:	230a      	movs	r3, #10
 8007c8c:	e019      	b.n	8007cc2 <_printf_i+0x102>
 8007c8e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007c92:	6805      	ldr	r5, [r0, #0]
 8007c94:	600b      	str	r3, [r1, #0]
 8007c96:	bf18      	it	ne
 8007c98:	b22d      	sxthne	r5, r5
 8007c9a:	e7ef      	b.n	8007c7c <_printf_i+0xbc>
 8007c9c:	680b      	ldr	r3, [r1, #0]
 8007c9e:	6825      	ldr	r5, [r4, #0]
 8007ca0:	1d18      	adds	r0, r3, #4
 8007ca2:	6008      	str	r0, [r1, #0]
 8007ca4:	0628      	lsls	r0, r5, #24
 8007ca6:	d501      	bpl.n	8007cac <_printf_i+0xec>
 8007ca8:	681d      	ldr	r5, [r3, #0]
 8007caa:	e002      	b.n	8007cb2 <_printf_i+0xf2>
 8007cac:	0669      	lsls	r1, r5, #25
 8007cae:	d5fb      	bpl.n	8007ca8 <_printf_i+0xe8>
 8007cb0:	881d      	ldrh	r5, [r3, #0]
 8007cb2:	4854      	ldr	r0, [pc, #336]	; (8007e04 <_printf_i+0x244>)
 8007cb4:	2f6f      	cmp	r7, #111	; 0x6f
 8007cb6:	bf0c      	ite	eq
 8007cb8:	2308      	moveq	r3, #8
 8007cba:	230a      	movne	r3, #10
 8007cbc:	2100      	movs	r1, #0
 8007cbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007cc2:	6866      	ldr	r6, [r4, #4]
 8007cc4:	60a6      	str	r6, [r4, #8]
 8007cc6:	2e00      	cmp	r6, #0
 8007cc8:	bfa2      	ittt	ge
 8007cca:	6821      	ldrge	r1, [r4, #0]
 8007ccc:	f021 0104 	bicge.w	r1, r1, #4
 8007cd0:	6021      	strge	r1, [r4, #0]
 8007cd2:	b90d      	cbnz	r5, 8007cd8 <_printf_i+0x118>
 8007cd4:	2e00      	cmp	r6, #0
 8007cd6:	d04d      	beq.n	8007d74 <_printf_i+0x1b4>
 8007cd8:	4616      	mov	r6, r2
 8007cda:	fbb5 f1f3 	udiv	r1, r5, r3
 8007cde:	fb03 5711 	mls	r7, r3, r1, r5
 8007ce2:	5dc7      	ldrb	r7, [r0, r7]
 8007ce4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007ce8:	462f      	mov	r7, r5
 8007cea:	42bb      	cmp	r3, r7
 8007cec:	460d      	mov	r5, r1
 8007cee:	d9f4      	bls.n	8007cda <_printf_i+0x11a>
 8007cf0:	2b08      	cmp	r3, #8
 8007cf2:	d10b      	bne.n	8007d0c <_printf_i+0x14c>
 8007cf4:	6823      	ldr	r3, [r4, #0]
 8007cf6:	07df      	lsls	r7, r3, #31
 8007cf8:	d508      	bpl.n	8007d0c <_printf_i+0x14c>
 8007cfa:	6923      	ldr	r3, [r4, #16]
 8007cfc:	6861      	ldr	r1, [r4, #4]
 8007cfe:	4299      	cmp	r1, r3
 8007d00:	bfde      	ittt	le
 8007d02:	2330      	movle	r3, #48	; 0x30
 8007d04:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007d08:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007d0c:	1b92      	subs	r2, r2, r6
 8007d0e:	6122      	str	r2, [r4, #16]
 8007d10:	f8cd a000 	str.w	sl, [sp]
 8007d14:	464b      	mov	r3, r9
 8007d16:	aa03      	add	r2, sp, #12
 8007d18:	4621      	mov	r1, r4
 8007d1a:	4640      	mov	r0, r8
 8007d1c:	f7ff fee2 	bl	8007ae4 <_printf_common>
 8007d20:	3001      	adds	r0, #1
 8007d22:	d14c      	bne.n	8007dbe <_printf_i+0x1fe>
 8007d24:	f04f 30ff 	mov.w	r0, #4294967295
 8007d28:	b004      	add	sp, #16
 8007d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d2e:	4835      	ldr	r0, [pc, #212]	; (8007e04 <_printf_i+0x244>)
 8007d30:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007d34:	6823      	ldr	r3, [r4, #0]
 8007d36:	680e      	ldr	r6, [r1, #0]
 8007d38:	061f      	lsls	r7, r3, #24
 8007d3a:	f856 5b04 	ldr.w	r5, [r6], #4
 8007d3e:	600e      	str	r6, [r1, #0]
 8007d40:	d514      	bpl.n	8007d6c <_printf_i+0x1ac>
 8007d42:	07d9      	lsls	r1, r3, #31
 8007d44:	bf44      	itt	mi
 8007d46:	f043 0320 	orrmi.w	r3, r3, #32
 8007d4a:	6023      	strmi	r3, [r4, #0]
 8007d4c:	b91d      	cbnz	r5, 8007d56 <_printf_i+0x196>
 8007d4e:	6823      	ldr	r3, [r4, #0]
 8007d50:	f023 0320 	bic.w	r3, r3, #32
 8007d54:	6023      	str	r3, [r4, #0]
 8007d56:	2310      	movs	r3, #16
 8007d58:	e7b0      	b.n	8007cbc <_printf_i+0xfc>
 8007d5a:	6823      	ldr	r3, [r4, #0]
 8007d5c:	f043 0320 	orr.w	r3, r3, #32
 8007d60:	6023      	str	r3, [r4, #0]
 8007d62:	2378      	movs	r3, #120	; 0x78
 8007d64:	4828      	ldr	r0, [pc, #160]	; (8007e08 <_printf_i+0x248>)
 8007d66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007d6a:	e7e3      	b.n	8007d34 <_printf_i+0x174>
 8007d6c:	065e      	lsls	r6, r3, #25
 8007d6e:	bf48      	it	mi
 8007d70:	b2ad      	uxthmi	r5, r5
 8007d72:	e7e6      	b.n	8007d42 <_printf_i+0x182>
 8007d74:	4616      	mov	r6, r2
 8007d76:	e7bb      	b.n	8007cf0 <_printf_i+0x130>
 8007d78:	680b      	ldr	r3, [r1, #0]
 8007d7a:	6826      	ldr	r6, [r4, #0]
 8007d7c:	6960      	ldr	r0, [r4, #20]
 8007d7e:	1d1d      	adds	r5, r3, #4
 8007d80:	600d      	str	r5, [r1, #0]
 8007d82:	0635      	lsls	r5, r6, #24
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	d501      	bpl.n	8007d8c <_printf_i+0x1cc>
 8007d88:	6018      	str	r0, [r3, #0]
 8007d8a:	e002      	b.n	8007d92 <_printf_i+0x1d2>
 8007d8c:	0671      	lsls	r1, r6, #25
 8007d8e:	d5fb      	bpl.n	8007d88 <_printf_i+0x1c8>
 8007d90:	8018      	strh	r0, [r3, #0]
 8007d92:	2300      	movs	r3, #0
 8007d94:	6123      	str	r3, [r4, #16]
 8007d96:	4616      	mov	r6, r2
 8007d98:	e7ba      	b.n	8007d10 <_printf_i+0x150>
 8007d9a:	680b      	ldr	r3, [r1, #0]
 8007d9c:	1d1a      	adds	r2, r3, #4
 8007d9e:	600a      	str	r2, [r1, #0]
 8007da0:	681e      	ldr	r6, [r3, #0]
 8007da2:	6862      	ldr	r2, [r4, #4]
 8007da4:	2100      	movs	r1, #0
 8007da6:	4630      	mov	r0, r6
 8007da8:	f7f8 fa1a 	bl	80001e0 <memchr>
 8007dac:	b108      	cbz	r0, 8007db2 <_printf_i+0x1f2>
 8007dae:	1b80      	subs	r0, r0, r6
 8007db0:	6060      	str	r0, [r4, #4]
 8007db2:	6863      	ldr	r3, [r4, #4]
 8007db4:	6123      	str	r3, [r4, #16]
 8007db6:	2300      	movs	r3, #0
 8007db8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007dbc:	e7a8      	b.n	8007d10 <_printf_i+0x150>
 8007dbe:	6923      	ldr	r3, [r4, #16]
 8007dc0:	4632      	mov	r2, r6
 8007dc2:	4649      	mov	r1, r9
 8007dc4:	4640      	mov	r0, r8
 8007dc6:	47d0      	blx	sl
 8007dc8:	3001      	adds	r0, #1
 8007dca:	d0ab      	beq.n	8007d24 <_printf_i+0x164>
 8007dcc:	6823      	ldr	r3, [r4, #0]
 8007dce:	079b      	lsls	r3, r3, #30
 8007dd0:	d413      	bmi.n	8007dfa <_printf_i+0x23a>
 8007dd2:	68e0      	ldr	r0, [r4, #12]
 8007dd4:	9b03      	ldr	r3, [sp, #12]
 8007dd6:	4298      	cmp	r0, r3
 8007dd8:	bfb8      	it	lt
 8007dda:	4618      	movlt	r0, r3
 8007ddc:	e7a4      	b.n	8007d28 <_printf_i+0x168>
 8007dde:	2301      	movs	r3, #1
 8007de0:	4632      	mov	r2, r6
 8007de2:	4649      	mov	r1, r9
 8007de4:	4640      	mov	r0, r8
 8007de6:	47d0      	blx	sl
 8007de8:	3001      	adds	r0, #1
 8007dea:	d09b      	beq.n	8007d24 <_printf_i+0x164>
 8007dec:	3501      	adds	r5, #1
 8007dee:	68e3      	ldr	r3, [r4, #12]
 8007df0:	9903      	ldr	r1, [sp, #12]
 8007df2:	1a5b      	subs	r3, r3, r1
 8007df4:	42ab      	cmp	r3, r5
 8007df6:	dcf2      	bgt.n	8007dde <_printf_i+0x21e>
 8007df8:	e7eb      	b.n	8007dd2 <_printf_i+0x212>
 8007dfa:	2500      	movs	r5, #0
 8007dfc:	f104 0619 	add.w	r6, r4, #25
 8007e00:	e7f5      	b.n	8007dee <_printf_i+0x22e>
 8007e02:	bf00      	nop
 8007e04:	0800bf6a 	.word	0x0800bf6a
 8007e08:	0800bf7b 	.word	0x0800bf7b

08007e0c <_scanf_float>:
 8007e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e10:	b087      	sub	sp, #28
 8007e12:	4617      	mov	r7, r2
 8007e14:	9303      	str	r3, [sp, #12]
 8007e16:	688b      	ldr	r3, [r1, #8]
 8007e18:	1e5a      	subs	r2, r3, #1
 8007e1a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007e1e:	bf83      	ittte	hi
 8007e20:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007e24:	195b      	addhi	r3, r3, r5
 8007e26:	9302      	strhi	r3, [sp, #8]
 8007e28:	2300      	movls	r3, #0
 8007e2a:	bf86      	itte	hi
 8007e2c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007e30:	608b      	strhi	r3, [r1, #8]
 8007e32:	9302      	strls	r3, [sp, #8]
 8007e34:	680b      	ldr	r3, [r1, #0]
 8007e36:	468b      	mov	fp, r1
 8007e38:	2500      	movs	r5, #0
 8007e3a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007e3e:	f84b 3b1c 	str.w	r3, [fp], #28
 8007e42:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007e46:	4680      	mov	r8, r0
 8007e48:	460c      	mov	r4, r1
 8007e4a:	465e      	mov	r6, fp
 8007e4c:	46aa      	mov	sl, r5
 8007e4e:	46a9      	mov	r9, r5
 8007e50:	9501      	str	r5, [sp, #4]
 8007e52:	68a2      	ldr	r2, [r4, #8]
 8007e54:	b152      	cbz	r2, 8007e6c <_scanf_float+0x60>
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	2b4e      	cmp	r3, #78	; 0x4e
 8007e5c:	d864      	bhi.n	8007f28 <_scanf_float+0x11c>
 8007e5e:	2b40      	cmp	r3, #64	; 0x40
 8007e60:	d83c      	bhi.n	8007edc <_scanf_float+0xd0>
 8007e62:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007e66:	b2c8      	uxtb	r0, r1
 8007e68:	280e      	cmp	r0, #14
 8007e6a:	d93a      	bls.n	8007ee2 <_scanf_float+0xd6>
 8007e6c:	f1b9 0f00 	cmp.w	r9, #0
 8007e70:	d003      	beq.n	8007e7a <_scanf_float+0x6e>
 8007e72:	6823      	ldr	r3, [r4, #0]
 8007e74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e78:	6023      	str	r3, [r4, #0]
 8007e7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007e7e:	f1ba 0f01 	cmp.w	sl, #1
 8007e82:	f200 8113 	bhi.w	80080ac <_scanf_float+0x2a0>
 8007e86:	455e      	cmp	r6, fp
 8007e88:	f200 8105 	bhi.w	8008096 <_scanf_float+0x28a>
 8007e8c:	2501      	movs	r5, #1
 8007e8e:	4628      	mov	r0, r5
 8007e90:	b007      	add	sp, #28
 8007e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e96:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007e9a:	2a0d      	cmp	r2, #13
 8007e9c:	d8e6      	bhi.n	8007e6c <_scanf_float+0x60>
 8007e9e:	a101      	add	r1, pc, #4	; (adr r1, 8007ea4 <_scanf_float+0x98>)
 8007ea0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007ea4:	08007fe3 	.word	0x08007fe3
 8007ea8:	08007e6d 	.word	0x08007e6d
 8007eac:	08007e6d 	.word	0x08007e6d
 8007eb0:	08007e6d 	.word	0x08007e6d
 8007eb4:	08008043 	.word	0x08008043
 8007eb8:	0800801b 	.word	0x0800801b
 8007ebc:	08007e6d 	.word	0x08007e6d
 8007ec0:	08007e6d 	.word	0x08007e6d
 8007ec4:	08007ff1 	.word	0x08007ff1
 8007ec8:	08007e6d 	.word	0x08007e6d
 8007ecc:	08007e6d 	.word	0x08007e6d
 8007ed0:	08007e6d 	.word	0x08007e6d
 8007ed4:	08007e6d 	.word	0x08007e6d
 8007ed8:	08007fa9 	.word	0x08007fa9
 8007edc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007ee0:	e7db      	b.n	8007e9a <_scanf_float+0x8e>
 8007ee2:	290e      	cmp	r1, #14
 8007ee4:	d8c2      	bhi.n	8007e6c <_scanf_float+0x60>
 8007ee6:	a001      	add	r0, pc, #4	; (adr r0, 8007eec <_scanf_float+0xe0>)
 8007ee8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007eec:	08007f9b 	.word	0x08007f9b
 8007ef0:	08007e6d 	.word	0x08007e6d
 8007ef4:	08007f9b 	.word	0x08007f9b
 8007ef8:	0800802f 	.word	0x0800802f
 8007efc:	08007e6d 	.word	0x08007e6d
 8007f00:	08007f49 	.word	0x08007f49
 8007f04:	08007f85 	.word	0x08007f85
 8007f08:	08007f85 	.word	0x08007f85
 8007f0c:	08007f85 	.word	0x08007f85
 8007f10:	08007f85 	.word	0x08007f85
 8007f14:	08007f85 	.word	0x08007f85
 8007f18:	08007f85 	.word	0x08007f85
 8007f1c:	08007f85 	.word	0x08007f85
 8007f20:	08007f85 	.word	0x08007f85
 8007f24:	08007f85 	.word	0x08007f85
 8007f28:	2b6e      	cmp	r3, #110	; 0x6e
 8007f2a:	d809      	bhi.n	8007f40 <_scanf_float+0x134>
 8007f2c:	2b60      	cmp	r3, #96	; 0x60
 8007f2e:	d8b2      	bhi.n	8007e96 <_scanf_float+0x8a>
 8007f30:	2b54      	cmp	r3, #84	; 0x54
 8007f32:	d077      	beq.n	8008024 <_scanf_float+0x218>
 8007f34:	2b59      	cmp	r3, #89	; 0x59
 8007f36:	d199      	bne.n	8007e6c <_scanf_float+0x60>
 8007f38:	2d07      	cmp	r5, #7
 8007f3a:	d197      	bne.n	8007e6c <_scanf_float+0x60>
 8007f3c:	2508      	movs	r5, #8
 8007f3e:	e029      	b.n	8007f94 <_scanf_float+0x188>
 8007f40:	2b74      	cmp	r3, #116	; 0x74
 8007f42:	d06f      	beq.n	8008024 <_scanf_float+0x218>
 8007f44:	2b79      	cmp	r3, #121	; 0x79
 8007f46:	e7f6      	b.n	8007f36 <_scanf_float+0x12a>
 8007f48:	6821      	ldr	r1, [r4, #0]
 8007f4a:	05c8      	lsls	r0, r1, #23
 8007f4c:	d51a      	bpl.n	8007f84 <_scanf_float+0x178>
 8007f4e:	9b02      	ldr	r3, [sp, #8]
 8007f50:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007f54:	6021      	str	r1, [r4, #0]
 8007f56:	f109 0901 	add.w	r9, r9, #1
 8007f5a:	b11b      	cbz	r3, 8007f64 <_scanf_float+0x158>
 8007f5c:	3b01      	subs	r3, #1
 8007f5e:	3201      	adds	r2, #1
 8007f60:	9302      	str	r3, [sp, #8]
 8007f62:	60a2      	str	r2, [r4, #8]
 8007f64:	68a3      	ldr	r3, [r4, #8]
 8007f66:	3b01      	subs	r3, #1
 8007f68:	60a3      	str	r3, [r4, #8]
 8007f6a:	6923      	ldr	r3, [r4, #16]
 8007f6c:	3301      	adds	r3, #1
 8007f6e:	6123      	str	r3, [r4, #16]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	3b01      	subs	r3, #1
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	607b      	str	r3, [r7, #4]
 8007f78:	f340 8084 	ble.w	8008084 <_scanf_float+0x278>
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	3301      	adds	r3, #1
 8007f80:	603b      	str	r3, [r7, #0]
 8007f82:	e766      	b.n	8007e52 <_scanf_float+0x46>
 8007f84:	eb1a 0f05 	cmn.w	sl, r5
 8007f88:	f47f af70 	bne.w	8007e6c <_scanf_float+0x60>
 8007f8c:	6822      	ldr	r2, [r4, #0]
 8007f8e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007f92:	6022      	str	r2, [r4, #0]
 8007f94:	f806 3b01 	strb.w	r3, [r6], #1
 8007f98:	e7e4      	b.n	8007f64 <_scanf_float+0x158>
 8007f9a:	6822      	ldr	r2, [r4, #0]
 8007f9c:	0610      	lsls	r0, r2, #24
 8007f9e:	f57f af65 	bpl.w	8007e6c <_scanf_float+0x60>
 8007fa2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007fa6:	e7f4      	b.n	8007f92 <_scanf_float+0x186>
 8007fa8:	f1ba 0f00 	cmp.w	sl, #0
 8007fac:	d10e      	bne.n	8007fcc <_scanf_float+0x1c0>
 8007fae:	f1b9 0f00 	cmp.w	r9, #0
 8007fb2:	d10e      	bne.n	8007fd2 <_scanf_float+0x1c6>
 8007fb4:	6822      	ldr	r2, [r4, #0]
 8007fb6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007fba:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007fbe:	d108      	bne.n	8007fd2 <_scanf_float+0x1c6>
 8007fc0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007fc4:	6022      	str	r2, [r4, #0]
 8007fc6:	f04f 0a01 	mov.w	sl, #1
 8007fca:	e7e3      	b.n	8007f94 <_scanf_float+0x188>
 8007fcc:	f1ba 0f02 	cmp.w	sl, #2
 8007fd0:	d055      	beq.n	800807e <_scanf_float+0x272>
 8007fd2:	2d01      	cmp	r5, #1
 8007fd4:	d002      	beq.n	8007fdc <_scanf_float+0x1d0>
 8007fd6:	2d04      	cmp	r5, #4
 8007fd8:	f47f af48 	bne.w	8007e6c <_scanf_float+0x60>
 8007fdc:	3501      	adds	r5, #1
 8007fde:	b2ed      	uxtb	r5, r5
 8007fe0:	e7d8      	b.n	8007f94 <_scanf_float+0x188>
 8007fe2:	f1ba 0f01 	cmp.w	sl, #1
 8007fe6:	f47f af41 	bne.w	8007e6c <_scanf_float+0x60>
 8007fea:	f04f 0a02 	mov.w	sl, #2
 8007fee:	e7d1      	b.n	8007f94 <_scanf_float+0x188>
 8007ff0:	b97d      	cbnz	r5, 8008012 <_scanf_float+0x206>
 8007ff2:	f1b9 0f00 	cmp.w	r9, #0
 8007ff6:	f47f af3c 	bne.w	8007e72 <_scanf_float+0x66>
 8007ffa:	6822      	ldr	r2, [r4, #0]
 8007ffc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008000:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008004:	f47f af39 	bne.w	8007e7a <_scanf_float+0x6e>
 8008008:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800800c:	6022      	str	r2, [r4, #0]
 800800e:	2501      	movs	r5, #1
 8008010:	e7c0      	b.n	8007f94 <_scanf_float+0x188>
 8008012:	2d03      	cmp	r5, #3
 8008014:	d0e2      	beq.n	8007fdc <_scanf_float+0x1d0>
 8008016:	2d05      	cmp	r5, #5
 8008018:	e7de      	b.n	8007fd8 <_scanf_float+0x1cc>
 800801a:	2d02      	cmp	r5, #2
 800801c:	f47f af26 	bne.w	8007e6c <_scanf_float+0x60>
 8008020:	2503      	movs	r5, #3
 8008022:	e7b7      	b.n	8007f94 <_scanf_float+0x188>
 8008024:	2d06      	cmp	r5, #6
 8008026:	f47f af21 	bne.w	8007e6c <_scanf_float+0x60>
 800802a:	2507      	movs	r5, #7
 800802c:	e7b2      	b.n	8007f94 <_scanf_float+0x188>
 800802e:	6822      	ldr	r2, [r4, #0]
 8008030:	0591      	lsls	r1, r2, #22
 8008032:	f57f af1b 	bpl.w	8007e6c <_scanf_float+0x60>
 8008036:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800803a:	6022      	str	r2, [r4, #0]
 800803c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008040:	e7a8      	b.n	8007f94 <_scanf_float+0x188>
 8008042:	6822      	ldr	r2, [r4, #0]
 8008044:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008048:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800804c:	d006      	beq.n	800805c <_scanf_float+0x250>
 800804e:	0550      	lsls	r0, r2, #21
 8008050:	f57f af0c 	bpl.w	8007e6c <_scanf_float+0x60>
 8008054:	f1b9 0f00 	cmp.w	r9, #0
 8008058:	f43f af0f 	beq.w	8007e7a <_scanf_float+0x6e>
 800805c:	0591      	lsls	r1, r2, #22
 800805e:	bf58      	it	pl
 8008060:	9901      	ldrpl	r1, [sp, #4]
 8008062:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008066:	bf58      	it	pl
 8008068:	eba9 0101 	subpl.w	r1, r9, r1
 800806c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008070:	bf58      	it	pl
 8008072:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008076:	6022      	str	r2, [r4, #0]
 8008078:	f04f 0900 	mov.w	r9, #0
 800807c:	e78a      	b.n	8007f94 <_scanf_float+0x188>
 800807e:	f04f 0a03 	mov.w	sl, #3
 8008082:	e787      	b.n	8007f94 <_scanf_float+0x188>
 8008084:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008088:	4639      	mov	r1, r7
 800808a:	4640      	mov	r0, r8
 800808c:	4798      	blx	r3
 800808e:	2800      	cmp	r0, #0
 8008090:	f43f aedf 	beq.w	8007e52 <_scanf_float+0x46>
 8008094:	e6ea      	b.n	8007e6c <_scanf_float+0x60>
 8008096:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800809a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800809e:	463a      	mov	r2, r7
 80080a0:	4640      	mov	r0, r8
 80080a2:	4798      	blx	r3
 80080a4:	6923      	ldr	r3, [r4, #16]
 80080a6:	3b01      	subs	r3, #1
 80080a8:	6123      	str	r3, [r4, #16]
 80080aa:	e6ec      	b.n	8007e86 <_scanf_float+0x7a>
 80080ac:	1e6b      	subs	r3, r5, #1
 80080ae:	2b06      	cmp	r3, #6
 80080b0:	d825      	bhi.n	80080fe <_scanf_float+0x2f2>
 80080b2:	2d02      	cmp	r5, #2
 80080b4:	d836      	bhi.n	8008124 <_scanf_float+0x318>
 80080b6:	455e      	cmp	r6, fp
 80080b8:	f67f aee8 	bls.w	8007e8c <_scanf_float+0x80>
 80080bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80080c0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80080c4:	463a      	mov	r2, r7
 80080c6:	4640      	mov	r0, r8
 80080c8:	4798      	blx	r3
 80080ca:	6923      	ldr	r3, [r4, #16]
 80080cc:	3b01      	subs	r3, #1
 80080ce:	6123      	str	r3, [r4, #16]
 80080d0:	e7f1      	b.n	80080b6 <_scanf_float+0x2aa>
 80080d2:	9802      	ldr	r0, [sp, #8]
 80080d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80080d8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80080dc:	9002      	str	r0, [sp, #8]
 80080de:	463a      	mov	r2, r7
 80080e0:	4640      	mov	r0, r8
 80080e2:	4798      	blx	r3
 80080e4:	6923      	ldr	r3, [r4, #16]
 80080e6:	3b01      	subs	r3, #1
 80080e8:	6123      	str	r3, [r4, #16]
 80080ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80080ee:	fa5f fa8a 	uxtb.w	sl, sl
 80080f2:	f1ba 0f02 	cmp.w	sl, #2
 80080f6:	d1ec      	bne.n	80080d2 <_scanf_float+0x2c6>
 80080f8:	3d03      	subs	r5, #3
 80080fa:	b2ed      	uxtb	r5, r5
 80080fc:	1b76      	subs	r6, r6, r5
 80080fe:	6823      	ldr	r3, [r4, #0]
 8008100:	05da      	lsls	r2, r3, #23
 8008102:	d52f      	bpl.n	8008164 <_scanf_float+0x358>
 8008104:	055b      	lsls	r3, r3, #21
 8008106:	d510      	bpl.n	800812a <_scanf_float+0x31e>
 8008108:	455e      	cmp	r6, fp
 800810a:	f67f aebf 	bls.w	8007e8c <_scanf_float+0x80>
 800810e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008112:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008116:	463a      	mov	r2, r7
 8008118:	4640      	mov	r0, r8
 800811a:	4798      	blx	r3
 800811c:	6923      	ldr	r3, [r4, #16]
 800811e:	3b01      	subs	r3, #1
 8008120:	6123      	str	r3, [r4, #16]
 8008122:	e7f1      	b.n	8008108 <_scanf_float+0x2fc>
 8008124:	46aa      	mov	sl, r5
 8008126:	9602      	str	r6, [sp, #8]
 8008128:	e7df      	b.n	80080ea <_scanf_float+0x2de>
 800812a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800812e:	6923      	ldr	r3, [r4, #16]
 8008130:	2965      	cmp	r1, #101	; 0x65
 8008132:	f103 33ff 	add.w	r3, r3, #4294967295
 8008136:	f106 35ff 	add.w	r5, r6, #4294967295
 800813a:	6123      	str	r3, [r4, #16]
 800813c:	d00c      	beq.n	8008158 <_scanf_float+0x34c>
 800813e:	2945      	cmp	r1, #69	; 0x45
 8008140:	d00a      	beq.n	8008158 <_scanf_float+0x34c>
 8008142:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008146:	463a      	mov	r2, r7
 8008148:	4640      	mov	r0, r8
 800814a:	4798      	blx	r3
 800814c:	6923      	ldr	r3, [r4, #16]
 800814e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008152:	3b01      	subs	r3, #1
 8008154:	1eb5      	subs	r5, r6, #2
 8008156:	6123      	str	r3, [r4, #16]
 8008158:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800815c:	463a      	mov	r2, r7
 800815e:	4640      	mov	r0, r8
 8008160:	4798      	blx	r3
 8008162:	462e      	mov	r6, r5
 8008164:	6825      	ldr	r5, [r4, #0]
 8008166:	f015 0510 	ands.w	r5, r5, #16
 800816a:	d158      	bne.n	800821e <_scanf_float+0x412>
 800816c:	7035      	strb	r5, [r6, #0]
 800816e:	6823      	ldr	r3, [r4, #0]
 8008170:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008174:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008178:	d11c      	bne.n	80081b4 <_scanf_float+0x3a8>
 800817a:	9b01      	ldr	r3, [sp, #4]
 800817c:	454b      	cmp	r3, r9
 800817e:	eba3 0209 	sub.w	r2, r3, r9
 8008182:	d124      	bne.n	80081ce <_scanf_float+0x3c2>
 8008184:	2200      	movs	r2, #0
 8008186:	4659      	mov	r1, fp
 8008188:	4640      	mov	r0, r8
 800818a:	f000 ff13 	bl	8008fb4 <_strtod_r>
 800818e:	9b03      	ldr	r3, [sp, #12]
 8008190:	6821      	ldr	r1, [r4, #0]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f011 0f02 	tst.w	r1, #2
 8008198:	ec57 6b10 	vmov	r6, r7, d0
 800819c:	f103 0204 	add.w	r2, r3, #4
 80081a0:	d020      	beq.n	80081e4 <_scanf_float+0x3d8>
 80081a2:	9903      	ldr	r1, [sp, #12]
 80081a4:	600a      	str	r2, [r1, #0]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	e9c3 6700 	strd	r6, r7, [r3]
 80081ac:	68e3      	ldr	r3, [r4, #12]
 80081ae:	3301      	adds	r3, #1
 80081b0:	60e3      	str	r3, [r4, #12]
 80081b2:	e66c      	b.n	8007e8e <_scanf_float+0x82>
 80081b4:	9b04      	ldr	r3, [sp, #16]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d0e4      	beq.n	8008184 <_scanf_float+0x378>
 80081ba:	9905      	ldr	r1, [sp, #20]
 80081bc:	230a      	movs	r3, #10
 80081be:	462a      	mov	r2, r5
 80081c0:	3101      	adds	r1, #1
 80081c2:	4640      	mov	r0, r8
 80081c4:	f000 ff80 	bl	80090c8 <_strtol_r>
 80081c8:	9b04      	ldr	r3, [sp, #16]
 80081ca:	9e05      	ldr	r6, [sp, #20]
 80081cc:	1ac2      	subs	r2, r0, r3
 80081ce:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80081d2:	429e      	cmp	r6, r3
 80081d4:	bf28      	it	cs
 80081d6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80081da:	4912      	ldr	r1, [pc, #72]	; (8008224 <_scanf_float+0x418>)
 80081dc:	4630      	mov	r0, r6
 80081de:	f000 f8a1 	bl	8008324 <siprintf>
 80081e2:	e7cf      	b.n	8008184 <_scanf_float+0x378>
 80081e4:	f011 0f04 	tst.w	r1, #4
 80081e8:	9903      	ldr	r1, [sp, #12]
 80081ea:	600a      	str	r2, [r1, #0]
 80081ec:	d1db      	bne.n	80081a6 <_scanf_float+0x39a>
 80081ee:	f8d3 8000 	ldr.w	r8, [r3]
 80081f2:	ee10 2a10 	vmov	r2, s0
 80081f6:	ee10 0a10 	vmov	r0, s0
 80081fa:	463b      	mov	r3, r7
 80081fc:	4639      	mov	r1, r7
 80081fe:	f7f8 fc95 	bl	8000b2c <__aeabi_dcmpun>
 8008202:	b128      	cbz	r0, 8008210 <_scanf_float+0x404>
 8008204:	4808      	ldr	r0, [pc, #32]	; (8008228 <_scanf_float+0x41c>)
 8008206:	f000 f887 	bl	8008318 <nanf>
 800820a:	ed88 0a00 	vstr	s0, [r8]
 800820e:	e7cd      	b.n	80081ac <_scanf_float+0x3a0>
 8008210:	4630      	mov	r0, r6
 8008212:	4639      	mov	r1, r7
 8008214:	f7f8 fce8 	bl	8000be8 <__aeabi_d2f>
 8008218:	f8c8 0000 	str.w	r0, [r8]
 800821c:	e7c6      	b.n	80081ac <_scanf_float+0x3a0>
 800821e:	2500      	movs	r5, #0
 8008220:	e635      	b.n	8007e8e <_scanf_float+0x82>
 8008222:	bf00      	nop
 8008224:	0800bf8c 	.word	0x0800bf8c
 8008228:	0800c408 	.word	0x0800c408

0800822c <_puts_r>:
 800822c:	b570      	push	{r4, r5, r6, lr}
 800822e:	460e      	mov	r6, r1
 8008230:	4605      	mov	r5, r0
 8008232:	b118      	cbz	r0, 800823c <_puts_r+0x10>
 8008234:	6983      	ldr	r3, [r0, #24]
 8008236:	b90b      	cbnz	r3, 800823c <_puts_r+0x10>
 8008238:	f001 ff9c 	bl	800a174 <__sinit>
 800823c:	69ab      	ldr	r3, [r5, #24]
 800823e:	68ac      	ldr	r4, [r5, #8]
 8008240:	b913      	cbnz	r3, 8008248 <_puts_r+0x1c>
 8008242:	4628      	mov	r0, r5
 8008244:	f001 ff96 	bl	800a174 <__sinit>
 8008248:	4b2c      	ldr	r3, [pc, #176]	; (80082fc <_puts_r+0xd0>)
 800824a:	429c      	cmp	r4, r3
 800824c:	d120      	bne.n	8008290 <_puts_r+0x64>
 800824e:	686c      	ldr	r4, [r5, #4]
 8008250:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008252:	07db      	lsls	r3, r3, #31
 8008254:	d405      	bmi.n	8008262 <_puts_r+0x36>
 8008256:	89a3      	ldrh	r3, [r4, #12]
 8008258:	0598      	lsls	r0, r3, #22
 800825a:	d402      	bmi.n	8008262 <_puts_r+0x36>
 800825c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800825e:	f002 fb9a 	bl	800a996 <__retarget_lock_acquire_recursive>
 8008262:	89a3      	ldrh	r3, [r4, #12]
 8008264:	0719      	lsls	r1, r3, #28
 8008266:	d51d      	bpl.n	80082a4 <_puts_r+0x78>
 8008268:	6923      	ldr	r3, [r4, #16]
 800826a:	b1db      	cbz	r3, 80082a4 <_puts_r+0x78>
 800826c:	3e01      	subs	r6, #1
 800826e:	68a3      	ldr	r3, [r4, #8]
 8008270:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008274:	3b01      	subs	r3, #1
 8008276:	60a3      	str	r3, [r4, #8]
 8008278:	bb39      	cbnz	r1, 80082ca <_puts_r+0x9e>
 800827a:	2b00      	cmp	r3, #0
 800827c:	da38      	bge.n	80082f0 <_puts_r+0xc4>
 800827e:	4622      	mov	r2, r4
 8008280:	210a      	movs	r1, #10
 8008282:	4628      	mov	r0, r5
 8008284:	f000 ff22 	bl	80090cc <__swbuf_r>
 8008288:	3001      	adds	r0, #1
 800828a:	d011      	beq.n	80082b0 <_puts_r+0x84>
 800828c:	250a      	movs	r5, #10
 800828e:	e011      	b.n	80082b4 <_puts_r+0x88>
 8008290:	4b1b      	ldr	r3, [pc, #108]	; (8008300 <_puts_r+0xd4>)
 8008292:	429c      	cmp	r4, r3
 8008294:	d101      	bne.n	800829a <_puts_r+0x6e>
 8008296:	68ac      	ldr	r4, [r5, #8]
 8008298:	e7da      	b.n	8008250 <_puts_r+0x24>
 800829a:	4b1a      	ldr	r3, [pc, #104]	; (8008304 <_puts_r+0xd8>)
 800829c:	429c      	cmp	r4, r3
 800829e:	bf08      	it	eq
 80082a0:	68ec      	ldreq	r4, [r5, #12]
 80082a2:	e7d5      	b.n	8008250 <_puts_r+0x24>
 80082a4:	4621      	mov	r1, r4
 80082a6:	4628      	mov	r0, r5
 80082a8:	f000 ff62 	bl	8009170 <__swsetup_r>
 80082ac:	2800      	cmp	r0, #0
 80082ae:	d0dd      	beq.n	800826c <_puts_r+0x40>
 80082b0:	f04f 35ff 	mov.w	r5, #4294967295
 80082b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80082b6:	07da      	lsls	r2, r3, #31
 80082b8:	d405      	bmi.n	80082c6 <_puts_r+0x9a>
 80082ba:	89a3      	ldrh	r3, [r4, #12]
 80082bc:	059b      	lsls	r3, r3, #22
 80082be:	d402      	bmi.n	80082c6 <_puts_r+0x9a>
 80082c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082c2:	f002 fb69 	bl	800a998 <__retarget_lock_release_recursive>
 80082c6:	4628      	mov	r0, r5
 80082c8:	bd70      	pop	{r4, r5, r6, pc}
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	da04      	bge.n	80082d8 <_puts_r+0xac>
 80082ce:	69a2      	ldr	r2, [r4, #24]
 80082d0:	429a      	cmp	r2, r3
 80082d2:	dc06      	bgt.n	80082e2 <_puts_r+0xb6>
 80082d4:	290a      	cmp	r1, #10
 80082d6:	d004      	beq.n	80082e2 <_puts_r+0xb6>
 80082d8:	6823      	ldr	r3, [r4, #0]
 80082da:	1c5a      	adds	r2, r3, #1
 80082dc:	6022      	str	r2, [r4, #0]
 80082de:	7019      	strb	r1, [r3, #0]
 80082e0:	e7c5      	b.n	800826e <_puts_r+0x42>
 80082e2:	4622      	mov	r2, r4
 80082e4:	4628      	mov	r0, r5
 80082e6:	f000 fef1 	bl	80090cc <__swbuf_r>
 80082ea:	3001      	adds	r0, #1
 80082ec:	d1bf      	bne.n	800826e <_puts_r+0x42>
 80082ee:	e7df      	b.n	80082b0 <_puts_r+0x84>
 80082f0:	6823      	ldr	r3, [r4, #0]
 80082f2:	250a      	movs	r5, #10
 80082f4:	1c5a      	adds	r2, r3, #1
 80082f6:	6022      	str	r2, [r4, #0]
 80082f8:	701d      	strb	r5, [r3, #0]
 80082fa:	e7db      	b.n	80082b4 <_puts_r+0x88>
 80082fc:	0800c1a0 	.word	0x0800c1a0
 8008300:	0800c1c0 	.word	0x0800c1c0
 8008304:	0800c180 	.word	0x0800c180

08008308 <puts>:
 8008308:	4b02      	ldr	r3, [pc, #8]	; (8008314 <puts+0xc>)
 800830a:	4601      	mov	r1, r0
 800830c:	6818      	ldr	r0, [r3, #0]
 800830e:	f7ff bf8d 	b.w	800822c <_puts_r>
 8008312:	bf00      	nop
 8008314:	2000000c 	.word	0x2000000c

08008318 <nanf>:
 8008318:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008320 <nanf+0x8>
 800831c:	4770      	bx	lr
 800831e:	bf00      	nop
 8008320:	7fc00000 	.word	0x7fc00000

08008324 <siprintf>:
 8008324:	b40e      	push	{r1, r2, r3}
 8008326:	b500      	push	{lr}
 8008328:	b09c      	sub	sp, #112	; 0x70
 800832a:	ab1d      	add	r3, sp, #116	; 0x74
 800832c:	9002      	str	r0, [sp, #8]
 800832e:	9006      	str	r0, [sp, #24]
 8008330:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008334:	4809      	ldr	r0, [pc, #36]	; (800835c <siprintf+0x38>)
 8008336:	9107      	str	r1, [sp, #28]
 8008338:	9104      	str	r1, [sp, #16]
 800833a:	4909      	ldr	r1, [pc, #36]	; (8008360 <siprintf+0x3c>)
 800833c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008340:	9105      	str	r1, [sp, #20]
 8008342:	6800      	ldr	r0, [r0, #0]
 8008344:	9301      	str	r3, [sp, #4]
 8008346:	a902      	add	r1, sp, #8
 8008348:	f003 f976 	bl	800b638 <_svfiprintf_r>
 800834c:	9b02      	ldr	r3, [sp, #8]
 800834e:	2200      	movs	r2, #0
 8008350:	701a      	strb	r2, [r3, #0]
 8008352:	b01c      	add	sp, #112	; 0x70
 8008354:	f85d eb04 	ldr.w	lr, [sp], #4
 8008358:	b003      	add	sp, #12
 800835a:	4770      	bx	lr
 800835c:	2000000c 	.word	0x2000000c
 8008360:	ffff0208 	.word	0xffff0208

08008364 <sulp>:
 8008364:	b570      	push	{r4, r5, r6, lr}
 8008366:	4604      	mov	r4, r0
 8008368:	460d      	mov	r5, r1
 800836a:	ec45 4b10 	vmov	d0, r4, r5
 800836e:	4616      	mov	r6, r2
 8008370:	f002 fefe 	bl	800b170 <__ulp>
 8008374:	ec51 0b10 	vmov	r0, r1, d0
 8008378:	b17e      	cbz	r6, 800839a <sulp+0x36>
 800837a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800837e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008382:	2b00      	cmp	r3, #0
 8008384:	dd09      	ble.n	800839a <sulp+0x36>
 8008386:	051b      	lsls	r3, r3, #20
 8008388:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800838c:	2400      	movs	r4, #0
 800838e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008392:	4622      	mov	r2, r4
 8008394:	462b      	mov	r3, r5
 8008396:	f7f8 f92f 	bl	80005f8 <__aeabi_dmul>
 800839a:	bd70      	pop	{r4, r5, r6, pc}
 800839c:	0000      	movs	r0, r0
	...

080083a0 <_strtod_l>:
 80083a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083a4:	b0a3      	sub	sp, #140	; 0x8c
 80083a6:	461f      	mov	r7, r3
 80083a8:	2300      	movs	r3, #0
 80083aa:	931e      	str	r3, [sp, #120]	; 0x78
 80083ac:	4ba4      	ldr	r3, [pc, #656]	; (8008640 <_strtod_l+0x2a0>)
 80083ae:	9219      	str	r2, [sp, #100]	; 0x64
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	9307      	str	r3, [sp, #28]
 80083b4:	4604      	mov	r4, r0
 80083b6:	4618      	mov	r0, r3
 80083b8:	4688      	mov	r8, r1
 80083ba:	f7f7 ff09 	bl	80001d0 <strlen>
 80083be:	f04f 0a00 	mov.w	sl, #0
 80083c2:	4605      	mov	r5, r0
 80083c4:	f04f 0b00 	mov.w	fp, #0
 80083c8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80083cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80083ce:	781a      	ldrb	r2, [r3, #0]
 80083d0:	2a2b      	cmp	r2, #43	; 0x2b
 80083d2:	d04c      	beq.n	800846e <_strtod_l+0xce>
 80083d4:	d839      	bhi.n	800844a <_strtod_l+0xaa>
 80083d6:	2a0d      	cmp	r2, #13
 80083d8:	d832      	bhi.n	8008440 <_strtod_l+0xa0>
 80083da:	2a08      	cmp	r2, #8
 80083dc:	d832      	bhi.n	8008444 <_strtod_l+0xa4>
 80083de:	2a00      	cmp	r2, #0
 80083e0:	d03c      	beq.n	800845c <_strtod_l+0xbc>
 80083e2:	2300      	movs	r3, #0
 80083e4:	930e      	str	r3, [sp, #56]	; 0x38
 80083e6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80083e8:	7833      	ldrb	r3, [r6, #0]
 80083ea:	2b30      	cmp	r3, #48	; 0x30
 80083ec:	f040 80b4 	bne.w	8008558 <_strtod_l+0x1b8>
 80083f0:	7873      	ldrb	r3, [r6, #1]
 80083f2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80083f6:	2b58      	cmp	r3, #88	; 0x58
 80083f8:	d16c      	bne.n	80084d4 <_strtod_l+0x134>
 80083fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083fc:	9301      	str	r3, [sp, #4]
 80083fe:	ab1e      	add	r3, sp, #120	; 0x78
 8008400:	9702      	str	r7, [sp, #8]
 8008402:	9300      	str	r3, [sp, #0]
 8008404:	4a8f      	ldr	r2, [pc, #572]	; (8008644 <_strtod_l+0x2a4>)
 8008406:	ab1f      	add	r3, sp, #124	; 0x7c
 8008408:	a91d      	add	r1, sp, #116	; 0x74
 800840a:	4620      	mov	r0, r4
 800840c:	f001 ffb6 	bl	800a37c <__gethex>
 8008410:	f010 0707 	ands.w	r7, r0, #7
 8008414:	4605      	mov	r5, r0
 8008416:	d005      	beq.n	8008424 <_strtod_l+0x84>
 8008418:	2f06      	cmp	r7, #6
 800841a:	d12a      	bne.n	8008472 <_strtod_l+0xd2>
 800841c:	3601      	adds	r6, #1
 800841e:	2300      	movs	r3, #0
 8008420:	961d      	str	r6, [sp, #116]	; 0x74
 8008422:	930e      	str	r3, [sp, #56]	; 0x38
 8008424:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008426:	2b00      	cmp	r3, #0
 8008428:	f040 8596 	bne.w	8008f58 <_strtod_l+0xbb8>
 800842c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800842e:	b1db      	cbz	r3, 8008468 <_strtod_l+0xc8>
 8008430:	4652      	mov	r2, sl
 8008432:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008436:	ec43 2b10 	vmov	d0, r2, r3
 800843a:	b023      	add	sp, #140	; 0x8c
 800843c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008440:	2a20      	cmp	r2, #32
 8008442:	d1ce      	bne.n	80083e2 <_strtod_l+0x42>
 8008444:	3301      	adds	r3, #1
 8008446:	931d      	str	r3, [sp, #116]	; 0x74
 8008448:	e7c0      	b.n	80083cc <_strtod_l+0x2c>
 800844a:	2a2d      	cmp	r2, #45	; 0x2d
 800844c:	d1c9      	bne.n	80083e2 <_strtod_l+0x42>
 800844e:	2201      	movs	r2, #1
 8008450:	920e      	str	r2, [sp, #56]	; 0x38
 8008452:	1c5a      	adds	r2, r3, #1
 8008454:	921d      	str	r2, [sp, #116]	; 0x74
 8008456:	785b      	ldrb	r3, [r3, #1]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d1c4      	bne.n	80083e6 <_strtod_l+0x46>
 800845c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800845e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008462:	2b00      	cmp	r3, #0
 8008464:	f040 8576 	bne.w	8008f54 <_strtod_l+0xbb4>
 8008468:	4652      	mov	r2, sl
 800846a:	465b      	mov	r3, fp
 800846c:	e7e3      	b.n	8008436 <_strtod_l+0x96>
 800846e:	2200      	movs	r2, #0
 8008470:	e7ee      	b.n	8008450 <_strtod_l+0xb0>
 8008472:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008474:	b13a      	cbz	r2, 8008486 <_strtod_l+0xe6>
 8008476:	2135      	movs	r1, #53	; 0x35
 8008478:	a820      	add	r0, sp, #128	; 0x80
 800847a:	f002 ff84 	bl	800b386 <__copybits>
 800847e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008480:	4620      	mov	r0, r4
 8008482:	f002 fb49 	bl	800ab18 <_Bfree>
 8008486:	3f01      	subs	r7, #1
 8008488:	2f05      	cmp	r7, #5
 800848a:	d807      	bhi.n	800849c <_strtod_l+0xfc>
 800848c:	e8df f007 	tbb	[pc, r7]
 8008490:	1d180b0e 	.word	0x1d180b0e
 8008494:	030e      	.short	0x030e
 8008496:	f04f 0b00 	mov.w	fp, #0
 800849a:	46da      	mov	sl, fp
 800849c:	0728      	lsls	r0, r5, #28
 800849e:	d5c1      	bpl.n	8008424 <_strtod_l+0x84>
 80084a0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80084a4:	e7be      	b.n	8008424 <_strtod_l+0x84>
 80084a6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80084aa:	e7f7      	b.n	800849c <_strtod_l+0xfc>
 80084ac:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 80084b0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80084b2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80084b6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80084ba:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80084be:	e7ed      	b.n	800849c <_strtod_l+0xfc>
 80084c0:	f8df b184 	ldr.w	fp, [pc, #388]	; 8008648 <_strtod_l+0x2a8>
 80084c4:	f04f 0a00 	mov.w	sl, #0
 80084c8:	e7e8      	b.n	800849c <_strtod_l+0xfc>
 80084ca:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80084ce:	f04f 3aff 	mov.w	sl, #4294967295
 80084d2:	e7e3      	b.n	800849c <_strtod_l+0xfc>
 80084d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80084d6:	1c5a      	adds	r2, r3, #1
 80084d8:	921d      	str	r2, [sp, #116]	; 0x74
 80084da:	785b      	ldrb	r3, [r3, #1]
 80084dc:	2b30      	cmp	r3, #48	; 0x30
 80084de:	d0f9      	beq.n	80084d4 <_strtod_l+0x134>
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d09f      	beq.n	8008424 <_strtod_l+0x84>
 80084e4:	2301      	movs	r3, #1
 80084e6:	f04f 0900 	mov.w	r9, #0
 80084ea:	9304      	str	r3, [sp, #16]
 80084ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80084ee:	930a      	str	r3, [sp, #40]	; 0x28
 80084f0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80084f4:	464f      	mov	r7, r9
 80084f6:	220a      	movs	r2, #10
 80084f8:	981d      	ldr	r0, [sp, #116]	; 0x74
 80084fa:	7806      	ldrb	r6, [r0, #0]
 80084fc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008500:	b2d9      	uxtb	r1, r3
 8008502:	2909      	cmp	r1, #9
 8008504:	d92a      	bls.n	800855c <_strtod_l+0x1bc>
 8008506:	9907      	ldr	r1, [sp, #28]
 8008508:	462a      	mov	r2, r5
 800850a:	f003 fb4c 	bl	800bba6 <strncmp>
 800850e:	b398      	cbz	r0, 8008578 <_strtod_l+0x1d8>
 8008510:	2000      	movs	r0, #0
 8008512:	4633      	mov	r3, r6
 8008514:	463d      	mov	r5, r7
 8008516:	9007      	str	r0, [sp, #28]
 8008518:	4602      	mov	r2, r0
 800851a:	2b65      	cmp	r3, #101	; 0x65
 800851c:	d001      	beq.n	8008522 <_strtod_l+0x182>
 800851e:	2b45      	cmp	r3, #69	; 0x45
 8008520:	d118      	bne.n	8008554 <_strtod_l+0x1b4>
 8008522:	b91d      	cbnz	r5, 800852c <_strtod_l+0x18c>
 8008524:	9b04      	ldr	r3, [sp, #16]
 8008526:	4303      	orrs	r3, r0
 8008528:	d098      	beq.n	800845c <_strtod_l+0xbc>
 800852a:	2500      	movs	r5, #0
 800852c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8008530:	f108 0301 	add.w	r3, r8, #1
 8008534:	931d      	str	r3, [sp, #116]	; 0x74
 8008536:	f898 3001 	ldrb.w	r3, [r8, #1]
 800853a:	2b2b      	cmp	r3, #43	; 0x2b
 800853c:	d075      	beq.n	800862a <_strtod_l+0x28a>
 800853e:	2b2d      	cmp	r3, #45	; 0x2d
 8008540:	d07b      	beq.n	800863a <_strtod_l+0x29a>
 8008542:	f04f 0c00 	mov.w	ip, #0
 8008546:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800854a:	2909      	cmp	r1, #9
 800854c:	f240 8082 	bls.w	8008654 <_strtod_l+0x2b4>
 8008550:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008554:	2600      	movs	r6, #0
 8008556:	e09d      	b.n	8008694 <_strtod_l+0x2f4>
 8008558:	2300      	movs	r3, #0
 800855a:	e7c4      	b.n	80084e6 <_strtod_l+0x146>
 800855c:	2f08      	cmp	r7, #8
 800855e:	bfd8      	it	le
 8008560:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008562:	f100 0001 	add.w	r0, r0, #1
 8008566:	bfda      	itte	le
 8008568:	fb02 3301 	mlale	r3, r2, r1, r3
 800856c:	9309      	strle	r3, [sp, #36]	; 0x24
 800856e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008572:	3701      	adds	r7, #1
 8008574:	901d      	str	r0, [sp, #116]	; 0x74
 8008576:	e7bf      	b.n	80084f8 <_strtod_l+0x158>
 8008578:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800857a:	195a      	adds	r2, r3, r5
 800857c:	921d      	str	r2, [sp, #116]	; 0x74
 800857e:	5d5b      	ldrb	r3, [r3, r5]
 8008580:	2f00      	cmp	r7, #0
 8008582:	d037      	beq.n	80085f4 <_strtod_l+0x254>
 8008584:	9007      	str	r0, [sp, #28]
 8008586:	463d      	mov	r5, r7
 8008588:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800858c:	2a09      	cmp	r2, #9
 800858e:	d912      	bls.n	80085b6 <_strtod_l+0x216>
 8008590:	2201      	movs	r2, #1
 8008592:	e7c2      	b.n	800851a <_strtod_l+0x17a>
 8008594:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008596:	1c5a      	adds	r2, r3, #1
 8008598:	921d      	str	r2, [sp, #116]	; 0x74
 800859a:	785b      	ldrb	r3, [r3, #1]
 800859c:	3001      	adds	r0, #1
 800859e:	2b30      	cmp	r3, #48	; 0x30
 80085a0:	d0f8      	beq.n	8008594 <_strtod_l+0x1f4>
 80085a2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80085a6:	2a08      	cmp	r2, #8
 80085a8:	f200 84db 	bhi.w	8008f62 <_strtod_l+0xbc2>
 80085ac:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80085ae:	9007      	str	r0, [sp, #28]
 80085b0:	2000      	movs	r0, #0
 80085b2:	920a      	str	r2, [sp, #40]	; 0x28
 80085b4:	4605      	mov	r5, r0
 80085b6:	3b30      	subs	r3, #48	; 0x30
 80085b8:	f100 0201 	add.w	r2, r0, #1
 80085bc:	d014      	beq.n	80085e8 <_strtod_l+0x248>
 80085be:	9907      	ldr	r1, [sp, #28]
 80085c0:	4411      	add	r1, r2
 80085c2:	9107      	str	r1, [sp, #28]
 80085c4:	462a      	mov	r2, r5
 80085c6:	eb00 0e05 	add.w	lr, r0, r5
 80085ca:	210a      	movs	r1, #10
 80085cc:	4572      	cmp	r2, lr
 80085ce:	d113      	bne.n	80085f8 <_strtod_l+0x258>
 80085d0:	182a      	adds	r2, r5, r0
 80085d2:	2a08      	cmp	r2, #8
 80085d4:	f105 0501 	add.w	r5, r5, #1
 80085d8:	4405      	add	r5, r0
 80085da:	dc1c      	bgt.n	8008616 <_strtod_l+0x276>
 80085dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80085de:	220a      	movs	r2, #10
 80085e0:	fb02 3301 	mla	r3, r2, r1, r3
 80085e4:	9309      	str	r3, [sp, #36]	; 0x24
 80085e6:	2200      	movs	r2, #0
 80085e8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80085ea:	1c59      	adds	r1, r3, #1
 80085ec:	911d      	str	r1, [sp, #116]	; 0x74
 80085ee:	785b      	ldrb	r3, [r3, #1]
 80085f0:	4610      	mov	r0, r2
 80085f2:	e7c9      	b.n	8008588 <_strtod_l+0x1e8>
 80085f4:	4638      	mov	r0, r7
 80085f6:	e7d2      	b.n	800859e <_strtod_l+0x1fe>
 80085f8:	2a08      	cmp	r2, #8
 80085fa:	dc04      	bgt.n	8008606 <_strtod_l+0x266>
 80085fc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80085fe:	434e      	muls	r6, r1
 8008600:	9609      	str	r6, [sp, #36]	; 0x24
 8008602:	3201      	adds	r2, #1
 8008604:	e7e2      	b.n	80085cc <_strtod_l+0x22c>
 8008606:	f102 0c01 	add.w	ip, r2, #1
 800860a:	f1bc 0f10 	cmp.w	ip, #16
 800860e:	bfd8      	it	le
 8008610:	fb01 f909 	mulle.w	r9, r1, r9
 8008614:	e7f5      	b.n	8008602 <_strtod_l+0x262>
 8008616:	2d10      	cmp	r5, #16
 8008618:	bfdc      	itt	le
 800861a:	220a      	movle	r2, #10
 800861c:	fb02 3909 	mlale	r9, r2, r9, r3
 8008620:	e7e1      	b.n	80085e6 <_strtod_l+0x246>
 8008622:	2300      	movs	r3, #0
 8008624:	9307      	str	r3, [sp, #28]
 8008626:	2201      	movs	r2, #1
 8008628:	e77c      	b.n	8008524 <_strtod_l+0x184>
 800862a:	f04f 0c00 	mov.w	ip, #0
 800862e:	f108 0302 	add.w	r3, r8, #2
 8008632:	931d      	str	r3, [sp, #116]	; 0x74
 8008634:	f898 3002 	ldrb.w	r3, [r8, #2]
 8008638:	e785      	b.n	8008546 <_strtod_l+0x1a6>
 800863a:	f04f 0c01 	mov.w	ip, #1
 800863e:	e7f6      	b.n	800862e <_strtod_l+0x28e>
 8008640:	0800c24c 	.word	0x0800c24c
 8008644:	0800bf94 	.word	0x0800bf94
 8008648:	7ff00000 	.word	0x7ff00000
 800864c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800864e:	1c59      	adds	r1, r3, #1
 8008650:	911d      	str	r1, [sp, #116]	; 0x74
 8008652:	785b      	ldrb	r3, [r3, #1]
 8008654:	2b30      	cmp	r3, #48	; 0x30
 8008656:	d0f9      	beq.n	800864c <_strtod_l+0x2ac>
 8008658:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800865c:	2908      	cmp	r1, #8
 800865e:	f63f af79 	bhi.w	8008554 <_strtod_l+0x1b4>
 8008662:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8008666:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008668:	9308      	str	r3, [sp, #32]
 800866a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800866c:	1c59      	adds	r1, r3, #1
 800866e:	911d      	str	r1, [sp, #116]	; 0x74
 8008670:	785b      	ldrb	r3, [r3, #1]
 8008672:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8008676:	2e09      	cmp	r6, #9
 8008678:	d937      	bls.n	80086ea <_strtod_l+0x34a>
 800867a:	9e08      	ldr	r6, [sp, #32]
 800867c:	1b89      	subs	r1, r1, r6
 800867e:	2908      	cmp	r1, #8
 8008680:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008684:	dc02      	bgt.n	800868c <_strtod_l+0x2ec>
 8008686:	4576      	cmp	r6, lr
 8008688:	bfa8      	it	ge
 800868a:	4676      	movge	r6, lr
 800868c:	f1bc 0f00 	cmp.w	ip, #0
 8008690:	d000      	beq.n	8008694 <_strtod_l+0x2f4>
 8008692:	4276      	negs	r6, r6
 8008694:	2d00      	cmp	r5, #0
 8008696:	d14f      	bne.n	8008738 <_strtod_l+0x398>
 8008698:	9904      	ldr	r1, [sp, #16]
 800869a:	4301      	orrs	r1, r0
 800869c:	f47f aec2 	bne.w	8008424 <_strtod_l+0x84>
 80086a0:	2a00      	cmp	r2, #0
 80086a2:	f47f aedb 	bne.w	800845c <_strtod_l+0xbc>
 80086a6:	2b69      	cmp	r3, #105	; 0x69
 80086a8:	d027      	beq.n	80086fa <_strtod_l+0x35a>
 80086aa:	dc24      	bgt.n	80086f6 <_strtod_l+0x356>
 80086ac:	2b49      	cmp	r3, #73	; 0x49
 80086ae:	d024      	beq.n	80086fa <_strtod_l+0x35a>
 80086b0:	2b4e      	cmp	r3, #78	; 0x4e
 80086b2:	f47f aed3 	bne.w	800845c <_strtod_l+0xbc>
 80086b6:	499e      	ldr	r1, [pc, #632]	; (8008930 <_strtod_l+0x590>)
 80086b8:	a81d      	add	r0, sp, #116	; 0x74
 80086ba:	f002 f8b7 	bl	800a82c <__match>
 80086be:	2800      	cmp	r0, #0
 80086c0:	f43f aecc 	beq.w	800845c <_strtod_l+0xbc>
 80086c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	2b28      	cmp	r3, #40	; 0x28
 80086ca:	d12d      	bne.n	8008728 <_strtod_l+0x388>
 80086cc:	4999      	ldr	r1, [pc, #612]	; (8008934 <_strtod_l+0x594>)
 80086ce:	aa20      	add	r2, sp, #128	; 0x80
 80086d0:	a81d      	add	r0, sp, #116	; 0x74
 80086d2:	f002 f8bf 	bl	800a854 <__hexnan>
 80086d6:	2805      	cmp	r0, #5
 80086d8:	d126      	bne.n	8008728 <_strtod_l+0x388>
 80086da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80086dc:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80086e0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80086e4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80086e8:	e69c      	b.n	8008424 <_strtod_l+0x84>
 80086ea:	210a      	movs	r1, #10
 80086ec:	fb01 3e0e 	mla	lr, r1, lr, r3
 80086f0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80086f4:	e7b9      	b.n	800866a <_strtod_l+0x2ca>
 80086f6:	2b6e      	cmp	r3, #110	; 0x6e
 80086f8:	e7db      	b.n	80086b2 <_strtod_l+0x312>
 80086fa:	498f      	ldr	r1, [pc, #572]	; (8008938 <_strtod_l+0x598>)
 80086fc:	a81d      	add	r0, sp, #116	; 0x74
 80086fe:	f002 f895 	bl	800a82c <__match>
 8008702:	2800      	cmp	r0, #0
 8008704:	f43f aeaa 	beq.w	800845c <_strtod_l+0xbc>
 8008708:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800870a:	498c      	ldr	r1, [pc, #560]	; (800893c <_strtod_l+0x59c>)
 800870c:	3b01      	subs	r3, #1
 800870e:	a81d      	add	r0, sp, #116	; 0x74
 8008710:	931d      	str	r3, [sp, #116]	; 0x74
 8008712:	f002 f88b 	bl	800a82c <__match>
 8008716:	b910      	cbnz	r0, 800871e <_strtod_l+0x37e>
 8008718:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800871a:	3301      	adds	r3, #1
 800871c:	931d      	str	r3, [sp, #116]	; 0x74
 800871e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800894c <_strtod_l+0x5ac>
 8008722:	f04f 0a00 	mov.w	sl, #0
 8008726:	e67d      	b.n	8008424 <_strtod_l+0x84>
 8008728:	4885      	ldr	r0, [pc, #532]	; (8008940 <_strtod_l+0x5a0>)
 800872a:	f003 f9e1 	bl	800baf0 <nan>
 800872e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008732:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8008736:	e675      	b.n	8008424 <_strtod_l+0x84>
 8008738:	9b07      	ldr	r3, [sp, #28]
 800873a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800873c:	1af3      	subs	r3, r6, r3
 800873e:	2f00      	cmp	r7, #0
 8008740:	bf08      	it	eq
 8008742:	462f      	moveq	r7, r5
 8008744:	2d10      	cmp	r5, #16
 8008746:	9308      	str	r3, [sp, #32]
 8008748:	46a8      	mov	r8, r5
 800874a:	bfa8      	it	ge
 800874c:	f04f 0810 	movge.w	r8, #16
 8008750:	f7f7 fed8 	bl	8000504 <__aeabi_ui2d>
 8008754:	2d09      	cmp	r5, #9
 8008756:	4682      	mov	sl, r0
 8008758:	468b      	mov	fp, r1
 800875a:	dd13      	ble.n	8008784 <_strtod_l+0x3e4>
 800875c:	4b79      	ldr	r3, [pc, #484]	; (8008944 <_strtod_l+0x5a4>)
 800875e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008762:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008766:	f7f7 ff47 	bl	80005f8 <__aeabi_dmul>
 800876a:	4682      	mov	sl, r0
 800876c:	4648      	mov	r0, r9
 800876e:	468b      	mov	fp, r1
 8008770:	f7f7 fec8 	bl	8000504 <__aeabi_ui2d>
 8008774:	4602      	mov	r2, r0
 8008776:	460b      	mov	r3, r1
 8008778:	4650      	mov	r0, sl
 800877a:	4659      	mov	r1, fp
 800877c:	f7f7 fd86 	bl	800028c <__adddf3>
 8008780:	4682      	mov	sl, r0
 8008782:	468b      	mov	fp, r1
 8008784:	2d0f      	cmp	r5, #15
 8008786:	dc38      	bgt.n	80087fa <_strtod_l+0x45a>
 8008788:	9b08      	ldr	r3, [sp, #32]
 800878a:	2b00      	cmp	r3, #0
 800878c:	f43f ae4a 	beq.w	8008424 <_strtod_l+0x84>
 8008790:	dd24      	ble.n	80087dc <_strtod_l+0x43c>
 8008792:	2b16      	cmp	r3, #22
 8008794:	dc0b      	bgt.n	80087ae <_strtod_l+0x40e>
 8008796:	4d6b      	ldr	r5, [pc, #428]	; (8008944 <_strtod_l+0x5a4>)
 8008798:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800879c:	e9d5 0100 	ldrd	r0, r1, [r5]
 80087a0:	4652      	mov	r2, sl
 80087a2:	465b      	mov	r3, fp
 80087a4:	f7f7 ff28 	bl	80005f8 <__aeabi_dmul>
 80087a8:	4682      	mov	sl, r0
 80087aa:	468b      	mov	fp, r1
 80087ac:	e63a      	b.n	8008424 <_strtod_l+0x84>
 80087ae:	9a08      	ldr	r2, [sp, #32]
 80087b0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80087b4:	4293      	cmp	r3, r2
 80087b6:	db20      	blt.n	80087fa <_strtod_l+0x45a>
 80087b8:	4c62      	ldr	r4, [pc, #392]	; (8008944 <_strtod_l+0x5a4>)
 80087ba:	f1c5 050f 	rsb	r5, r5, #15
 80087be:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80087c2:	4652      	mov	r2, sl
 80087c4:	465b      	mov	r3, fp
 80087c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087ca:	f7f7 ff15 	bl	80005f8 <__aeabi_dmul>
 80087ce:	9b08      	ldr	r3, [sp, #32]
 80087d0:	1b5d      	subs	r5, r3, r5
 80087d2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80087d6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80087da:	e7e3      	b.n	80087a4 <_strtod_l+0x404>
 80087dc:	9b08      	ldr	r3, [sp, #32]
 80087de:	3316      	adds	r3, #22
 80087e0:	db0b      	blt.n	80087fa <_strtod_l+0x45a>
 80087e2:	9b07      	ldr	r3, [sp, #28]
 80087e4:	4a57      	ldr	r2, [pc, #348]	; (8008944 <_strtod_l+0x5a4>)
 80087e6:	1b9e      	subs	r6, r3, r6
 80087e8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80087ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 80087f0:	4650      	mov	r0, sl
 80087f2:	4659      	mov	r1, fp
 80087f4:	f7f8 f82a 	bl	800084c <__aeabi_ddiv>
 80087f8:	e7d6      	b.n	80087a8 <_strtod_l+0x408>
 80087fa:	9b08      	ldr	r3, [sp, #32]
 80087fc:	eba5 0808 	sub.w	r8, r5, r8
 8008800:	4498      	add	r8, r3
 8008802:	f1b8 0f00 	cmp.w	r8, #0
 8008806:	dd71      	ble.n	80088ec <_strtod_l+0x54c>
 8008808:	f018 030f 	ands.w	r3, r8, #15
 800880c:	d00a      	beq.n	8008824 <_strtod_l+0x484>
 800880e:	494d      	ldr	r1, [pc, #308]	; (8008944 <_strtod_l+0x5a4>)
 8008810:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008814:	4652      	mov	r2, sl
 8008816:	465b      	mov	r3, fp
 8008818:	e9d1 0100 	ldrd	r0, r1, [r1]
 800881c:	f7f7 feec 	bl	80005f8 <__aeabi_dmul>
 8008820:	4682      	mov	sl, r0
 8008822:	468b      	mov	fp, r1
 8008824:	f038 080f 	bics.w	r8, r8, #15
 8008828:	d04d      	beq.n	80088c6 <_strtod_l+0x526>
 800882a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800882e:	dd22      	ble.n	8008876 <_strtod_l+0x4d6>
 8008830:	2500      	movs	r5, #0
 8008832:	462e      	mov	r6, r5
 8008834:	9509      	str	r5, [sp, #36]	; 0x24
 8008836:	9507      	str	r5, [sp, #28]
 8008838:	2322      	movs	r3, #34	; 0x22
 800883a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800894c <_strtod_l+0x5ac>
 800883e:	6023      	str	r3, [r4, #0]
 8008840:	f04f 0a00 	mov.w	sl, #0
 8008844:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008846:	2b00      	cmp	r3, #0
 8008848:	f43f adec 	beq.w	8008424 <_strtod_l+0x84>
 800884c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800884e:	4620      	mov	r0, r4
 8008850:	f002 f962 	bl	800ab18 <_Bfree>
 8008854:	9907      	ldr	r1, [sp, #28]
 8008856:	4620      	mov	r0, r4
 8008858:	f002 f95e 	bl	800ab18 <_Bfree>
 800885c:	4631      	mov	r1, r6
 800885e:	4620      	mov	r0, r4
 8008860:	f002 f95a 	bl	800ab18 <_Bfree>
 8008864:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008866:	4620      	mov	r0, r4
 8008868:	f002 f956 	bl	800ab18 <_Bfree>
 800886c:	4629      	mov	r1, r5
 800886e:	4620      	mov	r0, r4
 8008870:	f002 f952 	bl	800ab18 <_Bfree>
 8008874:	e5d6      	b.n	8008424 <_strtod_l+0x84>
 8008876:	2300      	movs	r3, #0
 8008878:	ea4f 1828 	mov.w	r8, r8, asr #4
 800887c:	4650      	mov	r0, sl
 800887e:	4659      	mov	r1, fp
 8008880:	4699      	mov	r9, r3
 8008882:	f1b8 0f01 	cmp.w	r8, #1
 8008886:	dc21      	bgt.n	80088cc <_strtod_l+0x52c>
 8008888:	b10b      	cbz	r3, 800888e <_strtod_l+0x4ee>
 800888a:	4682      	mov	sl, r0
 800888c:	468b      	mov	fp, r1
 800888e:	4b2e      	ldr	r3, [pc, #184]	; (8008948 <_strtod_l+0x5a8>)
 8008890:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008894:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008898:	4652      	mov	r2, sl
 800889a:	465b      	mov	r3, fp
 800889c:	e9d9 0100 	ldrd	r0, r1, [r9]
 80088a0:	f7f7 feaa 	bl	80005f8 <__aeabi_dmul>
 80088a4:	4b29      	ldr	r3, [pc, #164]	; (800894c <_strtod_l+0x5ac>)
 80088a6:	460a      	mov	r2, r1
 80088a8:	400b      	ands	r3, r1
 80088aa:	4929      	ldr	r1, [pc, #164]	; (8008950 <_strtod_l+0x5b0>)
 80088ac:	428b      	cmp	r3, r1
 80088ae:	4682      	mov	sl, r0
 80088b0:	d8be      	bhi.n	8008830 <_strtod_l+0x490>
 80088b2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80088b6:	428b      	cmp	r3, r1
 80088b8:	bf86      	itte	hi
 80088ba:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8008954 <_strtod_l+0x5b4>
 80088be:	f04f 3aff 	movhi.w	sl, #4294967295
 80088c2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80088c6:	2300      	movs	r3, #0
 80088c8:	9304      	str	r3, [sp, #16]
 80088ca:	e081      	b.n	80089d0 <_strtod_l+0x630>
 80088cc:	f018 0f01 	tst.w	r8, #1
 80088d0:	d007      	beq.n	80088e2 <_strtod_l+0x542>
 80088d2:	4b1d      	ldr	r3, [pc, #116]	; (8008948 <_strtod_l+0x5a8>)
 80088d4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80088d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088dc:	f7f7 fe8c 	bl	80005f8 <__aeabi_dmul>
 80088e0:	2301      	movs	r3, #1
 80088e2:	f109 0901 	add.w	r9, r9, #1
 80088e6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80088ea:	e7ca      	b.n	8008882 <_strtod_l+0x4e2>
 80088ec:	d0eb      	beq.n	80088c6 <_strtod_l+0x526>
 80088ee:	f1c8 0800 	rsb	r8, r8, #0
 80088f2:	f018 020f 	ands.w	r2, r8, #15
 80088f6:	d00a      	beq.n	800890e <_strtod_l+0x56e>
 80088f8:	4b12      	ldr	r3, [pc, #72]	; (8008944 <_strtod_l+0x5a4>)
 80088fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80088fe:	4650      	mov	r0, sl
 8008900:	4659      	mov	r1, fp
 8008902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008906:	f7f7 ffa1 	bl	800084c <__aeabi_ddiv>
 800890a:	4682      	mov	sl, r0
 800890c:	468b      	mov	fp, r1
 800890e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008912:	d0d8      	beq.n	80088c6 <_strtod_l+0x526>
 8008914:	f1b8 0f1f 	cmp.w	r8, #31
 8008918:	dd1e      	ble.n	8008958 <_strtod_l+0x5b8>
 800891a:	2500      	movs	r5, #0
 800891c:	462e      	mov	r6, r5
 800891e:	9509      	str	r5, [sp, #36]	; 0x24
 8008920:	9507      	str	r5, [sp, #28]
 8008922:	2322      	movs	r3, #34	; 0x22
 8008924:	f04f 0a00 	mov.w	sl, #0
 8008928:	f04f 0b00 	mov.w	fp, #0
 800892c:	6023      	str	r3, [r4, #0]
 800892e:	e789      	b.n	8008844 <_strtod_l+0x4a4>
 8008930:	0800bf65 	.word	0x0800bf65
 8008934:	0800bfa8 	.word	0x0800bfa8
 8008938:	0800bf5d 	.word	0x0800bf5d
 800893c:	0800c0ec 	.word	0x0800c0ec
 8008940:	0800c408 	.word	0x0800c408
 8008944:	0800c2e8 	.word	0x0800c2e8
 8008948:	0800c2c0 	.word	0x0800c2c0
 800894c:	7ff00000 	.word	0x7ff00000
 8008950:	7ca00000 	.word	0x7ca00000
 8008954:	7fefffff 	.word	0x7fefffff
 8008958:	f018 0310 	ands.w	r3, r8, #16
 800895c:	bf18      	it	ne
 800895e:	236a      	movne	r3, #106	; 0x6a
 8008960:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8008d18 <_strtod_l+0x978>
 8008964:	9304      	str	r3, [sp, #16]
 8008966:	4650      	mov	r0, sl
 8008968:	4659      	mov	r1, fp
 800896a:	2300      	movs	r3, #0
 800896c:	f018 0f01 	tst.w	r8, #1
 8008970:	d004      	beq.n	800897c <_strtod_l+0x5dc>
 8008972:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008976:	f7f7 fe3f 	bl	80005f8 <__aeabi_dmul>
 800897a:	2301      	movs	r3, #1
 800897c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008980:	f109 0908 	add.w	r9, r9, #8
 8008984:	d1f2      	bne.n	800896c <_strtod_l+0x5cc>
 8008986:	b10b      	cbz	r3, 800898c <_strtod_l+0x5ec>
 8008988:	4682      	mov	sl, r0
 800898a:	468b      	mov	fp, r1
 800898c:	9b04      	ldr	r3, [sp, #16]
 800898e:	b1bb      	cbz	r3, 80089c0 <_strtod_l+0x620>
 8008990:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8008994:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008998:	2b00      	cmp	r3, #0
 800899a:	4659      	mov	r1, fp
 800899c:	dd10      	ble.n	80089c0 <_strtod_l+0x620>
 800899e:	2b1f      	cmp	r3, #31
 80089a0:	f340 8128 	ble.w	8008bf4 <_strtod_l+0x854>
 80089a4:	2b34      	cmp	r3, #52	; 0x34
 80089a6:	bfde      	ittt	le
 80089a8:	3b20      	suble	r3, #32
 80089aa:	f04f 32ff 	movle.w	r2, #4294967295
 80089ae:	fa02 f303 	lslle.w	r3, r2, r3
 80089b2:	f04f 0a00 	mov.w	sl, #0
 80089b6:	bfcc      	ite	gt
 80089b8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80089bc:	ea03 0b01 	andle.w	fp, r3, r1
 80089c0:	2200      	movs	r2, #0
 80089c2:	2300      	movs	r3, #0
 80089c4:	4650      	mov	r0, sl
 80089c6:	4659      	mov	r1, fp
 80089c8:	f7f8 f87e 	bl	8000ac8 <__aeabi_dcmpeq>
 80089cc:	2800      	cmp	r0, #0
 80089ce:	d1a4      	bne.n	800891a <_strtod_l+0x57a>
 80089d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089d2:	9300      	str	r3, [sp, #0]
 80089d4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80089d6:	462b      	mov	r3, r5
 80089d8:	463a      	mov	r2, r7
 80089da:	4620      	mov	r0, r4
 80089dc:	f002 f908 	bl	800abf0 <__s2b>
 80089e0:	9009      	str	r0, [sp, #36]	; 0x24
 80089e2:	2800      	cmp	r0, #0
 80089e4:	f43f af24 	beq.w	8008830 <_strtod_l+0x490>
 80089e8:	9b07      	ldr	r3, [sp, #28]
 80089ea:	1b9e      	subs	r6, r3, r6
 80089ec:	9b08      	ldr	r3, [sp, #32]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	bfb4      	ite	lt
 80089f2:	4633      	movlt	r3, r6
 80089f4:	2300      	movge	r3, #0
 80089f6:	9310      	str	r3, [sp, #64]	; 0x40
 80089f8:	9b08      	ldr	r3, [sp, #32]
 80089fa:	2500      	movs	r5, #0
 80089fc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008a00:	9318      	str	r3, [sp, #96]	; 0x60
 8008a02:	462e      	mov	r6, r5
 8008a04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a06:	4620      	mov	r0, r4
 8008a08:	6859      	ldr	r1, [r3, #4]
 8008a0a:	f002 f845 	bl	800aa98 <_Balloc>
 8008a0e:	9007      	str	r0, [sp, #28]
 8008a10:	2800      	cmp	r0, #0
 8008a12:	f43f af11 	beq.w	8008838 <_strtod_l+0x498>
 8008a16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a18:	691a      	ldr	r2, [r3, #16]
 8008a1a:	3202      	adds	r2, #2
 8008a1c:	f103 010c 	add.w	r1, r3, #12
 8008a20:	0092      	lsls	r2, r2, #2
 8008a22:	300c      	adds	r0, #12
 8008a24:	f7fe fd72 	bl	800750c <memcpy>
 8008a28:	ec4b ab10 	vmov	d0, sl, fp
 8008a2c:	aa20      	add	r2, sp, #128	; 0x80
 8008a2e:	a91f      	add	r1, sp, #124	; 0x7c
 8008a30:	4620      	mov	r0, r4
 8008a32:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8008a36:	f002 fc17 	bl	800b268 <__d2b>
 8008a3a:	901e      	str	r0, [sp, #120]	; 0x78
 8008a3c:	2800      	cmp	r0, #0
 8008a3e:	f43f aefb 	beq.w	8008838 <_strtod_l+0x498>
 8008a42:	2101      	movs	r1, #1
 8008a44:	4620      	mov	r0, r4
 8008a46:	f002 f96d 	bl	800ad24 <__i2b>
 8008a4a:	4606      	mov	r6, r0
 8008a4c:	2800      	cmp	r0, #0
 8008a4e:	f43f aef3 	beq.w	8008838 <_strtod_l+0x498>
 8008a52:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008a54:	9904      	ldr	r1, [sp, #16]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	bfab      	itete	ge
 8008a5a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8008a5c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8008a5e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8008a60:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8008a64:	bfac      	ite	ge
 8008a66:	eb03 0902 	addge.w	r9, r3, r2
 8008a6a:	1ad7      	sublt	r7, r2, r3
 8008a6c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008a6e:	eba3 0801 	sub.w	r8, r3, r1
 8008a72:	4490      	add	r8, r2
 8008a74:	4ba3      	ldr	r3, [pc, #652]	; (8008d04 <_strtod_l+0x964>)
 8008a76:	f108 38ff 	add.w	r8, r8, #4294967295
 8008a7a:	4598      	cmp	r8, r3
 8008a7c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008a80:	f280 80cc 	bge.w	8008c1c <_strtod_l+0x87c>
 8008a84:	eba3 0308 	sub.w	r3, r3, r8
 8008a88:	2b1f      	cmp	r3, #31
 8008a8a:	eba2 0203 	sub.w	r2, r2, r3
 8008a8e:	f04f 0101 	mov.w	r1, #1
 8008a92:	f300 80b6 	bgt.w	8008c02 <_strtod_l+0x862>
 8008a96:	fa01 f303 	lsl.w	r3, r1, r3
 8008a9a:	9311      	str	r3, [sp, #68]	; 0x44
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	930c      	str	r3, [sp, #48]	; 0x30
 8008aa0:	eb09 0802 	add.w	r8, r9, r2
 8008aa4:	9b04      	ldr	r3, [sp, #16]
 8008aa6:	45c1      	cmp	r9, r8
 8008aa8:	4417      	add	r7, r2
 8008aaa:	441f      	add	r7, r3
 8008aac:	464b      	mov	r3, r9
 8008aae:	bfa8      	it	ge
 8008ab0:	4643      	movge	r3, r8
 8008ab2:	42bb      	cmp	r3, r7
 8008ab4:	bfa8      	it	ge
 8008ab6:	463b      	movge	r3, r7
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	bfc2      	ittt	gt
 8008abc:	eba8 0803 	subgt.w	r8, r8, r3
 8008ac0:	1aff      	subgt	r7, r7, r3
 8008ac2:	eba9 0903 	subgt.w	r9, r9, r3
 8008ac6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	dd17      	ble.n	8008afc <_strtod_l+0x75c>
 8008acc:	4631      	mov	r1, r6
 8008ace:	461a      	mov	r2, r3
 8008ad0:	4620      	mov	r0, r4
 8008ad2:	f002 f9e3 	bl	800ae9c <__pow5mult>
 8008ad6:	4606      	mov	r6, r0
 8008ad8:	2800      	cmp	r0, #0
 8008ada:	f43f aead 	beq.w	8008838 <_strtod_l+0x498>
 8008ade:	4601      	mov	r1, r0
 8008ae0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008ae2:	4620      	mov	r0, r4
 8008ae4:	f002 f934 	bl	800ad50 <__multiply>
 8008ae8:	900f      	str	r0, [sp, #60]	; 0x3c
 8008aea:	2800      	cmp	r0, #0
 8008aec:	f43f aea4 	beq.w	8008838 <_strtod_l+0x498>
 8008af0:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008af2:	4620      	mov	r0, r4
 8008af4:	f002 f810 	bl	800ab18 <_Bfree>
 8008af8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008afa:	931e      	str	r3, [sp, #120]	; 0x78
 8008afc:	f1b8 0f00 	cmp.w	r8, #0
 8008b00:	f300 8091 	bgt.w	8008c26 <_strtod_l+0x886>
 8008b04:	9b08      	ldr	r3, [sp, #32]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	dd08      	ble.n	8008b1c <_strtod_l+0x77c>
 8008b0a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008b0c:	9907      	ldr	r1, [sp, #28]
 8008b0e:	4620      	mov	r0, r4
 8008b10:	f002 f9c4 	bl	800ae9c <__pow5mult>
 8008b14:	9007      	str	r0, [sp, #28]
 8008b16:	2800      	cmp	r0, #0
 8008b18:	f43f ae8e 	beq.w	8008838 <_strtod_l+0x498>
 8008b1c:	2f00      	cmp	r7, #0
 8008b1e:	dd08      	ble.n	8008b32 <_strtod_l+0x792>
 8008b20:	9907      	ldr	r1, [sp, #28]
 8008b22:	463a      	mov	r2, r7
 8008b24:	4620      	mov	r0, r4
 8008b26:	f002 fa13 	bl	800af50 <__lshift>
 8008b2a:	9007      	str	r0, [sp, #28]
 8008b2c:	2800      	cmp	r0, #0
 8008b2e:	f43f ae83 	beq.w	8008838 <_strtod_l+0x498>
 8008b32:	f1b9 0f00 	cmp.w	r9, #0
 8008b36:	dd08      	ble.n	8008b4a <_strtod_l+0x7aa>
 8008b38:	4631      	mov	r1, r6
 8008b3a:	464a      	mov	r2, r9
 8008b3c:	4620      	mov	r0, r4
 8008b3e:	f002 fa07 	bl	800af50 <__lshift>
 8008b42:	4606      	mov	r6, r0
 8008b44:	2800      	cmp	r0, #0
 8008b46:	f43f ae77 	beq.w	8008838 <_strtod_l+0x498>
 8008b4a:	9a07      	ldr	r2, [sp, #28]
 8008b4c:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008b4e:	4620      	mov	r0, r4
 8008b50:	f002 fa86 	bl	800b060 <__mdiff>
 8008b54:	4605      	mov	r5, r0
 8008b56:	2800      	cmp	r0, #0
 8008b58:	f43f ae6e 	beq.w	8008838 <_strtod_l+0x498>
 8008b5c:	68c3      	ldr	r3, [r0, #12]
 8008b5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b60:	2300      	movs	r3, #0
 8008b62:	60c3      	str	r3, [r0, #12]
 8008b64:	4631      	mov	r1, r6
 8008b66:	f002 fa5f 	bl	800b028 <__mcmp>
 8008b6a:	2800      	cmp	r0, #0
 8008b6c:	da65      	bge.n	8008c3a <_strtod_l+0x89a>
 8008b6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b70:	ea53 030a 	orrs.w	r3, r3, sl
 8008b74:	f040 8087 	bne.w	8008c86 <_strtod_l+0x8e6>
 8008b78:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	f040 8082 	bne.w	8008c86 <_strtod_l+0x8e6>
 8008b82:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008b86:	0d1b      	lsrs	r3, r3, #20
 8008b88:	051b      	lsls	r3, r3, #20
 8008b8a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008b8e:	d97a      	bls.n	8008c86 <_strtod_l+0x8e6>
 8008b90:	696b      	ldr	r3, [r5, #20]
 8008b92:	b913      	cbnz	r3, 8008b9a <_strtod_l+0x7fa>
 8008b94:	692b      	ldr	r3, [r5, #16]
 8008b96:	2b01      	cmp	r3, #1
 8008b98:	dd75      	ble.n	8008c86 <_strtod_l+0x8e6>
 8008b9a:	4629      	mov	r1, r5
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	4620      	mov	r0, r4
 8008ba0:	f002 f9d6 	bl	800af50 <__lshift>
 8008ba4:	4631      	mov	r1, r6
 8008ba6:	4605      	mov	r5, r0
 8008ba8:	f002 fa3e 	bl	800b028 <__mcmp>
 8008bac:	2800      	cmp	r0, #0
 8008bae:	dd6a      	ble.n	8008c86 <_strtod_l+0x8e6>
 8008bb0:	9904      	ldr	r1, [sp, #16]
 8008bb2:	4a55      	ldr	r2, [pc, #340]	; (8008d08 <_strtod_l+0x968>)
 8008bb4:	465b      	mov	r3, fp
 8008bb6:	2900      	cmp	r1, #0
 8008bb8:	f000 8085 	beq.w	8008cc6 <_strtod_l+0x926>
 8008bbc:	ea02 010b 	and.w	r1, r2, fp
 8008bc0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008bc4:	dc7f      	bgt.n	8008cc6 <_strtod_l+0x926>
 8008bc6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008bca:	f77f aeaa 	ble.w	8008922 <_strtod_l+0x582>
 8008bce:	4a4f      	ldr	r2, [pc, #316]	; (8008d0c <_strtod_l+0x96c>)
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8008bd6:	4650      	mov	r0, sl
 8008bd8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8008bdc:	4659      	mov	r1, fp
 8008bde:	f7f7 fd0b 	bl	80005f8 <__aeabi_dmul>
 8008be2:	460b      	mov	r3, r1
 8008be4:	4303      	orrs	r3, r0
 8008be6:	bf08      	it	eq
 8008be8:	2322      	moveq	r3, #34	; 0x22
 8008bea:	4682      	mov	sl, r0
 8008bec:	468b      	mov	fp, r1
 8008bee:	bf08      	it	eq
 8008bf0:	6023      	streq	r3, [r4, #0]
 8008bf2:	e62b      	b.n	800884c <_strtod_l+0x4ac>
 8008bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8008bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8008bfc:	ea03 0a0a 	and.w	sl, r3, sl
 8008c00:	e6de      	b.n	80089c0 <_strtod_l+0x620>
 8008c02:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8008c06:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8008c0a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8008c0e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8008c12:	fa01 f308 	lsl.w	r3, r1, r8
 8008c16:	930c      	str	r3, [sp, #48]	; 0x30
 8008c18:	9111      	str	r1, [sp, #68]	; 0x44
 8008c1a:	e741      	b.n	8008aa0 <_strtod_l+0x700>
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	930c      	str	r3, [sp, #48]	; 0x30
 8008c20:	2301      	movs	r3, #1
 8008c22:	9311      	str	r3, [sp, #68]	; 0x44
 8008c24:	e73c      	b.n	8008aa0 <_strtod_l+0x700>
 8008c26:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008c28:	4642      	mov	r2, r8
 8008c2a:	4620      	mov	r0, r4
 8008c2c:	f002 f990 	bl	800af50 <__lshift>
 8008c30:	901e      	str	r0, [sp, #120]	; 0x78
 8008c32:	2800      	cmp	r0, #0
 8008c34:	f47f af66 	bne.w	8008b04 <_strtod_l+0x764>
 8008c38:	e5fe      	b.n	8008838 <_strtod_l+0x498>
 8008c3a:	465f      	mov	r7, fp
 8008c3c:	d16e      	bne.n	8008d1c <_strtod_l+0x97c>
 8008c3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008c40:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008c44:	b342      	cbz	r2, 8008c98 <_strtod_l+0x8f8>
 8008c46:	4a32      	ldr	r2, [pc, #200]	; (8008d10 <_strtod_l+0x970>)
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d128      	bne.n	8008c9e <_strtod_l+0x8fe>
 8008c4c:	9b04      	ldr	r3, [sp, #16]
 8008c4e:	4650      	mov	r0, sl
 8008c50:	b1eb      	cbz	r3, 8008c8e <_strtod_l+0x8ee>
 8008c52:	4a2d      	ldr	r2, [pc, #180]	; (8008d08 <_strtod_l+0x968>)
 8008c54:	403a      	ands	r2, r7
 8008c56:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8008c5a:	f04f 31ff 	mov.w	r1, #4294967295
 8008c5e:	d819      	bhi.n	8008c94 <_strtod_l+0x8f4>
 8008c60:	0d12      	lsrs	r2, r2, #20
 8008c62:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008c66:	fa01 f303 	lsl.w	r3, r1, r3
 8008c6a:	4298      	cmp	r0, r3
 8008c6c:	d117      	bne.n	8008c9e <_strtod_l+0x8fe>
 8008c6e:	4b29      	ldr	r3, [pc, #164]	; (8008d14 <_strtod_l+0x974>)
 8008c70:	429f      	cmp	r7, r3
 8008c72:	d102      	bne.n	8008c7a <_strtod_l+0x8da>
 8008c74:	3001      	adds	r0, #1
 8008c76:	f43f addf 	beq.w	8008838 <_strtod_l+0x498>
 8008c7a:	4b23      	ldr	r3, [pc, #140]	; (8008d08 <_strtod_l+0x968>)
 8008c7c:	403b      	ands	r3, r7
 8008c7e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008c82:	f04f 0a00 	mov.w	sl, #0
 8008c86:	9b04      	ldr	r3, [sp, #16]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d1a0      	bne.n	8008bce <_strtod_l+0x82e>
 8008c8c:	e5de      	b.n	800884c <_strtod_l+0x4ac>
 8008c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8008c92:	e7ea      	b.n	8008c6a <_strtod_l+0x8ca>
 8008c94:	460b      	mov	r3, r1
 8008c96:	e7e8      	b.n	8008c6a <_strtod_l+0x8ca>
 8008c98:	ea53 030a 	orrs.w	r3, r3, sl
 8008c9c:	d088      	beq.n	8008bb0 <_strtod_l+0x810>
 8008c9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ca0:	b1db      	cbz	r3, 8008cda <_strtod_l+0x93a>
 8008ca2:	423b      	tst	r3, r7
 8008ca4:	d0ef      	beq.n	8008c86 <_strtod_l+0x8e6>
 8008ca6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ca8:	9a04      	ldr	r2, [sp, #16]
 8008caa:	4650      	mov	r0, sl
 8008cac:	4659      	mov	r1, fp
 8008cae:	b1c3      	cbz	r3, 8008ce2 <_strtod_l+0x942>
 8008cb0:	f7ff fb58 	bl	8008364 <sulp>
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	460b      	mov	r3, r1
 8008cb8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008cbc:	f7f7 fae6 	bl	800028c <__adddf3>
 8008cc0:	4682      	mov	sl, r0
 8008cc2:	468b      	mov	fp, r1
 8008cc4:	e7df      	b.n	8008c86 <_strtod_l+0x8e6>
 8008cc6:	4013      	ands	r3, r2
 8008cc8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008ccc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008cd0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008cd4:	f04f 3aff 	mov.w	sl, #4294967295
 8008cd8:	e7d5      	b.n	8008c86 <_strtod_l+0x8e6>
 8008cda:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008cdc:	ea13 0f0a 	tst.w	r3, sl
 8008ce0:	e7e0      	b.n	8008ca4 <_strtod_l+0x904>
 8008ce2:	f7ff fb3f 	bl	8008364 <sulp>
 8008ce6:	4602      	mov	r2, r0
 8008ce8:	460b      	mov	r3, r1
 8008cea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008cee:	f7f7 facb 	bl	8000288 <__aeabi_dsub>
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	4682      	mov	sl, r0
 8008cf8:	468b      	mov	fp, r1
 8008cfa:	f7f7 fee5 	bl	8000ac8 <__aeabi_dcmpeq>
 8008cfe:	2800      	cmp	r0, #0
 8008d00:	d0c1      	beq.n	8008c86 <_strtod_l+0x8e6>
 8008d02:	e60e      	b.n	8008922 <_strtod_l+0x582>
 8008d04:	fffffc02 	.word	0xfffffc02
 8008d08:	7ff00000 	.word	0x7ff00000
 8008d0c:	39500000 	.word	0x39500000
 8008d10:	000fffff 	.word	0x000fffff
 8008d14:	7fefffff 	.word	0x7fefffff
 8008d18:	0800bfc0 	.word	0x0800bfc0
 8008d1c:	4631      	mov	r1, r6
 8008d1e:	4628      	mov	r0, r5
 8008d20:	f002 fafe 	bl	800b320 <__ratio>
 8008d24:	ec59 8b10 	vmov	r8, r9, d0
 8008d28:	ee10 0a10 	vmov	r0, s0
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008d32:	4649      	mov	r1, r9
 8008d34:	f7f7 fedc 	bl	8000af0 <__aeabi_dcmple>
 8008d38:	2800      	cmp	r0, #0
 8008d3a:	d07c      	beq.n	8008e36 <_strtod_l+0xa96>
 8008d3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d04c      	beq.n	8008ddc <_strtod_l+0xa3c>
 8008d42:	4b95      	ldr	r3, [pc, #596]	; (8008f98 <_strtod_l+0xbf8>)
 8008d44:	2200      	movs	r2, #0
 8008d46:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008d4a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008f98 <_strtod_l+0xbf8>
 8008d4e:	f04f 0800 	mov.w	r8, #0
 8008d52:	4b92      	ldr	r3, [pc, #584]	; (8008f9c <_strtod_l+0xbfc>)
 8008d54:	403b      	ands	r3, r7
 8008d56:	9311      	str	r3, [sp, #68]	; 0x44
 8008d58:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008d5a:	4b91      	ldr	r3, [pc, #580]	; (8008fa0 <_strtod_l+0xc00>)
 8008d5c:	429a      	cmp	r2, r3
 8008d5e:	f040 80b2 	bne.w	8008ec6 <_strtod_l+0xb26>
 8008d62:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008d66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008d6a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8008d6e:	ec4b ab10 	vmov	d0, sl, fp
 8008d72:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8008d76:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008d7a:	f002 f9f9 	bl	800b170 <__ulp>
 8008d7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008d82:	ec53 2b10 	vmov	r2, r3, d0
 8008d86:	f7f7 fc37 	bl	80005f8 <__aeabi_dmul>
 8008d8a:	4652      	mov	r2, sl
 8008d8c:	465b      	mov	r3, fp
 8008d8e:	f7f7 fa7d 	bl	800028c <__adddf3>
 8008d92:	460b      	mov	r3, r1
 8008d94:	4981      	ldr	r1, [pc, #516]	; (8008f9c <_strtod_l+0xbfc>)
 8008d96:	4a83      	ldr	r2, [pc, #524]	; (8008fa4 <_strtod_l+0xc04>)
 8008d98:	4019      	ands	r1, r3
 8008d9a:	4291      	cmp	r1, r2
 8008d9c:	4682      	mov	sl, r0
 8008d9e:	d95e      	bls.n	8008e5e <_strtod_l+0xabe>
 8008da0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008da2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d103      	bne.n	8008db2 <_strtod_l+0xa12>
 8008daa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dac:	3301      	adds	r3, #1
 8008dae:	f43f ad43 	beq.w	8008838 <_strtod_l+0x498>
 8008db2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8008fb0 <_strtod_l+0xc10>
 8008db6:	f04f 3aff 	mov.w	sl, #4294967295
 8008dba:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008dbc:	4620      	mov	r0, r4
 8008dbe:	f001 feab 	bl	800ab18 <_Bfree>
 8008dc2:	9907      	ldr	r1, [sp, #28]
 8008dc4:	4620      	mov	r0, r4
 8008dc6:	f001 fea7 	bl	800ab18 <_Bfree>
 8008dca:	4631      	mov	r1, r6
 8008dcc:	4620      	mov	r0, r4
 8008dce:	f001 fea3 	bl	800ab18 <_Bfree>
 8008dd2:	4629      	mov	r1, r5
 8008dd4:	4620      	mov	r0, r4
 8008dd6:	f001 fe9f 	bl	800ab18 <_Bfree>
 8008dda:	e613      	b.n	8008a04 <_strtod_l+0x664>
 8008ddc:	f1ba 0f00 	cmp.w	sl, #0
 8008de0:	d11b      	bne.n	8008e1a <_strtod_l+0xa7a>
 8008de2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008de6:	b9f3      	cbnz	r3, 8008e26 <_strtod_l+0xa86>
 8008de8:	4b6b      	ldr	r3, [pc, #428]	; (8008f98 <_strtod_l+0xbf8>)
 8008dea:	2200      	movs	r2, #0
 8008dec:	4640      	mov	r0, r8
 8008dee:	4649      	mov	r1, r9
 8008df0:	f7f7 fe74 	bl	8000adc <__aeabi_dcmplt>
 8008df4:	b9d0      	cbnz	r0, 8008e2c <_strtod_l+0xa8c>
 8008df6:	4640      	mov	r0, r8
 8008df8:	4649      	mov	r1, r9
 8008dfa:	4b6b      	ldr	r3, [pc, #428]	; (8008fa8 <_strtod_l+0xc08>)
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	f7f7 fbfb 	bl	80005f8 <__aeabi_dmul>
 8008e02:	4680      	mov	r8, r0
 8008e04:	4689      	mov	r9, r1
 8008e06:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008e0a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8008e0e:	931b      	str	r3, [sp, #108]	; 0x6c
 8008e10:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8008e14:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008e18:	e79b      	b.n	8008d52 <_strtod_l+0x9b2>
 8008e1a:	f1ba 0f01 	cmp.w	sl, #1
 8008e1e:	d102      	bne.n	8008e26 <_strtod_l+0xa86>
 8008e20:	2f00      	cmp	r7, #0
 8008e22:	f43f ad7e 	beq.w	8008922 <_strtod_l+0x582>
 8008e26:	4b61      	ldr	r3, [pc, #388]	; (8008fac <_strtod_l+0xc0c>)
 8008e28:	2200      	movs	r2, #0
 8008e2a:	e78c      	b.n	8008d46 <_strtod_l+0x9a6>
 8008e2c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008fa8 <_strtod_l+0xc08>
 8008e30:	f04f 0800 	mov.w	r8, #0
 8008e34:	e7e7      	b.n	8008e06 <_strtod_l+0xa66>
 8008e36:	4b5c      	ldr	r3, [pc, #368]	; (8008fa8 <_strtod_l+0xc08>)
 8008e38:	4640      	mov	r0, r8
 8008e3a:	4649      	mov	r1, r9
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	f7f7 fbdb 	bl	80005f8 <__aeabi_dmul>
 8008e42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008e44:	4680      	mov	r8, r0
 8008e46:	4689      	mov	r9, r1
 8008e48:	b933      	cbnz	r3, 8008e58 <_strtod_l+0xab8>
 8008e4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008e4e:	9012      	str	r0, [sp, #72]	; 0x48
 8008e50:	9313      	str	r3, [sp, #76]	; 0x4c
 8008e52:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8008e56:	e7dd      	b.n	8008e14 <_strtod_l+0xa74>
 8008e58:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8008e5c:	e7f9      	b.n	8008e52 <_strtod_l+0xab2>
 8008e5e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008e62:	9b04      	ldr	r3, [sp, #16]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d1a8      	bne.n	8008dba <_strtod_l+0xa1a>
 8008e68:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008e6c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008e6e:	0d1b      	lsrs	r3, r3, #20
 8008e70:	051b      	lsls	r3, r3, #20
 8008e72:	429a      	cmp	r2, r3
 8008e74:	d1a1      	bne.n	8008dba <_strtod_l+0xa1a>
 8008e76:	4640      	mov	r0, r8
 8008e78:	4649      	mov	r1, r9
 8008e7a:	f7f7 ff1d 	bl	8000cb8 <__aeabi_d2lz>
 8008e7e:	f7f7 fb8d 	bl	800059c <__aeabi_l2d>
 8008e82:	4602      	mov	r2, r0
 8008e84:	460b      	mov	r3, r1
 8008e86:	4640      	mov	r0, r8
 8008e88:	4649      	mov	r1, r9
 8008e8a:	f7f7 f9fd 	bl	8000288 <__aeabi_dsub>
 8008e8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008e90:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008e94:	ea43 030a 	orr.w	r3, r3, sl
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	4680      	mov	r8, r0
 8008e9c:	4689      	mov	r9, r1
 8008e9e:	d053      	beq.n	8008f48 <_strtod_l+0xba8>
 8008ea0:	a335      	add	r3, pc, #212	; (adr r3, 8008f78 <_strtod_l+0xbd8>)
 8008ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea6:	f7f7 fe19 	bl	8000adc <__aeabi_dcmplt>
 8008eaa:	2800      	cmp	r0, #0
 8008eac:	f47f acce 	bne.w	800884c <_strtod_l+0x4ac>
 8008eb0:	a333      	add	r3, pc, #204	; (adr r3, 8008f80 <_strtod_l+0xbe0>)
 8008eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb6:	4640      	mov	r0, r8
 8008eb8:	4649      	mov	r1, r9
 8008eba:	f7f7 fe2d 	bl	8000b18 <__aeabi_dcmpgt>
 8008ebe:	2800      	cmp	r0, #0
 8008ec0:	f43f af7b 	beq.w	8008dba <_strtod_l+0xa1a>
 8008ec4:	e4c2      	b.n	800884c <_strtod_l+0x4ac>
 8008ec6:	9b04      	ldr	r3, [sp, #16]
 8008ec8:	b333      	cbz	r3, 8008f18 <_strtod_l+0xb78>
 8008eca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008ecc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008ed0:	d822      	bhi.n	8008f18 <_strtod_l+0xb78>
 8008ed2:	a32d      	add	r3, pc, #180	; (adr r3, 8008f88 <_strtod_l+0xbe8>)
 8008ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed8:	4640      	mov	r0, r8
 8008eda:	4649      	mov	r1, r9
 8008edc:	f7f7 fe08 	bl	8000af0 <__aeabi_dcmple>
 8008ee0:	b1a0      	cbz	r0, 8008f0c <_strtod_l+0xb6c>
 8008ee2:	4649      	mov	r1, r9
 8008ee4:	4640      	mov	r0, r8
 8008ee6:	f7f7 fe5f 	bl	8000ba8 <__aeabi_d2uiz>
 8008eea:	2801      	cmp	r0, #1
 8008eec:	bf38      	it	cc
 8008eee:	2001      	movcc	r0, #1
 8008ef0:	f7f7 fb08 	bl	8000504 <__aeabi_ui2d>
 8008ef4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ef6:	4680      	mov	r8, r0
 8008ef8:	4689      	mov	r9, r1
 8008efa:	bb13      	cbnz	r3, 8008f42 <_strtod_l+0xba2>
 8008efc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008f00:	9014      	str	r0, [sp, #80]	; 0x50
 8008f02:	9315      	str	r3, [sp, #84]	; 0x54
 8008f04:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008f08:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008f0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f0e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008f10:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008f14:	1a9b      	subs	r3, r3, r2
 8008f16:	930d      	str	r3, [sp, #52]	; 0x34
 8008f18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008f1c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008f20:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008f24:	f002 f924 	bl	800b170 <__ulp>
 8008f28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008f2c:	ec53 2b10 	vmov	r2, r3, d0
 8008f30:	f7f7 fb62 	bl	80005f8 <__aeabi_dmul>
 8008f34:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008f38:	f7f7 f9a8 	bl	800028c <__adddf3>
 8008f3c:	4682      	mov	sl, r0
 8008f3e:	468b      	mov	fp, r1
 8008f40:	e78f      	b.n	8008e62 <_strtod_l+0xac2>
 8008f42:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8008f46:	e7dd      	b.n	8008f04 <_strtod_l+0xb64>
 8008f48:	a311      	add	r3, pc, #68	; (adr r3, 8008f90 <_strtod_l+0xbf0>)
 8008f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f4e:	f7f7 fdc5 	bl	8000adc <__aeabi_dcmplt>
 8008f52:	e7b4      	b.n	8008ebe <_strtod_l+0xb1e>
 8008f54:	2300      	movs	r3, #0
 8008f56:	930e      	str	r3, [sp, #56]	; 0x38
 8008f58:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008f5a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008f5c:	6013      	str	r3, [r2, #0]
 8008f5e:	f7ff ba65 	b.w	800842c <_strtod_l+0x8c>
 8008f62:	2b65      	cmp	r3, #101	; 0x65
 8008f64:	f43f ab5d 	beq.w	8008622 <_strtod_l+0x282>
 8008f68:	2b45      	cmp	r3, #69	; 0x45
 8008f6a:	f43f ab5a 	beq.w	8008622 <_strtod_l+0x282>
 8008f6e:	2201      	movs	r2, #1
 8008f70:	f7ff bb92 	b.w	8008698 <_strtod_l+0x2f8>
 8008f74:	f3af 8000 	nop.w
 8008f78:	94a03595 	.word	0x94a03595
 8008f7c:	3fdfffff 	.word	0x3fdfffff
 8008f80:	35afe535 	.word	0x35afe535
 8008f84:	3fe00000 	.word	0x3fe00000
 8008f88:	ffc00000 	.word	0xffc00000
 8008f8c:	41dfffff 	.word	0x41dfffff
 8008f90:	94a03595 	.word	0x94a03595
 8008f94:	3fcfffff 	.word	0x3fcfffff
 8008f98:	3ff00000 	.word	0x3ff00000
 8008f9c:	7ff00000 	.word	0x7ff00000
 8008fa0:	7fe00000 	.word	0x7fe00000
 8008fa4:	7c9fffff 	.word	0x7c9fffff
 8008fa8:	3fe00000 	.word	0x3fe00000
 8008fac:	bff00000 	.word	0xbff00000
 8008fb0:	7fefffff 	.word	0x7fefffff

08008fb4 <_strtod_r>:
 8008fb4:	4b01      	ldr	r3, [pc, #4]	; (8008fbc <_strtod_r+0x8>)
 8008fb6:	f7ff b9f3 	b.w	80083a0 <_strtod_l>
 8008fba:	bf00      	nop
 8008fbc:	20000074 	.word	0x20000074

08008fc0 <_strtol_l.isra.0>:
 8008fc0:	2b01      	cmp	r3, #1
 8008fc2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fc6:	d001      	beq.n	8008fcc <_strtol_l.isra.0+0xc>
 8008fc8:	2b24      	cmp	r3, #36	; 0x24
 8008fca:	d906      	bls.n	8008fda <_strtol_l.isra.0+0x1a>
 8008fcc:	f7fe fa74 	bl	80074b8 <__errno>
 8008fd0:	2316      	movs	r3, #22
 8008fd2:	6003      	str	r3, [r0, #0]
 8008fd4:	2000      	movs	r0, #0
 8008fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fda:	4f3a      	ldr	r7, [pc, #232]	; (80090c4 <_strtol_l.isra.0+0x104>)
 8008fdc:	468e      	mov	lr, r1
 8008fde:	4676      	mov	r6, lr
 8008fe0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008fe4:	5de5      	ldrb	r5, [r4, r7]
 8008fe6:	f015 0508 	ands.w	r5, r5, #8
 8008fea:	d1f8      	bne.n	8008fde <_strtol_l.isra.0+0x1e>
 8008fec:	2c2d      	cmp	r4, #45	; 0x2d
 8008fee:	d134      	bne.n	800905a <_strtol_l.isra.0+0x9a>
 8008ff0:	f89e 4000 	ldrb.w	r4, [lr]
 8008ff4:	f04f 0801 	mov.w	r8, #1
 8008ff8:	f106 0e02 	add.w	lr, r6, #2
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d05c      	beq.n	80090ba <_strtol_l.isra.0+0xfa>
 8009000:	2b10      	cmp	r3, #16
 8009002:	d10c      	bne.n	800901e <_strtol_l.isra.0+0x5e>
 8009004:	2c30      	cmp	r4, #48	; 0x30
 8009006:	d10a      	bne.n	800901e <_strtol_l.isra.0+0x5e>
 8009008:	f89e 4000 	ldrb.w	r4, [lr]
 800900c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009010:	2c58      	cmp	r4, #88	; 0x58
 8009012:	d14d      	bne.n	80090b0 <_strtol_l.isra.0+0xf0>
 8009014:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8009018:	2310      	movs	r3, #16
 800901a:	f10e 0e02 	add.w	lr, lr, #2
 800901e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8009022:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009026:	2600      	movs	r6, #0
 8009028:	fbbc f9f3 	udiv	r9, ip, r3
 800902c:	4635      	mov	r5, r6
 800902e:	fb03 ca19 	mls	sl, r3, r9, ip
 8009032:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8009036:	2f09      	cmp	r7, #9
 8009038:	d818      	bhi.n	800906c <_strtol_l.isra.0+0xac>
 800903a:	463c      	mov	r4, r7
 800903c:	42a3      	cmp	r3, r4
 800903e:	dd24      	ble.n	800908a <_strtol_l.isra.0+0xca>
 8009040:	2e00      	cmp	r6, #0
 8009042:	db1f      	blt.n	8009084 <_strtol_l.isra.0+0xc4>
 8009044:	45a9      	cmp	r9, r5
 8009046:	d31d      	bcc.n	8009084 <_strtol_l.isra.0+0xc4>
 8009048:	d101      	bne.n	800904e <_strtol_l.isra.0+0x8e>
 800904a:	45a2      	cmp	sl, r4
 800904c:	db1a      	blt.n	8009084 <_strtol_l.isra.0+0xc4>
 800904e:	fb05 4503 	mla	r5, r5, r3, r4
 8009052:	2601      	movs	r6, #1
 8009054:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009058:	e7eb      	b.n	8009032 <_strtol_l.isra.0+0x72>
 800905a:	2c2b      	cmp	r4, #43	; 0x2b
 800905c:	bf08      	it	eq
 800905e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8009062:	46a8      	mov	r8, r5
 8009064:	bf08      	it	eq
 8009066:	f106 0e02 	addeq.w	lr, r6, #2
 800906a:	e7c7      	b.n	8008ffc <_strtol_l.isra.0+0x3c>
 800906c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009070:	2f19      	cmp	r7, #25
 8009072:	d801      	bhi.n	8009078 <_strtol_l.isra.0+0xb8>
 8009074:	3c37      	subs	r4, #55	; 0x37
 8009076:	e7e1      	b.n	800903c <_strtol_l.isra.0+0x7c>
 8009078:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800907c:	2f19      	cmp	r7, #25
 800907e:	d804      	bhi.n	800908a <_strtol_l.isra.0+0xca>
 8009080:	3c57      	subs	r4, #87	; 0x57
 8009082:	e7db      	b.n	800903c <_strtol_l.isra.0+0x7c>
 8009084:	f04f 36ff 	mov.w	r6, #4294967295
 8009088:	e7e4      	b.n	8009054 <_strtol_l.isra.0+0x94>
 800908a:	2e00      	cmp	r6, #0
 800908c:	da05      	bge.n	800909a <_strtol_l.isra.0+0xda>
 800908e:	2322      	movs	r3, #34	; 0x22
 8009090:	6003      	str	r3, [r0, #0]
 8009092:	4665      	mov	r5, ip
 8009094:	b942      	cbnz	r2, 80090a8 <_strtol_l.isra.0+0xe8>
 8009096:	4628      	mov	r0, r5
 8009098:	e79d      	b.n	8008fd6 <_strtol_l.isra.0+0x16>
 800909a:	f1b8 0f00 	cmp.w	r8, #0
 800909e:	d000      	beq.n	80090a2 <_strtol_l.isra.0+0xe2>
 80090a0:	426d      	negs	r5, r5
 80090a2:	2a00      	cmp	r2, #0
 80090a4:	d0f7      	beq.n	8009096 <_strtol_l.isra.0+0xd6>
 80090a6:	b10e      	cbz	r6, 80090ac <_strtol_l.isra.0+0xec>
 80090a8:	f10e 31ff 	add.w	r1, lr, #4294967295
 80090ac:	6011      	str	r1, [r2, #0]
 80090ae:	e7f2      	b.n	8009096 <_strtol_l.isra.0+0xd6>
 80090b0:	2430      	movs	r4, #48	; 0x30
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d1b3      	bne.n	800901e <_strtol_l.isra.0+0x5e>
 80090b6:	2308      	movs	r3, #8
 80090b8:	e7b1      	b.n	800901e <_strtol_l.isra.0+0x5e>
 80090ba:	2c30      	cmp	r4, #48	; 0x30
 80090bc:	d0a4      	beq.n	8009008 <_strtol_l.isra.0+0x48>
 80090be:	230a      	movs	r3, #10
 80090c0:	e7ad      	b.n	800901e <_strtol_l.isra.0+0x5e>
 80090c2:	bf00      	nop
 80090c4:	0800bfe9 	.word	0x0800bfe9

080090c8 <_strtol_r>:
 80090c8:	f7ff bf7a 	b.w	8008fc0 <_strtol_l.isra.0>

080090cc <__swbuf_r>:
 80090cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ce:	460e      	mov	r6, r1
 80090d0:	4614      	mov	r4, r2
 80090d2:	4605      	mov	r5, r0
 80090d4:	b118      	cbz	r0, 80090de <__swbuf_r+0x12>
 80090d6:	6983      	ldr	r3, [r0, #24]
 80090d8:	b90b      	cbnz	r3, 80090de <__swbuf_r+0x12>
 80090da:	f001 f84b 	bl	800a174 <__sinit>
 80090de:	4b21      	ldr	r3, [pc, #132]	; (8009164 <__swbuf_r+0x98>)
 80090e0:	429c      	cmp	r4, r3
 80090e2:	d12b      	bne.n	800913c <__swbuf_r+0x70>
 80090e4:	686c      	ldr	r4, [r5, #4]
 80090e6:	69a3      	ldr	r3, [r4, #24]
 80090e8:	60a3      	str	r3, [r4, #8]
 80090ea:	89a3      	ldrh	r3, [r4, #12]
 80090ec:	071a      	lsls	r2, r3, #28
 80090ee:	d52f      	bpl.n	8009150 <__swbuf_r+0x84>
 80090f0:	6923      	ldr	r3, [r4, #16]
 80090f2:	b36b      	cbz	r3, 8009150 <__swbuf_r+0x84>
 80090f4:	6923      	ldr	r3, [r4, #16]
 80090f6:	6820      	ldr	r0, [r4, #0]
 80090f8:	1ac0      	subs	r0, r0, r3
 80090fa:	6963      	ldr	r3, [r4, #20]
 80090fc:	b2f6      	uxtb	r6, r6
 80090fe:	4283      	cmp	r3, r0
 8009100:	4637      	mov	r7, r6
 8009102:	dc04      	bgt.n	800910e <__swbuf_r+0x42>
 8009104:	4621      	mov	r1, r4
 8009106:	4628      	mov	r0, r5
 8009108:	f000 ffa0 	bl	800a04c <_fflush_r>
 800910c:	bb30      	cbnz	r0, 800915c <__swbuf_r+0x90>
 800910e:	68a3      	ldr	r3, [r4, #8]
 8009110:	3b01      	subs	r3, #1
 8009112:	60a3      	str	r3, [r4, #8]
 8009114:	6823      	ldr	r3, [r4, #0]
 8009116:	1c5a      	adds	r2, r3, #1
 8009118:	6022      	str	r2, [r4, #0]
 800911a:	701e      	strb	r6, [r3, #0]
 800911c:	6963      	ldr	r3, [r4, #20]
 800911e:	3001      	adds	r0, #1
 8009120:	4283      	cmp	r3, r0
 8009122:	d004      	beq.n	800912e <__swbuf_r+0x62>
 8009124:	89a3      	ldrh	r3, [r4, #12]
 8009126:	07db      	lsls	r3, r3, #31
 8009128:	d506      	bpl.n	8009138 <__swbuf_r+0x6c>
 800912a:	2e0a      	cmp	r6, #10
 800912c:	d104      	bne.n	8009138 <__swbuf_r+0x6c>
 800912e:	4621      	mov	r1, r4
 8009130:	4628      	mov	r0, r5
 8009132:	f000 ff8b 	bl	800a04c <_fflush_r>
 8009136:	b988      	cbnz	r0, 800915c <__swbuf_r+0x90>
 8009138:	4638      	mov	r0, r7
 800913a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800913c:	4b0a      	ldr	r3, [pc, #40]	; (8009168 <__swbuf_r+0x9c>)
 800913e:	429c      	cmp	r4, r3
 8009140:	d101      	bne.n	8009146 <__swbuf_r+0x7a>
 8009142:	68ac      	ldr	r4, [r5, #8]
 8009144:	e7cf      	b.n	80090e6 <__swbuf_r+0x1a>
 8009146:	4b09      	ldr	r3, [pc, #36]	; (800916c <__swbuf_r+0xa0>)
 8009148:	429c      	cmp	r4, r3
 800914a:	bf08      	it	eq
 800914c:	68ec      	ldreq	r4, [r5, #12]
 800914e:	e7ca      	b.n	80090e6 <__swbuf_r+0x1a>
 8009150:	4621      	mov	r1, r4
 8009152:	4628      	mov	r0, r5
 8009154:	f000 f80c 	bl	8009170 <__swsetup_r>
 8009158:	2800      	cmp	r0, #0
 800915a:	d0cb      	beq.n	80090f4 <__swbuf_r+0x28>
 800915c:	f04f 37ff 	mov.w	r7, #4294967295
 8009160:	e7ea      	b.n	8009138 <__swbuf_r+0x6c>
 8009162:	bf00      	nop
 8009164:	0800c1a0 	.word	0x0800c1a0
 8009168:	0800c1c0 	.word	0x0800c1c0
 800916c:	0800c180 	.word	0x0800c180

08009170 <__swsetup_r>:
 8009170:	4b32      	ldr	r3, [pc, #200]	; (800923c <__swsetup_r+0xcc>)
 8009172:	b570      	push	{r4, r5, r6, lr}
 8009174:	681d      	ldr	r5, [r3, #0]
 8009176:	4606      	mov	r6, r0
 8009178:	460c      	mov	r4, r1
 800917a:	b125      	cbz	r5, 8009186 <__swsetup_r+0x16>
 800917c:	69ab      	ldr	r3, [r5, #24]
 800917e:	b913      	cbnz	r3, 8009186 <__swsetup_r+0x16>
 8009180:	4628      	mov	r0, r5
 8009182:	f000 fff7 	bl	800a174 <__sinit>
 8009186:	4b2e      	ldr	r3, [pc, #184]	; (8009240 <__swsetup_r+0xd0>)
 8009188:	429c      	cmp	r4, r3
 800918a:	d10f      	bne.n	80091ac <__swsetup_r+0x3c>
 800918c:	686c      	ldr	r4, [r5, #4]
 800918e:	89a3      	ldrh	r3, [r4, #12]
 8009190:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009194:	0719      	lsls	r1, r3, #28
 8009196:	d42c      	bmi.n	80091f2 <__swsetup_r+0x82>
 8009198:	06dd      	lsls	r5, r3, #27
 800919a:	d411      	bmi.n	80091c0 <__swsetup_r+0x50>
 800919c:	2309      	movs	r3, #9
 800919e:	6033      	str	r3, [r6, #0]
 80091a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80091a4:	81a3      	strh	r3, [r4, #12]
 80091a6:	f04f 30ff 	mov.w	r0, #4294967295
 80091aa:	e03e      	b.n	800922a <__swsetup_r+0xba>
 80091ac:	4b25      	ldr	r3, [pc, #148]	; (8009244 <__swsetup_r+0xd4>)
 80091ae:	429c      	cmp	r4, r3
 80091b0:	d101      	bne.n	80091b6 <__swsetup_r+0x46>
 80091b2:	68ac      	ldr	r4, [r5, #8]
 80091b4:	e7eb      	b.n	800918e <__swsetup_r+0x1e>
 80091b6:	4b24      	ldr	r3, [pc, #144]	; (8009248 <__swsetup_r+0xd8>)
 80091b8:	429c      	cmp	r4, r3
 80091ba:	bf08      	it	eq
 80091bc:	68ec      	ldreq	r4, [r5, #12]
 80091be:	e7e6      	b.n	800918e <__swsetup_r+0x1e>
 80091c0:	0758      	lsls	r0, r3, #29
 80091c2:	d512      	bpl.n	80091ea <__swsetup_r+0x7a>
 80091c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091c6:	b141      	cbz	r1, 80091da <__swsetup_r+0x6a>
 80091c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091cc:	4299      	cmp	r1, r3
 80091ce:	d002      	beq.n	80091d6 <__swsetup_r+0x66>
 80091d0:	4630      	mov	r0, r6
 80091d2:	f002 f92b 	bl	800b42c <_free_r>
 80091d6:	2300      	movs	r3, #0
 80091d8:	6363      	str	r3, [r4, #52]	; 0x34
 80091da:	89a3      	ldrh	r3, [r4, #12]
 80091dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80091e0:	81a3      	strh	r3, [r4, #12]
 80091e2:	2300      	movs	r3, #0
 80091e4:	6063      	str	r3, [r4, #4]
 80091e6:	6923      	ldr	r3, [r4, #16]
 80091e8:	6023      	str	r3, [r4, #0]
 80091ea:	89a3      	ldrh	r3, [r4, #12]
 80091ec:	f043 0308 	orr.w	r3, r3, #8
 80091f0:	81a3      	strh	r3, [r4, #12]
 80091f2:	6923      	ldr	r3, [r4, #16]
 80091f4:	b94b      	cbnz	r3, 800920a <__swsetup_r+0x9a>
 80091f6:	89a3      	ldrh	r3, [r4, #12]
 80091f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80091fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009200:	d003      	beq.n	800920a <__swsetup_r+0x9a>
 8009202:	4621      	mov	r1, r4
 8009204:	4630      	mov	r0, r6
 8009206:	f001 fbed 	bl	800a9e4 <__smakebuf_r>
 800920a:	89a0      	ldrh	r0, [r4, #12]
 800920c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009210:	f010 0301 	ands.w	r3, r0, #1
 8009214:	d00a      	beq.n	800922c <__swsetup_r+0xbc>
 8009216:	2300      	movs	r3, #0
 8009218:	60a3      	str	r3, [r4, #8]
 800921a:	6963      	ldr	r3, [r4, #20]
 800921c:	425b      	negs	r3, r3
 800921e:	61a3      	str	r3, [r4, #24]
 8009220:	6923      	ldr	r3, [r4, #16]
 8009222:	b943      	cbnz	r3, 8009236 <__swsetup_r+0xc6>
 8009224:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009228:	d1ba      	bne.n	80091a0 <__swsetup_r+0x30>
 800922a:	bd70      	pop	{r4, r5, r6, pc}
 800922c:	0781      	lsls	r1, r0, #30
 800922e:	bf58      	it	pl
 8009230:	6963      	ldrpl	r3, [r4, #20]
 8009232:	60a3      	str	r3, [r4, #8]
 8009234:	e7f4      	b.n	8009220 <__swsetup_r+0xb0>
 8009236:	2000      	movs	r0, #0
 8009238:	e7f7      	b.n	800922a <__swsetup_r+0xba>
 800923a:	bf00      	nop
 800923c:	2000000c 	.word	0x2000000c
 8009240:	0800c1a0 	.word	0x0800c1a0
 8009244:	0800c1c0 	.word	0x0800c1c0
 8009248:	0800c180 	.word	0x0800c180

0800924c <quorem>:
 800924c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009250:	6903      	ldr	r3, [r0, #16]
 8009252:	690c      	ldr	r4, [r1, #16]
 8009254:	42a3      	cmp	r3, r4
 8009256:	4607      	mov	r7, r0
 8009258:	f2c0 8081 	blt.w	800935e <quorem+0x112>
 800925c:	3c01      	subs	r4, #1
 800925e:	f101 0814 	add.w	r8, r1, #20
 8009262:	f100 0514 	add.w	r5, r0, #20
 8009266:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800926a:	9301      	str	r3, [sp, #4]
 800926c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009270:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009274:	3301      	adds	r3, #1
 8009276:	429a      	cmp	r2, r3
 8009278:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800927c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009280:	fbb2 f6f3 	udiv	r6, r2, r3
 8009284:	d331      	bcc.n	80092ea <quorem+0x9e>
 8009286:	f04f 0e00 	mov.w	lr, #0
 800928a:	4640      	mov	r0, r8
 800928c:	46ac      	mov	ip, r5
 800928e:	46f2      	mov	sl, lr
 8009290:	f850 2b04 	ldr.w	r2, [r0], #4
 8009294:	b293      	uxth	r3, r2
 8009296:	fb06 e303 	mla	r3, r6, r3, lr
 800929a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800929e:	b29b      	uxth	r3, r3
 80092a0:	ebaa 0303 	sub.w	r3, sl, r3
 80092a4:	0c12      	lsrs	r2, r2, #16
 80092a6:	f8dc a000 	ldr.w	sl, [ip]
 80092aa:	fb06 e202 	mla	r2, r6, r2, lr
 80092ae:	fa13 f38a 	uxtah	r3, r3, sl
 80092b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80092b6:	fa1f fa82 	uxth.w	sl, r2
 80092ba:	f8dc 2000 	ldr.w	r2, [ip]
 80092be:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80092c2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80092c6:	b29b      	uxth	r3, r3
 80092c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80092cc:	4581      	cmp	r9, r0
 80092ce:	f84c 3b04 	str.w	r3, [ip], #4
 80092d2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80092d6:	d2db      	bcs.n	8009290 <quorem+0x44>
 80092d8:	f855 300b 	ldr.w	r3, [r5, fp]
 80092dc:	b92b      	cbnz	r3, 80092ea <quorem+0x9e>
 80092de:	9b01      	ldr	r3, [sp, #4]
 80092e0:	3b04      	subs	r3, #4
 80092e2:	429d      	cmp	r5, r3
 80092e4:	461a      	mov	r2, r3
 80092e6:	d32e      	bcc.n	8009346 <quorem+0xfa>
 80092e8:	613c      	str	r4, [r7, #16]
 80092ea:	4638      	mov	r0, r7
 80092ec:	f001 fe9c 	bl	800b028 <__mcmp>
 80092f0:	2800      	cmp	r0, #0
 80092f2:	db24      	blt.n	800933e <quorem+0xf2>
 80092f4:	3601      	adds	r6, #1
 80092f6:	4628      	mov	r0, r5
 80092f8:	f04f 0c00 	mov.w	ip, #0
 80092fc:	f858 2b04 	ldr.w	r2, [r8], #4
 8009300:	f8d0 e000 	ldr.w	lr, [r0]
 8009304:	b293      	uxth	r3, r2
 8009306:	ebac 0303 	sub.w	r3, ip, r3
 800930a:	0c12      	lsrs	r2, r2, #16
 800930c:	fa13 f38e 	uxtah	r3, r3, lr
 8009310:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009314:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009318:	b29b      	uxth	r3, r3
 800931a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800931e:	45c1      	cmp	r9, r8
 8009320:	f840 3b04 	str.w	r3, [r0], #4
 8009324:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009328:	d2e8      	bcs.n	80092fc <quorem+0xb0>
 800932a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800932e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009332:	b922      	cbnz	r2, 800933e <quorem+0xf2>
 8009334:	3b04      	subs	r3, #4
 8009336:	429d      	cmp	r5, r3
 8009338:	461a      	mov	r2, r3
 800933a:	d30a      	bcc.n	8009352 <quorem+0x106>
 800933c:	613c      	str	r4, [r7, #16]
 800933e:	4630      	mov	r0, r6
 8009340:	b003      	add	sp, #12
 8009342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009346:	6812      	ldr	r2, [r2, #0]
 8009348:	3b04      	subs	r3, #4
 800934a:	2a00      	cmp	r2, #0
 800934c:	d1cc      	bne.n	80092e8 <quorem+0x9c>
 800934e:	3c01      	subs	r4, #1
 8009350:	e7c7      	b.n	80092e2 <quorem+0x96>
 8009352:	6812      	ldr	r2, [r2, #0]
 8009354:	3b04      	subs	r3, #4
 8009356:	2a00      	cmp	r2, #0
 8009358:	d1f0      	bne.n	800933c <quorem+0xf0>
 800935a:	3c01      	subs	r4, #1
 800935c:	e7eb      	b.n	8009336 <quorem+0xea>
 800935e:	2000      	movs	r0, #0
 8009360:	e7ee      	b.n	8009340 <quorem+0xf4>
 8009362:	0000      	movs	r0, r0
 8009364:	0000      	movs	r0, r0
	...

08009368 <_dtoa_r>:
 8009368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800936c:	ed2d 8b02 	vpush	{d8}
 8009370:	ec57 6b10 	vmov	r6, r7, d0
 8009374:	b095      	sub	sp, #84	; 0x54
 8009376:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009378:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800937c:	9105      	str	r1, [sp, #20]
 800937e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009382:	4604      	mov	r4, r0
 8009384:	9209      	str	r2, [sp, #36]	; 0x24
 8009386:	930f      	str	r3, [sp, #60]	; 0x3c
 8009388:	b975      	cbnz	r5, 80093a8 <_dtoa_r+0x40>
 800938a:	2010      	movs	r0, #16
 800938c:	f001 fb6a 	bl	800aa64 <malloc>
 8009390:	4602      	mov	r2, r0
 8009392:	6260      	str	r0, [r4, #36]	; 0x24
 8009394:	b920      	cbnz	r0, 80093a0 <_dtoa_r+0x38>
 8009396:	4bb2      	ldr	r3, [pc, #712]	; (8009660 <_dtoa_r+0x2f8>)
 8009398:	21ea      	movs	r1, #234	; 0xea
 800939a:	48b2      	ldr	r0, [pc, #712]	; (8009664 <_dtoa_r+0x2fc>)
 800939c:	f002 fc34 	bl	800bc08 <__assert_func>
 80093a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80093a4:	6005      	str	r5, [r0, #0]
 80093a6:	60c5      	str	r5, [r0, #12]
 80093a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093aa:	6819      	ldr	r1, [r3, #0]
 80093ac:	b151      	cbz	r1, 80093c4 <_dtoa_r+0x5c>
 80093ae:	685a      	ldr	r2, [r3, #4]
 80093b0:	604a      	str	r2, [r1, #4]
 80093b2:	2301      	movs	r3, #1
 80093b4:	4093      	lsls	r3, r2
 80093b6:	608b      	str	r3, [r1, #8]
 80093b8:	4620      	mov	r0, r4
 80093ba:	f001 fbad 	bl	800ab18 <_Bfree>
 80093be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093c0:	2200      	movs	r2, #0
 80093c2:	601a      	str	r2, [r3, #0]
 80093c4:	1e3b      	subs	r3, r7, #0
 80093c6:	bfb9      	ittee	lt
 80093c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80093cc:	9303      	strlt	r3, [sp, #12]
 80093ce:	2300      	movge	r3, #0
 80093d0:	f8c8 3000 	strge.w	r3, [r8]
 80093d4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80093d8:	4ba3      	ldr	r3, [pc, #652]	; (8009668 <_dtoa_r+0x300>)
 80093da:	bfbc      	itt	lt
 80093dc:	2201      	movlt	r2, #1
 80093de:	f8c8 2000 	strlt.w	r2, [r8]
 80093e2:	ea33 0309 	bics.w	r3, r3, r9
 80093e6:	d11b      	bne.n	8009420 <_dtoa_r+0xb8>
 80093e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80093ea:	f242 730f 	movw	r3, #9999	; 0x270f
 80093ee:	6013      	str	r3, [r2, #0]
 80093f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80093f4:	4333      	orrs	r3, r6
 80093f6:	f000 857a 	beq.w	8009eee <_dtoa_r+0xb86>
 80093fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80093fc:	b963      	cbnz	r3, 8009418 <_dtoa_r+0xb0>
 80093fe:	4b9b      	ldr	r3, [pc, #620]	; (800966c <_dtoa_r+0x304>)
 8009400:	e024      	b.n	800944c <_dtoa_r+0xe4>
 8009402:	4b9b      	ldr	r3, [pc, #620]	; (8009670 <_dtoa_r+0x308>)
 8009404:	9300      	str	r3, [sp, #0]
 8009406:	3308      	adds	r3, #8
 8009408:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800940a:	6013      	str	r3, [r2, #0]
 800940c:	9800      	ldr	r0, [sp, #0]
 800940e:	b015      	add	sp, #84	; 0x54
 8009410:	ecbd 8b02 	vpop	{d8}
 8009414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009418:	4b94      	ldr	r3, [pc, #592]	; (800966c <_dtoa_r+0x304>)
 800941a:	9300      	str	r3, [sp, #0]
 800941c:	3303      	adds	r3, #3
 800941e:	e7f3      	b.n	8009408 <_dtoa_r+0xa0>
 8009420:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009424:	2200      	movs	r2, #0
 8009426:	ec51 0b17 	vmov	r0, r1, d7
 800942a:	2300      	movs	r3, #0
 800942c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009430:	f7f7 fb4a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009434:	4680      	mov	r8, r0
 8009436:	b158      	cbz	r0, 8009450 <_dtoa_r+0xe8>
 8009438:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800943a:	2301      	movs	r3, #1
 800943c:	6013      	str	r3, [r2, #0]
 800943e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009440:	2b00      	cmp	r3, #0
 8009442:	f000 8551 	beq.w	8009ee8 <_dtoa_r+0xb80>
 8009446:	488b      	ldr	r0, [pc, #556]	; (8009674 <_dtoa_r+0x30c>)
 8009448:	6018      	str	r0, [r3, #0]
 800944a:	1e43      	subs	r3, r0, #1
 800944c:	9300      	str	r3, [sp, #0]
 800944e:	e7dd      	b.n	800940c <_dtoa_r+0xa4>
 8009450:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009454:	aa12      	add	r2, sp, #72	; 0x48
 8009456:	a913      	add	r1, sp, #76	; 0x4c
 8009458:	4620      	mov	r0, r4
 800945a:	f001 ff05 	bl	800b268 <__d2b>
 800945e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009462:	4683      	mov	fp, r0
 8009464:	2d00      	cmp	r5, #0
 8009466:	d07c      	beq.n	8009562 <_dtoa_r+0x1fa>
 8009468:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800946a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800946e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009472:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8009476:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800947a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800947e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009482:	4b7d      	ldr	r3, [pc, #500]	; (8009678 <_dtoa_r+0x310>)
 8009484:	2200      	movs	r2, #0
 8009486:	4630      	mov	r0, r6
 8009488:	4639      	mov	r1, r7
 800948a:	f7f6 fefd 	bl	8000288 <__aeabi_dsub>
 800948e:	a36e      	add	r3, pc, #440	; (adr r3, 8009648 <_dtoa_r+0x2e0>)
 8009490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009494:	f7f7 f8b0 	bl	80005f8 <__aeabi_dmul>
 8009498:	a36d      	add	r3, pc, #436	; (adr r3, 8009650 <_dtoa_r+0x2e8>)
 800949a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800949e:	f7f6 fef5 	bl	800028c <__adddf3>
 80094a2:	4606      	mov	r6, r0
 80094a4:	4628      	mov	r0, r5
 80094a6:	460f      	mov	r7, r1
 80094a8:	f7f7 f83c 	bl	8000524 <__aeabi_i2d>
 80094ac:	a36a      	add	r3, pc, #424	; (adr r3, 8009658 <_dtoa_r+0x2f0>)
 80094ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094b2:	f7f7 f8a1 	bl	80005f8 <__aeabi_dmul>
 80094b6:	4602      	mov	r2, r0
 80094b8:	460b      	mov	r3, r1
 80094ba:	4630      	mov	r0, r6
 80094bc:	4639      	mov	r1, r7
 80094be:	f7f6 fee5 	bl	800028c <__adddf3>
 80094c2:	4606      	mov	r6, r0
 80094c4:	460f      	mov	r7, r1
 80094c6:	f7f7 fb47 	bl	8000b58 <__aeabi_d2iz>
 80094ca:	2200      	movs	r2, #0
 80094cc:	4682      	mov	sl, r0
 80094ce:	2300      	movs	r3, #0
 80094d0:	4630      	mov	r0, r6
 80094d2:	4639      	mov	r1, r7
 80094d4:	f7f7 fb02 	bl	8000adc <__aeabi_dcmplt>
 80094d8:	b148      	cbz	r0, 80094ee <_dtoa_r+0x186>
 80094da:	4650      	mov	r0, sl
 80094dc:	f7f7 f822 	bl	8000524 <__aeabi_i2d>
 80094e0:	4632      	mov	r2, r6
 80094e2:	463b      	mov	r3, r7
 80094e4:	f7f7 faf0 	bl	8000ac8 <__aeabi_dcmpeq>
 80094e8:	b908      	cbnz	r0, 80094ee <_dtoa_r+0x186>
 80094ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80094ee:	f1ba 0f16 	cmp.w	sl, #22
 80094f2:	d854      	bhi.n	800959e <_dtoa_r+0x236>
 80094f4:	4b61      	ldr	r3, [pc, #388]	; (800967c <_dtoa_r+0x314>)
 80094f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80094fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009502:	f7f7 faeb 	bl	8000adc <__aeabi_dcmplt>
 8009506:	2800      	cmp	r0, #0
 8009508:	d04b      	beq.n	80095a2 <_dtoa_r+0x23a>
 800950a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800950e:	2300      	movs	r3, #0
 8009510:	930e      	str	r3, [sp, #56]	; 0x38
 8009512:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009514:	1b5d      	subs	r5, r3, r5
 8009516:	1e6b      	subs	r3, r5, #1
 8009518:	9304      	str	r3, [sp, #16]
 800951a:	bf43      	ittte	mi
 800951c:	2300      	movmi	r3, #0
 800951e:	f1c5 0801 	rsbmi	r8, r5, #1
 8009522:	9304      	strmi	r3, [sp, #16]
 8009524:	f04f 0800 	movpl.w	r8, #0
 8009528:	f1ba 0f00 	cmp.w	sl, #0
 800952c:	db3b      	blt.n	80095a6 <_dtoa_r+0x23e>
 800952e:	9b04      	ldr	r3, [sp, #16]
 8009530:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8009534:	4453      	add	r3, sl
 8009536:	9304      	str	r3, [sp, #16]
 8009538:	2300      	movs	r3, #0
 800953a:	9306      	str	r3, [sp, #24]
 800953c:	9b05      	ldr	r3, [sp, #20]
 800953e:	2b09      	cmp	r3, #9
 8009540:	d869      	bhi.n	8009616 <_dtoa_r+0x2ae>
 8009542:	2b05      	cmp	r3, #5
 8009544:	bfc4      	itt	gt
 8009546:	3b04      	subgt	r3, #4
 8009548:	9305      	strgt	r3, [sp, #20]
 800954a:	9b05      	ldr	r3, [sp, #20]
 800954c:	f1a3 0302 	sub.w	r3, r3, #2
 8009550:	bfcc      	ite	gt
 8009552:	2500      	movgt	r5, #0
 8009554:	2501      	movle	r5, #1
 8009556:	2b03      	cmp	r3, #3
 8009558:	d869      	bhi.n	800962e <_dtoa_r+0x2c6>
 800955a:	e8df f003 	tbb	[pc, r3]
 800955e:	4e2c      	.short	0x4e2c
 8009560:	5a4c      	.short	0x5a4c
 8009562:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009566:	441d      	add	r5, r3
 8009568:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800956c:	2b20      	cmp	r3, #32
 800956e:	bfc1      	itttt	gt
 8009570:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009574:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009578:	fa09 f303 	lslgt.w	r3, r9, r3
 800957c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009580:	bfda      	itte	le
 8009582:	f1c3 0320 	rsble	r3, r3, #32
 8009586:	fa06 f003 	lslle.w	r0, r6, r3
 800958a:	4318      	orrgt	r0, r3
 800958c:	f7f6 ffba 	bl	8000504 <__aeabi_ui2d>
 8009590:	2301      	movs	r3, #1
 8009592:	4606      	mov	r6, r0
 8009594:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009598:	3d01      	subs	r5, #1
 800959a:	9310      	str	r3, [sp, #64]	; 0x40
 800959c:	e771      	b.n	8009482 <_dtoa_r+0x11a>
 800959e:	2301      	movs	r3, #1
 80095a0:	e7b6      	b.n	8009510 <_dtoa_r+0x1a8>
 80095a2:	900e      	str	r0, [sp, #56]	; 0x38
 80095a4:	e7b5      	b.n	8009512 <_dtoa_r+0x1aa>
 80095a6:	f1ca 0300 	rsb	r3, sl, #0
 80095aa:	9306      	str	r3, [sp, #24]
 80095ac:	2300      	movs	r3, #0
 80095ae:	eba8 080a 	sub.w	r8, r8, sl
 80095b2:	930d      	str	r3, [sp, #52]	; 0x34
 80095b4:	e7c2      	b.n	800953c <_dtoa_r+0x1d4>
 80095b6:	2300      	movs	r3, #0
 80095b8:	9308      	str	r3, [sp, #32]
 80095ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095bc:	2b00      	cmp	r3, #0
 80095be:	dc39      	bgt.n	8009634 <_dtoa_r+0x2cc>
 80095c0:	f04f 0901 	mov.w	r9, #1
 80095c4:	f8cd 9004 	str.w	r9, [sp, #4]
 80095c8:	464b      	mov	r3, r9
 80095ca:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80095ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80095d0:	2200      	movs	r2, #0
 80095d2:	6042      	str	r2, [r0, #4]
 80095d4:	2204      	movs	r2, #4
 80095d6:	f102 0614 	add.w	r6, r2, #20
 80095da:	429e      	cmp	r6, r3
 80095dc:	6841      	ldr	r1, [r0, #4]
 80095de:	d92f      	bls.n	8009640 <_dtoa_r+0x2d8>
 80095e0:	4620      	mov	r0, r4
 80095e2:	f001 fa59 	bl	800aa98 <_Balloc>
 80095e6:	9000      	str	r0, [sp, #0]
 80095e8:	2800      	cmp	r0, #0
 80095ea:	d14b      	bne.n	8009684 <_dtoa_r+0x31c>
 80095ec:	4b24      	ldr	r3, [pc, #144]	; (8009680 <_dtoa_r+0x318>)
 80095ee:	4602      	mov	r2, r0
 80095f0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80095f4:	e6d1      	b.n	800939a <_dtoa_r+0x32>
 80095f6:	2301      	movs	r3, #1
 80095f8:	e7de      	b.n	80095b8 <_dtoa_r+0x250>
 80095fa:	2300      	movs	r3, #0
 80095fc:	9308      	str	r3, [sp, #32]
 80095fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009600:	eb0a 0903 	add.w	r9, sl, r3
 8009604:	f109 0301 	add.w	r3, r9, #1
 8009608:	2b01      	cmp	r3, #1
 800960a:	9301      	str	r3, [sp, #4]
 800960c:	bfb8      	it	lt
 800960e:	2301      	movlt	r3, #1
 8009610:	e7dd      	b.n	80095ce <_dtoa_r+0x266>
 8009612:	2301      	movs	r3, #1
 8009614:	e7f2      	b.n	80095fc <_dtoa_r+0x294>
 8009616:	2501      	movs	r5, #1
 8009618:	2300      	movs	r3, #0
 800961a:	9305      	str	r3, [sp, #20]
 800961c:	9508      	str	r5, [sp, #32]
 800961e:	f04f 39ff 	mov.w	r9, #4294967295
 8009622:	2200      	movs	r2, #0
 8009624:	f8cd 9004 	str.w	r9, [sp, #4]
 8009628:	2312      	movs	r3, #18
 800962a:	9209      	str	r2, [sp, #36]	; 0x24
 800962c:	e7cf      	b.n	80095ce <_dtoa_r+0x266>
 800962e:	2301      	movs	r3, #1
 8009630:	9308      	str	r3, [sp, #32]
 8009632:	e7f4      	b.n	800961e <_dtoa_r+0x2b6>
 8009634:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009638:	f8cd 9004 	str.w	r9, [sp, #4]
 800963c:	464b      	mov	r3, r9
 800963e:	e7c6      	b.n	80095ce <_dtoa_r+0x266>
 8009640:	3101      	adds	r1, #1
 8009642:	6041      	str	r1, [r0, #4]
 8009644:	0052      	lsls	r2, r2, #1
 8009646:	e7c6      	b.n	80095d6 <_dtoa_r+0x26e>
 8009648:	636f4361 	.word	0x636f4361
 800964c:	3fd287a7 	.word	0x3fd287a7
 8009650:	8b60c8b3 	.word	0x8b60c8b3
 8009654:	3fc68a28 	.word	0x3fc68a28
 8009658:	509f79fb 	.word	0x509f79fb
 800965c:	3fd34413 	.word	0x3fd34413
 8009660:	0800c0f6 	.word	0x0800c0f6
 8009664:	0800c10d 	.word	0x0800c10d
 8009668:	7ff00000 	.word	0x7ff00000
 800966c:	0800c0f2 	.word	0x0800c0f2
 8009670:	0800c0e9 	.word	0x0800c0e9
 8009674:	0800bf69 	.word	0x0800bf69
 8009678:	3ff80000 	.word	0x3ff80000
 800967c:	0800c2e8 	.word	0x0800c2e8
 8009680:	0800c16c 	.word	0x0800c16c
 8009684:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009686:	9a00      	ldr	r2, [sp, #0]
 8009688:	601a      	str	r2, [r3, #0]
 800968a:	9b01      	ldr	r3, [sp, #4]
 800968c:	2b0e      	cmp	r3, #14
 800968e:	f200 80ad 	bhi.w	80097ec <_dtoa_r+0x484>
 8009692:	2d00      	cmp	r5, #0
 8009694:	f000 80aa 	beq.w	80097ec <_dtoa_r+0x484>
 8009698:	f1ba 0f00 	cmp.w	sl, #0
 800969c:	dd36      	ble.n	800970c <_dtoa_r+0x3a4>
 800969e:	4ac3      	ldr	r2, [pc, #780]	; (80099ac <_dtoa_r+0x644>)
 80096a0:	f00a 030f 	and.w	r3, sl, #15
 80096a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80096a8:	ed93 7b00 	vldr	d7, [r3]
 80096ac:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80096b0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80096b4:	eeb0 8a47 	vmov.f32	s16, s14
 80096b8:	eef0 8a67 	vmov.f32	s17, s15
 80096bc:	d016      	beq.n	80096ec <_dtoa_r+0x384>
 80096be:	4bbc      	ldr	r3, [pc, #752]	; (80099b0 <_dtoa_r+0x648>)
 80096c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80096c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80096c8:	f7f7 f8c0 	bl	800084c <__aeabi_ddiv>
 80096cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80096d0:	f007 070f 	and.w	r7, r7, #15
 80096d4:	2503      	movs	r5, #3
 80096d6:	4eb6      	ldr	r6, [pc, #728]	; (80099b0 <_dtoa_r+0x648>)
 80096d8:	b957      	cbnz	r7, 80096f0 <_dtoa_r+0x388>
 80096da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096de:	ec53 2b18 	vmov	r2, r3, d8
 80096e2:	f7f7 f8b3 	bl	800084c <__aeabi_ddiv>
 80096e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80096ea:	e029      	b.n	8009740 <_dtoa_r+0x3d8>
 80096ec:	2502      	movs	r5, #2
 80096ee:	e7f2      	b.n	80096d6 <_dtoa_r+0x36e>
 80096f0:	07f9      	lsls	r1, r7, #31
 80096f2:	d508      	bpl.n	8009706 <_dtoa_r+0x39e>
 80096f4:	ec51 0b18 	vmov	r0, r1, d8
 80096f8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80096fc:	f7f6 ff7c 	bl	80005f8 <__aeabi_dmul>
 8009700:	ec41 0b18 	vmov	d8, r0, r1
 8009704:	3501      	adds	r5, #1
 8009706:	107f      	asrs	r7, r7, #1
 8009708:	3608      	adds	r6, #8
 800970a:	e7e5      	b.n	80096d8 <_dtoa_r+0x370>
 800970c:	f000 80a6 	beq.w	800985c <_dtoa_r+0x4f4>
 8009710:	f1ca 0600 	rsb	r6, sl, #0
 8009714:	4ba5      	ldr	r3, [pc, #660]	; (80099ac <_dtoa_r+0x644>)
 8009716:	4fa6      	ldr	r7, [pc, #664]	; (80099b0 <_dtoa_r+0x648>)
 8009718:	f006 020f 	and.w	r2, r6, #15
 800971c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009724:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009728:	f7f6 ff66 	bl	80005f8 <__aeabi_dmul>
 800972c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009730:	1136      	asrs	r6, r6, #4
 8009732:	2300      	movs	r3, #0
 8009734:	2502      	movs	r5, #2
 8009736:	2e00      	cmp	r6, #0
 8009738:	f040 8085 	bne.w	8009846 <_dtoa_r+0x4de>
 800973c:	2b00      	cmp	r3, #0
 800973e:	d1d2      	bne.n	80096e6 <_dtoa_r+0x37e>
 8009740:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009742:	2b00      	cmp	r3, #0
 8009744:	f000 808c 	beq.w	8009860 <_dtoa_r+0x4f8>
 8009748:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800974c:	4b99      	ldr	r3, [pc, #612]	; (80099b4 <_dtoa_r+0x64c>)
 800974e:	2200      	movs	r2, #0
 8009750:	4630      	mov	r0, r6
 8009752:	4639      	mov	r1, r7
 8009754:	f7f7 f9c2 	bl	8000adc <__aeabi_dcmplt>
 8009758:	2800      	cmp	r0, #0
 800975a:	f000 8081 	beq.w	8009860 <_dtoa_r+0x4f8>
 800975e:	9b01      	ldr	r3, [sp, #4]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d07d      	beq.n	8009860 <_dtoa_r+0x4f8>
 8009764:	f1b9 0f00 	cmp.w	r9, #0
 8009768:	dd3c      	ble.n	80097e4 <_dtoa_r+0x47c>
 800976a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800976e:	9307      	str	r3, [sp, #28]
 8009770:	2200      	movs	r2, #0
 8009772:	4b91      	ldr	r3, [pc, #580]	; (80099b8 <_dtoa_r+0x650>)
 8009774:	4630      	mov	r0, r6
 8009776:	4639      	mov	r1, r7
 8009778:	f7f6 ff3e 	bl	80005f8 <__aeabi_dmul>
 800977c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009780:	3501      	adds	r5, #1
 8009782:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8009786:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800978a:	4628      	mov	r0, r5
 800978c:	f7f6 feca 	bl	8000524 <__aeabi_i2d>
 8009790:	4632      	mov	r2, r6
 8009792:	463b      	mov	r3, r7
 8009794:	f7f6 ff30 	bl	80005f8 <__aeabi_dmul>
 8009798:	4b88      	ldr	r3, [pc, #544]	; (80099bc <_dtoa_r+0x654>)
 800979a:	2200      	movs	r2, #0
 800979c:	f7f6 fd76 	bl	800028c <__adddf3>
 80097a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80097a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097a8:	9303      	str	r3, [sp, #12]
 80097aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d15c      	bne.n	800986a <_dtoa_r+0x502>
 80097b0:	4b83      	ldr	r3, [pc, #524]	; (80099c0 <_dtoa_r+0x658>)
 80097b2:	2200      	movs	r2, #0
 80097b4:	4630      	mov	r0, r6
 80097b6:	4639      	mov	r1, r7
 80097b8:	f7f6 fd66 	bl	8000288 <__aeabi_dsub>
 80097bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80097c0:	4606      	mov	r6, r0
 80097c2:	460f      	mov	r7, r1
 80097c4:	f7f7 f9a8 	bl	8000b18 <__aeabi_dcmpgt>
 80097c8:	2800      	cmp	r0, #0
 80097ca:	f040 8296 	bne.w	8009cfa <_dtoa_r+0x992>
 80097ce:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80097d2:	4630      	mov	r0, r6
 80097d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80097d8:	4639      	mov	r1, r7
 80097da:	f7f7 f97f 	bl	8000adc <__aeabi_dcmplt>
 80097de:	2800      	cmp	r0, #0
 80097e0:	f040 8288 	bne.w	8009cf4 <_dtoa_r+0x98c>
 80097e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80097e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80097ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	f2c0 8158 	blt.w	8009aa4 <_dtoa_r+0x73c>
 80097f4:	f1ba 0f0e 	cmp.w	sl, #14
 80097f8:	f300 8154 	bgt.w	8009aa4 <_dtoa_r+0x73c>
 80097fc:	4b6b      	ldr	r3, [pc, #428]	; (80099ac <_dtoa_r+0x644>)
 80097fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009802:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009808:	2b00      	cmp	r3, #0
 800980a:	f280 80e3 	bge.w	80099d4 <_dtoa_r+0x66c>
 800980e:	9b01      	ldr	r3, [sp, #4]
 8009810:	2b00      	cmp	r3, #0
 8009812:	f300 80df 	bgt.w	80099d4 <_dtoa_r+0x66c>
 8009816:	f040 826d 	bne.w	8009cf4 <_dtoa_r+0x98c>
 800981a:	4b69      	ldr	r3, [pc, #420]	; (80099c0 <_dtoa_r+0x658>)
 800981c:	2200      	movs	r2, #0
 800981e:	4640      	mov	r0, r8
 8009820:	4649      	mov	r1, r9
 8009822:	f7f6 fee9 	bl	80005f8 <__aeabi_dmul>
 8009826:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800982a:	f7f7 f96b 	bl	8000b04 <__aeabi_dcmpge>
 800982e:	9e01      	ldr	r6, [sp, #4]
 8009830:	4637      	mov	r7, r6
 8009832:	2800      	cmp	r0, #0
 8009834:	f040 8243 	bne.w	8009cbe <_dtoa_r+0x956>
 8009838:	9d00      	ldr	r5, [sp, #0]
 800983a:	2331      	movs	r3, #49	; 0x31
 800983c:	f805 3b01 	strb.w	r3, [r5], #1
 8009840:	f10a 0a01 	add.w	sl, sl, #1
 8009844:	e23f      	b.n	8009cc6 <_dtoa_r+0x95e>
 8009846:	07f2      	lsls	r2, r6, #31
 8009848:	d505      	bpl.n	8009856 <_dtoa_r+0x4ee>
 800984a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800984e:	f7f6 fed3 	bl	80005f8 <__aeabi_dmul>
 8009852:	3501      	adds	r5, #1
 8009854:	2301      	movs	r3, #1
 8009856:	1076      	asrs	r6, r6, #1
 8009858:	3708      	adds	r7, #8
 800985a:	e76c      	b.n	8009736 <_dtoa_r+0x3ce>
 800985c:	2502      	movs	r5, #2
 800985e:	e76f      	b.n	8009740 <_dtoa_r+0x3d8>
 8009860:	9b01      	ldr	r3, [sp, #4]
 8009862:	f8cd a01c 	str.w	sl, [sp, #28]
 8009866:	930c      	str	r3, [sp, #48]	; 0x30
 8009868:	e78d      	b.n	8009786 <_dtoa_r+0x41e>
 800986a:	9900      	ldr	r1, [sp, #0]
 800986c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800986e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009870:	4b4e      	ldr	r3, [pc, #312]	; (80099ac <_dtoa_r+0x644>)
 8009872:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009876:	4401      	add	r1, r0
 8009878:	9102      	str	r1, [sp, #8]
 800987a:	9908      	ldr	r1, [sp, #32]
 800987c:	eeb0 8a47 	vmov.f32	s16, s14
 8009880:	eef0 8a67 	vmov.f32	s17, s15
 8009884:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009888:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800988c:	2900      	cmp	r1, #0
 800988e:	d045      	beq.n	800991c <_dtoa_r+0x5b4>
 8009890:	494c      	ldr	r1, [pc, #304]	; (80099c4 <_dtoa_r+0x65c>)
 8009892:	2000      	movs	r0, #0
 8009894:	f7f6 ffda 	bl	800084c <__aeabi_ddiv>
 8009898:	ec53 2b18 	vmov	r2, r3, d8
 800989c:	f7f6 fcf4 	bl	8000288 <__aeabi_dsub>
 80098a0:	9d00      	ldr	r5, [sp, #0]
 80098a2:	ec41 0b18 	vmov	d8, r0, r1
 80098a6:	4639      	mov	r1, r7
 80098a8:	4630      	mov	r0, r6
 80098aa:	f7f7 f955 	bl	8000b58 <__aeabi_d2iz>
 80098ae:	900c      	str	r0, [sp, #48]	; 0x30
 80098b0:	f7f6 fe38 	bl	8000524 <__aeabi_i2d>
 80098b4:	4602      	mov	r2, r0
 80098b6:	460b      	mov	r3, r1
 80098b8:	4630      	mov	r0, r6
 80098ba:	4639      	mov	r1, r7
 80098bc:	f7f6 fce4 	bl	8000288 <__aeabi_dsub>
 80098c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80098c2:	3330      	adds	r3, #48	; 0x30
 80098c4:	f805 3b01 	strb.w	r3, [r5], #1
 80098c8:	ec53 2b18 	vmov	r2, r3, d8
 80098cc:	4606      	mov	r6, r0
 80098ce:	460f      	mov	r7, r1
 80098d0:	f7f7 f904 	bl	8000adc <__aeabi_dcmplt>
 80098d4:	2800      	cmp	r0, #0
 80098d6:	d165      	bne.n	80099a4 <_dtoa_r+0x63c>
 80098d8:	4632      	mov	r2, r6
 80098da:	463b      	mov	r3, r7
 80098dc:	4935      	ldr	r1, [pc, #212]	; (80099b4 <_dtoa_r+0x64c>)
 80098de:	2000      	movs	r0, #0
 80098e0:	f7f6 fcd2 	bl	8000288 <__aeabi_dsub>
 80098e4:	ec53 2b18 	vmov	r2, r3, d8
 80098e8:	f7f7 f8f8 	bl	8000adc <__aeabi_dcmplt>
 80098ec:	2800      	cmp	r0, #0
 80098ee:	f040 80b9 	bne.w	8009a64 <_dtoa_r+0x6fc>
 80098f2:	9b02      	ldr	r3, [sp, #8]
 80098f4:	429d      	cmp	r5, r3
 80098f6:	f43f af75 	beq.w	80097e4 <_dtoa_r+0x47c>
 80098fa:	4b2f      	ldr	r3, [pc, #188]	; (80099b8 <_dtoa_r+0x650>)
 80098fc:	ec51 0b18 	vmov	r0, r1, d8
 8009900:	2200      	movs	r2, #0
 8009902:	f7f6 fe79 	bl	80005f8 <__aeabi_dmul>
 8009906:	4b2c      	ldr	r3, [pc, #176]	; (80099b8 <_dtoa_r+0x650>)
 8009908:	ec41 0b18 	vmov	d8, r0, r1
 800990c:	2200      	movs	r2, #0
 800990e:	4630      	mov	r0, r6
 8009910:	4639      	mov	r1, r7
 8009912:	f7f6 fe71 	bl	80005f8 <__aeabi_dmul>
 8009916:	4606      	mov	r6, r0
 8009918:	460f      	mov	r7, r1
 800991a:	e7c4      	b.n	80098a6 <_dtoa_r+0x53e>
 800991c:	ec51 0b17 	vmov	r0, r1, d7
 8009920:	f7f6 fe6a 	bl	80005f8 <__aeabi_dmul>
 8009924:	9b02      	ldr	r3, [sp, #8]
 8009926:	9d00      	ldr	r5, [sp, #0]
 8009928:	930c      	str	r3, [sp, #48]	; 0x30
 800992a:	ec41 0b18 	vmov	d8, r0, r1
 800992e:	4639      	mov	r1, r7
 8009930:	4630      	mov	r0, r6
 8009932:	f7f7 f911 	bl	8000b58 <__aeabi_d2iz>
 8009936:	9011      	str	r0, [sp, #68]	; 0x44
 8009938:	f7f6 fdf4 	bl	8000524 <__aeabi_i2d>
 800993c:	4602      	mov	r2, r0
 800993e:	460b      	mov	r3, r1
 8009940:	4630      	mov	r0, r6
 8009942:	4639      	mov	r1, r7
 8009944:	f7f6 fca0 	bl	8000288 <__aeabi_dsub>
 8009948:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800994a:	3330      	adds	r3, #48	; 0x30
 800994c:	f805 3b01 	strb.w	r3, [r5], #1
 8009950:	9b02      	ldr	r3, [sp, #8]
 8009952:	429d      	cmp	r5, r3
 8009954:	4606      	mov	r6, r0
 8009956:	460f      	mov	r7, r1
 8009958:	f04f 0200 	mov.w	r2, #0
 800995c:	d134      	bne.n	80099c8 <_dtoa_r+0x660>
 800995e:	4b19      	ldr	r3, [pc, #100]	; (80099c4 <_dtoa_r+0x65c>)
 8009960:	ec51 0b18 	vmov	r0, r1, d8
 8009964:	f7f6 fc92 	bl	800028c <__adddf3>
 8009968:	4602      	mov	r2, r0
 800996a:	460b      	mov	r3, r1
 800996c:	4630      	mov	r0, r6
 800996e:	4639      	mov	r1, r7
 8009970:	f7f7 f8d2 	bl	8000b18 <__aeabi_dcmpgt>
 8009974:	2800      	cmp	r0, #0
 8009976:	d175      	bne.n	8009a64 <_dtoa_r+0x6fc>
 8009978:	ec53 2b18 	vmov	r2, r3, d8
 800997c:	4911      	ldr	r1, [pc, #68]	; (80099c4 <_dtoa_r+0x65c>)
 800997e:	2000      	movs	r0, #0
 8009980:	f7f6 fc82 	bl	8000288 <__aeabi_dsub>
 8009984:	4602      	mov	r2, r0
 8009986:	460b      	mov	r3, r1
 8009988:	4630      	mov	r0, r6
 800998a:	4639      	mov	r1, r7
 800998c:	f7f7 f8a6 	bl	8000adc <__aeabi_dcmplt>
 8009990:	2800      	cmp	r0, #0
 8009992:	f43f af27 	beq.w	80097e4 <_dtoa_r+0x47c>
 8009996:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009998:	1e6b      	subs	r3, r5, #1
 800999a:	930c      	str	r3, [sp, #48]	; 0x30
 800999c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80099a0:	2b30      	cmp	r3, #48	; 0x30
 80099a2:	d0f8      	beq.n	8009996 <_dtoa_r+0x62e>
 80099a4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80099a8:	e04a      	b.n	8009a40 <_dtoa_r+0x6d8>
 80099aa:	bf00      	nop
 80099ac:	0800c2e8 	.word	0x0800c2e8
 80099b0:	0800c2c0 	.word	0x0800c2c0
 80099b4:	3ff00000 	.word	0x3ff00000
 80099b8:	40240000 	.word	0x40240000
 80099bc:	401c0000 	.word	0x401c0000
 80099c0:	40140000 	.word	0x40140000
 80099c4:	3fe00000 	.word	0x3fe00000
 80099c8:	4baf      	ldr	r3, [pc, #700]	; (8009c88 <_dtoa_r+0x920>)
 80099ca:	f7f6 fe15 	bl	80005f8 <__aeabi_dmul>
 80099ce:	4606      	mov	r6, r0
 80099d0:	460f      	mov	r7, r1
 80099d2:	e7ac      	b.n	800992e <_dtoa_r+0x5c6>
 80099d4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80099d8:	9d00      	ldr	r5, [sp, #0]
 80099da:	4642      	mov	r2, r8
 80099dc:	464b      	mov	r3, r9
 80099de:	4630      	mov	r0, r6
 80099e0:	4639      	mov	r1, r7
 80099e2:	f7f6 ff33 	bl	800084c <__aeabi_ddiv>
 80099e6:	f7f7 f8b7 	bl	8000b58 <__aeabi_d2iz>
 80099ea:	9002      	str	r0, [sp, #8]
 80099ec:	f7f6 fd9a 	bl	8000524 <__aeabi_i2d>
 80099f0:	4642      	mov	r2, r8
 80099f2:	464b      	mov	r3, r9
 80099f4:	f7f6 fe00 	bl	80005f8 <__aeabi_dmul>
 80099f8:	4602      	mov	r2, r0
 80099fa:	460b      	mov	r3, r1
 80099fc:	4630      	mov	r0, r6
 80099fe:	4639      	mov	r1, r7
 8009a00:	f7f6 fc42 	bl	8000288 <__aeabi_dsub>
 8009a04:	9e02      	ldr	r6, [sp, #8]
 8009a06:	9f01      	ldr	r7, [sp, #4]
 8009a08:	3630      	adds	r6, #48	; 0x30
 8009a0a:	f805 6b01 	strb.w	r6, [r5], #1
 8009a0e:	9e00      	ldr	r6, [sp, #0]
 8009a10:	1bae      	subs	r6, r5, r6
 8009a12:	42b7      	cmp	r7, r6
 8009a14:	4602      	mov	r2, r0
 8009a16:	460b      	mov	r3, r1
 8009a18:	d137      	bne.n	8009a8a <_dtoa_r+0x722>
 8009a1a:	f7f6 fc37 	bl	800028c <__adddf3>
 8009a1e:	4642      	mov	r2, r8
 8009a20:	464b      	mov	r3, r9
 8009a22:	4606      	mov	r6, r0
 8009a24:	460f      	mov	r7, r1
 8009a26:	f7f7 f877 	bl	8000b18 <__aeabi_dcmpgt>
 8009a2a:	b9c8      	cbnz	r0, 8009a60 <_dtoa_r+0x6f8>
 8009a2c:	4642      	mov	r2, r8
 8009a2e:	464b      	mov	r3, r9
 8009a30:	4630      	mov	r0, r6
 8009a32:	4639      	mov	r1, r7
 8009a34:	f7f7 f848 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a38:	b110      	cbz	r0, 8009a40 <_dtoa_r+0x6d8>
 8009a3a:	9b02      	ldr	r3, [sp, #8]
 8009a3c:	07d9      	lsls	r1, r3, #31
 8009a3e:	d40f      	bmi.n	8009a60 <_dtoa_r+0x6f8>
 8009a40:	4620      	mov	r0, r4
 8009a42:	4659      	mov	r1, fp
 8009a44:	f001 f868 	bl	800ab18 <_Bfree>
 8009a48:	2300      	movs	r3, #0
 8009a4a:	702b      	strb	r3, [r5, #0]
 8009a4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a4e:	f10a 0001 	add.w	r0, sl, #1
 8009a52:	6018      	str	r0, [r3, #0]
 8009a54:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	f43f acd8 	beq.w	800940c <_dtoa_r+0xa4>
 8009a5c:	601d      	str	r5, [r3, #0]
 8009a5e:	e4d5      	b.n	800940c <_dtoa_r+0xa4>
 8009a60:	f8cd a01c 	str.w	sl, [sp, #28]
 8009a64:	462b      	mov	r3, r5
 8009a66:	461d      	mov	r5, r3
 8009a68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009a6c:	2a39      	cmp	r2, #57	; 0x39
 8009a6e:	d108      	bne.n	8009a82 <_dtoa_r+0x71a>
 8009a70:	9a00      	ldr	r2, [sp, #0]
 8009a72:	429a      	cmp	r2, r3
 8009a74:	d1f7      	bne.n	8009a66 <_dtoa_r+0x6fe>
 8009a76:	9a07      	ldr	r2, [sp, #28]
 8009a78:	9900      	ldr	r1, [sp, #0]
 8009a7a:	3201      	adds	r2, #1
 8009a7c:	9207      	str	r2, [sp, #28]
 8009a7e:	2230      	movs	r2, #48	; 0x30
 8009a80:	700a      	strb	r2, [r1, #0]
 8009a82:	781a      	ldrb	r2, [r3, #0]
 8009a84:	3201      	adds	r2, #1
 8009a86:	701a      	strb	r2, [r3, #0]
 8009a88:	e78c      	b.n	80099a4 <_dtoa_r+0x63c>
 8009a8a:	4b7f      	ldr	r3, [pc, #508]	; (8009c88 <_dtoa_r+0x920>)
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	f7f6 fdb3 	bl	80005f8 <__aeabi_dmul>
 8009a92:	2200      	movs	r2, #0
 8009a94:	2300      	movs	r3, #0
 8009a96:	4606      	mov	r6, r0
 8009a98:	460f      	mov	r7, r1
 8009a9a:	f7f7 f815 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a9e:	2800      	cmp	r0, #0
 8009aa0:	d09b      	beq.n	80099da <_dtoa_r+0x672>
 8009aa2:	e7cd      	b.n	8009a40 <_dtoa_r+0x6d8>
 8009aa4:	9a08      	ldr	r2, [sp, #32]
 8009aa6:	2a00      	cmp	r2, #0
 8009aa8:	f000 80c4 	beq.w	8009c34 <_dtoa_r+0x8cc>
 8009aac:	9a05      	ldr	r2, [sp, #20]
 8009aae:	2a01      	cmp	r2, #1
 8009ab0:	f300 80a8 	bgt.w	8009c04 <_dtoa_r+0x89c>
 8009ab4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009ab6:	2a00      	cmp	r2, #0
 8009ab8:	f000 80a0 	beq.w	8009bfc <_dtoa_r+0x894>
 8009abc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009ac0:	9e06      	ldr	r6, [sp, #24]
 8009ac2:	4645      	mov	r5, r8
 8009ac4:	9a04      	ldr	r2, [sp, #16]
 8009ac6:	2101      	movs	r1, #1
 8009ac8:	441a      	add	r2, r3
 8009aca:	4620      	mov	r0, r4
 8009acc:	4498      	add	r8, r3
 8009ace:	9204      	str	r2, [sp, #16]
 8009ad0:	f001 f928 	bl	800ad24 <__i2b>
 8009ad4:	4607      	mov	r7, r0
 8009ad6:	2d00      	cmp	r5, #0
 8009ad8:	dd0b      	ble.n	8009af2 <_dtoa_r+0x78a>
 8009ada:	9b04      	ldr	r3, [sp, #16]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	dd08      	ble.n	8009af2 <_dtoa_r+0x78a>
 8009ae0:	42ab      	cmp	r3, r5
 8009ae2:	9a04      	ldr	r2, [sp, #16]
 8009ae4:	bfa8      	it	ge
 8009ae6:	462b      	movge	r3, r5
 8009ae8:	eba8 0803 	sub.w	r8, r8, r3
 8009aec:	1aed      	subs	r5, r5, r3
 8009aee:	1ad3      	subs	r3, r2, r3
 8009af0:	9304      	str	r3, [sp, #16]
 8009af2:	9b06      	ldr	r3, [sp, #24]
 8009af4:	b1fb      	cbz	r3, 8009b36 <_dtoa_r+0x7ce>
 8009af6:	9b08      	ldr	r3, [sp, #32]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	f000 809f 	beq.w	8009c3c <_dtoa_r+0x8d4>
 8009afe:	2e00      	cmp	r6, #0
 8009b00:	dd11      	ble.n	8009b26 <_dtoa_r+0x7be>
 8009b02:	4639      	mov	r1, r7
 8009b04:	4632      	mov	r2, r6
 8009b06:	4620      	mov	r0, r4
 8009b08:	f001 f9c8 	bl	800ae9c <__pow5mult>
 8009b0c:	465a      	mov	r2, fp
 8009b0e:	4601      	mov	r1, r0
 8009b10:	4607      	mov	r7, r0
 8009b12:	4620      	mov	r0, r4
 8009b14:	f001 f91c 	bl	800ad50 <__multiply>
 8009b18:	4659      	mov	r1, fp
 8009b1a:	9007      	str	r0, [sp, #28]
 8009b1c:	4620      	mov	r0, r4
 8009b1e:	f000 fffb 	bl	800ab18 <_Bfree>
 8009b22:	9b07      	ldr	r3, [sp, #28]
 8009b24:	469b      	mov	fp, r3
 8009b26:	9b06      	ldr	r3, [sp, #24]
 8009b28:	1b9a      	subs	r2, r3, r6
 8009b2a:	d004      	beq.n	8009b36 <_dtoa_r+0x7ce>
 8009b2c:	4659      	mov	r1, fp
 8009b2e:	4620      	mov	r0, r4
 8009b30:	f001 f9b4 	bl	800ae9c <__pow5mult>
 8009b34:	4683      	mov	fp, r0
 8009b36:	2101      	movs	r1, #1
 8009b38:	4620      	mov	r0, r4
 8009b3a:	f001 f8f3 	bl	800ad24 <__i2b>
 8009b3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	4606      	mov	r6, r0
 8009b44:	dd7c      	ble.n	8009c40 <_dtoa_r+0x8d8>
 8009b46:	461a      	mov	r2, r3
 8009b48:	4601      	mov	r1, r0
 8009b4a:	4620      	mov	r0, r4
 8009b4c:	f001 f9a6 	bl	800ae9c <__pow5mult>
 8009b50:	9b05      	ldr	r3, [sp, #20]
 8009b52:	2b01      	cmp	r3, #1
 8009b54:	4606      	mov	r6, r0
 8009b56:	dd76      	ble.n	8009c46 <_dtoa_r+0x8de>
 8009b58:	2300      	movs	r3, #0
 8009b5a:	9306      	str	r3, [sp, #24]
 8009b5c:	6933      	ldr	r3, [r6, #16]
 8009b5e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009b62:	6918      	ldr	r0, [r3, #16]
 8009b64:	f001 f88e 	bl	800ac84 <__hi0bits>
 8009b68:	f1c0 0020 	rsb	r0, r0, #32
 8009b6c:	9b04      	ldr	r3, [sp, #16]
 8009b6e:	4418      	add	r0, r3
 8009b70:	f010 001f 	ands.w	r0, r0, #31
 8009b74:	f000 8086 	beq.w	8009c84 <_dtoa_r+0x91c>
 8009b78:	f1c0 0320 	rsb	r3, r0, #32
 8009b7c:	2b04      	cmp	r3, #4
 8009b7e:	dd7f      	ble.n	8009c80 <_dtoa_r+0x918>
 8009b80:	f1c0 001c 	rsb	r0, r0, #28
 8009b84:	9b04      	ldr	r3, [sp, #16]
 8009b86:	4403      	add	r3, r0
 8009b88:	4480      	add	r8, r0
 8009b8a:	4405      	add	r5, r0
 8009b8c:	9304      	str	r3, [sp, #16]
 8009b8e:	f1b8 0f00 	cmp.w	r8, #0
 8009b92:	dd05      	ble.n	8009ba0 <_dtoa_r+0x838>
 8009b94:	4659      	mov	r1, fp
 8009b96:	4642      	mov	r2, r8
 8009b98:	4620      	mov	r0, r4
 8009b9a:	f001 f9d9 	bl	800af50 <__lshift>
 8009b9e:	4683      	mov	fp, r0
 8009ba0:	9b04      	ldr	r3, [sp, #16]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	dd05      	ble.n	8009bb2 <_dtoa_r+0x84a>
 8009ba6:	4631      	mov	r1, r6
 8009ba8:	461a      	mov	r2, r3
 8009baa:	4620      	mov	r0, r4
 8009bac:	f001 f9d0 	bl	800af50 <__lshift>
 8009bb0:	4606      	mov	r6, r0
 8009bb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d069      	beq.n	8009c8c <_dtoa_r+0x924>
 8009bb8:	4631      	mov	r1, r6
 8009bba:	4658      	mov	r0, fp
 8009bbc:	f001 fa34 	bl	800b028 <__mcmp>
 8009bc0:	2800      	cmp	r0, #0
 8009bc2:	da63      	bge.n	8009c8c <_dtoa_r+0x924>
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	4659      	mov	r1, fp
 8009bc8:	220a      	movs	r2, #10
 8009bca:	4620      	mov	r0, r4
 8009bcc:	f000 ffc6 	bl	800ab5c <__multadd>
 8009bd0:	9b08      	ldr	r3, [sp, #32]
 8009bd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009bd6:	4683      	mov	fp, r0
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	f000 818f 	beq.w	8009efc <_dtoa_r+0xb94>
 8009bde:	4639      	mov	r1, r7
 8009be0:	2300      	movs	r3, #0
 8009be2:	220a      	movs	r2, #10
 8009be4:	4620      	mov	r0, r4
 8009be6:	f000 ffb9 	bl	800ab5c <__multadd>
 8009bea:	f1b9 0f00 	cmp.w	r9, #0
 8009bee:	4607      	mov	r7, r0
 8009bf0:	f300 808e 	bgt.w	8009d10 <_dtoa_r+0x9a8>
 8009bf4:	9b05      	ldr	r3, [sp, #20]
 8009bf6:	2b02      	cmp	r3, #2
 8009bf8:	dc50      	bgt.n	8009c9c <_dtoa_r+0x934>
 8009bfa:	e089      	b.n	8009d10 <_dtoa_r+0x9a8>
 8009bfc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009bfe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009c02:	e75d      	b.n	8009ac0 <_dtoa_r+0x758>
 8009c04:	9b01      	ldr	r3, [sp, #4]
 8009c06:	1e5e      	subs	r6, r3, #1
 8009c08:	9b06      	ldr	r3, [sp, #24]
 8009c0a:	42b3      	cmp	r3, r6
 8009c0c:	bfbf      	itttt	lt
 8009c0e:	9b06      	ldrlt	r3, [sp, #24]
 8009c10:	9606      	strlt	r6, [sp, #24]
 8009c12:	1af2      	sublt	r2, r6, r3
 8009c14:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8009c16:	bfb6      	itet	lt
 8009c18:	189b      	addlt	r3, r3, r2
 8009c1a:	1b9e      	subge	r6, r3, r6
 8009c1c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8009c1e:	9b01      	ldr	r3, [sp, #4]
 8009c20:	bfb8      	it	lt
 8009c22:	2600      	movlt	r6, #0
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	bfb5      	itete	lt
 8009c28:	eba8 0503 	sublt.w	r5, r8, r3
 8009c2c:	9b01      	ldrge	r3, [sp, #4]
 8009c2e:	2300      	movlt	r3, #0
 8009c30:	4645      	movge	r5, r8
 8009c32:	e747      	b.n	8009ac4 <_dtoa_r+0x75c>
 8009c34:	9e06      	ldr	r6, [sp, #24]
 8009c36:	9f08      	ldr	r7, [sp, #32]
 8009c38:	4645      	mov	r5, r8
 8009c3a:	e74c      	b.n	8009ad6 <_dtoa_r+0x76e>
 8009c3c:	9a06      	ldr	r2, [sp, #24]
 8009c3e:	e775      	b.n	8009b2c <_dtoa_r+0x7c4>
 8009c40:	9b05      	ldr	r3, [sp, #20]
 8009c42:	2b01      	cmp	r3, #1
 8009c44:	dc18      	bgt.n	8009c78 <_dtoa_r+0x910>
 8009c46:	9b02      	ldr	r3, [sp, #8]
 8009c48:	b9b3      	cbnz	r3, 8009c78 <_dtoa_r+0x910>
 8009c4a:	9b03      	ldr	r3, [sp, #12]
 8009c4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c50:	b9a3      	cbnz	r3, 8009c7c <_dtoa_r+0x914>
 8009c52:	9b03      	ldr	r3, [sp, #12]
 8009c54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009c58:	0d1b      	lsrs	r3, r3, #20
 8009c5a:	051b      	lsls	r3, r3, #20
 8009c5c:	b12b      	cbz	r3, 8009c6a <_dtoa_r+0x902>
 8009c5e:	9b04      	ldr	r3, [sp, #16]
 8009c60:	3301      	adds	r3, #1
 8009c62:	9304      	str	r3, [sp, #16]
 8009c64:	f108 0801 	add.w	r8, r8, #1
 8009c68:	2301      	movs	r3, #1
 8009c6a:	9306      	str	r3, [sp, #24]
 8009c6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	f47f af74 	bne.w	8009b5c <_dtoa_r+0x7f4>
 8009c74:	2001      	movs	r0, #1
 8009c76:	e779      	b.n	8009b6c <_dtoa_r+0x804>
 8009c78:	2300      	movs	r3, #0
 8009c7a:	e7f6      	b.n	8009c6a <_dtoa_r+0x902>
 8009c7c:	9b02      	ldr	r3, [sp, #8]
 8009c7e:	e7f4      	b.n	8009c6a <_dtoa_r+0x902>
 8009c80:	d085      	beq.n	8009b8e <_dtoa_r+0x826>
 8009c82:	4618      	mov	r0, r3
 8009c84:	301c      	adds	r0, #28
 8009c86:	e77d      	b.n	8009b84 <_dtoa_r+0x81c>
 8009c88:	40240000 	.word	0x40240000
 8009c8c:	9b01      	ldr	r3, [sp, #4]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	dc38      	bgt.n	8009d04 <_dtoa_r+0x99c>
 8009c92:	9b05      	ldr	r3, [sp, #20]
 8009c94:	2b02      	cmp	r3, #2
 8009c96:	dd35      	ble.n	8009d04 <_dtoa_r+0x99c>
 8009c98:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009c9c:	f1b9 0f00 	cmp.w	r9, #0
 8009ca0:	d10d      	bne.n	8009cbe <_dtoa_r+0x956>
 8009ca2:	4631      	mov	r1, r6
 8009ca4:	464b      	mov	r3, r9
 8009ca6:	2205      	movs	r2, #5
 8009ca8:	4620      	mov	r0, r4
 8009caa:	f000 ff57 	bl	800ab5c <__multadd>
 8009cae:	4601      	mov	r1, r0
 8009cb0:	4606      	mov	r6, r0
 8009cb2:	4658      	mov	r0, fp
 8009cb4:	f001 f9b8 	bl	800b028 <__mcmp>
 8009cb8:	2800      	cmp	r0, #0
 8009cba:	f73f adbd 	bgt.w	8009838 <_dtoa_r+0x4d0>
 8009cbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cc0:	9d00      	ldr	r5, [sp, #0]
 8009cc2:	ea6f 0a03 	mvn.w	sl, r3
 8009cc6:	f04f 0800 	mov.w	r8, #0
 8009cca:	4631      	mov	r1, r6
 8009ccc:	4620      	mov	r0, r4
 8009cce:	f000 ff23 	bl	800ab18 <_Bfree>
 8009cd2:	2f00      	cmp	r7, #0
 8009cd4:	f43f aeb4 	beq.w	8009a40 <_dtoa_r+0x6d8>
 8009cd8:	f1b8 0f00 	cmp.w	r8, #0
 8009cdc:	d005      	beq.n	8009cea <_dtoa_r+0x982>
 8009cde:	45b8      	cmp	r8, r7
 8009ce0:	d003      	beq.n	8009cea <_dtoa_r+0x982>
 8009ce2:	4641      	mov	r1, r8
 8009ce4:	4620      	mov	r0, r4
 8009ce6:	f000 ff17 	bl	800ab18 <_Bfree>
 8009cea:	4639      	mov	r1, r7
 8009cec:	4620      	mov	r0, r4
 8009cee:	f000 ff13 	bl	800ab18 <_Bfree>
 8009cf2:	e6a5      	b.n	8009a40 <_dtoa_r+0x6d8>
 8009cf4:	2600      	movs	r6, #0
 8009cf6:	4637      	mov	r7, r6
 8009cf8:	e7e1      	b.n	8009cbe <_dtoa_r+0x956>
 8009cfa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009cfc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009d00:	4637      	mov	r7, r6
 8009d02:	e599      	b.n	8009838 <_dtoa_r+0x4d0>
 8009d04:	9b08      	ldr	r3, [sp, #32]
 8009d06:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	f000 80fd 	beq.w	8009f0a <_dtoa_r+0xba2>
 8009d10:	2d00      	cmp	r5, #0
 8009d12:	dd05      	ble.n	8009d20 <_dtoa_r+0x9b8>
 8009d14:	4639      	mov	r1, r7
 8009d16:	462a      	mov	r2, r5
 8009d18:	4620      	mov	r0, r4
 8009d1a:	f001 f919 	bl	800af50 <__lshift>
 8009d1e:	4607      	mov	r7, r0
 8009d20:	9b06      	ldr	r3, [sp, #24]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d05c      	beq.n	8009de0 <_dtoa_r+0xa78>
 8009d26:	6879      	ldr	r1, [r7, #4]
 8009d28:	4620      	mov	r0, r4
 8009d2a:	f000 feb5 	bl	800aa98 <_Balloc>
 8009d2e:	4605      	mov	r5, r0
 8009d30:	b928      	cbnz	r0, 8009d3e <_dtoa_r+0x9d6>
 8009d32:	4b80      	ldr	r3, [pc, #512]	; (8009f34 <_dtoa_r+0xbcc>)
 8009d34:	4602      	mov	r2, r0
 8009d36:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009d3a:	f7ff bb2e 	b.w	800939a <_dtoa_r+0x32>
 8009d3e:	693a      	ldr	r2, [r7, #16]
 8009d40:	3202      	adds	r2, #2
 8009d42:	0092      	lsls	r2, r2, #2
 8009d44:	f107 010c 	add.w	r1, r7, #12
 8009d48:	300c      	adds	r0, #12
 8009d4a:	f7fd fbdf 	bl	800750c <memcpy>
 8009d4e:	2201      	movs	r2, #1
 8009d50:	4629      	mov	r1, r5
 8009d52:	4620      	mov	r0, r4
 8009d54:	f001 f8fc 	bl	800af50 <__lshift>
 8009d58:	9b00      	ldr	r3, [sp, #0]
 8009d5a:	3301      	adds	r3, #1
 8009d5c:	9301      	str	r3, [sp, #4]
 8009d5e:	9b00      	ldr	r3, [sp, #0]
 8009d60:	444b      	add	r3, r9
 8009d62:	9307      	str	r3, [sp, #28]
 8009d64:	9b02      	ldr	r3, [sp, #8]
 8009d66:	f003 0301 	and.w	r3, r3, #1
 8009d6a:	46b8      	mov	r8, r7
 8009d6c:	9306      	str	r3, [sp, #24]
 8009d6e:	4607      	mov	r7, r0
 8009d70:	9b01      	ldr	r3, [sp, #4]
 8009d72:	4631      	mov	r1, r6
 8009d74:	3b01      	subs	r3, #1
 8009d76:	4658      	mov	r0, fp
 8009d78:	9302      	str	r3, [sp, #8]
 8009d7a:	f7ff fa67 	bl	800924c <quorem>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	3330      	adds	r3, #48	; 0x30
 8009d82:	9004      	str	r0, [sp, #16]
 8009d84:	4641      	mov	r1, r8
 8009d86:	4658      	mov	r0, fp
 8009d88:	9308      	str	r3, [sp, #32]
 8009d8a:	f001 f94d 	bl	800b028 <__mcmp>
 8009d8e:	463a      	mov	r2, r7
 8009d90:	4681      	mov	r9, r0
 8009d92:	4631      	mov	r1, r6
 8009d94:	4620      	mov	r0, r4
 8009d96:	f001 f963 	bl	800b060 <__mdiff>
 8009d9a:	68c2      	ldr	r2, [r0, #12]
 8009d9c:	9b08      	ldr	r3, [sp, #32]
 8009d9e:	4605      	mov	r5, r0
 8009da0:	bb02      	cbnz	r2, 8009de4 <_dtoa_r+0xa7c>
 8009da2:	4601      	mov	r1, r0
 8009da4:	4658      	mov	r0, fp
 8009da6:	f001 f93f 	bl	800b028 <__mcmp>
 8009daa:	9b08      	ldr	r3, [sp, #32]
 8009dac:	4602      	mov	r2, r0
 8009dae:	4629      	mov	r1, r5
 8009db0:	4620      	mov	r0, r4
 8009db2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8009db6:	f000 feaf 	bl	800ab18 <_Bfree>
 8009dba:	9b05      	ldr	r3, [sp, #20]
 8009dbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009dbe:	9d01      	ldr	r5, [sp, #4]
 8009dc0:	ea43 0102 	orr.w	r1, r3, r2
 8009dc4:	9b06      	ldr	r3, [sp, #24]
 8009dc6:	430b      	orrs	r3, r1
 8009dc8:	9b08      	ldr	r3, [sp, #32]
 8009dca:	d10d      	bne.n	8009de8 <_dtoa_r+0xa80>
 8009dcc:	2b39      	cmp	r3, #57	; 0x39
 8009dce:	d029      	beq.n	8009e24 <_dtoa_r+0xabc>
 8009dd0:	f1b9 0f00 	cmp.w	r9, #0
 8009dd4:	dd01      	ble.n	8009dda <_dtoa_r+0xa72>
 8009dd6:	9b04      	ldr	r3, [sp, #16]
 8009dd8:	3331      	adds	r3, #49	; 0x31
 8009dda:	9a02      	ldr	r2, [sp, #8]
 8009ddc:	7013      	strb	r3, [r2, #0]
 8009dde:	e774      	b.n	8009cca <_dtoa_r+0x962>
 8009de0:	4638      	mov	r0, r7
 8009de2:	e7b9      	b.n	8009d58 <_dtoa_r+0x9f0>
 8009de4:	2201      	movs	r2, #1
 8009de6:	e7e2      	b.n	8009dae <_dtoa_r+0xa46>
 8009de8:	f1b9 0f00 	cmp.w	r9, #0
 8009dec:	db06      	blt.n	8009dfc <_dtoa_r+0xa94>
 8009dee:	9905      	ldr	r1, [sp, #20]
 8009df0:	ea41 0909 	orr.w	r9, r1, r9
 8009df4:	9906      	ldr	r1, [sp, #24]
 8009df6:	ea59 0101 	orrs.w	r1, r9, r1
 8009dfa:	d120      	bne.n	8009e3e <_dtoa_r+0xad6>
 8009dfc:	2a00      	cmp	r2, #0
 8009dfe:	ddec      	ble.n	8009dda <_dtoa_r+0xa72>
 8009e00:	4659      	mov	r1, fp
 8009e02:	2201      	movs	r2, #1
 8009e04:	4620      	mov	r0, r4
 8009e06:	9301      	str	r3, [sp, #4]
 8009e08:	f001 f8a2 	bl	800af50 <__lshift>
 8009e0c:	4631      	mov	r1, r6
 8009e0e:	4683      	mov	fp, r0
 8009e10:	f001 f90a 	bl	800b028 <__mcmp>
 8009e14:	2800      	cmp	r0, #0
 8009e16:	9b01      	ldr	r3, [sp, #4]
 8009e18:	dc02      	bgt.n	8009e20 <_dtoa_r+0xab8>
 8009e1a:	d1de      	bne.n	8009dda <_dtoa_r+0xa72>
 8009e1c:	07da      	lsls	r2, r3, #31
 8009e1e:	d5dc      	bpl.n	8009dda <_dtoa_r+0xa72>
 8009e20:	2b39      	cmp	r3, #57	; 0x39
 8009e22:	d1d8      	bne.n	8009dd6 <_dtoa_r+0xa6e>
 8009e24:	9a02      	ldr	r2, [sp, #8]
 8009e26:	2339      	movs	r3, #57	; 0x39
 8009e28:	7013      	strb	r3, [r2, #0]
 8009e2a:	462b      	mov	r3, r5
 8009e2c:	461d      	mov	r5, r3
 8009e2e:	3b01      	subs	r3, #1
 8009e30:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009e34:	2a39      	cmp	r2, #57	; 0x39
 8009e36:	d050      	beq.n	8009eda <_dtoa_r+0xb72>
 8009e38:	3201      	adds	r2, #1
 8009e3a:	701a      	strb	r2, [r3, #0]
 8009e3c:	e745      	b.n	8009cca <_dtoa_r+0x962>
 8009e3e:	2a00      	cmp	r2, #0
 8009e40:	dd03      	ble.n	8009e4a <_dtoa_r+0xae2>
 8009e42:	2b39      	cmp	r3, #57	; 0x39
 8009e44:	d0ee      	beq.n	8009e24 <_dtoa_r+0xabc>
 8009e46:	3301      	adds	r3, #1
 8009e48:	e7c7      	b.n	8009dda <_dtoa_r+0xa72>
 8009e4a:	9a01      	ldr	r2, [sp, #4]
 8009e4c:	9907      	ldr	r1, [sp, #28]
 8009e4e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009e52:	428a      	cmp	r2, r1
 8009e54:	d02a      	beq.n	8009eac <_dtoa_r+0xb44>
 8009e56:	4659      	mov	r1, fp
 8009e58:	2300      	movs	r3, #0
 8009e5a:	220a      	movs	r2, #10
 8009e5c:	4620      	mov	r0, r4
 8009e5e:	f000 fe7d 	bl	800ab5c <__multadd>
 8009e62:	45b8      	cmp	r8, r7
 8009e64:	4683      	mov	fp, r0
 8009e66:	f04f 0300 	mov.w	r3, #0
 8009e6a:	f04f 020a 	mov.w	r2, #10
 8009e6e:	4641      	mov	r1, r8
 8009e70:	4620      	mov	r0, r4
 8009e72:	d107      	bne.n	8009e84 <_dtoa_r+0xb1c>
 8009e74:	f000 fe72 	bl	800ab5c <__multadd>
 8009e78:	4680      	mov	r8, r0
 8009e7a:	4607      	mov	r7, r0
 8009e7c:	9b01      	ldr	r3, [sp, #4]
 8009e7e:	3301      	adds	r3, #1
 8009e80:	9301      	str	r3, [sp, #4]
 8009e82:	e775      	b.n	8009d70 <_dtoa_r+0xa08>
 8009e84:	f000 fe6a 	bl	800ab5c <__multadd>
 8009e88:	4639      	mov	r1, r7
 8009e8a:	4680      	mov	r8, r0
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	220a      	movs	r2, #10
 8009e90:	4620      	mov	r0, r4
 8009e92:	f000 fe63 	bl	800ab5c <__multadd>
 8009e96:	4607      	mov	r7, r0
 8009e98:	e7f0      	b.n	8009e7c <_dtoa_r+0xb14>
 8009e9a:	f1b9 0f00 	cmp.w	r9, #0
 8009e9e:	9a00      	ldr	r2, [sp, #0]
 8009ea0:	bfcc      	ite	gt
 8009ea2:	464d      	movgt	r5, r9
 8009ea4:	2501      	movle	r5, #1
 8009ea6:	4415      	add	r5, r2
 8009ea8:	f04f 0800 	mov.w	r8, #0
 8009eac:	4659      	mov	r1, fp
 8009eae:	2201      	movs	r2, #1
 8009eb0:	4620      	mov	r0, r4
 8009eb2:	9301      	str	r3, [sp, #4]
 8009eb4:	f001 f84c 	bl	800af50 <__lshift>
 8009eb8:	4631      	mov	r1, r6
 8009eba:	4683      	mov	fp, r0
 8009ebc:	f001 f8b4 	bl	800b028 <__mcmp>
 8009ec0:	2800      	cmp	r0, #0
 8009ec2:	dcb2      	bgt.n	8009e2a <_dtoa_r+0xac2>
 8009ec4:	d102      	bne.n	8009ecc <_dtoa_r+0xb64>
 8009ec6:	9b01      	ldr	r3, [sp, #4]
 8009ec8:	07db      	lsls	r3, r3, #31
 8009eca:	d4ae      	bmi.n	8009e2a <_dtoa_r+0xac2>
 8009ecc:	462b      	mov	r3, r5
 8009ece:	461d      	mov	r5, r3
 8009ed0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ed4:	2a30      	cmp	r2, #48	; 0x30
 8009ed6:	d0fa      	beq.n	8009ece <_dtoa_r+0xb66>
 8009ed8:	e6f7      	b.n	8009cca <_dtoa_r+0x962>
 8009eda:	9a00      	ldr	r2, [sp, #0]
 8009edc:	429a      	cmp	r2, r3
 8009ede:	d1a5      	bne.n	8009e2c <_dtoa_r+0xac4>
 8009ee0:	f10a 0a01 	add.w	sl, sl, #1
 8009ee4:	2331      	movs	r3, #49	; 0x31
 8009ee6:	e779      	b.n	8009ddc <_dtoa_r+0xa74>
 8009ee8:	4b13      	ldr	r3, [pc, #76]	; (8009f38 <_dtoa_r+0xbd0>)
 8009eea:	f7ff baaf 	b.w	800944c <_dtoa_r+0xe4>
 8009eee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	f47f aa86 	bne.w	8009402 <_dtoa_r+0x9a>
 8009ef6:	4b11      	ldr	r3, [pc, #68]	; (8009f3c <_dtoa_r+0xbd4>)
 8009ef8:	f7ff baa8 	b.w	800944c <_dtoa_r+0xe4>
 8009efc:	f1b9 0f00 	cmp.w	r9, #0
 8009f00:	dc03      	bgt.n	8009f0a <_dtoa_r+0xba2>
 8009f02:	9b05      	ldr	r3, [sp, #20]
 8009f04:	2b02      	cmp	r3, #2
 8009f06:	f73f aec9 	bgt.w	8009c9c <_dtoa_r+0x934>
 8009f0a:	9d00      	ldr	r5, [sp, #0]
 8009f0c:	4631      	mov	r1, r6
 8009f0e:	4658      	mov	r0, fp
 8009f10:	f7ff f99c 	bl	800924c <quorem>
 8009f14:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009f18:	f805 3b01 	strb.w	r3, [r5], #1
 8009f1c:	9a00      	ldr	r2, [sp, #0]
 8009f1e:	1aaa      	subs	r2, r5, r2
 8009f20:	4591      	cmp	r9, r2
 8009f22:	ddba      	ble.n	8009e9a <_dtoa_r+0xb32>
 8009f24:	4659      	mov	r1, fp
 8009f26:	2300      	movs	r3, #0
 8009f28:	220a      	movs	r2, #10
 8009f2a:	4620      	mov	r0, r4
 8009f2c:	f000 fe16 	bl	800ab5c <__multadd>
 8009f30:	4683      	mov	fp, r0
 8009f32:	e7eb      	b.n	8009f0c <_dtoa_r+0xba4>
 8009f34:	0800c16c 	.word	0x0800c16c
 8009f38:	0800bf68 	.word	0x0800bf68
 8009f3c:	0800c0e9 	.word	0x0800c0e9

08009f40 <__sflush_r>:
 8009f40:	898a      	ldrh	r2, [r1, #12]
 8009f42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f46:	4605      	mov	r5, r0
 8009f48:	0710      	lsls	r0, r2, #28
 8009f4a:	460c      	mov	r4, r1
 8009f4c:	d458      	bmi.n	800a000 <__sflush_r+0xc0>
 8009f4e:	684b      	ldr	r3, [r1, #4]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	dc05      	bgt.n	8009f60 <__sflush_r+0x20>
 8009f54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	dc02      	bgt.n	8009f60 <__sflush_r+0x20>
 8009f5a:	2000      	movs	r0, #0
 8009f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009f62:	2e00      	cmp	r6, #0
 8009f64:	d0f9      	beq.n	8009f5a <__sflush_r+0x1a>
 8009f66:	2300      	movs	r3, #0
 8009f68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009f6c:	682f      	ldr	r7, [r5, #0]
 8009f6e:	602b      	str	r3, [r5, #0]
 8009f70:	d032      	beq.n	8009fd8 <__sflush_r+0x98>
 8009f72:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009f74:	89a3      	ldrh	r3, [r4, #12]
 8009f76:	075a      	lsls	r2, r3, #29
 8009f78:	d505      	bpl.n	8009f86 <__sflush_r+0x46>
 8009f7a:	6863      	ldr	r3, [r4, #4]
 8009f7c:	1ac0      	subs	r0, r0, r3
 8009f7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009f80:	b10b      	cbz	r3, 8009f86 <__sflush_r+0x46>
 8009f82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009f84:	1ac0      	subs	r0, r0, r3
 8009f86:	2300      	movs	r3, #0
 8009f88:	4602      	mov	r2, r0
 8009f8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009f8c:	6a21      	ldr	r1, [r4, #32]
 8009f8e:	4628      	mov	r0, r5
 8009f90:	47b0      	blx	r6
 8009f92:	1c43      	adds	r3, r0, #1
 8009f94:	89a3      	ldrh	r3, [r4, #12]
 8009f96:	d106      	bne.n	8009fa6 <__sflush_r+0x66>
 8009f98:	6829      	ldr	r1, [r5, #0]
 8009f9a:	291d      	cmp	r1, #29
 8009f9c:	d82c      	bhi.n	8009ff8 <__sflush_r+0xb8>
 8009f9e:	4a2a      	ldr	r2, [pc, #168]	; (800a048 <__sflush_r+0x108>)
 8009fa0:	40ca      	lsrs	r2, r1
 8009fa2:	07d6      	lsls	r6, r2, #31
 8009fa4:	d528      	bpl.n	8009ff8 <__sflush_r+0xb8>
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	6062      	str	r2, [r4, #4]
 8009faa:	04d9      	lsls	r1, r3, #19
 8009fac:	6922      	ldr	r2, [r4, #16]
 8009fae:	6022      	str	r2, [r4, #0]
 8009fb0:	d504      	bpl.n	8009fbc <__sflush_r+0x7c>
 8009fb2:	1c42      	adds	r2, r0, #1
 8009fb4:	d101      	bne.n	8009fba <__sflush_r+0x7a>
 8009fb6:	682b      	ldr	r3, [r5, #0]
 8009fb8:	b903      	cbnz	r3, 8009fbc <__sflush_r+0x7c>
 8009fba:	6560      	str	r0, [r4, #84]	; 0x54
 8009fbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009fbe:	602f      	str	r7, [r5, #0]
 8009fc0:	2900      	cmp	r1, #0
 8009fc2:	d0ca      	beq.n	8009f5a <__sflush_r+0x1a>
 8009fc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009fc8:	4299      	cmp	r1, r3
 8009fca:	d002      	beq.n	8009fd2 <__sflush_r+0x92>
 8009fcc:	4628      	mov	r0, r5
 8009fce:	f001 fa2d 	bl	800b42c <_free_r>
 8009fd2:	2000      	movs	r0, #0
 8009fd4:	6360      	str	r0, [r4, #52]	; 0x34
 8009fd6:	e7c1      	b.n	8009f5c <__sflush_r+0x1c>
 8009fd8:	6a21      	ldr	r1, [r4, #32]
 8009fda:	2301      	movs	r3, #1
 8009fdc:	4628      	mov	r0, r5
 8009fde:	47b0      	blx	r6
 8009fe0:	1c41      	adds	r1, r0, #1
 8009fe2:	d1c7      	bne.n	8009f74 <__sflush_r+0x34>
 8009fe4:	682b      	ldr	r3, [r5, #0]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d0c4      	beq.n	8009f74 <__sflush_r+0x34>
 8009fea:	2b1d      	cmp	r3, #29
 8009fec:	d001      	beq.n	8009ff2 <__sflush_r+0xb2>
 8009fee:	2b16      	cmp	r3, #22
 8009ff0:	d101      	bne.n	8009ff6 <__sflush_r+0xb6>
 8009ff2:	602f      	str	r7, [r5, #0]
 8009ff4:	e7b1      	b.n	8009f5a <__sflush_r+0x1a>
 8009ff6:	89a3      	ldrh	r3, [r4, #12]
 8009ff8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ffc:	81a3      	strh	r3, [r4, #12]
 8009ffe:	e7ad      	b.n	8009f5c <__sflush_r+0x1c>
 800a000:	690f      	ldr	r7, [r1, #16]
 800a002:	2f00      	cmp	r7, #0
 800a004:	d0a9      	beq.n	8009f5a <__sflush_r+0x1a>
 800a006:	0793      	lsls	r3, r2, #30
 800a008:	680e      	ldr	r6, [r1, #0]
 800a00a:	bf08      	it	eq
 800a00c:	694b      	ldreq	r3, [r1, #20]
 800a00e:	600f      	str	r7, [r1, #0]
 800a010:	bf18      	it	ne
 800a012:	2300      	movne	r3, #0
 800a014:	eba6 0807 	sub.w	r8, r6, r7
 800a018:	608b      	str	r3, [r1, #8]
 800a01a:	f1b8 0f00 	cmp.w	r8, #0
 800a01e:	dd9c      	ble.n	8009f5a <__sflush_r+0x1a>
 800a020:	6a21      	ldr	r1, [r4, #32]
 800a022:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a024:	4643      	mov	r3, r8
 800a026:	463a      	mov	r2, r7
 800a028:	4628      	mov	r0, r5
 800a02a:	47b0      	blx	r6
 800a02c:	2800      	cmp	r0, #0
 800a02e:	dc06      	bgt.n	800a03e <__sflush_r+0xfe>
 800a030:	89a3      	ldrh	r3, [r4, #12]
 800a032:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a036:	81a3      	strh	r3, [r4, #12]
 800a038:	f04f 30ff 	mov.w	r0, #4294967295
 800a03c:	e78e      	b.n	8009f5c <__sflush_r+0x1c>
 800a03e:	4407      	add	r7, r0
 800a040:	eba8 0800 	sub.w	r8, r8, r0
 800a044:	e7e9      	b.n	800a01a <__sflush_r+0xda>
 800a046:	bf00      	nop
 800a048:	20400001 	.word	0x20400001

0800a04c <_fflush_r>:
 800a04c:	b538      	push	{r3, r4, r5, lr}
 800a04e:	690b      	ldr	r3, [r1, #16]
 800a050:	4605      	mov	r5, r0
 800a052:	460c      	mov	r4, r1
 800a054:	b913      	cbnz	r3, 800a05c <_fflush_r+0x10>
 800a056:	2500      	movs	r5, #0
 800a058:	4628      	mov	r0, r5
 800a05a:	bd38      	pop	{r3, r4, r5, pc}
 800a05c:	b118      	cbz	r0, 800a066 <_fflush_r+0x1a>
 800a05e:	6983      	ldr	r3, [r0, #24]
 800a060:	b90b      	cbnz	r3, 800a066 <_fflush_r+0x1a>
 800a062:	f000 f887 	bl	800a174 <__sinit>
 800a066:	4b14      	ldr	r3, [pc, #80]	; (800a0b8 <_fflush_r+0x6c>)
 800a068:	429c      	cmp	r4, r3
 800a06a:	d11b      	bne.n	800a0a4 <_fflush_r+0x58>
 800a06c:	686c      	ldr	r4, [r5, #4]
 800a06e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d0ef      	beq.n	800a056 <_fflush_r+0xa>
 800a076:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a078:	07d0      	lsls	r0, r2, #31
 800a07a:	d404      	bmi.n	800a086 <_fflush_r+0x3a>
 800a07c:	0599      	lsls	r1, r3, #22
 800a07e:	d402      	bmi.n	800a086 <_fflush_r+0x3a>
 800a080:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a082:	f000 fc88 	bl	800a996 <__retarget_lock_acquire_recursive>
 800a086:	4628      	mov	r0, r5
 800a088:	4621      	mov	r1, r4
 800a08a:	f7ff ff59 	bl	8009f40 <__sflush_r>
 800a08e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a090:	07da      	lsls	r2, r3, #31
 800a092:	4605      	mov	r5, r0
 800a094:	d4e0      	bmi.n	800a058 <_fflush_r+0xc>
 800a096:	89a3      	ldrh	r3, [r4, #12]
 800a098:	059b      	lsls	r3, r3, #22
 800a09a:	d4dd      	bmi.n	800a058 <_fflush_r+0xc>
 800a09c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a09e:	f000 fc7b 	bl	800a998 <__retarget_lock_release_recursive>
 800a0a2:	e7d9      	b.n	800a058 <_fflush_r+0xc>
 800a0a4:	4b05      	ldr	r3, [pc, #20]	; (800a0bc <_fflush_r+0x70>)
 800a0a6:	429c      	cmp	r4, r3
 800a0a8:	d101      	bne.n	800a0ae <_fflush_r+0x62>
 800a0aa:	68ac      	ldr	r4, [r5, #8]
 800a0ac:	e7df      	b.n	800a06e <_fflush_r+0x22>
 800a0ae:	4b04      	ldr	r3, [pc, #16]	; (800a0c0 <_fflush_r+0x74>)
 800a0b0:	429c      	cmp	r4, r3
 800a0b2:	bf08      	it	eq
 800a0b4:	68ec      	ldreq	r4, [r5, #12]
 800a0b6:	e7da      	b.n	800a06e <_fflush_r+0x22>
 800a0b8:	0800c1a0 	.word	0x0800c1a0
 800a0bc:	0800c1c0 	.word	0x0800c1c0
 800a0c0:	0800c180 	.word	0x0800c180

0800a0c4 <std>:
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	b510      	push	{r4, lr}
 800a0c8:	4604      	mov	r4, r0
 800a0ca:	e9c0 3300 	strd	r3, r3, [r0]
 800a0ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a0d2:	6083      	str	r3, [r0, #8]
 800a0d4:	8181      	strh	r1, [r0, #12]
 800a0d6:	6643      	str	r3, [r0, #100]	; 0x64
 800a0d8:	81c2      	strh	r2, [r0, #14]
 800a0da:	6183      	str	r3, [r0, #24]
 800a0dc:	4619      	mov	r1, r3
 800a0de:	2208      	movs	r2, #8
 800a0e0:	305c      	adds	r0, #92	; 0x5c
 800a0e2:	f7fd fa21 	bl	8007528 <memset>
 800a0e6:	4b05      	ldr	r3, [pc, #20]	; (800a0fc <std+0x38>)
 800a0e8:	6263      	str	r3, [r4, #36]	; 0x24
 800a0ea:	4b05      	ldr	r3, [pc, #20]	; (800a100 <std+0x3c>)
 800a0ec:	62a3      	str	r3, [r4, #40]	; 0x28
 800a0ee:	4b05      	ldr	r3, [pc, #20]	; (800a104 <std+0x40>)
 800a0f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a0f2:	4b05      	ldr	r3, [pc, #20]	; (800a108 <std+0x44>)
 800a0f4:	6224      	str	r4, [r4, #32]
 800a0f6:	6323      	str	r3, [r4, #48]	; 0x30
 800a0f8:	bd10      	pop	{r4, pc}
 800a0fa:	bf00      	nop
 800a0fc:	0800bb21 	.word	0x0800bb21
 800a100:	0800bb43 	.word	0x0800bb43
 800a104:	0800bb7b 	.word	0x0800bb7b
 800a108:	0800bb9f 	.word	0x0800bb9f

0800a10c <_cleanup_r>:
 800a10c:	4901      	ldr	r1, [pc, #4]	; (800a114 <_cleanup_r+0x8>)
 800a10e:	f000 b8af 	b.w	800a270 <_fwalk_reent>
 800a112:	bf00      	nop
 800a114:	0800a04d 	.word	0x0800a04d

0800a118 <__sfmoreglue>:
 800a118:	b570      	push	{r4, r5, r6, lr}
 800a11a:	1e4a      	subs	r2, r1, #1
 800a11c:	2568      	movs	r5, #104	; 0x68
 800a11e:	4355      	muls	r5, r2
 800a120:	460e      	mov	r6, r1
 800a122:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a126:	f001 f9d1 	bl	800b4cc <_malloc_r>
 800a12a:	4604      	mov	r4, r0
 800a12c:	b140      	cbz	r0, 800a140 <__sfmoreglue+0x28>
 800a12e:	2100      	movs	r1, #0
 800a130:	e9c0 1600 	strd	r1, r6, [r0]
 800a134:	300c      	adds	r0, #12
 800a136:	60a0      	str	r0, [r4, #8]
 800a138:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a13c:	f7fd f9f4 	bl	8007528 <memset>
 800a140:	4620      	mov	r0, r4
 800a142:	bd70      	pop	{r4, r5, r6, pc}

0800a144 <__sfp_lock_acquire>:
 800a144:	4801      	ldr	r0, [pc, #4]	; (800a14c <__sfp_lock_acquire+0x8>)
 800a146:	f000 bc26 	b.w	800a996 <__retarget_lock_acquire_recursive>
 800a14a:	bf00      	nop
 800a14c:	20000398 	.word	0x20000398

0800a150 <__sfp_lock_release>:
 800a150:	4801      	ldr	r0, [pc, #4]	; (800a158 <__sfp_lock_release+0x8>)
 800a152:	f000 bc21 	b.w	800a998 <__retarget_lock_release_recursive>
 800a156:	bf00      	nop
 800a158:	20000398 	.word	0x20000398

0800a15c <__sinit_lock_acquire>:
 800a15c:	4801      	ldr	r0, [pc, #4]	; (800a164 <__sinit_lock_acquire+0x8>)
 800a15e:	f000 bc1a 	b.w	800a996 <__retarget_lock_acquire_recursive>
 800a162:	bf00      	nop
 800a164:	20000393 	.word	0x20000393

0800a168 <__sinit_lock_release>:
 800a168:	4801      	ldr	r0, [pc, #4]	; (800a170 <__sinit_lock_release+0x8>)
 800a16a:	f000 bc15 	b.w	800a998 <__retarget_lock_release_recursive>
 800a16e:	bf00      	nop
 800a170:	20000393 	.word	0x20000393

0800a174 <__sinit>:
 800a174:	b510      	push	{r4, lr}
 800a176:	4604      	mov	r4, r0
 800a178:	f7ff fff0 	bl	800a15c <__sinit_lock_acquire>
 800a17c:	69a3      	ldr	r3, [r4, #24]
 800a17e:	b11b      	cbz	r3, 800a188 <__sinit+0x14>
 800a180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a184:	f7ff bff0 	b.w	800a168 <__sinit_lock_release>
 800a188:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a18c:	6523      	str	r3, [r4, #80]	; 0x50
 800a18e:	4b13      	ldr	r3, [pc, #76]	; (800a1dc <__sinit+0x68>)
 800a190:	4a13      	ldr	r2, [pc, #76]	; (800a1e0 <__sinit+0x6c>)
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	62a2      	str	r2, [r4, #40]	; 0x28
 800a196:	42a3      	cmp	r3, r4
 800a198:	bf04      	itt	eq
 800a19a:	2301      	moveq	r3, #1
 800a19c:	61a3      	streq	r3, [r4, #24]
 800a19e:	4620      	mov	r0, r4
 800a1a0:	f000 f820 	bl	800a1e4 <__sfp>
 800a1a4:	6060      	str	r0, [r4, #4]
 800a1a6:	4620      	mov	r0, r4
 800a1a8:	f000 f81c 	bl	800a1e4 <__sfp>
 800a1ac:	60a0      	str	r0, [r4, #8]
 800a1ae:	4620      	mov	r0, r4
 800a1b0:	f000 f818 	bl	800a1e4 <__sfp>
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	60e0      	str	r0, [r4, #12]
 800a1b8:	2104      	movs	r1, #4
 800a1ba:	6860      	ldr	r0, [r4, #4]
 800a1bc:	f7ff ff82 	bl	800a0c4 <std>
 800a1c0:	68a0      	ldr	r0, [r4, #8]
 800a1c2:	2201      	movs	r2, #1
 800a1c4:	2109      	movs	r1, #9
 800a1c6:	f7ff ff7d 	bl	800a0c4 <std>
 800a1ca:	68e0      	ldr	r0, [r4, #12]
 800a1cc:	2202      	movs	r2, #2
 800a1ce:	2112      	movs	r1, #18
 800a1d0:	f7ff ff78 	bl	800a0c4 <std>
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	61a3      	str	r3, [r4, #24]
 800a1d8:	e7d2      	b.n	800a180 <__sinit+0xc>
 800a1da:	bf00      	nop
 800a1dc:	0800bf54 	.word	0x0800bf54
 800a1e0:	0800a10d 	.word	0x0800a10d

0800a1e4 <__sfp>:
 800a1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1e6:	4607      	mov	r7, r0
 800a1e8:	f7ff ffac 	bl	800a144 <__sfp_lock_acquire>
 800a1ec:	4b1e      	ldr	r3, [pc, #120]	; (800a268 <__sfp+0x84>)
 800a1ee:	681e      	ldr	r6, [r3, #0]
 800a1f0:	69b3      	ldr	r3, [r6, #24]
 800a1f2:	b913      	cbnz	r3, 800a1fa <__sfp+0x16>
 800a1f4:	4630      	mov	r0, r6
 800a1f6:	f7ff ffbd 	bl	800a174 <__sinit>
 800a1fa:	3648      	adds	r6, #72	; 0x48
 800a1fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a200:	3b01      	subs	r3, #1
 800a202:	d503      	bpl.n	800a20c <__sfp+0x28>
 800a204:	6833      	ldr	r3, [r6, #0]
 800a206:	b30b      	cbz	r3, 800a24c <__sfp+0x68>
 800a208:	6836      	ldr	r6, [r6, #0]
 800a20a:	e7f7      	b.n	800a1fc <__sfp+0x18>
 800a20c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a210:	b9d5      	cbnz	r5, 800a248 <__sfp+0x64>
 800a212:	4b16      	ldr	r3, [pc, #88]	; (800a26c <__sfp+0x88>)
 800a214:	60e3      	str	r3, [r4, #12]
 800a216:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a21a:	6665      	str	r5, [r4, #100]	; 0x64
 800a21c:	f000 fbba 	bl	800a994 <__retarget_lock_init_recursive>
 800a220:	f7ff ff96 	bl	800a150 <__sfp_lock_release>
 800a224:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a228:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a22c:	6025      	str	r5, [r4, #0]
 800a22e:	61a5      	str	r5, [r4, #24]
 800a230:	2208      	movs	r2, #8
 800a232:	4629      	mov	r1, r5
 800a234:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a238:	f7fd f976 	bl	8007528 <memset>
 800a23c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a240:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a244:	4620      	mov	r0, r4
 800a246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a248:	3468      	adds	r4, #104	; 0x68
 800a24a:	e7d9      	b.n	800a200 <__sfp+0x1c>
 800a24c:	2104      	movs	r1, #4
 800a24e:	4638      	mov	r0, r7
 800a250:	f7ff ff62 	bl	800a118 <__sfmoreglue>
 800a254:	4604      	mov	r4, r0
 800a256:	6030      	str	r0, [r6, #0]
 800a258:	2800      	cmp	r0, #0
 800a25a:	d1d5      	bne.n	800a208 <__sfp+0x24>
 800a25c:	f7ff ff78 	bl	800a150 <__sfp_lock_release>
 800a260:	230c      	movs	r3, #12
 800a262:	603b      	str	r3, [r7, #0]
 800a264:	e7ee      	b.n	800a244 <__sfp+0x60>
 800a266:	bf00      	nop
 800a268:	0800bf54 	.word	0x0800bf54
 800a26c:	ffff0001 	.word	0xffff0001

0800a270 <_fwalk_reent>:
 800a270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a274:	4606      	mov	r6, r0
 800a276:	4688      	mov	r8, r1
 800a278:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a27c:	2700      	movs	r7, #0
 800a27e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a282:	f1b9 0901 	subs.w	r9, r9, #1
 800a286:	d505      	bpl.n	800a294 <_fwalk_reent+0x24>
 800a288:	6824      	ldr	r4, [r4, #0]
 800a28a:	2c00      	cmp	r4, #0
 800a28c:	d1f7      	bne.n	800a27e <_fwalk_reent+0xe>
 800a28e:	4638      	mov	r0, r7
 800a290:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a294:	89ab      	ldrh	r3, [r5, #12]
 800a296:	2b01      	cmp	r3, #1
 800a298:	d907      	bls.n	800a2aa <_fwalk_reent+0x3a>
 800a29a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a29e:	3301      	adds	r3, #1
 800a2a0:	d003      	beq.n	800a2aa <_fwalk_reent+0x3a>
 800a2a2:	4629      	mov	r1, r5
 800a2a4:	4630      	mov	r0, r6
 800a2a6:	47c0      	blx	r8
 800a2a8:	4307      	orrs	r7, r0
 800a2aa:	3568      	adds	r5, #104	; 0x68
 800a2ac:	e7e9      	b.n	800a282 <_fwalk_reent+0x12>

0800a2ae <rshift>:
 800a2ae:	6903      	ldr	r3, [r0, #16]
 800a2b0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a2b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a2b8:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a2bc:	f100 0414 	add.w	r4, r0, #20
 800a2c0:	dd45      	ble.n	800a34e <rshift+0xa0>
 800a2c2:	f011 011f 	ands.w	r1, r1, #31
 800a2c6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a2ca:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a2ce:	d10c      	bne.n	800a2ea <rshift+0x3c>
 800a2d0:	f100 0710 	add.w	r7, r0, #16
 800a2d4:	4629      	mov	r1, r5
 800a2d6:	42b1      	cmp	r1, r6
 800a2d8:	d334      	bcc.n	800a344 <rshift+0x96>
 800a2da:	1a9b      	subs	r3, r3, r2
 800a2dc:	009b      	lsls	r3, r3, #2
 800a2de:	1eea      	subs	r2, r5, #3
 800a2e0:	4296      	cmp	r6, r2
 800a2e2:	bf38      	it	cc
 800a2e4:	2300      	movcc	r3, #0
 800a2e6:	4423      	add	r3, r4
 800a2e8:	e015      	b.n	800a316 <rshift+0x68>
 800a2ea:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a2ee:	f1c1 0820 	rsb	r8, r1, #32
 800a2f2:	40cf      	lsrs	r7, r1
 800a2f4:	f105 0e04 	add.w	lr, r5, #4
 800a2f8:	46a1      	mov	r9, r4
 800a2fa:	4576      	cmp	r6, lr
 800a2fc:	46f4      	mov	ip, lr
 800a2fe:	d815      	bhi.n	800a32c <rshift+0x7e>
 800a300:	1a9b      	subs	r3, r3, r2
 800a302:	009a      	lsls	r2, r3, #2
 800a304:	3a04      	subs	r2, #4
 800a306:	3501      	adds	r5, #1
 800a308:	42ae      	cmp	r6, r5
 800a30a:	bf38      	it	cc
 800a30c:	2200      	movcc	r2, #0
 800a30e:	18a3      	adds	r3, r4, r2
 800a310:	50a7      	str	r7, [r4, r2]
 800a312:	b107      	cbz	r7, 800a316 <rshift+0x68>
 800a314:	3304      	adds	r3, #4
 800a316:	1b1a      	subs	r2, r3, r4
 800a318:	42a3      	cmp	r3, r4
 800a31a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a31e:	bf08      	it	eq
 800a320:	2300      	moveq	r3, #0
 800a322:	6102      	str	r2, [r0, #16]
 800a324:	bf08      	it	eq
 800a326:	6143      	streq	r3, [r0, #20]
 800a328:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a32c:	f8dc c000 	ldr.w	ip, [ip]
 800a330:	fa0c fc08 	lsl.w	ip, ip, r8
 800a334:	ea4c 0707 	orr.w	r7, ip, r7
 800a338:	f849 7b04 	str.w	r7, [r9], #4
 800a33c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a340:	40cf      	lsrs	r7, r1
 800a342:	e7da      	b.n	800a2fa <rshift+0x4c>
 800a344:	f851 cb04 	ldr.w	ip, [r1], #4
 800a348:	f847 cf04 	str.w	ip, [r7, #4]!
 800a34c:	e7c3      	b.n	800a2d6 <rshift+0x28>
 800a34e:	4623      	mov	r3, r4
 800a350:	e7e1      	b.n	800a316 <rshift+0x68>

0800a352 <__hexdig_fun>:
 800a352:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a356:	2b09      	cmp	r3, #9
 800a358:	d802      	bhi.n	800a360 <__hexdig_fun+0xe>
 800a35a:	3820      	subs	r0, #32
 800a35c:	b2c0      	uxtb	r0, r0
 800a35e:	4770      	bx	lr
 800a360:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a364:	2b05      	cmp	r3, #5
 800a366:	d801      	bhi.n	800a36c <__hexdig_fun+0x1a>
 800a368:	3847      	subs	r0, #71	; 0x47
 800a36a:	e7f7      	b.n	800a35c <__hexdig_fun+0xa>
 800a36c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a370:	2b05      	cmp	r3, #5
 800a372:	d801      	bhi.n	800a378 <__hexdig_fun+0x26>
 800a374:	3827      	subs	r0, #39	; 0x27
 800a376:	e7f1      	b.n	800a35c <__hexdig_fun+0xa>
 800a378:	2000      	movs	r0, #0
 800a37a:	4770      	bx	lr

0800a37c <__gethex>:
 800a37c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a380:	ed2d 8b02 	vpush	{d8}
 800a384:	b089      	sub	sp, #36	; 0x24
 800a386:	ee08 0a10 	vmov	s16, r0
 800a38a:	9304      	str	r3, [sp, #16]
 800a38c:	4bbc      	ldr	r3, [pc, #752]	; (800a680 <__gethex+0x304>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	9301      	str	r3, [sp, #4]
 800a392:	4618      	mov	r0, r3
 800a394:	468b      	mov	fp, r1
 800a396:	4690      	mov	r8, r2
 800a398:	f7f5 ff1a 	bl	80001d0 <strlen>
 800a39c:	9b01      	ldr	r3, [sp, #4]
 800a39e:	f8db 2000 	ldr.w	r2, [fp]
 800a3a2:	4403      	add	r3, r0
 800a3a4:	4682      	mov	sl, r0
 800a3a6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a3aa:	9305      	str	r3, [sp, #20]
 800a3ac:	1c93      	adds	r3, r2, #2
 800a3ae:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a3b2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a3b6:	32fe      	adds	r2, #254	; 0xfe
 800a3b8:	18d1      	adds	r1, r2, r3
 800a3ba:	461f      	mov	r7, r3
 800a3bc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a3c0:	9100      	str	r1, [sp, #0]
 800a3c2:	2830      	cmp	r0, #48	; 0x30
 800a3c4:	d0f8      	beq.n	800a3b8 <__gethex+0x3c>
 800a3c6:	f7ff ffc4 	bl	800a352 <__hexdig_fun>
 800a3ca:	4604      	mov	r4, r0
 800a3cc:	2800      	cmp	r0, #0
 800a3ce:	d13a      	bne.n	800a446 <__gethex+0xca>
 800a3d0:	9901      	ldr	r1, [sp, #4]
 800a3d2:	4652      	mov	r2, sl
 800a3d4:	4638      	mov	r0, r7
 800a3d6:	f001 fbe6 	bl	800bba6 <strncmp>
 800a3da:	4605      	mov	r5, r0
 800a3dc:	2800      	cmp	r0, #0
 800a3de:	d168      	bne.n	800a4b2 <__gethex+0x136>
 800a3e0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a3e4:	eb07 060a 	add.w	r6, r7, sl
 800a3e8:	f7ff ffb3 	bl	800a352 <__hexdig_fun>
 800a3ec:	2800      	cmp	r0, #0
 800a3ee:	d062      	beq.n	800a4b6 <__gethex+0x13a>
 800a3f0:	4633      	mov	r3, r6
 800a3f2:	7818      	ldrb	r0, [r3, #0]
 800a3f4:	2830      	cmp	r0, #48	; 0x30
 800a3f6:	461f      	mov	r7, r3
 800a3f8:	f103 0301 	add.w	r3, r3, #1
 800a3fc:	d0f9      	beq.n	800a3f2 <__gethex+0x76>
 800a3fe:	f7ff ffa8 	bl	800a352 <__hexdig_fun>
 800a402:	2301      	movs	r3, #1
 800a404:	fab0 f480 	clz	r4, r0
 800a408:	0964      	lsrs	r4, r4, #5
 800a40a:	4635      	mov	r5, r6
 800a40c:	9300      	str	r3, [sp, #0]
 800a40e:	463a      	mov	r2, r7
 800a410:	4616      	mov	r6, r2
 800a412:	3201      	adds	r2, #1
 800a414:	7830      	ldrb	r0, [r6, #0]
 800a416:	f7ff ff9c 	bl	800a352 <__hexdig_fun>
 800a41a:	2800      	cmp	r0, #0
 800a41c:	d1f8      	bne.n	800a410 <__gethex+0x94>
 800a41e:	9901      	ldr	r1, [sp, #4]
 800a420:	4652      	mov	r2, sl
 800a422:	4630      	mov	r0, r6
 800a424:	f001 fbbf 	bl	800bba6 <strncmp>
 800a428:	b980      	cbnz	r0, 800a44c <__gethex+0xd0>
 800a42a:	b94d      	cbnz	r5, 800a440 <__gethex+0xc4>
 800a42c:	eb06 050a 	add.w	r5, r6, sl
 800a430:	462a      	mov	r2, r5
 800a432:	4616      	mov	r6, r2
 800a434:	3201      	adds	r2, #1
 800a436:	7830      	ldrb	r0, [r6, #0]
 800a438:	f7ff ff8b 	bl	800a352 <__hexdig_fun>
 800a43c:	2800      	cmp	r0, #0
 800a43e:	d1f8      	bne.n	800a432 <__gethex+0xb6>
 800a440:	1bad      	subs	r5, r5, r6
 800a442:	00ad      	lsls	r5, r5, #2
 800a444:	e004      	b.n	800a450 <__gethex+0xd4>
 800a446:	2400      	movs	r4, #0
 800a448:	4625      	mov	r5, r4
 800a44a:	e7e0      	b.n	800a40e <__gethex+0x92>
 800a44c:	2d00      	cmp	r5, #0
 800a44e:	d1f7      	bne.n	800a440 <__gethex+0xc4>
 800a450:	7833      	ldrb	r3, [r6, #0]
 800a452:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a456:	2b50      	cmp	r3, #80	; 0x50
 800a458:	d13b      	bne.n	800a4d2 <__gethex+0x156>
 800a45a:	7873      	ldrb	r3, [r6, #1]
 800a45c:	2b2b      	cmp	r3, #43	; 0x2b
 800a45e:	d02c      	beq.n	800a4ba <__gethex+0x13e>
 800a460:	2b2d      	cmp	r3, #45	; 0x2d
 800a462:	d02e      	beq.n	800a4c2 <__gethex+0x146>
 800a464:	1c71      	adds	r1, r6, #1
 800a466:	f04f 0900 	mov.w	r9, #0
 800a46a:	7808      	ldrb	r0, [r1, #0]
 800a46c:	f7ff ff71 	bl	800a352 <__hexdig_fun>
 800a470:	1e43      	subs	r3, r0, #1
 800a472:	b2db      	uxtb	r3, r3
 800a474:	2b18      	cmp	r3, #24
 800a476:	d82c      	bhi.n	800a4d2 <__gethex+0x156>
 800a478:	f1a0 0210 	sub.w	r2, r0, #16
 800a47c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a480:	f7ff ff67 	bl	800a352 <__hexdig_fun>
 800a484:	1e43      	subs	r3, r0, #1
 800a486:	b2db      	uxtb	r3, r3
 800a488:	2b18      	cmp	r3, #24
 800a48a:	d91d      	bls.n	800a4c8 <__gethex+0x14c>
 800a48c:	f1b9 0f00 	cmp.w	r9, #0
 800a490:	d000      	beq.n	800a494 <__gethex+0x118>
 800a492:	4252      	negs	r2, r2
 800a494:	4415      	add	r5, r2
 800a496:	f8cb 1000 	str.w	r1, [fp]
 800a49a:	b1e4      	cbz	r4, 800a4d6 <__gethex+0x15a>
 800a49c:	9b00      	ldr	r3, [sp, #0]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	bf14      	ite	ne
 800a4a2:	2700      	movne	r7, #0
 800a4a4:	2706      	moveq	r7, #6
 800a4a6:	4638      	mov	r0, r7
 800a4a8:	b009      	add	sp, #36	; 0x24
 800a4aa:	ecbd 8b02 	vpop	{d8}
 800a4ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4b2:	463e      	mov	r6, r7
 800a4b4:	4625      	mov	r5, r4
 800a4b6:	2401      	movs	r4, #1
 800a4b8:	e7ca      	b.n	800a450 <__gethex+0xd4>
 800a4ba:	f04f 0900 	mov.w	r9, #0
 800a4be:	1cb1      	adds	r1, r6, #2
 800a4c0:	e7d3      	b.n	800a46a <__gethex+0xee>
 800a4c2:	f04f 0901 	mov.w	r9, #1
 800a4c6:	e7fa      	b.n	800a4be <__gethex+0x142>
 800a4c8:	230a      	movs	r3, #10
 800a4ca:	fb03 0202 	mla	r2, r3, r2, r0
 800a4ce:	3a10      	subs	r2, #16
 800a4d0:	e7d4      	b.n	800a47c <__gethex+0x100>
 800a4d2:	4631      	mov	r1, r6
 800a4d4:	e7df      	b.n	800a496 <__gethex+0x11a>
 800a4d6:	1bf3      	subs	r3, r6, r7
 800a4d8:	3b01      	subs	r3, #1
 800a4da:	4621      	mov	r1, r4
 800a4dc:	2b07      	cmp	r3, #7
 800a4de:	dc0b      	bgt.n	800a4f8 <__gethex+0x17c>
 800a4e0:	ee18 0a10 	vmov	r0, s16
 800a4e4:	f000 fad8 	bl	800aa98 <_Balloc>
 800a4e8:	4604      	mov	r4, r0
 800a4ea:	b940      	cbnz	r0, 800a4fe <__gethex+0x182>
 800a4ec:	4b65      	ldr	r3, [pc, #404]	; (800a684 <__gethex+0x308>)
 800a4ee:	4602      	mov	r2, r0
 800a4f0:	21de      	movs	r1, #222	; 0xde
 800a4f2:	4865      	ldr	r0, [pc, #404]	; (800a688 <__gethex+0x30c>)
 800a4f4:	f001 fb88 	bl	800bc08 <__assert_func>
 800a4f8:	3101      	adds	r1, #1
 800a4fa:	105b      	asrs	r3, r3, #1
 800a4fc:	e7ee      	b.n	800a4dc <__gethex+0x160>
 800a4fe:	f100 0914 	add.w	r9, r0, #20
 800a502:	f04f 0b00 	mov.w	fp, #0
 800a506:	f1ca 0301 	rsb	r3, sl, #1
 800a50a:	f8cd 9008 	str.w	r9, [sp, #8]
 800a50e:	f8cd b000 	str.w	fp, [sp]
 800a512:	9306      	str	r3, [sp, #24]
 800a514:	42b7      	cmp	r7, r6
 800a516:	d340      	bcc.n	800a59a <__gethex+0x21e>
 800a518:	9802      	ldr	r0, [sp, #8]
 800a51a:	9b00      	ldr	r3, [sp, #0]
 800a51c:	f840 3b04 	str.w	r3, [r0], #4
 800a520:	eba0 0009 	sub.w	r0, r0, r9
 800a524:	1080      	asrs	r0, r0, #2
 800a526:	0146      	lsls	r6, r0, #5
 800a528:	6120      	str	r0, [r4, #16]
 800a52a:	4618      	mov	r0, r3
 800a52c:	f000 fbaa 	bl	800ac84 <__hi0bits>
 800a530:	1a30      	subs	r0, r6, r0
 800a532:	f8d8 6000 	ldr.w	r6, [r8]
 800a536:	42b0      	cmp	r0, r6
 800a538:	dd63      	ble.n	800a602 <__gethex+0x286>
 800a53a:	1b87      	subs	r7, r0, r6
 800a53c:	4639      	mov	r1, r7
 800a53e:	4620      	mov	r0, r4
 800a540:	f000 ff44 	bl	800b3cc <__any_on>
 800a544:	4682      	mov	sl, r0
 800a546:	b1a8      	cbz	r0, 800a574 <__gethex+0x1f8>
 800a548:	1e7b      	subs	r3, r7, #1
 800a54a:	1159      	asrs	r1, r3, #5
 800a54c:	f003 021f 	and.w	r2, r3, #31
 800a550:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a554:	f04f 0a01 	mov.w	sl, #1
 800a558:	fa0a f202 	lsl.w	r2, sl, r2
 800a55c:	420a      	tst	r2, r1
 800a55e:	d009      	beq.n	800a574 <__gethex+0x1f8>
 800a560:	4553      	cmp	r3, sl
 800a562:	dd05      	ble.n	800a570 <__gethex+0x1f4>
 800a564:	1eb9      	subs	r1, r7, #2
 800a566:	4620      	mov	r0, r4
 800a568:	f000 ff30 	bl	800b3cc <__any_on>
 800a56c:	2800      	cmp	r0, #0
 800a56e:	d145      	bne.n	800a5fc <__gethex+0x280>
 800a570:	f04f 0a02 	mov.w	sl, #2
 800a574:	4639      	mov	r1, r7
 800a576:	4620      	mov	r0, r4
 800a578:	f7ff fe99 	bl	800a2ae <rshift>
 800a57c:	443d      	add	r5, r7
 800a57e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a582:	42ab      	cmp	r3, r5
 800a584:	da4c      	bge.n	800a620 <__gethex+0x2a4>
 800a586:	ee18 0a10 	vmov	r0, s16
 800a58a:	4621      	mov	r1, r4
 800a58c:	f000 fac4 	bl	800ab18 <_Bfree>
 800a590:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a592:	2300      	movs	r3, #0
 800a594:	6013      	str	r3, [r2, #0]
 800a596:	27a3      	movs	r7, #163	; 0xa3
 800a598:	e785      	b.n	800a4a6 <__gethex+0x12a>
 800a59a:	1e73      	subs	r3, r6, #1
 800a59c:	9a05      	ldr	r2, [sp, #20]
 800a59e:	9303      	str	r3, [sp, #12]
 800a5a0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a5a4:	4293      	cmp	r3, r2
 800a5a6:	d019      	beq.n	800a5dc <__gethex+0x260>
 800a5a8:	f1bb 0f20 	cmp.w	fp, #32
 800a5ac:	d107      	bne.n	800a5be <__gethex+0x242>
 800a5ae:	9b02      	ldr	r3, [sp, #8]
 800a5b0:	9a00      	ldr	r2, [sp, #0]
 800a5b2:	f843 2b04 	str.w	r2, [r3], #4
 800a5b6:	9302      	str	r3, [sp, #8]
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	9300      	str	r3, [sp, #0]
 800a5bc:	469b      	mov	fp, r3
 800a5be:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a5c2:	f7ff fec6 	bl	800a352 <__hexdig_fun>
 800a5c6:	9b00      	ldr	r3, [sp, #0]
 800a5c8:	f000 000f 	and.w	r0, r0, #15
 800a5cc:	fa00 f00b 	lsl.w	r0, r0, fp
 800a5d0:	4303      	orrs	r3, r0
 800a5d2:	9300      	str	r3, [sp, #0]
 800a5d4:	f10b 0b04 	add.w	fp, fp, #4
 800a5d8:	9b03      	ldr	r3, [sp, #12]
 800a5da:	e00d      	b.n	800a5f8 <__gethex+0x27c>
 800a5dc:	9b03      	ldr	r3, [sp, #12]
 800a5de:	9a06      	ldr	r2, [sp, #24]
 800a5e0:	4413      	add	r3, r2
 800a5e2:	42bb      	cmp	r3, r7
 800a5e4:	d3e0      	bcc.n	800a5a8 <__gethex+0x22c>
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	9901      	ldr	r1, [sp, #4]
 800a5ea:	9307      	str	r3, [sp, #28]
 800a5ec:	4652      	mov	r2, sl
 800a5ee:	f001 fada 	bl	800bba6 <strncmp>
 800a5f2:	9b07      	ldr	r3, [sp, #28]
 800a5f4:	2800      	cmp	r0, #0
 800a5f6:	d1d7      	bne.n	800a5a8 <__gethex+0x22c>
 800a5f8:	461e      	mov	r6, r3
 800a5fa:	e78b      	b.n	800a514 <__gethex+0x198>
 800a5fc:	f04f 0a03 	mov.w	sl, #3
 800a600:	e7b8      	b.n	800a574 <__gethex+0x1f8>
 800a602:	da0a      	bge.n	800a61a <__gethex+0x29e>
 800a604:	1a37      	subs	r7, r6, r0
 800a606:	4621      	mov	r1, r4
 800a608:	ee18 0a10 	vmov	r0, s16
 800a60c:	463a      	mov	r2, r7
 800a60e:	f000 fc9f 	bl	800af50 <__lshift>
 800a612:	1bed      	subs	r5, r5, r7
 800a614:	4604      	mov	r4, r0
 800a616:	f100 0914 	add.w	r9, r0, #20
 800a61a:	f04f 0a00 	mov.w	sl, #0
 800a61e:	e7ae      	b.n	800a57e <__gethex+0x202>
 800a620:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a624:	42a8      	cmp	r0, r5
 800a626:	dd72      	ble.n	800a70e <__gethex+0x392>
 800a628:	1b45      	subs	r5, r0, r5
 800a62a:	42ae      	cmp	r6, r5
 800a62c:	dc36      	bgt.n	800a69c <__gethex+0x320>
 800a62e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a632:	2b02      	cmp	r3, #2
 800a634:	d02a      	beq.n	800a68c <__gethex+0x310>
 800a636:	2b03      	cmp	r3, #3
 800a638:	d02c      	beq.n	800a694 <__gethex+0x318>
 800a63a:	2b01      	cmp	r3, #1
 800a63c:	d115      	bne.n	800a66a <__gethex+0x2ee>
 800a63e:	42ae      	cmp	r6, r5
 800a640:	d113      	bne.n	800a66a <__gethex+0x2ee>
 800a642:	2e01      	cmp	r6, #1
 800a644:	d10b      	bne.n	800a65e <__gethex+0x2e2>
 800a646:	9a04      	ldr	r2, [sp, #16]
 800a648:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a64c:	6013      	str	r3, [r2, #0]
 800a64e:	2301      	movs	r3, #1
 800a650:	6123      	str	r3, [r4, #16]
 800a652:	f8c9 3000 	str.w	r3, [r9]
 800a656:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a658:	2762      	movs	r7, #98	; 0x62
 800a65a:	601c      	str	r4, [r3, #0]
 800a65c:	e723      	b.n	800a4a6 <__gethex+0x12a>
 800a65e:	1e71      	subs	r1, r6, #1
 800a660:	4620      	mov	r0, r4
 800a662:	f000 feb3 	bl	800b3cc <__any_on>
 800a666:	2800      	cmp	r0, #0
 800a668:	d1ed      	bne.n	800a646 <__gethex+0x2ca>
 800a66a:	ee18 0a10 	vmov	r0, s16
 800a66e:	4621      	mov	r1, r4
 800a670:	f000 fa52 	bl	800ab18 <_Bfree>
 800a674:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a676:	2300      	movs	r3, #0
 800a678:	6013      	str	r3, [r2, #0]
 800a67a:	2750      	movs	r7, #80	; 0x50
 800a67c:	e713      	b.n	800a4a6 <__gethex+0x12a>
 800a67e:	bf00      	nop
 800a680:	0800c24c 	.word	0x0800c24c
 800a684:	0800c16c 	.word	0x0800c16c
 800a688:	0800c1e0 	.word	0x0800c1e0
 800a68c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d1eb      	bne.n	800a66a <__gethex+0x2ee>
 800a692:	e7d8      	b.n	800a646 <__gethex+0x2ca>
 800a694:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a696:	2b00      	cmp	r3, #0
 800a698:	d1d5      	bne.n	800a646 <__gethex+0x2ca>
 800a69a:	e7e6      	b.n	800a66a <__gethex+0x2ee>
 800a69c:	1e6f      	subs	r7, r5, #1
 800a69e:	f1ba 0f00 	cmp.w	sl, #0
 800a6a2:	d131      	bne.n	800a708 <__gethex+0x38c>
 800a6a4:	b127      	cbz	r7, 800a6b0 <__gethex+0x334>
 800a6a6:	4639      	mov	r1, r7
 800a6a8:	4620      	mov	r0, r4
 800a6aa:	f000 fe8f 	bl	800b3cc <__any_on>
 800a6ae:	4682      	mov	sl, r0
 800a6b0:	117b      	asrs	r3, r7, #5
 800a6b2:	2101      	movs	r1, #1
 800a6b4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a6b8:	f007 071f 	and.w	r7, r7, #31
 800a6bc:	fa01 f707 	lsl.w	r7, r1, r7
 800a6c0:	421f      	tst	r7, r3
 800a6c2:	4629      	mov	r1, r5
 800a6c4:	4620      	mov	r0, r4
 800a6c6:	bf18      	it	ne
 800a6c8:	f04a 0a02 	orrne.w	sl, sl, #2
 800a6cc:	1b76      	subs	r6, r6, r5
 800a6ce:	f7ff fdee 	bl	800a2ae <rshift>
 800a6d2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a6d6:	2702      	movs	r7, #2
 800a6d8:	f1ba 0f00 	cmp.w	sl, #0
 800a6dc:	d048      	beq.n	800a770 <__gethex+0x3f4>
 800a6de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a6e2:	2b02      	cmp	r3, #2
 800a6e4:	d015      	beq.n	800a712 <__gethex+0x396>
 800a6e6:	2b03      	cmp	r3, #3
 800a6e8:	d017      	beq.n	800a71a <__gethex+0x39e>
 800a6ea:	2b01      	cmp	r3, #1
 800a6ec:	d109      	bne.n	800a702 <__gethex+0x386>
 800a6ee:	f01a 0f02 	tst.w	sl, #2
 800a6f2:	d006      	beq.n	800a702 <__gethex+0x386>
 800a6f4:	f8d9 0000 	ldr.w	r0, [r9]
 800a6f8:	ea4a 0a00 	orr.w	sl, sl, r0
 800a6fc:	f01a 0f01 	tst.w	sl, #1
 800a700:	d10e      	bne.n	800a720 <__gethex+0x3a4>
 800a702:	f047 0710 	orr.w	r7, r7, #16
 800a706:	e033      	b.n	800a770 <__gethex+0x3f4>
 800a708:	f04f 0a01 	mov.w	sl, #1
 800a70c:	e7d0      	b.n	800a6b0 <__gethex+0x334>
 800a70e:	2701      	movs	r7, #1
 800a710:	e7e2      	b.n	800a6d8 <__gethex+0x35c>
 800a712:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a714:	f1c3 0301 	rsb	r3, r3, #1
 800a718:	9315      	str	r3, [sp, #84]	; 0x54
 800a71a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d0f0      	beq.n	800a702 <__gethex+0x386>
 800a720:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a724:	f104 0314 	add.w	r3, r4, #20
 800a728:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a72c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a730:	f04f 0c00 	mov.w	ip, #0
 800a734:	4618      	mov	r0, r3
 800a736:	f853 2b04 	ldr.w	r2, [r3], #4
 800a73a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a73e:	d01c      	beq.n	800a77a <__gethex+0x3fe>
 800a740:	3201      	adds	r2, #1
 800a742:	6002      	str	r2, [r0, #0]
 800a744:	2f02      	cmp	r7, #2
 800a746:	f104 0314 	add.w	r3, r4, #20
 800a74a:	d13f      	bne.n	800a7cc <__gethex+0x450>
 800a74c:	f8d8 2000 	ldr.w	r2, [r8]
 800a750:	3a01      	subs	r2, #1
 800a752:	42b2      	cmp	r2, r6
 800a754:	d10a      	bne.n	800a76c <__gethex+0x3f0>
 800a756:	1171      	asrs	r1, r6, #5
 800a758:	2201      	movs	r2, #1
 800a75a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a75e:	f006 061f 	and.w	r6, r6, #31
 800a762:	fa02 f606 	lsl.w	r6, r2, r6
 800a766:	421e      	tst	r6, r3
 800a768:	bf18      	it	ne
 800a76a:	4617      	movne	r7, r2
 800a76c:	f047 0720 	orr.w	r7, r7, #32
 800a770:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a772:	601c      	str	r4, [r3, #0]
 800a774:	9b04      	ldr	r3, [sp, #16]
 800a776:	601d      	str	r5, [r3, #0]
 800a778:	e695      	b.n	800a4a6 <__gethex+0x12a>
 800a77a:	4299      	cmp	r1, r3
 800a77c:	f843 cc04 	str.w	ip, [r3, #-4]
 800a780:	d8d8      	bhi.n	800a734 <__gethex+0x3b8>
 800a782:	68a3      	ldr	r3, [r4, #8]
 800a784:	459b      	cmp	fp, r3
 800a786:	db19      	blt.n	800a7bc <__gethex+0x440>
 800a788:	6861      	ldr	r1, [r4, #4]
 800a78a:	ee18 0a10 	vmov	r0, s16
 800a78e:	3101      	adds	r1, #1
 800a790:	f000 f982 	bl	800aa98 <_Balloc>
 800a794:	4681      	mov	r9, r0
 800a796:	b918      	cbnz	r0, 800a7a0 <__gethex+0x424>
 800a798:	4b1a      	ldr	r3, [pc, #104]	; (800a804 <__gethex+0x488>)
 800a79a:	4602      	mov	r2, r0
 800a79c:	2184      	movs	r1, #132	; 0x84
 800a79e:	e6a8      	b.n	800a4f2 <__gethex+0x176>
 800a7a0:	6922      	ldr	r2, [r4, #16]
 800a7a2:	3202      	adds	r2, #2
 800a7a4:	f104 010c 	add.w	r1, r4, #12
 800a7a8:	0092      	lsls	r2, r2, #2
 800a7aa:	300c      	adds	r0, #12
 800a7ac:	f7fc feae 	bl	800750c <memcpy>
 800a7b0:	4621      	mov	r1, r4
 800a7b2:	ee18 0a10 	vmov	r0, s16
 800a7b6:	f000 f9af 	bl	800ab18 <_Bfree>
 800a7ba:	464c      	mov	r4, r9
 800a7bc:	6923      	ldr	r3, [r4, #16]
 800a7be:	1c5a      	adds	r2, r3, #1
 800a7c0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a7c4:	6122      	str	r2, [r4, #16]
 800a7c6:	2201      	movs	r2, #1
 800a7c8:	615a      	str	r2, [r3, #20]
 800a7ca:	e7bb      	b.n	800a744 <__gethex+0x3c8>
 800a7cc:	6922      	ldr	r2, [r4, #16]
 800a7ce:	455a      	cmp	r2, fp
 800a7d0:	dd0b      	ble.n	800a7ea <__gethex+0x46e>
 800a7d2:	2101      	movs	r1, #1
 800a7d4:	4620      	mov	r0, r4
 800a7d6:	f7ff fd6a 	bl	800a2ae <rshift>
 800a7da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a7de:	3501      	adds	r5, #1
 800a7e0:	42ab      	cmp	r3, r5
 800a7e2:	f6ff aed0 	blt.w	800a586 <__gethex+0x20a>
 800a7e6:	2701      	movs	r7, #1
 800a7e8:	e7c0      	b.n	800a76c <__gethex+0x3f0>
 800a7ea:	f016 061f 	ands.w	r6, r6, #31
 800a7ee:	d0fa      	beq.n	800a7e6 <__gethex+0x46a>
 800a7f0:	449a      	add	sl, r3
 800a7f2:	f1c6 0620 	rsb	r6, r6, #32
 800a7f6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800a7fa:	f000 fa43 	bl	800ac84 <__hi0bits>
 800a7fe:	42b0      	cmp	r0, r6
 800a800:	dbe7      	blt.n	800a7d2 <__gethex+0x456>
 800a802:	e7f0      	b.n	800a7e6 <__gethex+0x46a>
 800a804:	0800c16c 	.word	0x0800c16c

0800a808 <L_shift>:
 800a808:	f1c2 0208 	rsb	r2, r2, #8
 800a80c:	0092      	lsls	r2, r2, #2
 800a80e:	b570      	push	{r4, r5, r6, lr}
 800a810:	f1c2 0620 	rsb	r6, r2, #32
 800a814:	6843      	ldr	r3, [r0, #4]
 800a816:	6804      	ldr	r4, [r0, #0]
 800a818:	fa03 f506 	lsl.w	r5, r3, r6
 800a81c:	432c      	orrs	r4, r5
 800a81e:	40d3      	lsrs	r3, r2
 800a820:	6004      	str	r4, [r0, #0]
 800a822:	f840 3f04 	str.w	r3, [r0, #4]!
 800a826:	4288      	cmp	r0, r1
 800a828:	d3f4      	bcc.n	800a814 <L_shift+0xc>
 800a82a:	bd70      	pop	{r4, r5, r6, pc}

0800a82c <__match>:
 800a82c:	b530      	push	{r4, r5, lr}
 800a82e:	6803      	ldr	r3, [r0, #0]
 800a830:	3301      	adds	r3, #1
 800a832:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a836:	b914      	cbnz	r4, 800a83e <__match+0x12>
 800a838:	6003      	str	r3, [r0, #0]
 800a83a:	2001      	movs	r0, #1
 800a83c:	bd30      	pop	{r4, r5, pc}
 800a83e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a842:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a846:	2d19      	cmp	r5, #25
 800a848:	bf98      	it	ls
 800a84a:	3220      	addls	r2, #32
 800a84c:	42a2      	cmp	r2, r4
 800a84e:	d0f0      	beq.n	800a832 <__match+0x6>
 800a850:	2000      	movs	r0, #0
 800a852:	e7f3      	b.n	800a83c <__match+0x10>

0800a854 <__hexnan>:
 800a854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a858:	680b      	ldr	r3, [r1, #0]
 800a85a:	6801      	ldr	r1, [r0, #0]
 800a85c:	115e      	asrs	r6, r3, #5
 800a85e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a862:	f013 031f 	ands.w	r3, r3, #31
 800a866:	b087      	sub	sp, #28
 800a868:	bf18      	it	ne
 800a86a:	3604      	addne	r6, #4
 800a86c:	2500      	movs	r5, #0
 800a86e:	1f37      	subs	r7, r6, #4
 800a870:	4682      	mov	sl, r0
 800a872:	4690      	mov	r8, r2
 800a874:	9301      	str	r3, [sp, #4]
 800a876:	f846 5c04 	str.w	r5, [r6, #-4]
 800a87a:	46b9      	mov	r9, r7
 800a87c:	463c      	mov	r4, r7
 800a87e:	9502      	str	r5, [sp, #8]
 800a880:	46ab      	mov	fp, r5
 800a882:	784a      	ldrb	r2, [r1, #1]
 800a884:	1c4b      	adds	r3, r1, #1
 800a886:	9303      	str	r3, [sp, #12]
 800a888:	b342      	cbz	r2, 800a8dc <__hexnan+0x88>
 800a88a:	4610      	mov	r0, r2
 800a88c:	9105      	str	r1, [sp, #20]
 800a88e:	9204      	str	r2, [sp, #16]
 800a890:	f7ff fd5f 	bl	800a352 <__hexdig_fun>
 800a894:	2800      	cmp	r0, #0
 800a896:	d14f      	bne.n	800a938 <__hexnan+0xe4>
 800a898:	9a04      	ldr	r2, [sp, #16]
 800a89a:	9905      	ldr	r1, [sp, #20]
 800a89c:	2a20      	cmp	r2, #32
 800a89e:	d818      	bhi.n	800a8d2 <__hexnan+0x7e>
 800a8a0:	9b02      	ldr	r3, [sp, #8]
 800a8a2:	459b      	cmp	fp, r3
 800a8a4:	dd13      	ble.n	800a8ce <__hexnan+0x7a>
 800a8a6:	454c      	cmp	r4, r9
 800a8a8:	d206      	bcs.n	800a8b8 <__hexnan+0x64>
 800a8aa:	2d07      	cmp	r5, #7
 800a8ac:	dc04      	bgt.n	800a8b8 <__hexnan+0x64>
 800a8ae:	462a      	mov	r2, r5
 800a8b0:	4649      	mov	r1, r9
 800a8b2:	4620      	mov	r0, r4
 800a8b4:	f7ff ffa8 	bl	800a808 <L_shift>
 800a8b8:	4544      	cmp	r4, r8
 800a8ba:	d950      	bls.n	800a95e <__hexnan+0x10a>
 800a8bc:	2300      	movs	r3, #0
 800a8be:	f1a4 0904 	sub.w	r9, r4, #4
 800a8c2:	f844 3c04 	str.w	r3, [r4, #-4]
 800a8c6:	f8cd b008 	str.w	fp, [sp, #8]
 800a8ca:	464c      	mov	r4, r9
 800a8cc:	461d      	mov	r5, r3
 800a8ce:	9903      	ldr	r1, [sp, #12]
 800a8d0:	e7d7      	b.n	800a882 <__hexnan+0x2e>
 800a8d2:	2a29      	cmp	r2, #41	; 0x29
 800a8d4:	d156      	bne.n	800a984 <__hexnan+0x130>
 800a8d6:	3102      	adds	r1, #2
 800a8d8:	f8ca 1000 	str.w	r1, [sl]
 800a8dc:	f1bb 0f00 	cmp.w	fp, #0
 800a8e0:	d050      	beq.n	800a984 <__hexnan+0x130>
 800a8e2:	454c      	cmp	r4, r9
 800a8e4:	d206      	bcs.n	800a8f4 <__hexnan+0xa0>
 800a8e6:	2d07      	cmp	r5, #7
 800a8e8:	dc04      	bgt.n	800a8f4 <__hexnan+0xa0>
 800a8ea:	462a      	mov	r2, r5
 800a8ec:	4649      	mov	r1, r9
 800a8ee:	4620      	mov	r0, r4
 800a8f0:	f7ff ff8a 	bl	800a808 <L_shift>
 800a8f4:	4544      	cmp	r4, r8
 800a8f6:	d934      	bls.n	800a962 <__hexnan+0x10e>
 800a8f8:	f1a8 0204 	sub.w	r2, r8, #4
 800a8fc:	4623      	mov	r3, r4
 800a8fe:	f853 1b04 	ldr.w	r1, [r3], #4
 800a902:	f842 1f04 	str.w	r1, [r2, #4]!
 800a906:	429f      	cmp	r7, r3
 800a908:	d2f9      	bcs.n	800a8fe <__hexnan+0xaa>
 800a90a:	1b3b      	subs	r3, r7, r4
 800a90c:	f023 0303 	bic.w	r3, r3, #3
 800a910:	3304      	adds	r3, #4
 800a912:	3401      	adds	r4, #1
 800a914:	3e03      	subs	r6, #3
 800a916:	42b4      	cmp	r4, r6
 800a918:	bf88      	it	hi
 800a91a:	2304      	movhi	r3, #4
 800a91c:	4443      	add	r3, r8
 800a91e:	2200      	movs	r2, #0
 800a920:	f843 2b04 	str.w	r2, [r3], #4
 800a924:	429f      	cmp	r7, r3
 800a926:	d2fb      	bcs.n	800a920 <__hexnan+0xcc>
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	b91b      	cbnz	r3, 800a934 <__hexnan+0xe0>
 800a92c:	4547      	cmp	r7, r8
 800a92e:	d127      	bne.n	800a980 <__hexnan+0x12c>
 800a930:	2301      	movs	r3, #1
 800a932:	603b      	str	r3, [r7, #0]
 800a934:	2005      	movs	r0, #5
 800a936:	e026      	b.n	800a986 <__hexnan+0x132>
 800a938:	3501      	adds	r5, #1
 800a93a:	2d08      	cmp	r5, #8
 800a93c:	f10b 0b01 	add.w	fp, fp, #1
 800a940:	dd06      	ble.n	800a950 <__hexnan+0xfc>
 800a942:	4544      	cmp	r4, r8
 800a944:	d9c3      	bls.n	800a8ce <__hexnan+0x7a>
 800a946:	2300      	movs	r3, #0
 800a948:	f844 3c04 	str.w	r3, [r4, #-4]
 800a94c:	2501      	movs	r5, #1
 800a94e:	3c04      	subs	r4, #4
 800a950:	6822      	ldr	r2, [r4, #0]
 800a952:	f000 000f 	and.w	r0, r0, #15
 800a956:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a95a:	6022      	str	r2, [r4, #0]
 800a95c:	e7b7      	b.n	800a8ce <__hexnan+0x7a>
 800a95e:	2508      	movs	r5, #8
 800a960:	e7b5      	b.n	800a8ce <__hexnan+0x7a>
 800a962:	9b01      	ldr	r3, [sp, #4]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d0df      	beq.n	800a928 <__hexnan+0xd4>
 800a968:	f04f 32ff 	mov.w	r2, #4294967295
 800a96c:	f1c3 0320 	rsb	r3, r3, #32
 800a970:	fa22 f303 	lsr.w	r3, r2, r3
 800a974:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a978:	401a      	ands	r2, r3
 800a97a:	f846 2c04 	str.w	r2, [r6, #-4]
 800a97e:	e7d3      	b.n	800a928 <__hexnan+0xd4>
 800a980:	3f04      	subs	r7, #4
 800a982:	e7d1      	b.n	800a928 <__hexnan+0xd4>
 800a984:	2004      	movs	r0, #4
 800a986:	b007      	add	sp, #28
 800a988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a98c <_localeconv_r>:
 800a98c:	4800      	ldr	r0, [pc, #0]	; (800a990 <_localeconv_r+0x4>)
 800a98e:	4770      	bx	lr
 800a990:	20000164 	.word	0x20000164

0800a994 <__retarget_lock_init_recursive>:
 800a994:	4770      	bx	lr

0800a996 <__retarget_lock_acquire_recursive>:
 800a996:	4770      	bx	lr

0800a998 <__retarget_lock_release_recursive>:
 800a998:	4770      	bx	lr

0800a99a <__swhatbuf_r>:
 800a99a:	b570      	push	{r4, r5, r6, lr}
 800a99c:	460e      	mov	r6, r1
 800a99e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9a2:	2900      	cmp	r1, #0
 800a9a4:	b096      	sub	sp, #88	; 0x58
 800a9a6:	4614      	mov	r4, r2
 800a9a8:	461d      	mov	r5, r3
 800a9aa:	da07      	bge.n	800a9bc <__swhatbuf_r+0x22>
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	602b      	str	r3, [r5, #0]
 800a9b0:	89b3      	ldrh	r3, [r6, #12]
 800a9b2:	061a      	lsls	r2, r3, #24
 800a9b4:	d410      	bmi.n	800a9d8 <__swhatbuf_r+0x3e>
 800a9b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9ba:	e00e      	b.n	800a9da <__swhatbuf_r+0x40>
 800a9bc:	466a      	mov	r2, sp
 800a9be:	f001 f963 	bl	800bc88 <_fstat_r>
 800a9c2:	2800      	cmp	r0, #0
 800a9c4:	dbf2      	blt.n	800a9ac <__swhatbuf_r+0x12>
 800a9c6:	9a01      	ldr	r2, [sp, #4]
 800a9c8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a9cc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a9d0:	425a      	negs	r2, r3
 800a9d2:	415a      	adcs	r2, r3
 800a9d4:	602a      	str	r2, [r5, #0]
 800a9d6:	e7ee      	b.n	800a9b6 <__swhatbuf_r+0x1c>
 800a9d8:	2340      	movs	r3, #64	; 0x40
 800a9da:	2000      	movs	r0, #0
 800a9dc:	6023      	str	r3, [r4, #0]
 800a9de:	b016      	add	sp, #88	; 0x58
 800a9e0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a9e4 <__smakebuf_r>:
 800a9e4:	898b      	ldrh	r3, [r1, #12]
 800a9e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a9e8:	079d      	lsls	r5, r3, #30
 800a9ea:	4606      	mov	r6, r0
 800a9ec:	460c      	mov	r4, r1
 800a9ee:	d507      	bpl.n	800aa00 <__smakebuf_r+0x1c>
 800a9f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a9f4:	6023      	str	r3, [r4, #0]
 800a9f6:	6123      	str	r3, [r4, #16]
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	6163      	str	r3, [r4, #20]
 800a9fc:	b002      	add	sp, #8
 800a9fe:	bd70      	pop	{r4, r5, r6, pc}
 800aa00:	ab01      	add	r3, sp, #4
 800aa02:	466a      	mov	r2, sp
 800aa04:	f7ff ffc9 	bl	800a99a <__swhatbuf_r>
 800aa08:	9900      	ldr	r1, [sp, #0]
 800aa0a:	4605      	mov	r5, r0
 800aa0c:	4630      	mov	r0, r6
 800aa0e:	f000 fd5d 	bl	800b4cc <_malloc_r>
 800aa12:	b948      	cbnz	r0, 800aa28 <__smakebuf_r+0x44>
 800aa14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa18:	059a      	lsls	r2, r3, #22
 800aa1a:	d4ef      	bmi.n	800a9fc <__smakebuf_r+0x18>
 800aa1c:	f023 0303 	bic.w	r3, r3, #3
 800aa20:	f043 0302 	orr.w	r3, r3, #2
 800aa24:	81a3      	strh	r3, [r4, #12]
 800aa26:	e7e3      	b.n	800a9f0 <__smakebuf_r+0xc>
 800aa28:	4b0d      	ldr	r3, [pc, #52]	; (800aa60 <__smakebuf_r+0x7c>)
 800aa2a:	62b3      	str	r3, [r6, #40]	; 0x28
 800aa2c:	89a3      	ldrh	r3, [r4, #12]
 800aa2e:	6020      	str	r0, [r4, #0]
 800aa30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa34:	81a3      	strh	r3, [r4, #12]
 800aa36:	9b00      	ldr	r3, [sp, #0]
 800aa38:	6163      	str	r3, [r4, #20]
 800aa3a:	9b01      	ldr	r3, [sp, #4]
 800aa3c:	6120      	str	r0, [r4, #16]
 800aa3e:	b15b      	cbz	r3, 800aa58 <__smakebuf_r+0x74>
 800aa40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa44:	4630      	mov	r0, r6
 800aa46:	f001 f931 	bl	800bcac <_isatty_r>
 800aa4a:	b128      	cbz	r0, 800aa58 <__smakebuf_r+0x74>
 800aa4c:	89a3      	ldrh	r3, [r4, #12]
 800aa4e:	f023 0303 	bic.w	r3, r3, #3
 800aa52:	f043 0301 	orr.w	r3, r3, #1
 800aa56:	81a3      	strh	r3, [r4, #12]
 800aa58:	89a0      	ldrh	r0, [r4, #12]
 800aa5a:	4305      	orrs	r5, r0
 800aa5c:	81a5      	strh	r5, [r4, #12]
 800aa5e:	e7cd      	b.n	800a9fc <__smakebuf_r+0x18>
 800aa60:	0800a10d 	.word	0x0800a10d

0800aa64 <malloc>:
 800aa64:	4b02      	ldr	r3, [pc, #8]	; (800aa70 <malloc+0xc>)
 800aa66:	4601      	mov	r1, r0
 800aa68:	6818      	ldr	r0, [r3, #0]
 800aa6a:	f000 bd2f 	b.w	800b4cc <_malloc_r>
 800aa6e:	bf00      	nop
 800aa70:	2000000c 	.word	0x2000000c

0800aa74 <__ascii_mbtowc>:
 800aa74:	b082      	sub	sp, #8
 800aa76:	b901      	cbnz	r1, 800aa7a <__ascii_mbtowc+0x6>
 800aa78:	a901      	add	r1, sp, #4
 800aa7a:	b142      	cbz	r2, 800aa8e <__ascii_mbtowc+0x1a>
 800aa7c:	b14b      	cbz	r3, 800aa92 <__ascii_mbtowc+0x1e>
 800aa7e:	7813      	ldrb	r3, [r2, #0]
 800aa80:	600b      	str	r3, [r1, #0]
 800aa82:	7812      	ldrb	r2, [r2, #0]
 800aa84:	1e10      	subs	r0, r2, #0
 800aa86:	bf18      	it	ne
 800aa88:	2001      	movne	r0, #1
 800aa8a:	b002      	add	sp, #8
 800aa8c:	4770      	bx	lr
 800aa8e:	4610      	mov	r0, r2
 800aa90:	e7fb      	b.n	800aa8a <__ascii_mbtowc+0x16>
 800aa92:	f06f 0001 	mvn.w	r0, #1
 800aa96:	e7f8      	b.n	800aa8a <__ascii_mbtowc+0x16>

0800aa98 <_Balloc>:
 800aa98:	b570      	push	{r4, r5, r6, lr}
 800aa9a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aa9c:	4604      	mov	r4, r0
 800aa9e:	460d      	mov	r5, r1
 800aaa0:	b976      	cbnz	r6, 800aac0 <_Balloc+0x28>
 800aaa2:	2010      	movs	r0, #16
 800aaa4:	f7ff ffde 	bl	800aa64 <malloc>
 800aaa8:	4602      	mov	r2, r0
 800aaaa:	6260      	str	r0, [r4, #36]	; 0x24
 800aaac:	b920      	cbnz	r0, 800aab8 <_Balloc+0x20>
 800aaae:	4b18      	ldr	r3, [pc, #96]	; (800ab10 <_Balloc+0x78>)
 800aab0:	4818      	ldr	r0, [pc, #96]	; (800ab14 <_Balloc+0x7c>)
 800aab2:	2166      	movs	r1, #102	; 0x66
 800aab4:	f001 f8a8 	bl	800bc08 <__assert_func>
 800aab8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aabc:	6006      	str	r6, [r0, #0]
 800aabe:	60c6      	str	r6, [r0, #12]
 800aac0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800aac2:	68f3      	ldr	r3, [r6, #12]
 800aac4:	b183      	cbz	r3, 800aae8 <_Balloc+0x50>
 800aac6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aac8:	68db      	ldr	r3, [r3, #12]
 800aaca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aace:	b9b8      	cbnz	r0, 800ab00 <_Balloc+0x68>
 800aad0:	2101      	movs	r1, #1
 800aad2:	fa01 f605 	lsl.w	r6, r1, r5
 800aad6:	1d72      	adds	r2, r6, #5
 800aad8:	0092      	lsls	r2, r2, #2
 800aada:	4620      	mov	r0, r4
 800aadc:	f000 fc97 	bl	800b40e <_calloc_r>
 800aae0:	b160      	cbz	r0, 800aafc <_Balloc+0x64>
 800aae2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aae6:	e00e      	b.n	800ab06 <_Balloc+0x6e>
 800aae8:	2221      	movs	r2, #33	; 0x21
 800aaea:	2104      	movs	r1, #4
 800aaec:	4620      	mov	r0, r4
 800aaee:	f000 fc8e 	bl	800b40e <_calloc_r>
 800aaf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aaf4:	60f0      	str	r0, [r6, #12]
 800aaf6:	68db      	ldr	r3, [r3, #12]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d1e4      	bne.n	800aac6 <_Balloc+0x2e>
 800aafc:	2000      	movs	r0, #0
 800aafe:	bd70      	pop	{r4, r5, r6, pc}
 800ab00:	6802      	ldr	r2, [r0, #0]
 800ab02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ab06:	2300      	movs	r3, #0
 800ab08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ab0c:	e7f7      	b.n	800aafe <_Balloc+0x66>
 800ab0e:	bf00      	nop
 800ab10:	0800c0f6 	.word	0x0800c0f6
 800ab14:	0800c260 	.word	0x0800c260

0800ab18 <_Bfree>:
 800ab18:	b570      	push	{r4, r5, r6, lr}
 800ab1a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ab1c:	4605      	mov	r5, r0
 800ab1e:	460c      	mov	r4, r1
 800ab20:	b976      	cbnz	r6, 800ab40 <_Bfree+0x28>
 800ab22:	2010      	movs	r0, #16
 800ab24:	f7ff ff9e 	bl	800aa64 <malloc>
 800ab28:	4602      	mov	r2, r0
 800ab2a:	6268      	str	r0, [r5, #36]	; 0x24
 800ab2c:	b920      	cbnz	r0, 800ab38 <_Bfree+0x20>
 800ab2e:	4b09      	ldr	r3, [pc, #36]	; (800ab54 <_Bfree+0x3c>)
 800ab30:	4809      	ldr	r0, [pc, #36]	; (800ab58 <_Bfree+0x40>)
 800ab32:	218a      	movs	r1, #138	; 0x8a
 800ab34:	f001 f868 	bl	800bc08 <__assert_func>
 800ab38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab3c:	6006      	str	r6, [r0, #0]
 800ab3e:	60c6      	str	r6, [r0, #12]
 800ab40:	b13c      	cbz	r4, 800ab52 <_Bfree+0x3a>
 800ab42:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ab44:	6862      	ldr	r2, [r4, #4]
 800ab46:	68db      	ldr	r3, [r3, #12]
 800ab48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ab4c:	6021      	str	r1, [r4, #0]
 800ab4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ab52:	bd70      	pop	{r4, r5, r6, pc}
 800ab54:	0800c0f6 	.word	0x0800c0f6
 800ab58:	0800c260 	.word	0x0800c260

0800ab5c <__multadd>:
 800ab5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab60:	690e      	ldr	r6, [r1, #16]
 800ab62:	4607      	mov	r7, r0
 800ab64:	4698      	mov	r8, r3
 800ab66:	460c      	mov	r4, r1
 800ab68:	f101 0014 	add.w	r0, r1, #20
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	6805      	ldr	r5, [r0, #0]
 800ab70:	b2a9      	uxth	r1, r5
 800ab72:	fb02 8101 	mla	r1, r2, r1, r8
 800ab76:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800ab7a:	0c2d      	lsrs	r5, r5, #16
 800ab7c:	fb02 c505 	mla	r5, r2, r5, ip
 800ab80:	b289      	uxth	r1, r1
 800ab82:	3301      	adds	r3, #1
 800ab84:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800ab88:	429e      	cmp	r6, r3
 800ab8a:	f840 1b04 	str.w	r1, [r0], #4
 800ab8e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800ab92:	dcec      	bgt.n	800ab6e <__multadd+0x12>
 800ab94:	f1b8 0f00 	cmp.w	r8, #0
 800ab98:	d022      	beq.n	800abe0 <__multadd+0x84>
 800ab9a:	68a3      	ldr	r3, [r4, #8]
 800ab9c:	42b3      	cmp	r3, r6
 800ab9e:	dc19      	bgt.n	800abd4 <__multadd+0x78>
 800aba0:	6861      	ldr	r1, [r4, #4]
 800aba2:	4638      	mov	r0, r7
 800aba4:	3101      	adds	r1, #1
 800aba6:	f7ff ff77 	bl	800aa98 <_Balloc>
 800abaa:	4605      	mov	r5, r0
 800abac:	b928      	cbnz	r0, 800abba <__multadd+0x5e>
 800abae:	4602      	mov	r2, r0
 800abb0:	4b0d      	ldr	r3, [pc, #52]	; (800abe8 <__multadd+0x8c>)
 800abb2:	480e      	ldr	r0, [pc, #56]	; (800abec <__multadd+0x90>)
 800abb4:	21b5      	movs	r1, #181	; 0xb5
 800abb6:	f001 f827 	bl	800bc08 <__assert_func>
 800abba:	6922      	ldr	r2, [r4, #16]
 800abbc:	3202      	adds	r2, #2
 800abbe:	f104 010c 	add.w	r1, r4, #12
 800abc2:	0092      	lsls	r2, r2, #2
 800abc4:	300c      	adds	r0, #12
 800abc6:	f7fc fca1 	bl	800750c <memcpy>
 800abca:	4621      	mov	r1, r4
 800abcc:	4638      	mov	r0, r7
 800abce:	f7ff ffa3 	bl	800ab18 <_Bfree>
 800abd2:	462c      	mov	r4, r5
 800abd4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800abd8:	3601      	adds	r6, #1
 800abda:	f8c3 8014 	str.w	r8, [r3, #20]
 800abde:	6126      	str	r6, [r4, #16]
 800abe0:	4620      	mov	r0, r4
 800abe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abe6:	bf00      	nop
 800abe8:	0800c16c 	.word	0x0800c16c
 800abec:	0800c260 	.word	0x0800c260

0800abf0 <__s2b>:
 800abf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abf4:	460c      	mov	r4, r1
 800abf6:	4615      	mov	r5, r2
 800abf8:	461f      	mov	r7, r3
 800abfa:	2209      	movs	r2, #9
 800abfc:	3308      	adds	r3, #8
 800abfe:	4606      	mov	r6, r0
 800ac00:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac04:	2100      	movs	r1, #0
 800ac06:	2201      	movs	r2, #1
 800ac08:	429a      	cmp	r2, r3
 800ac0a:	db09      	blt.n	800ac20 <__s2b+0x30>
 800ac0c:	4630      	mov	r0, r6
 800ac0e:	f7ff ff43 	bl	800aa98 <_Balloc>
 800ac12:	b940      	cbnz	r0, 800ac26 <__s2b+0x36>
 800ac14:	4602      	mov	r2, r0
 800ac16:	4b19      	ldr	r3, [pc, #100]	; (800ac7c <__s2b+0x8c>)
 800ac18:	4819      	ldr	r0, [pc, #100]	; (800ac80 <__s2b+0x90>)
 800ac1a:	21ce      	movs	r1, #206	; 0xce
 800ac1c:	f000 fff4 	bl	800bc08 <__assert_func>
 800ac20:	0052      	lsls	r2, r2, #1
 800ac22:	3101      	adds	r1, #1
 800ac24:	e7f0      	b.n	800ac08 <__s2b+0x18>
 800ac26:	9b08      	ldr	r3, [sp, #32]
 800ac28:	6143      	str	r3, [r0, #20]
 800ac2a:	2d09      	cmp	r5, #9
 800ac2c:	f04f 0301 	mov.w	r3, #1
 800ac30:	6103      	str	r3, [r0, #16]
 800ac32:	dd16      	ble.n	800ac62 <__s2b+0x72>
 800ac34:	f104 0909 	add.w	r9, r4, #9
 800ac38:	46c8      	mov	r8, r9
 800ac3a:	442c      	add	r4, r5
 800ac3c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ac40:	4601      	mov	r1, r0
 800ac42:	3b30      	subs	r3, #48	; 0x30
 800ac44:	220a      	movs	r2, #10
 800ac46:	4630      	mov	r0, r6
 800ac48:	f7ff ff88 	bl	800ab5c <__multadd>
 800ac4c:	45a0      	cmp	r8, r4
 800ac4e:	d1f5      	bne.n	800ac3c <__s2b+0x4c>
 800ac50:	f1a5 0408 	sub.w	r4, r5, #8
 800ac54:	444c      	add	r4, r9
 800ac56:	1b2d      	subs	r5, r5, r4
 800ac58:	1963      	adds	r3, r4, r5
 800ac5a:	42bb      	cmp	r3, r7
 800ac5c:	db04      	blt.n	800ac68 <__s2b+0x78>
 800ac5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac62:	340a      	adds	r4, #10
 800ac64:	2509      	movs	r5, #9
 800ac66:	e7f6      	b.n	800ac56 <__s2b+0x66>
 800ac68:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ac6c:	4601      	mov	r1, r0
 800ac6e:	3b30      	subs	r3, #48	; 0x30
 800ac70:	220a      	movs	r2, #10
 800ac72:	4630      	mov	r0, r6
 800ac74:	f7ff ff72 	bl	800ab5c <__multadd>
 800ac78:	e7ee      	b.n	800ac58 <__s2b+0x68>
 800ac7a:	bf00      	nop
 800ac7c:	0800c16c 	.word	0x0800c16c
 800ac80:	0800c260 	.word	0x0800c260

0800ac84 <__hi0bits>:
 800ac84:	0c03      	lsrs	r3, r0, #16
 800ac86:	041b      	lsls	r3, r3, #16
 800ac88:	b9d3      	cbnz	r3, 800acc0 <__hi0bits+0x3c>
 800ac8a:	0400      	lsls	r0, r0, #16
 800ac8c:	2310      	movs	r3, #16
 800ac8e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ac92:	bf04      	itt	eq
 800ac94:	0200      	lsleq	r0, r0, #8
 800ac96:	3308      	addeq	r3, #8
 800ac98:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ac9c:	bf04      	itt	eq
 800ac9e:	0100      	lsleq	r0, r0, #4
 800aca0:	3304      	addeq	r3, #4
 800aca2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800aca6:	bf04      	itt	eq
 800aca8:	0080      	lsleq	r0, r0, #2
 800acaa:	3302      	addeq	r3, #2
 800acac:	2800      	cmp	r0, #0
 800acae:	db05      	blt.n	800acbc <__hi0bits+0x38>
 800acb0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800acb4:	f103 0301 	add.w	r3, r3, #1
 800acb8:	bf08      	it	eq
 800acba:	2320      	moveq	r3, #32
 800acbc:	4618      	mov	r0, r3
 800acbe:	4770      	bx	lr
 800acc0:	2300      	movs	r3, #0
 800acc2:	e7e4      	b.n	800ac8e <__hi0bits+0xa>

0800acc4 <__lo0bits>:
 800acc4:	6803      	ldr	r3, [r0, #0]
 800acc6:	f013 0207 	ands.w	r2, r3, #7
 800acca:	4601      	mov	r1, r0
 800accc:	d00b      	beq.n	800ace6 <__lo0bits+0x22>
 800acce:	07da      	lsls	r2, r3, #31
 800acd0:	d424      	bmi.n	800ad1c <__lo0bits+0x58>
 800acd2:	0798      	lsls	r0, r3, #30
 800acd4:	bf49      	itett	mi
 800acd6:	085b      	lsrmi	r3, r3, #1
 800acd8:	089b      	lsrpl	r3, r3, #2
 800acda:	2001      	movmi	r0, #1
 800acdc:	600b      	strmi	r3, [r1, #0]
 800acde:	bf5c      	itt	pl
 800ace0:	600b      	strpl	r3, [r1, #0]
 800ace2:	2002      	movpl	r0, #2
 800ace4:	4770      	bx	lr
 800ace6:	b298      	uxth	r0, r3
 800ace8:	b9b0      	cbnz	r0, 800ad18 <__lo0bits+0x54>
 800acea:	0c1b      	lsrs	r3, r3, #16
 800acec:	2010      	movs	r0, #16
 800acee:	f013 0fff 	tst.w	r3, #255	; 0xff
 800acf2:	bf04      	itt	eq
 800acf4:	0a1b      	lsreq	r3, r3, #8
 800acf6:	3008      	addeq	r0, #8
 800acf8:	071a      	lsls	r2, r3, #28
 800acfa:	bf04      	itt	eq
 800acfc:	091b      	lsreq	r3, r3, #4
 800acfe:	3004      	addeq	r0, #4
 800ad00:	079a      	lsls	r2, r3, #30
 800ad02:	bf04      	itt	eq
 800ad04:	089b      	lsreq	r3, r3, #2
 800ad06:	3002      	addeq	r0, #2
 800ad08:	07da      	lsls	r2, r3, #31
 800ad0a:	d403      	bmi.n	800ad14 <__lo0bits+0x50>
 800ad0c:	085b      	lsrs	r3, r3, #1
 800ad0e:	f100 0001 	add.w	r0, r0, #1
 800ad12:	d005      	beq.n	800ad20 <__lo0bits+0x5c>
 800ad14:	600b      	str	r3, [r1, #0]
 800ad16:	4770      	bx	lr
 800ad18:	4610      	mov	r0, r2
 800ad1a:	e7e8      	b.n	800acee <__lo0bits+0x2a>
 800ad1c:	2000      	movs	r0, #0
 800ad1e:	4770      	bx	lr
 800ad20:	2020      	movs	r0, #32
 800ad22:	4770      	bx	lr

0800ad24 <__i2b>:
 800ad24:	b510      	push	{r4, lr}
 800ad26:	460c      	mov	r4, r1
 800ad28:	2101      	movs	r1, #1
 800ad2a:	f7ff feb5 	bl	800aa98 <_Balloc>
 800ad2e:	4602      	mov	r2, r0
 800ad30:	b928      	cbnz	r0, 800ad3e <__i2b+0x1a>
 800ad32:	4b05      	ldr	r3, [pc, #20]	; (800ad48 <__i2b+0x24>)
 800ad34:	4805      	ldr	r0, [pc, #20]	; (800ad4c <__i2b+0x28>)
 800ad36:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ad3a:	f000 ff65 	bl	800bc08 <__assert_func>
 800ad3e:	2301      	movs	r3, #1
 800ad40:	6144      	str	r4, [r0, #20]
 800ad42:	6103      	str	r3, [r0, #16]
 800ad44:	bd10      	pop	{r4, pc}
 800ad46:	bf00      	nop
 800ad48:	0800c16c 	.word	0x0800c16c
 800ad4c:	0800c260 	.word	0x0800c260

0800ad50 <__multiply>:
 800ad50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad54:	4614      	mov	r4, r2
 800ad56:	690a      	ldr	r2, [r1, #16]
 800ad58:	6923      	ldr	r3, [r4, #16]
 800ad5a:	429a      	cmp	r2, r3
 800ad5c:	bfb8      	it	lt
 800ad5e:	460b      	movlt	r3, r1
 800ad60:	460d      	mov	r5, r1
 800ad62:	bfbc      	itt	lt
 800ad64:	4625      	movlt	r5, r4
 800ad66:	461c      	movlt	r4, r3
 800ad68:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800ad6c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ad70:	68ab      	ldr	r3, [r5, #8]
 800ad72:	6869      	ldr	r1, [r5, #4]
 800ad74:	eb0a 0709 	add.w	r7, sl, r9
 800ad78:	42bb      	cmp	r3, r7
 800ad7a:	b085      	sub	sp, #20
 800ad7c:	bfb8      	it	lt
 800ad7e:	3101      	addlt	r1, #1
 800ad80:	f7ff fe8a 	bl	800aa98 <_Balloc>
 800ad84:	b930      	cbnz	r0, 800ad94 <__multiply+0x44>
 800ad86:	4602      	mov	r2, r0
 800ad88:	4b42      	ldr	r3, [pc, #264]	; (800ae94 <__multiply+0x144>)
 800ad8a:	4843      	ldr	r0, [pc, #268]	; (800ae98 <__multiply+0x148>)
 800ad8c:	f240 115d 	movw	r1, #349	; 0x15d
 800ad90:	f000 ff3a 	bl	800bc08 <__assert_func>
 800ad94:	f100 0614 	add.w	r6, r0, #20
 800ad98:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800ad9c:	4633      	mov	r3, r6
 800ad9e:	2200      	movs	r2, #0
 800ada0:	4543      	cmp	r3, r8
 800ada2:	d31e      	bcc.n	800ade2 <__multiply+0x92>
 800ada4:	f105 0c14 	add.w	ip, r5, #20
 800ada8:	f104 0314 	add.w	r3, r4, #20
 800adac:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800adb0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800adb4:	9202      	str	r2, [sp, #8]
 800adb6:	ebac 0205 	sub.w	r2, ip, r5
 800adba:	3a15      	subs	r2, #21
 800adbc:	f022 0203 	bic.w	r2, r2, #3
 800adc0:	3204      	adds	r2, #4
 800adc2:	f105 0115 	add.w	r1, r5, #21
 800adc6:	458c      	cmp	ip, r1
 800adc8:	bf38      	it	cc
 800adca:	2204      	movcc	r2, #4
 800adcc:	9201      	str	r2, [sp, #4]
 800adce:	9a02      	ldr	r2, [sp, #8]
 800add0:	9303      	str	r3, [sp, #12]
 800add2:	429a      	cmp	r2, r3
 800add4:	d808      	bhi.n	800ade8 <__multiply+0x98>
 800add6:	2f00      	cmp	r7, #0
 800add8:	dc55      	bgt.n	800ae86 <__multiply+0x136>
 800adda:	6107      	str	r7, [r0, #16]
 800addc:	b005      	add	sp, #20
 800adde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ade2:	f843 2b04 	str.w	r2, [r3], #4
 800ade6:	e7db      	b.n	800ada0 <__multiply+0x50>
 800ade8:	f8b3 a000 	ldrh.w	sl, [r3]
 800adec:	f1ba 0f00 	cmp.w	sl, #0
 800adf0:	d020      	beq.n	800ae34 <__multiply+0xe4>
 800adf2:	f105 0e14 	add.w	lr, r5, #20
 800adf6:	46b1      	mov	r9, r6
 800adf8:	2200      	movs	r2, #0
 800adfa:	f85e 4b04 	ldr.w	r4, [lr], #4
 800adfe:	f8d9 b000 	ldr.w	fp, [r9]
 800ae02:	b2a1      	uxth	r1, r4
 800ae04:	fa1f fb8b 	uxth.w	fp, fp
 800ae08:	fb0a b101 	mla	r1, sl, r1, fp
 800ae0c:	4411      	add	r1, r2
 800ae0e:	f8d9 2000 	ldr.w	r2, [r9]
 800ae12:	0c24      	lsrs	r4, r4, #16
 800ae14:	0c12      	lsrs	r2, r2, #16
 800ae16:	fb0a 2404 	mla	r4, sl, r4, r2
 800ae1a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800ae1e:	b289      	uxth	r1, r1
 800ae20:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ae24:	45f4      	cmp	ip, lr
 800ae26:	f849 1b04 	str.w	r1, [r9], #4
 800ae2a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800ae2e:	d8e4      	bhi.n	800adfa <__multiply+0xaa>
 800ae30:	9901      	ldr	r1, [sp, #4]
 800ae32:	5072      	str	r2, [r6, r1]
 800ae34:	9a03      	ldr	r2, [sp, #12]
 800ae36:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ae3a:	3304      	adds	r3, #4
 800ae3c:	f1b9 0f00 	cmp.w	r9, #0
 800ae40:	d01f      	beq.n	800ae82 <__multiply+0x132>
 800ae42:	6834      	ldr	r4, [r6, #0]
 800ae44:	f105 0114 	add.w	r1, r5, #20
 800ae48:	46b6      	mov	lr, r6
 800ae4a:	f04f 0a00 	mov.w	sl, #0
 800ae4e:	880a      	ldrh	r2, [r1, #0]
 800ae50:	f8be b002 	ldrh.w	fp, [lr, #2]
 800ae54:	fb09 b202 	mla	r2, r9, r2, fp
 800ae58:	4492      	add	sl, r2
 800ae5a:	b2a4      	uxth	r4, r4
 800ae5c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800ae60:	f84e 4b04 	str.w	r4, [lr], #4
 800ae64:	f851 4b04 	ldr.w	r4, [r1], #4
 800ae68:	f8be 2000 	ldrh.w	r2, [lr]
 800ae6c:	0c24      	lsrs	r4, r4, #16
 800ae6e:	fb09 2404 	mla	r4, r9, r4, r2
 800ae72:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800ae76:	458c      	cmp	ip, r1
 800ae78:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ae7c:	d8e7      	bhi.n	800ae4e <__multiply+0xfe>
 800ae7e:	9a01      	ldr	r2, [sp, #4]
 800ae80:	50b4      	str	r4, [r6, r2]
 800ae82:	3604      	adds	r6, #4
 800ae84:	e7a3      	b.n	800adce <__multiply+0x7e>
 800ae86:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d1a5      	bne.n	800adda <__multiply+0x8a>
 800ae8e:	3f01      	subs	r7, #1
 800ae90:	e7a1      	b.n	800add6 <__multiply+0x86>
 800ae92:	bf00      	nop
 800ae94:	0800c16c 	.word	0x0800c16c
 800ae98:	0800c260 	.word	0x0800c260

0800ae9c <__pow5mult>:
 800ae9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aea0:	4615      	mov	r5, r2
 800aea2:	f012 0203 	ands.w	r2, r2, #3
 800aea6:	4606      	mov	r6, r0
 800aea8:	460f      	mov	r7, r1
 800aeaa:	d007      	beq.n	800aebc <__pow5mult+0x20>
 800aeac:	4c25      	ldr	r4, [pc, #148]	; (800af44 <__pow5mult+0xa8>)
 800aeae:	3a01      	subs	r2, #1
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aeb6:	f7ff fe51 	bl	800ab5c <__multadd>
 800aeba:	4607      	mov	r7, r0
 800aebc:	10ad      	asrs	r5, r5, #2
 800aebe:	d03d      	beq.n	800af3c <__pow5mult+0xa0>
 800aec0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800aec2:	b97c      	cbnz	r4, 800aee4 <__pow5mult+0x48>
 800aec4:	2010      	movs	r0, #16
 800aec6:	f7ff fdcd 	bl	800aa64 <malloc>
 800aeca:	4602      	mov	r2, r0
 800aecc:	6270      	str	r0, [r6, #36]	; 0x24
 800aece:	b928      	cbnz	r0, 800aedc <__pow5mult+0x40>
 800aed0:	4b1d      	ldr	r3, [pc, #116]	; (800af48 <__pow5mult+0xac>)
 800aed2:	481e      	ldr	r0, [pc, #120]	; (800af4c <__pow5mult+0xb0>)
 800aed4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800aed8:	f000 fe96 	bl	800bc08 <__assert_func>
 800aedc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aee0:	6004      	str	r4, [r0, #0]
 800aee2:	60c4      	str	r4, [r0, #12]
 800aee4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800aee8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aeec:	b94c      	cbnz	r4, 800af02 <__pow5mult+0x66>
 800aeee:	f240 2171 	movw	r1, #625	; 0x271
 800aef2:	4630      	mov	r0, r6
 800aef4:	f7ff ff16 	bl	800ad24 <__i2b>
 800aef8:	2300      	movs	r3, #0
 800aefa:	f8c8 0008 	str.w	r0, [r8, #8]
 800aefe:	4604      	mov	r4, r0
 800af00:	6003      	str	r3, [r0, #0]
 800af02:	f04f 0900 	mov.w	r9, #0
 800af06:	07eb      	lsls	r3, r5, #31
 800af08:	d50a      	bpl.n	800af20 <__pow5mult+0x84>
 800af0a:	4639      	mov	r1, r7
 800af0c:	4622      	mov	r2, r4
 800af0e:	4630      	mov	r0, r6
 800af10:	f7ff ff1e 	bl	800ad50 <__multiply>
 800af14:	4639      	mov	r1, r7
 800af16:	4680      	mov	r8, r0
 800af18:	4630      	mov	r0, r6
 800af1a:	f7ff fdfd 	bl	800ab18 <_Bfree>
 800af1e:	4647      	mov	r7, r8
 800af20:	106d      	asrs	r5, r5, #1
 800af22:	d00b      	beq.n	800af3c <__pow5mult+0xa0>
 800af24:	6820      	ldr	r0, [r4, #0]
 800af26:	b938      	cbnz	r0, 800af38 <__pow5mult+0x9c>
 800af28:	4622      	mov	r2, r4
 800af2a:	4621      	mov	r1, r4
 800af2c:	4630      	mov	r0, r6
 800af2e:	f7ff ff0f 	bl	800ad50 <__multiply>
 800af32:	6020      	str	r0, [r4, #0]
 800af34:	f8c0 9000 	str.w	r9, [r0]
 800af38:	4604      	mov	r4, r0
 800af3a:	e7e4      	b.n	800af06 <__pow5mult+0x6a>
 800af3c:	4638      	mov	r0, r7
 800af3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af42:	bf00      	nop
 800af44:	0800c3b0 	.word	0x0800c3b0
 800af48:	0800c0f6 	.word	0x0800c0f6
 800af4c:	0800c260 	.word	0x0800c260

0800af50 <__lshift>:
 800af50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af54:	460c      	mov	r4, r1
 800af56:	6849      	ldr	r1, [r1, #4]
 800af58:	6923      	ldr	r3, [r4, #16]
 800af5a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800af5e:	68a3      	ldr	r3, [r4, #8]
 800af60:	4607      	mov	r7, r0
 800af62:	4691      	mov	r9, r2
 800af64:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800af68:	f108 0601 	add.w	r6, r8, #1
 800af6c:	42b3      	cmp	r3, r6
 800af6e:	db0b      	blt.n	800af88 <__lshift+0x38>
 800af70:	4638      	mov	r0, r7
 800af72:	f7ff fd91 	bl	800aa98 <_Balloc>
 800af76:	4605      	mov	r5, r0
 800af78:	b948      	cbnz	r0, 800af8e <__lshift+0x3e>
 800af7a:	4602      	mov	r2, r0
 800af7c:	4b28      	ldr	r3, [pc, #160]	; (800b020 <__lshift+0xd0>)
 800af7e:	4829      	ldr	r0, [pc, #164]	; (800b024 <__lshift+0xd4>)
 800af80:	f240 11d9 	movw	r1, #473	; 0x1d9
 800af84:	f000 fe40 	bl	800bc08 <__assert_func>
 800af88:	3101      	adds	r1, #1
 800af8a:	005b      	lsls	r3, r3, #1
 800af8c:	e7ee      	b.n	800af6c <__lshift+0x1c>
 800af8e:	2300      	movs	r3, #0
 800af90:	f100 0114 	add.w	r1, r0, #20
 800af94:	f100 0210 	add.w	r2, r0, #16
 800af98:	4618      	mov	r0, r3
 800af9a:	4553      	cmp	r3, sl
 800af9c:	db33      	blt.n	800b006 <__lshift+0xb6>
 800af9e:	6920      	ldr	r0, [r4, #16]
 800afa0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800afa4:	f104 0314 	add.w	r3, r4, #20
 800afa8:	f019 091f 	ands.w	r9, r9, #31
 800afac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800afb0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800afb4:	d02b      	beq.n	800b00e <__lshift+0xbe>
 800afb6:	f1c9 0e20 	rsb	lr, r9, #32
 800afba:	468a      	mov	sl, r1
 800afbc:	2200      	movs	r2, #0
 800afbe:	6818      	ldr	r0, [r3, #0]
 800afc0:	fa00 f009 	lsl.w	r0, r0, r9
 800afc4:	4302      	orrs	r2, r0
 800afc6:	f84a 2b04 	str.w	r2, [sl], #4
 800afca:	f853 2b04 	ldr.w	r2, [r3], #4
 800afce:	459c      	cmp	ip, r3
 800afd0:	fa22 f20e 	lsr.w	r2, r2, lr
 800afd4:	d8f3      	bhi.n	800afbe <__lshift+0x6e>
 800afd6:	ebac 0304 	sub.w	r3, ip, r4
 800afda:	3b15      	subs	r3, #21
 800afdc:	f023 0303 	bic.w	r3, r3, #3
 800afe0:	3304      	adds	r3, #4
 800afe2:	f104 0015 	add.w	r0, r4, #21
 800afe6:	4584      	cmp	ip, r0
 800afe8:	bf38      	it	cc
 800afea:	2304      	movcc	r3, #4
 800afec:	50ca      	str	r2, [r1, r3]
 800afee:	b10a      	cbz	r2, 800aff4 <__lshift+0xa4>
 800aff0:	f108 0602 	add.w	r6, r8, #2
 800aff4:	3e01      	subs	r6, #1
 800aff6:	4638      	mov	r0, r7
 800aff8:	612e      	str	r6, [r5, #16]
 800affa:	4621      	mov	r1, r4
 800affc:	f7ff fd8c 	bl	800ab18 <_Bfree>
 800b000:	4628      	mov	r0, r5
 800b002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b006:	f842 0f04 	str.w	r0, [r2, #4]!
 800b00a:	3301      	adds	r3, #1
 800b00c:	e7c5      	b.n	800af9a <__lshift+0x4a>
 800b00e:	3904      	subs	r1, #4
 800b010:	f853 2b04 	ldr.w	r2, [r3], #4
 800b014:	f841 2f04 	str.w	r2, [r1, #4]!
 800b018:	459c      	cmp	ip, r3
 800b01a:	d8f9      	bhi.n	800b010 <__lshift+0xc0>
 800b01c:	e7ea      	b.n	800aff4 <__lshift+0xa4>
 800b01e:	bf00      	nop
 800b020:	0800c16c 	.word	0x0800c16c
 800b024:	0800c260 	.word	0x0800c260

0800b028 <__mcmp>:
 800b028:	b530      	push	{r4, r5, lr}
 800b02a:	6902      	ldr	r2, [r0, #16]
 800b02c:	690c      	ldr	r4, [r1, #16]
 800b02e:	1b12      	subs	r2, r2, r4
 800b030:	d10e      	bne.n	800b050 <__mcmp+0x28>
 800b032:	f100 0314 	add.w	r3, r0, #20
 800b036:	3114      	adds	r1, #20
 800b038:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b03c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b040:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b044:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b048:	42a5      	cmp	r5, r4
 800b04a:	d003      	beq.n	800b054 <__mcmp+0x2c>
 800b04c:	d305      	bcc.n	800b05a <__mcmp+0x32>
 800b04e:	2201      	movs	r2, #1
 800b050:	4610      	mov	r0, r2
 800b052:	bd30      	pop	{r4, r5, pc}
 800b054:	4283      	cmp	r3, r0
 800b056:	d3f3      	bcc.n	800b040 <__mcmp+0x18>
 800b058:	e7fa      	b.n	800b050 <__mcmp+0x28>
 800b05a:	f04f 32ff 	mov.w	r2, #4294967295
 800b05e:	e7f7      	b.n	800b050 <__mcmp+0x28>

0800b060 <__mdiff>:
 800b060:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b064:	460c      	mov	r4, r1
 800b066:	4606      	mov	r6, r0
 800b068:	4611      	mov	r1, r2
 800b06a:	4620      	mov	r0, r4
 800b06c:	4617      	mov	r7, r2
 800b06e:	f7ff ffdb 	bl	800b028 <__mcmp>
 800b072:	1e05      	subs	r5, r0, #0
 800b074:	d110      	bne.n	800b098 <__mdiff+0x38>
 800b076:	4629      	mov	r1, r5
 800b078:	4630      	mov	r0, r6
 800b07a:	f7ff fd0d 	bl	800aa98 <_Balloc>
 800b07e:	b930      	cbnz	r0, 800b08e <__mdiff+0x2e>
 800b080:	4b39      	ldr	r3, [pc, #228]	; (800b168 <__mdiff+0x108>)
 800b082:	4602      	mov	r2, r0
 800b084:	f240 2132 	movw	r1, #562	; 0x232
 800b088:	4838      	ldr	r0, [pc, #224]	; (800b16c <__mdiff+0x10c>)
 800b08a:	f000 fdbd 	bl	800bc08 <__assert_func>
 800b08e:	2301      	movs	r3, #1
 800b090:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b094:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b098:	bfa4      	itt	ge
 800b09a:	463b      	movge	r3, r7
 800b09c:	4627      	movge	r7, r4
 800b09e:	4630      	mov	r0, r6
 800b0a0:	6879      	ldr	r1, [r7, #4]
 800b0a2:	bfa6      	itte	ge
 800b0a4:	461c      	movge	r4, r3
 800b0a6:	2500      	movge	r5, #0
 800b0a8:	2501      	movlt	r5, #1
 800b0aa:	f7ff fcf5 	bl	800aa98 <_Balloc>
 800b0ae:	b920      	cbnz	r0, 800b0ba <__mdiff+0x5a>
 800b0b0:	4b2d      	ldr	r3, [pc, #180]	; (800b168 <__mdiff+0x108>)
 800b0b2:	4602      	mov	r2, r0
 800b0b4:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b0b8:	e7e6      	b.n	800b088 <__mdiff+0x28>
 800b0ba:	693e      	ldr	r6, [r7, #16]
 800b0bc:	60c5      	str	r5, [r0, #12]
 800b0be:	6925      	ldr	r5, [r4, #16]
 800b0c0:	f107 0114 	add.w	r1, r7, #20
 800b0c4:	f104 0914 	add.w	r9, r4, #20
 800b0c8:	f100 0e14 	add.w	lr, r0, #20
 800b0cc:	f107 0210 	add.w	r2, r7, #16
 800b0d0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b0d4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b0d8:	46f2      	mov	sl, lr
 800b0da:	2700      	movs	r7, #0
 800b0dc:	f859 3b04 	ldr.w	r3, [r9], #4
 800b0e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b0e4:	fa1f f883 	uxth.w	r8, r3
 800b0e8:	fa17 f78b 	uxtah	r7, r7, fp
 800b0ec:	0c1b      	lsrs	r3, r3, #16
 800b0ee:	eba7 0808 	sub.w	r8, r7, r8
 800b0f2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b0f6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b0fa:	fa1f f888 	uxth.w	r8, r8
 800b0fe:	141f      	asrs	r7, r3, #16
 800b100:	454d      	cmp	r5, r9
 800b102:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b106:	f84a 3b04 	str.w	r3, [sl], #4
 800b10a:	d8e7      	bhi.n	800b0dc <__mdiff+0x7c>
 800b10c:	1b2b      	subs	r3, r5, r4
 800b10e:	3b15      	subs	r3, #21
 800b110:	f023 0303 	bic.w	r3, r3, #3
 800b114:	3304      	adds	r3, #4
 800b116:	3415      	adds	r4, #21
 800b118:	42a5      	cmp	r5, r4
 800b11a:	bf38      	it	cc
 800b11c:	2304      	movcc	r3, #4
 800b11e:	4419      	add	r1, r3
 800b120:	4473      	add	r3, lr
 800b122:	469e      	mov	lr, r3
 800b124:	460d      	mov	r5, r1
 800b126:	4565      	cmp	r5, ip
 800b128:	d30e      	bcc.n	800b148 <__mdiff+0xe8>
 800b12a:	f10c 0203 	add.w	r2, ip, #3
 800b12e:	1a52      	subs	r2, r2, r1
 800b130:	f022 0203 	bic.w	r2, r2, #3
 800b134:	3903      	subs	r1, #3
 800b136:	458c      	cmp	ip, r1
 800b138:	bf38      	it	cc
 800b13a:	2200      	movcc	r2, #0
 800b13c:	441a      	add	r2, r3
 800b13e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b142:	b17b      	cbz	r3, 800b164 <__mdiff+0x104>
 800b144:	6106      	str	r6, [r0, #16]
 800b146:	e7a5      	b.n	800b094 <__mdiff+0x34>
 800b148:	f855 8b04 	ldr.w	r8, [r5], #4
 800b14c:	fa17 f488 	uxtah	r4, r7, r8
 800b150:	1422      	asrs	r2, r4, #16
 800b152:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b156:	b2a4      	uxth	r4, r4
 800b158:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b15c:	f84e 4b04 	str.w	r4, [lr], #4
 800b160:	1417      	asrs	r7, r2, #16
 800b162:	e7e0      	b.n	800b126 <__mdiff+0xc6>
 800b164:	3e01      	subs	r6, #1
 800b166:	e7ea      	b.n	800b13e <__mdiff+0xde>
 800b168:	0800c16c 	.word	0x0800c16c
 800b16c:	0800c260 	.word	0x0800c260

0800b170 <__ulp>:
 800b170:	b082      	sub	sp, #8
 800b172:	ed8d 0b00 	vstr	d0, [sp]
 800b176:	9b01      	ldr	r3, [sp, #4]
 800b178:	4912      	ldr	r1, [pc, #72]	; (800b1c4 <__ulp+0x54>)
 800b17a:	4019      	ands	r1, r3
 800b17c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b180:	2900      	cmp	r1, #0
 800b182:	dd05      	ble.n	800b190 <__ulp+0x20>
 800b184:	2200      	movs	r2, #0
 800b186:	460b      	mov	r3, r1
 800b188:	ec43 2b10 	vmov	d0, r2, r3
 800b18c:	b002      	add	sp, #8
 800b18e:	4770      	bx	lr
 800b190:	4249      	negs	r1, r1
 800b192:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b196:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b19a:	f04f 0200 	mov.w	r2, #0
 800b19e:	f04f 0300 	mov.w	r3, #0
 800b1a2:	da04      	bge.n	800b1ae <__ulp+0x3e>
 800b1a4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b1a8:	fa41 f300 	asr.w	r3, r1, r0
 800b1ac:	e7ec      	b.n	800b188 <__ulp+0x18>
 800b1ae:	f1a0 0114 	sub.w	r1, r0, #20
 800b1b2:	291e      	cmp	r1, #30
 800b1b4:	bfda      	itte	le
 800b1b6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b1ba:	fa20 f101 	lsrle.w	r1, r0, r1
 800b1be:	2101      	movgt	r1, #1
 800b1c0:	460a      	mov	r2, r1
 800b1c2:	e7e1      	b.n	800b188 <__ulp+0x18>
 800b1c4:	7ff00000 	.word	0x7ff00000

0800b1c8 <__b2d>:
 800b1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1ca:	6905      	ldr	r5, [r0, #16]
 800b1cc:	f100 0714 	add.w	r7, r0, #20
 800b1d0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b1d4:	1f2e      	subs	r6, r5, #4
 800b1d6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b1da:	4620      	mov	r0, r4
 800b1dc:	f7ff fd52 	bl	800ac84 <__hi0bits>
 800b1e0:	f1c0 0320 	rsb	r3, r0, #32
 800b1e4:	280a      	cmp	r0, #10
 800b1e6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b264 <__b2d+0x9c>
 800b1ea:	600b      	str	r3, [r1, #0]
 800b1ec:	dc14      	bgt.n	800b218 <__b2d+0x50>
 800b1ee:	f1c0 0e0b 	rsb	lr, r0, #11
 800b1f2:	fa24 f10e 	lsr.w	r1, r4, lr
 800b1f6:	42b7      	cmp	r7, r6
 800b1f8:	ea41 030c 	orr.w	r3, r1, ip
 800b1fc:	bf34      	ite	cc
 800b1fe:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b202:	2100      	movcs	r1, #0
 800b204:	3015      	adds	r0, #21
 800b206:	fa04 f000 	lsl.w	r0, r4, r0
 800b20a:	fa21 f10e 	lsr.w	r1, r1, lr
 800b20e:	ea40 0201 	orr.w	r2, r0, r1
 800b212:	ec43 2b10 	vmov	d0, r2, r3
 800b216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b218:	42b7      	cmp	r7, r6
 800b21a:	bf3a      	itte	cc
 800b21c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b220:	f1a5 0608 	subcc.w	r6, r5, #8
 800b224:	2100      	movcs	r1, #0
 800b226:	380b      	subs	r0, #11
 800b228:	d017      	beq.n	800b25a <__b2d+0x92>
 800b22a:	f1c0 0c20 	rsb	ip, r0, #32
 800b22e:	fa04 f500 	lsl.w	r5, r4, r0
 800b232:	42be      	cmp	r6, r7
 800b234:	fa21 f40c 	lsr.w	r4, r1, ip
 800b238:	ea45 0504 	orr.w	r5, r5, r4
 800b23c:	bf8c      	ite	hi
 800b23e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b242:	2400      	movls	r4, #0
 800b244:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b248:	fa01 f000 	lsl.w	r0, r1, r0
 800b24c:	fa24 f40c 	lsr.w	r4, r4, ip
 800b250:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b254:	ea40 0204 	orr.w	r2, r0, r4
 800b258:	e7db      	b.n	800b212 <__b2d+0x4a>
 800b25a:	ea44 030c 	orr.w	r3, r4, ip
 800b25e:	460a      	mov	r2, r1
 800b260:	e7d7      	b.n	800b212 <__b2d+0x4a>
 800b262:	bf00      	nop
 800b264:	3ff00000 	.word	0x3ff00000

0800b268 <__d2b>:
 800b268:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b26c:	4689      	mov	r9, r1
 800b26e:	2101      	movs	r1, #1
 800b270:	ec57 6b10 	vmov	r6, r7, d0
 800b274:	4690      	mov	r8, r2
 800b276:	f7ff fc0f 	bl	800aa98 <_Balloc>
 800b27a:	4604      	mov	r4, r0
 800b27c:	b930      	cbnz	r0, 800b28c <__d2b+0x24>
 800b27e:	4602      	mov	r2, r0
 800b280:	4b25      	ldr	r3, [pc, #148]	; (800b318 <__d2b+0xb0>)
 800b282:	4826      	ldr	r0, [pc, #152]	; (800b31c <__d2b+0xb4>)
 800b284:	f240 310a 	movw	r1, #778	; 0x30a
 800b288:	f000 fcbe 	bl	800bc08 <__assert_func>
 800b28c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b290:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b294:	bb35      	cbnz	r5, 800b2e4 <__d2b+0x7c>
 800b296:	2e00      	cmp	r6, #0
 800b298:	9301      	str	r3, [sp, #4]
 800b29a:	d028      	beq.n	800b2ee <__d2b+0x86>
 800b29c:	4668      	mov	r0, sp
 800b29e:	9600      	str	r6, [sp, #0]
 800b2a0:	f7ff fd10 	bl	800acc4 <__lo0bits>
 800b2a4:	9900      	ldr	r1, [sp, #0]
 800b2a6:	b300      	cbz	r0, 800b2ea <__d2b+0x82>
 800b2a8:	9a01      	ldr	r2, [sp, #4]
 800b2aa:	f1c0 0320 	rsb	r3, r0, #32
 800b2ae:	fa02 f303 	lsl.w	r3, r2, r3
 800b2b2:	430b      	orrs	r3, r1
 800b2b4:	40c2      	lsrs	r2, r0
 800b2b6:	6163      	str	r3, [r4, #20]
 800b2b8:	9201      	str	r2, [sp, #4]
 800b2ba:	9b01      	ldr	r3, [sp, #4]
 800b2bc:	61a3      	str	r3, [r4, #24]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	bf14      	ite	ne
 800b2c2:	2202      	movne	r2, #2
 800b2c4:	2201      	moveq	r2, #1
 800b2c6:	6122      	str	r2, [r4, #16]
 800b2c8:	b1d5      	cbz	r5, 800b300 <__d2b+0x98>
 800b2ca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b2ce:	4405      	add	r5, r0
 800b2d0:	f8c9 5000 	str.w	r5, [r9]
 800b2d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b2d8:	f8c8 0000 	str.w	r0, [r8]
 800b2dc:	4620      	mov	r0, r4
 800b2de:	b003      	add	sp, #12
 800b2e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b2e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b2e8:	e7d5      	b.n	800b296 <__d2b+0x2e>
 800b2ea:	6161      	str	r1, [r4, #20]
 800b2ec:	e7e5      	b.n	800b2ba <__d2b+0x52>
 800b2ee:	a801      	add	r0, sp, #4
 800b2f0:	f7ff fce8 	bl	800acc4 <__lo0bits>
 800b2f4:	9b01      	ldr	r3, [sp, #4]
 800b2f6:	6163      	str	r3, [r4, #20]
 800b2f8:	2201      	movs	r2, #1
 800b2fa:	6122      	str	r2, [r4, #16]
 800b2fc:	3020      	adds	r0, #32
 800b2fe:	e7e3      	b.n	800b2c8 <__d2b+0x60>
 800b300:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b304:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b308:	f8c9 0000 	str.w	r0, [r9]
 800b30c:	6918      	ldr	r0, [r3, #16]
 800b30e:	f7ff fcb9 	bl	800ac84 <__hi0bits>
 800b312:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b316:	e7df      	b.n	800b2d8 <__d2b+0x70>
 800b318:	0800c16c 	.word	0x0800c16c
 800b31c:	0800c260 	.word	0x0800c260

0800b320 <__ratio>:
 800b320:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b324:	4688      	mov	r8, r1
 800b326:	4669      	mov	r1, sp
 800b328:	4681      	mov	r9, r0
 800b32a:	f7ff ff4d 	bl	800b1c8 <__b2d>
 800b32e:	a901      	add	r1, sp, #4
 800b330:	4640      	mov	r0, r8
 800b332:	ec55 4b10 	vmov	r4, r5, d0
 800b336:	f7ff ff47 	bl	800b1c8 <__b2d>
 800b33a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b33e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b342:	eba3 0c02 	sub.w	ip, r3, r2
 800b346:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b34a:	1a9b      	subs	r3, r3, r2
 800b34c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b350:	ec51 0b10 	vmov	r0, r1, d0
 800b354:	2b00      	cmp	r3, #0
 800b356:	bfd6      	itet	le
 800b358:	460a      	movle	r2, r1
 800b35a:	462a      	movgt	r2, r5
 800b35c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b360:	468b      	mov	fp, r1
 800b362:	462f      	mov	r7, r5
 800b364:	bfd4      	ite	le
 800b366:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b36a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b36e:	4620      	mov	r0, r4
 800b370:	ee10 2a10 	vmov	r2, s0
 800b374:	465b      	mov	r3, fp
 800b376:	4639      	mov	r1, r7
 800b378:	f7f5 fa68 	bl	800084c <__aeabi_ddiv>
 800b37c:	ec41 0b10 	vmov	d0, r0, r1
 800b380:	b003      	add	sp, #12
 800b382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b386 <__copybits>:
 800b386:	3901      	subs	r1, #1
 800b388:	b570      	push	{r4, r5, r6, lr}
 800b38a:	1149      	asrs	r1, r1, #5
 800b38c:	6914      	ldr	r4, [r2, #16]
 800b38e:	3101      	adds	r1, #1
 800b390:	f102 0314 	add.w	r3, r2, #20
 800b394:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b398:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b39c:	1f05      	subs	r5, r0, #4
 800b39e:	42a3      	cmp	r3, r4
 800b3a0:	d30c      	bcc.n	800b3bc <__copybits+0x36>
 800b3a2:	1aa3      	subs	r3, r4, r2
 800b3a4:	3b11      	subs	r3, #17
 800b3a6:	f023 0303 	bic.w	r3, r3, #3
 800b3aa:	3211      	adds	r2, #17
 800b3ac:	42a2      	cmp	r2, r4
 800b3ae:	bf88      	it	hi
 800b3b0:	2300      	movhi	r3, #0
 800b3b2:	4418      	add	r0, r3
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	4288      	cmp	r0, r1
 800b3b8:	d305      	bcc.n	800b3c6 <__copybits+0x40>
 800b3ba:	bd70      	pop	{r4, r5, r6, pc}
 800b3bc:	f853 6b04 	ldr.w	r6, [r3], #4
 800b3c0:	f845 6f04 	str.w	r6, [r5, #4]!
 800b3c4:	e7eb      	b.n	800b39e <__copybits+0x18>
 800b3c6:	f840 3b04 	str.w	r3, [r0], #4
 800b3ca:	e7f4      	b.n	800b3b6 <__copybits+0x30>

0800b3cc <__any_on>:
 800b3cc:	f100 0214 	add.w	r2, r0, #20
 800b3d0:	6900      	ldr	r0, [r0, #16]
 800b3d2:	114b      	asrs	r3, r1, #5
 800b3d4:	4298      	cmp	r0, r3
 800b3d6:	b510      	push	{r4, lr}
 800b3d8:	db11      	blt.n	800b3fe <__any_on+0x32>
 800b3da:	dd0a      	ble.n	800b3f2 <__any_on+0x26>
 800b3dc:	f011 011f 	ands.w	r1, r1, #31
 800b3e0:	d007      	beq.n	800b3f2 <__any_on+0x26>
 800b3e2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b3e6:	fa24 f001 	lsr.w	r0, r4, r1
 800b3ea:	fa00 f101 	lsl.w	r1, r0, r1
 800b3ee:	428c      	cmp	r4, r1
 800b3f0:	d10b      	bne.n	800b40a <__any_on+0x3e>
 800b3f2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b3f6:	4293      	cmp	r3, r2
 800b3f8:	d803      	bhi.n	800b402 <__any_on+0x36>
 800b3fa:	2000      	movs	r0, #0
 800b3fc:	bd10      	pop	{r4, pc}
 800b3fe:	4603      	mov	r3, r0
 800b400:	e7f7      	b.n	800b3f2 <__any_on+0x26>
 800b402:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b406:	2900      	cmp	r1, #0
 800b408:	d0f5      	beq.n	800b3f6 <__any_on+0x2a>
 800b40a:	2001      	movs	r0, #1
 800b40c:	e7f6      	b.n	800b3fc <__any_on+0x30>

0800b40e <_calloc_r>:
 800b40e:	b513      	push	{r0, r1, r4, lr}
 800b410:	434a      	muls	r2, r1
 800b412:	4611      	mov	r1, r2
 800b414:	9201      	str	r2, [sp, #4]
 800b416:	f000 f859 	bl	800b4cc <_malloc_r>
 800b41a:	4604      	mov	r4, r0
 800b41c:	b118      	cbz	r0, 800b426 <_calloc_r+0x18>
 800b41e:	9a01      	ldr	r2, [sp, #4]
 800b420:	2100      	movs	r1, #0
 800b422:	f7fc f881 	bl	8007528 <memset>
 800b426:	4620      	mov	r0, r4
 800b428:	b002      	add	sp, #8
 800b42a:	bd10      	pop	{r4, pc}

0800b42c <_free_r>:
 800b42c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b42e:	2900      	cmp	r1, #0
 800b430:	d048      	beq.n	800b4c4 <_free_r+0x98>
 800b432:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b436:	9001      	str	r0, [sp, #4]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	f1a1 0404 	sub.w	r4, r1, #4
 800b43e:	bfb8      	it	lt
 800b440:	18e4      	addlt	r4, r4, r3
 800b442:	f000 fc6f 	bl	800bd24 <__malloc_lock>
 800b446:	4a20      	ldr	r2, [pc, #128]	; (800b4c8 <_free_r+0x9c>)
 800b448:	9801      	ldr	r0, [sp, #4]
 800b44a:	6813      	ldr	r3, [r2, #0]
 800b44c:	4615      	mov	r5, r2
 800b44e:	b933      	cbnz	r3, 800b45e <_free_r+0x32>
 800b450:	6063      	str	r3, [r4, #4]
 800b452:	6014      	str	r4, [r2, #0]
 800b454:	b003      	add	sp, #12
 800b456:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b45a:	f000 bc69 	b.w	800bd30 <__malloc_unlock>
 800b45e:	42a3      	cmp	r3, r4
 800b460:	d90b      	bls.n	800b47a <_free_r+0x4e>
 800b462:	6821      	ldr	r1, [r4, #0]
 800b464:	1862      	adds	r2, r4, r1
 800b466:	4293      	cmp	r3, r2
 800b468:	bf04      	itt	eq
 800b46a:	681a      	ldreq	r2, [r3, #0]
 800b46c:	685b      	ldreq	r3, [r3, #4]
 800b46e:	6063      	str	r3, [r4, #4]
 800b470:	bf04      	itt	eq
 800b472:	1852      	addeq	r2, r2, r1
 800b474:	6022      	streq	r2, [r4, #0]
 800b476:	602c      	str	r4, [r5, #0]
 800b478:	e7ec      	b.n	800b454 <_free_r+0x28>
 800b47a:	461a      	mov	r2, r3
 800b47c:	685b      	ldr	r3, [r3, #4]
 800b47e:	b10b      	cbz	r3, 800b484 <_free_r+0x58>
 800b480:	42a3      	cmp	r3, r4
 800b482:	d9fa      	bls.n	800b47a <_free_r+0x4e>
 800b484:	6811      	ldr	r1, [r2, #0]
 800b486:	1855      	adds	r5, r2, r1
 800b488:	42a5      	cmp	r5, r4
 800b48a:	d10b      	bne.n	800b4a4 <_free_r+0x78>
 800b48c:	6824      	ldr	r4, [r4, #0]
 800b48e:	4421      	add	r1, r4
 800b490:	1854      	adds	r4, r2, r1
 800b492:	42a3      	cmp	r3, r4
 800b494:	6011      	str	r1, [r2, #0]
 800b496:	d1dd      	bne.n	800b454 <_free_r+0x28>
 800b498:	681c      	ldr	r4, [r3, #0]
 800b49a:	685b      	ldr	r3, [r3, #4]
 800b49c:	6053      	str	r3, [r2, #4]
 800b49e:	4421      	add	r1, r4
 800b4a0:	6011      	str	r1, [r2, #0]
 800b4a2:	e7d7      	b.n	800b454 <_free_r+0x28>
 800b4a4:	d902      	bls.n	800b4ac <_free_r+0x80>
 800b4a6:	230c      	movs	r3, #12
 800b4a8:	6003      	str	r3, [r0, #0]
 800b4aa:	e7d3      	b.n	800b454 <_free_r+0x28>
 800b4ac:	6825      	ldr	r5, [r4, #0]
 800b4ae:	1961      	adds	r1, r4, r5
 800b4b0:	428b      	cmp	r3, r1
 800b4b2:	bf04      	itt	eq
 800b4b4:	6819      	ldreq	r1, [r3, #0]
 800b4b6:	685b      	ldreq	r3, [r3, #4]
 800b4b8:	6063      	str	r3, [r4, #4]
 800b4ba:	bf04      	itt	eq
 800b4bc:	1949      	addeq	r1, r1, r5
 800b4be:	6021      	streq	r1, [r4, #0]
 800b4c0:	6054      	str	r4, [r2, #4]
 800b4c2:	e7c7      	b.n	800b454 <_free_r+0x28>
 800b4c4:	b003      	add	sp, #12
 800b4c6:	bd30      	pop	{r4, r5, pc}
 800b4c8:	20000200 	.word	0x20000200

0800b4cc <_malloc_r>:
 800b4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4ce:	1ccd      	adds	r5, r1, #3
 800b4d0:	f025 0503 	bic.w	r5, r5, #3
 800b4d4:	3508      	adds	r5, #8
 800b4d6:	2d0c      	cmp	r5, #12
 800b4d8:	bf38      	it	cc
 800b4da:	250c      	movcc	r5, #12
 800b4dc:	2d00      	cmp	r5, #0
 800b4de:	4606      	mov	r6, r0
 800b4e0:	db01      	blt.n	800b4e6 <_malloc_r+0x1a>
 800b4e2:	42a9      	cmp	r1, r5
 800b4e4:	d903      	bls.n	800b4ee <_malloc_r+0x22>
 800b4e6:	230c      	movs	r3, #12
 800b4e8:	6033      	str	r3, [r6, #0]
 800b4ea:	2000      	movs	r0, #0
 800b4ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4ee:	f000 fc19 	bl	800bd24 <__malloc_lock>
 800b4f2:	4921      	ldr	r1, [pc, #132]	; (800b578 <_malloc_r+0xac>)
 800b4f4:	680a      	ldr	r2, [r1, #0]
 800b4f6:	4614      	mov	r4, r2
 800b4f8:	b99c      	cbnz	r4, 800b522 <_malloc_r+0x56>
 800b4fa:	4f20      	ldr	r7, [pc, #128]	; (800b57c <_malloc_r+0xb0>)
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	b923      	cbnz	r3, 800b50a <_malloc_r+0x3e>
 800b500:	4621      	mov	r1, r4
 800b502:	4630      	mov	r0, r6
 800b504:	f000 fafc 	bl	800bb00 <_sbrk_r>
 800b508:	6038      	str	r0, [r7, #0]
 800b50a:	4629      	mov	r1, r5
 800b50c:	4630      	mov	r0, r6
 800b50e:	f000 faf7 	bl	800bb00 <_sbrk_r>
 800b512:	1c43      	adds	r3, r0, #1
 800b514:	d123      	bne.n	800b55e <_malloc_r+0x92>
 800b516:	230c      	movs	r3, #12
 800b518:	6033      	str	r3, [r6, #0]
 800b51a:	4630      	mov	r0, r6
 800b51c:	f000 fc08 	bl	800bd30 <__malloc_unlock>
 800b520:	e7e3      	b.n	800b4ea <_malloc_r+0x1e>
 800b522:	6823      	ldr	r3, [r4, #0]
 800b524:	1b5b      	subs	r3, r3, r5
 800b526:	d417      	bmi.n	800b558 <_malloc_r+0x8c>
 800b528:	2b0b      	cmp	r3, #11
 800b52a:	d903      	bls.n	800b534 <_malloc_r+0x68>
 800b52c:	6023      	str	r3, [r4, #0]
 800b52e:	441c      	add	r4, r3
 800b530:	6025      	str	r5, [r4, #0]
 800b532:	e004      	b.n	800b53e <_malloc_r+0x72>
 800b534:	6863      	ldr	r3, [r4, #4]
 800b536:	42a2      	cmp	r2, r4
 800b538:	bf0c      	ite	eq
 800b53a:	600b      	streq	r3, [r1, #0]
 800b53c:	6053      	strne	r3, [r2, #4]
 800b53e:	4630      	mov	r0, r6
 800b540:	f000 fbf6 	bl	800bd30 <__malloc_unlock>
 800b544:	f104 000b 	add.w	r0, r4, #11
 800b548:	1d23      	adds	r3, r4, #4
 800b54a:	f020 0007 	bic.w	r0, r0, #7
 800b54e:	1ac2      	subs	r2, r0, r3
 800b550:	d0cc      	beq.n	800b4ec <_malloc_r+0x20>
 800b552:	1a1b      	subs	r3, r3, r0
 800b554:	50a3      	str	r3, [r4, r2]
 800b556:	e7c9      	b.n	800b4ec <_malloc_r+0x20>
 800b558:	4622      	mov	r2, r4
 800b55a:	6864      	ldr	r4, [r4, #4]
 800b55c:	e7cc      	b.n	800b4f8 <_malloc_r+0x2c>
 800b55e:	1cc4      	adds	r4, r0, #3
 800b560:	f024 0403 	bic.w	r4, r4, #3
 800b564:	42a0      	cmp	r0, r4
 800b566:	d0e3      	beq.n	800b530 <_malloc_r+0x64>
 800b568:	1a21      	subs	r1, r4, r0
 800b56a:	4630      	mov	r0, r6
 800b56c:	f000 fac8 	bl	800bb00 <_sbrk_r>
 800b570:	3001      	adds	r0, #1
 800b572:	d1dd      	bne.n	800b530 <_malloc_r+0x64>
 800b574:	e7cf      	b.n	800b516 <_malloc_r+0x4a>
 800b576:	bf00      	nop
 800b578:	20000200 	.word	0x20000200
 800b57c:	20000204 	.word	0x20000204

0800b580 <__ssputs_r>:
 800b580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b584:	688e      	ldr	r6, [r1, #8]
 800b586:	429e      	cmp	r6, r3
 800b588:	4682      	mov	sl, r0
 800b58a:	460c      	mov	r4, r1
 800b58c:	4690      	mov	r8, r2
 800b58e:	461f      	mov	r7, r3
 800b590:	d838      	bhi.n	800b604 <__ssputs_r+0x84>
 800b592:	898a      	ldrh	r2, [r1, #12]
 800b594:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b598:	d032      	beq.n	800b600 <__ssputs_r+0x80>
 800b59a:	6825      	ldr	r5, [r4, #0]
 800b59c:	6909      	ldr	r1, [r1, #16]
 800b59e:	eba5 0901 	sub.w	r9, r5, r1
 800b5a2:	6965      	ldr	r5, [r4, #20]
 800b5a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b5a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b5ac:	3301      	adds	r3, #1
 800b5ae:	444b      	add	r3, r9
 800b5b0:	106d      	asrs	r5, r5, #1
 800b5b2:	429d      	cmp	r5, r3
 800b5b4:	bf38      	it	cc
 800b5b6:	461d      	movcc	r5, r3
 800b5b8:	0553      	lsls	r3, r2, #21
 800b5ba:	d531      	bpl.n	800b620 <__ssputs_r+0xa0>
 800b5bc:	4629      	mov	r1, r5
 800b5be:	f7ff ff85 	bl	800b4cc <_malloc_r>
 800b5c2:	4606      	mov	r6, r0
 800b5c4:	b950      	cbnz	r0, 800b5dc <__ssputs_r+0x5c>
 800b5c6:	230c      	movs	r3, #12
 800b5c8:	f8ca 3000 	str.w	r3, [sl]
 800b5cc:	89a3      	ldrh	r3, [r4, #12]
 800b5ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5d2:	81a3      	strh	r3, [r4, #12]
 800b5d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b5d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5dc:	6921      	ldr	r1, [r4, #16]
 800b5de:	464a      	mov	r2, r9
 800b5e0:	f7fb ff94 	bl	800750c <memcpy>
 800b5e4:	89a3      	ldrh	r3, [r4, #12]
 800b5e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b5ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5ee:	81a3      	strh	r3, [r4, #12]
 800b5f0:	6126      	str	r6, [r4, #16]
 800b5f2:	6165      	str	r5, [r4, #20]
 800b5f4:	444e      	add	r6, r9
 800b5f6:	eba5 0509 	sub.w	r5, r5, r9
 800b5fa:	6026      	str	r6, [r4, #0]
 800b5fc:	60a5      	str	r5, [r4, #8]
 800b5fe:	463e      	mov	r6, r7
 800b600:	42be      	cmp	r6, r7
 800b602:	d900      	bls.n	800b606 <__ssputs_r+0x86>
 800b604:	463e      	mov	r6, r7
 800b606:	4632      	mov	r2, r6
 800b608:	6820      	ldr	r0, [r4, #0]
 800b60a:	4641      	mov	r1, r8
 800b60c:	f000 fb70 	bl	800bcf0 <memmove>
 800b610:	68a3      	ldr	r3, [r4, #8]
 800b612:	6822      	ldr	r2, [r4, #0]
 800b614:	1b9b      	subs	r3, r3, r6
 800b616:	4432      	add	r2, r6
 800b618:	60a3      	str	r3, [r4, #8]
 800b61a:	6022      	str	r2, [r4, #0]
 800b61c:	2000      	movs	r0, #0
 800b61e:	e7db      	b.n	800b5d8 <__ssputs_r+0x58>
 800b620:	462a      	mov	r2, r5
 800b622:	f000 fb8b 	bl	800bd3c <_realloc_r>
 800b626:	4606      	mov	r6, r0
 800b628:	2800      	cmp	r0, #0
 800b62a:	d1e1      	bne.n	800b5f0 <__ssputs_r+0x70>
 800b62c:	6921      	ldr	r1, [r4, #16]
 800b62e:	4650      	mov	r0, sl
 800b630:	f7ff fefc 	bl	800b42c <_free_r>
 800b634:	e7c7      	b.n	800b5c6 <__ssputs_r+0x46>
	...

0800b638 <_svfiprintf_r>:
 800b638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b63c:	4698      	mov	r8, r3
 800b63e:	898b      	ldrh	r3, [r1, #12]
 800b640:	061b      	lsls	r3, r3, #24
 800b642:	b09d      	sub	sp, #116	; 0x74
 800b644:	4607      	mov	r7, r0
 800b646:	460d      	mov	r5, r1
 800b648:	4614      	mov	r4, r2
 800b64a:	d50e      	bpl.n	800b66a <_svfiprintf_r+0x32>
 800b64c:	690b      	ldr	r3, [r1, #16]
 800b64e:	b963      	cbnz	r3, 800b66a <_svfiprintf_r+0x32>
 800b650:	2140      	movs	r1, #64	; 0x40
 800b652:	f7ff ff3b 	bl	800b4cc <_malloc_r>
 800b656:	6028      	str	r0, [r5, #0]
 800b658:	6128      	str	r0, [r5, #16]
 800b65a:	b920      	cbnz	r0, 800b666 <_svfiprintf_r+0x2e>
 800b65c:	230c      	movs	r3, #12
 800b65e:	603b      	str	r3, [r7, #0]
 800b660:	f04f 30ff 	mov.w	r0, #4294967295
 800b664:	e0d1      	b.n	800b80a <_svfiprintf_r+0x1d2>
 800b666:	2340      	movs	r3, #64	; 0x40
 800b668:	616b      	str	r3, [r5, #20]
 800b66a:	2300      	movs	r3, #0
 800b66c:	9309      	str	r3, [sp, #36]	; 0x24
 800b66e:	2320      	movs	r3, #32
 800b670:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b674:	f8cd 800c 	str.w	r8, [sp, #12]
 800b678:	2330      	movs	r3, #48	; 0x30
 800b67a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b824 <_svfiprintf_r+0x1ec>
 800b67e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b682:	f04f 0901 	mov.w	r9, #1
 800b686:	4623      	mov	r3, r4
 800b688:	469a      	mov	sl, r3
 800b68a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b68e:	b10a      	cbz	r2, 800b694 <_svfiprintf_r+0x5c>
 800b690:	2a25      	cmp	r2, #37	; 0x25
 800b692:	d1f9      	bne.n	800b688 <_svfiprintf_r+0x50>
 800b694:	ebba 0b04 	subs.w	fp, sl, r4
 800b698:	d00b      	beq.n	800b6b2 <_svfiprintf_r+0x7a>
 800b69a:	465b      	mov	r3, fp
 800b69c:	4622      	mov	r2, r4
 800b69e:	4629      	mov	r1, r5
 800b6a0:	4638      	mov	r0, r7
 800b6a2:	f7ff ff6d 	bl	800b580 <__ssputs_r>
 800b6a6:	3001      	adds	r0, #1
 800b6a8:	f000 80aa 	beq.w	800b800 <_svfiprintf_r+0x1c8>
 800b6ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b6ae:	445a      	add	r2, fp
 800b6b0:	9209      	str	r2, [sp, #36]	; 0x24
 800b6b2:	f89a 3000 	ldrb.w	r3, [sl]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	f000 80a2 	beq.w	800b800 <_svfiprintf_r+0x1c8>
 800b6bc:	2300      	movs	r3, #0
 800b6be:	f04f 32ff 	mov.w	r2, #4294967295
 800b6c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b6c6:	f10a 0a01 	add.w	sl, sl, #1
 800b6ca:	9304      	str	r3, [sp, #16]
 800b6cc:	9307      	str	r3, [sp, #28]
 800b6ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b6d2:	931a      	str	r3, [sp, #104]	; 0x68
 800b6d4:	4654      	mov	r4, sl
 800b6d6:	2205      	movs	r2, #5
 800b6d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6dc:	4851      	ldr	r0, [pc, #324]	; (800b824 <_svfiprintf_r+0x1ec>)
 800b6de:	f7f4 fd7f 	bl	80001e0 <memchr>
 800b6e2:	9a04      	ldr	r2, [sp, #16]
 800b6e4:	b9d8      	cbnz	r0, 800b71e <_svfiprintf_r+0xe6>
 800b6e6:	06d0      	lsls	r0, r2, #27
 800b6e8:	bf44      	itt	mi
 800b6ea:	2320      	movmi	r3, #32
 800b6ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6f0:	0711      	lsls	r1, r2, #28
 800b6f2:	bf44      	itt	mi
 800b6f4:	232b      	movmi	r3, #43	; 0x2b
 800b6f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6fa:	f89a 3000 	ldrb.w	r3, [sl]
 800b6fe:	2b2a      	cmp	r3, #42	; 0x2a
 800b700:	d015      	beq.n	800b72e <_svfiprintf_r+0xf6>
 800b702:	9a07      	ldr	r2, [sp, #28]
 800b704:	4654      	mov	r4, sl
 800b706:	2000      	movs	r0, #0
 800b708:	f04f 0c0a 	mov.w	ip, #10
 800b70c:	4621      	mov	r1, r4
 800b70e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b712:	3b30      	subs	r3, #48	; 0x30
 800b714:	2b09      	cmp	r3, #9
 800b716:	d94e      	bls.n	800b7b6 <_svfiprintf_r+0x17e>
 800b718:	b1b0      	cbz	r0, 800b748 <_svfiprintf_r+0x110>
 800b71a:	9207      	str	r2, [sp, #28]
 800b71c:	e014      	b.n	800b748 <_svfiprintf_r+0x110>
 800b71e:	eba0 0308 	sub.w	r3, r0, r8
 800b722:	fa09 f303 	lsl.w	r3, r9, r3
 800b726:	4313      	orrs	r3, r2
 800b728:	9304      	str	r3, [sp, #16]
 800b72a:	46a2      	mov	sl, r4
 800b72c:	e7d2      	b.n	800b6d4 <_svfiprintf_r+0x9c>
 800b72e:	9b03      	ldr	r3, [sp, #12]
 800b730:	1d19      	adds	r1, r3, #4
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	9103      	str	r1, [sp, #12]
 800b736:	2b00      	cmp	r3, #0
 800b738:	bfbb      	ittet	lt
 800b73a:	425b      	neglt	r3, r3
 800b73c:	f042 0202 	orrlt.w	r2, r2, #2
 800b740:	9307      	strge	r3, [sp, #28]
 800b742:	9307      	strlt	r3, [sp, #28]
 800b744:	bfb8      	it	lt
 800b746:	9204      	strlt	r2, [sp, #16]
 800b748:	7823      	ldrb	r3, [r4, #0]
 800b74a:	2b2e      	cmp	r3, #46	; 0x2e
 800b74c:	d10c      	bne.n	800b768 <_svfiprintf_r+0x130>
 800b74e:	7863      	ldrb	r3, [r4, #1]
 800b750:	2b2a      	cmp	r3, #42	; 0x2a
 800b752:	d135      	bne.n	800b7c0 <_svfiprintf_r+0x188>
 800b754:	9b03      	ldr	r3, [sp, #12]
 800b756:	1d1a      	adds	r2, r3, #4
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	9203      	str	r2, [sp, #12]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	bfb8      	it	lt
 800b760:	f04f 33ff 	movlt.w	r3, #4294967295
 800b764:	3402      	adds	r4, #2
 800b766:	9305      	str	r3, [sp, #20]
 800b768:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b834 <_svfiprintf_r+0x1fc>
 800b76c:	7821      	ldrb	r1, [r4, #0]
 800b76e:	2203      	movs	r2, #3
 800b770:	4650      	mov	r0, sl
 800b772:	f7f4 fd35 	bl	80001e0 <memchr>
 800b776:	b140      	cbz	r0, 800b78a <_svfiprintf_r+0x152>
 800b778:	2340      	movs	r3, #64	; 0x40
 800b77a:	eba0 000a 	sub.w	r0, r0, sl
 800b77e:	fa03 f000 	lsl.w	r0, r3, r0
 800b782:	9b04      	ldr	r3, [sp, #16]
 800b784:	4303      	orrs	r3, r0
 800b786:	3401      	adds	r4, #1
 800b788:	9304      	str	r3, [sp, #16]
 800b78a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b78e:	4826      	ldr	r0, [pc, #152]	; (800b828 <_svfiprintf_r+0x1f0>)
 800b790:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b794:	2206      	movs	r2, #6
 800b796:	f7f4 fd23 	bl	80001e0 <memchr>
 800b79a:	2800      	cmp	r0, #0
 800b79c:	d038      	beq.n	800b810 <_svfiprintf_r+0x1d8>
 800b79e:	4b23      	ldr	r3, [pc, #140]	; (800b82c <_svfiprintf_r+0x1f4>)
 800b7a0:	bb1b      	cbnz	r3, 800b7ea <_svfiprintf_r+0x1b2>
 800b7a2:	9b03      	ldr	r3, [sp, #12]
 800b7a4:	3307      	adds	r3, #7
 800b7a6:	f023 0307 	bic.w	r3, r3, #7
 800b7aa:	3308      	adds	r3, #8
 800b7ac:	9303      	str	r3, [sp, #12]
 800b7ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7b0:	4433      	add	r3, r6
 800b7b2:	9309      	str	r3, [sp, #36]	; 0x24
 800b7b4:	e767      	b.n	800b686 <_svfiprintf_r+0x4e>
 800b7b6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b7ba:	460c      	mov	r4, r1
 800b7bc:	2001      	movs	r0, #1
 800b7be:	e7a5      	b.n	800b70c <_svfiprintf_r+0xd4>
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	3401      	adds	r4, #1
 800b7c4:	9305      	str	r3, [sp, #20]
 800b7c6:	4619      	mov	r1, r3
 800b7c8:	f04f 0c0a 	mov.w	ip, #10
 800b7cc:	4620      	mov	r0, r4
 800b7ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7d2:	3a30      	subs	r2, #48	; 0x30
 800b7d4:	2a09      	cmp	r2, #9
 800b7d6:	d903      	bls.n	800b7e0 <_svfiprintf_r+0x1a8>
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d0c5      	beq.n	800b768 <_svfiprintf_r+0x130>
 800b7dc:	9105      	str	r1, [sp, #20]
 800b7de:	e7c3      	b.n	800b768 <_svfiprintf_r+0x130>
 800b7e0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b7e4:	4604      	mov	r4, r0
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	e7f0      	b.n	800b7cc <_svfiprintf_r+0x194>
 800b7ea:	ab03      	add	r3, sp, #12
 800b7ec:	9300      	str	r3, [sp, #0]
 800b7ee:	462a      	mov	r2, r5
 800b7f0:	4b0f      	ldr	r3, [pc, #60]	; (800b830 <_svfiprintf_r+0x1f8>)
 800b7f2:	a904      	add	r1, sp, #16
 800b7f4:	4638      	mov	r0, r7
 800b7f6:	f7fb ff3f 	bl	8007678 <_printf_float>
 800b7fa:	1c42      	adds	r2, r0, #1
 800b7fc:	4606      	mov	r6, r0
 800b7fe:	d1d6      	bne.n	800b7ae <_svfiprintf_r+0x176>
 800b800:	89ab      	ldrh	r3, [r5, #12]
 800b802:	065b      	lsls	r3, r3, #25
 800b804:	f53f af2c 	bmi.w	800b660 <_svfiprintf_r+0x28>
 800b808:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b80a:	b01d      	add	sp, #116	; 0x74
 800b80c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b810:	ab03      	add	r3, sp, #12
 800b812:	9300      	str	r3, [sp, #0]
 800b814:	462a      	mov	r2, r5
 800b816:	4b06      	ldr	r3, [pc, #24]	; (800b830 <_svfiprintf_r+0x1f8>)
 800b818:	a904      	add	r1, sp, #16
 800b81a:	4638      	mov	r0, r7
 800b81c:	f7fc f9d0 	bl	8007bc0 <_printf_i>
 800b820:	e7eb      	b.n	800b7fa <_svfiprintf_r+0x1c2>
 800b822:	bf00      	nop
 800b824:	0800c3bc 	.word	0x0800c3bc
 800b828:	0800c3c6 	.word	0x0800c3c6
 800b82c:	08007679 	.word	0x08007679
 800b830:	0800b581 	.word	0x0800b581
 800b834:	0800c3c2 	.word	0x0800c3c2

0800b838 <__sfputc_r>:
 800b838:	6893      	ldr	r3, [r2, #8]
 800b83a:	3b01      	subs	r3, #1
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	b410      	push	{r4}
 800b840:	6093      	str	r3, [r2, #8]
 800b842:	da08      	bge.n	800b856 <__sfputc_r+0x1e>
 800b844:	6994      	ldr	r4, [r2, #24]
 800b846:	42a3      	cmp	r3, r4
 800b848:	db01      	blt.n	800b84e <__sfputc_r+0x16>
 800b84a:	290a      	cmp	r1, #10
 800b84c:	d103      	bne.n	800b856 <__sfputc_r+0x1e>
 800b84e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b852:	f7fd bc3b 	b.w	80090cc <__swbuf_r>
 800b856:	6813      	ldr	r3, [r2, #0]
 800b858:	1c58      	adds	r0, r3, #1
 800b85a:	6010      	str	r0, [r2, #0]
 800b85c:	7019      	strb	r1, [r3, #0]
 800b85e:	4608      	mov	r0, r1
 800b860:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b864:	4770      	bx	lr

0800b866 <__sfputs_r>:
 800b866:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b868:	4606      	mov	r6, r0
 800b86a:	460f      	mov	r7, r1
 800b86c:	4614      	mov	r4, r2
 800b86e:	18d5      	adds	r5, r2, r3
 800b870:	42ac      	cmp	r4, r5
 800b872:	d101      	bne.n	800b878 <__sfputs_r+0x12>
 800b874:	2000      	movs	r0, #0
 800b876:	e007      	b.n	800b888 <__sfputs_r+0x22>
 800b878:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b87c:	463a      	mov	r2, r7
 800b87e:	4630      	mov	r0, r6
 800b880:	f7ff ffda 	bl	800b838 <__sfputc_r>
 800b884:	1c43      	adds	r3, r0, #1
 800b886:	d1f3      	bne.n	800b870 <__sfputs_r+0xa>
 800b888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b88c <_vfiprintf_r>:
 800b88c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b890:	460d      	mov	r5, r1
 800b892:	b09d      	sub	sp, #116	; 0x74
 800b894:	4614      	mov	r4, r2
 800b896:	4698      	mov	r8, r3
 800b898:	4606      	mov	r6, r0
 800b89a:	b118      	cbz	r0, 800b8a4 <_vfiprintf_r+0x18>
 800b89c:	6983      	ldr	r3, [r0, #24]
 800b89e:	b90b      	cbnz	r3, 800b8a4 <_vfiprintf_r+0x18>
 800b8a0:	f7fe fc68 	bl	800a174 <__sinit>
 800b8a4:	4b89      	ldr	r3, [pc, #548]	; (800bacc <_vfiprintf_r+0x240>)
 800b8a6:	429d      	cmp	r5, r3
 800b8a8:	d11b      	bne.n	800b8e2 <_vfiprintf_r+0x56>
 800b8aa:	6875      	ldr	r5, [r6, #4]
 800b8ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8ae:	07d9      	lsls	r1, r3, #31
 800b8b0:	d405      	bmi.n	800b8be <_vfiprintf_r+0x32>
 800b8b2:	89ab      	ldrh	r3, [r5, #12]
 800b8b4:	059a      	lsls	r2, r3, #22
 800b8b6:	d402      	bmi.n	800b8be <_vfiprintf_r+0x32>
 800b8b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8ba:	f7ff f86c 	bl	800a996 <__retarget_lock_acquire_recursive>
 800b8be:	89ab      	ldrh	r3, [r5, #12]
 800b8c0:	071b      	lsls	r3, r3, #28
 800b8c2:	d501      	bpl.n	800b8c8 <_vfiprintf_r+0x3c>
 800b8c4:	692b      	ldr	r3, [r5, #16]
 800b8c6:	b9eb      	cbnz	r3, 800b904 <_vfiprintf_r+0x78>
 800b8c8:	4629      	mov	r1, r5
 800b8ca:	4630      	mov	r0, r6
 800b8cc:	f7fd fc50 	bl	8009170 <__swsetup_r>
 800b8d0:	b1c0      	cbz	r0, 800b904 <_vfiprintf_r+0x78>
 800b8d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8d4:	07dc      	lsls	r4, r3, #31
 800b8d6:	d50e      	bpl.n	800b8f6 <_vfiprintf_r+0x6a>
 800b8d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b8dc:	b01d      	add	sp, #116	; 0x74
 800b8de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8e2:	4b7b      	ldr	r3, [pc, #492]	; (800bad0 <_vfiprintf_r+0x244>)
 800b8e4:	429d      	cmp	r5, r3
 800b8e6:	d101      	bne.n	800b8ec <_vfiprintf_r+0x60>
 800b8e8:	68b5      	ldr	r5, [r6, #8]
 800b8ea:	e7df      	b.n	800b8ac <_vfiprintf_r+0x20>
 800b8ec:	4b79      	ldr	r3, [pc, #484]	; (800bad4 <_vfiprintf_r+0x248>)
 800b8ee:	429d      	cmp	r5, r3
 800b8f0:	bf08      	it	eq
 800b8f2:	68f5      	ldreq	r5, [r6, #12]
 800b8f4:	e7da      	b.n	800b8ac <_vfiprintf_r+0x20>
 800b8f6:	89ab      	ldrh	r3, [r5, #12]
 800b8f8:	0598      	lsls	r0, r3, #22
 800b8fa:	d4ed      	bmi.n	800b8d8 <_vfiprintf_r+0x4c>
 800b8fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8fe:	f7ff f84b 	bl	800a998 <__retarget_lock_release_recursive>
 800b902:	e7e9      	b.n	800b8d8 <_vfiprintf_r+0x4c>
 800b904:	2300      	movs	r3, #0
 800b906:	9309      	str	r3, [sp, #36]	; 0x24
 800b908:	2320      	movs	r3, #32
 800b90a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b90e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b912:	2330      	movs	r3, #48	; 0x30
 800b914:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bad8 <_vfiprintf_r+0x24c>
 800b918:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b91c:	f04f 0901 	mov.w	r9, #1
 800b920:	4623      	mov	r3, r4
 800b922:	469a      	mov	sl, r3
 800b924:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b928:	b10a      	cbz	r2, 800b92e <_vfiprintf_r+0xa2>
 800b92a:	2a25      	cmp	r2, #37	; 0x25
 800b92c:	d1f9      	bne.n	800b922 <_vfiprintf_r+0x96>
 800b92e:	ebba 0b04 	subs.w	fp, sl, r4
 800b932:	d00b      	beq.n	800b94c <_vfiprintf_r+0xc0>
 800b934:	465b      	mov	r3, fp
 800b936:	4622      	mov	r2, r4
 800b938:	4629      	mov	r1, r5
 800b93a:	4630      	mov	r0, r6
 800b93c:	f7ff ff93 	bl	800b866 <__sfputs_r>
 800b940:	3001      	adds	r0, #1
 800b942:	f000 80aa 	beq.w	800ba9a <_vfiprintf_r+0x20e>
 800b946:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b948:	445a      	add	r2, fp
 800b94a:	9209      	str	r2, [sp, #36]	; 0x24
 800b94c:	f89a 3000 	ldrb.w	r3, [sl]
 800b950:	2b00      	cmp	r3, #0
 800b952:	f000 80a2 	beq.w	800ba9a <_vfiprintf_r+0x20e>
 800b956:	2300      	movs	r3, #0
 800b958:	f04f 32ff 	mov.w	r2, #4294967295
 800b95c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b960:	f10a 0a01 	add.w	sl, sl, #1
 800b964:	9304      	str	r3, [sp, #16]
 800b966:	9307      	str	r3, [sp, #28]
 800b968:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b96c:	931a      	str	r3, [sp, #104]	; 0x68
 800b96e:	4654      	mov	r4, sl
 800b970:	2205      	movs	r2, #5
 800b972:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b976:	4858      	ldr	r0, [pc, #352]	; (800bad8 <_vfiprintf_r+0x24c>)
 800b978:	f7f4 fc32 	bl	80001e0 <memchr>
 800b97c:	9a04      	ldr	r2, [sp, #16]
 800b97e:	b9d8      	cbnz	r0, 800b9b8 <_vfiprintf_r+0x12c>
 800b980:	06d1      	lsls	r1, r2, #27
 800b982:	bf44      	itt	mi
 800b984:	2320      	movmi	r3, #32
 800b986:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b98a:	0713      	lsls	r3, r2, #28
 800b98c:	bf44      	itt	mi
 800b98e:	232b      	movmi	r3, #43	; 0x2b
 800b990:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b994:	f89a 3000 	ldrb.w	r3, [sl]
 800b998:	2b2a      	cmp	r3, #42	; 0x2a
 800b99a:	d015      	beq.n	800b9c8 <_vfiprintf_r+0x13c>
 800b99c:	9a07      	ldr	r2, [sp, #28]
 800b99e:	4654      	mov	r4, sl
 800b9a0:	2000      	movs	r0, #0
 800b9a2:	f04f 0c0a 	mov.w	ip, #10
 800b9a6:	4621      	mov	r1, r4
 800b9a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b9ac:	3b30      	subs	r3, #48	; 0x30
 800b9ae:	2b09      	cmp	r3, #9
 800b9b0:	d94e      	bls.n	800ba50 <_vfiprintf_r+0x1c4>
 800b9b2:	b1b0      	cbz	r0, 800b9e2 <_vfiprintf_r+0x156>
 800b9b4:	9207      	str	r2, [sp, #28]
 800b9b6:	e014      	b.n	800b9e2 <_vfiprintf_r+0x156>
 800b9b8:	eba0 0308 	sub.w	r3, r0, r8
 800b9bc:	fa09 f303 	lsl.w	r3, r9, r3
 800b9c0:	4313      	orrs	r3, r2
 800b9c2:	9304      	str	r3, [sp, #16]
 800b9c4:	46a2      	mov	sl, r4
 800b9c6:	e7d2      	b.n	800b96e <_vfiprintf_r+0xe2>
 800b9c8:	9b03      	ldr	r3, [sp, #12]
 800b9ca:	1d19      	adds	r1, r3, #4
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	9103      	str	r1, [sp, #12]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	bfbb      	ittet	lt
 800b9d4:	425b      	neglt	r3, r3
 800b9d6:	f042 0202 	orrlt.w	r2, r2, #2
 800b9da:	9307      	strge	r3, [sp, #28]
 800b9dc:	9307      	strlt	r3, [sp, #28]
 800b9de:	bfb8      	it	lt
 800b9e0:	9204      	strlt	r2, [sp, #16]
 800b9e2:	7823      	ldrb	r3, [r4, #0]
 800b9e4:	2b2e      	cmp	r3, #46	; 0x2e
 800b9e6:	d10c      	bne.n	800ba02 <_vfiprintf_r+0x176>
 800b9e8:	7863      	ldrb	r3, [r4, #1]
 800b9ea:	2b2a      	cmp	r3, #42	; 0x2a
 800b9ec:	d135      	bne.n	800ba5a <_vfiprintf_r+0x1ce>
 800b9ee:	9b03      	ldr	r3, [sp, #12]
 800b9f0:	1d1a      	adds	r2, r3, #4
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	9203      	str	r2, [sp, #12]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	bfb8      	it	lt
 800b9fa:	f04f 33ff 	movlt.w	r3, #4294967295
 800b9fe:	3402      	adds	r4, #2
 800ba00:	9305      	str	r3, [sp, #20]
 800ba02:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bae8 <_vfiprintf_r+0x25c>
 800ba06:	7821      	ldrb	r1, [r4, #0]
 800ba08:	2203      	movs	r2, #3
 800ba0a:	4650      	mov	r0, sl
 800ba0c:	f7f4 fbe8 	bl	80001e0 <memchr>
 800ba10:	b140      	cbz	r0, 800ba24 <_vfiprintf_r+0x198>
 800ba12:	2340      	movs	r3, #64	; 0x40
 800ba14:	eba0 000a 	sub.w	r0, r0, sl
 800ba18:	fa03 f000 	lsl.w	r0, r3, r0
 800ba1c:	9b04      	ldr	r3, [sp, #16]
 800ba1e:	4303      	orrs	r3, r0
 800ba20:	3401      	adds	r4, #1
 800ba22:	9304      	str	r3, [sp, #16]
 800ba24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba28:	482c      	ldr	r0, [pc, #176]	; (800badc <_vfiprintf_r+0x250>)
 800ba2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba2e:	2206      	movs	r2, #6
 800ba30:	f7f4 fbd6 	bl	80001e0 <memchr>
 800ba34:	2800      	cmp	r0, #0
 800ba36:	d03f      	beq.n	800bab8 <_vfiprintf_r+0x22c>
 800ba38:	4b29      	ldr	r3, [pc, #164]	; (800bae0 <_vfiprintf_r+0x254>)
 800ba3a:	bb1b      	cbnz	r3, 800ba84 <_vfiprintf_r+0x1f8>
 800ba3c:	9b03      	ldr	r3, [sp, #12]
 800ba3e:	3307      	adds	r3, #7
 800ba40:	f023 0307 	bic.w	r3, r3, #7
 800ba44:	3308      	adds	r3, #8
 800ba46:	9303      	str	r3, [sp, #12]
 800ba48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba4a:	443b      	add	r3, r7
 800ba4c:	9309      	str	r3, [sp, #36]	; 0x24
 800ba4e:	e767      	b.n	800b920 <_vfiprintf_r+0x94>
 800ba50:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba54:	460c      	mov	r4, r1
 800ba56:	2001      	movs	r0, #1
 800ba58:	e7a5      	b.n	800b9a6 <_vfiprintf_r+0x11a>
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	3401      	adds	r4, #1
 800ba5e:	9305      	str	r3, [sp, #20]
 800ba60:	4619      	mov	r1, r3
 800ba62:	f04f 0c0a 	mov.w	ip, #10
 800ba66:	4620      	mov	r0, r4
 800ba68:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba6c:	3a30      	subs	r2, #48	; 0x30
 800ba6e:	2a09      	cmp	r2, #9
 800ba70:	d903      	bls.n	800ba7a <_vfiprintf_r+0x1ee>
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d0c5      	beq.n	800ba02 <_vfiprintf_r+0x176>
 800ba76:	9105      	str	r1, [sp, #20]
 800ba78:	e7c3      	b.n	800ba02 <_vfiprintf_r+0x176>
 800ba7a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba7e:	4604      	mov	r4, r0
 800ba80:	2301      	movs	r3, #1
 800ba82:	e7f0      	b.n	800ba66 <_vfiprintf_r+0x1da>
 800ba84:	ab03      	add	r3, sp, #12
 800ba86:	9300      	str	r3, [sp, #0]
 800ba88:	462a      	mov	r2, r5
 800ba8a:	4b16      	ldr	r3, [pc, #88]	; (800bae4 <_vfiprintf_r+0x258>)
 800ba8c:	a904      	add	r1, sp, #16
 800ba8e:	4630      	mov	r0, r6
 800ba90:	f7fb fdf2 	bl	8007678 <_printf_float>
 800ba94:	4607      	mov	r7, r0
 800ba96:	1c78      	adds	r0, r7, #1
 800ba98:	d1d6      	bne.n	800ba48 <_vfiprintf_r+0x1bc>
 800ba9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba9c:	07d9      	lsls	r1, r3, #31
 800ba9e:	d405      	bmi.n	800baac <_vfiprintf_r+0x220>
 800baa0:	89ab      	ldrh	r3, [r5, #12]
 800baa2:	059a      	lsls	r2, r3, #22
 800baa4:	d402      	bmi.n	800baac <_vfiprintf_r+0x220>
 800baa6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800baa8:	f7fe ff76 	bl	800a998 <__retarget_lock_release_recursive>
 800baac:	89ab      	ldrh	r3, [r5, #12]
 800baae:	065b      	lsls	r3, r3, #25
 800bab0:	f53f af12 	bmi.w	800b8d8 <_vfiprintf_r+0x4c>
 800bab4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bab6:	e711      	b.n	800b8dc <_vfiprintf_r+0x50>
 800bab8:	ab03      	add	r3, sp, #12
 800baba:	9300      	str	r3, [sp, #0]
 800babc:	462a      	mov	r2, r5
 800babe:	4b09      	ldr	r3, [pc, #36]	; (800bae4 <_vfiprintf_r+0x258>)
 800bac0:	a904      	add	r1, sp, #16
 800bac2:	4630      	mov	r0, r6
 800bac4:	f7fc f87c 	bl	8007bc0 <_printf_i>
 800bac8:	e7e4      	b.n	800ba94 <_vfiprintf_r+0x208>
 800baca:	bf00      	nop
 800bacc:	0800c1a0 	.word	0x0800c1a0
 800bad0:	0800c1c0 	.word	0x0800c1c0
 800bad4:	0800c180 	.word	0x0800c180
 800bad8:	0800c3bc 	.word	0x0800c3bc
 800badc:	0800c3c6 	.word	0x0800c3c6
 800bae0:	08007679 	.word	0x08007679
 800bae4:	0800b867 	.word	0x0800b867
 800bae8:	0800c3c2 	.word	0x0800c3c2
 800baec:	00000000 	.word	0x00000000

0800baf0 <nan>:
 800baf0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800baf8 <nan+0x8>
 800baf4:	4770      	bx	lr
 800baf6:	bf00      	nop
 800baf8:	00000000 	.word	0x00000000
 800bafc:	7ff80000 	.word	0x7ff80000

0800bb00 <_sbrk_r>:
 800bb00:	b538      	push	{r3, r4, r5, lr}
 800bb02:	4d06      	ldr	r5, [pc, #24]	; (800bb1c <_sbrk_r+0x1c>)
 800bb04:	2300      	movs	r3, #0
 800bb06:	4604      	mov	r4, r0
 800bb08:	4608      	mov	r0, r1
 800bb0a:	602b      	str	r3, [r5, #0]
 800bb0c:	f7f5 ffee 	bl	8001aec <_sbrk>
 800bb10:	1c43      	adds	r3, r0, #1
 800bb12:	d102      	bne.n	800bb1a <_sbrk_r+0x1a>
 800bb14:	682b      	ldr	r3, [r5, #0]
 800bb16:	b103      	cbz	r3, 800bb1a <_sbrk_r+0x1a>
 800bb18:	6023      	str	r3, [r4, #0]
 800bb1a:	bd38      	pop	{r3, r4, r5, pc}
 800bb1c:	2000039c 	.word	0x2000039c

0800bb20 <__sread>:
 800bb20:	b510      	push	{r4, lr}
 800bb22:	460c      	mov	r4, r1
 800bb24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb28:	f000 f92e 	bl	800bd88 <_read_r>
 800bb2c:	2800      	cmp	r0, #0
 800bb2e:	bfab      	itete	ge
 800bb30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bb32:	89a3      	ldrhlt	r3, [r4, #12]
 800bb34:	181b      	addge	r3, r3, r0
 800bb36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bb3a:	bfac      	ite	ge
 800bb3c:	6563      	strge	r3, [r4, #84]	; 0x54
 800bb3e:	81a3      	strhlt	r3, [r4, #12]
 800bb40:	bd10      	pop	{r4, pc}

0800bb42 <__swrite>:
 800bb42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb46:	461f      	mov	r7, r3
 800bb48:	898b      	ldrh	r3, [r1, #12]
 800bb4a:	05db      	lsls	r3, r3, #23
 800bb4c:	4605      	mov	r5, r0
 800bb4e:	460c      	mov	r4, r1
 800bb50:	4616      	mov	r6, r2
 800bb52:	d505      	bpl.n	800bb60 <__swrite+0x1e>
 800bb54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb58:	2302      	movs	r3, #2
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	f000 f8b6 	bl	800bccc <_lseek_r>
 800bb60:	89a3      	ldrh	r3, [r4, #12]
 800bb62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bb6a:	81a3      	strh	r3, [r4, #12]
 800bb6c:	4632      	mov	r2, r6
 800bb6e:	463b      	mov	r3, r7
 800bb70:	4628      	mov	r0, r5
 800bb72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb76:	f000 b835 	b.w	800bbe4 <_write_r>

0800bb7a <__sseek>:
 800bb7a:	b510      	push	{r4, lr}
 800bb7c:	460c      	mov	r4, r1
 800bb7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb82:	f000 f8a3 	bl	800bccc <_lseek_r>
 800bb86:	1c43      	adds	r3, r0, #1
 800bb88:	89a3      	ldrh	r3, [r4, #12]
 800bb8a:	bf15      	itete	ne
 800bb8c:	6560      	strne	r0, [r4, #84]	; 0x54
 800bb8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bb92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bb96:	81a3      	strheq	r3, [r4, #12]
 800bb98:	bf18      	it	ne
 800bb9a:	81a3      	strhne	r3, [r4, #12]
 800bb9c:	bd10      	pop	{r4, pc}

0800bb9e <__sclose>:
 800bb9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bba2:	f000 b84f 	b.w	800bc44 <_close_r>

0800bba6 <strncmp>:
 800bba6:	b510      	push	{r4, lr}
 800bba8:	b16a      	cbz	r2, 800bbc6 <strncmp+0x20>
 800bbaa:	3901      	subs	r1, #1
 800bbac:	1884      	adds	r4, r0, r2
 800bbae:	f810 3b01 	ldrb.w	r3, [r0], #1
 800bbb2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bbb6:	4293      	cmp	r3, r2
 800bbb8:	d103      	bne.n	800bbc2 <strncmp+0x1c>
 800bbba:	42a0      	cmp	r0, r4
 800bbbc:	d001      	beq.n	800bbc2 <strncmp+0x1c>
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d1f5      	bne.n	800bbae <strncmp+0x8>
 800bbc2:	1a98      	subs	r0, r3, r2
 800bbc4:	bd10      	pop	{r4, pc}
 800bbc6:	4610      	mov	r0, r2
 800bbc8:	e7fc      	b.n	800bbc4 <strncmp+0x1e>

0800bbca <__ascii_wctomb>:
 800bbca:	b149      	cbz	r1, 800bbe0 <__ascii_wctomb+0x16>
 800bbcc:	2aff      	cmp	r2, #255	; 0xff
 800bbce:	bf85      	ittet	hi
 800bbd0:	238a      	movhi	r3, #138	; 0x8a
 800bbd2:	6003      	strhi	r3, [r0, #0]
 800bbd4:	700a      	strbls	r2, [r1, #0]
 800bbd6:	f04f 30ff 	movhi.w	r0, #4294967295
 800bbda:	bf98      	it	ls
 800bbdc:	2001      	movls	r0, #1
 800bbde:	4770      	bx	lr
 800bbe0:	4608      	mov	r0, r1
 800bbe2:	4770      	bx	lr

0800bbe4 <_write_r>:
 800bbe4:	b538      	push	{r3, r4, r5, lr}
 800bbe6:	4d07      	ldr	r5, [pc, #28]	; (800bc04 <_write_r+0x20>)
 800bbe8:	4604      	mov	r4, r0
 800bbea:	4608      	mov	r0, r1
 800bbec:	4611      	mov	r1, r2
 800bbee:	2200      	movs	r2, #0
 800bbf0:	602a      	str	r2, [r5, #0]
 800bbf2:	461a      	mov	r2, r3
 800bbf4:	f7f5 fd18 	bl	8001628 <_write>
 800bbf8:	1c43      	adds	r3, r0, #1
 800bbfa:	d102      	bne.n	800bc02 <_write_r+0x1e>
 800bbfc:	682b      	ldr	r3, [r5, #0]
 800bbfe:	b103      	cbz	r3, 800bc02 <_write_r+0x1e>
 800bc00:	6023      	str	r3, [r4, #0]
 800bc02:	bd38      	pop	{r3, r4, r5, pc}
 800bc04:	2000039c 	.word	0x2000039c

0800bc08 <__assert_func>:
 800bc08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bc0a:	4614      	mov	r4, r2
 800bc0c:	461a      	mov	r2, r3
 800bc0e:	4b09      	ldr	r3, [pc, #36]	; (800bc34 <__assert_func+0x2c>)
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	4605      	mov	r5, r0
 800bc14:	68d8      	ldr	r0, [r3, #12]
 800bc16:	b14c      	cbz	r4, 800bc2c <__assert_func+0x24>
 800bc18:	4b07      	ldr	r3, [pc, #28]	; (800bc38 <__assert_func+0x30>)
 800bc1a:	9100      	str	r1, [sp, #0]
 800bc1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bc20:	4906      	ldr	r1, [pc, #24]	; (800bc3c <__assert_func+0x34>)
 800bc22:	462b      	mov	r3, r5
 800bc24:	f000 f81e 	bl	800bc64 <fiprintf>
 800bc28:	f000 f8c0 	bl	800bdac <abort>
 800bc2c:	4b04      	ldr	r3, [pc, #16]	; (800bc40 <__assert_func+0x38>)
 800bc2e:	461c      	mov	r4, r3
 800bc30:	e7f3      	b.n	800bc1a <__assert_func+0x12>
 800bc32:	bf00      	nop
 800bc34:	2000000c 	.word	0x2000000c
 800bc38:	0800c3cd 	.word	0x0800c3cd
 800bc3c:	0800c3da 	.word	0x0800c3da
 800bc40:	0800c408 	.word	0x0800c408

0800bc44 <_close_r>:
 800bc44:	b538      	push	{r3, r4, r5, lr}
 800bc46:	4d06      	ldr	r5, [pc, #24]	; (800bc60 <_close_r+0x1c>)
 800bc48:	2300      	movs	r3, #0
 800bc4a:	4604      	mov	r4, r0
 800bc4c:	4608      	mov	r0, r1
 800bc4e:	602b      	str	r3, [r5, #0]
 800bc50:	f7f5 ff17 	bl	8001a82 <_close>
 800bc54:	1c43      	adds	r3, r0, #1
 800bc56:	d102      	bne.n	800bc5e <_close_r+0x1a>
 800bc58:	682b      	ldr	r3, [r5, #0]
 800bc5a:	b103      	cbz	r3, 800bc5e <_close_r+0x1a>
 800bc5c:	6023      	str	r3, [r4, #0]
 800bc5e:	bd38      	pop	{r3, r4, r5, pc}
 800bc60:	2000039c 	.word	0x2000039c

0800bc64 <fiprintf>:
 800bc64:	b40e      	push	{r1, r2, r3}
 800bc66:	b503      	push	{r0, r1, lr}
 800bc68:	4601      	mov	r1, r0
 800bc6a:	ab03      	add	r3, sp, #12
 800bc6c:	4805      	ldr	r0, [pc, #20]	; (800bc84 <fiprintf+0x20>)
 800bc6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc72:	6800      	ldr	r0, [r0, #0]
 800bc74:	9301      	str	r3, [sp, #4]
 800bc76:	f7ff fe09 	bl	800b88c <_vfiprintf_r>
 800bc7a:	b002      	add	sp, #8
 800bc7c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc80:	b003      	add	sp, #12
 800bc82:	4770      	bx	lr
 800bc84:	2000000c 	.word	0x2000000c

0800bc88 <_fstat_r>:
 800bc88:	b538      	push	{r3, r4, r5, lr}
 800bc8a:	4d07      	ldr	r5, [pc, #28]	; (800bca8 <_fstat_r+0x20>)
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	4604      	mov	r4, r0
 800bc90:	4608      	mov	r0, r1
 800bc92:	4611      	mov	r1, r2
 800bc94:	602b      	str	r3, [r5, #0]
 800bc96:	f7f5 ff00 	bl	8001a9a <_fstat>
 800bc9a:	1c43      	adds	r3, r0, #1
 800bc9c:	d102      	bne.n	800bca4 <_fstat_r+0x1c>
 800bc9e:	682b      	ldr	r3, [r5, #0]
 800bca0:	b103      	cbz	r3, 800bca4 <_fstat_r+0x1c>
 800bca2:	6023      	str	r3, [r4, #0]
 800bca4:	bd38      	pop	{r3, r4, r5, pc}
 800bca6:	bf00      	nop
 800bca8:	2000039c 	.word	0x2000039c

0800bcac <_isatty_r>:
 800bcac:	b538      	push	{r3, r4, r5, lr}
 800bcae:	4d06      	ldr	r5, [pc, #24]	; (800bcc8 <_isatty_r+0x1c>)
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	4604      	mov	r4, r0
 800bcb4:	4608      	mov	r0, r1
 800bcb6:	602b      	str	r3, [r5, #0]
 800bcb8:	f7f5 feff 	bl	8001aba <_isatty>
 800bcbc:	1c43      	adds	r3, r0, #1
 800bcbe:	d102      	bne.n	800bcc6 <_isatty_r+0x1a>
 800bcc0:	682b      	ldr	r3, [r5, #0]
 800bcc2:	b103      	cbz	r3, 800bcc6 <_isatty_r+0x1a>
 800bcc4:	6023      	str	r3, [r4, #0]
 800bcc6:	bd38      	pop	{r3, r4, r5, pc}
 800bcc8:	2000039c 	.word	0x2000039c

0800bccc <_lseek_r>:
 800bccc:	b538      	push	{r3, r4, r5, lr}
 800bcce:	4d07      	ldr	r5, [pc, #28]	; (800bcec <_lseek_r+0x20>)
 800bcd0:	4604      	mov	r4, r0
 800bcd2:	4608      	mov	r0, r1
 800bcd4:	4611      	mov	r1, r2
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	602a      	str	r2, [r5, #0]
 800bcda:	461a      	mov	r2, r3
 800bcdc:	f7f5 fef8 	bl	8001ad0 <_lseek>
 800bce0:	1c43      	adds	r3, r0, #1
 800bce2:	d102      	bne.n	800bcea <_lseek_r+0x1e>
 800bce4:	682b      	ldr	r3, [r5, #0]
 800bce6:	b103      	cbz	r3, 800bcea <_lseek_r+0x1e>
 800bce8:	6023      	str	r3, [r4, #0]
 800bcea:	bd38      	pop	{r3, r4, r5, pc}
 800bcec:	2000039c 	.word	0x2000039c

0800bcf0 <memmove>:
 800bcf0:	4288      	cmp	r0, r1
 800bcf2:	b510      	push	{r4, lr}
 800bcf4:	eb01 0402 	add.w	r4, r1, r2
 800bcf8:	d902      	bls.n	800bd00 <memmove+0x10>
 800bcfa:	4284      	cmp	r4, r0
 800bcfc:	4623      	mov	r3, r4
 800bcfe:	d807      	bhi.n	800bd10 <memmove+0x20>
 800bd00:	1e43      	subs	r3, r0, #1
 800bd02:	42a1      	cmp	r1, r4
 800bd04:	d008      	beq.n	800bd18 <memmove+0x28>
 800bd06:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bd0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bd0e:	e7f8      	b.n	800bd02 <memmove+0x12>
 800bd10:	4402      	add	r2, r0
 800bd12:	4601      	mov	r1, r0
 800bd14:	428a      	cmp	r2, r1
 800bd16:	d100      	bne.n	800bd1a <memmove+0x2a>
 800bd18:	bd10      	pop	{r4, pc}
 800bd1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bd1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bd22:	e7f7      	b.n	800bd14 <memmove+0x24>

0800bd24 <__malloc_lock>:
 800bd24:	4801      	ldr	r0, [pc, #4]	; (800bd2c <__malloc_lock+0x8>)
 800bd26:	f7fe be36 	b.w	800a996 <__retarget_lock_acquire_recursive>
 800bd2a:	bf00      	nop
 800bd2c:	20000394 	.word	0x20000394

0800bd30 <__malloc_unlock>:
 800bd30:	4801      	ldr	r0, [pc, #4]	; (800bd38 <__malloc_unlock+0x8>)
 800bd32:	f7fe be31 	b.w	800a998 <__retarget_lock_release_recursive>
 800bd36:	bf00      	nop
 800bd38:	20000394 	.word	0x20000394

0800bd3c <_realloc_r>:
 800bd3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd3e:	4607      	mov	r7, r0
 800bd40:	4614      	mov	r4, r2
 800bd42:	460e      	mov	r6, r1
 800bd44:	b921      	cbnz	r1, 800bd50 <_realloc_r+0x14>
 800bd46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bd4a:	4611      	mov	r1, r2
 800bd4c:	f7ff bbbe 	b.w	800b4cc <_malloc_r>
 800bd50:	b922      	cbnz	r2, 800bd5c <_realloc_r+0x20>
 800bd52:	f7ff fb6b 	bl	800b42c <_free_r>
 800bd56:	4625      	mov	r5, r4
 800bd58:	4628      	mov	r0, r5
 800bd5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd5c:	f000 f82d 	bl	800bdba <_malloc_usable_size_r>
 800bd60:	42a0      	cmp	r0, r4
 800bd62:	d20f      	bcs.n	800bd84 <_realloc_r+0x48>
 800bd64:	4621      	mov	r1, r4
 800bd66:	4638      	mov	r0, r7
 800bd68:	f7ff fbb0 	bl	800b4cc <_malloc_r>
 800bd6c:	4605      	mov	r5, r0
 800bd6e:	2800      	cmp	r0, #0
 800bd70:	d0f2      	beq.n	800bd58 <_realloc_r+0x1c>
 800bd72:	4631      	mov	r1, r6
 800bd74:	4622      	mov	r2, r4
 800bd76:	f7fb fbc9 	bl	800750c <memcpy>
 800bd7a:	4631      	mov	r1, r6
 800bd7c:	4638      	mov	r0, r7
 800bd7e:	f7ff fb55 	bl	800b42c <_free_r>
 800bd82:	e7e9      	b.n	800bd58 <_realloc_r+0x1c>
 800bd84:	4635      	mov	r5, r6
 800bd86:	e7e7      	b.n	800bd58 <_realloc_r+0x1c>

0800bd88 <_read_r>:
 800bd88:	b538      	push	{r3, r4, r5, lr}
 800bd8a:	4d07      	ldr	r5, [pc, #28]	; (800bda8 <_read_r+0x20>)
 800bd8c:	4604      	mov	r4, r0
 800bd8e:	4608      	mov	r0, r1
 800bd90:	4611      	mov	r1, r2
 800bd92:	2200      	movs	r2, #0
 800bd94:	602a      	str	r2, [r5, #0]
 800bd96:	461a      	mov	r2, r3
 800bd98:	f7f5 fe56 	bl	8001a48 <_read>
 800bd9c:	1c43      	adds	r3, r0, #1
 800bd9e:	d102      	bne.n	800bda6 <_read_r+0x1e>
 800bda0:	682b      	ldr	r3, [r5, #0]
 800bda2:	b103      	cbz	r3, 800bda6 <_read_r+0x1e>
 800bda4:	6023      	str	r3, [r4, #0]
 800bda6:	bd38      	pop	{r3, r4, r5, pc}
 800bda8:	2000039c 	.word	0x2000039c

0800bdac <abort>:
 800bdac:	b508      	push	{r3, lr}
 800bdae:	2006      	movs	r0, #6
 800bdb0:	f000 f834 	bl	800be1c <raise>
 800bdb4:	2001      	movs	r0, #1
 800bdb6:	f7f5 fe3d 	bl	8001a34 <_exit>

0800bdba <_malloc_usable_size_r>:
 800bdba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bdbe:	1f18      	subs	r0, r3, #4
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	bfbc      	itt	lt
 800bdc4:	580b      	ldrlt	r3, [r1, r0]
 800bdc6:	18c0      	addlt	r0, r0, r3
 800bdc8:	4770      	bx	lr

0800bdca <_raise_r>:
 800bdca:	291f      	cmp	r1, #31
 800bdcc:	b538      	push	{r3, r4, r5, lr}
 800bdce:	4604      	mov	r4, r0
 800bdd0:	460d      	mov	r5, r1
 800bdd2:	d904      	bls.n	800bdde <_raise_r+0x14>
 800bdd4:	2316      	movs	r3, #22
 800bdd6:	6003      	str	r3, [r0, #0]
 800bdd8:	f04f 30ff 	mov.w	r0, #4294967295
 800bddc:	bd38      	pop	{r3, r4, r5, pc}
 800bdde:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bde0:	b112      	cbz	r2, 800bde8 <_raise_r+0x1e>
 800bde2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bde6:	b94b      	cbnz	r3, 800bdfc <_raise_r+0x32>
 800bde8:	4620      	mov	r0, r4
 800bdea:	f000 f831 	bl	800be50 <_getpid_r>
 800bdee:	462a      	mov	r2, r5
 800bdf0:	4601      	mov	r1, r0
 800bdf2:	4620      	mov	r0, r4
 800bdf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bdf8:	f000 b818 	b.w	800be2c <_kill_r>
 800bdfc:	2b01      	cmp	r3, #1
 800bdfe:	d00a      	beq.n	800be16 <_raise_r+0x4c>
 800be00:	1c59      	adds	r1, r3, #1
 800be02:	d103      	bne.n	800be0c <_raise_r+0x42>
 800be04:	2316      	movs	r3, #22
 800be06:	6003      	str	r3, [r0, #0]
 800be08:	2001      	movs	r0, #1
 800be0a:	e7e7      	b.n	800bddc <_raise_r+0x12>
 800be0c:	2400      	movs	r4, #0
 800be0e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800be12:	4628      	mov	r0, r5
 800be14:	4798      	blx	r3
 800be16:	2000      	movs	r0, #0
 800be18:	e7e0      	b.n	800bddc <_raise_r+0x12>
	...

0800be1c <raise>:
 800be1c:	4b02      	ldr	r3, [pc, #8]	; (800be28 <raise+0xc>)
 800be1e:	4601      	mov	r1, r0
 800be20:	6818      	ldr	r0, [r3, #0]
 800be22:	f7ff bfd2 	b.w	800bdca <_raise_r>
 800be26:	bf00      	nop
 800be28:	2000000c 	.word	0x2000000c

0800be2c <_kill_r>:
 800be2c:	b538      	push	{r3, r4, r5, lr}
 800be2e:	4d07      	ldr	r5, [pc, #28]	; (800be4c <_kill_r+0x20>)
 800be30:	2300      	movs	r3, #0
 800be32:	4604      	mov	r4, r0
 800be34:	4608      	mov	r0, r1
 800be36:	4611      	mov	r1, r2
 800be38:	602b      	str	r3, [r5, #0]
 800be3a:	f7f5 fdeb 	bl	8001a14 <_kill>
 800be3e:	1c43      	adds	r3, r0, #1
 800be40:	d102      	bne.n	800be48 <_kill_r+0x1c>
 800be42:	682b      	ldr	r3, [r5, #0]
 800be44:	b103      	cbz	r3, 800be48 <_kill_r+0x1c>
 800be46:	6023      	str	r3, [r4, #0]
 800be48:	bd38      	pop	{r3, r4, r5, pc}
 800be4a:	bf00      	nop
 800be4c:	2000039c 	.word	0x2000039c

0800be50 <_getpid_r>:
 800be50:	f7f5 bdd8 	b.w	8001a04 <_getpid>

0800be54 <_init>:
 800be54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be56:	bf00      	nop
 800be58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be5a:	bc08      	pop	{r3}
 800be5c:	469e      	mov	lr, r3
 800be5e:	4770      	bx	lr

0800be60 <_fini>:
 800be60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be62:	bf00      	nop
 800be64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be66:	bc08      	pop	{r3}
 800be68:	469e      	mov	lr, r3
 800be6a:	4770      	bx	lr
