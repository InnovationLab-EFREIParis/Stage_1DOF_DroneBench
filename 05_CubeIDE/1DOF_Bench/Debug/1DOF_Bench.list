
1DOF_Bench.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e78  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08006008  08006008  00016008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800612c  0800612c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800612c  0800612c  0001612c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006134  08006134  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006134  08006134  00016134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006138  08006138  00016138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800613c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  20000070  080061ac  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e8  080061ac  000201e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017edc  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002878  00000000  00000000  00037f7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001308  00000000  00000000  0003a7f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001210  00000000  00000000  0003bb00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002997e  00000000  00000000  0003cd10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000152b3  00000000  00000000  0006668e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00109ef8  00000000  00000000  0007b941  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00185839  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000592c  00000000  00000000  0018588c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005ff0 	.word	0x08005ff0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005ff0 	.word	0x08005ff0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0


  /* MCU Configuration--------------------------------------------------------*/

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800056c:	f000 f992 	bl	8000894 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000570:	f000 f960 	bl	8000834 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	// Light up green led
	setGreenLed();
 8000574:	f000 fa24 	bl	80009c0 <setGreenLed>
	// blink green led
	blinkGreenLed(10, 100);
 8000578:	2164      	movs	r1, #100	; 0x64
 800057a:	200a      	movs	r0, #10
 800057c:	f000 fa2a 	bl	80009d4 <blinkGreenLed>
	// Welcome message on UART
	sendWelcomeMsgRS232(&huart2);
 8000580:	480a      	ldr	r0, [pc, #40]	; (80005ac <main+0x44>)
 8000582:	f000 fa61 	bl	8000a48 <sendWelcomeMsgRS232>
	printf("Hello from main\n\r");
 8000586:	480a      	ldr	r0, [pc, #40]	; (80005b0 <main+0x48>)
 8000588:	f004 fddc 	bl	8005144 <iprintf>




  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058c:	f000 fca4 	bl	8000ed8 <HAL_Init>

  /* USER CODE BEGIN Init */


		// set green led if push button
		setGreenLedViaButton();
 8000590:	f000 fa3e 	bl	8000a10 <setGreenLedViaButton>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000594:	f000 f80e 	bl	80005b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000598:	f000 f97c 	bl	8000894 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800059c:	f000 f94a 	bl	8000834 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80005a0:	f000 f85a 	bl	8000658 <MX_ADC1_Init>
  MX_TIM17_Init();
 80005a4:	f000 f8ce 	bl	8000744 <MX_TIM17_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a8:	e7fe      	b.n	80005a8 <main+0x40>
 80005aa:	bf00      	nop
 80005ac:	20000150 	.word	0x20000150
 80005b0:	08006008 	.word	0x08006008

080005b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b096      	sub	sp, #88	; 0x58
 80005b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	2244      	movs	r2, #68	; 0x44
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f004 fdb6 	bl	8005134 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c8:	463b      	mov	r3, r7
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	609a      	str	r2, [r3, #8]
 80005d2:	60da      	str	r2, [r3, #12]
 80005d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005d6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005da:	f001 ffad 	bl	8002538 <HAL_PWREx_ControlVoltageScaling>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005e4:	f000 f9bc 	bl	8000960 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e8:	2302      	movs	r3, #2
 80005ea:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005f0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f2:	2310      	movs	r3, #16
 80005f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f6:	2302      	movs	r3, #2
 80005f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005fa:	2302      	movs	r3, #2
 80005fc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005fe:	2301      	movs	r3, #1
 8000600:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000602:	230a      	movs	r3, #10
 8000604:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000606:	2307      	movs	r3, #7
 8000608:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800060a:	2302      	movs	r3, #2
 800060c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800060e:	2302      	movs	r3, #2
 8000610:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000612:	f107 0314 	add.w	r3, r7, #20
 8000616:	4618      	mov	r0, r3
 8000618:	f001 ffe4 	bl	80025e4 <HAL_RCC_OscConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000622:	f000 f99d 	bl	8000960 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000626:	230f      	movs	r3, #15
 8000628:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062a:	2303      	movs	r3, #3
 800062c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062e:	2300      	movs	r3, #0
 8000630:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000636:	2300      	movs	r3, #0
 8000638:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800063a:	463b      	mov	r3, r7
 800063c:	2104      	movs	r1, #4
 800063e:	4618      	mov	r0, r3
 8000640:	f002 fbb6 	bl	8002db0 <HAL_RCC_ClockConfig>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800064a:	f000 f989 	bl	8000960 <Error_Handler>
  }
}
 800064e:	bf00      	nop
 8000650:	3758      	adds	r7, #88	; 0x58
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
	...

08000658 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b08a      	sub	sp, #40	; 0x28
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800065e:	f107 031c 	add.w	r3, r7, #28
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]
 8000678:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800067a:	4b2f      	ldr	r3, [pc, #188]	; (8000738 <MX_ADC1_Init+0xe0>)
 800067c:	4a2f      	ldr	r2, [pc, #188]	; (800073c <MX_ADC1_Init+0xe4>)
 800067e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000680:	4b2d      	ldr	r3, [pc, #180]	; (8000738 <MX_ADC1_Init+0xe0>)
 8000682:	2200      	movs	r2, #0
 8000684:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000686:	4b2c      	ldr	r3, [pc, #176]	; (8000738 <MX_ADC1_Init+0xe0>)
 8000688:	2200      	movs	r2, #0
 800068a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800068c:	4b2a      	ldr	r3, [pc, #168]	; (8000738 <MX_ADC1_Init+0xe0>)
 800068e:	2200      	movs	r2, #0
 8000690:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000692:	4b29      	ldr	r3, [pc, #164]	; (8000738 <MX_ADC1_Init+0xe0>)
 8000694:	2200      	movs	r2, #0
 8000696:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000698:	4b27      	ldr	r3, [pc, #156]	; (8000738 <MX_ADC1_Init+0xe0>)
 800069a:	2204      	movs	r2, #4
 800069c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800069e:	4b26      	ldr	r3, [pc, #152]	; (8000738 <MX_ADC1_Init+0xe0>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006a4:	4b24      	ldr	r3, [pc, #144]	; (8000738 <MX_ADC1_Init+0xe0>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80006aa:	4b23      	ldr	r3, [pc, #140]	; (8000738 <MX_ADC1_Init+0xe0>)
 80006ac:	2201      	movs	r2, #1
 80006ae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006b0:	4b21      	ldr	r3, [pc, #132]	; (8000738 <MX_ADC1_Init+0xe0>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006b8:	4b1f      	ldr	r3, [pc, #124]	; (8000738 <MX_ADC1_Init+0xe0>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006be:	4b1e      	ldr	r3, [pc, #120]	; (8000738 <MX_ADC1_Init+0xe0>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006c4:	4b1c      	ldr	r3, [pc, #112]	; (8000738 <MX_ADC1_Init+0xe0>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006cc:	4b1a      	ldr	r3, [pc, #104]	; (8000738 <MX_ADC1_Init+0xe0>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80006d2:	4b19      	ldr	r3, [pc, #100]	; (8000738 <MX_ADC1_Init+0xe0>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006da:	4817      	ldr	r0, [pc, #92]	; (8000738 <MX_ADC1_Init+0xe0>)
 80006dc:	f000 fe28 	bl	8001330 <HAL_ADC_Init>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80006e6:	f000 f93b 	bl	8000960 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006ee:	f107 031c 	add.w	r3, r7, #28
 80006f2:	4619      	mov	r1, r3
 80006f4:	4810      	ldr	r0, [pc, #64]	; (8000738 <MX_ADC1_Init+0xe0>)
 80006f6:	f001 fb87 	bl	8001e08 <HAL_ADCEx_MultiModeConfigChannel>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000700:	f000 f92e 	bl	8000960 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000704:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <MX_ADC1_Init+0xe8>)
 8000706:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000708:	2306      	movs	r3, #6
 800070a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800070c:	2300      	movs	r3, #0
 800070e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000710:	237f      	movs	r3, #127	; 0x7f
 8000712:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000714:	2304      	movs	r3, #4
 8000716:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000718:	2300      	movs	r3, #0
 800071a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	4619      	mov	r1, r3
 8000720:	4805      	ldr	r0, [pc, #20]	; (8000738 <MX_ADC1_Init+0xe0>)
 8000722:	f000 ff5b 	bl	80015dc <HAL_ADC_ConfigChannel>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800072c:	f000 f918 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000730:	bf00      	nop
 8000732:	3728      	adds	r7, #40	; 0x28
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	200000e8 	.word	0x200000e8
 800073c:	50040000 	.word	0x50040000
 8000740:	14f00020 	.word	0x14f00020

08000744 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b092      	sub	sp, #72	; 0x48
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800074a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
 8000758:	611a      	str	r2, [r3, #16]
 800075a:	615a      	str	r2, [r3, #20]
 800075c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800075e:	463b      	mov	r3, r7
 8000760:	222c      	movs	r2, #44	; 0x2c
 8000762:	2100      	movs	r1, #0
 8000764:	4618      	mov	r0, r3
 8000766:	f004 fce5 	bl	8005134 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800076a:	4b30      	ldr	r3, [pc, #192]	; (800082c <MX_TIM17_Init+0xe8>)
 800076c:	4a30      	ldr	r2, [pc, #192]	; (8000830 <MX_TIM17_Init+0xec>)
 800076e:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000770:	4b2e      	ldr	r3, [pc, #184]	; (800082c <MX_TIM17_Init+0xe8>)
 8000772:	2200      	movs	r2, #0
 8000774:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000776:	4b2d      	ldr	r3, [pc, #180]	; (800082c <MX_TIM17_Init+0xe8>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 4096;
 800077c:	4b2b      	ldr	r3, [pc, #172]	; (800082c <MX_TIM17_Init+0xe8>)
 800077e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000782:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000784:	4b29      	ldr	r3, [pc, #164]	; (800082c <MX_TIM17_Init+0xe8>)
 8000786:	2200      	movs	r2, #0
 8000788:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800078a:	4b28      	ldr	r3, [pc, #160]	; (800082c <MX_TIM17_Init+0xe8>)
 800078c:	2200      	movs	r2, #0
 800078e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000790:	4b26      	ldr	r3, [pc, #152]	; (800082c <MX_TIM17_Init+0xe8>)
 8000792:	2200      	movs	r2, #0
 8000794:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000796:	4825      	ldr	r0, [pc, #148]	; (800082c <MX_TIM17_Init+0xe8>)
 8000798:	f003 f9cc 	bl	8003b34 <HAL_TIM_Base_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 80007a2:	f000 f8dd 	bl	8000960 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80007a6:	4821      	ldr	r0, [pc, #132]	; (800082c <MX_TIM17_Init+0xe8>)
 80007a8:	f003 fa1b 	bl	8003be2 <HAL_TIM_PWM_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 80007b2:	f000 f8d5 	bl	8000960 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007b6:	2360      	movs	r3, #96	; 0x60
 80007b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007be:	2300      	movs	r3, #0
 80007c0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007c2:	2300      	movs	r3, #0
 80007c4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007c6:	2300      	movs	r3, #0
 80007c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007ca:	2300      	movs	r3, #0
 80007cc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007ce:	2300      	movs	r3, #0
 80007d0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007d6:	2200      	movs	r2, #0
 80007d8:	4619      	mov	r1, r3
 80007da:	4814      	ldr	r0, [pc, #80]	; (800082c <MX_TIM17_Init+0xe8>)
 80007dc:	f003 fa62 	bl	8003ca4 <HAL_TIM_PWM_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 80007e6:	f000 f8bb 	bl	8000960 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007ea:	2300      	movs	r3, #0
 80007ec:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007ee:	2300      	movs	r3, #0
 80007f0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007f2:	2300      	movs	r3, #0
 80007f4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000802:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000804:	2300      	movs	r3, #0
 8000806:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000808:	463b      	mov	r3, r7
 800080a:	4619      	mov	r1, r3
 800080c:	4807      	ldr	r0, [pc, #28]	; (800082c <MX_TIM17_Init+0xe8>)
 800080e:	f003 fecd 	bl	80045ac <HAL_TIMEx_ConfigBreakDeadTime>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_TIM17_Init+0xd8>
  {
    Error_Handler();
 8000818:	f000 f8a2 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 800081c:	4803      	ldr	r0, [pc, #12]	; (800082c <MX_TIM17_Init+0xe8>)
 800081e:	f000 f9d9 	bl	8000bd4 <HAL_TIM_MspPostInit>

}
 8000822:	bf00      	nop
 8000824:	3748      	adds	r7, #72	; 0x48
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000098 	.word	0x20000098
 8000830:	40014800 	.word	0x40014800

08000834 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000838:	4b14      	ldr	r3, [pc, #80]	; (800088c <MX_USART2_UART_Init+0x58>)
 800083a:	4a15      	ldr	r2, [pc, #84]	; (8000890 <MX_USART2_UART_Init+0x5c>)
 800083c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800083e:	4b13      	ldr	r3, [pc, #76]	; (800088c <MX_USART2_UART_Init+0x58>)
 8000840:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000844:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000846:	4b11      	ldr	r3, [pc, #68]	; (800088c <MX_USART2_UART_Init+0x58>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800084c:	4b0f      	ldr	r3, [pc, #60]	; (800088c <MX_USART2_UART_Init+0x58>)
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000852:	4b0e      	ldr	r3, [pc, #56]	; (800088c <MX_USART2_UART_Init+0x58>)
 8000854:	2200      	movs	r2, #0
 8000856:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000858:	4b0c      	ldr	r3, [pc, #48]	; (800088c <MX_USART2_UART_Init+0x58>)
 800085a:	220c      	movs	r2, #12
 800085c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085e:	4b0b      	ldr	r3, [pc, #44]	; (800088c <MX_USART2_UART_Init+0x58>)
 8000860:	2200      	movs	r2, #0
 8000862:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000864:	4b09      	ldr	r3, [pc, #36]	; (800088c <MX_USART2_UART_Init+0x58>)
 8000866:	2200      	movs	r2, #0
 8000868:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800086a:	4b08      	ldr	r3, [pc, #32]	; (800088c <MX_USART2_UART_Init+0x58>)
 800086c:	2200      	movs	r2, #0
 800086e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <MX_USART2_UART_Init+0x58>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000876:	4805      	ldr	r0, [pc, #20]	; (800088c <MX_USART2_UART_Init+0x58>)
 8000878:	f003 ff16 	bl	80046a8 <HAL_UART_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000882:	f000 f86d 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000150 	.word	0x20000150
 8000890:	40004400 	.word	0x40004400

08000894 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08a      	sub	sp, #40	; 0x28
 8000898:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089a:	f107 0314 	add.w	r3, r7, #20
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]
 80008a6:	60da      	str	r2, [r3, #12]
 80008a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008aa:	4b2b      	ldr	r3, [pc, #172]	; (8000958 <MX_GPIO_Init+0xc4>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ae:	4a2a      	ldr	r2, [pc, #168]	; (8000958 <MX_GPIO_Init+0xc4>)
 80008b0:	f043 0304 	orr.w	r3, r3, #4
 80008b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008b6:	4b28      	ldr	r3, [pc, #160]	; (8000958 <MX_GPIO_Init+0xc4>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ba:	f003 0304 	and.w	r3, r3, #4
 80008be:	613b      	str	r3, [r7, #16]
 80008c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008c2:	4b25      	ldr	r3, [pc, #148]	; (8000958 <MX_GPIO_Init+0xc4>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c6:	4a24      	ldr	r2, [pc, #144]	; (8000958 <MX_GPIO_Init+0xc4>)
 80008c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ce:	4b22      	ldr	r3, [pc, #136]	; (8000958 <MX_GPIO_Init+0xc4>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	4b1f      	ldr	r3, [pc, #124]	; (8000958 <MX_GPIO_Init+0xc4>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008de:	4a1e      	ldr	r2, [pc, #120]	; (8000958 <MX_GPIO_Init+0xc4>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008e6:	4b1c      	ldr	r3, [pc, #112]	; (8000958 <MX_GPIO_Init+0xc4>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	60bb      	str	r3, [r7, #8]
 80008f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f2:	4b19      	ldr	r3, [pc, #100]	; (8000958 <MX_GPIO_Init+0xc4>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f6:	4a18      	ldr	r2, [pc, #96]	; (8000958 <MX_GPIO_Init+0xc4>)
 80008f8:	f043 0302 	orr.w	r3, r3, #2
 80008fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008fe:	4b16      	ldr	r3, [pc, #88]	; (8000958 <MX_GPIO_Init+0xc4>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000902:	f003 0302 	and.w	r3, r3, #2
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800090a:	2200      	movs	r2, #0
 800090c:	2120      	movs	r1, #32
 800090e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000912:	f001 fdd1 	bl	80024b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000916:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800091a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800091c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000920:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000926:	f107 0314 	add.w	r3, r7, #20
 800092a:	4619      	mov	r1, r3
 800092c:	480b      	ldr	r0, [pc, #44]	; (800095c <MX_GPIO_Init+0xc8>)
 800092e:	f001 fc01 	bl	8002134 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000932:	2320      	movs	r3, #32
 8000934:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000936:	2301      	movs	r3, #1
 8000938:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093e:	2300      	movs	r3, #0
 8000940:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000942:	f107 0314 	add.w	r3, r7, #20
 8000946:	4619      	mov	r1, r3
 8000948:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800094c:	f001 fbf2 	bl	8002134 <HAL_GPIO_Init>

}
 8000950:	bf00      	nop
 8000952:	3728      	adds	r7, #40	; 0x28
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40021000 	.word	0x40021000
 800095c:	48000800 	.word	0x48000800

08000960 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000964:	b672      	cpsid	i
}
 8000966:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000968:	e7fe      	b.n	8000968 <Error_Handler+0x8>
	...

0800096c <_write>:
}
#endif /* USE_FULL_ASSERT */

// Redefine _write function for printf
int _write(int file, char *data, int len)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b086      	sub	sp, #24
 8000970:	af00      	add	r7, sp, #0
 8000972:	60f8      	str	r0, [r7, #12]
 8000974:	60b9      	str	r1, [r7, #8]
 8000976:	607a      	str	r2, [r7, #4]
   if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	2b01      	cmp	r3, #1
 800097c:	d00a      	beq.n	8000994 <_write+0x28>
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	2b02      	cmp	r3, #2
 8000982:	d007      	beq.n	8000994 <_write+0x28>
   {
      errno = EBADF;
 8000984:	f004 fbac 	bl	80050e0 <__errno>
 8000988:	4603      	mov	r3, r0
 800098a:	2209      	movs	r2, #9
 800098c:	601a      	str	r2, [r3, #0]
      return -1;
 800098e:	f04f 33ff 	mov.w	r3, #4294967295
 8000992:	e00f      	b.n	80009b4 <_write+0x48>
   }

   // arbitrary timeout 1000
   HAL_StatusTypeDef status =
      HAL_UART_Transmit(&huart2, (uint8_t*)data, len, 1000);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	b29a      	uxth	r2, r3
 8000998:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800099c:	68b9      	ldr	r1, [r7, #8]
 800099e:	4807      	ldr	r0, [pc, #28]	; (80009bc <_write+0x50>)
 80009a0:	f003 fed0 	bl	8004744 <HAL_UART_Transmit>
 80009a4:	4603      	mov	r3, r0
 80009a6:	75fb      	strb	r3, [r7, #23]

   // return # of bytes written - as best we can tell
   return (status == HAL_OK ? len : 0);
 80009a8:	7dfb      	ldrb	r3, [r7, #23]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d101      	bne.n	80009b2 <_write+0x46>
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	e000      	b.n	80009b4 <_write+0x48>
 80009b2:	2300      	movs	r3, #0
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3718      	adds	r7, #24
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20000150 	.word	0x20000150

080009c0 <setGreenLed>:
 */

#include "remi.h"

// On board green LED On
void setGreenLed() {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 80009c4:	2201      	movs	r2, #1
 80009c6:	2120      	movs	r1, #32
 80009c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009cc:	f001 fd74 	bl	80024b8 <HAL_GPIO_WritePin>
}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <blinkGreenLed>:

// On board green LED blink
void blinkGreenLed(int nb, int delay) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < nb; i++) {
 80009de:	2300      	movs	r3, #0
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	e00b      	b.n	80009fc <blinkGreenLed+0x28>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80009e4:	2120      	movs	r1, #32
 80009e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ea:	f001 fd7d 	bl	80024e8 <HAL_GPIO_TogglePin>
		HAL_Delay(delay);
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	4618      	mov	r0, r3
 80009f2:	f000 faed 	bl	8000fd0 <HAL_Delay>
	for (int i = 0; i < nb; i++) {
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	3301      	adds	r3, #1
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fa      	ldr	r2, [r7, #12]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	dbef      	blt.n	80009e4 <blinkGreenLed+0x10>
	}
}
 8000a04:	bf00      	nop
 8000a06:	bf00      	nop
 8000a08:	3710      	adds	r7, #16
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
	...

08000a10 <setGreenLedViaButton>:

// set green led if blue push button is pressed
void setGreenLedViaButton() {
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
	// Gpio, push button
	// by default, PUSH_BUTTON is at 1
	//PinState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 1)
 8000a14:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a18:	480a      	ldr	r0, [pc, #40]	; (8000a44 <setGreenLedViaButton+0x34>)
 8000a1a:	f001 fd35 	bl	8002488 <HAL_GPIO_ReadPin>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d106      	bne.n	8000a32 <setGreenLedViaButton+0x22>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 8000a24:	2200      	movs	r2, #0
 8000a26:	2120      	movs	r1, #32
 8000a28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a2c:	f001 fd44 	bl	80024b8 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);

}
 8000a30:	e005      	b.n	8000a3e <setGreenLedViaButton+0x2e>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8000a32:	2201      	movs	r2, #1
 8000a34:	2120      	movs	r1, #32
 8000a36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a3a:	f001 fd3d 	bl	80024b8 <HAL_GPIO_WritePin>
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	48000800 	.word	0x48000800

08000a48 <sendWelcomeMsgRS232>:

// Welcome Message On RS232
void sendWelcomeMsgRS232(UART_HandleTypeDef *huart) {
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
	printf("Hello from remi\n\r");
 8000a50:	4808      	ldr	r0, [pc, #32]	; (8000a74 <sendWelcomeMsgRS232+0x2c>)
 8000a52:	f004 fb77 	bl	8005144 <iprintf>
	if (HAL_UART_Transmit(huart, "Nucleo L476RG connected\n\r", 25, 100)
 8000a56:	2364      	movs	r3, #100	; 0x64
 8000a58:	2219      	movs	r2, #25
 8000a5a:	4907      	ldr	r1, [pc, #28]	; (8000a78 <sendWelcomeMsgRS232+0x30>)
 8000a5c:	6878      	ldr	r0, [r7, #4]
 8000a5e:	f003 fe71 	bl	8004744 <HAL_UART_Transmit>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <sendWelcomeMsgRS232+0x24>
			!= HAL_OK)
		Error_Handler();
 8000a68:	f7ff ff7a 	bl	8000960 <Error_Handler>
}
 8000a6c:	bf00      	nop
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	0800601c 	.word	0x0800601c
 8000a78:	08006030 	.word	0x08006030

08000a7c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a82:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <HAL_MspInit+0x44>)
 8000a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a86:	4a0e      	ldr	r2, [pc, #56]	; (8000ac0 <HAL_MspInit+0x44>)
 8000a88:	f043 0301 	orr.w	r3, r3, #1
 8000a8c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a8e:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <HAL_MspInit+0x44>)
 8000a90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9a:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <HAL_MspInit+0x44>)
 8000a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a9e:	4a08      	ldr	r2, [pc, #32]	; (8000ac0 <HAL_MspInit+0x44>)
 8000aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa4:	6593      	str	r3, [r2, #88]	; 0x58
 8000aa6:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <HAL_MspInit+0x44>)
 8000aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aae:	603b      	str	r3, [r7, #0]
 8000ab0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	40021000 	.word	0x40021000

08000ac4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b0ac      	sub	sp, #176	; 0xb0
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	2288      	movs	r2, #136	; 0x88
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f004 fb25 	bl	8005134 <memset>
  if(hadc->Instance==ADC1)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a27      	ldr	r2, [pc, #156]	; (8000b8c <HAL_ADC_MspInit+0xc8>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d147      	bne.n	8000b84 <HAL_ADC_MspInit+0xc0>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000af4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000af8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000afa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000afe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000b02:	2302      	movs	r3, #2
 8000b04:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000b06:	2301      	movs	r3, #1
 8000b08:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000b0a:	2308      	movs	r3, #8
 8000b0c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000b0e:	2307      	movs	r3, #7
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000b12:	2302      	movs	r3, #2
 8000b14:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000b16:	2302      	movs	r3, #2
 8000b18:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000b1a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b1e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	4618      	mov	r0, r3
 8000b26:	f002 fb49 	bl	80031bc <HAL_RCCEx_PeriphCLKConfig>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000b30:	f7ff ff16 	bl	8000960 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000b34:	4b16      	ldr	r3, [pc, #88]	; (8000b90 <HAL_ADC_MspInit+0xcc>)
 8000b36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b38:	4a15      	ldr	r2, [pc, #84]	; (8000b90 <HAL_ADC_MspInit+0xcc>)
 8000b3a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b40:	4b13      	ldr	r3, [pc, #76]	; (8000b90 <HAL_ADC_MspInit+0xcc>)
 8000b42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b48:	613b      	str	r3, [r7, #16]
 8000b4a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4c:	4b10      	ldr	r3, [pc, #64]	; (8000b90 <HAL_ADC_MspInit+0xcc>)
 8000b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b50:	4a0f      	ldr	r2, [pc, #60]	; (8000b90 <HAL_ADC_MspInit+0xcc>)
 8000b52:	f043 0301 	orr.w	r3, r3, #1
 8000b56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b58:	4b0d      	ldr	r3, [pc, #52]	; (8000b90 <HAL_ADC_MspInit+0xcc>)
 8000b5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5c:	f003 0301 	and.w	r3, r3, #1
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b64:	2301      	movs	r3, #1
 8000b66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b6a:	230b      	movs	r3, #11
 8000b6c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b76:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b80:	f001 fad8 	bl	8002134 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b84:	bf00      	nop
 8000b86:	37b0      	adds	r7, #176	; 0xb0
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	50040000 	.word	0x50040000
 8000b90:	40021000 	.word	0x40021000

08000b94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a0a      	ldr	r2, [pc, #40]	; (8000bcc <HAL_TIM_Base_MspInit+0x38>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d10b      	bne.n	8000bbe <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000ba6:	4b0a      	ldr	r3, [pc, #40]	; (8000bd0 <HAL_TIM_Base_MspInit+0x3c>)
 8000ba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000baa:	4a09      	ldr	r2, [pc, #36]	; (8000bd0 <HAL_TIM_Base_MspInit+0x3c>)
 8000bac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bb0:	6613      	str	r3, [r2, #96]	; 0x60
 8000bb2:	4b07      	ldr	r3, [pc, #28]	; (8000bd0 <HAL_TIM_Base_MspInit+0x3c>)
 8000bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000bbe:	bf00      	nop
 8000bc0:	3714      	adds	r7, #20
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	40014800 	.word	0x40014800
 8000bd0:	40021000 	.word	0x40021000

08000bd4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b088      	sub	sp, #32
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	f107 030c 	add.w	r3, r7, #12
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM17)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a11      	ldr	r2, [pc, #68]	; (8000c38 <HAL_TIM_MspPostInit+0x64>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d11b      	bne.n	8000c2e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM17_MspPostInit 0 */

  /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf6:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <HAL_TIM_MspPostInit+0x68>)
 8000bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfa:	4a10      	ldr	r2, [pc, #64]	; (8000c3c <HAL_TIM_MspPostInit+0x68>)
 8000bfc:	f043 0302 	orr.w	r3, r3, #2
 8000c00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c02:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <HAL_TIM_MspPostInit+0x68>)
 8000c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c06:	f003 0302 	and.w	r3, r3, #2
 8000c0a:	60bb      	str	r3, [r7, #8]
 8000c0c:	68bb      	ldr	r3, [r7, #8]
    /**TIM17 GPIO Configuration
    PB7     ------> TIM17_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c0e:	2380      	movs	r3, #128	; 0x80
 8000c10:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c12:	2302      	movs	r3, #2
 8000c14:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM17;
 8000c1e:	230e      	movs	r3, #14
 8000c20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c22:	f107 030c 	add.w	r3, r7, #12
 8000c26:	4619      	mov	r1, r3
 8000c28:	4805      	ldr	r0, [pc, #20]	; (8000c40 <HAL_TIM_MspPostInit+0x6c>)
 8000c2a:	f001 fa83 	bl	8002134 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8000c2e:	bf00      	nop
 8000c30:	3720      	adds	r7, #32
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40014800 	.word	0x40014800
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	48000400 	.word	0x48000400

08000c44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b0ac      	sub	sp, #176	; 0xb0
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	2288      	movs	r2, #136	; 0x88
 8000c62:	2100      	movs	r1, #0
 8000c64:	4618      	mov	r0, r3
 8000c66:	f004 fa65 	bl	8005134 <memset>
  if(huart->Instance==USART2)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a21      	ldr	r2, [pc, #132]	; (8000cf4 <HAL_UART_MspInit+0xb0>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d13b      	bne.n	8000cec <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c74:	2302      	movs	r3, #2
 8000c76:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	4618      	mov	r0, r3
 8000c82:	f002 fa9b 	bl	80031bc <HAL_RCCEx_PeriphCLKConfig>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c8c:	f7ff fe68 	bl	8000960 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c90:	4b19      	ldr	r3, [pc, #100]	; (8000cf8 <HAL_UART_MspInit+0xb4>)
 8000c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c94:	4a18      	ldr	r2, [pc, #96]	; (8000cf8 <HAL_UART_MspInit+0xb4>)
 8000c96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c9a:	6593      	str	r3, [r2, #88]	; 0x58
 8000c9c:	4b16      	ldr	r3, [pc, #88]	; (8000cf8 <HAL_UART_MspInit+0xb4>)
 8000c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ca4:	613b      	str	r3, [r7, #16]
 8000ca6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca8:	4b13      	ldr	r3, [pc, #76]	; (8000cf8 <HAL_UART_MspInit+0xb4>)
 8000caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cac:	4a12      	ldr	r2, [pc, #72]	; (8000cf8 <HAL_UART_MspInit+0xb4>)
 8000cae:	f043 0301 	orr.w	r3, r3, #1
 8000cb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cb4:	4b10      	ldr	r3, [pc, #64]	; (8000cf8 <HAL_UART_MspInit+0xb4>)
 8000cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb8:	f003 0301 	and.w	r3, r3, #1
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cc0:	230c      	movs	r3, #12
 8000cc2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cd8:	2307      	movs	r3, #7
 8000cda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cde:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce8:	f001 fa24 	bl	8002134 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cec:	bf00      	nop
 8000cee:	37b0      	adds	r7, #176	; 0xb0
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40004400 	.word	0x40004400
 8000cf8:	40021000 	.word	0x40021000

08000cfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d00:	e7fe      	b.n	8000d00 <NMI_Handler+0x4>

08000d02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d06:	e7fe      	b.n	8000d06 <HardFault_Handler+0x4>

08000d08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d0c:	e7fe      	b.n	8000d0c <MemManage_Handler+0x4>

08000d0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d12:	e7fe      	b.n	8000d12 <BusFault_Handler+0x4>

08000d14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <UsageFault_Handler+0x4>

08000d1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d48:	f000 f922 	bl	8000f90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]
 8000d60:	e00a      	b.n	8000d78 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d62:	f3af 8000 	nop.w
 8000d66:	4601      	mov	r1, r0
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	1c5a      	adds	r2, r3, #1
 8000d6c:	60ba      	str	r2, [r7, #8]
 8000d6e:	b2ca      	uxtb	r2, r1
 8000d70:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	3301      	adds	r3, #1
 8000d76:	617b      	str	r3, [r7, #20]
 8000d78:	697a      	ldr	r2, [r7, #20]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	dbf0      	blt.n	8000d62 <_read+0x12>
	}

return len;
 8000d80:	687b      	ldr	r3, [r7, #4]
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3718      	adds	r7, #24
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <_close>:
	}
	return len;
}

int _close(int file)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	b083      	sub	sp, #12
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
	return -1;
 8000d92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr

08000da2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000da2:	b480      	push	{r7}
 8000da4:	b083      	sub	sp, #12
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
 8000daa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000db2:	605a      	str	r2, [r3, #4]
	return 0;
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <_isatty>:

int _isatty(int file)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	b083      	sub	sp, #12
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
	return 1;
 8000dca:	2301      	movs	r3, #1
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
	return 0;
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3714      	adds	r7, #20
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
	...

08000df4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dfc:	4a14      	ldr	r2, [pc, #80]	; (8000e50 <_sbrk+0x5c>)
 8000dfe:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <_sbrk+0x60>)
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e08:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <_sbrk+0x64>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d102      	bne.n	8000e16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e10:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <_sbrk+0x64>)
 8000e12:	4a12      	ldr	r2, [pc, #72]	; (8000e5c <_sbrk+0x68>)
 8000e14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e16:	4b10      	ldr	r3, [pc, #64]	; (8000e58 <_sbrk+0x64>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d207      	bcs.n	8000e34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e24:	f004 f95c 	bl	80050e0 <__errno>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	220c      	movs	r2, #12
 8000e2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e32:	e009      	b.n	8000e48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e34:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <_sbrk+0x64>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e3a:	4b07      	ldr	r3, [pc, #28]	; (8000e58 <_sbrk+0x64>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4413      	add	r3, r2
 8000e42:	4a05      	ldr	r2, [pc, #20]	; (8000e58 <_sbrk+0x64>)
 8000e44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e46:	68fb      	ldr	r3, [r7, #12]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3718      	adds	r7, #24
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20018000 	.word	0x20018000
 8000e54:	00000400 	.word	0x00000400
 8000e58:	2000008c 	.word	0x2000008c
 8000e5c:	200001e8 	.word	0x200001e8

08000e60 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e64:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <SystemInit+0x20>)
 8000e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e6a:	4a05      	ldr	r2, [pc, #20]	; (8000e80 <SystemInit+0x20>)
 8000e6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ebc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e88:	f7ff ffea 	bl	8000e60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e8c:	480c      	ldr	r0, [pc, #48]	; (8000ec0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e8e:	490d      	ldr	r1, [pc, #52]	; (8000ec4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e90:	4a0d      	ldr	r2, [pc, #52]	; (8000ec8 <LoopForever+0xe>)
  movs r3, #0
 8000e92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e94:	e002      	b.n	8000e9c <LoopCopyDataInit>

08000e96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e9a:	3304      	adds	r3, #4

08000e9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea0:	d3f9      	bcc.n	8000e96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ea2:	4a0a      	ldr	r2, [pc, #40]	; (8000ecc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ea4:	4c0a      	ldr	r4, [pc, #40]	; (8000ed0 <LoopForever+0x16>)
  movs r3, #0
 8000ea6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea8:	e001      	b.n	8000eae <LoopFillZerobss>

08000eaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eac:	3204      	adds	r2, #4

08000eae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb0:	d3fb      	bcc.n	8000eaa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eb2:	f004 f91b 	bl	80050ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000eb6:	f7ff fb57 	bl	8000568 <main>

08000eba <LoopForever>:

LoopForever:
    b LoopForever
 8000eba:	e7fe      	b.n	8000eba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ebc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ec0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ec8:	0800613c 	.word	0x0800613c
  ldr r2, =_sbss
 8000ecc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ed0:	200001e8 	.word	0x200001e8

08000ed4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ed4:	e7fe      	b.n	8000ed4 <ADC1_2_IRQHandler>
	...

08000ed8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee2:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <HAL_Init+0x3c>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a0b      	ldr	r2, [pc, #44]	; (8000f14 <HAL_Init+0x3c>)
 8000ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eec:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eee:	2003      	movs	r0, #3
 8000ef0:	f001 f8ec 	bl	80020cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ef4:	2000      	movs	r0, #0
 8000ef6:	f000 f80f 	bl	8000f18 <HAL_InitTick>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d002      	beq.n	8000f06 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000f00:	2301      	movs	r3, #1
 8000f02:	71fb      	strb	r3, [r7, #7]
 8000f04:	e001      	b.n	8000f0a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f06:	f7ff fdb9 	bl	8000a7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40022000 	.word	0x40022000

08000f18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f20:	2300      	movs	r3, #0
 8000f22:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f24:	4b17      	ldr	r3, [pc, #92]	; (8000f84 <HAL_InitTick+0x6c>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d023      	beq.n	8000f74 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f2c:	4b16      	ldr	r3, [pc, #88]	; (8000f88 <HAL_InitTick+0x70>)
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	4b14      	ldr	r3, [pc, #80]	; (8000f84 <HAL_InitTick+0x6c>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	4619      	mov	r1, r3
 8000f36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f42:	4618      	mov	r0, r3
 8000f44:	f001 f8e9 	bl	800211a <HAL_SYSTICK_Config>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d10f      	bne.n	8000f6e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2b0f      	cmp	r3, #15
 8000f52:	d809      	bhi.n	8000f68 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f54:	2200      	movs	r2, #0
 8000f56:	6879      	ldr	r1, [r7, #4]
 8000f58:	f04f 30ff 	mov.w	r0, #4294967295
 8000f5c:	f001 f8c1 	bl	80020e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f60:	4a0a      	ldr	r2, [pc, #40]	; (8000f8c <HAL_InitTick+0x74>)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6013      	str	r3, [r2, #0]
 8000f66:	e007      	b.n	8000f78 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	73fb      	strb	r3, [r7, #15]
 8000f6c:	e004      	b.n	8000f78 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	73fb      	strb	r3, [r7, #15]
 8000f72:	e001      	b.n	8000f78 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f74:	2301      	movs	r3, #1
 8000f76:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3710      	adds	r7, #16
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000008 	.word	0x20000008
 8000f88:	20000000 	.word	0x20000000
 8000f8c:	20000004 	.word	0x20000004

08000f90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <HAL_IncTick+0x20>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <HAL_IncTick+0x24>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	4a04      	ldr	r2, [pc, #16]	; (8000fb4 <HAL_IncTick+0x24>)
 8000fa2:	6013      	str	r3, [r2, #0]
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	20000008 	.word	0x20000008
 8000fb4:	200001d4 	.word	0x200001d4

08000fb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  return uwTick;
 8000fbc:	4b03      	ldr	r3, [pc, #12]	; (8000fcc <HAL_GetTick+0x14>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	200001d4 	.word	0x200001d4

08000fd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fd8:	f7ff ffee 	bl	8000fb8 <HAL_GetTick>
 8000fdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fe8:	d005      	beq.n	8000ff6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000fea:	4b0a      	ldr	r3, [pc, #40]	; (8001014 <HAL_Delay+0x44>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ff6:	bf00      	nop
 8000ff8:	f7ff ffde 	bl	8000fb8 <HAL_GetTick>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	68fa      	ldr	r2, [r7, #12]
 8001004:	429a      	cmp	r2, r3
 8001006:	d8f7      	bhi.n	8000ff8 <HAL_Delay+0x28>
  {
  }
}
 8001008:	bf00      	nop
 800100a:	bf00      	nop
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000008 	.word	0x20000008

08001018 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	431a      	orrs	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	609a      	str	r2, [r3, #8]
}
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800103e:	b480      	push	{r7}
 8001040:	b083      	sub	sp, #12
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
 8001046:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	431a      	orrs	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	609a      	str	r2, [r3, #8]
}
 8001058:	bf00      	nop
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001074:	4618      	mov	r0, r3
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001080:	b480      	push	{r7}
 8001082:	b087      	sub	sp, #28
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
 800108c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	3360      	adds	r3, #96	; 0x60
 8001092:	461a      	mov	r2, r3
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	4413      	add	r3, r2
 800109a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <LL_ADC_SetOffset+0x44>)
 80010a2:	4013      	ands	r3, r2
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80010aa:	683a      	ldr	r2, [r7, #0]
 80010ac:	430a      	orrs	r2, r1
 80010ae:	4313      	orrs	r3, r2
 80010b0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80010b8:	bf00      	nop
 80010ba:	371c      	adds	r7, #28
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	03fff000 	.word	0x03fff000

080010c8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	3360      	adds	r3, #96	; 0x60
 80010d6:	461a      	mov	r2, r3
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	4413      	add	r3, r2
 80010de:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3714      	adds	r7, #20
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b087      	sub	sp, #28
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	3360      	adds	r3, #96	; 0x60
 8001104:	461a      	mov	r2, r3
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4413      	add	r3, r2
 800110c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	431a      	orrs	r2, r3
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800111e:	bf00      	nop
 8001120:	371c      	adds	r7, #28
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr

0800112a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800112a:	b480      	push	{r7}
 800112c:	b087      	sub	sp, #28
 800112e:	af00      	add	r7, sp, #0
 8001130:	60f8      	str	r0, [r7, #12]
 8001132:	60b9      	str	r1, [r7, #8]
 8001134:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	3330      	adds	r3, #48	; 0x30
 800113a:	461a      	mov	r2, r3
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	0a1b      	lsrs	r3, r3, #8
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	f003 030c 	and.w	r3, r3, #12
 8001146:	4413      	add	r3, r2
 8001148:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	f003 031f 	and.w	r3, r3, #31
 8001154:	211f      	movs	r1, #31
 8001156:	fa01 f303 	lsl.w	r3, r1, r3
 800115a:	43db      	mvns	r3, r3
 800115c:	401a      	ands	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	0e9b      	lsrs	r3, r3, #26
 8001162:	f003 011f 	and.w	r1, r3, #31
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	f003 031f 	and.w	r3, r3, #31
 800116c:	fa01 f303 	lsl.w	r3, r1, r3
 8001170:	431a      	orrs	r2, r3
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001176:	bf00      	nop
 8001178:	371c      	adds	r7, #28
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr

08001182 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001182:	b480      	push	{r7}
 8001184:	b087      	sub	sp, #28
 8001186:	af00      	add	r7, sp, #0
 8001188:	60f8      	str	r0, [r7, #12]
 800118a:	60b9      	str	r1, [r7, #8]
 800118c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	3314      	adds	r3, #20
 8001192:	461a      	mov	r2, r3
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	0e5b      	lsrs	r3, r3, #25
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	f003 0304 	and.w	r3, r3, #4
 800119e:	4413      	add	r3, r2
 80011a0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	0d1b      	lsrs	r3, r3, #20
 80011aa:	f003 031f 	and.w	r3, r3, #31
 80011ae:	2107      	movs	r1, #7
 80011b0:	fa01 f303 	lsl.w	r3, r1, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	401a      	ands	r2, r3
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	0d1b      	lsrs	r3, r3, #20
 80011bc:	f003 031f 	and.w	r3, r3, #31
 80011c0:	6879      	ldr	r1, [r7, #4]
 80011c2:	fa01 f303 	lsl.w	r3, r1, r3
 80011c6:	431a      	orrs	r2, r3
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80011cc:	bf00      	nop
 80011ce:	371c      	adds	r7, #28
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011f0:	43db      	mvns	r3, r3
 80011f2:	401a      	ands	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f003 0318 	and.w	r3, r3, #24
 80011fa:	4908      	ldr	r1, [pc, #32]	; (800121c <LL_ADC_SetChannelSingleDiff+0x44>)
 80011fc:	40d9      	lsrs	r1, r3
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	400b      	ands	r3, r1
 8001202:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001206:	431a      	orrs	r2, r3
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800120e:	bf00      	nop
 8001210:	3714      	adds	r7, #20
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	0007ffff 	.word	0x0007ffff

08001220 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001230:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	6093      	str	r3, [r2, #8]
}
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001254:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001258:	d101      	bne.n	800125e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800125a:	2301      	movs	r3, #1
 800125c:	e000      	b.n	8001260 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800125e:	2300      	movs	r3, #0
}
 8001260:	4618      	mov	r0, r3
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800127c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001280:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80012a8:	d101      	bne.n	80012ae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80012aa:	2301      	movs	r3, #1
 80012ac:	e000      	b.n	80012b0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80012ae:	2300      	movs	r3, #0
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	f003 0301 	and.w	r3, r3, #1
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d101      	bne.n	80012d4 <LL_ADC_IsEnabled+0x18>
 80012d0:	2301      	movs	r3, #1
 80012d2:	e000      	b.n	80012d6 <LL_ADC_IsEnabled+0x1a>
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr

080012e2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80012e2:	b480      	push	{r7}
 80012e4:	b083      	sub	sp, #12
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	f003 0304 	and.w	r3, r3, #4
 80012f2:	2b04      	cmp	r3, #4
 80012f4:	d101      	bne.n	80012fa <LL_ADC_REG_IsConversionOngoing+0x18>
 80012f6:	2301      	movs	r3, #1
 80012f8:	e000      	b.n	80012fc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80012fa:	2300      	movs	r3, #0
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	f003 0308 	and.w	r3, r3, #8
 8001318:	2b08      	cmp	r3, #8
 800131a:	d101      	bne.n	8001320 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800131c:	2301      	movs	r3, #1
 800131e:	e000      	b.n	8001322 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
	...

08001330 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001330:	b590      	push	{r4, r7, lr}
 8001332:	b089      	sub	sp, #36	; 0x24
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001338:	2300      	movs	r3, #0
 800133a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800133c:	2300      	movs	r3, #0
 800133e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d101      	bne.n	800134a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e136      	b.n	80015b8 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	691b      	ldr	r3, [r3, #16]
 800134e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001354:	2b00      	cmp	r3, #0
 8001356:	d109      	bne.n	800136c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff fbb3 	bl	8000ac4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff ff67 	bl	8001244 <LL_ADC_IsDeepPowerDownEnabled>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d004      	beq.n	8001386 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff ff4d 	bl	8001220 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff ff82 	bl	8001294 <LL_ADC_IsInternalRegulatorEnabled>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d115      	bne.n	80013c2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff ff66 	bl	800126c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80013a0:	4b87      	ldr	r3, [pc, #540]	; (80015c0 <HAL_ADC_Init+0x290>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	099b      	lsrs	r3, r3, #6
 80013a6:	4a87      	ldr	r2, [pc, #540]	; (80015c4 <HAL_ADC_Init+0x294>)
 80013a8:	fba2 2303 	umull	r2, r3, r2, r3
 80013ac:	099b      	lsrs	r3, r3, #6
 80013ae:	3301      	adds	r3, #1
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80013b4:	e002      	b.n	80013bc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	3b01      	subs	r3, #1
 80013ba:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d1f9      	bne.n	80013b6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff ff64 	bl	8001294 <LL_ADC_IsInternalRegulatorEnabled>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d10d      	bne.n	80013ee <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013d6:	f043 0210 	orr.w	r2, r3, #16
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e2:	f043 0201 	orr.w	r2, r3, #1
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff ff75 	bl	80012e2 <LL_ADC_REG_IsConversionOngoing>
 80013f8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013fe:	f003 0310 	and.w	r3, r3, #16
 8001402:	2b00      	cmp	r3, #0
 8001404:	f040 80cf 	bne.w	80015a6 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	2b00      	cmp	r3, #0
 800140c:	f040 80cb 	bne.w	80015a6 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001414:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001418:	f043 0202 	orr.w	r2, r3, #2
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff ff49 	bl	80012bc <LL_ADC_IsEnabled>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d115      	bne.n	800145c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001430:	4865      	ldr	r0, [pc, #404]	; (80015c8 <HAL_ADC_Init+0x298>)
 8001432:	f7ff ff43 	bl	80012bc <LL_ADC_IsEnabled>
 8001436:	4604      	mov	r4, r0
 8001438:	4864      	ldr	r0, [pc, #400]	; (80015cc <HAL_ADC_Init+0x29c>)
 800143a:	f7ff ff3f 	bl	80012bc <LL_ADC_IsEnabled>
 800143e:	4603      	mov	r3, r0
 8001440:	431c      	orrs	r4, r3
 8001442:	4863      	ldr	r0, [pc, #396]	; (80015d0 <HAL_ADC_Init+0x2a0>)
 8001444:	f7ff ff3a 	bl	80012bc <LL_ADC_IsEnabled>
 8001448:	4603      	mov	r3, r0
 800144a:	4323      	orrs	r3, r4
 800144c:	2b00      	cmp	r3, #0
 800144e:	d105      	bne.n	800145c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	4619      	mov	r1, r3
 8001456:	485f      	ldr	r0, [pc, #380]	; (80015d4 <HAL_ADC_Init+0x2a4>)
 8001458:	f7ff fdde 	bl	8001018 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	7e5b      	ldrb	r3, [r3, #25]
 8001460:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001466:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800146c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001472:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f893 3020 	ldrb.w	r3, [r3, #32]
 800147a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800147c:	4313      	orrs	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d106      	bne.n	8001498 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148e:	3b01      	subs	r3, #1
 8001490:	045b      	lsls	r3, r3, #17
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	4313      	orrs	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800149c:	2b00      	cmp	r3, #0
 800149e:	d009      	beq.n	80014b4 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ac:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	68da      	ldr	r2, [r3, #12]
 80014ba:	4b47      	ldr	r3, [pc, #284]	; (80015d8 <HAL_ADC_Init+0x2a8>)
 80014bc:	4013      	ands	r3, r2
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	6812      	ldr	r2, [r2, #0]
 80014c2:	69b9      	ldr	r1, [r7, #24]
 80014c4:	430b      	orrs	r3, r1
 80014c6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ff08 	bl	80012e2 <LL_ADC_REG_IsConversionOngoing>
 80014d2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff ff15 	bl	8001308 <LL_ADC_INJ_IsConversionOngoing>
 80014de:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d13d      	bne.n	8001562 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d13a      	bne.n	8001562 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80014f0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014f8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80014fa:	4313      	orrs	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001508:	f023 0302 	bic.w	r3, r3, #2
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	6812      	ldr	r2, [r2, #0]
 8001510:	69b9      	ldr	r1, [r7, #24]
 8001512:	430b      	orrs	r3, r1
 8001514:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800151c:	2b01      	cmp	r3, #1
 800151e:	d118      	bne.n	8001552 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	691b      	ldr	r3, [r3, #16]
 8001526:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800152a:	f023 0304 	bic.w	r3, r3, #4
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001536:	4311      	orrs	r1, r2
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800153c:	4311      	orrs	r1, r2
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001542:	430a      	orrs	r2, r1
 8001544:	431a      	orrs	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f042 0201 	orr.w	r2, r2, #1
 800154e:	611a      	str	r2, [r3, #16]
 8001550:	e007      	b.n	8001562 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	691a      	ldr	r2, [r3, #16]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f022 0201 	bic.w	r2, r2, #1
 8001560:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	691b      	ldr	r3, [r3, #16]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d10c      	bne.n	8001584 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001570:	f023 010f 	bic.w	r1, r3, #15
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	69db      	ldr	r3, [r3, #28]
 8001578:	1e5a      	subs	r2, r3, #1
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	430a      	orrs	r2, r1
 8001580:	631a      	str	r2, [r3, #48]	; 0x30
 8001582:	e007      	b.n	8001594 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f022 020f 	bic.w	r2, r2, #15
 8001592:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001598:	f023 0303 	bic.w	r3, r3, #3
 800159c:	f043 0201 	orr.w	r2, r3, #1
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	655a      	str	r2, [r3, #84]	; 0x54
 80015a4:	e007      	b.n	80015b6 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015aa:	f043 0210 	orr.w	r2, r3, #16
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80015b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3724      	adds	r7, #36	; 0x24
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd90      	pop	{r4, r7, pc}
 80015c0:	20000000 	.word	0x20000000
 80015c4:	053e2d63 	.word	0x053e2d63
 80015c8:	50040000 	.word	0x50040000
 80015cc:	50040100 	.word	0x50040100
 80015d0:	50040200 	.word	0x50040200
 80015d4:	50040300 	.word	0x50040300
 80015d8:	fff0c007 	.word	0xfff0c007

080015dc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b0b6      	sub	sp, #216	; 0xd8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015e6:	2300      	movs	r3, #0
 80015e8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d101      	bne.n	80015fe <HAL_ADC_ConfigChannel+0x22>
 80015fa:	2302      	movs	r3, #2
 80015fc:	e3c7      	b.n	8001d8e <HAL_ADC_ConfigChannel+0x7b2>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2201      	movs	r2, #1
 8001602:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff fe69 	bl	80012e2 <LL_ADC_REG_IsConversionOngoing>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	f040 83a8 	bne.w	8001d68 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	2b05      	cmp	r3, #5
 800161e:	d824      	bhi.n	800166a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	3b02      	subs	r3, #2
 8001626:	2b03      	cmp	r3, #3
 8001628:	d81b      	bhi.n	8001662 <HAL_ADC_ConfigChannel+0x86>
 800162a:	a201      	add	r2, pc, #4	; (adr r2, 8001630 <HAL_ADC_ConfigChannel+0x54>)
 800162c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001630:	08001641 	.word	0x08001641
 8001634:	08001649 	.word	0x08001649
 8001638:	08001651 	.word	0x08001651
 800163c:	08001659 	.word	0x08001659
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	220c      	movs	r2, #12
 8001644:	605a      	str	r2, [r3, #4]
          break;
 8001646:	e011      	b.n	800166c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	2212      	movs	r2, #18
 800164c:	605a      	str	r2, [r3, #4]
          break;
 800164e:	e00d      	b.n	800166c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	2218      	movs	r2, #24
 8001654:	605a      	str	r2, [r3, #4]
          break;
 8001656:	e009      	b.n	800166c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800165e:	605a      	str	r2, [r3, #4]
          break;
 8001660:	e004      	b.n	800166c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	2206      	movs	r2, #6
 8001666:	605a      	str	r2, [r3, #4]
          break;
 8001668:	e000      	b.n	800166c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800166a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6818      	ldr	r0, [r3, #0]
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	6859      	ldr	r1, [r3, #4]
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	461a      	mov	r2, r3
 800167a:	f7ff fd56 	bl	800112a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff fe2d 	bl	80012e2 <LL_ADC_REG_IsConversionOngoing>
 8001688:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fe39 	bl	8001308 <LL_ADC_INJ_IsConversionOngoing>
 8001696:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800169a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	f040 81a6 	bne.w	80019f0 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80016a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	f040 81a1 	bne.w	80019f0 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6818      	ldr	r0, [r3, #0]
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	6819      	ldr	r1, [r3, #0]
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	461a      	mov	r2, r3
 80016bc:	f7ff fd61 	bl	8001182 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	695a      	ldr	r2, [r3, #20]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	08db      	lsrs	r3, r3, #3
 80016cc:	f003 0303 	and.w	r3, r3, #3
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	2b04      	cmp	r3, #4
 80016e0:	d00a      	beq.n	80016f8 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6818      	ldr	r0, [r3, #0]
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	6919      	ldr	r1, [r3, #16]
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80016f2:	f7ff fcc5 	bl	8001080 <LL_ADC_SetOffset>
 80016f6:	e17b      	b.n	80019f0 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2100      	movs	r1, #0
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff fce2 	bl	80010c8 <LL_ADC_GetOffsetChannel>
 8001704:	4603      	mov	r3, r0
 8001706:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800170a:	2b00      	cmp	r3, #0
 800170c:	d10a      	bne.n	8001724 <HAL_ADC_ConfigChannel+0x148>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2100      	movs	r1, #0
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff fcd7 	bl	80010c8 <LL_ADC_GetOffsetChannel>
 800171a:	4603      	mov	r3, r0
 800171c:	0e9b      	lsrs	r3, r3, #26
 800171e:	f003 021f 	and.w	r2, r3, #31
 8001722:	e01e      	b.n	8001762 <HAL_ADC_ConfigChannel+0x186>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2100      	movs	r1, #0
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff fccc 	bl	80010c8 <LL_ADC_GetOffsetChannel>
 8001730:	4603      	mov	r3, r0
 8001732:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001736:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800173a:	fa93 f3a3 	rbit	r3, r3
 800173e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001742:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001746:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800174a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d101      	bne.n	8001756 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001752:	2320      	movs	r3, #32
 8001754:	e004      	b.n	8001760 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001756:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800175a:	fab3 f383 	clz	r3, r3
 800175e:	b2db      	uxtb	r3, r3
 8001760:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800176a:	2b00      	cmp	r3, #0
 800176c:	d105      	bne.n	800177a <HAL_ADC_ConfigChannel+0x19e>
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	0e9b      	lsrs	r3, r3, #26
 8001774:	f003 031f 	and.w	r3, r3, #31
 8001778:	e018      	b.n	80017ac <HAL_ADC_ConfigChannel+0x1d0>
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001782:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001786:	fa93 f3a3 	rbit	r3, r3
 800178a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800178e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001792:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001796:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800179a:	2b00      	cmp	r3, #0
 800179c:	d101      	bne.n	80017a2 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800179e:	2320      	movs	r3, #32
 80017a0:	e004      	b.n	80017ac <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80017a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80017a6:	fab3 f383 	clz	r3, r3
 80017aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d106      	bne.n	80017be <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2200      	movs	r2, #0
 80017b6:	2100      	movs	r1, #0
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff fc9b 	bl	80010f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2101      	movs	r1, #1
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff fc7f 	bl	80010c8 <LL_ADC_GetOffsetChannel>
 80017ca:	4603      	mov	r3, r0
 80017cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d10a      	bne.n	80017ea <HAL_ADC_ConfigChannel+0x20e>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2101      	movs	r1, #1
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff fc74 	bl	80010c8 <LL_ADC_GetOffsetChannel>
 80017e0:	4603      	mov	r3, r0
 80017e2:	0e9b      	lsrs	r3, r3, #26
 80017e4:	f003 021f 	and.w	r2, r3, #31
 80017e8:	e01e      	b.n	8001828 <HAL_ADC_ConfigChannel+0x24c>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2101      	movs	r1, #1
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff fc69 	bl	80010c8 <LL_ADC_GetOffsetChannel>
 80017f6:	4603      	mov	r3, r0
 80017f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001800:	fa93 f3a3 	rbit	r3, r3
 8001804:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001808:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800180c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001810:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001814:	2b00      	cmp	r3, #0
 8001816:	d101      	bne.n	800181c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001818:	2320      	movs	r3, #32
 800181a:	e004      	b.n	8001826 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 800181c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001820:	fab3 f383 	clz	r3, r3
 8001824:	b2db      	uxtb	r3, r3
 8001826:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001830:	2b00      	cmp	r3, #0
 8001832:	d105      	bne.n	8001840 <HAL_ADC_ConfigChannel+0x264>
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	0e9b      	lsrs	r3, r3, #26
 800183a:	f003 031f 	and.w	r3, r3, #31
 800183e:	e018      	b.n	8001872 <HAL_ADC_ConfigChannel+0x296>
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001848:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800184c:	fa93 f3a3 	rbit	r3, r3
 8001850:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001854:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001858:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800185c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001860:	2b00      	cmp	r3, #0
 8001862:	d101      	bne.n	8001868 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001864:	2320      	movs	r3, #32
 8001866:	e004      	b.n	8001872 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001868:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800186c:	fab3 f383 	clz	r3, r3
 8001870:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001872:	429a      	cmp	r2, r3
 8001874:	d106      	bne.n	8001884 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2200      	movs	r2, #0
 800187c:	2101      	movs	r1, #1
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff fc38 	bl	80010f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2102      	movs	r1, #2
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff fc1c 	bl	80010c8 <LL_ADC_GetOffsetChannel>
 8001890:	4603      	mov	r3, r0
 8001892:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001896:	2b00      	cmp	r3, #0
 8001898:	d10a      	bne.n	80018b0 <HAL_ADC_ConfigChannel+0x2d4>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2102      	movs	r1, #2
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff fc11 	bl	80010c8 <LL_ADC_GetOffsetChannel>
 80018a6:	4603      	mov	r3, r0
 80018a8:	0e9b      	lsrs	r3, r3, #26
 80018aa:	f003 021f 	and.w	r2, r3, #31
 80018ae:	e01e      	b.n	80018ee <HAL_ADC_ConfigChannel+0x312>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2102      	movs	r1, #2
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff fc06 	bl	80010c8 <LL_ADC_GetOffsetChannel>
 80018bc:	4603      	mov	r3, r0
 80018be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80018c6:	fa93 f3a3 	rbit	r3, r3
 80018ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80018ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80018d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80018d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d101      	bne.n	80018e2 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80018de:	2320      	movs	r3, #32
 80018e0:	e004      	b.n	80018ec <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80018e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80018e6:	fab3 f383 	clz	r3, r3
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d105      	bne.n	8001906 <HAL_ADC_ConfigChannel+0x32a>
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	0e9b      	lsrs	r3, r3, #26
 8001900:	f003 031f 	and.w	r3, r3, #31
 8001904:	e016      	b.n	8001934 <HAL_ADC_ConfigChannel+0x358>
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001912:	fa93 f3a3 	rbit	r3, r3
 8001916:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001918:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800191a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800191e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001922:	2b00      	cmp	r3, #0
 8001924:	d101      	bne.n	800192a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001926:	2320      	movs	r3, #32
 8001928:	e004      	b.n	8001934 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800192a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800192e:	fab3 f383 	clz	r3, r3
 8001932:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001934:	429a      	cmp	r2, r3
 8001936:	d106      	bne.n	8001946 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2200      	movs	r2, #0
 800193e:	2102      	movs	r1, #2
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff fbd7 	bl	80010f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2103      	movs	r1, #3
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff fbbb 	bl	80010c8 <LL_ADC_GetOffsetChannel>
 8001952:	4603      	mov	r3, r0
 8001954:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001958:	2b00      	cmp	r3, #0
 800195a:	d10a      	bne.n	8001972 <HAL_ADC_ConfigChannel+0x396>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2103      	movs	r1, #3
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff fbb0 	bl	80010c8 <LL_ADC_GetOffsetChannel>
 8001968:	4603      	mov	r3, r0
 800196a:	0e9b      	lsrs	r3, r3, #26
 800196c:	f003 021f 	and.w	r2, r3, #31
 8001970:	e017      	b.n	80019a2 <HAL_ADC_ConfigChannel+0x3c6>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2103      	movs	r1, #3
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff fba5 	bl	80010c8 <LL_ADC_GetOffsetChannel>
 800197e:	4603      	mov	r3, r0
 8001980:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001982:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001984:	fa93 f3a3 	rbit	r3, r3
 8001988:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800198a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800198c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800198e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001990:	2b00      	cmp	r3, #0
 8001992:	d101      	bne.n	8001998 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001994:	2320      	movs	r3, #32
 8001996:	e003      	b.n	80019a0 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001998:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800199a:	fab3 f383 	clz	r3, r3
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d105      	bne.n	80019ba <HAL_ADC_ConfigChannel+0x3de>
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	0e9b      	lsrs	r3, r3, #26
 80019b4:	f003 031f 	and.w	r3, r3, #31
 80019b8:	e011      	b.n	80019de <HAL_ADC_ConfigChannel+0x402>
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80019c2:	fa93 f3a3 	rbit	r3, r3
 80019c6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80019c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80019ca:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80019cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d101      	bne.n	80019d6 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80019d2:	2320      	movs	r3, #32
 80019d4:	e003      	b.n	80019de <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80019d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80019d8:	fab3 f383 	clz	r3, r3
 80019dc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80019de:	429a      	cmp	r2, r3
 80019e0:	d106      	bne.n	80019f0 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2200      	movs	r2, #0
 80019e8:	2103      	movs	r1, #3
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff fb82 	bl	80010f4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff fc61 	bl	80012bc <LL_ADC_IsEnabled>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	f040 813f 	bne.w	8001c80 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6818      	ldr	r0, [r3, #0]
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	6819      	ldr	r1, [r3, #0]
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	461a      	mov	r2, r3
 8001a10:	f7ff fbe2 	bl	80011d8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	4a8e      	ldr	r2, [pc, #568]	; (8001c54 <HAL_ADC_ConfigChannel+0x678>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	f040 8130 	bne.w	8001c80 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d10b      	bne.n	8001a48 <HAL_ADC_ConfigChannel+0x46c>
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	0e9b      	lsrs	r3, r3, #26
 8001a36:	3301      	adds	r3, #1
 8001a38:	f003 031f 	and.w	r3, r3, #31
 8001a3c:	2b09      	cmp	r3, #9
 8001a3e:	bf94      	ite	ls
 8001a40:	2301      	movls	r3, #1
 8001a42:	2300      	movhi	r3, #0
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	e019      	b.n	8001a7c <HAL_ADC_ConfigChannel+0x4a0>
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a50:	fa93 f3a3 	rbit	r3, r3
 8001a54:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001a56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a58:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001a5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d101      	bne.n	8001a64 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001a60:	2320      	movs	r3, #32
 8001a62:	e003      	b.n	8001a6c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001a64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a66:	fab3 f383 	clz	r3, r3
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	f003 031f 	and.w	r3, r3, #31
 8001a72:	2b09      	cmp	r3, #9
 8001a74:	bf94      	ite	ls
 8001a76:	2301      	movls	r3, #1
 8001a78:	2300      	movhi	r3, #0
 8001a7a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d079      	beq.n	8001b74 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d107      	bne.n	8001a9c <HAL_ADC_ConfigChannel+0x4c0>
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	0e9b      	lsrs	r3, r3, #26
 8001a92:	3301      	adds	r3, #1
 8001a94:	069b      	lsls	r3, r3, #26
 8001a96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a9a:	e015      	b.n	8001ac8 <HAL_ADC_ConfigChannel+0x4ec>
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001aa4:	fa93 f3a3 	rbit	r3, r3
 8001aa8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001aaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001aac:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001aae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d101      	bne.n	8001ab8 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001ab4:	2320      	movs	r3, #32
 8001ab6:	e003      	b.n	8001ac0 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001ab8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aba:	fab3 f383 	clz	r3, r3
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	069b      	lsls	r3, r3, #26
 8001ac4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d109      	bne.n	8001ae8 <HAL_ADC_ConfigChannel+0x50c>
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	0e9b      	lsrs	r3, r3, #26
 8001ada:	3301      	adds	r3, #1
 8001adc:	f003 031f 	and.w	r3, r3, #31
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae6:	e017      	b.n	8001b18 <HAL_ADC_ConfigChannel+0x53c>
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001af0:	fa93 f3a3 	rbit	r3, r3
 8001af4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001af6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001af8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001afa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d101      	bne.n	8001b04 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001b00:	2320      	movs	r3, #32
 8001b02:	e003      	b.n	8001b0c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001b04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b06:	fab3 f383 	clz	r3, r3
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	f003 031f 	and.w	r3, r3, #31
 8001b12:	2101      	movs	r1, #1
 8001b14:	fa01 f303 	lsl.w	r3, r1, r3
 8001b18:	ea42 0103 	orr.w	r1, r2, r3
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d10a      	bne.n	8001b3e <HAL_ADC_ConfigChannel+0x562>
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	0e9b      	lsrs	r3, r3, #26
 8001b2e:	3301      	adds	r3, #1
 8001b30:	f003 021f 	and.w	r2, r3, #31
 8001b34:	4613      	mov	r3, r2
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	4413      	add	r3, r2
 8001b3a:	051b      	lsls	r3, r3, #20
 8001b3c:	e018      	b.n	8001b70 <HAL_ADC_ConfigChannel+0x594>
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b46:	fa93 f3a3 	rbit	r3, r3
 8001b4a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001b50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d101      	bne.n	8001b5a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001b56:	2320      	movs	r3, #32
 8001b58:	e003      	b.n	8001b62 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b5c:	fab3 f383 	clz	r3, r3
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	3301      	adds	r3, #1
 8001b64:	f003 021f 	and.w	r2, r3, #31
 8001b68:	4613      	mov	r3, r2
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	4413      	add	r3, r2
 8001b6e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b70:	430b      	orrs	r3, r1
 8001b72:	e080      	b.n	8001c76 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d107      	bne.n	8001b90 <HAL_ADC_ConfigChannel+0x5b4>
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	0e9b      	lsrs	r3, r3, #26
 8001b86:	3301      	adds	r3, #1
 8001b88:	069b      	lsls	r3, r3, #26
 8001b8a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b8e:	e015      	b.n	8001bbc <HAL_ADC_ConfigChannel+0x5e0>
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b98:	fa93 f3a3 	rbit	r3, r3
 8001b9c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ba0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d101      	bne.n	8001bac <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001ba8:	2320      	movs	r3, #32
 8001baa:	e003      	b.n	8001bb4 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bae:	fab3 f383 	clz	r3, r3
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	069b      	lsls	r3, r3, #26
 8001bb8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d109      	bne.n	8001bdc <HAL_ADC_ConfigChannel+0x600>
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	0e9b      	lsrs	r3, r3, #26
 8001bce:	3301      	adds	r3, #1
 8001bd0:	f003 031f 	and.w	r3, r3, #31
 8001bd4:	2101      	movs	r1, #1
 8001bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bda:	e017      	b.n	8001c0c <HAL_ADC_ConfigChannel+0x630>
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be2:	6a3b      	ldr	r3, [r7, #32]
 8001be4:	fa93 f3a3 	rbit	r3, r3
 8001be8:	61fb      	str	r3, [r7, #28]
  return result;
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d101      	bne.n	8001bf8 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001bf4:	2320      	movs	r3, #32
 8001bf6:	e003      	b.n	8001c00 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfa:	fab3 f383 	clz	r3, r3
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	3301      	adds	r3, #1
 8001c02:	f003 031f 	and.w	r3, r3, #31
 8001c06:	2101      	movs	r1, #1
 8001c08:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0c:	ea42 0103 	orr.w	r1, r2, r3
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d10d      	bne.n	8001c38 <HAL_ADC_ConfigChannel+0x65c>
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	0e9b      	lsrs	r3, r3, #26
 8001c22:	3301      	adds	r3, #1
 8001c24:	f003 021f 	and.w	r2, r3, #31
 8001c28:	4613      	mov	r3, r2
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	4413      	add	r3, r2
 8001c2e:	3b1e      	subs	r3, #30
 8001c30:	051b      	lsls	r3, r3, #20
 8001c32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c36:	e01d      	b.n	8001c74 <HAL_ADC_ConfigChannel+0x698>
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	fa93 f3a3 	rbit	r3, r3
 8001c44:	613b      	str	r3, [r7, #16]
  return result;
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d103      	bne.n	8001c58 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001c50:	2320      	movs	r3, #32
 8001c52:	e005      	b.n	8001c60 <HAL_ADC_ConfigChannel+0x684>
 8001c54:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	fab3 f383 	clz	r3, r3
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	3301      	adds	r3, #1
 8001c62:	f003 021f 	and.w	r2, r3, #31
 8001c66:	4613      	mov	r3, r2
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	4413      	add	r3, r2
 8001c6c:	3b1e      	subs	r3, #30
 8001c6e:	051b      	lsls	r3, r3, #20
 8001c70:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c74:	430b      	orrs	r3, r1
 8001c76:	683a      	ldr	r2, [r7, #0]
 8001c78:	6892      	ldr	r2, [r2, #8]
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	f7ff fa81 	bl	8001182 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	4b44      	ldr	r3, [pc, #272]	; (8001d98 <HAL_ADC_ConfigChannel+0x7bc>)
 8001c86:	4013      	ands	r3, r2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d07a      	beq.n	8001d82 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c8c:	4843      	ldr	r0, [pc, #268]	; (8001d9c <HAL_ADC_ConfigChannel+0x7c0>)
 8001c8e:	f7ff f9e9 	bl	8001064 <LL_ADC_GetCommonPathInternalCh>
 8001c92:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a41      	ldr	r2, [pc, #260]	; (8001da0 <HAL_ADC_ConfigChannel+0x7c4>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d12c      	bne.n	8001cfa <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001ca0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ca4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d126      	bne.n	8001cfa <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a3c      	ldr	r2, [pc, #240]	; (8001da4 <HAL_ADC_ConfigChannel+0x7c8>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d004      	beq.n	8001cc0 <HAL_ADC_ConfigChannel+0x6e4>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a3b      	ldr	r2, [pc, #236]	; (8001da8 <HAL_ADC_ConfigChannel+0x7cc>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d15d      	bne.n	8001d7c <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cc0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001cc4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4834      	ldr	r0, [pc, #208]	; (8001d9c <HAL_ADC_ConfigChannel+0x7c0>)
 8001ccc:	f7ff f9b7 	bl	800103e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001cd0:	4b36      	ldr	r3, [pc, #216]	; (8001dac <HAL_ADC_ConfigChannel+0x7d0>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	099b      	lsrs	r3, r3, #6
 8001cd6:	4a36      	ldr	r2, [pc, #216]	; (8001db0 <HAL_ADC_ConfigChannel+0x7d4>)
 8001cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cdc:	099b      	lsrs	r3, r3, #6
 8001cde:	1c5a      	adds	r2, r3, #1
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	4413      	add	r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001cea:	e002      	b.n	8001cf2 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d1f9      	bne.n	8001cec <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001cf8:	e040      	b.n	8001d7c <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a2d      	ldr	r2, [pc, #180]	; (8001db4 <HAL_ADC_ConfigChannel+0x7d8>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d118      	bne.n	8001d36 <HAL_ADC_ConfigChannel+0x75a>
 8001d04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d112      	bne.n	8001d36 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a23      	ldr	r2, [pc, #140]	; (8001da4 <HAL_ADC_ConfigChannel+0x7c8>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d004      	beq.n	8001d24 <HAL_ADC_ConfigChannel+0x748>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a22      	ldr	r2, [pc, #136]	; (8001da8 <HAL_ADC_ConfigChannel+0x7cc>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d12d      	bne.n	8001d80 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	481b      	ldr	r0, [pc, #108]	; (8001d9c <HAL_ADC_ConfigChannel+0x7c0>)
 8001d30:	f7ff f985 	bl	800103e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d34:	e024      	b.n	8001d80 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a1f      	ldr	r2, [pc, #124]	; (8001db8 <HAL_ADC_ConfigChannel+0x7dc>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d120      	bne.n	8001d82 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001d40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d11a      	bne.n	8001d82 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a14      	ldr	r2, [pc, #80]	; (8001da4 <HAL_ADC_ConfigChannel+0x7c8>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d115      	bne.n	8001d82 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d5a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d5e:	4619      	mov	r1, r3
 8001d60:	480e      	ldr	r0, [pc, #56]	; (8001d9c <HAL_ADC_ConfigChannel+0x7c0>)
 8001d62:	f7ff f96c 	bl	800103e <LL_ADC_SetCommonPathInternalCh>
 8001d66:	e00c      	b.n	8001d82 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d6c:	f043 0220 	orr.w	r2, r3, #32
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001d7a:	e002      	b.n	8001d82 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d7c:	bf00      	nop
 8001d7e:	e000      	b.n	8001d82 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d80:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001d8a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	37d8      	adds	r7, #216	; 0xd8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	80080000 	.word	0x80080000
 8001d9c:	50040300 	.word	0x50040300
 8001da0:	c7520000 	.word	0xc7520000
 8001da4:	50040000 	.word	0x50040000
 8001da8:	50040200 	.word	0x50040200
 8001dac:	20000000 	.word	0x20000000
 8001db0:	053e2d63 	.word	0x053e2d63
 8001db4:	cb840000 	.word	0xcb840000
 8001db8:	80000001 	.word	0x80000001

08001dbc <LL_ADC_IsEnabled>:
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d101      	bne.n	8001dd4 <LL_ADC_IsEnabled+0x18>
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e000      	b.n	8001dd6 <LL_ADC_IsEnabled+0x1a>
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr

08001de2 <LL_ADC_REG_IsConversionOngoing>:
{
 8001de2:	b480      	push	{r7}
 8001de4:	b083      	sub	sp, #12
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f003 0304 	and.w	r3, r3, #4
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	d101      	bne.n	8001dfa <LL_ADC_REG_IsConversionOngoing+0x18>
 8001df6:	2301      	movs	r3, #1
 8001df8:	e000      	b.n	8001dfc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001e08:	b590      	push	{r4, r7, lr}
 8001e0a:	b09f      	sub	sp, #124	; 0x7c
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e12:	2300      	movs	r3, #0
 8001e14:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d101      	bne.n	8001e26 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001e22:	2302      	movs	r3, #2
 8001e24:	e093      	b.n	8001f4e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8001e2e:	2300      	movs	r3, #0
 8001e30:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8001e32:	2300      	movs	r3, #0
 8001e34:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a47      	ldr	r2, [pc, #284]	; (8001f58 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d102      	bne.n	8001e46 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001e40:	4b46      	ldr	r3, [pc, #280]	; (8001f5c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001e42:	60bb      	str	r3, [r7, #8]
 8001e44:	e001      	b.n	8001e4a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001e46:	2300      	movs	r3, #0
 8001e48:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d10b      	bne.n	8001e68 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e54:	f043 0220 	orr.w	r2, r3, #32
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e072      	b.n	8001f4e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff ffb9 	bl	8001de2 <LL_ADC_REG_IsConversionOngoing>
 8001e70:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff ffb3 	bl	8001de2 <LL_ADC_REG_IsConversionOngoing>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d154      	bne.n	8001f2c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001e82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d151      	bne.n	8001f2c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001e88:	4b35      	ldr	r3, [pc, #212]	; (8001f60 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8001e8a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d02c      	beq.n	8001eee <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001e94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	6859      	ldr	r1, [r3, #4]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ea6:	035b      	lsls	r3, r3, #13
 8001ea8:	430b      	orrs	r3, r1
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001eae:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001eb0:	4829      	ldr	r0, [pc, #164]	; (8001f58 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001eb2:	f7ff ff83 	bl	8001dbc <LL_ADC_IsEnabled>
 8001eb6:	4604      	mov	r4, r0
 8001eb8:	4828      	ldr	r0, [pc, #160]	; (8001f5c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001eba:	f7ff ff7f 	bl	8001dbc <LL_ADC_IsEnabled>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	431c      	orrs	r4, r3
 8001ec2:	4828      	ldr	r0, [pc, #160]	; (8001f64 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001ec4:	f7ff ff7a 	bl	8001dbc <LL_ADC_IsEnabled>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	4323      	orrs	r3, r4
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d137      	bne.n	8001f40 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001ed0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001ed8:	f023 030f 	bic.w	r3, r3, #15
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	6811      	ldr	r1, [r2, #0]
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	6892      	ldr	r2, [r2, #8]
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001eea:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001eec:	e028      	b.n	8001f40 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001eee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ef6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ef8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001efa:	4817      	ldr	r0, [pc, #92]	; (8001f58 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001efc:	f7ff ff5e 	bl	8001dbc <LL_ADC_IsEnabled>
 8001f00:	4604      	mov	r4, r0
 8001f02:	4816      	ldr	r0, [pc, #88]	; (8001f5c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001f04:	f7ff ff5a 	bl	8001dbc <LL_ADC_IsEnabled>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	431c      	orrs	r4, r3
 8001f0c:	4815      	ldr	r0, [pc, #84]	; (8001f64 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001f0e:	f7ff ff55 	bl	8001dbc <LL_ADC_IsEnabled>
 8001f12:	4603      	mov	r3, r0
 8001f14:	4323      	orrs	r3, r4
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d112      	bne.n	8001f40 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001f1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001f22:	f023 030f 	bic.w	r3, r3, #15
 8001f26:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001f28:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f2a:	e009      	b.n	8001f40 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f30:	f043 0220 	orr.w	r2, r3, #32
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001f3e:	e000      	b.n	8001f42 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f40:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001f4a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	377c      	adds	r7, #124	; 0x7c
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd90      	pop	{r4, r7, pc}
 8001f56:	bf00      	nop
 8001f58:	50040000 	.word	0x50040000
 8001f5c:	50040100 	.word	0x50040100
 8001f60:	50040300 	.word	0x50040300
 8001f64:	50040200 	.word	0x50040200

08001f68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f003 0307 	and.w	r3, r3, #7
 8001f76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f78:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <__NVIC_SetPriorityGrouping+0x44>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f7e:	68ba      	ldr	r2, [r7, #8]
 8001f80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f84:	4013      	ands	r3, r2
 8001f86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f9a:	4a04      	ldr	r2, [pc, #16]	; (8001fac <__NVIC_SetPriorityGrouping+0x44>)
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	60d3      	str	r3, [r2, #12]
}
 8001fa0:	bf00      	nop
 8001fa2:	3714      	adds	r7, #20
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	e000ed00 	.word	0xe000ed00

08001fb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fb4:	4b04      	ldr	r3, [pc, #16]	; (8001fc8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	0a1b      	lsrs	r3, r3, #8
 8001fba:	f003 0307 	and.w	r3, r3, #7
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	e000ed00 	.word	0xe000ed00

08001fcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	6039      	str	r1, [r7, #0]
 8001fd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	db0a      	blt.n	8001ff6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	b2da      	uxtb	r2, r3
 8001fe4:	490c      	ldr	r1, [pc, #48]	; (8002018 <__NVIC_SetPriority+0x4c>)
 8001fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fea:	0112      	lsls	r2, r2, #4
 8001fec:	b2d2      	uxtb	r2, r2
 8001fee:	440b      	add	r3, r1
 8001ff0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ff4:	e00a      	b.n	800200c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	b2da      	uxtb	r2, r3
 8001ffa:	4908      	ldr	r1, [pc, #32]	; (800201c <__NVIC_SetPriority+0x50>)
 8001ffc:	79fb      	ldrb	r3, [r7, #7]
 8001ffe:	f003 030f 	and.w	r3, r3, #15
 8002002:	3b04      	subs	r3, #4
 8002004:	0112      	lsls	r2, r2, #4
 8002006:	b2d2      	uxtb	r2, r2
 8002008:	440b      	add	r3, r1
 800200a:	761a      	strb	r2, [r3, #24]
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr
 8002018:	e000e100 	.word	0xe000e100
 800201c:	e000ed00 	.word	0xe000ed00

08002020 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002020:	b480      	push	{r7}
 8002022:	b089      	sub	sp, #36	; 0x24
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	f1c3 0307 	rsb	r3, r3, #7
 800203a:	2b04      	cmp	r3, #4
 800203c:	bf28      	it	cs
 800203e:	2304      	movcs	r3, #4
 8002040:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	3304      	adds	r3, #4
 8002046:	2b06      	cmp	r3, #6
 8002048:	d902      	bls.n	8002050 <NVIC_EncodePriority+0x30>
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	3b03      	subs	r3, #3
 800204e:	e000      	b.n	8002052 <NVIC_EncodePriority+0x32>
 8002050:	2300      	movs	r3, #0
 8002052:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002054:	f04f 32ff 	mov.w	r2, #4294967295
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	43da      	mvns	r2, r3
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	401a      	ands	r2, r3
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002068:	f04f 31ff 	mov.w	r1, #4294967295
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	fa01 f303 	lsl.w	r3, r1, r3
 8002072:	43d9      	mvns	r1, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002078:	4313      	orrs	r3, r2
         );
}
 800207a:	4618      	mov	r0, r3
 800207c:	3724      	adds	r7, #36	; 0x24
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
	...

08002088 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3b01      	subs	r3, #1
 8002094:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002098:	d301      	bcc.n	800209e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800209a:	2301      	movs	r3, #1
 800209c:	e00f      	b.n	80020be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800209e:	4a0a      	ldr	r2, [pc, #40]	; (80020c8 <SysTick_Config+0x40>)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3b01      	subs	r3, #1
 80020a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020a6:	210f      	movs	r1, #15
 80020a8:	f04f 30ff 	mov.w	r0, #4294967295
 80020ac:	f7ff ff8e 	bl	8001fcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020b0:	4b05      	ldr	r3, [pc, #20]	; (80020c8 <SysTick_Config+0x40>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020b6:	4b04      	ldr	r3, [pc, #16]	; (80020c8 <SysTick_Config+0x40>)
 80020b8:	2207      	movs	r2, #7
 80020ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	e000e010 	.word	0xe000e010

080020cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f7ff ff47 	bl	8001f68 <__NVIC_SetPriorityGrouping>
}
 80020da:	bf00      	nop
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b086      	sub	sp, #24
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	4603      	mov	r3, r0
 80020ea:	60b9      	str	r1, [r7, #8]
 80020ec:	607a      	str	r2, [r7, #4]
 80020ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020f0:	2300      	movs	r3, #0
 80020f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020f4:	f7ff ff5c 	bl	8001fb0 <__NVIC_GetPriorityGrouping>
 80020f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	68b9      	ldr	r1, [r7, #8]
 80020fe:	6978      	ldr	r0, [r7, #20]
 8002100:	f7ff ff8e 	bl	8002020 <NVIC_EncodePriority>
 8002104:	4602      	mov	r2, r0
 8002106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800210a:	4611      	mov	r1, r2
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff ff5d 	bl	8001fcc <__NVIC_SetPriority>
}
 8002112:	bf00      	nop
 8002114:	3718      	adds	r7, #24
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b082      	sub	sp, #8
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f7ff ffb0 	bl	8002088 <SysTick_Config>
 8002128:	4603      	mov	r3, r0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
	...

08002134 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002134:	b480      	push	{r7}
 8002136:	b087      	sub	sp, #28
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800213e:	2300      	movs	r3, #0
 8002140:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002142:	e17f      	b.n	8002444 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	2101      	movs	r1, #1
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	fa01 f303 	lsl.w	r3, r1, r3
 8002150:	4013      	ands	r3, r2
 8002152:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2b00      	cmp	r3, #0
 8002158:	f000 8171 	beq.w	800243e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f003 0303 	and.w	r3, r3, #3
 8002164:	2b01      	cmp	r3, #1
 8002166:	d005      	beq.n	8002174 <HAL_GPIO_Init+0x40>
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f003 0303 	and.w	r3, r3, #3
 8002170:	2b02      	cmp	r3, #2
 8002172:	d130      	bne.n	80021d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	2203      	movs	r2, #3
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	43db      	mvns	r3, r3
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	4013      	ands	r3, r2
 800218a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	68da      	ldr	r2, [r3, #12]
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	4313      	orrs	r3, r2
 800219c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021aa:	2201      	movs	r2, #1
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	43db      	mvns	r3, r3
 80021b4:	693a      	ldr	r2, [r7, #16]
 80021b6:	4013      	ands	r3, r2
 80021b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	091b      	lsrs	r3, r3, #4
 80021c0:	f003 0201 	and.w	r2, r3, #1
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f003 0303 	and.w	r3, r3, #3
 80021de:	2b03      	cmp	r3, #3
 80021e0:	d118      	bne.n	8002214 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80021e8:	2201      	movs	r2, #1
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	43db      	mvns	r3, r3
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	4013      	ands	r3, r2
 80021f6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	08db      	lsrs	r3, r3, #3
 80021fe:	f003 0201 	and.w	r2, r3, #1
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	4313      	orrs	r3, r2
 800220c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f003 0303 	and.w	r3, r3, #3
 800221c:	2b03      	cmp	r3, #3
 800221e:	d017      	beq.n	8002250 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	2203      	movs	r2, #3
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	43db      	mvns	r3, r3
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	4013      	ands	r3, r2
 8002236:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	4313      	orrs	r3, r2
 8002248:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f003 0303 	and.w	r3, r3, #3
 8002258:	2b02      	cmp	r3, #2
 800225a:	d123      	bne.n	80022a4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	08da      	lsrs	r2, r3, #3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	3208      	adds	r2, #8
 8002264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002268:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	f003 0307 	and.w	r3, r3, #7
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	220f      	movs	r2, #15
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	43db      	mvns	r3, r3
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	4013      	ands	r3, r2
 800227e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	691a      	ldr	r2, [r3, #16]
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	4313      	orrs	r3, r2
 8002294:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	08da      	lsrs	r2, r3, #3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	3208      	adds	r2, #8
 800229e:	6939      	ldr	r1, [r7, #16]
 80022a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	2203      	movs	r2, #3
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	43db      	mvns	r3, r3
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	4013      	ands	r3, r2
 80022ba:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f003 0203 	and.w	r2, r3, #3
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f000 80ac 	beq.w	800243e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022e6:	4b5f      	ldr	r3, [pc, #380]	; (8002464 <HAL_GPIO_Init+0x330>)
 80022e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ea:	4a5e      	ldr	r2, [pc, #376]	; (8002464 <HAL_GPIO_Init+0x330>)
 80022ec:	f043 0301 	orr.w	r3, r3, #1
 80022f0:	6613      	str	r3, [r2, #96]	; 0x60
 80022f2:	4b5c      	ldr	r3, [pc, #368]	; (8002464 <HAL_GPIO_Init+0x330>)
 80022f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	60bb      	str	r3, [r7, #8]
 80022fc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80022fe:	4a5a      	ldr	r2, [pc, #360]	; (8002468 <HAL_GPIO_Init+0x334>)
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	089b      	lsrs	r3, r3, #2
 8002304:	3302      	adds	r3, #2
 8002306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800230a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	f003 0303 	and.w	r3, r3, #3
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	220f      	movs	r2, #15
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	43db      	mvns	r3, r3
 800231c:	693a      	ldr	r2, [r7, #16]
 800231e:	4013      	ands	r3, r2
 8002320:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002328:	d025      	beq.n	8002376 <HAL_GPIO_Init+0x242>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a4f      	ldr	r2, [pc, #316]	; (800246c <HAL_GPIO_Init+0x338>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d01f      	beq.n	8002372 <HAL_GPIO_Init+0x23e>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a4e      	ldr	r2, [pc, #312]	; (8002470 <HAL_GPIO_Init+0x33c>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d019      	beq.n	800236e <HAL_GPIO_Init+0x23a>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a4d      	ldr	r2, [pc, #308]	; (8002474 <HAL_GPIO_Init+0x340>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d013      	beq.n	800236a <HAL_GPIO_Init+0x236>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a4c      	ldr	r2, [pc, #304]	; (8002478 <HAL_GPIO_Init+0x344>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d00d      	beq.n	8002366 <HAL_GPIO_Init+0x232>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a4b      	ldr	r2, [pc, #300]	; (800247c <HAL_GPIO_Init+0x348>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d007      	beq.n	8002362 <HAL_GPIO_Init+0x22e>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a4a      	ldr	r2, [pc, #296]	; (8002480 <HAL_GPIO_Init+0x34c>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d101      	bne.n	800235e <HAL_GPIO_Init+0x22a>
 800235a:	2306      	movs	r3, #6
 800235c:	e00c      	b.n	8002378 <HAL_GPIO_Init+0x244>
 800235e:	2307      	movs	r3, #7
 8002360:	e00a      	b.n	8002378 <HAL_GPIO_Init+0x244>
 8002362:	2305      	movs	r3, #5
 8002364:	e008      	b.n	8002378 <HAL_GPIO_Init+0x244>
 8002366:	2304      	movs	r3, #4
 8002368:	e006      	b.n	8002378 <HAL_GPIO_Init+0x244>
 800236a:	2303      	movs	r3, #3
 800236c:	e004      	b.n	8002378 <HAL_GPIO_Init+0x244>
 800236e:	2302      	movs	r3, #2
 8002370:	e002      	b.n	8002378 <HAL_GPIO_Init+0x244>
 8002372:	2301      	movs	r3, #1
 8002374:	e000      	b.n	8002378 <HAL_GPIO_Init+0x244>
 8002376:	2300      	movs	r3, #0
 8002378:	697a      	ldr	r2, [r7, #20]
 800237a:	f002 0203 	and.w	r2, r2, #3
 800237e:	0092      	lsls	r2, r2, #2
 8002380:	4093      	lsls	r3, r2
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	4313      	orrs	r3, r2
 8002386:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002388:	4937      	ldr	r1, [pc, #220]	; (8002468 <HAL_GPIO_Init+0x334>)
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	089b      	lsrs	r3, r3, #2
 800238e:	3302      	adds	r3, #2
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002396:	4b3b      	ldr	r3, [pc, #236]	; (8002484 <HAL_GPIO_Init+0x350>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	43db      	mvns	r3, r3
 80023a0:	693a      	ldr	r2, [r7, #16]
 80023a2:	4013      	ands	r3, r2
 80023a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d003      	beq.n	80023ba <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80023ba:	4a32      	ldr	r2, [pc, #200]	; (8002484 <HAL_GPIO_Init+0x350>)
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80023c0:	4b30      	ldr	r3, [pc, #192]	; (8002484 <HAL_GPIO_Init+0x350>)
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	43db      	mvns	r3, r3
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	4013      	ands	r3, r2
 80023ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d003      	beq.n	80023e4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80023e4:	4a27      	ldr	r2, [pc, #156]	; (8002484 <HAL_GPIO_Init+0x350>)
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80023ea:	4b26      	ldr	r3, [pc, #152]	; (8002484 <HAL_GPIO_Init+0x350>)
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	43db      	mvns	r3, r3
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	4013      	ands	r3, r2
 80023f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d003      	beq.n	800240e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	4313      	orrs	r3, r2
 800240c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800240e:	4a1d      	ldr	r2, [pc, #116]	; (8002484 <HAL_GPIO_Init+0x350>)
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002414:	4b1b      	ldr	r3, [pc, #108]	; (8002484 <HAL_GPIO_Init+0x350>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	43db      	mvns	r3, r3
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	4013      	ands	r3, r2
 8002422:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d003      	beq.n	8002438 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002430:	693a      	ldr	r2, [r7, #16]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	4313      	orrs	r3, r2
 8002436:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002438:	4a12      	ldr	r2, [pc, #72]	; (8002484 <HAL_GPIO_Init+0x350>)
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	3301      	adds	r3, #1
 8002442:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	fa22 f303 	lsr.w	r3, r2, r3
 800244e:	2b00      	cmp	r3, #0
 8002450:	f47f ae78 	bne.w	8002144 <HAL_GPIO_Init+0x10>
  }
}
 8002454:	bf00      	nop
 8002456:	bf00      	nop
 8002458:	371c      	adds	r7, #28
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	40021000 	.word	0x40021000
 8002468:	40010000 	.word	0x40010000
 800246c:	48000400 	.word	0x48000400
 8002470:	48000800 	.word	0x48000800
 8002474:	48000c00 	.word	0x48000c00
 8002478:	48001000 	.word	0x48001000
 800247c:	48001400 	.word	0x48001400
 8002480:	48001800 	.word	0x48001800
 8002484:	40010400 	.word	0x40010400

08002488 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002488:	b480      	push	{r7}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	460b      	mov	r3, r1
 8002492:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	691a      	ldr	r2, [r3, #16]
 8002498:	887b      	ldrh	r3, [r7, #2]
 800249a:	4013      	ands	r3, r2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d002      	beq.n	80024a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024a0:	2301      	movs	r3, #1
 80024a2:	73fb      	strb	r3, [r7, #15]
 80024a4:	e001      	b.n	80024aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024a6:	2300      	movs	r3, #0
 80024a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3714      	adds	r7, #20
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	460b      	mov	r3, r1
 80024c2:	807b      	strh	r3, [r7, #2]
 80024c4:	4613      	mov	r3, r2
 80024c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024c8:	787b      	ldrb	r3, [r7, #1]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d003      	beq.n	80024d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024ce:	887a      	ldrh	r2, [r7, #2]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024d4:	e002      	b.n	80024dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024d6:	887a      	ldrh	r2, [r7, #2]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	460b      	mov	r3, r1
 80024f2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	695b      	ldr	r3, [r3, #20]
 80024f8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024fa:	887a      	ldrh	r2, [r7, #2]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	4013      	ands	r3, r2
 8002500:	041a      	lsls	r2, r3, #16
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	43d9      	mvns	r1, r3
 8002506:	887b      	ldrh	r3, [r7, #2]
 8002508:	400b      	ands	r3, r1
 800250a:	431a      	orrs	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	619a      	str	r2, [r3, #24]
}
 8002510:	bf00      	nop
 8002512:	3714      	adds	r7, #20
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002520:	4b04      	ldr	r3, [pc, #16]	; (8002534 <HAL_PWREx_GetVoltageRange+0x18>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002528:	4618      	mov	r0, r3
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	40007000 	.word	0x40007000

08002538 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002546:	d130      	bne.n	80025aa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002548:	4b23      	ldr	r3, [pc, #140]	; (80025d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002550:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002554:	d038      	beq.n	80025c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002556:	4b20      	ldr	r3, [pc, #128]	; (80025d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800255e:	4a1e      	ldr	r2, [pc, #120]	; (80025d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002560:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002564:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002566:	4b1d      	ldr	r3, [pc, #116]	; (80025dc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2232      	movs	r2, #50	; 0x32
 800256c:	fb02 f303 	mul.w	r3, r2, r3
 8002570:	4a1b      	ldr	r2, [pc, #108]	; (80025e0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002572:	fba2 2303 	umull	r2, r3, r2, r3
 8002576:	0c9b      	lsrs	r3, r3, #18
 8002578:	3301      	adds	r3, #1
 800257a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800257c:	e002      	b.n	8002584 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	3b01      	subs	r3, #1
 8002582:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002584:	4b14      	ldr	r3, [pc, #80]	; (80025d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002586:	695b      	ldr	r3, [r3, #20]
 8002588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800258c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002590:	d102      	bne.n	8002598 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1f2      	bne.n	800257e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002598:	4b0f      	ldr	r3, [pc, #60]	; (80025d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025a4:	d110      	bne.n	80025c8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e00f      	b.n	80025ca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80025aa:	4b0b      	ldr	r3, [pc, #44]	; (80025d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80025b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025b6:	d007      	beq.n	80025c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80025b8:	4b07      	ldr	r3, [pc, #28]	; (80025d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025c0:	4a05      	ldr	r2, [pc, #20]	; (80025d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025c6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3714      	adds	r7, #20
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	40007000 	.word	0x40007000
 80025dc:	20000000 	.word	0x20000000
 80025e0:	431bde83 	.word	0x431bde83

080025e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b088      	sub	sp, #32
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e3d4      	b.n	8002da0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025f6:	4ba1      	ldr	r3, [pc, #644]	; (800287c <HAL_RCC_OscConfig+0x298>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 030c 	and.w	r3, r3, #12
 80025fe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002600:	4b9e      	ldr	r3, [pc, #632]	; (800287c <HAL_RCC_OscConfig+0x298>)
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	f003 0303 	and.w	r3, r3, #3
 8002608:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0310 	and.w	r3, r3, #16
 8002612:	2b00      	cmp	r3, #0
 8002614:	f000 80e4 	beq.w	80027e0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d007      	beq.n	800262e <HAL_RCC_OscConfig+0x4a>
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	2b0c      	cmp	r3, #12
 8002622:	f040 808b 	bne.w	800273c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	2b01      	cmp	r3, #1
 800262a:	f040 8087 	bne.w	800273c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800262e:	4b93      	ldr	r3, [pc, #588]	; (800287c <HAL_RCC_OscConfig+0x298>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d005      	beq.n	8002646 <HAL_RCC_OscConfig+0x62>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e3ac      	b.n	8002da0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a1a      	ldr	r2, [r3, #32]
 800264a:	4b8c      	ldr	r3, [pc, #560]	; (800287c <HAL_RCC_OscConfig+0x298>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0308 	and.w	r3, r3, #8
 8002652:	2b00      	cmp	r3, #0
 8002654:	d004      	beq.n	8002660 <HAL_RCC_OscConfig+0x7c>
 8002656:	4b89      	ldr	r3, [pc, #548]	; (800287c <HAL_RCC_OscConfig+0x298>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800265e:	e005      	b.n	800266c <HAL_RCC_OscConfig+0x88>
 8002660:	4b86      	ldr	r3, [pc, #536]	; (800287c <HAL_RCC_OscConfig+0x298>)
 8002662:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002666:	091b      	lsrs	r3, r3, #4
 8002668:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800266c:	4293      	cmp	r3, r2
 800266e:	d223      	bcs.n	80026b8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a1b      	ldr	r3, [r3, #32]
 8002674:	4618      	mov	r0, r3
 8002676:	f000 fd41 	bl	80030fc <RCC_SetFlashLatencyFromMSIRange>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e38d      	b.n	8002da0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002684:	4b7d      	ldr	r3, [pc, #500]	; (800287c <HAL_RCC_OscConfig+0x298>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a7c      	ldr	r2, [pc, #496]	; (800287c <HAL_RCC_OscConfig+0x298>)
 800268a:	f043 0308 	orr.w	r3, r3, #8
 800268e:	6013      	str	r3, [r2, #0]
 8002690:	4b7a      	ldr	r3, [pc, #488]	; (800287c <HAL_RCC_OscConfig+0x298>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	4977      	ldr	r1, [pc, #476]	; (800287c <HAL_RCC_OscConfig+0x298>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026a2:	4b76      	ldr	r3, [pc, #472]	; (800287c <HAL_RCC_OscConfig+0x298>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	69db      	ldr	r3, [r3, #28]
 80026ae:	021b      	lsls	r3, r3, #8
 80026b0:	4972      	ldr	r1, [pc, #456]	; (800287c <HAL_RCC_OscConfig+0x298>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	604b      	str	r3, [r1, #4]
 80026b6:	e025      	b.n	8002704 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026b8:	4b70      	ldr	r3, [pc, #448]	; (800287c <HAL_RCC_OscConfig+0x298>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a6f      	ldr	r2, [pc, #444]	; (800287c <HAL_RCC_OscConfig+0x298>)
 80026be:	f043 0308 	orr.w	r3, r3, #8
 80026c2:	6013      	str	r3, [r2, #0]
 80026c4:	4b6d      	ldr	r3, [pc, #436]	; (800287c <HAL_RCC_OscConfig+0x298>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a1b      	ldr	r3, [r3, #32]
 80026d0:	496a      	ldr	r1, [pc, #424]	; (800287c <HAL_RCC_OscConfig+0x298>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026d6:	4b69      	ldr	r3, [pc, #420]	; (800287c <HAL_RCC_OscConfig+0x298>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	021b      	lsls	r3, r3, #8
 80026e4:	4965      	ldr	r1, [pc, #404]	; (800287c <HAL_RCC_OscConfig+0x298>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d109      	bne.n	8002704 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f000 fd01 	bl	80030fc <RCC_SetFlashLatencyFromMSIRange>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e34d      	b.n	8002da0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002704:	f000 fc36 	bl	8002f74 <HAL_RCC_GetSysClockFreq>
 8002708:	4602      	mov	r2, r0
 800270a:	4b5c      	ldr	r3, [pc, #368]	; (800287c <HAL_RCC_OscConfig+0x298>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	091b      	lsrs	r3, r3, #4
 8002710:	f003 030f 	and.w	r3, r3, #15
 8002714:	495a      	ldr	r1, [pc, #360]	; (8002880 <HAL_RCC_OscConfig+0x29c>)
 8002716:	5ccb      	ldrb	r3, [r1, r3]
 8002718:	f003 031f 	and.w	r3, r3, #31
 800271c:	fa22 f303 	lsr.w	r3, r2, r3
 8002720:	4a58      	ldr	r2, [pc, #352]	; (8002884 <HAL_RCC_OscConfig+0x2a0>)
 8002722:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002724:	4b58      	ldr	r3, [pc, #352]	; (8002888 <HAL_RCC_OscConfig+0x2a4>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4618      	mov	r0, r3
 800272a:	f7fe fbf5 	bl	8000f18 <HAL_InitTick>
 800272e:	4603      	mov	r3, r0
 8002730:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002732:	7bfb      	ldrb	r3, [r7, #15]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d052      	beq.n	80027de <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002738:	7bfb      	ldrb	r3, [r7, #15]
 800273a:	e331      	b.n	8002da0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d032      	beq.n	80027aa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002744:	4b4d      	ldr	r3, [pc, #308]	; (800287c <HAL_RCC_OscConfig+0x298>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a4c      	ldr	r2, [pc, #304]	; (800287c <HAL_RCC_OscConfig+0x298>)
 800274a:	f043 0301 	orr.w	r3, r3, #1
 800274e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002750:	f7fe fc32 	bl	8000fb8 <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002756:	e008      	b.n	800276a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002758:	f7fe fc2e 	bl	8000fb8 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e31a      	b.n	8002da0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800276a:	4b44      	ldr	r3, [pc, #272]	; (800287c <HAL_RCC_OscConfig+0x298>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d0f0      	beq.n	8002758 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002776:	4b41      	ldr	r3, [pc, #260]	; (800287c <HAL_RCC_OscConfig+0x298>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a40      	ldr	r2, [pc, #256]	; (800287c <HAL_RCC_OscConfig+0x298>)
 800277c:	f043 0308 	orr.w	r3, r3, #8
 8002780:	6013      	str	r3, [r2, #0]
 8002782:	4b3e      	ldr	r3, [pc, #248]	; (800287c <HAL_RCC_OscConfig+0x298>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a1b      	ldr	r3, [r3, #32]
 800278e:	493b      	ldr	r1, [pc, #236]	; (800287c <HAL_RCC_OscConfig+0x298>)
 8002790:	4313      	orrs	r3, r2
 8002792:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002794:	4b39      	ldr	r3, [pc, #228]	; (800287c <HAL_RCC_OscConfig+0x298>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	69db      	ldr	r3, [r3, #28]
 80027a0:	021b      	lsls	r3, r3, #8
 80027a2:	4936      	ldr	r1, [pc, #216]	; (800287c <HAL_RCC_OscConfig+0x298>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	604b      	str	r3, [r1, #4]
 80027a8:	e01a      	b.n	80027e0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80027aa:	4b34      	ldr	r3, [pc, #208]	; (800287c <HAL_RCC_OscConfig+0x298>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a33      	ldr	r2, [pc, #204]	; (800287c <HAL_RCC_OscConfig+0x298>)
 80027b0:	f023 0301 	bic.w	r3, r3, #1
 80027b4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027b6:	f7fe fbff 	bl	8000fb8 <HAL_GetTick>
 80027ba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027bc:	e008      	b.n	80027d0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027be:	f7fe fbfb 	bl	8000fb8 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e2e7      	b.n	8002da0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027d0:	4b2a      	ldr	r3, [pc, #168]	; (800287c <HAL_RCC_OscConfig+0x298>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1f0      	bne.n	80027be <HAL_RCC_OscConfig+0x1da>
 80027dc:	e000      	b.n	80027e0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027de:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0301 	and.w	r3, r3, #1
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d074      	beq.n	80028d6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	2b08      	cmp	r3, #8
 80027f0:	d005      	beq.n	80027fe <HAL_RCC_OscConfig+0x21a>
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	2b0c      	cmp	r3, #12
 80027f6:	d10e      	bne.n	8002816 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	2b03      	cmp	r3, #3
 80027fc:	d10b      	bne.n	8002816 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027fe:	4b1f      	ldr	r3, [pc, #124]	; (800287c <HAL_RCC_OscConfig+0x298>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d064      	beq.n	80028d4 <HAL_RCC_OscConfig+0x2f0>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d160      	bne.n	80028d4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e2c4      	b.n	8002da0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800281e:	d106      	bne.n	800282e <HAL_RCC_OscConfig+0x24a>
 8002820:	4b16      	ldr	r3, [pc, #88]	; (800287c <HAL_RCC_OscConfig+0x298>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a15      	ldr	r2, [pc, #84]	; (800287c <HAL_RCC_OscConfig+0x298>)
 8002826:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800282a:	6013      	str	r3, [r2, #0]
 800282c:	e01d      	b.n	800286a <HAL_RCC_OscConfig+0x286>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002836:	d10c      	bne.n	8002852 <HAL_RCC_OscConfig+0x26e>
 8002838:	4b10      	ldr	r3, [pc, #64]	; (800287c <HAL_RCC_OscConfig+0x298>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a0f      	ldr	r2, [pc, #60]	; (800287c <HAL_RCC_OscConfig+0x298>)
 800283e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002842:	6013      	str	r3, [r2, #0]
 8002844:	4b0d      	ldr	r3, [pc, #52]	; (800287c <HAL_RCC_OscConfig+0x298>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a0c      	ldr	r2, [pc, #48]	; (800287c <HAL_RCC_OscConfig+0x298>)
 800284a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800284e:	6013      	str	r3, [r2, #0]
 8002850:	e00b      	b.n	800286a <HAL_RCC_OscConfig+0x286>
 8002852:	4b0a      	ldr	r3, [pc, #40]	; (800287c <HAL_RCC_OscConfig+0x298>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a09      	ldr	r2, [pc, #36]	; (800287c <HAL_RCC_OscConfig+0x298>)
 8002858:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800285c:	6013      	str	r3, [r2, #0]
 800285e:	4b07      	ldr	r3, [pc, #28]	; (800287c <HAL_RCC_OscConfig+0x298>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a06      	ldr	r2, [pc, #24]	; (800287c <HAL_RCC_OscConfig+0x298>)
 8002864:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002868:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d01c      	beq.n	80028ac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002872:	f7fe fba1 	bl	8000fb8 <HAL_GetTick>
 8002876:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002878:	e011      	b.n	800289e <HAL_RCC_OscConfig+0x2ba>
 800287a:	bf00      	nop
 800287c:	40021000 	.word	0x40021000
 8002880:	0800604c 	.word	0x0800604c
 8002884:	20000000 	.word	0x20000000
 8002888:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800288c:	f7fe fb94 	bl	8000fb8 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b64      	cmp	r3, #100	; 0x64
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e280      	b.n	8002da0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800289e:	4baf      	ldr	r3, [pc, #700]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d0f0      	beq.n	800288c <HAL_RCC_OscConfig+0x2a8>
 80028aa:	e014      	b.n	80028d6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ac:	f7fe fb84 	bl	8000fb8 <HAL_GetTick>
 80028b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028b2:	e008      	b.n	80028c6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028b4:	f7fe fb80 	bl	8000fb8 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b64      	cmp	r3, #100	; 0x64
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e26c      	b.n	8002da0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028c6:	4ba5      	ldr	r3, [pc, #660]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1f0      	bne.n	80028b4 <HAL_RCC_OscConfig+0x2d0>
 80028d2:	e000      	b.n	80028d6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d060      	beq.n	80029a4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	2b04      	cmp	r3, #4
 80028e6:	d005      	beq.n	80028f4 <HAL_RCC_OscConfig+0x310>
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	2b0c      	cmp	r3, #12
 80028ec:	d119      	bne.n	8002922 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d116      	bne.n	8002922 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028f4:	4b99      	ldr	r3, [pc, #612]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d005      	beq.n	800290c <HAL_RCC_OscConfig+0x328>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d101      	bne.n	800290c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e249      	b.n	8002da0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800290c:	4b93      	ldr	r3, [pc, #588]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	061b      	lsls	r3, r3, #24
 800291a:	4990      	ldr	r1, [pc, #576]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 800291c:	4313      	orrs	r3, r2
 800291e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002920:	e040      	b.n	80029a4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d023      	beq.n	8002972 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800292a:	4b8c      	ldr	r3, [pc, #560]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a8b      	ldr	r2, [pc, #556]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 8002930:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002934:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002936:	f7fe fb3f 	bl	8000fb8 <HAL_GetTick>
 800293a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800293c:	e008      	b.n	8002950 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800293e:	f7fe fb3b 	bl	8000fb8 <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	2b02      	cmp	r3, #2
 800294a:	d901      	bls.n	8002950 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e227      	b.n	8002da0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002950:	4b82      	ldr	r3, [pc, #520]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002958:	2b00      	cmp	r3, #0
 800295a:	d0f0      	beq.n	800293e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800295c:	4b7f      	ldr	r3, [pc, #508]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	061b      	lsls	r3, r3, #24
 800296a:	497c      	ldr	r1, [pc, #496]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 800296c:	4313      	orrs	r3, r2
 800296e:	604b      	str	r3, [r1, #4]
 8002970:	e018      	b.n	80029a4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002972:	4b7a      	ldr	r3, [pc, #488]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a79      	ldr	r2, [pc, #484]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 8002978:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800297c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800297e:	f7fe fb1b 	bl	8000fb8 <HAL_GetTick>
 8002982:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002984:	e008      	b.n	8002998 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002986:	f7fe fb17 	bl	8000fb8 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	2b02      	cmp	r3, #2
 8002992:	d901      	bls.n	8002998 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e203      	b.n	8002da0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002998:	4b70      	ldr	r3, [pc, #448]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d1f0      	bne.n	8002986 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0308 	and.w	r3, r3, #8
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d03c      	beq.n	8002a2a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	695b      	ldr	r3, [r3, #20]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d01c      	beq.n	80029f2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029b8:	4b68      	ldr	r3, [pc, #416]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 80029ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029be:	4a67      	ldr	r2, [pc, #412]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 80029c0:	f043 0301 	orr.w	r3, r3, #1
 80029c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c8:	f7fe faf6 	bl	8000fb8 <HAL_GetTick>
 80029cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029ce:	e008      	b.n	80029e2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029d0:	f7fe faf2 	bl	8000fb8 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e1de      	b.n	8002da0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029e2:	4b5e      	ldr	r3, [pc, #376]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 80029e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d0ef      	beq.n	80029d0 <HAL_RCC_OscConfig+0x3ec>
 80029f0:	e01b      	b.n	8002a2a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029f2:	4b5a      	ldr	r3, [pc, #360]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 80029f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029f8:	4a58      	ldr	r2, [pc, #352]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 80029fa:	f023 0301 	bic.w	r3, r3, #1
 80029fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a02:	f7fe fad9 	bl	8000fb8 <HAL_GetTick>
 8002a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a08:	e008      	b.n	8002a1c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a0a:	f7fe fad5 	bl	8000fb8 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d901      	bls.n	8002a1c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e1c1      	b.n	8002da0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a1c:	4b4f      	ldr	r3, [pc, #316]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 8002a1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1ef      	bne.n	8002a0a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0304 	and.w	r3, r3, #4
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f000 80a6 	beq.w	8002b84 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002a3c:	4b47      	ldr	r3, [pc, #284]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 8002a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d10d      	bne.n	8002a64 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a48:	4b44      	ldr	r3, [pc, #272]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 8002a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a4c:	4a43      	ldr	r2, [pc, #268]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 8002a4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a52:	6593      	str	r3, [r2, #88]	; 0x58
 8002a54:	4b41      	ldr	r3, [pc, #260]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 8002a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a5c:	60bb      	str	r3, [r7, #8]
 8002a5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a60:	2301      	movs	r3, #1
 8002a62:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a64:	4b3e      	ldr	r3, [pc, #248]	; (8002b60 <HAL_RCC_OscConfig+0x57c>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d118      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a70:	4b3b      	ldr	r3, [pc, #236]	; (8002b60 <HAL_RCC_OscConfig+0x57c>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a3a      	ldr	r2, [pc, #232]	; (8002b60 <HAL_RCC_OscConfig+0x57c>)
 8002a76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a7a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a7c:	f7fe fa9c 	bl	8000fb8 <HAL_GetTick>
 8002a80:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a82:	e008      	b.n	8002a96 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a84:	f7fe fa98 	bl	8000fb8 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e184      	b.n	8002da0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a96:	4b32      	ldr	r3, [pc, #200]	; (8002b60 <HAL_RCC_OscConfig+0x57c>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d0f0      	beq.n	8002a84 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d108      	bne.n	8002abc <HAL_RCC_OscConfig+0x4d8>
 8002aaa:	4b2c      	ldr	r3, [pc, #176]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 8002aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab0:	4a2a      	ldr	r2, [pc, #168]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 8002ab2:	f043 0301 	orr.w	r3, r3, #1
 8002ab6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002aba:	e024      	b.n	8002b06 <HAL_RCC_OscConfig+0x522>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	2b05      	cmp	r3, #5
 8002ac2:	d110      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x502>
 8002ac4:	4b25      	ldr	r3, [pc, #148]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 8002ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aca:	4a24      	ldr	r2, [pc, #144]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 8002acc:	f043 0304 	orr.w	r3, r3, #4
 8002ad0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ad4:	4b21      	ldr	r3, [pc, #132]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 8002ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ada:	4a20      	ldr	r2, [pc, #128]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 8002adc:	f043 0301 	orr.w	r3, r3, #1
 8002ae0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ae4:	e00f      	b.n	8002b06 <HAL_RCC_OscConfig+0x522>
 8002ae6:	4b1d      	ldr	r3, [pc, #116]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 8002ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aec:	4a1b      	ldr	r2, [pc, #108]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 8002aee:	f023 0301 	bic.w	r3, r3, #1
 8002af2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002af6:	4b19      	ldr	r3, [pc, #100]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 8002af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002afc:	4a17      	ldr	r2, [pc, #92]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 8002afe:	f023 0304 	bic.w	r3, r3, #4
 8002b02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d016      	beq.n	8002b3c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b0e:	f7fe fa53 	bl	8000fb8 <HAL_GetTick>
 8002b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b14:	e00a      	b.n	8002b2c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b16:	f7fe fa4f 	bl	8000fb8 <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e139      	b.n	8002da0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b2c:	4b0b      	ldr	r3, [pc, #44]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 8002b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d0ed      	beq.n	8002b16 <HAL_RCC_OscConfig+0x532>
 8002b3a:	e01a      	b.n	8002b72 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b3c:	f7fe fa3c 	bl	8000fb8 <HAL_GetTick>
 8002b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b42:	e00f      	b.n	8002b64 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b44:	f7fe fa38 	bl	8000fb8 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d906      	bls.n	8002b64 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e122      	b.n	8002da0 <HAL_RCC_OscConfig+0x7bc>
 8002b5a:	bf00      	nop
 8002b5c:	40021000 	.word	0x40021000
 8002b60:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b64:	4b90      	ldr	r3, [pc, #576]	; (8002da8 <HAL_RCC_OscConfig+0x7c4>)
 8002b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1e8      	bne.n	8002b44 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b72:	7ffb      	ldrb	r3, [r7, #31]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d105      	bne.n	8002b84 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b78:	4b8b      	ldr	r3, [pc, #556]	; (8002da8 <HAL_RCC_OscConfig+0x7c4>)
 8002b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b7c:	4a8a      	ldr	r2, [pc, #552]	; (8002da8 <HAL_RCC_OscConfig+0x7c4>)
 8002b7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b82:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f000 8108 	beq.w	8002d9e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	f040 80d0 	bne.w	8002d38 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002b98:	4b83      	ldr	r3, [pc, #524]	; (8002da8 <HAL_RCC_OscConfig+0x7c4>)
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	f003 0203 	and.w	r2, r3, #3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d130      	bne.n	8002c0e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d127      	bne.n	8002c0e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bc8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d11f      	bne.n	8002c0e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002bd8:	2a07      	cmp	r2, #7
 8002bda:	bf14      	ite	ne
 8002bdc:	2201      	movne	r2, #1
 8002bde:	2200      	moveq	r2, #0
 8002be0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d113      	bne.n	8002c0e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf0:	085b      	lsrs	r3, r3, #1
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d109      	bne.n	8002c0e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c04:	085b      	lsrs	r3, r3, #1
 8002c06:	3b01      	subs	r3, #1
 8002c08:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d06e      	beq.n	8002cec <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	2b0c      	cmp	r3, #12
 8002c12:	d069      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002c14:	4b64      	ldr	r3, [pc, #400]	; (8002da8 <HAL_RCC_OscConfig+0x7c4>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d105      	bne.n	8002c2c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002c20:	4b61      	ldr	r3, [pc, #388]	; (8002da8 <HAL_RCC_OscConfig+0x7c4>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e0b7      	b.n	8002da0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c30:	4b5d      	ldr	r3, [pc, #372]	; (8002da8 <HAL_RCC_OscConfig+0x7c4>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a5c      	ldr	r2, [pc, #368]	; (8002da8 <HAL_RCC_OscConfig+0x7c4>)
 8002c36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c3a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c3c:	f7fe f9bc 	bl	8000fb8 <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c44:	f7fe f9b8 	bl	8000fb8 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e0a4      	b.n	8002da0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c56:	4b54      	ldr	r3, [pc, #336]	; (8002da8 <HAL_RCC_OscConfig+0x7c4>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1f0      	bne.n	8002c44 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c62:	4b51      	ldr	r3, [pc, #324]	; (8002da8 <HAL_RCC_OscConfig+0x7c4>)
 8002c64:	68da      	ldr	r2, [r3, #12]
 8002c66:	4b51      	ldr	r3, [pc, #324]	; (8002dac <HAL_RCC_OscConfig+0x7c8>)
 8002c68:	4013      	ands	r3, r2
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002c72:	3a01      	subs	r2, #1
 8002c74:	0112      	lsls	r2, r2, #4
 8002c76:	4311      	orrs	r1, r2
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c7c:	0212      	lsls	r2, r2, #8
 8002c7e:	4311      	orrs	r1, r2
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c84:	0852      	lsrs	r2, r2, #1
 8002c86:	3a01      	subs	r2, #1
 8002c88:	0552      	lsls	r2, r2, #21
 8002c8a:	4311      	orrs	r1, r2
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c90:	0852      	lsrs	r2, r2, #1
 8002c92:	3a01      	subs	r2, #1
 8002c94:	0652      	lsls	r2, r2, #25
 8002c96:	4311      	orrs	r1, r2
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c9c:	0912      	lsrs	r2, r2, #4
 8002c9e:	0452      	lsls	r2, r2, #17
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	4941      	ldr	r1, [pc, #260]	; (8002da8 <HAL_RCC_OscConfig+0x7c4>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002ca8:	4b3f      	ldr	r3, [pc, #252]	; (8002da8 <HAL_RCC_OscConfig+0x7c4>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a3e      	ldr	r2, [pc, #248]	; (8002da8 <HAL_RCC_OscConfig+0x7c4>)
 8002cae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cb2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cb4:	4b3c      	ldr	r3, [pc, #240]	; (8002da8 <HAL_RCC_OscConfig+0x7c4>)
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	4a3b      	ldr	r2, [pc, #236]	; (8002da8 <HAL_RCC_OscConfig+0x7c4>)
 8002cba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cbe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002cc0:	f7fe f97a 	bl	8000fb8 <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cc8:	f7fe f976 	bl	8000fb8 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e062      	b.n	8002da0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cda:	4b33      	ldr	r3, [pc, #204]	; (8002da8 <HAL_RCC_OscConfig+0x7c4>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d0f0      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ce6:	e05a      	b.n	8002d9e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e059      	b.n	8002da0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cec:	4b2e      	ldr	r3, [pc, #184]	; (8002da8 <HAL_RCC_OscConfig+0x7c4>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d152      	bne.n	8002d9e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002cf8:	4b2b      	ldr	r3, [pc, #172]	; (8002da8 <HAL_RCC_OscConfig+0x7c4>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a2a      	ldr	r2, [pc, #168]	; (8002da8 <HAL_RCC_OscConfig+0x7c4>)
 8002cfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d02:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d04:	4b28      	ldr	r3, [pc, #160]	; (8002da8 <HAL_RCC_OscConfig+0x7c4>)
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	4a27      	ldr	r2, [pc, #156]	; (8002da8 <HAL_RCC_OscConfig+0x7c4>)
 8002d0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d0e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d10:	f7fe f952 	bl	8000fb8 <HAL_GetTick>
 8002d14:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d18:	f7fe f94e 	bl	8000fb8 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e03a      	b.n	8002da0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d2a:	4b1f      	ldr	r3, [pc, #124]	; (8002da8 <HAL_RCC_OscConfig+0x7c4>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d0f0      	beq.n	8002d18 <HAL_RCC_OscConfig+0x734>
 8002d36:	e032      	b.n	8002d9e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	2b0c      	cmp	r3, #12
 8002d3c:	d02d      	beq.n	8002d9a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d3e:	4b1a      	ldr	r3, [pc, #104]	; (8002da8 <HAL_RCC_OscConfig+0x7c4>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a19      	ldr	r2, [pc, #100]	; (8002da8 <HAL_RCC_OscConfig+0x7c4>)
 8002d44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d48:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002d4a:	4b17      	ldr	r3, [pc, #92]	; (8002da8 <HAL_RCC_OscConfig+0x7c4>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d105      	bne.n	8002d62 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002d56:	4b14      	ldr	r3, [pc, #80]	; (8002da8 <HAL_RCC_OscConfig+0x7c4>)
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	4a13      	ldr	r2, [pc, #76]	; (8002da8 <HAL_RCC_OscConfig+0x7c4>)
 8002d5c:	f023 0303 	bic.w	r3, r3, #3
 8002d60:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002d62:	4b11      	ldr	r3, [pc, #68]	; (8002da8 <HAL_RCC_OscConfig+0x7c4>)
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	4a10      	ldr	r2, [pc, #64]	; (8002da8 <HAL_RCC_OscConfig+0x7c4>)
 8002d68:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002d6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d70:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d72:	f7fe f921 	bl	8000fb8 <HAL_GetTick>
 8002d76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d78:	e008      	b.n	8002d8c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d7a:	f7fe f91d 	bl	8000fb8 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d901      	bls.n	8002d8c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e009      	b.n	8002da0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d8c:	4b06      	ldr	r3, [pc, #24]	; (8002da8 <HAL_RCC_OscConfig+0x7c4>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d1f0      	bne.n	8002d7a <HAL_RCC_OscConfig+0x796>
 8002d98:	e001      	b.n	8002d9e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e000      	b.n	8002da0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3720      	adds	r7, #32
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	40021000 	.word	0x40021000
 8002dac:	f99d808c 	.word	0xf99d808c

08002db0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d101      	bne.n	8002dc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e0c8      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dc4:	4b66      	ldr	r3, [pc, #408]	; (8002f60 <HAL_RCC_ClockConfig+0x1b0>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0307 	and.w	r3, r3, #7
 8002dcc:	683a      	ldr	r2, [r7, #0]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d910      	bls.n	8002df4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dd2:	4b63      	ldr	r3, [pc, #396]	; (8002f60 <HAL_RCC_ClockConfig+0x1b0>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f023 0207 	bic.w	r2, r3, #7
 8002dda:	4961      	ldr	r1, [pc, #388]	; (8002f60 <HAL_RCC_ClockConfig+0x1b0>)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002de2:	4b5f      	ldr	r3, [pc, #380]	; (8002f60 <HAL_RCC_ClockConfig+0x1b0>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0307 	and.w	r3, r3, #7
 8002dea:	683a      	ldr	r2, [r7, #0]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d001      	beq.n	8002df4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e0b0      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0301 	and.w	r3, r3, #1
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d04c      	beq.n	8002e9a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	2b03      	cmp	r3, #3
 8002e06:	d107      	bne.n	8002e18 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e08:	4b56      	ldr	r3, [pc, #344]	; (8002f64 <HAL_RCC_ClockConfig+0x1b4>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d121      	bne.n	8002e58 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e09e      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d107      	bne.n	8002e30 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e20:	4b50      	ldr	r3, [pc, #320]	; (8002f64 <HAL_RCC_ClockConfig+0x1b4>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d115      	bne.n	8002e58 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e092      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d107      	bne.n	8002e48 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e38:	4b4a      	ldr	r3, [pc, #296]	; (8002f64 <HAL_RCC_ClockConfig+0x1b4>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0302 	and.w	r3, r3, #2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d109      	bne.n	8002e58 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e086      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e48:	4b46      	ldr	r3, [pc, #280]	; (8002f64 <HAL_RCC_ClockConfig+0x1b4>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d101      	bne.n	8002e58 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e07e      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e58:	4b42      	ldr	r3, [pc, #264]	; (8002f64 <HAL_RCC_ClockConfig+0x1b4>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f023 0203 	bic.w	r2, r3, #3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	493f      	ldr	r1, [pc, #252]	; (8002f64 <HAL_RCC_ClockConfig+0x1b4>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e6a:	f7fe f8a5 	bl	8000fb8 <HAL_GetTick>
 8002e6e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e70:	e00a      	b.n	8002e88 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e72:	f7fe f8a1 	bl	8000fb8 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e066      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e88:	4b36      	ldr	r3, [pc, #216]	; (8002f64 <HAL_RCC_ClockConfig+0x1b4>)
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f003 020c 	and.w	r2, r3, #12
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d1eb      	bne.n	8002e72 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d008      	beq.n	8002eb8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ea6:	4b2f      	ldr	r3, [pc, #188]	; (8002f64 <HAL_RCC_ClockConfig+0x1b4>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	492c      	ldr	r1, [pc, #176]	; (8002f64 <HAL_RCC_ClockConfig+0x1b4>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002eb8:	4b29      	ldr	r3, [pc, #164]	; (8002f60 <HAL_RCC_ClockConfig+0x1b0>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0307 	and.w	r3, r3, #7
 8002ec0:	683a      	ldr	r2, [r7, #0]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d210      	bcs.n	8002ee8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ec6:	4b26      	ldr	r3, [pc, #152]	; (8002f60 <HAL_RCC_ClockConfig+0x1b0>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f023 0207 	bic.w	r2, r3, #7
 8002ece:	4924      	ldr	r1, [pc, #144]	; (8002f60 <HAL_RCC_ClockConfig+0x1b0>)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ed6:	4b22      	ldr	r3, [pc, #136]	; (8002f60 <HAL_RCC_ClockConfig+0x1b0>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0307 	and.w	r3, r3, #7
 8002ede:	683a      	ldr	r2, [r7, #0]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d001      	beq.n	8002ee8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e036      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0304 	and.w	r3, r3, #4
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d008      	beq.n	8002f06 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ef4:	4b1b      	ldr	r3, [pc, #108]	; (8002f64 <HAL_RCC_ClockConfig+0x1b4>)
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	4918      	ldr	r1, [pc, #96]	; (8002f64 <HAL_RCC_ClockConfig+0x1b4>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0308 	and.w	r3, r3, #8
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d009      	beq.n	8002f26 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f12:	4b14      	ldr	r3, [pc, #80]	; (8002f64 <HAL_RCC_ClockConfig+0x1b4>)
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	4910      	ldr	r1, [pc, #64]	; (8002f64 <HAL_RCC_ClockConfig+0x1b4>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f26:	f000 f825 	bl	8002f74 <HAL_RCC_GetSysClockFreq>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	4b0d      	ldr	r3, [pc, #52]	; (8002f64 <HAL_RCC_ClockConfig+0x1b4>)
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	091b      	lsrs	r3, r3, #4
 8002f32:	f003 030f 	and.w	r3, r3, #15
 8002f36:	490c      	ldr	r1, [pc, #48]	; (8002f68 <HAL_RCC_ClockConfig+0x1b8>)
 8002f38:	5ccb      	ldrb	r3, [r1, r3]
 8002f3a:	f003 031f 	and.w	r3, r3, #31
 8002f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f42:	4a0a      	ldr	r2, [pc, #40]	; (8002f6c <HAL_RCC_ClockConfig+0x1bc>)
 8002f44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f46:	4b0a      	ldr	r3, [pc, #40]	; (8002f70 <HAL_RCC_ClockConfig+0x1c0>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7fd ffe4 	bl	8000f18 <HAL_InitTick>
 8002f50:	4603      	mov	r3, r0
 8002f52:	72fb      	strb	r3, [r7, #11]

  return status;
 8002f54:	7afb      	ldrb	r3, [r7, #11]
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	40022000 	.word	0x40022000
 8002f64:	40021000 	.word	0x40021000
 8002f68:	0800604c 	.word	0x0800604c
 8002f6c:	20000000 	.word	0x20000000
 8002f70:	20000004 	.word	0x20000004

08002f74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b089      	sub	sp, #36	; 0x24
 8002f78:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	61fb      	str	r3, [r7, #28]
 8002f7e:	2300      	movs	r3, #0
 8002f80:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f82:	4b3e      	ldr	r3, [pc, #248]	; (800307c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 030c 	and.w	r3, r3, #12
 8002f8a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f8c:	4b3b      	ldr	r3, [pc, #236]	; (800307c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	f003 0303 	and.w	r3, r3, #3
 8002f94:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d005      	beq.n	8002fa8 <HAL_RCC_GetSysClockFreq+0x34>
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	2b0c      	cmp	r3, #12
 8002fa0:	d121      	bne.n	8002fe6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d11e      	bne.n	8002fe6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002fa8:	4b34      	ldr	r3, [pc, #208]	; (800307c <HAL_RCC_GetSysClockFreq+0x108>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0308 	and.w	r3, r3, #8
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d107      	bne.n	8002fc4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002fb4:	4b31      	ldr	r3, [pc, #196]	; (800307c <HAL_RCC_GetSysClockFreq+0x108>)
 8002fb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fba:	0a1b      	lsrs	r3, r3, #8
 8002fbc:	f003 030f 	and.w	r3, r3, #15
 8002fc0:	61fb      	str	r3, [r7, #28]
 8002fc2:	e005      	b.n	8002fd0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002fc4:	4b2d      	ldr	r3, [pc, #180]	; (800307c <HAL_RCC_GetSysClockFreq+0x108>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	091b      	lsrs	r3, r3, #4
 8002fca:	f003 030f 	and.w	r3, r3, #15
 8002fce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002fd0:	4a2b      	ldr	r2, [pc, #172]	; (8003080 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fd8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d10d      	bne.n	8002ffc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fe4:	e00a      	b.n	8002ffc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	2b04      	cmp	r3, #4
 8002fea:	d102      	bne.n	8002ff2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002fec:	4b25      	ldr	r3, [pc, #148]	; (8003084 <HAL_RCC_GetSysClockFreq+0x110>)
 8002fee:	61bb      	str	r3, [r7, #24]
 8002ff0:	e004      	b.n	8002ffc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	2b08      	cmp	r3, #8
 8002ff6:	d101      	bne.n	8002ffc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ff8:	4b23      	ldr	r3, [pc, #140]	; (8003088 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ffa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	2b0c      	cmp	r3, #12
 8003000:	d134      	bne.n	800306c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003002:	4b1e      	ldr	r3, [pc, #120]	; (800307c <HAL_RCC_GetSysClockFreq+0x108>)
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	f003 0303 	and.w	r3, r3, #3
 800300a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	2b02      	cmp	r3, #2
 8003010:	d003      	beq.n	800301a <HAL_RCC_GetSysClockFreq+0xa6>
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	2b03      	cmp	r3, #3
 8003016:	d003      	beq.n	8003020 <HAL_RCC_GetSysClockFreq+0xac>
 8003018:	e005      	b.n	8003026 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800301a:	4b1a      	ldr	r3, [pc, #104]	; (8003084 <HAL_RCC_GetSysClockFreq+0x110>)
 800301c:	617b      	str	r3, [r7, #20]
      break;
 800301e:	e005      	b.n	800302c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003020:	4b19      	ldr	r3, [pc, #100]	; (8003088 <HAL_RCC_GetSysClockFreq+0x114>)
 8003022:	617b      	str	r3, [r7, #20]
      break;
 8003024:	e002      	b.n	800302c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	617b      	str	r3, [r7, #20]
      break;
 800302a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800302c:	4b13      	ldr	r3, [pc, #76]	; (800307c <HAL_RCC_GetSysClockFreq+0x108>)
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	091b      	lsrs	r3, r3, #4
 8003032:	f003 0307 	and.w	r3, r3, #7
 8003036:	3301      	adds	r3, #1
 8003038:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800303a:	4b10      	ldr	r3, [pc, #64]	; (800307c <HAL_RCC_GetSysClockFreq+0x108>)
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	0a1b      	lsrs	r3, r3, #8
 8003040:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003044:	697a      	ldr	r2, [r7, #20]
 8003046:	fb02 f203 	mul.w	r2, r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003050:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003052:	4b0a      	ldr	r3, [pc, #40]	; (800307c <HAL_RCC_GetSysClockFreq+0x108>)
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	0e5b      	lsrs	r3, r3, #25
 8003058:	f003 0303 	and.w	r3, r3, #3
 800305c:	3301      	adds	r3, #1
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	fbb2 f3f3 	udiv	r3, r2, r3
 800306a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800306c:	69bb      	ldr	r3, [r7, #24]
}
 800306e:	4618      	mov	r0, r3
 8003070:	3724      	adds	r7, #36	; 0x24
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	40021000 	.word	0x40021000
 8003080:	08006064 	.word	0x08006064
 8003084:	00f42400 	.word	0x00f42400
 8003088:	007a1200 	.word	0x007a1200

0800308c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003090:	4b03      	ldr	r3, [pc, #12]	; (80030a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003092:	681b      	ldr	r3, [r3, #0]
}
 8003094:	4618      	mov	r0, r3
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	20000000 	.word	0x20000000

080030a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80030a8:	f7ff fff0 	bl	800308c <HAL_RCC_GetHCLKFreq>
 80030ac:	4602      	mov	r2, r0
 80030ae:	4b06      	ldr	r3, [pc, #24]	; (80030c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	0a1b      	lsrs	r3, r3, #8
 80030b4:	f003 0307 	and.w	r3, r3, #7
 80030b8:	4904      	ldr	r1, [pc, #16]	; (80030cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80030ba:	5ccb      	ldrb	r3, [r1, r3]
 80030bc:	f003 031f 	and.w	r3, r3, #31
 80030c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	40021000 	.word	0x40021000
 80030cc:	0800605c 	.word	0x0800605c

080030d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80030d4:	f7ff ffda 	bl	800308c <HAL_RCC_GetHCLKFreq>
 80030d8:	4602      	mov	r2, r0
 80030da:	4b06      	ldr	r3, [pc, #24]	; (80030f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	0adb      	lsrs	r3, r3, #11
 80030e0:	f003 0307 	and.w	r3, r3, #7
 80030e4:	4904      	ldr	r1, [pc, #16]	; (80030f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80030e6:	5ccb      	ldrb	r3, [r1, r3]
 80030e8:	f003 031f 	and.w	r3, r3, #31
 80030ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	40021000 	.word	0x40021000
 80030f8:	0800605c 	.word	0x0800605c

080030fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b086      	sub	sp, #24
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003104:	2300      	movs	r3, #0
 8003106:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003108:	4b2a      	ldr	r3, [pc, #168]	; (80031b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800310a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800310c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d003      	beq.n	800311c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003114:	f7ff fa02 	bl	800251c <HAL_PWREx_GetVoltageRange>
 8003118:	6178      	str	r0, [r7, #20]
 800311a:	e014      	b.n	8003146 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800311c:	4b25      	ldr	r3, [pc, #148]	; (80031b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800311e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003120:	4a24      	ldr	r2, [pc, #144]	; (80031b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003122:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003126:	6593      	str	r3, [r2, #88]	; 0x58
 8003128:	4b22      	ldr	r3, [pc, #136]	; (80031b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800312a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800312c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003130:	60fb      	str	r3, [r7, #12]
 8003132:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003134:	f7ff f9f2 	bl	800251c <HAL_PWREx_GetVoltageRange>
 8003138:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800313a:	4b1e      	ldr	r3, [pc, #120]	; (80031b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800313c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800313e:	4a1d      	ldr	r2, [pc, #116]	; (80031b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003140:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003144:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800314c:	d10b      	bne.n	8003166 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2b80      	cmp	r3, #128	; 0x80
 8003152:	d919      	bls.n	8003188 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2ba0      	cmp	r3, #160	; 0xa0
 8003158:	d902      	bls.n	8003160 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800315a:	2302      	movs	r3, #2
 800315c:	613b      	str	r3, [r7, #16]
 800315e:	e013      	b.n	8003188 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003160:	2301      	movs	r3, #1
 8003162:	613b      	str	r3, [r7, #16]
 8003164:	e010      	b.n	8003188 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2b80      	cmp	r3, #128	; 0x80
 800316a:	d902      	bls.n	8003172 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800316c:	2303      	movs	r3, #3
 800316e:	613b      	str	r3, [r7, #16]
 8003170:	e00a      	b.n	8003188 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2b80      	cmp	r3, #128	; 0x80
 8003176:	d102      	bne.n	800317e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003178:	2302      	movs	r3, #2
 800317a:	613b      	str	r3, [r7, #16]
 800317c:	e004      	b.n	8003188 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2b70      	cmp	r3, #112	; 0x70
 8003182:	d101      	bne.n	8003188 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003184:	2301      	movs	r3, #1
 8003186:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003188:	4b0b      	ldr	r3, [pc, #44]	; (80031b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f023 0207 	bic.w	r2, r3, #7
 8003190:	4909      	ldr	r1, [pc, #36]	; (80031b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	4313      	orrs	r3, r2
 8003196:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003198:	4b07      	ldr	r3, [pc, #28]	; (80031b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0307 	and.w	r3, r3, #7
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d001      	beq.n	80031aa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e000      	b.n	80031ac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3718      	adds	r7, #24
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	40021000 	.word	0x40021000
 80031b8:	40022000 	.word	0x40022000

080031bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031c4:	2300      	movs	r3, #0
 80031c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031c8:	2300      	movs	r3, #0
 80031ca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d041      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031dc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80031e0:	d02a      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80031e2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80031e6:	d824      	bhi.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80031e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80031ec:	d008      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80031ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80031f2:	d81e      	bhi.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d00a      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x52>
 80031f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031fc:	d010      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80031fe:	e018      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003200:	4b86      	ldr	r3, [pc, #536]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	4a85      	ldr	r2, [pc, #532]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003206:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800320a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800320c:	e015      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	3304      	adds	r3, #4
 8003212:	2100      	movs	r1, #0
 8003214:	4618      	mov	r0, r3
 8003216:	f000 fabb 	bl	8003790 <RCCEx_PLLSAI1_Config>
 800321a:	4603      	mov	r3, r0
 800321c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800321e:	e00c      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	3320      	adds	r3, #32
 8003224:	2100      	movs	r1, #0
 8003226:	4618      	mov	r0, r3
 8003228:	f000 fba6 	bl	8003978 <RCCEx_PLLSAI2_Config>
 800322c:	4603      	mov	r3, r0
 800322e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003230:	e003      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	74fb      	strb	r3, [r7, #19]
      break;
 8003236:	e000      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003238:	bf00      	nop
    }

    if(ret == HAL_OK)
 800323a:	7cfb      	ldrb	r3, [r7, #19]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d10b      	bne.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003240:	4b76      	ldr	r3, [pc, #472]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003246:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800324e:	4973      	ldr	r1, [pc, #460]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003250:	4313      	orrs	r3, r2
 8003252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003256:	e001      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003258:	7cfb      	ldrb	r3, [r7, #19]
 800325a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d041      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800326c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003270:	d02a      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003272:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003276:	d824      	bhi.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003278:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800327c:	d008      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800327e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003282:	d81e      	bhi.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003284:	2b00      	cmp	r3, #0
 8003286:	d00a      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003288:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800328c:	d010      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800328e:	e018      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003290:	4b62      	ldr	r3, [pc, #392]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	4a61      	ldr	r2, [pc, #388]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003296:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800329a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800329c:	e015      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	3304      	adds	r3, #4
 80032a2:	2100      	movs	r1, #0
 80032a4:	4618      	mov	r0, r3
 80032a6:	f000 fa73 	bl	8003790 <RCCEx_PLLSAI1_Config>
 80032aa:	4603      	mov	r3, r0
 80032ac:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032ae:	e00c      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	3320      	adds	r3, #32
 80032b4:	2100      	movs	r1, #0
 80032b6:	4618      	mov	r0, r3
 80032b8:	f000 fb5e 	bl	8003978 <RCCEx_PLLSAI2_Config>
 80032bc:	4603      	mov	r3, r0
 80032be:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032c0:	e003      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	74fb      	strb	r3, [r7, #19]
      break;
 80032c6:	e000      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80032c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032ca:	7cfb      	ldrb	r3, [r7, #19]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d10b      	bne.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80032d0:	4b52      	ldr	r3, [pc, #328]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032de:	494f      	ldr	r1, [pc, #316]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80032e6:	e001      	b.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032e8:	7cfb      	ldrb	r3, [r7, #19]
 80032ea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f000 80a0 	beq.w	800343a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032fa:	2300      	movs	r3, #0
 80032fc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80032fe:	4b47      	ldr	r3, [pc, #284]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800330a:	2301      	movs	r3, #1
 800330c:	e000      	b.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800330e:	2300      	movs	r3, #0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00d      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003314:	4b41      	ldr	r3, [pc, #260]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003318:	4a40      	ldr	r2, [pc, #256]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800331a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800331e:	6593      	str	r3, [r2, #88]	; 0x58
 8003320:	4b3e      	ldr	r3, [pc, #248]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003324:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003328:	60bb      	str	r3, [r7, #8]
 800332a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800332c:	2301      	movs	r3, #1
 800332e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003330:	4b3b      	ldr	r3, [pc, #236]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a3a      	ldr	r2, [pc, #232]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003336:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800333a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800333c:	f7fd fe3c 	bl	8000fb8 <HAL_GetTick>
 8003340:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003342:	e009      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003344:	f7fd fe38 	bl	8000fb8 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b02      	cmp	r3, #2
 8003350:	d902      	bls.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	74fb      	strb	r3, [r7, #19]
        break;
 8003356:	e005      	b.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003358:	4b31      	ldr	r3, [pc, #196]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003360:	2b00      	cmp	r3, #0
 8003362:	d0ef      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003364:	7cfb      	ldrb	r3, [r7, #19]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d15c      	bne.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800336a:	4b2c      	ldr	r3, [pc, #176]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800336c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003370:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003374:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d01f      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	429a      	cmp	r2, r3
 8003386:	d019      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003388:	4b24      	ldr	r3, [pc, #144]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800338a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800338e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003392:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003394:	4b21      	ldr	r3, [pc, #132]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800339a:	4a20      	ldr	r2, [pc, #128]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800339c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033a4:	4b1d      	ldr	r3, [pc, #116]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033aa:	4a1c      	ldr	r2, [pc, #112]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033b4:	4a19      	ldr	r2, [pc, #100]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d016      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c6:	f7fd fdf7 	bl	8000fb8 <HAL_GetTick>
 80033ca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033cc:	e00b      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ce:	f7fd fdf3 	bl	8000fb8 <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033dc:	4293      	cmp	r3, r2
 80033de:	d902      	bls.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	74fb      	strb	r3, [r7, #19]
            break;
 80033e4:	e006      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033e6:	4b0d      	ldr	r3, [pc, #52]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d0ec      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80033f4:	7cfb      	ldrb	r3, [r7, #19]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d10c      	bne.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033fa:	4b08      	ldr	r3, [pc, #32]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003400:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800340a:	4904      	ldr	r1, [pc, #16]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800340c:	4313      	orrs	r3, r2
 800340e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003412:	e009      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003414:	7cfb      	ldrb	r3, [r7, #19]
 8003416:	74bb      	strb	r3, [r7, #18]
 8003418:	e006      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800341a:	bf00      	nop
 800341c:	40021000 	.word	0x40021000
 8003420:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003424:	7cfb      	ldrb	r3, [r7, #19]
 8003426:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003428:	7c7b      	ldrb	r3, [r7, #17]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d105      	bne.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800342e:	4b9e      	ldr	r3, [pc, #632]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003432:	4a9d      	ldr	r2, [pc, #628]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003434:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003438:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00a      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003446:	4b98      	ldr	r3, [pc, #608]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800344c:	f023 0203 	bic.w	r2, r3, #3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003454:	4994      	ldr	r1, [pc, #592]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003456:	4313      	orrs	r3, r2
 8003458:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0302 	and.w	r3, r3, #2
 8003464:	2b00      	cmp	r3, #0
 8003466:	d00a      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003468:	4b8f      	ldr	r3, [pc, #572]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800346a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800346e:	f023 020c 	bic.w	r2, r3, #12
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003476:	498c      	ldr	r1, [pc, #560]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003478:	4313      	orrs	r3, r2
 800347a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0304 	and.w	r3, r3, #4
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00a      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800348a:	4b87      	ldr	r3, [pc, #540]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800348c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003490:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003498:	4983      	ldr	r1, [pc, #524]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800349a:	4313      	orrs	r3, r2
 800349c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0308 	and.w	r3, r3, #8
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00a      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034ac:	4b7e      	ldr	r3, [pc, #504]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ba:	497b      	ldr	r1, [pc, #492]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0310 	and.w	r3, r3, #16
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00a      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80034ce:	4b76      	ldr	r3, [pc, #472]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034dc:	4972      	ldr	r1, [pc, #456]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0320 	and.w	r3, r3, #32
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d00a      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034f0:	4b6d      	ldr	r3, [pc, #436]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034fe:	496a      	ldr	r1, [pc, #424]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003500:	4313      	orrs	r3, r2
 8003502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00a      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003512:	4b65      	ldr	r3, [pc, #404]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003518:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003520:	4961      	ldr	r1, [pc, #388]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003522:	4313      	orrs	r3, r2
 8003524:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003530:	2b00      	cmp	r3, #0
 8003532:	d00a      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003534:	4b5c      	ldr	r3, [pc, #368]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800353a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003542:	4959      	ldr	r1, [pc, #356]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003544:	4313      	orrs	r3, r2
 8003546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00a      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003556:	4b54      	ldr	r3, [pc, #336]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800355c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003564:	4950      	ldr	r1, [pc, #320]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003566:	4313      	orrs	r3, r2
 8003568:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00a      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003578:	4b4b      	ldr	r3, [pc, #300]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800357a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800357e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003586:	4948      	ldr	r1, [pc, #288]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003588:	4313      	orrs	r3, r2
 800358a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00a      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800359a:	4b43      	ldr	r3, [pc, #268]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800359c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a8:	493f      	ldr	r1, [pc, #252]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d028      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035bc:	4b3a      	ldr	r3, [pc, #232]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035ca:	4937      	ldr	r1, [pc, #220]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035da:	d106      	bne.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035dc:	4b32      	ldr	r3, [pc, #200]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	4a31      	ldr	r2, [pc, #196]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035e6:	60d3      	str	r3, [r2, #12]
 80035e8:	e011      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035f2:	d10c      	bne.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	3304      	adds	r3, #4
 80035f8:	2101      	movs	r1, #1
 80035fa:	4618      	mov	r0, r3
 80035fc:	f000 f8c8 	bl	8003790 <RCCEx_PLLSAI1_Config>
 8003600:	4603      	mov	r3, r0
 8003602:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003604:	7cfb      	ldrb	r3, [r7, #19]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800360a:	7cfb      	ldrb	r3, [r7, #19]
 800360c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d028      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800361a:	4b23      	ldr	r3, [pc, #140]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800361c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003620:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003628:	491f      	ldr	r1, [pc, #124]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800362a:	4313      	orrs	r3, r2
 800362c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003634:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003638:	d106      	bne.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800363a:	4b1b      	ldr	r3, [pc, #108]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	4a1a      	ldr	r2, [pc, #104]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003640:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003644:	60d3      	str	r3, [r2, #12]
 8003646:	e011      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003650:	d10c      	bne.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	3304      	adds	r3, #4
 8003656:	2101      	movs	r1, #1
 8003658:	4618      	mov	r0, r3
 800365a:	f000 f899 	bl	8003790 <RCCEx_PLLSAI1_Config>
 800365e:	4603      	mov	r3, r0
 8003660:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003662:	7cfb      	ldrb	r3, [r7, #19]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d001      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003668:	7cfb      	ldrb	r3, [r7, #19]
 800366a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d02b      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003678:	4b0b      	ldr	r3, [pc, #44]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800367a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800367e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003686:	4908      	ldr	r1, [pc, #32]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003688:	4313      	orrs	r3, r2
 800368a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003692:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003696:	d109      	bne.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003698:	4b03      	ldr	r3, [pc, #12]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	4a02      	ldr	r2, [pc, #8]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800369e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036a2:	60d3      	str	r3, [r2, #12]
 80036a4:	e014      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80036a6:	bf00      	nop
 80036a8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036b4:	d10c      	bne.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	3304      	adds	r3, #4
 80036ba:	2101      	movs	r1, #1
 80036bc:	4618      	mov	r0, r3
 80036be:	f000 f867 	bl	8003790 <RCCEx_PLLSAI1_Config>
 80036c2:	4603      	mov	r3, r0
 80036c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036c6:	7cfb      	ldrb	r3, [r7, #19]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80036cc:	7cfb      	ldrb	r3, [r7, #19]
 80036ce:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d02f      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036dc:	4b2b      	ldr	r3, [pc, #172]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036ea:	4928      	ldr	r1, [pc, #160]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036fa:	d10d      	bne.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	3304      	adds	r3, #4
 8003700:	2102      	movs	r1, #2
 8003702:	4618      	mov	r0, r3
 8003704:	f000 f844 	bl	8003790 <RCCEx_PLLSAI1_Config>
 8003708:	4603      	mov	r3, r0
 800370a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800370c:	7cfb      	ldrb	r3, [r7, #19]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d014      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003712:	7cfb      	ldrb	r3, [r7, #19]
 8003714:	74bb      	strb	r3, [r7, #18]
 8003716:	e011      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800371c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003720:	d10c      	bne.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	3320      	adds	r3, #32
 8003726:	2102      	movs	r1, #2
 8003728:	4618      	mov	r0, r3
 800372a:	f000 f925 	bl	8003978 <RCCEx_PLLSAI2_Config>
 800372e:	4603      	mov	r3, r0
 8003730:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003732:	7cfb      	ldrb	r3, [r7, #19]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d001      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003738:	7cfb      	ldrb	r3, [r7, #19]
 800373a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d00a      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003748:	4b10      	ldr	r3, [pc, #64]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800374a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800374e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003756:	490d      	ldr	r1, [pc, #52]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003758:	4313      	orrs	r3, r2
 800375a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00b      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800376a:	4b08      	ldr	r3, [pc, #32]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800376c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003770:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800377a:	4904      	ldr	r1, [pc, #16]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800377c:	4313      	orrs	r3, r2
 800377e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003782:	7cbb      	ldrb	r3, [r7, #18]
}
 8003784:	4618      	mov	r0, r3
 8003786:	3718      	adds	r7, #24
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	40021000 	.word	0x40021000

08003790 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800379a:	2300      	movs	r3, #0
 800379c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800379e:	4b75      	ldr	r3, [pc, #468]	; (8003974 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	f003 0303 	and.w	r3, r3, #3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d018      	beq.n	80037dc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80037aa:	4b72      	ldr	r3, [pc, #456]	; (8003974 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	f003 0203 	and.w	r2, r3, #3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d10d      	bne.n	80037d6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
       ||
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d009      	beq.n	80037d6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80037c2:	4b6c      	ldr	r3, [pc, #432]	; (8003974 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	091b      	lsrs	r3, r3, #4
 80037c8:	f003 0307 	and.w	r3, r3, #7
 80037cc:	1c5a      	adds	r2, r3, #1
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
       ||
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d047      	beq.n	8003866 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	73fb      	strb	r3, [r7, #15]
 80037da:	e044      	b.n	8003866 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2b03      	cmp	r3, #3
 80037e2:	d018      	beq.n	8003816 <RCCEx_PLLSAI1_Config+0x86>
 80037e4:	2b03      	cmp	r3, #3
 80037e6:	d825      	bhi.n	8003834 <RCCEx_PLLSAI1_Config+0xa4>
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d002      	beq.n	80037f2 <RCCEx_PLLSAI1_Config+0x62>
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d009      	beq.n	8003804 <RCCEx_PLLSAI1_Config+0x74>
 80037f0:	e020      	b.n	8003834 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037f2:	4b60      	ldr	r3, [pc, #384]	; (8003974 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d11d      	bne.n	800383a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003802:	e01a      	b.n	800383a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003804:	4b5b      	ldr	r3, [pc, #364]	; (8003974 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800380c:	2b00      	cmp	r3, #0
 800380e:	d116      	bne.n	800383e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003814:	e013      	b.n	800383e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003816:	4b57      	ldr	r3, [pc, #348]	; (8003974 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10f      	bne.n	8003842 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003822:	4b54      	ldr	r3, [pc, #336]	; (8003974 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d109      	bne.n	8003842 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003832:	e006      	b.n	8003842 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	73fb      	strb	r3, [r7, #15]
      break;
 8003838:	e004      	b.n	8003844 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800383a:	bf00      	nop
 800383c:	e002      	b.n	8003844 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800383e:	bf00      	nop
 8003840:	e000      	b.n	8003844 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003842:	bf00      	nop
    }

    if(status == HAL_OK)
 8003844:	7bfb      	ldrb	r3, [r7, #15]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10d      	bne.n	8003866 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800384a:	4b4a      	ldr	r3, [pc, #296]	; (8003974 <RCCEx_PLLSAI1_Config+0x1e4>)
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6819      	ldr	r1, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	3b01      	subs	r3, #1
 800385c:	011b      	lsls	r3, r3, #4
 800385e:	430b      	orrs	r3, r1
 8003860:	4944      	ldr	r1, [pc, #272]	; (8003974 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003862:	4313      	orrs	r3, r2
 8003864:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003866:	7bfb      	ldrb	r3, [r7, #15]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d17d      	bne.n	8003968 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800386c:	4b41      	ldr	r3, [pc, #260]	; (8003974 <RCCEx_PLLSAI1_Config+0x1e4>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a40      	ldr	r2, [pc, #256]	; (8003974 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003872:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003876:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003878:	f7fd fb9e 	bl	8000fb8 <HAL_GetTick>
 800387c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800387e:	e009      	b.n	8003894 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003880:	f7fd fb9a 	bl	8000fb8 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b02      	cmp	r3, #2
 800388c:	d902      	bls.n	8003894 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	73fb      	strb	r3, [r7, #15]
        break;
 8003892:	e005      	b.n	80038a0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003894:	4b37      	ldr	r3, [pc, #220]	; (8003974 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d1ef      	bne.n	8003880 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80038a0:	7bfb      	ldrb	r3, [r7, #15]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d160      	bne.n	8003968 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d111      	bne.n	80038d0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038ac:	4b31      	ldr	r3, [pc, #196]	; (8003974 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80038b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	6892      	ldr	r2, [r2, #8]
 80038bc:	0211      	lsls	r1, r2, #8
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	68d2      	ldr	r2, [r2, #12]
 80038c2:	0912      	lsrs	r2, r2, #4
 80038c4:	0452      	lsls	r2, r2, #17
 80038c6:	430a      	orrs	r2, r1
 80038c8:	492a      	ldr	r1, [pc, #168]	; (8003974 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	610b      	str	r3, [r1, #16]
 80038ce:	e027      	b.n	8003920 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d112      	bne.n	80038fc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038d6:	4b27      	ldr	r3, [pc, #156]	; (8003974 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80038de:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	6892      	ldr	r2, [r2, #8]
 80038e6:	0211      	lsls	r1, r2, #8
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	6912      	ldr	r2, [r2, #16]
 80038ec:	0852      	lsrs	r2, r2, #1
 80038ee:	3a01      	subs	r2, #1
 80038f0:	0552      	lsls	r2, r2, #21
 80038f2:	430a      	orrs	r2, r1
 80038f4:	491f      	ldr	r1, [pc, #124]	; (8003974 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	610b      	str	r3, [r1, #16]
 80038fa:	e011      	b.n	8003920 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038fc:	4b1d      	ldr	r3, [pc, #116]	; (8003974 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003904:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	6892      	ldr	r2, [r2, #8]
 800390c:	0211      	lsls	r1, r2, #8
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	6952      	ldr	r2, [r2, #20]
 8003912:	0852      	lsrs	r2, r2, #1
 8003914:	3a01      	subs	r2, #1
 8003916:	0652      	lsls	r2, r2, #25
 8003918:	430a      	orrs	r2, r1
 800391a:	4916      	ldr	r1, [pc, #88]	; (8003974 <RCCEx_PLLSAI1_Config+0x1e4>)
 800391c:	4313      	orrs	r3, r2
 800391e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003920:	4b14      	ldr	r3, [pc, #80]	; (8003974 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a13      	ldr	r2, [pc, #76]	; (8003974 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003926:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800392a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800392c:	f7fd fb44 	bl	8000fb8 <HAL_GetTick>
 8003930:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003932:	e009      	b.n	8003948 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003934:	f7fd fb40 	bl	8000fb8 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b02      	cmp	r3, #2
 8003940:	d902      	bls.n	8003948 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	73fb      	strb	r3, [r7, #15]
          break;
 8003946:	e005      	b.n	8003954 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003948:	4b0a      	ldr	r3, [pc, #40]	; (8003974 <RCCEx_PLLSAI1_Config+0x1e4>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d0ef      	beq.n	8003934 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003954:	7bfb      	ldrb	r3, [r7, #15]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d106      	bne.n	8003968 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800395a:	4b06      	ldr	r3, [pc, #24]	; (8003974 <RCCEx_PLLSAI1_Config+0x1e4>)
 800395c:	691a      	ldr	r2, [r3, #16]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	4904      	ldr	r1, [pc, #16]	; (8003974 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003964:	4313      	orrs	r3, r2
 8003966:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003968:	7bfb      	ldrb	r3, [r7, #15]
}
 800396a:	4618      	mov	r0, r3
 800396c:	3710      	adds	r7, #16
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	40021000 	.word	0x40021000

08003978 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003982:	2300      	movs	r3, #0
 8003984:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003986:	4b6a      	ldr	r3, [pc, #424]	; (8003b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	f003 0303 	and.w	r3, r3, #3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d018      	beq.n	80039c4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003992:	4b67      	ldr	r3, [pc, #412]	; (8003b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	f003 0203 	and.w	r2, r3, #3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d10d      	bne.n	80039be <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
       ||
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d009      	beq.n	80039be <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80039aa:	4b61      	ldr	r3, [pc, #388]	; (8003b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	091b      	lsrs	r3, r3, #4
 80039b0:	f003 0307 	and.w	r3, r3, #7
 80039b4:	1c5a      	adds	r2, r3, #1
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
       ||
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d047      	beq.n	8003a4e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	73fb      	strb	r3, [r7, #15]
 80039c2:	e044      	b.n	8003a4e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2b03      	cmp	r3, #3
 80039ca:	d018      	beq.n	80039fe <RCCEx_PLLSAI2_Config+0x86>
 80039cc:	2b03      	cmp	r3, #3
 80039ce:	d825      	bhi.n	8003a1c <RCCEx_PLLSAI2_Config+0xa4>
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d002      	beq.n	80039da <RCCEx_PLLSAI2_Config+0x62>
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d009      	beq.n	80039ec <RCCEx_PLLSAI2_Config+0x74>
 80039d8:	e020      	b.n	8003a1c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80039da:	4b55      	ldr	r3, [pc, #340]	; (8003b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d11d      	bne.n	8003a22 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039ea:	e01a      	b.n	8003a22 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80039ec:	4b50      	ldr	r3, [pc, #320]	; (8003b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d116      	bne.n	8003a26 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039fc:	e013      	b.n	8003a26 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80039fe:	4b4c      	ldr	r3, [pc, #304]	; (8003b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10f      	bne.n	8003a2a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a0a:	4b49      	ldr	r3, [pc, #292]	; (8003b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d109      	bne.n	8003a2a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a1a:	e006      	b.n	8003a2a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a20:	e004      	b.n	8003a2c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a22:	bf00      	nop
 8003a24:	e002      	b.n	8003a2c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a26:	bf00      	nop
 8003a28:	e000      	b.n	8003a2c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a2a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a2c:	7bfb      	ldrb	r3, [r7, #15]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10d      	bne.n	8003a4e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a32:	4b3f      	ldr	r3, [pc, #252]	; (8003b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6819      	ldr	r1, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	3b01      	subs	r3, #1
 8003a44:	011b      	lsls	r3, r3, #4
 8003a46:	430b      	orrs	r3, r1
 8003a48:	4939      	ldr	r1, [pc, #228]	; (8003b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a4e:	7bfb      	ldrb	r3, [r7, #15]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d167      	bne.n	8003b24 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003a54:	4b36      	ldr	r3, [pc, #216]	; (8003b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a35      	ldr	r2, [pc, #212]	; (8003b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a60:	f7fd faaa 	bl	8000fb8 <HAL_GetTick>
 8003a64:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a66:	e009      	b.n	8003a7c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a68:	f7fd faa6 	bl	8000fb8 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d902      	bls.n	8003a7c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	73fb      	strb	r3, [r7, #15]
        break;
 8003a7a:	e005      	b.n	8003a88 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a7c:	4b2c      	ldr	r3, [pc, #176]	; (8003b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1ef      	bne.n	8003a68 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003a88:	7bfb      	ldrb	r3, [r7, #15]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d14a      	bne.n	8003b24 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d111      	bne.n	8003ab8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a94:	4b26      	ldr	r3, [pc, #152]	; (8003b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a96:	695b      	ldr	r3, [r3, #20]
 8003a98:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003a9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	6892      	ldr	r2, [r2, #8]
 8003aa4:	0211      	lsls	r1, r2, #8
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	68d2      	ldr	r2, [r2, #12]
 8003aaa:	0912      	lsrs	r2, r2, #4
 8003aac:	0452      	lsls	r2, r2, #17
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	491f      	ldr	r1, [pc, #124]	; (8003b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	614b      	str	r3, [r1, #20]
 8003ab6:	e011      	b.n	8003adc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ab8:	4b1d      	ldr	r3, [pc, #116]	; (8003b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aba:	695b      	ldr	r3, [r3, #20]
 8003abc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003ac0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	6892      	ldr	r2, [r2, #8]
 8003ac8:	0211      	lsls	r1, r2, #8
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	6912      	ldr	r2, [r2, #16]
 8003ace:	0852      	lsrs	r2, r2, #1
 8003ad0:	3a01      	subs	r2, #1
 8003ad2:	0652      	lsls	r2, r2, #25
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	4916      	ldr	r1, [pc, #88]	; (8003b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003adc:	4b14      	ldr	r3, [pc, #80]	; (8003b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a13      	ldr	r2, [pc, #76]	; (8003b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ae2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ae6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ae8:	f7fd fa66 	bl	8000fb8 <HAL_GetTick>
 8003aec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003aee:	e009      	b.n	8003b04 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003af0:	f7fd fa62 	bl	8000fb8 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d902      	bls.n	8003b04 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	73fb      	strb	r3, [r7, #15]
          break;
 8003b02:	e005      	b.n	8003b10 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b04:	4b0a      	ldr	r3, [pc, #40]	; (8003b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d0ef      	beq.n	8003af0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003b10:	7bfb      	ldrb	r3, [r7, #15]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d106      	bne.n	8003b24 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003b16:	4b06      	ldr	r3, [pc, #24]	; (8003b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b18:	695a      	ldr	r2, [r3, #20]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	695b      	ldr	r3, [r3, #20]
 8003b1e:	4904      	ldr	r1, [pc, #16]	; (8003b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3710      	adds	r7, #16
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	40021000 	.word	0x40021000

08003b34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d101      	bne.n	8003b46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e049      	b.n	8003bda <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d106      	bne.n	8003b60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f7fd f81a 	bl	8000b94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2202      	movs	r2, #2
 8003b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	3304      	adds	r3, #4
 8003b70:	4619      	mov	r1, r3
 8003b72:	4610      	mov	r0, r2
 8003b74:	f000 f9aa 	bl	8003ecc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3708      	adds	r7, #8
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b082      	sub	sp, #8
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d101      	bne.n	8003bf4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e049      	b.n	8003c88 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d106      	bne.n	8003c0e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 f841 	bl	8003c90 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2202      	movs	r2, #2
 8003c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	3304      	adds	r3, #4
 8003c1e:	4619      	mov	r1, r3
 8003c20:	4610      	mov	r0, r2
 8003c22:	f000 f953 	bl	8003ecc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3708      	adds	r7, #8
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b086      	sub	sp, #24
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d101      	bne.n	8003cc2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003cbe:	2302      	movs	r3, #2
 8003cc0:	e0ff      	b.n	8003ec2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2b14      	cmp	r3, #20
 8003cce:	f200 80f0 	bhi.w	8003eb2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003cd2:	a201      	add	r2, pc, #4	; (adr r2, 8003cd8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd8:	08003d2d 	.word	0x08003d2d
 8003cdc:	08003eb3 	.word	0x08003eb3
 8003ce0:	08003eb3 	.word	0x08003eb3
 8003ce4:	08003eb3 	.word	0x08003eb3
 8003ce8:	08003d6d 	.word	0x08003d6d
 8003cec:	08003eb3 	.word	0x08003eb3
 8003cf0:	08003eb3 	.word	0x08003eb3
 8003cf4:	08003eb3 	.word	0x08003eb3
 8003cf8:	08003daf 	.word	0x08003daf
 8003cfc:	08003eb3 	.word	0x08003eb3
 8003d00:	08003eb3 	.word	0x08003eb3
 8003d04:	08003eb3 	.word	0x08003eb3
 8003d08:	08003def 	.word	0x08003def
 8003d0c:	08003eb3 	.word	0x08003eb3
 8003d10:	08003eb3 	.word	0x08003eb3
 8003d14:	08003eb3 	.word	0x08003eb3
 8003d18:	08003e31 	.word	0x08003e31
 8003d1c:	08003eb3 	.word	0x08003eb3
 8003d20:	08003eb3 	.word	0x08003eb3
 8003d24:	08003eb3 	.word	0x08003eb3
 8003d28:	08003e71 	.word	0x08003e71
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68b9      	ldr	r1, [r7, #8]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f000 f964 	bl	8004000 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	699a      	ldr	r2, [r3, #24]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f042 0208 	orr.w	r2, r2, #8
 8003d46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	699a      	ldr	r2, [r3, #24]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f022 0204 	bic.w	r2, r2, #4
 8003d56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	6999      	ldr	r1, [r3, #24]
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	691a      	ldr	r2, [r3, #16]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	430a      	orrs	r2, r1
 8003d68:	619a      	str	r2, [r3, #24]
      break;
 8003d6a:	e0a5      	b.n	8003eb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68b9      	ldr	r1, [r7, #8]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f000 f9d4 	bl	8004120 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	699a      	ldr	r2, [r3, #24]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	699a      	ldr	r2, [r3, #24]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	6999      	ldr	r1, [r3, #24]
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	021a      	lsls	r2, r3, #8
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	430a      	orrs	r2, r1
 8003daa:	619a      	str	r2, [r3, #24]
      break;
 8003dac:	e084      	b.n	8003eb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68b9      	ldr	r1, [r7, #8]
 8003db4:	4618      	mov	r0, r3
 8003db6:	f000 fa3d 	bl	8004234 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	69da      	ldr	r2, [r3, #28]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f042 0208 	orr.w	r2, r2, #8
 8003dc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	69da      	ldr	r2, [r3, #28]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f022 0204 	bic.w	r2, r2, #4
 8003dd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	69d9      	ldr	r1, [r3, #28]
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	691a      	ldr	r2, [r3, #16]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	430a      	orrs	r2, r1
 8003dea:	61da      	str	r2, [r3, #28]
      break;
 8003dec:	e064      	b.n	8003eb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68b9      	ldr	r1, [r7, #8]
 8003df4:	4618      	mov	r0, r3
 8003df6:	f000 faa5 	bl	8004344 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	69da      	ldr	r2, [r3, #28]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	69da      	ldr	r2, [r3, #28]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	69d9      	ldr	r1, [r3, #28]
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	021a      	lsls	r2, r3, #8
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	61da      	str	r2, [r3, #28]
      break;
 8003e2e:	e043      	b.n	8003eb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68b9      	ldr	r1, [r7, #8]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f000 faee 	bl	8004418 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f042 0208 	orr.w	r2, r2, #8
 8003e4a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f022 0204 	bic.w	r2, r2, #4
 8003e5a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	691a      	ldr	r2, [r3, #16]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	430a      	orrs	r2, r1
 8003e6c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003e6e:	e023      	b.n	8003eb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68b9      	ldr	r1, [r7, #8]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f000 fb32 	bl	80044e0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e8a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e9a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	021a      	lsls	r2, r3, #8
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	430a      	orrs	r2, r1
 8003eae:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003eb0:	e002      	b.n	8003eb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	75fb      	strb	r3, [r7, #23]
      break;
 8003eb6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ec0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3718      	adds	r7, #24
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop

08003ecc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b085      	sub	sp, #20
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a40      	ldr	r2, [pc, #256]	; (8003fe0 <TIM_Base_SetConfig+0x114>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d013      	beq.n	8003f0c <TIM_Base_SetConfig+0x40>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eea:	d00f      	beq.n	8003f0c <TIM_Base_SetConfig+0x40>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a3d      	ldr	r2, [pc, #244]	; (8003fe4 <TIM_Base_SetConfig+0x118>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d00b      	beq.n	8003f0c <TIM_Base_SetConfig+0x40>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a3c      	ldr	r2, [pc, #240]	; (8003fe8 <TIM_Base_SetConfig+0x11c>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d007      	beq.n	8003f0c <TIM_Base_SetConfig+0x40>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a3b      	ldr	r2, [pc, #236]	; (8003fec <TIM_Base_SetConfig+0x120>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d003      	beq.n	8003f0c <TIM_Base_SetConfig+0x40>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a3a      	ldr	r2, [pc, #232]	; (8003ff0 <TIM_Base_SetConfig+0x124>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d108      	bne.n	8003f1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a2f      	ldr	r2, [pc, #188]	; (8003fe0 <TIM_Base_SetConfig+0x114>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d01f      	beq.n	8003f66 <TIM_Base_SetConfig+0x9a>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f2c:	d01b      	beq.n	8003f66 <TIM_Base_SetConfig+0x9a>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a2c      	ldr	r2, [pc, #176]	; (8003fe4 <TIM_Base_SetConfig+0x118>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d017      	beq.n	8003f66 <TIM_Base_SetConfig+0x9a>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a2b      	ldr	r2, [pc, #172]	; (8003fe8 <TIM_Base_SetConfig+0x11c>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d013      	beq.n	8003f66 <TIM_Base_SetConfig+0x9a>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a2a      	ldr	r2, [pc, #168]	; (8003fec <TIM_Base_SetConfig+0x120>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d00f      	beq.n	8003f66 <TIM_Base_SetConfig+0x9a>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a29      	ldr	r2, [pc, #164]	; (8003ff0 <TIM_Base_SetConfig+0x124>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d00b      	beq.n	8003f66 <TIM_Base_SetConfig+0x9a>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a28      	ldr	r2, [pc, #160]	; (8003ff4 <TIM_Base_SetConfig+0x128>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d007      	beq.n	8003f66 <TIM_Base_SetConfig+0x9a>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a27      	ldr	r2, [pc, #156]	; (8003ff8 <TIM_Base_SetConfig+0x12c>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d003      	beq.n	8003f66 <TIM_Base_SetConfig+0x9a>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a26      	ldr	r2, [pc, #152]	; (8003ffc <TIM_Base_SetConfig+0x130>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d108      	bne.n	8003f78 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	689a      	ldr	r2, [r3, #8]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a10      	ldr	r2, [pc, #64]	; (8003fe0 <TIM_Base_SetConfig+0x114>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d00f      	beq.n	8003fc4 <TIM_Base_SetConfig+0xf8>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a12      	ldr	r2, [pc, #72]	; (8003ff0 <TIM_Base_SetConfig+0x124>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d00b      	beq.n	8003fc4 <TIM_Base_SetConfig+0xf8>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a11      	ldr	r2, [pc, #68]	; (8003ff4 <TIM_Base_SetConfig+0x128>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d007      	beq.n	8003fc4 <TIM_Base_SetConfig+0xf8>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a10      	ldr	r2, [pc, #64]	; (8003ff8 <TIM_Base_SetConfig+0x12c>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d003      	beq.n	8003fc4 <TIM_Base_SetConfig+0xf8>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a0f      	ldr	r2, [pc, #60]	; (8003ffc <TIM_Base_SetConfig+0x130>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d103      	bne.n	8003fcc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	691a      	ldr	r2, [r3, #16]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	615a      	str	r2, [r3, #20]
}
 8003fd2:	bf00      	nop
 8003fd4:	3714      	adds	r7, #20
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	40012c00 	.word	0x40012c00
 8003fe4:	40000400 	.word	0x40000400
 8003fe8:	40000800 	.word	0x40000800
 8003fec:	40000c00 	.word	0x40000c00
 8003ff0:	40013400 	.word	0x40013400
 8003ff4:	40014000 	.word	0x40014000
 8003ff8:	40014400 	.word	0x40014400
 8003ffc:	40014800 	.word	0x40014800

08004000 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004000:	b480      	push	{r7}
 8004002:	b087      	sub	sp, #28
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	f023 0201 	bic.w	r2, r3, #1
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800402e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004032:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f023 0303 	bic.w	r3, r3, #3
 800403a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	4313      	orrs	r3, r2
 8004044:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	f023 0302 	bic.w	r3, r3, #2
 800404c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	4313      	orrs	r3, r2
 8004056:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a2c      	ldr	r2, [pc, #176]	; (800410c <TIM_OC1_SetConfig+0x10c>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d00f      	beq.n	8004080 <TIM_OC1_SetConfig+0x80>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a2b      	ldr	r2, [pc, #172]	; (8004110 <TIM_OC1_SetConfig+0x110>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d00b      	beq.n	8004080 <TIM_OC1_SetConfig+0x80>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a2a      	ldr	r2, [pc, #168]	; (8004114 <TIM_OC1_SetConfig+0x114>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d007      	beq.n	8004080 <TIM_OC1_SetConfig+0x80>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a29      	ldr	r2, [pc, #164]	; (8004118 <TIM_OC1_SetConfig+0x118>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d003      	beq.n	8004080 <TIM_OC1_SetConfig+0x80>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a28      	ldr	r2, [pc, #160]	; (800411c <TIM_OC1_SetConfig+0x11c>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d10c      	bne.n	800409a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	f023 0308 	bic.w	r3, r3, #8
 8004086:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	697a      	ldr	r2, [r7, #20]
 800408e:	4313      	orrs	r3, r2
 8004090:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	f023 0304 	bic.w	r3, r3, #4
 8004098:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a1b      	ldr	r2, [pc, #108]	; (800410c <TIM_OC1_SetConfig+0x10c>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d00f      	beq.n	80040c2 <TIM_OC1_SetConfig+0xc2>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a1a      	ldr	r2, [pc, #104]	; (8004110 <TIM_OC1_SetConfig+0x110>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d00b      	beq.n	80040c2 <TIM_OC1_SetConfig+0xc2>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a19      	ldr	r2, [pc, #100]	; (8004114 <TIM_OC1_SetConfig+0x114>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d007      	beq.n	80040c2 <TIM_OC1_SetConfig+0xc2>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a18      	ldr	r2, [pc, #96]	; (8004118 <TIM_OC1_SetConfig+0x118>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d003      	beq.n	80040c2 <TIM_OC1_SetConfig+0xc2>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a17      	ldr	r2, [pc, #92]	; (800411c <TIM_OC1_SetConfig+0x11c>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d111      	bne.n	80040e6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	4313      	orrs	r3, r2
 80040da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	693a      	ldr	r2, [r7, #16]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	685a      	ldr	r2, [r3, #4]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	697a      	ldr	r2, [r7, #20]
 80040fe:	621a      	str	r2, [r3, #32]
}
 8004100:	bf00      	nop
 8004102:	371c      	adds	r7, #28
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr
 800410c:	40012c00 	.word	0x40012c00
 8004110:	40013400 	.word	0x40013400
 8004114:	40014000 	.word	0x40014000
 8004118:	40014400 	.word	0x40014400
 800411c:	40014800 	.word	0x40014800

08004120 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004120:	b480      	push	{r7}
 8004122:	b087      	sub	sp, #28
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a1b      	ldr	r3, [r3, #32]
 800412e:	f023 0210 	bic.w	r2, r3, #16
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800414e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800415a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	021b      	lsls	r3, r3, #8
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	4313      	orrs	r3, r2
 8004166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	f023 0320 	bic.w	r3, r3, #32
 800416e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	011b      	lsls	r3, r3, #4
 8004176:	697a      	ldr	r2, [r7, #20]
 8004178:	4313      	orrs	r3, r2
 800417a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a28      	ldr	r2, [pc, #160]	; (8004220 <TIM_OC2_SetConfig+0x100>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d003      	beq.n	800418c <TIM_OC2_SetConfig+0x6c>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a27      	ldr	r2, [pc, #156]	; (8004224 <TIM_OC2_SetConfig+0x104>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d10d      	bne.n	80041a8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004192:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	011b      	lsls	r3, r3, #4
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	4313      	orrs	r3, r2
 800419e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a1d      	ldr	r2, [pc, #116]	; (8004220 <TIM_OC2_SetConfig+0x100>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d00f      	beq.n	80041d0 <TIM_OC2_SetConfig+0xb0>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a1c      	ldr	r2, [pc, #112]	; (8004224 <TIM_OC2_SetConfig+0x104>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d00b      	beq.n	80041d0 <TIM_OC2_SetConfig+0xb0>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a1b      	ldr	r2, [pc, #108]	; (8004228 <TIM_OC2_SetConfig+0x108>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d007      	beq.n	80041d0 <TIM_OC2_SetConfig+0xb0>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4a1a      	ldr	r2, [pc, #104]	; (800422c <TIM_OC2_SetConfig+0x10c>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d003      	beq.n	80041d0 <TIM_OC2_SetConfig+0xb0>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a19      	ldr	r2, [pc, #100]	; (8004230 <TIM_OC2_SetConfig+0x110>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d113      	bne.n	80041f8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	695b      	ldr	r3, [r3, #20]
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	693a      	ldr	r2, [r7, #16]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	693a      	ldr	r2, [r7, #16]
 80041fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	685a      	ldr	r2, [r3, #4]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	621a      	str	r2, [r3, #32]
}
 8004212:	bf00      	nop
 8004214:	371c      	adds	r7, #28
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	40012c00 	.word	0x40012c00
 8004224:	40013400 	.word	0x40013400
 8004228:	40014000 	.word	0x40014000
 800422c:	40014400 	.word	0x40014400
 8004230:	40014800 	.word	0x40014800

08004234 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004234:	b480      	push	{r7}
 8004236:	b087      	sub	sp, #28
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a1b      	ldr	r3, [r3, #32]
 8004242:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a1b      	ldr	r3, [r3, #32]
 800424e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	69db      	ldr	r3, [r3, #28]
 800425a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004266:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f023 0303 	bic.w	r3, r3, #3
 800426e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	4313      	orrs	r3, r2
 8004278:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004280:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	021b      	lsls	r3, r3, #8
 8004288:	697a      	ldr	r2, [r7, #20]
 800428a:	4313      	orrs	r3, r2
 800428c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a27      	ldr	r2, [pc, #156]	; (8004330 <TIM_OC3_SetConfig+0xfc>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d003      	beq.n	800429e <TIM_OC3_SetConfig+0x6a>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a26      	ldr	r2, [pc, #152]	; (8004334 <TIM_OC3_SetConfig+0x100>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d10d      	bne.n	80042ba <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	021b      	lsls	r3, r3, #8
 80042ac:	697a      	ldr	r2, [r7, #20]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a1c      	ldr	r2, [pc, #112]	; (8004330 <TIM_OC3_SetConfig+0xfc>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d00f      	beq.n	80042e2 <TIM_OC3_SetConfig+0xae>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a1b      	ldr	r2, [pc, #108]	; (8004334 <TIM_OC3_SetConfig+0x100>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d00b      	beq.n	80042e2 <TIM_OC3_SetConfig+0xae>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a1a      	ldr	r2, [pc, #104]	; (8004338 <TIM_OC3_SetConfig+0x104>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d007      	beq.n	80042e2 <TIM_OC3_SetConfig+0xae>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a19      	ldr	r2, [pc, #100]	; (800433c <TIM_OC3_SetConfig+0x108>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d003      	beq.n	80042e2 <TIM_OC3_SetConfig+0xae>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a18      	ldr	r2, [pc, #96]	; (8004340 <TIM_OC3_SetConfig+0x10c>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d113      	bne.n	800430a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	011b      	lsls	r3, r3, #4
 80042f8:	693a      	ldr	r2, [r7, #16]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	011b      	lsls	r3, r3, #4
 8004304:	693a      	ldr	r2, [r7, #16]
 8004306:	4313      	orrs	r3, r2
 8004308:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	685a      	ldr	r2, [r3, #4]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	697a      	ldr	r2, [r7, #20]
 8004322:	621a      	str	r2, [r3, #32]
}
 8004324:	bf00      	nop
 8004326:	371c      	adds	r7, #28
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr
 8004330:	40012c00 	.word	0x40012c00
 8004334:	40013400 	.word	0x40013400
 8004338:	40014000 	.word	0x40014000
 800433c:	40014400 	.word	0x40014400
 8004340:	40014800 	.word	0x40014800

08004344 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004344:	b480      	push	{r7}
 8004346:	b087      	sub	sp, #28
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	69db      	ldr	r3, [r3, #28]
 800436a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004372:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004376:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800437e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	021b      	lsls	r3, r3, #8
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	4313      	orrs	r3, r2
 800438a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004392:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	031b      	lsls	r3, r3, #12
 800439a:	693a      	ldr	r2, [r7, #16]
 800439c:	4313      	orrs	r3, r2
 800439e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4a18      	ldr	r2, [pc, #96]	; (8004404 <TIM_OC4_SetConfig+0xc0>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d00f      	beq.n	80043c8 <TIM_OC4_SetConfig+0x84>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	4a17      	ldr	r2, [pc, #92]	; (8004408 <TIM_OC4_SetConfig+0xc4>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d00b      	beq.n	80043c8 <TIM_OC4_SetConfig+0x84>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a16      	ldr	r2, [pc, #88]	; (800440c <TIM_OC4_SetConfig+0xc8>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d007      	beq.n	80043c8 <TIM_OC4_SetConfig+0x84>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a15      	ldr	r2, [pc, #84]	; (8004410 <TIM_OC4_SetConfig+0xcc>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d003      	beq.n	80043c8 <TIM_OC4_SetConfig+0x84>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4a14      	ldr	r2, [pc, #80]	; (8004414 <TIM_OC4_SetConfig+0xd0>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d109      	bne.n	80043dc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	695b      	ldr	r3, [r3, #20]
 80043d4:	019b      	lsls	r3, r3, #6
 80043d6:	697a      	ldr	r2, [r7, #20]
 80043d8:	4313      	orrs	r3, r2
 80043da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	697a      	ldr	r2, [r7, #20]
 80043e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	685a      	ldr	r2, [r3, #4]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	693a      	ldr	r2, [r7, #16]
 80043f4:	621a      	str	r2, [r3, #32]
}
 80043f6:	bf00      	nop
 80043f8:	371c      	adds	r7, #28
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	40012c00 	.word	0x40012c00
 8004408:	40013400 	.word	0x40013400
 800440c:	40014000 	.word	0x40014000
 8004410:	40014400 	.word	0x40014400
 8004414:	40014800 	.word	0x40014800

08004418 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004418:	b480      	push	{r7}
 800441a:	b087      	sub	sp, #28
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800443e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800444a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	4313      	orrs	r3, r2
 8004454:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800445c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	041b      	lsls	r3, r3, #16
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	4313      	orrs	r3, r2
 8004468:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a17      	ldr	r2, [pc, #92]	; (80044cc <TIM_OC5_SetConfig+0xb4>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d00f      	beq.n	8004492 <TIM_OC5_SetConfig+0x7a>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a16      	ldr	r2, [pc, #88]	; (80044d0 <TIM_OC5_SetConfig+0xb8>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d00b      	beq.n	8004492 <TIM_OC5_SetConfig+0x7a>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a15      	ldr	r2, [pc, #84]	; (80044d4 <TIM_OC5_SetConfig+0xbc>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d007      	beq.n	8004492 <TIM_OC5_SetConfig+0x7a>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a14      	ldr	r2, [pc, #80]	; (80044d8 <TIM_OC5_SetConfig+0xc0>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d003      	beq.n	8004492 <TIM_OC5_SetConfig+0x7a>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a13      	ldr	r2, [pc, #76]	; (80044dc <TIM_OC5_SetConfig+0xc4>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d109      	bne.n	80044a6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004498:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	695b      	ldr	r3, [r3, #20]
 800449e:	021b      	lsls	r3, r3, #8
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	685a      	ldr	r2, [r3, #4]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	693a      	ldr	r2, [r7, #16]
 80044be:	621a      	str	r2, [r3, #32]
}
 80044c0:	bf00      	nop
 80044c2:	371c      	adds	r7, #28
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr
 80044cc:	40012c00 	.word	0x40012c00
 80044d0:	40013400 	.word	0x40013400
 80044d4:	40014000 	.word	0x40014000
 80044d8:	40014400 	.word	0x40014400
 80044dc:	40014800 	.word	0x40014800

080044e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b087      	sub	sp, #28
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a1b      	ldr	r3, [r3, #32]
 80044ee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a1b      	ldr	r3, [r3, #32]
 80044fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800450e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004512:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	021b      	lsls	r3, r3, #8
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	4313      	orrs	r3, r2
 800451e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004526:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	051b      	lsls	r3, r3, #20
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	4313      	orrs	r3, r2
 8004532:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a18      	ldr	r2, [pc, #96]	; (8004598 <TIM_OC6_SetConfig+0xb8>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d00f      	beq.n	800455c <TIM_OC6_SetConfig+0x7c>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a17      	ldr	r2, [pc, #92]	; (800459c <TIM_OC6_SetConfig+0xbc>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d00b      	beq.n	800455c <TIM_OC6_SetConfig+0x7c>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a16      	ldr	r2, [pc, #88]	; (80045a0 <TIM_OC6_SetConfig+0xc0>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d007      	beq.n	800455c <TIM_OC6_SetConfig+0x7c>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a15      	ldr	r2, [pc, #84]	; (80045a4 <TIM_OC6_SetConfig+0xc4>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d003      	beq.n	800455c <TIM_OC6_SetConfig+0x7c>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a14      	ldr	r2, [pc, #80]	; (80045a8 <TIM_OC6_SetConfig+0xc8>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d109      	bne.n	8004570 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004562:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	695b      	ldr	r3, [r3, #20]
 8004568:	029b      	lsls	r3, r3, #10
 800456a:	697a      	ldr	r2, [r7, #20]
 800456c:	4313      	orrs	r3, r2
 800456e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	697a      	ldr	r2, [r7, #20]
 8004574:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	685a      	ldr	r2, [r3, #4]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	621a      	str	r2, [r3, #32]
}
 800458a:	bf00      	nop
 800458c:	371c      	adds	r7, #28
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	40012c00 	.word	0x40012c00
 800459c:	40013400 	.word	0x40013400
 80045a0:	40014000 	.word	0x40014000
 80045a4:	40014400 	.word	0x40014400
 80045a8:	40014800 	.word	0x40014800

080045ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80045b6:	2300      	movs	r3, #0
 80045b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d101      	bne.n	80045c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80045c4:	2302      	movs	r3, #2
 80045c6:	e065      	b.n	8004694 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	4313      	orrs	r3, r2
 80045dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4313      	orrs	r3, r2
 8004606:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	4313      	orrs	r3, r2
 8004614:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	695b      	ldr	r3, [r3, #20]
 8004620:	4313      	orrs	r3, r2
 8004622:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462e:	4313      	orrs	r3, r2
 8004630:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	699b      	ldr	r3, [r3, #24]
 800463c:	041b      	lsls	r3, r3, #16
 800463e:	4313      	orrs	r3, r2
 8004640:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a16      	ldr	r2, [pc, #88]	; (80046a0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d004      	beq.n	8004656 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a14      	ldr	r2, [pc, #80]	; (80046a4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d115      	bne.n	8004682 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004660:	051b      	lsls	r3, r3, #20
 8004662:	4313      	orrs	r3, r2
 8004664:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	69db      	ldr	r3, [r3, #28]
 8004670:	4313      	orrs	r3, r2
 8004672:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	6a1b      	ldr	r3, [r3, #32]
 800467e:	4313      	orrs	r3, r2
 8004680:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3714      	adds	r7, #20
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr
 80046a0:	40012c00 	.word	0x40012c00
 80046a4:	40013400 	.word	0x40013400

080046a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d101      	bne.n	80046ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e040      	b.n	800473c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d106      	bne.n	80046d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f7fc faba 	bl	8000c44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2224      	movs	r2, #36	; 0x24
 80046d4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f022 0201 	bic.w	r2, r2, #1
 80046e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 f8c0 	bl	800486c <UART_SetConfig>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d101      	bne.n	80046f6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e022      	b.n	800473c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d002      	beq.n	8004704 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 fb3e 	bl	8004d80 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	685a      	ldr	r2, [r3, #4]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004712:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	689a      	ldr	r2, [r3, #8]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004722:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f042 0201 	orr.w	r2, r2, #1
 8004732:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f000 fbc5 	bl	8004ec4 <UART_CheckIdleState>
 800473a:	4603      	mov	r3, r0
}
 800473c:	4618      	mov	r0, r3
 800473e:	3708      	adds	r7, #8
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b08a      	sub	sp, #40	; 0x28
 8004748:	af02      	add	r7, sp, #8
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	603b      	str	r3, [r7, #0]
 8004750:	4613      	mov	r3, r2
 8004752:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004758:	2b20      	cmp	r3, #32
 800475a:	f040 8082 	bne.w	8004862 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d002      	beq.n	800476a <HAL_UART_Transmit+0x26>
 8004764:	88fb      	ldrh	r3, [r7, #6]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e07a      	b.n	8004864 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004774:	2b01      	cmp	r3, #1
 8004776:	d101      	bne.n	800477c <HAL_UART_Transmit+0x38>
 8004778:	2302      	movs	r3, #2
 800477a:	e073      	b.n	8004864 <HAL_UART_Transmit+0x120>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2200      	movs	r2, #0
 8004788:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2221      	movs	r2, #33	; 0x21
 8004790:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004792:	f7fc fc11 	bl	8000fb8 <HAL_GetTick>
 8004796:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	88fa      	ldrh	r2, [r7, #6]
 800479c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	88fa      	ldrh	r2, [r7, #6]
 80047a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047b0:	d108      	bne.n	80047c4 <HAL_UART_Transmit+0x80>
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d104      	bne.n	80047c4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80047ba:	2300      	movs	r3, #0
 80047bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	61bb      	str	r3, [r7, #24]
 80047c2:	e003      	b.n	80047cc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047c8:	2300      	movs	r3, #0
 80047ca:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80047d4:	e02d      	b.n	8004832 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	9300      	str	r3, [sp, #0]
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	2200      	movs	r2, #0
 80047de:	2180      	movs	r1, #128	; 0x80
 80047e0:	68f8      	ldr	r0, [r7, #12]
 80047e2:	f000 fbb8 	bl	8004f56 <UART_WaitOnFlagUntilTimeout>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d001      	beq.n	80047f0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e039      	b.n	8004864 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d10b      	bne.n	800480e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	881a      	ldrh	r2, [r3, #0]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004802:	b292      	uxth	r2, r2
 8004804:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	3302      	adds	r3, #2
 800480a:	61bb      	str	r3, [r7, #24]
 800480c:	e008      	b.n	8004820 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	781a      	ldrb	r2, [r3, #0]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	b292      	uxth	r2, r2
 8004818:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	3301      	adds	r3, #1
 800481e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004826:	b29b      	uxth	r3, r3
 8004828:	3b01      	subs	r3, #1
 800482a:	b29a      	uxth	r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004838:	b29b      	uxth	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1cb      	bne.n	80047d6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	9300      	str	r3, [sp, #0]
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	2200      	movs	r2, #0
 8004846:	2140      	movs	r1, #64	; 0x40
 8004848:	68f8      	ldr	r0, [r7, #12]
 800484a:	f000 fb84 	bl	8004f56 <UART_WaitOnFlagUntilTimeout>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d001      	beq.n	8004858 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	e005      	b.n	8004864 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2220      	movs	r2, #32
 800485c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800485e:	2300      	movs	r3, #0
 8004860:	e000      	b.n	8004864 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004862:	2302      	movs	r3, #2
  }
}
 8004864:	4618      	mov	r0, r3
 8004866:	3720      	adds	r7, #32
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800486c:	b5b0      	push	{r4, r5, r7, lr}
 800486e:	b088      	sub	sp, #32
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004874:	2300      	movs	r3, #0
 8004876:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689a      	ldr	r2, [r3, #8]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	431a      	orrs	r2, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	695b      	ldr	r3, [r3, #20]
 8004886:	431a      	orrs	r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	69db      	ldr	r3, [r3, #28]
 800488c:	4313      	orrs	r3, r2
 800488e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	4bad      	ldr	r3, [pc, #692]	; (8004b4c <UART_SetConfig+0x2e0>)
 8004898:	4013      	ands	r3, r2
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	6812      	ldr	r2, [r2, #0]
 800489e:	69f9      	ldr	r1, [r7, #28]
 80048a0:	430b      	orrs	r3, r1
 80048a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	68da      	ldr	r2, [r3, #12]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	430a      	orrs	r2, r1
 80048b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4aa2      	ldr	r2, [pc, #648]	; (8004b50 <UART_SetConfig+0x2e4>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d004      	beq.n	80048d4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a1b      	ldr	r3, [r3, #32]
 80048ce:	69fa      	ldr	r2, [r7, #28]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	69fa      	ldr	r2, [r7, #28]
 80048e4:	430a      	orrs	r2, r1
 80048e6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a99      	ldr	r2, [pc, #612]	; (8004b54 <UART_SetConfig+0x2e8>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d121      	bne.n	8004936 <UART_SetConfig+0xca>
 80048f2:	4b99      	ldr	r3, [pc, #612]	; (8004b58 <UART_SetConfig+0x2ec>)
 80048f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f8:	f003 0303 	and.w	r3, r3, #3
 80048fc:	2b03      	cmp	r3, #3
 80048fe:	d817      	bhi.n	8004930 <UART_SetConfig+0xc4>
 8004900:	a201      	add	r2, pc, #4	; (adr r2, 8004908 <UART_SetConfig+0x9c>)
 8004902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004906:	bf00      	nop
 8004908:	08004919 	.word	0x08004919
 800490c:	08004925 	.word	0x08004925
 8004910:	0800491f 	.word	0x0800491f
 8004914:	0800492b 	.word	0x0800492b
 8004918:	2301      	movs	r3, #1
 800491a:	76fb      	strb	r3, [r7, #27]
 800491c:	e0e7      	b.n	8004aee <UART_SetConfig+0x282>
 800491e:	2302      	movs	r3, #2
 8004920:	76fb      	strb	r3, [r7, #27]
 8004922:	e0e4      	b.n	8004aee <UART_SetConfig+0x282>
 8004924:	2304      	movs	r3, #4
 8004926:	76fb      	strb	r3, [r7, #27]
 8004928:	e0e1      	b.n	8004aee <UART_SetConfig+0x282>
 800492a:	2308      	movs	r3, #8
 800492c:	76fb      	strb	r3, [r7, #27]
 800492e:	e0de      	b.n	8004aee <UART_SetConfig+0x282>
 8004930:	2310      	movs	r3, #16
 8004932:	76fb      	strb	r3, [r7, #27]
 8004934:	e0db      	b.n	8004aee <UART_SetConfig+0x282>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a88      	ldr	r2, [pc, #544]	; (8004b5c <UART_SetConfig+0x2f0>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d132      	bne.n	80049a6 <UART_SetConfig+0x13a>
 8004940:	4b85      	ldr	r3, [pc, #532]	; (8004b58 <UART_SetConfig+0x2ec>)
 8004942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004946:	f003 030c 	and.w	r3, r3, #12
 800494a:	2b0c      	cmp	r3, #12
 800494c:	d828      	bhi.n	80049a0 <UART_SetConfig+0x134>
 800494e:	a201      	add	r2, pc, #4	; (adr r2, 8004954 <UART_SetConfig+0xe8>)
 8004950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004954:	08004989 	.word	0x08004989
 8004958:	080049a1 	.word	0x080049a1
 800495c:	080049a1 	.word	0x080049a1
 8004960:	080049a1 	.word	0x080049a1
 8004964:	08004995 	.word	0x08004995
 8004968:	080049a1 	.word	0x080049a1
 800496c:	080049a1 	.word	0x080049a1
 8004970:	080049a1 	.word	0x080049a1
 8004974:	0800498f 	.word	0x0800498f
 8004978:	080049a1 	.word	0x080049a1
 800497c:	080049a1 	.word	0x080049a1
 8004980:	080049a1 	.word	0x080049a1
 8004984:	0800499b 	.word	0x0800499b
 8004988:	2300      	movs	r3, #0
 800498a:	76fb      	strb	r3, [r7, #27]
 800498c:	e0af      	b.n	8004aee <UART_SetConfig+0x282>
 800498e:	2302      	movs	r3, #2
 8004990:	76fb      	strb	r3, [r7, #27]
 8004992:	e0ac      	b.n	8004aee <UART_SetConfig+0x282>
 8004994:	2304      	movs	r3, #4
 8004996:	76fb      	strb	r3, [r7, #27]
 8004998:	e0a9      	b.n	8004aee <UART_SetConfig+0x282>
 800499a:	2308      	movs	r3, #8
 800499c:	76fb      	strb	r3, [r7, #27]
 800499e:	e0a6      	b.n	8004aee <UART_SetConfig+0x282>
 80049a0:	2310      	movs	r3, #16
 80049a2:	76fb      	strb	r3, [r7, #27]
 80049a4:	e0a3      	b.n	8004aee <UART_SetConfig+0x282>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a6d      	ldr	r2, [pc, #436]	; (8004b60 <UART_SetConfig+0x2f4>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d120      	bne.n	80049f2 <UART_SetConfig+0x186>
 80049b0:	4b69      	ldr	r3, [pc, #420]	; (8004b58 <UART_SetConfig+0x2ec>)
 80049b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80049ba:	2b30      	cmp	r3, #48	; 0x30
 80049bc:	d013      	beq.n	80049e6 <UART_SetConfig+0x17a>
 80049be:	2b30      	cmp	r3, #48	; 0x30
 80049c0:	d814      	bhi.n	80049ec <UART_SetConfig+0x180>
 80049c2:	2b20      	cmp	r3, #32
 80049c4:	d009      	beq.n	80049da <UART_SetConfig+0x16e>
 80049c6:	2b20      	cmp	r3, #32
 80049c8:	d810      	bhi.n	80049ec <UART_SetConfig+0x180>
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d002      	beq.n	80049d4 <UART_SetConfig+0x168>
 80049ce:	2b10      	cmp	r3, #16
 80049d0:	d006      	beq.n	80049e0 <UART_SetConfig+0x174>
 80049d2:	e00b      	b.n	80049ec <UART_SetConfig+0x180>
 80049d4:	2300      	movs	r3, #0
 80049d6:	76fb      	strb	r3, [r7, #27]
 80049d8:	e089      	b.n	8004aee <UART_SetConfig+0x282>
 80049da:	2302      	movs	r3, #2
 80049dc:	76fb      	strb	r3, [r7, #27]
 80049de:	e086      	b.n	8004aee <UART_SetConfig+0x282>
 80049e0:	2304      	movs	r3, #4
 80049e2:	76fb      	strb	r3, [r7, #27]
 80049e4:	e083      	b.n	8004aee <UART_SetConfig+0x282>
 80049e6:	2308      	movs	r3, #8
 80049e8:	76fb      	strb	r3, [r7, #27]
 80049ea:	e080      	b.n	8004aee <UART_SetConfig+0x282>
 80049ec:	2310      	movs	r3, #16
 80049ee:	76fb      	strb	r3, [r7, #27]
 80049f0:	e07d      	b.n	8004aee <UART_SetConfig+0x282>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a5b      	ldr	r2, [pc, #364]	; (8004b64 <UART_SetConfig+0x2f8>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d120      	bne.n	8004a3e <UART_SetConfig+0x1d2>
 80049fc:	4b56      	ldr	r3, [pc, #344]	; (8004b58 <UART_SetConfig+0x2ec>)
 80049fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a02:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004a06:	2bc0      	cmp	r3, #192	; 0xc0
 8004a08:	d013      	beq.n	8004a32 <UART_SetConfig+0x1c6>
 8004a0a:	2bc0      	cmp	r3, #192	; 0xc0
 8004a0c:	d814      	bhi.n	8004a38 <UART_SetConfig+0x1cc>
 8004a0e:	2b80      	cmp	r3, #128	; 0x80
 8004a10:	d009      	beq.n	8004a26 <UART_SetConfig+0x1ba>
 8004a12:	2b80      	cmp	r3, #128	; 0x80
 8004a14:	d810      	bhi.n	8004a38 <UART_SetConfig+0x1cc>
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d002      	beq.n	8004a20 <UART_SetConfig+0x1b4>
 8004a1a:	2b40      	cmp	r3, #64	; 0x40
 8004a1c:	d006      	beq.n	8004a2c <UART_SetConfig+0x1c0>
 8004a1e:	e00b      	b.n	8004a38 <UART_SetConfig+0x1cc>
 8004a20:	2300      	movs	r3, #0
 8004a22:	76fb      	strb	r3, [r7, #27]
 8004a24:	e063      	b.n	8004aee <UART_SetConfig+0x282>
 8004a26:	2302      	movs	r3, #2
 8004a28:	76fb      	strb	r3, [r7, #27]
 8004a2a:	e060      	b.n	8004aee <UART_SetConfig+0x282>
 8004a2c:	2304      	movs	r3, #4
 8004a2e:	76fb      	strb	r3, [r7, #27]
 8004a30:	e05d      	b.n	8004aee <UART_SetConfig+0x282>
 8004a32:	2308      	movs	r3, #8
 8004a34:	76fb      	strb	r3, [r7, #27]
 8004a36:	e05a      	b.n	8004aee <UART_SetConfig+0x282>
 8004a38:	2310      	movs	r3, #16
 8004a3a:	76fb      	strb	r3, [r7, #27]
 8004a3c:	e057      	b.n	8004aee <UART_SetConfig+0x282>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a49      	ldr	r2, [pc, #292]	; (8004b68 <UART_SetConfig+0x2fc>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d125      	bne.n	8004a94 <UART_SetConfig+0x228>
 8004a48:	4b43      	ldr	r3, [pc, #268]	; (8004b58 <UART_SetConfig+0x2ec>)
 8004a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a56:	d017      	beq.n	8004a88 <UART_SetConfig+0x21c>
 8004a58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a5c:	d817      	bhi.n	8004a8e <UART_SetConfig+0x222>
 8004a5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a62:	d00b      	beq.n	8004a7c <UART_SetConfig+0x210>
 8004a64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a68:	d811      	bhi.n	8004a8e <UART_SetConfig+0x222>
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d003      	beq.n	8004a76 <UART_SetConfig+0x20a>
 8004a6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a72:	d006      	beq.n	8004a82 <UART_SetConfig+0x216>
 8004a74:	e00b      	b.n	8004a8e <UART_SetConfig+0x222>
 8004a76:	2300      	movs	r3, #0
 8004a78:	76fb      	strb	r3, [r7, #27]
 8004a7a:	e038      	b.n	8004aee <UART_SetConfig+0x282>
 8004a7c:	2302      	movs	r3, #2
 8004a7e:	76fb      	strb	r3, [r7, #27]
 8004a80:	e035      	b.n	8004aee <UART_SetConfig+0x282>
 8004a82:	2304      	movs	r3, #4
 8004a84:	76fb      	strb	r3, [r7, #27]
 8004a86:	e032      	b.n	8004aee <UART_SetConfig+0x282>
 8004a88:	2308      	movs	r3, #8
 8004a8a:	76fb      	strb	r3, [r7, #27]
 8004a8c:	e02f      	b.n	8004aee <UART_SetConfig+0x282>
 8004a8e:	2310      	movs	r3, #16
 8004a90:	76fb      	strb	r3, [r7, #27]
 8004a92:	e02c      	b.n	8004aee <UART_SetConfig+0x282>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a2d      	ldr	r2, [pc, #180]	; (8004b50 <UART_SetConfig+0x2e4>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d125      	bne.n	8004aea <UART_SetConfig+0x27e>
 8004a9e:	4b2e      	ldr	r3, [pc, #184]	; (8004b58 <UART_SetConfig+0x2ec>)
 8004aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004aa8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004aac:	d017      	beq.n	8004ade <UART_SetConfig+0x272>
 8004aae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ab2:	d817      	bhi.n	8004ae4 <UART_SetConfig+0x278>
 8004ab4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ab8:	d00b      	beq.n	8004ad2 <UART_SetConfig+0x266>
 8004aba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004abe:	d811      	bhi.n	8004ae4 <UART_SetConfig+0x278>
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d003      	beq.n	8004acc <UART_SetConfig+0x260>
 8004ac4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ac8:	d006      	beq.n	8004ad8 <UART_SetConfig+0x26c>
 8004aca:	e00b      	b.n	8004ae4 <UART_SetConfig+0x278>
 8004acc:	2300      	movs	r3, #0
 8004ace:	76fb      	strb	r3, [r7, #27]
 8004ad0:	e00d      	b.n	8004aee <UART_SetConfig+0x282>
 8004ad2:	2302      	movs	r3, #2
 8004ad4:	76fb      	strb	r3, [r7, #27]
 8004ad6:	e00a      	b.n	8004aee <UART_SetConfig+0x282>
 8004ad8:	2304      	movs	r3, #4
 8004ada:	76fb      	strb	r3, [r7, #27]
 8004adc:	e007      	b.n	8004aee <UART_SetConfig+0x282>
 8004ade:	2308      	movs	r3, #8
 8004ae0:	76fb      	strb	r3, [r7, #27]
 8004ae2:	e004      	b.n	8004aee <UART_SetConfig+0x282>
 8004ae4:	2310      	movs	r3, #16
 8004ae6:	76fb      	strb	r3, [r7, #27]
 8004ae8:	e001      	b.n	8004aee <UART_SetConfig+0x282>
 8004aea:	2310      	movs	r3, #16
 8004aec:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a17      	ldr	r2, [pc, #92]	; (8004b50 <UART_SetConfig+0x2e4>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	f040 8087 	bne.w	8004c08 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004afa:	7efb      	ldrb	r3, [r7, #27]
 8004afc:	2b08      	cmp	r3, #8
 8004afe:	d837      	bhi.n	8004b70 <UART_SetConfig+0x304>
 8004b00:	a201      	add	r2, pc, #4	; (adr r2, 8004b08 <UART_SetConfig+0x29c>)
 8004b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b06:	bf00      	nop
 8004b08:	08004b2d 	.word	0x08004b2d
 8004b0c:	08004b71 	.word	0x08004b71
 8004b10:	08004b35 	.word	0x08004b35
 8004b14:	08004b71 	.word	0x08004b71
 8004b18:	08004b3b 	.word	0x08004b3b
 8004b1c:	08004b71 	.word	0x08004b71
 8004b20:	08004b71 	.word	0x08004b71
 8004b24:	08004b71 	.word	0x08004b71
 8004b28:	08004b43 	.word	0x08004b43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b2c:	f7fe faba 	bl	80030a4 <HAL_RCC_GetPCLK1Freq>
 8004b30:	6178      	str	r0, [r7, #20]
        break;
 8004b32:	e022      	b.n	8004b7a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b34:	4b0d      	ldr	r3, [pc, #52]	; (8004b6c <UART_SetConfig+0x300>)
 8004b36:	617b      	str	r3, [r7, #20]
        break;
 8004b38:	e01f      	b.n	8004b7a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b3a:	f7fe fa1b 	bl	8002f74 <HAL_RCC_GetSysClockFreq>
 8004b3e:	6178      	str	r0, [r7, #20]
        break;
 8004b40:	e01b      	b.n	8004b7a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b46:	617b      	str	r3, [r7, #20]
        break;
 8004b48:	e017      	b.n	8004b7a <UART_SetConfig+0x30e>
 8004b4a:	bf00      	nop
 8004b4c:	efff69f3 	.word	0xefff69f3
 8004b50:	40008000 	.word	0x40008000
 8004b54:	40013800 	.word	0x40013800
 8004b58:	40021000 	.word	0x40021000
 8004b5c:	40004400 	.word	0x40004400
 8004b60:	40004800 	.word	0x40004800
 8004b64:	40004c00 	.word	0x40004c00
 8004b68:	40005000 	.word	0x40005000
 8004b6c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004b70:	2300      	movs	r3, #0
 8004b72:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	76bb      	strb	r3, [r7, #26]
        break;
 8004b78:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	f000 80f1 	beq.w	8004d64 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685a      	ldr	r2, [r3, #4]
 8004b86:	4613      	mov	r3, r2
 8004b88:	005b      	lsls	r3, r3, #1
 8004b8a:	4413      	add	r3, r2
 8004b8c:	697a      	ldr	r2, [r7, #20]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d305      	bcc.n	8004b9e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b98:	697a      	ldr	r2, [r7, #20]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d902      	bls.n	8004ba4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	76bb      	strb	r3, [r7, #26]
 8004ba2:	e0df      	b.n	8004d64 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f04f 0100 	mov.w	r1, #0
 8004bac:	f04f 0200 	mov.w	r2, #0
 8004bb0:	f04f 0300 	mov.w	r3, #0
 8004bb4:	020b      	lsls	r3, r1, #8
 8004bb6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004bba:	0202      	lsls	r2, r0, #8
 8004bbc:	6879      	ldr	r1, [r7, #4]
 8004bbe:	6849      	ldr	r1, [r1, #4]
 8004bc0:	0849      	lsrs	r1, r1, #1
 8004bc2:	4608      	mov	r0, r1
 8004bc4:	f04f 0100 	mov.w	r1, #0
 8004bc8:	1814      	adds	r4, r2, r0
 8004bca:	eb43 0501 	adc.w	r5, r3, r1
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	f04f 0300 	mov.w	r3, #0
 8004bd8:	4620      	mov	r0, r4
 8004bda:	4629      	mov	r1, r5
 8004bdc:	f7fb fb48 	bl	8000270 <__aeabi_uldivmod>
 8004be0:	4602      	mov	r2, r0
 8004be2:	460b      	mov	r3, r1
 8004be4:	4613      	mov	r3, r2
 8004be6:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bee:	d308      	bcc.n	8004c02 <UART_SetConfig+0x396>
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bf6:	d204      	bcs.n	8004c02 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	693a      	ldr	r2, [r7, #16]
 8004bfe:	60da      	str	r2, [r3, #12]
 8004c00:	e0b0      	b.n	8004d64 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	76bb      	strb	r3, [r7, #26]
 8004c06:	e0ad      	b.n	8004d64 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	69db      	ldr	r3, [r3, #28]
 8004c0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c10:	d15b      	bne.n	8004cca <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8004c12:	7efb      	ldrb	r3, [r7, #27]
 8004c14:	2b08      	cmp	r3, #8
 8004c16:	d828      	bhi.n	8004c6a <UART_SetConfig+0x3fe>
 8004c18:	a201      	add	r2, pc, #4	; (adr r2, 8004c20 <UART_SetConfig+0x3b4>)
 8004c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c1e:	bf00      	nop
 8004c20:	08004c45 	.word	0x08004c45
 8004c24:	08004c4d 	.word	0x08004c4d
 8004c28:	08004c55 	.word	0x08004c55
 8004c2c:	08004c6b 	.word	0x08004c6b
 8004c30:	08004c5b 	.word	0x08004c5b
 8004c34:	08004c6b 	.word	0x08004c6b
 8004c38:	08004c6b 	.word	0x08004c6b
 8004c3c:	08004c6b 	.word	0x08004c6b
 8004c40:	08004c63 	.word	0x08004c63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c44:	f7fe fa2e 	bl	80030a4 <HAL_RCC_GetPCLK1Freq>
 8004c48:	6178      	str	r0, [r7, #20]
        break;
 8004c4a:	e013      	b.n	8004c74 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c4c:	f7fe fa40 	bl	80030d0 <HAL_RCC_GetPCLK2Freq>
 8004c50:	6178      	str	r0, [r7, #20]
        break;
 8004c52:	e00f      	b.n	8004c74 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c54:	4b49      	ldr	r3, [pc, #292]	; (8004d7c <UART_SetConfig+0x510>)
 8004c56:	617b      	str	r3, [r7, #20]
        break;
 8004c58:	e00c      	b.n	8004c74 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c5a:	f7fe f98b 	bl	8002f74 <HAL_RCC_GetSysClockFreq>
 8004c5e:	6178      	str	r0, [r7, #20]
        break;
 8004c60:	e008      	b.n	8004c74 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c66:	617b      	str	r3, [r7, #20]
        break;
 8004c68:	e004      	b.n	8004c74 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	76bb      	strb	r3, [r7, #26]
        break;
 8004c72:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d074      	beq.n	8004d64 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	005a      	lsls	r2, r3, #1
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	085b      	lsrs	r3, r3, #1
 8004c84:	441a      	add	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c8e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	2b0f      	cmp	r3, #15
 8004c94:	d916      	bls.n	8004cc4 <UART_SetConfig+0x458>
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c9c:	d212      	bcs.n	8004cc4 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	f023 030f 	bic.w	r3, r3, #15
 8004ca6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	085b      	lsrs	r3, r3, #1
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	f003 0307 	and.w	r3, r3, #7
 8004cb2:	b29a      	uxth	r2, r3
 8004cb4:	89fb      	ldrh	r3, [r7, #14]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	89fa      	ldrh	r2, [r7, #14]
 8004cc0:	60da      	str	r2, [r3, #12]
 8004cc2:	e04f      	b.n	8004d64 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	76bb      	strb	r3, [r7, #26]
 8004cc8:	e04c      	b.n	8004d64 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004cca:	7efb      	ldrb	r3, [r7, #27]
 8004ccc:	2b08      	cmp	r3, #8
 8004cce:	d828      	bhi.n	8004d22 <UART_SetConfig+0x4b6>
 8004cd0:	a201      	add	r2, pc, #4	; (adr r2, 8004cd8 <UART_SetConfig+0x46c>)
 8004cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cd6:	bf00      	nop
 8004cd8:	08004cfd 	.word	0x08004cfd
 8004cdc:	08004d05 	.word	0x08004d05
 8004ce0:	08004d0d 	.word	0x08004d0d
 8004ce4:	08004d23 	.word	0x08004d23
 8004ce8:	08004d13 	.word	0x08004d13
 8004cec:	08004d23 	.word	0x08004d23
 8004cf0:	08004d23 	.word	0x08004d23
 8004cf4:	08004d23 	.word	0x08004d23
 8004cf8:	08004d1b 	.word	0x08004d1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cfc:	f7fe f9d2 	bl	80030a4 <HAL_RCC_GetPCLK1Freq>
 8004d00:	6178      	str	r0, [r7, #20]
        break;
 8004d02:	e013      	b.n	8004d2c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d04:	f7fe f9e4 	bl	80030d0 <HAL_RCC_GetPCLK2Freq>
 8004d08:	6178      	str	r0, [r7, #20]
        break;
 8004d0a:	e00f      	b.n	8004d2c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d0c:	4b1b      	ldr	r3, [pc, #108]	; (8004d7c <UART_SetConfig+0x510>)
 8004d0e:	617b      	str	r3, [r7, #20]
        break;
 8004d10:	e00c      	b.n	8004d2c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d12:	f7fe f92f 	bl	8002f74 <HAL_RCC_GetSysClockFreq>
 8004d16:	6178      	str	r0, [r7, #20]
        break;
 8004d18:	e008      	b.n	8004d2c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d1e:	617b      	str	r3, [r7, #20]
        break;
 8004d20:	e004      	b.n	8004d2c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004d22:	2300      	movs	r3, #0
 8004d24:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	76bb      	strb	r3, [r7, #26]
        break;
 8004d2a:	bf00      	nop
    }

    if (pclk != 0U)
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d018      	beq.n	8004d64 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	085a      	lsrs	r2, r3, #1
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	441a      	add	r2, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d44:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	2b0f      	cmp	r3, #15
 8004d4a:	d909      	bls.n	8004d60 <UART_SetConfig+0x4f4>
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d52:	d205      	bcs.n	8004d60 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	60da      	str	r2, [r3, #12]
 8004d5e:	e001      	b.n	8004d64 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004d70:	7ebb      	ldrb	r3, [r7, #26]
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3720      	adds	r7, #32
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bdb0      	pop	{r4, r5, r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	00f42400 	.word	0x00f42400

08004d80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8c:	f003 0301 	and.w	r3, r3, #1
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d00a      	beq.n	8004daa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	430a      	orrs	r2, r1
 8004da8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dae:	f003 0302 	and.w	r3, r3, #2
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00a      	beq.n	8004dcc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	430a      	orrs	r2, r1
 8004dca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd0:	f003 0304 	and.w	r3, r3, #4
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d00a      	beq.n	8004dee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	430a      	orrs	r2, r1
 8004dec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df2:	f003 0308 	and.w	r3, r3, #8
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00a      	beq.n	8004e10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e14:	f003 0310 	and.w	r3, r3, #16
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d00a      	beq.n	8004e32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e36:	f003 0320 	and.w	r3, r3, #32
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00a      	beq.n	8004e54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	430a      	orrs	r2, r1
 8004e52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d01a      	beq.n	8004e96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	430a      	orrs	r2, r1
 8004e74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e7e:	d10a      	bne.n	8004e96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	430a      	orrs	r2, r1
 8004e94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d00a      	beq.n	8004eb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	605a      	str	r2, [r3, #4]
  }
}
 8004eb8:	bf00      	nop
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b086      	sub	sp, #24
 8004ec8:	af02      	add	r7, sp, #8
 8004eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ed4:	f7fc f870 	bl	8000fb8 <HAL_GetTick>
 8004ed8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0308 	and.w	r3, r3, #8
 8004ee4:	2b08      	cmp	r3, #8
 8004ee6:	d10e      	bne.n	8004f06 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ee8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004eec:	9300      	str	r3, [sp, #0]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 f82d 	bl	8004f56 <UART_WaitOnFlagUntilTimeout>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d001      	beq.n	8004f06 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e023      	b.n	8004f4e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0304 	and.w	r3, r3, #4
 8004f10:	2b04      	cmp	r3, #4
 8004f12:	d10e      	bne.n	8004f32 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f18:	9300      	str	r3, [sp, #0]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 f817 	bl	8004f56 <UART_WaitOnFlagUntilTimeout>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d001      	beq.n	8004f32 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e00d      	b.n	8004f4e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2220      	movs	r2, #32
 8004f36:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2220      	movs	r2, #32
 8004f3c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3710      	adds	r7, #16
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}

08004f56 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f56:	b580      	push	{r7, lr}
 8004f58:	b09c      	sub	sp, #112	; 0x70
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	60f8      	str	r0, [r7, #12]
 8004f5e:	60b9      	str	r1, [r7, #8]
 8004f60:	603b      	str	r3, [r7, #0]
 8004f62:	4613      	mov	r3, r2
 8004f64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f66:	e0a5      	b.n	80050b4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f6e:	f000 80a1 	beq.w	80050b4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f72:	f7fc f821 	bl	8000fb8 <HAL_GetTick>
 8004f76:	4602      	mov	r2, r0
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d302      	bcc.n	8004f88 <UART_WaitOnFlagUntilTimeout+0x32>
 8004f82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d13e      	bne.n	8005006 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f90:	e853 3f00 	ldrex	r3, [r3]
 8004f94:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004f96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f9c:	667b      	str	r3, [r7, #100]	; 0x64
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fa6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004fa8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004faa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004fac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004fae:	e841 2300 	strex	r3, r2, [r1]
 8004fb2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004fb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d1e6      	bne.n	8004f88 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	3308      	adds	r3, #8
 8004fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fc4:	e853 3f00 	ldrex	r3, [r3]
 8004fc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fcc:	f023 0301 	bic.w	r3, r3, #1
 8004fd0:	663b      	str	r3, [r7, #96]	; 0x60
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	3308      	adds	r3, #8
 8004fd8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004fda:	64ba      	str	r2, [r7, #72]	; 0x48
 8004fdc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fde:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004fe0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fe2:	e841 2300 	strex	r3, r2, [r1]
 8004fe6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004fe8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d1e5      	bne.n	8004fba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2220      	movs	r2, #32
 8004ff2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2220      	movs	r2, #32
 8004ff8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e067      	b.n	80050d6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0304 	and.w	r3, r3, #4
 8005010:	2b00      	cmp	r3, #0
 8005012:	d04f      	beq.n	80050b4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	69db      	ldr	r3, [r3, #28]
 800501a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800501e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005022:	d147      	bne.n	80050b4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800502c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005036:	e853 3f00 	ldrex	r3, [r3]
 800503a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800503c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005042:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	461a      	mov	r2, r3
 800504a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800504c:	637b      	str	r3, [r7, #52]	; 0x34
 800504e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005050:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005052:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005054:	e841 2300 	strex	r3, r2, [r1]
 8005058:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800505a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800505c:	2b00      	cmp	r3, #0
 800505e:	d1e6      	bne.n	800502e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	3308      	adds	r3, #8
 8005066:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	e853 3f00 	ldrex	r3, [r3]
 800506e:	613b      	str	r3, [r7, #16]
   return(result);
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	f023 0301 	bic.w	r3, r3, #1
 8005076:	66bb      	str	r3, [r7, #104]	; 0x68
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	3308      	adds	r3, #8
 800507e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005080:	623a      	str	r2, [r7, #32]
 8005082:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005084:	69f9      	ldr	r1, [r7, #28]
 8005086:	6a3a      	ldr	r2, [r7, #32]
 8005088:	e841 2300 	strex	r3, r2, [r1]
 800508c:	61bb      	str	r3, [r7, #24]
   return(result);
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d1e5      	bne.n	8005060 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2220      	movs	r2, #32
 8005098:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2220      	movs	r2, #32
 800509e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2220      	movs	r2, #32
 80050a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80050b0:	2303      	movs	r3, #3
 80050b2:	e010      	b.n	80050d6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	69da      	ldr	r2, [r3, #28]
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	4013      	ands	r3, r2
 80050be:	68ba      	ldr	r2, [r7, #8]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	bf0c      	ite	eq
 80050c4:	2301      	moveq	r3, #1
 80050c6:	2300      	movne	r3, #0
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	461a      	mov	r2, r3
 80050cc:	79fb      	ldrb	r3, [r7, #7]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	f43f af4a 	beq.w	8004f68 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3770      	adds	r7, #112	; 0x70
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
	...

080050e0 <__errno>:
 80050e0:	4b01      	ldr	r3, [pc, #4]	; (80050e8 <__errno+0x8>)
 80050e2:	6818      	ldr	r0, [r3, #0]
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	2000000c 	.word	0x2000000c

080050ec <__libc_init_array>:
 80050ec:	b570      	push	{r4, r5, r6, lr}
 80050ee:	4d0d      	ldr	r5, [pc, #52]	; (8005124 <__libc_init_array+0x38>)
 80050f0:	4c0d      	ldr	r4, [pc, #52]	; (8005128 <__libc_init_array+0x3c>)
 80050f2:	1b64      	subs	r4, r4, r5
 80050f4:	10a4      	asrs	r4, r4, #2
 80050f6:	2600      	movs	r6, #0
 80050f8:	42a6      	cmp	r6, r4
 80050fa:	d109      	bne.n	8005110 <__libc_init_array+0x24>
 80050fc:	4d0b      	ldr	r5, [pc, #44]	; (800512c <__libc_init_array+0x40>)
 80050fe:	4c0c      	ldr	r4, [pc, #48]	; (8005130 <__libc_init_array+0x44>)
 8005100:	f000 ff76 	bl	8005ff0 <_init>
 8005104:	1b64      	subs	r4, r4, r5
 8005106:	10a4      	asrs	r4, r4, #2
 8005108:	2600      	movs	r6, #0
 800510a:	42a6      	cmp	r6, r4
 800510c:	d105      	bne.n	800511a <__libc_init_array+0x2e>
 800510e:	bd70      	pop	{r4, r5, r6, pc}
 8005110:	f855 3b04 	ldr.w	r3, [r5], #4
 8005114:	4798      	blx	r3
 8005116:	3601      	adds	r6, #1
 8005118:	e7ee      	b.n	80050f8 <__libc_init_array+0xc>
 800511a:	f855 3b04 	ldr.w	r3, [r5], #4
 800511e:	4798      	blx	r3
 8005120:	3601      	adds	r6, #1
 8005122:	e7f2      	b.n	800510a <__libc_init_array+0x1e>
 8005124:	08006134 	.word	0x08006134
 8005128:	08006134 	.word	0x08006134
 800512c:	08006134 	.word	0x08006134
 8005130:	08006138 	.word	0x08006138

08005134 <memset>:
 8005134:	4402      	add	r2, r0
 8005136:	4603      	mov	r3, r0
 8005138:	4293      	cmp	r3, r2
 800513a:	d100      	bne.n	800513e <memset+0xa>
 800513c:	4770      	bx	lr
 800513e:	f803 1b01 	strb.w	r1, [r3], #1
 8005142:	e7f9      	b.n	8005138 <memset+0x4>

08005144 <iprintf>:
 8005144:	b40f      	push	{r0, r1, r2, r3}
 8005146:	4b0a      	ldr	r3, [pc, #40]	; (8005170 <iprintf+0x2c>)
 8005148:	b513      	push	{r0, r1, r4, lr}
 800514a:	681c      	ldr	r4, [r3, #0]
 800514c:	b124      	cbz	r4, 8005158 <iprintf+0x14>
 800514e:	69a3      	ldr	r3, [r4, #24]
 8005150:	b913      	cbnz	r3, 8005158 <iprintf+0x14>
 8005152:	4620      	mov	r0, r4
 8005154:	f000 f866 	bl	8005224 <__sinit>
 8005158:	ab05      	add	r3, sp, #20
 800515a:	9a04      	ldr	r2, [sp, #16]
 800515c:	68a1      	ldr	r1, [r4, #8]
 800515e:	9301      	str	r3, [sp, #4]
 8005160:	4620      	mov	r0, r4
 8005162:	f000 f983 	bl	800546c <_vfiprintf_r>
 8005166:	b002      	add	sp, #8
 8005168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800516c:	b004      	add	sp, #16
 800516e:	4770      	bx	lr
 8005170:	2000000c 	.word	0x2000000c

08005174 <std>:
 8005174:	2300      	movs	r3, #0
 8005176:	b510      	push	{r4, lr}
 8005178:	4604      	mov	r4, r0
 800517a:	e9c0 3300 	strd	r3, r3, [r0]
 800517e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005182:	6083      	str	r3, [r0, #8]
 8005184:	8181      	strh	r1, [r0, #12]
 8005186:	6643      	str	r3, [r0, #100]	; 0x64
 8005188:	81c2      	strh	r2, [r0, #14]
 800518a:	6183      	str	r3, [r0, #24]
 800518c:	4619      	mov	r1, r3
 800518e:	2208      	movs	r2, #8
 8005190:	305c      	adds	r0, #92	; 0x5c
 8005192:	f7ff ffcf 	bl	8005134 <memset>
 8005196:	4b05      	ldr	r3, [pc, #20]	; (80051ac <std+0x38>)
 8005198:	6263      	str	r3, [r4, #36]	; 0x24
 800519a:	4b05      	ldr	r3, [pc, #20]	; (80051b0 <std+0x3c>)
 800519c:	62a3      	str	r3, [r4, #40]	; 0x28
 800519e:	4b05      	ldr	r3, [pc, #20]	; (80051b4 <std+0x40>)
 80051a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80051a2:	4b05      	ldr	r3, [pc, #20]	; (80051b8 <std+0x44>)
 80051a4:	6224      	str	r4, [r4, #32]
 80051a6:	6323      	str	r3, [r4, #48]	; 0x30
 80051a8:	bd10      	pop	{r4, pc}
 80051aa:	bf00      	nop
 80051ac:	08005a15 	.word	0x08005a15
 80051b0:	08005a37 	.word	0x08005a37
 80051b4:	08005a6f 	.word	0x08005a6f
 80051b8:	08005a93 	.word	0x08005a93

080051bc <_cleanup_r>:
 80051bc:	4901      	ldr	r1, [pc, #4]	; (80051c4 <_cleanup_r+0x8>)
 80051be:	f000 b8af 	b.w	8005320 <_fwalk_reent>
 80051c2:	bf00      	nop
 80051c4:	08005d6d 	.word	0x08005d6d

080051c8 <__sfmoreglue>:
 80051c8:	b570      	push	{r4, r5, r6, lr}
 80051ca:	1e4a      	subs	r2, r1, #1
 80051cc:	2568      	movs	r5, #104	; 0x68
 80051ce:	4355      	muls	r5, r2
 80051d0:	460e      	mov	r6, r1
 80051d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80051d6:	f000 f8c5 	bl	8005364 <_malloc_r>
 80051da:	4604      	mov	r4, r0
 80051dc:	b140      	cbz	r0, 80051f0 <__sfmoreglue+0x28>
 80051de:	2100      	movs	r1, #0
 80051e0:	e9c0 1600 	strd	r1, r6, [r0]
 80051e4:	300c      	adds	r0, #12
 80051e6:	60a0      	str	r0, [r4, #8]
 80051e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80051ec:	f7ff ffa2 	bl	8005134 <memset>
 80051f0:	4620      	mov	r0, r4
 80051f2:	bd70      	pop	{r4, r5, r6, pc}

080051f4 <__sfp_lock_acquire>:
 80051f4:	4801      	ldr	r0, [pc, #4]	; (80051fc <__sfp_lock_acquire+0x8>)
 80051f6:	f000 b8b3 	b.w	8005360 <__retarget_lock_acquire_recursive>
 80051fa:	bf00      	nop
 80051fc:	200001e0 	.word	0x200001e0

08005200 <__sfp_lock_release>:
 8005200:	4801      	ldr	r0, [pc, #4]	; (8005208 <__sfp_lock_release+0x8>)
 8005202:	f000 b8ae 	b.w	8005362 <__retarget_lock_release_recursive>
 8005206:	bf00      	nop
 8005208:	200001e0 	.word	0x200001e0

0800520c <__sinit_lock_acquire>:
 800520c:	4801      	ldr	r0, [pc, #4]	; (8005214 <__sinit_lock_acquire+0x8>)
 800520e:	f000 b8a7 	b.w	8005360 <__retarget_lock_acquire_recursive>
 8005212:	bf00      	nop
 8005214:	200001db 	.word	0x200001db

08005218 <__sinit_lock_release>:
 8005218:	4801      	ldr	r0, [pc, #4]	; (8005220 <__sinit_lock_release+0x8>)
 800521a:	f000 b8a2 	b.w	8005362 <__retarget_lock_release_recursive>
 800521e:	bf00      	nop
 8005220:	200001db 	.word	0x200001db

08005224 <__sinit>:
 8005224:	b510      	push	{r4, lr}
 8005226:	4604      	mov	r4, r0
 8005228:	f7ff fff0 	bl	800520c <__sinit_lock_acquire>
 800522c:	69a3      	ldr	r3, [r4, #24]
 800522e:	b11b      	cbz	r3, 8005238 <__sinit+0x14>
 8005230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005234:	f7ff bff0 	b.w	8005218 <__sinit_lock_release>
 8005238:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800523c:	6523      	str	r3, [r4, #80]	; 0x50
 800523e:	4b13      	ldr	r3, [pc, #76]	; (800528c <__sinit+0x68>)
 8005240:	4a13      	ldr	r2, [pc, #76]	; (8005290 <__sinit+0x6c>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	62a2      	str	r2, [r4, #40]	; 0x28
 8005246:	42a3      	cmp	r3, r4
 8005248:	bf04      	itt	eq
 800524a:	2301      	moveq	r3, #1
 800524c:	61a3      	streq	r3, [r4, #24]
 800524e:	4620      	mov	r0, r4
 8005250:	f000 f820 	bl	8005294 <__sfp>
 8005254:	6060      	str	r0, [r4, #4]
 8005256:	4620      	mov	r0, r4
 8005258:	f000 f81c 	bl	8005294 <__sfp>
 800525c:	60a0      	str	r0, [r4, #8]
 800525e:	4620      	mov	r0, r4
 8005260:	f000 f818 	bl	8005294 <__sfp>
 8005264:	2200      	movs	r2, #0
 8005266:	60e0      	str	r0, [r4, #12]
 8005268:	2104      	movs	r1, #4
 800526a:	6860      	ldr	r0, [r4, #4]
 800526c:	f7ff ff82 	bl	8005174 <std>
 8005270:	68a0      	ldr	r0, [r4, #8]
 8005272:	2201      	movs	r2, #1
 8005274:	2109      	movs	r1, #9
 8005276:	f7ff ff7d 	bl	8005174 <std>
 800527a:	68e0      	ldr	r0, [r4, #12]
 800527c:	2202      	movs	r2, #2
 800527e:	2112      	movs	r1, #18
 8005280:	f7ff ff78 	bl	8005174 <std>
 8005284:	2301      	movs	r3, #1
 8005286:	61a3      	str	r3, [r4, #24]
 8005288:	e7d2      	b.n	8005230 <__sinit+0xc>
 800528a:	bf00      	nop
 800528c:	08006094 	.word	0x08006094
 8005290:	080051bd 	.word	0x080051bd

08005294 <__sfp>:
 8005294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005296:	4607      	mov	r7, r0
 8005298:	f7ff ffac 	bl	80051f4 <__sfp_lock_acquire>
 800529c:	4b1e      	ldr	r3, [pc, #120]	; (8005318 <__sfp+0x84>)
 800529e:	681e      	ldr	r6, [r3, #0]
 80052a0:	69b3      	ldr	r3, [r6, #24]
 80052a2:	b913      	cbnz	r3, 80052aa <__sfp+0x16>
 80052a4:	4630      	mov	r0, r6
 80052a6:	f7ff ffbd 	bl	8005224 <__sinit>
 80052aa:	3648      	adds	r6, #72	; 0x48
 80052ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80052b0:	3b01      	subs	r3, #1
 80052b2:	d503      	bpl.n	80052bc <__sfp+0x28>
 80052b4:	6833      	ldr	r3, [r6, #0]
 80052b6:	b30b      	cbz	r3, 80052fc <__sfp+0x68>
 80052b8:	6836      	ldr	r6, [r6, #0]
 80052ba:	e7f7      	b.n	80052ac <__sfp+0x18>
 80052bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80052c0:	b9d5      	cbnz	r5, 80052f8 <__sfp+0x64>
 80052c2:	4b16      	ldr	r3, [pc, #88]	; (800531c <__sfp+0x88>)
 80052c4:	60e3      	str	r3, [r4, #12]
 80052c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80052ca:	6665      	str	r5, [r4, #100]	; 0x64
 80052cc:	f000 f847 	bl	800535e <__retarget_lock_init_recursive>
 80052d0:	f7ff ff96 	bl	8005200 <__sfp_lock_release>
 80052d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80052d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80052dc:	6025      	str	r5, [r4, #0]
 80052de:	61a5      	str	r5, [r4, #24]
 80052e0:	2208      	movs	r2, #8
 80052e2:	4629      	mov	r1, r5
 80052e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80052e8:	f7ff ff24 	bl	8005134 <memset>
 80052ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80052f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80052f4:	4620      	mov	r0, r4
 80052f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052f8:	3468      	adds	r4, #104	; 0x68
 80052fa:	e7d9      	b.n	80052b0 <__sfp+0x1c>
 80052fc:	2104      	movs	r1, #4
 80052fe:	4638      	mov	r0, r7
 8005300:	f7ff ff62 	bl	80051c8 <__sfmoreglue>
 8005304:	4604      	mov	r4, r0
 8005306:	6030      	str	r0, [r6, #0]
 8005308:	2800      	cmp	r0, #0
 800530a:	d1d5      	bne.n	80052b8 <__sfp+0x24>
 800530c:	f7ff ff78 	bl	8005200 <__sfp_lock_release>
 8005310:	230c      	movs	r3, #12
 8005312:	603b      	str	r3, [r7, #0]
 8005314:	e7ee      	b.n	80052f4 <__sfp+0x60>
 8005316:	bf00      	nop
 8005318:	08006094 	.word	0x08006094
 800531c:	ffff0001 	.word	0xffff0001

08005320 <_fwalk_reent>:
 8005320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005324:	4606      	mov	r6, r0
 8005326:	4688      	mov	r8, r1
 8005328:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800532c:	2700      	movs	r7, #0
 800532e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005332:	f1b9 0901 	subs.w	r9, r9, #1
 8005336:	d505      	bpl.n	8005344 <_fwalk_reent+0x24>
 8005338:	6824      	ldr	r4, [r4, #0]
 800533a:	2c00      	cmp	r4, #0
 800533c:	d1f7      	bne.n	800532e <_fwalk_reent+0xe>
 800533e:	4638      	mov	r0, r7
 8005340:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005344:	89ab      	ldrh	r3, [r5, #12]
 8005346:	2b01      	cmp	r3, #1
 8005348:	d907      	bls.n	800535a <_fwalk_reent+0x3a>
 800534a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800534e:	3301      	adds	r3, #1
 8005350:	d003      	beq.n	800535a <_fwalk_reent+0x3a>
 8005352:	4629      	mov	r1, r5
 8005354:	4630      	mov	r0, r6
 8005356:	47c0      	blx	r8
 8005358:	4307      	orrs	r7, r0
 800535a:	3568      	adds	r5, #104	; 0x68
 800535c:	e7e9      	b.n	8005332 <_fwalk_reent+0x12>

0800535e <__retarget_lock_init_recursive>:
 800535e:	4770      	bx	lr

08005360 <__retarget_lock_acquire_recursive>:
 8005360:	4770      	bx	lr

08005362 <__retarget_lock_release_recursive>:
 8005362:	4770      	bx	lr

08005364 <_malloc_r>:
 8005364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005366:	1ccd      	adds	r5, r1, #3
 8005368:	f025 0503 	bic.w	r5, r5, #3
 800536c:	3508      	adds	r5, #8
 800536e:	2d0c      	cmp	r5, #12
 8005370:	bf38      	it	cc
 8005372:	250c      	movcc	r5, #12
 8005374:	2d00      	cmp	r5, #0
 8005376:	4606      	mov	r6, r0
 8005378:	db01      	blt.n	800537e <_malloc_r+0x1a>
 800537a:	42a9      	cmp	r1, r5
 800537c:	d903      	bls.n	8005386 <_malloc_r+0x22>
 800537e:	230c      	movs	r3, #12
 8005380:	6033      	str	r3, [r6, #0]
 8005382:	2000      	movs	r0, #0
 8005384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005386:	f000 fda3 	bl	8005ed0 <__malloc_lock>
 800538a:	4921      	ldr	r1, [pc, #132]	; (8005410 <_malloc_r+0xac>)
 800538c:	680a      	ldr	r2, [r1, #0]
 800538e:	4614      	mov	r4, r2
 8005390:	b99c      	cbnz	r4, 80053ba <_malloc_r+0x56>
 8005392:	4f20      	ldr	r7, [pc, #128]	; (8005414 <_malloc_r+0xb0>)
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	b923      	cbnz	r3, 80053a2 <_malloc_r+0x3e>
 8005398:	4621      	mov	r1, r4
 800539a:	4630      	mov	r0, r6
 800539c:	f000 fb2a 	bl	80059f4 <_sbrk_r>
 80053a0:	6038      	str	r0, [r7, #0]
 80053a2:	4629      	mov	r1, r5
 80053a4:	4630      	mov	r0, r6
 80053a6:	f000 fb25 	bl	80059f4 <_sbrk_r>
 80053aa:	1c43      	adds	r3, r0, #1
 80053ac:	d123      	bne.n	80053f6 <_malloc_r+0x92>
 80053ae:	230c      	movs	r3, #12
 80053b0:	6033      	str	r3, [r6, #0]
 80053b2:	4630      	mov	r0, r6
 80053b4:	f000 fd92 	bl	8005edc <__malloc_unlock>
 80053b8:	e7e3      	b.n	8005382 <_malloc_r+0x1e>
 80053ba:	6823      	ldr	r3, [r4, #0]
 80053bc:	1b5b      	subs	r3, r3, r5
 80053be:	d417      	bmi.n	80053f0 <_malloc_r+0x8c>
 80053c0:	2b0b      	cmp	r3, #11
 80053c2:	d903      	bls.n	80053cc <_malloc_r+0x68>
 80053c4:	6023      	str	r3, [r4, #0]
 80053c6:	441c      	add	r4, r3
 80053c8:	6025      	str	r5, [r4, #0]
 80053ca:	e004      	b.n	80053d6 <_malloc_r+0x72>
 80053cc:	6863      	ldr	r3, [r4, #4]
 80053ce:	42a2      	cmp	r2, r4
 80053d0:	bf0c      	ite	eq
 80053d2:	600b      	streq	r3, [r1, #0]
 80053d4:	6053      	strne	r3, [r2, #4]
 80053d6:	4630      	mov	r0, r6
 80053d8:	f000 fd80 	bl	8005edc <__malloc_unlock>
 80053dc:	f104 000b 	add.w	r0, r4, #11
 80053e0:	1d23      	adds	r3, r4, #4
 80053e2:	f020 0007 	bic.w	r0, r0, #7
 80053e6:	1ac2      	subs	r2, r0, r3
 80053e8:	d0cc      	beq.n	8005384 <_malloc_r+0x20>
 80053ea:	1a1b      	subs	r3, r3, r0
 80053ec:	50a3      	str	r3, [r4, r2]
 80053ee:	e7c9      	b.n	8005384 <_malloc_r+0x20>
 80053f0:	4622      	mov	r2, r4
 80053f2:	6864      	ldr	r4, [r4, #4]
 80053f4:	e7cc      	b.n	8005390 <_malloc_r+0x2c>
 80053f6:	1cc4      	adds	r4, r0, #3
 80053f8:	f024 0403 	bic.w	r4, r4, #3
 80053fc:	42a0      	cmp	r0, r4
 80053fe:	d0e3      	beq.n	80053c8 <_malloc_r+0x64>
 8005400:	1a21      	subs	r1, r4, r0
 8005402:	4630      	mov	r0, r6
 8005404:	f000 faf6 	bl	80059f4 <_sbrk_r>
 8005408:	3001      	adds	r0, #1
 800540a:	d1dd      	bne.n	80053c8 <_malloc_r+0x64>
 800540c:	e7cf      	b.n	80053ae <_malloc_r+0x4a>
 800540e:	bf00      	nop
 8005410:	20000090 	.word	0x20000090
 8005414:	20000094 	.word	0x20000094

08005418 <__sfputc_r>:
 8005418:	6893      	ldr	r3, [r2, #8]
 800541a:	3b01      	subs	r3, #1
 800541c:	2b00      	cmp	r3, #0
 800541e:	b410      	push	{r4}
 8005420:	6093      	str	r3, [r2, #8]
 8005422:	da08      	bge.n	8005436 <__sfputc_r+0x1e>
 8005424:	6994      	ldr	r4, [r2, #24]
 8005426:	42a3      	cmp	r3, r4
 8005428:	db01      	blt.n	800542e <__sfputc_r+0x16>
 800542a:	290a      	cmp	r1, #10
 800542c:	d103      	bne.n	8005436 <__sfputc_r+0x1e>
 800542e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005432:	f000 bb33 	b.w	8005a9c <__swbuf_r>
 8005436:	6813      	ldr	r3, [r2, #0]
 8005438:	1c58      	adds	r0, r3, #1
 800543a:	6010      	str	r0, [r2, #0]
 800543c:	7019      	strb	r1, [r3, #0]
 800543e:	4608      	mov	r0, r1
 8005440:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005444:	4770      	bx	lr

08005446 <__sfputs_r>:
 8005446:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005448:	4606      	mov	r6, r0
 800544a:	460f      	mov	r7, r1
 800544c:	4614      	mov	r4, r2
 800544e:	18d5      	adds	r5, r2, r3
 8005450:	42ac      	cmp	r4, r5
 8005452:	d101      	bne.n	8005458 <__sfputs_r+0x12>
 8005454:	2000      	movs	r0, #0
 8005456:	e007      	b.n	8005468 <__sfputs_r+0x22>
 8005458:	f814 1b01 	ldrb.w	r1, [r4], #1
 800545c:	463a      	mov	r2, r7
 800545e:	4630      	mov	r0, r6
 8005460:	f7ff ffda 	bl	8005418 <__sfputc_r>
 8005464:	1c43      	adds	r3, r0, #1
 8005466:	d1f3      	bne.n	8005450 <__sfputs_r+0xa>
 8005468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800546c <_vfiprintf_r>:
 800546c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005470:	460d      	mov	r5, r1
 8005472:	b09d      	sub	sp, #116	; 0x74
 8005474:	4614      	mov	r4, r2
 8005476:	4698      	mov	r8, r3
 8005478:	4606      	mov	r6, r0
 800547a:	b118      	cbz	r0, 8005484 <_vfiprintf_r+0x18>
 800547c:	6983      	ldr	r3, [r0, #24]
 800547e:	b90b      	cbnz	r3, 8005484 <_vfiprintf_r+0x18>
 8005480:	f7ff fed0 	bl	8005224 <__sinit>
 8005484:	4b89      	ldr	r3, [pc, #548]	; (80056ac <_vfiprintf_r+0x240>)
 8005486:	429d      	cmp	r5, r3
 8005488:	d11b      	bne.n	80054c2 <_vfiprintf_r+0x56>
 800548a:	6875      	ldr	r5, [r6, #4]
 800548c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800548e:	07d9      	lsls	r1, r3, #31
 8005490:	d405      	bmi.n	800549e <_vfiprintf_r+0x32>
 8005492:	89ab      	ldrh	r3, [r5, #12]
 8005494:	059a      	lsls	r2, r3, #22
 8005496:	d402      	bmi.n	800549e <_vfiprintf_r+0x32>
 8005498:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800549a:	f7ff ff61 	bl	8005360 <__retarget_lock_acquire_recursive>
 800549e:	89ab      	ldrh	r3, [r5, #12]
 80054a0:	071b      	lsls	r3, r3, #28
 80054a2:	d501      	bpl.n	80054a8 <_vfiprintf_r+0x3c>
 80054a4:	692b      	ldr	r3, [r5, #16]
 80054a6:	b9eb      	cbnz	r3, 80054e4 <_vfiprintf_r+0x78>
 80054a8:	4629      	mov	r1, r5
 80054aa:	4630      	mov	r0, r6
 80054ac:	f000 fb5a 	bl	8005b64 <__swsetup_r>
 80054b0:	b1c0      	cbz	r0, 80054e4 <_vfiprintf_r+0x78>
 80054b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80054b4:	07dc      	lsls	r4, r3, #31
 80054b6:	d50e      	bpl.n	80054d6 <_vfiprintf_r+0x6a>
 80054b8:	f04f 30ff 	mov.w	r0, #4294967295
 80054bc:	b01d      	add	sp, #116	; 0x74
 80054be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054c2:	4b7b      	ldr	r3, [pc, #492]	; (80056b0 <_vfiprintf_r+0x244>)
 80054c4:	429d      	cmp	r5, r3
 80054c6:	d101      	bne.n	80054cc <_vfiprintf_r+0x60>
 80054c8:	68b5      	ldr	r5, [r6, #8]
 80054ca:	e7df      	b.n	800548c <_vfiprintf_r+0x20>
 80054cc:	4b79      	ldr	r3, [pc, #484]	; (80056b4 <_vfiprintf_r+0x248>)
 80054ce:	429d      	cmp	r5, r3
 80054d0:	bf08      	it	eq
 80054d2:	68f5      	ldreq	r5, [r6, #12]
 80054d4:	e7da      	b.n	800548c <_vfiprintf_r+0x20>
 80054d6:	89ab      	ldrh	r3, [r5, #12]
 80054d8:	0598      	lsls	r0, r3, #22
 80054da:	d4ed      	bmi.n	80054b8 <_vfiprintf_r+0x4c>
 80054dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80054de:	f7ff ff40 	bl	8005362 <__retarget_lock_release_recursive>
 80054e2:	e7e9      	b.n	80054b8 <_vfiprintf_r+0x4c>
 80054e4:	2300      	movs	r3, #0
 80054e6:	9309      	str	r3, [sp, #36]	; 0x24
 80054e8:	2320      	movs	r3, #32
 80054ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80054ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80054f2:	2330      	movs	r3, #48	; 0x30
 80054f4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80056b8 <_vfiprintf_r+0x24c>
 80054f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80054fc:	f04f 0901 	mov.w	r9, #1
 8005500:	4623      	mov	r3, r4
 8005502:	469a      	mov	sl, r3
 8005504:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005508:	b10a      	cbz	r2, 800550e <_vfiprintf_r+0xa2>
 800550a:	2a25      	cmp	r2, #37	; 0x25
 800550c:	d1f9      	bne.n	8005502 <_vfiprintf_r+0x96>
 800550e:	ebba 0b04 	subs.w	fp, sl, r4
 8005512:	d00b      	beq.n	800552c <_vfiprintf_r+0xc0>
 8005514:	465b      	mov	r3, fp
 8005516:	4622      	mov	r2, r4
 8005518:	4629      	mov	r1, r5
 800551a:	4630      	mov	r0, r6
 800551c:	f7ff ff93 	bl	8005446 <__sfputs_r>
 8005520:	3001      	adds	r0, #1
 8005522:	f000 80aa 	beq.w	800567a <_vfiprintf_r+0x20e>
 8005526:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005528:	445a      	add	r2, fp
 800552a:	9209      	str	r2, [sp, #36]	; 0x24
 800552c:	f89a 3000 	ldrb.w	r3, [sl]
 8005530:	2b00      	cmp	r3, #0
 8005532:	f000 80a2 	beq.w	800567a <_vfiprintf_r+0x20e>
 8005536:	2300      	movs	r3, #0
 8005538:	f04f 32ff 	mov.w	r2, #4294967295
 800553c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005540:	f10a 0a01 	add.w	sl, sl, #1
 8005544:	9304      	str	r3, [sp, #16]
 8005546:	9307      	str	r3, [sp, #28]
 8005548:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800554c:	931a      	str	r3, [sp, #104]	; 0x68
 800554e:	4654      	mov	r4, sl
 8005550:	2205      	movs	r2, #5
 8005552:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005556:	4858      	ldr	r0, [pc, #352]	; (80056b8 <_vfiprintf_r+0x24c>)
 8005558:	f7fa fe3a 	bl	80001d0 <memchr>
 800555c:	9a04      	ldr	r2, [sp, #16]
 800555e:	b9d8      	cbnz	r0, 8005598 <_vfiprintf_r+0x12c>
 8005560:	06d1      	lsls	r1, r2, #27
 8005562:	bf44      	itt	mi
 8005564:	2320      	movmi	r3, #32
 8005566:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800556a:	0713      	lsls	r3, r2, #28
 800556c:	bf44      	itt	mi
 800556e:	232b      	movmi	r3, #43	; 0x2b
 8005570:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005574:	f89a 3000 	ldrb.w	r3, [sl]
 8005578:	2b2a      	cmp	r3, #42	; 0x2a
 800557a:	d015      	beq.n	80055a8 <_vfiprintf_r+0x13c>
 800557c:	9a07      	ldr	r2, [sp, #28]
 800557e:	4654      	mov	r4, sl
 8005580:	2000      	movs	r0, #0
 8005582:	f04f 0c0a 	mov.w	ip, #10
 8005586:	4621      	mov	r1, r4
 8005588:	f811 3b01 	ldrb.w	r3, [r1], #1
 800558c:	3b30      	subs	r3, #48	; 0x30
 800558e:	2b09      	cmp	r3, #9
 8005590:	d94e      	bls.n	8005630 <_vfiprintf_r+0x1c4>
 8005592:	b1b0      	cbz	r0, 80055c2 <_vfiprintf_r+0x156>
 8005594:	9207      	str	r2, [sp, #28]
 8005596:	e014      	b.n	80055c2 <_vfiprintf_r+0x156>
 8005598:	eba0 0308 	sub.w	r3, r0, r8
 800559c:	fa09 f303 	lsl.w	r3, r9, r3
 80055a0:	4313      	orrs	r3, r2
 80055a2:	9304      	str	r3, [sp, #16]
 80055a4:	46a2      	mov	sl, r4
 80055a6:	e7d2      	b.n	800554e <_vfiprintf_r+0xe2>
 80055a8:	9b03      	ldr	r3, [sp, #12]
 80055aa:	1d19      	adds	r1, r3, #4
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	9103      	str	r1, [sp, #12]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	bfbb      	ittet	lt
 80055b4:	425b      	neglt	r3, r3
 80055b6:	f042 0202 	orrlt.w	r2, r2, #2
 80055ba:	9307      	strge	r3, [sp, #28]
 80055bc:	9307      	strlt	r3, [sp, #28]
 80055be:	bfb8      	it	lt
 80055c0:	9204      	strlt	r2, [sp, #16]
 80055c2:	7823      	ldrb	r3, [r4, #0]
 80055c4:	2b2e      	cmp	r3, #46	; 0x2e
 80055c6:	d10c      	bne.n	80055e2 <_vfiprintf_r+0x176>
 80055c8:	7863      	ldrb	r3, [r4, #1]
 80055ca:	2b2a      	cmp	r3, #42	; 0x2a
 80055cc:	d135      	bne.n	800563a <_vfiprintf_r+0x1ce>
 80055ce:	9b03      	ldr	r3, [sp, #12]
 80055d0:	1d1a      	adds	r2, r3, #4
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	9203      	str	r2, [sp, #12]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	bfb8      	it	lt
 80055da:	f04f 33ff 	movlt.w	r3, #4294967295
 80055de:	3402      	adds	r4, #2
 80055e0:	9305      	str	r3, [sp, #20]
 80055e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80056c8 <_vfiprintf_r+0x25c>
 80055e6:	7821      	ldrb	r1, [r4, #0]
 80055e8:	2203      	movs	r2, #3
 80055ea:	4650      	mov	r0, sl
 80055ec:	f7fa fdf0 	bl	80001d0 <memchr>
 80055f0:	b140      	cbz	r0, 8005604 <_vfiprintf_r+0x198>
 80055f2:	2340      	movs	r3, #64	; 0x40
 80055f4:	eba0 000a 	sub.w	r0, r0, sl
 80055f8:	fa03 f000 	lsl.w	r0, r3, r0
 80055fc:	9b04      	ldr	r3, [sp, #16]
 80055fe:	4303      	orrs	r3, r0
 8005600:	3401      	adds	r4, #1
 8005602:	9304      	str	r3, [sp, #16]
 8005604:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005608:	482c      	ldr	r0, [pc, #176]	; (80056bc <_vfiprintf_r+0x250>)
 800560a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800560e:	2206      	movs	r2, #6
 8005610:	f7fa fdde 	bl	80001d0 <memchr>
 8005614:	2800      	cmp	r0, #0
 8005616:	d03f      	beq.n	8005698 <_vfiprintf_r+0x22c>
 8005618:	4b29      	ldr	r3, [pc, #164]	; (80056c0 <_vfiprintf_r+0x254>)
 800561a:	bb1b      	cbnz	r3, 8005664 <_vfiprintf_r+0x1f8>
 800561c:	9b03      	ldr	r3, [sp, #12]
 800561e:	3307      	adds	r3, #7
 8005620:	f023 0307 	bic.w	r3, r3, #7
 8005624:	3308      	adds	r3, #8
 8005626:	9303      	str	r3, [sp, #12]
 8005628:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800562a:	443b      	add	r3, r7
 800562c:	9309      	str	r3, [sp, #36]	; 0x24
 800562e:	e767      	b.n	8005500 <_vfiprintf_r+0x94>
 8005630:	fb0c 3202 	mla	r2, ip, r2, r3
 8005634:	460c      	mov	r4, r1
 8005636:	2001      	movs	r0, #1
 8005638:	e7a5      	b.n	8005586 <_vfiprintf_r+0x11a>
 800563a:	2300      	movs	r3, #0
 800563c:	3401      	adds	r4, #1
 800563e:	9305      	str	r3, [sp, #20]
 8005640:	4619      	mov	r1, r3
 8005642:	f04f 0c0a 	mov.w	ip, #10
 8005646:	4620      	mov	r0, r4
 8005648:	f810 2b01 	ldrb.w	r2, [r0], #1
 800564c:	3a30      	subs	r2, #48	; 0x30
 800564e:	2a09      	cmp	r2, #9
 8005650:	d903      	bls.n	800565a <_vfiprintf_r+0x1ee>
 8005652:	2b00      	cmp	r3, #0
 8005654:	d0c5      	beq.n	80055e2 <_vfiprintf_r+0x176>
 8005656:	9105      	str	r1, [sp, #20]
 8005658:	e7c3      	b.n	80055e2 <_vfiprintf_r+0x176>
 800565a:	fb0c 2101 	mla	r1, ip, r1, r2
 800565e:	4604      	mov	r4, r0
 8005660:	2301      	movs	r3, #1
 8005662:	e7f0      	b.n	8005646 <_vfiprintf_r+0x1da>
 8005664:	ab03      	add	r3, sp, #12
 8005666:	9300      	str	r3, [sp, #0]
 8005668:	462a      	mov	r2, r5
 800566a:	4b16      	ldr	r3, [pc, #88]	; (80056c4 <_vfiprintf_r+0x258>)
 800566c:	a904      	add	r1, sp, #16
 800566e:	4630      	mov	r0, r6
 8005670:	f3af 8000 	nop.w
 8005674:	4607      	mov	r7, r0
 8005676:	1c78      	adds	r0, r7, #1
 8005678:	d1d6      	bne.n	8005628 <_vfiprintf_r+0x1bc>
 800567a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800567c:	07d9      	lsls	r1, r3, #31
 800567e:	d405      	bmi.n	800568c <_vfiprintf_r+0x220>
 8005680:	89ab      	ldrh	r3, [r5, #12]
 8005682:	059a      	lsls	r2, r3, #22
 8005684:	d402      	bmi.n	800568c <_vfiprintf_r+0x220>
 8005686:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005688:	f7ff fe6b 	bl	8005362 <__retarget_lock_release_recursive>
 800568c:	89ab      	ldrh	r3, [r5, #12]
 800568e:	065b      	lsls	r3, r3, #25
 8005690:	f53f af12 	bmi.w	80054b8 <_vfiprintf_r+0x4c>
 8005694:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005696:	e711      	b.n	80054bc <_vfiprintf_r+0x50>
 8005698:	ab03      	add	r3, sp, #12
 800569a:	9300      	str	r3, [sp, #0]
 800569c:	462a      	mov	r2, r5
 800569e:	4b09      	ldr	r3, [pc, #36]	; (80056c4 <_vfiprintf_r+0x258>)
 80056a0:	a904      	add	r1, sp, #16
 80056a2:	4630      	mov	r0, r6
 80056a4:	f000 f880 	bl	80057a8 <_printf_i>
 80056a8:	e7e4      	b.n	8005674 <_vfiprintf_r+0x208>
 80056aa:	bf00      	nop
 80056ac:	080060b8 	.word	0x080060b8
 80056b0:	080060d8 	.word	0x080060d8
 80056b4:	08006098 	.word	0x08006098
 80056b8:	080060f8 	.word	0x080060f8
 80056bc:	08006102 	.word	0x08006102
 80056c0:	00000000 	.word	0x00000000
 80056c4:	08005447 	.word	0x08005447
 80056c8:	080060fe 	.word	0x080060fe

080056cc <_printf_common>:
 80056cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056d0:	4616      	mov	r6, r2
 80056d2:	4699      	mov	r9, r3
 80056d4:	688a      	ldr	r2, [r1, #8]
 80056d6:	690b      	ldr	r3, [r1, #16]
 80056d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80056dc:	4293      	cmp	r3, r2
 80056de:	bfb8      	it	lt
 80056e0:	4613      	movlt	r3, r2
 80056e2:	6033      	str	r3, [r6, #0]
 80056e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80056e8:	4607      	mov	r7, r0
 80056ea:	460c      	mov	r4, r1
 80056ec:	b10a      	cbz	r2, 80056f2 <_printf_common+0x26>
 80056ee:	3301      	adds	r3, #1
 80056f0:	6033      	str	r3, [r6, #0]
 80056f2:	6823      	ldr	r3, [r4, #0]
 80056f4:	0699      	lsls	r1, r3, #26
 80056f6:	bf42      	ittt	mi
 80056f8:	6833      	ldrmi	r3, [r6, #0]
 80056fa:	3302      	addmi	r3, #2
 80056fc:	6033      	strmi	r3, [r6, #0]
 80056fe:	6825      	ldr	r5, [r4, #0]
 8005700:	f015 0506 	ands.w	r5, r5, #6
 8005704:	d106      	bne.n	8005714 <_printf_common+0x48>
 8005706:	f104 0a19 	add.w	sl, r4, #25
 800570a:	68e3      	ldr	r3, [r4, #12]
 800570c:	6832      	ldr	r2, [r6, #0]
 800570e:	1a9b      	subs	r3, r3, r2
 8005710:	42ab      	cmp	r3, r5
 8005712:	dc26      	bgt.n	8005762 <_printf_common+0x96>
 8005714:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005718:	1e13      	subs	r3, r2, #0
 800571a:	6822      	ldr	r2, [r4, #0]
 800571c:	bf18      	it	ne
 800571e:	2301      	movne	r3, #1
 8005720:	0692      	lsls	r2, r2, #26
 8005722:	d42b      	bmi.n	800577c <_printf_common+0xb0>
 8005724:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005728:	4649      	mov	r1, r9
 800572a:	4638      	mov	r0, r7
 800572c:	47c0      	blx	r8
 800572e:	3001      	adds	r0, #1
 8005730:	d01e      	beq.n	8005770 <_printf_common+0xa4>
 8005732:	6823      	ldr	r3, [r4, #0]
 8005734:	68e5      	ldr	r5, [r4, #12]
 8005736:	6832      	ldr	r2, [r6, #0]
 8005738:	f003 0306 	and.w	r3, r3, #6
 800573c:	2b04      	cmp	r3, #4
 800573e:	bf08      	it	eq
 8005740:	1aad      	subeq	r5, r5, r2
 8005742:	68a3      	ldr	r3, [r4, #8]
 8005744:	6922      	ldr	r2, [r4, #16]
 8005746:	bf0c      	ite	eq
 8005748:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800574c:	2500      	movne	r5, #0
 800574e:	4293      	cmp	r3, r2
 8005750:	bfc4      	itt	gt
 8005752:	1a9b      	subgt	r3, r3, r2
 8005754:	18ed      	addgt	r5, r5, r3
 8005756:	2600      	movs	r6, #0
 8005758:	341a      	adds	r4, #26
 800575a:	42b5      	cmp	r5, r6
 800575c:	d11a      	bne.n	8005794 <_printf_common+0xc8>
 800575e:	2000      	movs	r0, #0
 8005760:	e008      	b.n	8005774 <_printf_common+0xa8>
 8005762:	2301      	movs	r3, #1
 8005764:	4652      	mov	r2, sl
 8005766:	4649      	mov	r1, r9
 8005768:	4638      	mov	r0, r7
 800576a:	47c0      	blx	r8
 800576c:	3001      	adds	r0, #1
 800576e:	d103      	bne.n	8005778 <_printf_common+0xac>
 8005770:	f04f 30ff 	mov.w	r0, #4294967295
 8005774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005778:	3501      	adds	r5, #1
 800577a:	e7c6      	b.n	800570a <_printf_common+0x3e>
 800577c:	18e1      	adds	r1, r4, r3
 800577e:	1c5a      	adds	r2, r3, #1
 8005780:	2030      	movs	r0, #48	; 0x30
 8005782:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005786:	4422      	add	r2, r4
 8005788:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800578c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005790:	3302      	adds	r3, #2
 8005792:	e7c7      	b.n	8005724 <_printf_common+0x58>
 8005794:	2301      	movs	r3, #1
 8005796:	4622      	mov	r2, r4
 8005798:	4649      	mov	r1, r9
 800579a:	4638      	mov	r0, r7
 800579c:	47c0      	blx	r8
 800579e:	3001      	adds	r0, #1
 80057a0:	d0e6      	beq.n	8005770 <_printf_common+0xa4>
 80057a2:	3601      	adds	r6, #1
 80057a4:	e7d9      	b.n	800575a <_printf_common+0x8e>
	...

080057a8 <_printf_i>:
 80057a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057ac:	460c      	mov	r4, r1
 80057ae:	4691      	mov	r9, r2
 80057b0:	7e27      	ldrb	r7, [r4, #24]
 80057b2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80057b4:	2f78      	cmp	r7, #120	; 0x78
 80057b6:	4680      	mov	r8, r0
 80057b8:	469a      	mov	sl, r3
 80057ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80057be:	d807      	bhi.n	80057d0 <_printf_i+0x28>
 80057c0:	2f62      	cmp	r7, #98	; 0x62
 80057c2:	d80a      	bhi.n	80057da <_printf_i+0x32>
 80057c4:	2f00      	cmp	r7, #0
 80057c6:	f000 80d8 	beq.w	800597a <_printf_i+0x1d2>
 80057ca:	2f58      	cmp	r7, #88	; 0x58
 80057cc:	f000 80a3 	beq.w	8005916 <_printf_i+0x16e>
 80057d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80057d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80057d8:	e03a      	b.n	8005850 <_printf_i+0xa8>
 80057da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80057de:	2b15      	cmp	r3, #21
 80057e0:	d8f6      	bhi.n	80057d0 <_printf_i+0x28>
 80057e2:	a001      	add	r0, pc, #4	; (adr r0, 80057e8 <_printf_i+0x40>)
 80057e4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80057e8:	08005841 	.word	0x08005841
 80057ec:	08005855 	.word	0x08005855
 80057f0:	080057d1 	.word	0x080057d1
 80057f4:	080057d1 	.word	0x080057d1
 80057f8:	080057d1 	.word	0x080057d1
 80057fc:	080057d1 	.word	0x080057d1
 8005800:	08005855 	.word	0x08005855
 8005804:	080057d1 	.word	0x080057d1
 8005808:	080057d1 	.word	0x080057d1
 800580c:	080057d1 	.word	0x080057d1
 8005810:	080057d1 	.word	0x080057d1
 8005814:	08005961 	.word	0x08005961
 8005818:	08005885 	.word	0x08005885
 800581c:	08005943 	.word	0x08005943
 8005820:	080057d1 	.word	0x080057d1
 8005824:	080057d1 	.word	0x080057d1
 8005828:	08005983 	.word	0x08005983
 800582c:	080057d1 	.word	0x080057d1
 8005830:	08005885 	.word	0x08005885
 8005834:	080057d1 	.word	0x080057d1
 8005838:	080057d1 	.word	0x080057d1
 800583c:	0800594b 	.word	0x0800594b
 8005840:	680b      	ldr	r3, [r1, #0]
 8005842:	1d1a      	adds	r2, r3, #4
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	600a      	str	r2, [r1, #0]
 8005848:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800584c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005850:	2301      	movs	r3, #1
 8005852:	e0a3      	b.n	800599c <_printf_i+0x1f4>
 8005854:	6825      	ldr	r5, [r4, #0]
 8005856:	6808      	ldr	r0, [r1, #0]
 8005858:	062e      	lsls	r6, r5, #24
 800585a:	f100 0304 	add.w	r3, r0, #4
 800585e:	d50a      	bpl.n	8005876 <_printf_i+0xce>
 8005860:	6805      	ldr	r5, [r0, #0]
 8005862:	600b      	str	r3, [r1, #0]
 8005864:	2d00      	cmp	r5, #0
 8005866:	da03      	bge.n	8005870 <_printf_i+0xc8>
 8005868:	232d      	movs	r3, #45	; 0x2d
 800586a:	426d      	negs	r5, r5
 800586c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005870:	485e      	ldr	r0, [pc, #376]	; (80059ec <_printf_i+0x244>)
 8005872:	230a      	movs	r3, #10
 8005874:	e019      	b.n	80058aa <_printf_i+0x102>
 8005876:	f015 0f40 	tst.w	r5, #64	; 0x40
 800587a:	6805      	ldr	r5, [r0, #0]
 800587c:	600b      	str	r3, [r1, #0]
 800587e:	bf18      	it	ne
 8005880:	b22d      	sxthne	r5, r5
 8005882:	e7ef      	b.n	8005864 <_printf_i+0xbc>
 8005884:	680b      	ldr	r3, [r1, #0]
 8005886:	6825      	ldr	r5, [r4, #0]
 8005888:	1d18      	adds	r0, r3, #4
 800588a:	6008      	str	r0, [r1, #0]
 800588c:	0628      	lsls	r0, r5, #24
 800588e:	d501      	bpl.n	8005894 <_printf_i+0xec>
 8005890:	681d      	ldr	r5, [r3, #0]
 8005892:	e002      	b.n	800589a <_printf_i+0xf2>
 8005894:	0669      	lsls	r1, r5, #25
 8005896:	d5fb      	bpl.n	8005890 <_printf_i+0xe8>
 8005898:	881d      	ldrh	r5, [r3, #0]
 800589a:	4854      	ldr	r0, [pc, #336]	; (80059ec <_printf_i+0x244>)
 800589c:	2f6f      	cmp	r7, #111	; 0x6f
 800589e:	bf0c      	ite	eq
 80058a0:	2308      	moveq	r3, #8
 80058a2:	230a      	movne	r3, #10
 80058a4:	2100      	movs	r1, #0
 80058a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80058aa:	6866      	ldr	r6, [r4, #4]
 80058ac:	60a6      	str	r6, [r4, #8]
 80058ae:	2e00      	cmp	r6, #0
 80058b0:	bfa2      	ittt	ge
 80058b2:	6821      	ldrge	r1, [r4, #0]
 80058b4:	f021 0104 	bicge.w	r1, r1, #4
 80058b8:	6021      	strge	r1, [r4, #0]
 80058ba:	b90d      	cbnz	r5, 80058c0 <_printf_i+0x118>
 80058bc:	2e00      	cmp	r6, #0
 80058be:	d04d      	beq.n	800595c <_printf_i+0x1b4>
 80058c0:	4616      	mov	r6, r2
 80058c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80058c6:	fb03 5711 	mls	r7, r3, r1, r5
 80058ca:	5dc7      	ldrb	r7, [r0, r7]
 80058cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80058d0:	462f      	mov	r7, r5
 80058d2:	42bb      	cmp	r3, r7
 80058d4:	460d      	mov	r5, r1
 80058d6:	d9f4      	bls.n	80058c2 <_printf_i+0x11a>
 80058d8:	2b08      	cmp	r3, #8
 80058da:	d10b      	bne.n	80058f4 <_printf_i+0x14c>
 80058dc:	6823      	ldr	r3, [r4, #0]
 80058de:	07df      	lsls	r7, r3, #31
 80058e0:	d508      	bpl.n	80058f4 <_printf_i+0x14c>
 80058e2:	6923      	ldr	r3, [r4, #16]
 80058e4:	6861      	ldr	r1, [r4, #4]
 80058e6:	4299      	cmp	r1, r3
 80058e8:	bfde      	ittt	le
 80058ea:	2330      	movle	r3, #48	; 0x30
 80058ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80058f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80058f4:	1b92      	subs	r2, r2, r6
 80058f6:	6122      	str	r2, [r4, #16]
 80058f8:	f8cd a000 	str.w	sl, [sp]
 80058fc:	464b      	mov	r3, r9
 80058fe:	aa03      	add	r2, sp, #12
 8005900:	4621      	mov	r1, r4
 8005902:	4640      	mov	r0, r8
 8005904:	f7ff fee2 	bl	80056cc <_printf_common>
 8005908:	3001      	adds	r0, #1
 800590a:	d14c      	bne.n	80059a6 <_printf_i+0x1fe>
 800590c:	f04f 30ff 	mov.w	r0, #4294967295
 8005910:	b004      	add	sp, #16
 8005912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005916:	4835      	ldr	r0, [pc, #212]	; (80059ec <_printf_i+0x244>)
 8005918:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800591c:	6823      	ldr	r3, [r4, #0]
 800591e:	680e      	ldr	r6, [r1, #0]
 8005920:	061f      	lsls	r7, r3, #24
 8005922:	f856 5b04 	ldr.w	r5, [r6], #4
 8005926:	600e      	str	r6, [r1, #0]
 8005928:	d514      	bpl.n	8005954 <_printf_i+0x1ac>
 800592a:	07d9      	lsls	r1, r3, #31
 800592c:	bf44      	itt	mi
 800592e:	f043 0320 	orrmi.w	r3, r3, #32
 8005932:	6023      	strmi	r3, [r4, #0]
 8005934:	b91d      	cbnz	r5, 800593e <_printf_i+0x196>
 8005936:	6823      	ldr	r3, [r4, #0]
 8005938:	f023 0320 	bic.w	r3, r3, #32
 800593c:	6023      	str	r3, [r4, #0]
 800593e:	2310      	movs	r3, #16
 8005940:	e7b0      	b.n	80058a4 <_printf_i+0xfc>
 8005942:	6823      	ldr	r3, [r4, #0]
 8005944:	f043 0320 	orr.w	r3, r3, #32
 8005948:	6023      	str	r3, [r4, #0]
 800594a:	2378      	movs	r3, #120	; 0x78
 800594c:	4828      	ldr	r0, [pc, #160]	; (80059f0 <_printf_i+0x248>)
 800594e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005952:	e7e3      	b.n	800591c <_printf_i+0x174>
 8005954:	065e      	lsls	r6, r3, #25
 8005956:	bf48      	it	mi
 8005958:	b2ad      	uxthmi	r5, r5
 800595a:	e7e6      	b.n	800592a <_printf_i+0x182>
 800595c:	4616      	mov	r6, r2
 800595e:	e7bb      	b.n	80058d8 <_printf_i+0x130>
 8005960:	680b      	ldr	r3, [r1, #0]
 8005962:	6826      	ldr	r6, [r4, #0]
 8005964:	6960      	ldr	r0, [r4, #20]
 8005966:	1d1d      	adds	r5, r3, #4
 8005968:	600d      	str	r5, [r1, #0]
 800596a:	0635      	lsls	r5, r6, #24
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	d501      	bpl.n	8005974 <_printf_i+0x1cc>
 8005970:	6018      	str	r0, [r3, #0]
 8005972:	e002      	b.n	800597a <_printf_i+0x1d2>
 8005974:	0671      	lsls	r1, r6, #25
 8005976:	d5fb      	bpl.n	8005970 <_printf_i+0x1c8>
 8005978:	8018      	strh	r0, [r3, #0]
 800597a:	2300      	movs	r3, #0
 800597c:	6123      	str	r3, [r4, #16]
 800597e:	4616      	mov	r6, r2
 8005980:	e7ba      	b.n	80058f8 <_printf_i+0x150>
 8005982:	680b      	ldr	r3, [r1, #0]
 8005984:	1d1a      	adds	r2, r3, #4
 8005986:	600a      	str	r2, [r1, #0]
 8005988:	681e      	ldr	r6, [r3, #0]
 800598a:	6862      	ldr	r2, [r4, #4]
 800598c:	2100      	movs	r1, #0
 800598e:	4630      	mov	r0, r6
 8005990:	f7fa fc1e 	bl	80001d0 <memchr>
 8005994:	b108      	cbz	r0, 800599a <_printf_i+0x1f2>
 8005996:	1b80      	subs	r0, r0, r6
 8005998:	6060      	str	r0, [r4, #4]
 800599a:	6863      	ldr	r3, [r4, #4]
 800599c:	6123      	str	r3, [r4, #16]
 800599e:	2300      	movs	r3, #0
 80059a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059a4:	e7a8      	b.n	80058f8 <_printf_i+0x150>
 80059a6:	6923      	ldr	r3, [r4, #16]
 80059a8:	4632      	mov	r2, r6
 80059aa:	4649      	mov	r1, r9
 80059ac:	4640      	mov	r0, r8
 80059ae:	47d0      	blx	sl
 80059b0:	3001      	adds	r0, #1
 80059b2:	d0ab      	beq.n	800590c <_printf_i+0x164>
 80059b4:	6823      	ldr	r3, [r4, #0]
 80059b6:	079b      	lsls	r3, r3, #30
 80059b8:	d413      	bmi.n	80059e2 <_printf_i+0x23a>
 80059ba:	68e0      	ldr	r0, [r4, #12]
 80059bc:	9b03      	ldr	r3, [sp, #12]
 80059be:	4298      	cmp	r0, r3
 80059c0:	bfb8      	it	lt
 80059c2:	4618      	movlt	r0, r3
 80059c4:	e7a4      	b.n	8005910 <_printf_i+0x168>
 80059c6:	2301      	movs	r3, #1
 80059c8:	4632      	mov	r2, r6
 80059ca:	4649      	mov	r1, r9
 80059cc:	4640      	mov	r0, r8
 80059ce:	47d0      	blx	sl
 80059d0:	3001      	adds	r0, #1
 80059d2:	d09b      	beq.n	800590c <_printf_i+0x164>
 80059d4:	3501      	adds	r5, #1
 80059d6:	68e3      	ldr	r3, [r4, #12]
 80059d8:	9903      	ldr	r1, [sp, #12]
 80059da:	1a5b      	subs	r3, r3, r1
 80059dc:	42ab      	cmp	r3, r5
 80059de:	dcf2      	bgt.n	80059c6 <_printf_i+0x21e>
 80059e0:	e7eb      	b.n	80059ba <_printf_i+0x212>
 80059e2:	2500      	movs	r5, #0
 80059e4:	f104 0619 	add.w	r6, r4, #25
 80059e8:	e7f5      	b.n	80059d6 <_printf_i+0x22e>
 80059ea:	bf00      	nop
 80059ec:	08006109 	.word	0x08006109
 80059f0:	0800611a 	.word	0x0800611a

080059f4 <_sbrk_r>:
 80059f4:	b538      	push	{r3, r4, r5, lr}
 80059f6:	4d06      	ldr	r5, [pc, #24]	; (8005a10 <_sbrk_r+0x1c>)
 80059f8:	2300      	movs	r3, #0
 80059fa:	4604      	mov	r4, r0
 80059fc:	4608      	mov	r0, r1
 80059fe:	602b      	str	r3, [r5, #0]
 8005a00:	f7fb f9f8 	bl	8000df4 <_sbrk>
 8005a04:	1c43      	adds	r3, r0, #1
 8005a06:	d102      	bne.n	8005a0e <_sbrk_r+0x1a>
 8005a08:	682b      	ldr	r3, [r5, #0]
 8005a0a:	b103      	cbz	r3, 8005a0e <_sbrk_r+0x1a>
 8005a0c:	6023      	str	r3, [r4, #0]
 8005a0e:	bd38      	pop	{r3, r4, r5, pc}
 8005a10:	200001e4 	.word	0x200001e4

08005a14 <__sread>:
 8005a14:	b510      	push	{r4, lr}
 8005a16:	460c      	mov	r4, r1
 8005a18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a1c:	f000 fab4 	bl	8005f88 <_read_r>
 8005a20:	2800      	cmp	r0, #0
 8005a22:	bfab      	itete	ge
 8005a24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005a26:	89a3      	ldrhlt	r3, [r4, #12]
 8005a28:	181b      	addge	r3, r3, r0
 8005a2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005a2e:	bfac      	ite	ge
 8005a30:	6563      	strge	r3, [r4, #84]	; 0x54
 8005a32:	81a3      	strhlt	r3, [r4, #12]
 8005a34:	bd10      	pop	{r4, pc}

08005a36 <__swrite>:
 8005a36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a3a:	461f      	mov	r7, r3
 8005a3c:	898b      	ldrh	r3, [r1, #12]
 8005a3e:	05db      	lsls	r3, r3, #23
 8005a40:	4605      	mov	r5, r0
 8005a42:	460c      	mov	r4, r1
 8005a44:	4616      	mov	r6, r2
 8005a46:	d505      	bpl.n	8005a54 <__swrite+0x1e>
 8005a48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a4c:	2302      	movs	r3, #2
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f000 f9c8 	bl	8005de4 <_lseek_r>
 8005a54:	89a3      	ldrh	r3, [r4, #12]
 8005a56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a5e:	81a3      	strh	r3, [r4, #12]
 8005a60:	4632      	mov	r2, r6
 8005a62:	463b      	mov	r3, r7
 8005a64:	4628      	mov	r0, r5
 8005a66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a6a:	f000 b869 	b.w	8005b40 <_write_r>

08005a6e <__sseek>:
 8005a6e:	b510      	push	{r4, lr}
 8005a70:	460c      	mov	r4, r1
 8005a72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a76:	f000 f9b5 	bl	8005de4 <_lseek_r>
 8005a7a:	1c43      	adds	r3, r0, #1
 8005a7c:	89a3      	ldrh	r3, [r4, #12]
 8005a7e:	bf15      	itete	ne
 8005a80:	6560      	strne	r0, [r4, #84]	; 0x54
 8005a82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005a86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005a8a:	81a3      	strheq	r3, [r4, #12]
 8005a8c:	bf18      	it	ne
 8005a8e:	81a3      	strhne	r3, [r4, #12]
 8005a90:	bd10      	pop	{r4, pc}

08005a92 <__sclose>:
 8005a92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a96:	f000 b8d3 	b.w	8005c40 <_close_r>
	...

08005a9c <__swbuf_r>:
 8005a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a9e:	460e      	mov	r6, r1
 8005aa0:	4614      	mov	r4, r2
 8005aa2:	4605      	mov	r5, r0
 8005aa4:	b118      	cbz	r0, 8005aae <__swbuf_r+0x12>
 8005aa6:	6983      	ldr	r3, [r0, #24]
 8005aa8:	b90b      	cbnz	r3, 8005aae <__swbuf_r+0x12>
 8005aaa:	f7ff fbbb 	bl	8005224 <__sinit>
 8005aae:	4b21      	ldr	r3, [pc, #132]	; (8005b34 <__swbuf_r+0x98>)
 8005ab0:	429c      	cmp	r4, r3
 8005ab2:	d12b      	bne.n	8005b0c <__swbuf_r+0x70>
 8005ab4:	686c      	ldr	r4, [r5, #4]
 8005ab6:	69a3      	ldr	r3, [r4, #24]
 8005ab8:	60a3      	str	r3, [r4, #8]
 8005aba:	89a3      	ldrh	r3, [r4, #12]
 8005abc:	071a      	lsls	r2, r3, #28
 8005abe:	d52f      	bpl.n	8005b20 <__swbuf_r+0x84>
 8005ac0:	6923      	ldr	r3, [r4, #16]
 8005ac2:	b36b      	cbz	r3, 8005b20 <__swbuf_r+0x84>
 8005ac4:	6923      	ldr	r3, [r4, #16]
 8005ac6:	6820      	ldr	r0, [r4, #0]
 8005ac8:	1ac0      	subs	r0, r0, r3
 8005aca:	6963      	ldr	r3, [r4, #20]
 8005acc:	b2f6      	uxtb	r6, r6
 8005ace:	4283      	cmp	r3, r0
 8005ad0:	4637      	mov	r7, r6
 8005ad2:	dc04      	bgt.n	8005ade <__swbuf_r+0x42>
 8005ad4:	4621      	mov	r1, r4
 8005ad6:	4628      	mov	r0, r5
 8005ad8:	f000 f948 	bl	8005d6c <_fflush_r>
 8005adc:	bb30      	cbnz	r0, 8005b2c <__swbuf_r+0x90>
 8005ade:	68a3      	ldr	r3, [r4, #8]
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	60a3      	str	r3, [r4, #8]
 8005ae4:	6823      	ldr	r3, [r4, #0]
 8005ae6:	1c5a      	adds	r2, r3, #1
 8005ae8:	6022      	str	r2, [r4, #0]
 8005aea:	701e      	strb	r6, [r3, #0]
 8005aec:	6963      	ldr	r3, [r4, #20]
 8005aee:	3001      	adds	r0, #1
 8005af0:	4283      	cmp	r3, r0
 8005af2:	d004      	beq.n	8005afe <__swbuf_r+0x62>
 8005af4:	89a3      	ldrh	r3, [r4, #12]
 8005af6:	07db      	lsls	r3, r3, #31
 8005af8:	d506      	bpl.n	8005b08 <__swbuf_r+0x6c>
 8005afa:	2e0a      	cmp	r6, #10
 8005afc:	d104      	bne.n	8005b08 <__swbuf_r+0x6c>
 8005afe:	4621      	mov	r1, r4
 8005b00:	4628      	mov	r0, r5
 8005b02:	f000 f933 	bl	8005d6c <_fflush_r>
 8005b06:	b988      	cbnz	r0, 8005b2c <__swbuf_r+0x90>
 8005b08:	4638      	mov	r0, r7
 8005b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b0c:	4b0a      	ldr	r3, [pc, #40]	; (8005b38 <__swbuf_r+0x9c>)
 8005b0e:	429c      	cmp	r4, r3
 8005b10:	d101      	bne.n	8005b16 <__swbuf_r+0x7a>
 8005b12:	68ac      	ldr	r4, [r5, #8]
 8005b14:	e7cf      	b.n	8005ab6 <__swbuf_r+0x1a>
 8005b16:	4b09      	ldr	r3, [pc, #36]	; (8005b3c <__swbuf_r+0xa0>)
 8005b18:	429c      	cmp	r4, r3
 8005b1a:	bf08      	it	eq
 8005b1c:	68ec      	ldreq	r4, [r5, #12]
 8005b1e:	e7ca      	b.n	8005ab6 <__swbuf_r+0x1a>
 8005b20:	4621      	mov	r1, r4
 8005b22:	4628      	mov	r0, r5
 8005b24:	f000 f81e 	bl	8005b64 <__swsetup_r>
 8005b28:	2800      	cmp	r0, #0
 8005b2a:	d0cb      	beq.n	8005ac4 <__swbuf_r+0x28>
 8005b2c:	f04f 37ff 	mov.w	r7, #4294967295
 8005b30:	e7ea      	b.n	8005b08 <__swbuf_r+0x6c>
 8005b32:	bf00      	nop
 8005b34:	080060b8 	.word	0x080060b8
 8005b38:	080060d8 	.word	0x080060d8
 8005b3c:	08006098 	.word	0x08006098

08005b40 <_write_r>:
 8005b40:	b538      	push	{r3, r4, r5, lr}
 8005b42:	4d07      	ldr	r5, [pc, #28]	; (8005b60 <_write_r+0x20>)
 8005b44:	4604      	mov	r4, r0
 8005b46:	4608      	mov	r0, r1
 8005b48:	4611      	mov	r1, r2
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	602a      	str	r2, [r5, #0]
 8005b4e:	461a      	mov	r2, r3
 8005b50:	f7fa ff0c 	bl	800096c <_write>
 8005b54:	1c43      	adds	r3, r0, #1
 8005b56:	d102      	bne.n	8005b5e <_write_r+0x1e>
 8005b58:	682b      	ldr	r3, [r5, #0]
 8005b5a:	b103      	cbz	r3, 8005b5e <_write_r+0x1e>
 8005b5c:	6023      	str	r3, [r4, #0]
 8005b5e:	bd38      	pop	{r3, r4, r5, pc}
 8005b60:	200001e4 	.word	0x200001e4

08005b64 <__swsetup_r>:
 8005b64:	4b32      	ldr	r3, [pc, #200]	; (8005c30 <__swsetup_r+0xcc>)
 8005b66:	b570      	push	{r4, r5, r6, lr}
 8005b68:	681d      	ldr	r5, [r3, #0]
 8005b6a:	4606      	mov	r6, r0
 8005b6c:	460c      	mov	r4, r1
 8005b6e:	b125      	cbz	r5, 8005b7a <__swsetup_r+0x16>
 8005b70:	69ab      	ldr	r3, [r5, #24]
 8005b72:	b913      	cbnz	r3, 8005b7a <__swsetup_r+0x16>
 8005b74:	4628      	mov	r0, r5
 8005b76:	f7ff fb55 	bl	8005224 <__sinit>
 8005b7a:	4b2e      	ldr	r3, [pc, #184]	; (8005c34 <__swsetup_r+0xd0>)
 8005b7c:	429c      	cmp	r4, r3
 8005b7e:	d10f      	bne.n	8005ba0 <__swsetup_r+0x3c>
 8005b80:	686c      	ldr	r4, [r5, #4]
 8005b82:	89a3      	ldrh	r3, [r4, #12]
 8005b84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b88:	0719      	lsls	r1, r3, #28
 8005b8a:	d42c      	bmi.n	8005be6 <__swsetup_r+0x82>
 8005b8c:	06dd      	lsls	r5, r3, #27
 8005b8e:	d411      	bmi.n	8005bb4 <__swsetup_r+0x50>
 8005b90:	2309      	movs	r3, #9
 8005b92:	6033      	str	r3, [r6, #0]
 8005b94:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005b98:	81a3      	strh	r3, [r4, #12]
 8005b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8005b9e:	e03e      	b.n	8005c1e <__swsetup_r+0xba>
 8005ba0:	4b25      	ldr	r3, [pc, #148]	; (8005c38 <__swsetup_r+0xd4>)
 8005ba2:	429c      	cmp	r4, r3
 8005ba4:	d101      	bne.n	8005baa <__swsetup_r+0x46>
 8005ba6:	68ac      	ldr	r4, [r5, #8]
 8005ba8:	e7eb      	b.n	8005b82 <__swsetup_r+0x1e>
 8005baa:	4b24      	ldr	r3, [pc, #144]	; (8005c3c <__swsetup_r+0xd8>)
 8005bac:	429c      	cmp	r4, r3
 8005bae:	bf08      	it	eq
 8005bb0:	68ec      	ldreq	r4, [r5, #12]
 8005bb2:	e7e6      	b.n	8005b82 <__swsetup_r+0x1e>
 8005bb4:	0758      	lsls	r0, r3, #29
 8005bb6:	d512      	bpl.n	8005bde <__swsetup_r+0x7a>
 8005bb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005bba:	b141      	cbz	r1, 8005bce <__swsetup_r+0x6a>
 8005bbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005bc0:	4299      	cmp	r1, r3
 8005bc2:	d002      	beq.n	8005bca <__swsetup_r+0x66>
 8005bc4:	4630      	mov	r0, r6
 8005bc6:	f000 f98f 	bl	8005ee8 <_free_r>
 8005bca:	2300      	movs	r3, #0
 8005bcc:	6363      	str	r3, [r4, #52]	; 0x34
 8005bce:	89a3      	ldrh	r3, [r4, #12]
 8005bd0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005bd4:	81a3      	strh	r3, [r4, #12]
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	6063      	str	r3, [r4, #4]
 8005bda:	6923      	ldr	r3, [r4, #16]
 8005bdc:	6023      	str	r3, [r4, #0]
 8005bde:	89a3      	ldrh	r3, [r4, #12]
 8005be0:	f043 0308 	orr.w	r3, r3, #8
 8005be4:	81a3      	strh	r3, [r4, #12]
 8005be6:	6923      	ldr	r3, [r4, #16]
 8005be8:	b94b      	cbnz	r3, 8005bfe <__swsetup_r+0x9a>
 8005bea:	89a3      	ldrh	r3, [r4, #12]
 8005bec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005bf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bf4:	d003      	beq.n	8005bfe <__swsetup_r+0x9a>
 8005bf6:	4621      	mov	r1, r4
 8005bf8:	4630      	mov	r0, r6
 8005bfa:	f000 f929 	bl	8005e50 <__smakebuf_r>
 8005bfe:	89a0      	ldrh	r0, [r4, #12]
 8005c00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c04:	f010 0301 	ands.w	r3, r0, #1
 8005c08:	d00a      	beq.n	8005c20 <__swsetup_r+0xbc>
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	60a3      	str	r3, [r4, #8]
 8005c0e:	6963      	ldr	r3, [r4, #20]
 8005c10:	425b      	negs	r3, r3
 8005c12:	61a3      	str	r3, [r4, #24]
 8005c14:	6923      	ldr	r3, [r4, #16]
 8005c16:	b943      	cbnz	r3, 8005c2a <__swsetup_r+0xc6>
 8005c18:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005c1c:	d1ba      	bne.n	8005b94 <__swsetup_r+0x30>
 8005c1e:	bd70      	pop	{r4, r5, r6, pc}
 8005c20:	0781      	lsls	r1, r0, #30
 8005c22:	bf58      	it	pl
 8005c24:	6963      	ldrpl	r3, [r4, #20]
 8005c26:	60a3      	str	r3, [r4, #8]
 8005c28:	e7f4      	b.n	8005c14 <__swsetup_r+0xb0>
 8005c2a:	2000      	movs	r0, #0
 8005c2c:	e7f7      	b.n	8005c1e <__swsetup_r+0xba>
 8005c2e:	bf00      	nop
 8005c30:	2000000c 	.word	0x2000000c
 8005c34:	080060b8 	.word	0x080060b8
 8005c38:	080060d8 	.word	0x080060d8
 8005c3c:	08006098 	.word	0x08006098

08005c40 <_close_r>:
 8005c40:	b538      	push	{r3, r4, r5, lr}
 8005c42:	4d06      	ldr	r5, [pc, #24]	; (8005c5c <_close_r+0x1c>)
 8005c44:	2300      	movs	r3, #0
 8005c46:	4604      	mov	r4, r0
 8005c48:	4608      	mov	r0, r1
 8005c4a:	602b      	str	r3, [r5, #0]
 8005c4c:	f7fb f89d 	bl	8000d8a <_close>
 8005c50:	1c43      	adds	r3, r0, #1
 8005c52:	d102      	bne.n	8005c5a <_close_r+0x1a>
 8005c54:	682b      	ldr	r3, [r5, #0]
 8005c56:	b103      	cbz	r3, 8005c5a <_close_r+0x1a>
 8005c58:	6023      	str	r3, [r4, #0]
 8005c5a:	bd38      	pop	{r3, r4, r5, pc}
 8005c5c:	200001e4 	.word	0x200001e4

08005c60 <__sflush_r>:
 8005c60:	898a      	ldrh	r2, [r1, #12]
 8005c62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c66:	4605      	mov	r5, r0
 8005c68:	0710      	lsls	r0, r2, #28
 8005c6a:	460c      	mov	r4, r1
 8005c6c:	d458      	bmi.n	8005d20 <__sflush_r+0xc0>
 8005c6e:	684b      	ldr	r3, [r1, #4]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	dc05      	bgt.n	8005c80 <__sflush_r+0x20>
 8005c74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	dc02      	bgt.n	8005c80 <__sflush_r+0x20>
 8005c7a:	2000      	movs	r0, #0
 8005c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c82:	2e00      	cmp	r6, #0
 8005c84:	d0f9      	beq.n	8005c7a <__sflush_r+0x1a>
 8005c86:	2300      	movs	r3, #0
 8005c88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005c8c:	682f      	ldr	r7, [r5, #0]
 8005c8e:	602b      	str	r3, [r5, #0]
 8005c90:	d032      	beq.n	8005cf8 <__sflush_r+0x98>
 8005c92:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005c94:	89a3      	ldrh	r3, [r4, #12]
 8005c96:	075a      	lsls	r2, r3, #29
 8005c98:	d505      	bpl.n	8005ca6 <__sflush_r+0x46>
 8005c9a:	6863      	ldr	r3, [r4, #4]
 8005c9c:	1ac0      	subs	r0, r0, r3
 8005c9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005ca0:	b10b      	cbz	r3, 8005ca6 <__sflush_r+0x46>
 8005ca2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ca4:	1ac0      	subs	r0, r0, r3
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	4602      	mov	r2, r0
 8005caa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005cac:	6a21      	ldr	r1, [r4, #32]
 8005cae:	4628      	mov	r0, r5
 8005cb0:	47b0      	blx	r6
 8005cb2:	1c43      	adds	r3, r0, #1
 8005cb4:	89a3      	ldrh	r3, [r4, #12]
 8005cb6:	d106      	bne.n	8005cc6 <__sflush_r+0x66>
 8005cb8:	6829      	ldr	r1, [r5, #0]
 8005cba:	291d      	cmp	r1, #29
 8005cbc:	d82c      	bhi.n	8005d18 <__sflush_r+0xb8>
 8005cbe:	4a2a      	ldr	r2, [pc, #168]	; (8005d68 <__sflush_r+0x108>)
 8005cc0:	40ca      	lsrs	r2, r1
 8005cc2:	07d6      	lsls	r6, r2, #31
 8005cc4:	d528      	bpl.n	8005d18 <__sflush_r+0xb8>
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	6062      	str	r2, [r4, #4]
 8005cca:	04d9      	lsls	r1, r3, #19
 8005ccc:	6922      	ldr	r2, [r4, #16]
 8005cce:	6022      	str	r2, [r4, #0]
 8005cd0:	d504      	bpl.n	8005cdc <__sflush_r+0x7c>
 8005cd2:	1c42      	adds	r2, r0, #1
 8005cd4:	d101      	bne.n	8005cda <__sflush_r+0x7a>
 8005cd6:	682b      	ldr	r3, [r5, #0]
 8005cd8:	b903      	cbnz	r3, 8005cdc <__sflush_r+0x7c>
 8005cda:	6560      	str	r0, [r4, #84]	; 0x54
 8005cdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005cde:	602f      	str	r7, [r5, #0]
 8005ce0:	2900      	cmp	r1, #0
 8005ce2:	d0ca      	beq.n	8005c7a <__sflush_r+0x1a>
 8005ce4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ce8:	4299      	cmp	r1, r3
 8005cea:	d002      	beq.n	8005cf2 <__sflush_r+0x92>
 8005cec:	4628      	mov	r0, r5
 8005cee:	f000 f8fb 	bl	8005ee8 <_free_r>
 8005cf2:	2000      	movs	r0, #0
 8005cf4:	6360      	str	r0, [r4, #52]	; 0x34
 8005cf6:	e7c1      	b.n	8005c7c <__sflush_r+0x1c>
 8005cf8:	6a21      	ldr	r1, [r4, #32]
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	4628      	mov	r0, r5
 8005cfe:	47b0      	blx	r6
 8005d00:	1c41      	adds	r1, r0, #1
 8005d02:	d1c7      	bne.n	8005c94 <__sflush_r+0x34>
 8005d04:	682b      	ldr	r3, [r5, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d0c4      	beq.n	8005c94 <__sflush_r+0x34>
 8005d0a:	2b1d      	cmp	r3, #29
 8005d0c:	d001      	beq.n	8005d12 <__sflush_r+0xb2>
 8005d0e:	2b16      	cmp	r3, #22
 8005d10:	d101      	bne.n	8005d16 <__sflush_r+0xb6>
 8005d12:	602f      	str	r7, [r5, #0]
 8005d14:	e7b1      	b.n	8005c7a <__sflush_r+0x1a>
 8005d16:	89a3      	ldrh	r3, [r4, #12]
 8005d18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d1c:	81a3      	strh	r3, [r4, #12]
 8005d1e:	e7ad      	b.n	8005c7c <__sflush_r+0x1c>
 8005d20:	690f      	ldr	r7, [r1, #16]
 8005d22:	2f00      	cmp	r7, #0
 8005d24:	d0a9      	beq.n	8005c7a <__sflush_r+0x1a>
 8005d26:	0793      	lsls	r3, r2, #30
 8005d28:	680e      	ldr	r6, [r1, #0]
 8005d2a:	bf08      	it	eq
 8005d2c:	694b      	ldreq	r3, [r1, #20]
 8005d2e:	600f      	str	r7, [r1, #0]
 8005d30:	bf18      	it	ne
 8005d32:	2300      	movne	r3, #0
 8005d34:	eba6 0807 	sub.w	r8, r6, r7
 8005d38:	608b      	str	r3, [r1, #8]
 8005d3a:	f1b8 0f00 	cmp.w	r8, #0
 8005d3e:	dd9c      	ble.n	8005c7a <__sflush_r+0x1a>
 8005d40:	6a21      	ldr	r1, [r4, #32]
 8005d42:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005d44:	4643      	mov	r3, r8
 8005d46:	463a      	mov	r2, r7
 8005d48:	4628      	mov	r0, r5
 8005d4a:	47b0      	blx	r6
 8005d4c:	2800      	cmp	r0, #0
 8005d4e:	dc06      	bgt.n	8005d5e <__sflush_r+0xfe>
 8005d50:	89a3      	ldrh	r3, [r4, #12]
 8005d52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d56:	81a3      	strh	r3, [r4, #12]
 8005d58:	f04f 30ff 	mov.w	r0, #4294967295
 8005d5c:	e78e      	b.n	8005c7c <__sflush_r+0x1c>
 8005d5e:	4407      	add	r7, r0
 8005d60:	eba8 0800 	sub.w	r8, r8, r0
 8005d64:	e7e9      	b.n	8005d3a <__sflush_r+0xda>
 8005d66:	bf00      	nop
 8005d68:	20400001 	.word	0x20400001

08005d6c <_fflush_r>:
 8005d6c:	b538      	push	{r3, r4, r5, lr}
 8005d6e:	690b      	ldr	r3, [r1, #16]
 8005d70:	4605      	mov	r5, r0
 8005d72:	460c      	mov	r4, r1
 8005d74:	b913      	cbnz	r3, 8005d7c <_fflush_r+0x10>
 8005d76:	2500      	movs	r5, #0
 8005d78:	4628      	mov	r0, r5
 8005d7a:	bd38      	pop	{r3, r4, r5, pc}
 8005d7c:	b118      	cbz	r0, 8005d86 <_fflush_r+0x1a>
 8005d7e:	6983      	ldr	r3, [r0, #24]
 8005d80:	b90b      	cbnz	r3, 8005d86 <_fflush_r+0x1a>
 8005d82:	f7ff fa4f 	bl	8005224 <__sinit>
 8005d86:	4b14      	ldr	r3, [pc, #80]	; (8005dd8 <_fflush_r+0x6c>)
 8005d88:	429c      	cmp	r4, r3
 8005d8a:	d11b      	bne.n	8005dc4 <_fflush_r+0x58>
 8005d8c:	686c      	ldr	r4, [r5, #4]
 8005d8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d0ef      	beq.n	8005d76 <_fflush_r+0xa>
 8005d96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005d98:	07d0      	lsls	r0, r2, #31
 8005d9a:	d404      	bmi.n	8005da6 <_fflush_r+0x3a>
 8005d9c:	0599      	lsls	r1, r3, #22
 8005d9e:	d402      	bmi.n	8005da6 <_fflush_r+0x3a>
 8005da0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005da2:	f7ff fadd 	bl	8005360 <__retarget_lock_acquire_recursive>
 8005da6:	4628      	mov	r0, r5
 8005da8:	4621      	mov	r1, r4
 8005daa:	f7ff ff59 	bl	8005c60 <__sflush_r>
 8005dae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005db0:	07da      	lsls	r2, r3, #31
 8005db2:	4605      	mov	r5, r0
 8005db4:	d4e0      	bmi.n	8005d78 <_fflush_r+0xc>
 8005db6:	89a3      	ldrh	r3, [r4, #12]
 8005db8:	059b      	lsls	r3, r3, #22
 8005dba:	d4dd      	bmi.n	8005d78 <_fflush_r+0xc>
 8005dbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005dbe:	f7ff fad0 	bl	8005362 <__retarget_lock_release_recursive>
 8005dc2:	e7d9      	b.n	8005d78 <_fflush_r+0xc>
 8005dc4:	4b05      	ldr	r3, [pc, #20]	; (8005ddc <_fflush_r+0x70>)
 8005dc6:	429c      	cmp	r4, r3
 8005dc8:	d101      	bne.n	8005dce <_fflush_r+0x62>
 8005dca:	68ac      	ldr	r4, [r5, #8]
 8005dcc:	e7df      	b.n	8005d8e <_fflush_r+0x22>
 8005dce:	4b04      	ldr	r3, [pc, #16]	; (8005de0 <_fflush_r+0x74>)
 8005dd0:	429c      	cmp	r4, r3
 8005dd2:	bf08      	it	eq
 8005dd4:	68ec      	ldreq	r4, [r5, #12]
 8005dd6:	e7da      	b.n	8005d8e <_fflush_r+0x22>
 8005dd8:	080060b8 	.word	0x080060b8
 8005ddc:	080060d8 	.word	0x080060d8
 8005de0:	08006098 	.word	0x08006098

08005de4 <_lseek_r>:
 8005de4:	b538      	push	{r3, r4, r5, lr}
 8005de6:	4d07      	ldr	r5, [pc, #28]	; (8005e04 <_lseek_r+0x20>)
 8005de8:	4604      	mov	r4, r0
 8005dea:	4608      	mov	r0, r1
 8005dec:	4611      	mov	r1, r2
 8005dee:	2200      	movs	r2, #0
 8005df0:	602a      	str	r2, [r5, #0]
 8005df2:	461a      	mov	r2, r3
 8005df4:	f7fa fff0 	bl	8000dd8 <_lseek>
 8005df8:	1c43      	adds	r3, r0, #1
 8005dfa:	d102      	bne.n	8005e02 <_lseek_r+0x1e>
 8005dfc:	682b      	ldr	r3, [r5, #0]
 8005dfe:	b103      	cbz	r3, 8005e02 <_lseek_r+0x1e>
 8005e00:	6023      	str	r3, [r4, #0]
 8005e02:	bd38      	pop	{r3, r4, r5, pc}
 8005e04:	200001e4 	.word	0x200001e4

08005e08 <__swhatbuf_r>:
 8005e08:	b570      	push	{r4, r5, r6, lr}
 8005e0a:	460e      	mov	r6, r1
 8005e0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e10:	2900      	cmp	r1, #0
 8005e12:	b096      	sub	sp, #88	; 0x58
 8005e14:	4614      	mov	r4, r2
 8005e16:	461d      	mov	r5, r3
 8005e18:	da07      	bge.n	8005e2a <__swhatbuf_r+0x22>
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	602b      	str	r3, [r5, #0]
 8005e1e:	89b3      	ldrh	r3, [r6, #12]
 8005e20:	061a      	lsls	r2, r3, #24
 8005e22:	d410      	bmi.n	8005e46 <__swhatbuf_r+0x3e>
 8005e24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e28:	e00e      	b.n	8005e48 <__swhatbuf_r+0x40>
 8005e2a:	466a      	mov	r2, sp
 8005e2c:	f000 f8be 	bl	8005fac <_fstat_r>
 8005e30:	2800      	cmp	r0, #0
 8005e32:	dbf2      	blt.n	8005e1a <__swhatbuf_r+0x12>
 8005e34:	9a01      	ldr	r2, [sp, #4]
 8005e36:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005e3a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005e3e:	425a      	negs	r2, r3
 8005e40:	415a      	adcs	r2, r3
 8005e42:	602a      	str	r2, [r5, #0]
 8005e44:	e7ee      	b.n	8005e24 <__swhatbuf_r+0x1c>
 8005e46:	2340      	movs	r3, #64	; 0x40
 8005e48:	2000      	movs	r0, #0
 8005e4a:	6023      	str	r3, [r4, #0]
 8005e4c:	b016      	add	sp, #88	; 0x58
 8005e4e:	bd70      	pop	{r4, r5, r6, pc}

08005e50 <__smakebuf_r>:
 8005e50:	898b      	ldrh	r3, [r1, #12]
 8005e52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005e54:	079d      	lsls	r5, r3, #30
 8005e56:	4606      	mov	r6, r0
 8005e58:	460c      	mov	r4, r1
 8005e5a:	d507      	bpl.n	8005e6c <__smakebuf_r+0x1c>
 8005e5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005e60:	6023      	str	r3, [r4, #0]
 8005e62:	6123      	str	r3, [r4, #16]
 8005e64:	2301      	movs	r3, #1
 8005e66:	6163      	str	r3, [r4, #20]
 8005e68:	b002      	add	sp, #8
 8005e6a:	bd70      	pop	{r4, r5, r6, pc}
 8005e6c:	ab01      	add	r3, sp, #4
 8005e6e:	466a      	mov	r2, sp
 8005e70:	f7ff ffca 	bl	8005e08 <__swhatbuf_r>
 8005e74:	9900      	ldr	r1, [sp, #0]
 8005e76:	4605      	mov	r5, r0
 8005e78:	4630      	mov	r0, r6
 8005e7a:	f7ff fa73 	bl	8005364 <_malloc_r>
 8005e7e:	b948      	cbnz	r0, 8005e94 <__smakebuf_r+0x44>
 8005e80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e84:	059a      	lsls	r2, r3, #22
 8005e86:	d4ef      	bmi.n	8005e68 <__smakebuf_r+0x18>
 8005e88:	f023 0303 	bic.w	r3, r3, #3
 8005e8c:	f043 0302 	orr.w	r3, r3, #2
 8005e90:	81a3      	strh	r3, [r4, #12]
 8005e92:	e7e3      	b.n	8005e5c <__smakebuf_r+0xc>
 8005e94:	4b0d      	ldr	r3, [pc, #52]	; (8005ecc <__smakebuf_r+0x7c>)
 8005e96:	62b3      	str	r3, [r6, #40]	; 0x28
 8005e98:	89a3      	ldrh	r3, [r4, #12]
 8005e9a:	6020      	str	r0, [r4, #0]
 8005e9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ea0:	81a3      	strh	r3, [r4, #12]
 8005ea2:	9b00      	ldr	r3, [sp, #0]
 8005ea4:	6163      	str	r3, [r4, #20]
 8005ea6:	9b01      	ldr	r3, [sp, #4]
 8005ea8:	6120      	str	r0, [r4, #16]
 8005eaa:	b15b      	cbz	r3, 8005ec4 <__smakebuf_r+0x74>
 8005eac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005eb0:	4630      	mov	r0, r6
 8005eb2:	f000 f88d 	bl	8005fd0 <_isatty_r>
 8005eb6:	b128      	cbz	r0, 8005ec4 <__smakebuf_r+0x74>
 8005eb8:	89a3      	ldrh	r3, [r4, #12]
 8005eba:	f023 0303 	bic.w	r3, r3, #3
 8005ebe:	f043 0301 	orr.w	r3, r3, #1
 8005ec2:	81a3      	strh	r3, [r4, #12]
 8005ec4:	89a0      	ldrh	r0, [r4, #12]
 8005ec6:	4305      	orrs	r5, r0
 8005ec8:	81a5      	strh	r5, [r4, #12]
 8005eca:	e7cd      	b.n	8005e68 <__smakebuf_r+0x18>
 8005ecc:	080051bd 	.word	0x080051bd

08005ed0 <__malloc_lock>:
 8005ed0:	4801      	ldr	r0, [pc, #4]	; (8005ed8 <__malloc_lock+0x8>)
 8005ed2:	f7ff ba45 	b.w	8005360 <__retarget_lock_acquire_recursive>
 8005ed6:	bf00      	nop
 8005ed8:	200001dc 	.word	0x200001dc

08005edc <__malloc_unlock>:
 8005edc:	4801      	ldr	r0, [pc, #4]	; (8005ee4 <__malloc_unlock+0x8>)
 8005ede:	f7ff ba40 	b.w	8005362 <__retarget_lock_release_recursive>
 8005ee2:	bf00      	nop
 8005ee4:	200001dc 	.word	0x200001dc

08005ee8 <_free_r>:
 8005ee8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005eea:	2900      	cmp	r1, #0
 8005eec:	d048      	beq.n	8005f80 <_free_r+0x98>
 8005eee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ef2:	9001      	str	r0, [sp, #4]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	f1a1 0404 	sub.w	r4, r1, #4
 8005efa:	bfb8      	it	lt
 8005efc:	18e4      	addlt	r4, r4, r3
 8005efe:	f7ff ffe7 	bl	8005ed0 <__malloc_lock>
 8005f02:	4a20      	ldr	r2, [pc, #128]	; (8005f84 <_free_r+0x9c>)
 8005f04:	9801      	ldr	r0, [sp, #4]
 8005f06:	6813      	ldr	r3, [r2, #0]
 8005f08:	4615      	mov	r5, r2
 8005f0a:	b933      	cbnz	r3, 8005f1a <_free_r+0x32>
 8005f0c:	6063      	str	r3, [r4, #4]
 8005f0e:	6014      	str	r4, [r2, #0]
 8005f10:	b003      	add	sp, #12
 8005f12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f16:	f7ff bfe1 	b.w	8005edc <__malloc_unlock>
 8005f1a:	42a3      	cmp	r3, r4
 8005f1c:	d90b      	bls.n	8005f36 <_free_r+0x4e>
 8005f1e:	6821      	ldr	r1, [r4, #0]
 8005f20:	1862      	adds	r2, r4, r1
 8005f22:	4293      	cmp	r3, r2
 8005f24:	bf04      	itt	eq
 8005f26:	681a      	ldreq	r2, [r3, #0]
 8005f28:	685b      	ldreq	r3, [r3, #4]
 8005f2a:	6063      	str	r3, [r4, #4]
 8005f2c:	bf04      	itt	eq
 8005f2e:	1852      	addeq	r2, r2, r1
 8005f30:	6022      	streq	r2, [r4, #0]
 8005f32:	602c      	str	r4, [r5, #0]
 8005f34:	e7ec      	b.n	8005f10 <_free_r+0x28>
 8005f36:	461a      	mov	r2, r3
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	b10b      	cbz	r3, 8005f40 <_free_r+0x58>
 8005f3c:	42a3      	cmp	r3, r4
 8005f3e:	d9fa      	bls.n	8005f36 <_free_r+0x4e>
 8005f40:	6811      	ldr	r1, [r2, #0]
 8005f42:	1855      	adds	r5, r2, r1
 8005f44:	42a5      	cmp	r5, r4
 8005f46:	d10b      	bne.n	8005f60 <_free_r+0x78>
 8005f48:	6824      	ldr	r4, [r4, #0]
 8005f4a:	4421      	add	r1, r4
 8005f4c:	1854      	adds	r4, r2, r1
 8005f4e:	42a3      	cmp	r3, r4
 8005f50:	6011      	str	r1, [r2, #0]
 8005f52:	d1dd      	bne.n	8005f10 <_free_r+0x28>
 8005f54:	681c      	ldr	r4, [r3, #0]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	6053      	str	r3, [r2, #4]
 8005f5a:	4421      	add	r1, r4
 8005f5c:	6011      	str	r1, [r2, #0]
 8005f5e:	e7d7      	b.n	8005f10 <_free_r+0x28>
 8005f60:	d902      	bls.n	8005f68 <_free_r+0x80>
 8005f62:	230c      	movs	r3, #12
 8005f64:	6003      	str	r3, [r0, #0]
 8005f66:	e7d3      	b.n	8005f10 <_free_r+0x28>
 8005f68:	6825      	ldr	r5, [r4, #0]
 8005f6a:	1961      	adds	r1, r4, r5
 8005f6c:	428b      	cmp	r3, r1
 8005f6e:	bf04      	itt	eq
 8005f70:	6819      	ldreq	r1, [r3, #0]
 8005f72:	685b      	ldreq	r3, [r3, #4]
 8005f74:	6063      	str	r3, [r4, #4]
 8005f76:	bf04      	itt	eq
 8005f78:	1949      	addeq	r1, r1, r5
 8005f7a:	6021      	streq	r1, [r4, #0]
 8005f7c:	6054      	str	r4, [r2, #4]
 8005f7e:	e7c7      	b.n	8005f10 <_free_r+0x28>
 8005f80:	b003      	add	sp, #12
 8005f82:	bd30      	pop	{r4, r5, pc}
 8005f84:	20000090 	.word	0x20000090

08005f88 <_read_r>:
 8005f88:	b538      	push	{r3, r4, r5, lr}
 8005f8a:	4d07      	ldr	r5, [pc, #28]	; (8005fa8 <_read_r+0x20>)
 8005f8c:	4604      	mov	r4, r0
 8005f8e:	4608      	mov	r0, r1
 8005f90:	4611      	mov	r1, r2
 8005f92:	2200      	movs	r2, #0
 8005f94:	602a      	str	r2, [r5, #0]
 8005f96:	461a      	mov	r2, r3
 8005f98:	f7fa feda 	bl	8000d50 <_read>
 8005f9c:	1c43      	adds	r3, r0, #1
 8005f9e:	d102      	bne.n	8005fa6 <_read_r+0x1e>
 8005fa0:	682b      	ldr	r3, [r5, #0]
 8005fa2:	b103      	cbz	r3, 8005fa6 <_read_r+0x1e>
 8005fa4:	6023      	str	r3, [r4, #0]
 8005fa6:	bd38      	pop	{r3, r4, r5, pc}
 8005fa8:	200001e4 	.word	0x200001e4

08005fac <_fstat_r>:
 8005fac:	b538      	push	{r3, r4, r5, lr}
 8005fae:	4d07      	ldr	r5, [pc, #28]	; (8005fcc <_fstat_r+0x20>)
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	4604      	mov	r4, r0
 8005fb4:	4608      	mov	r0, r1
 8005fb6:	4611      	mov	r1, r2
 8005fb8:	602b      	str	r3, [r5, #0]
 8005fba:	f7fa fef2 	bl	8000da2 <_fstat>
 8005fbe:	1c43      	adds	r3, r0, #1
 8005fc0:	d102      	bne.n	8005fc8 <_fstat_r+0x1c>
 8005fc2:	682b      	ldr	r3, [r5, #0]
 8005fc4:	b103      	cbz	r3, 8005fc8 <_fstat_r+0x1c>
 8005fc6:	6023      	str	r3, [r4, #0]
 8005fc8:	bd38      	pop	{r3, r4, r5, pc}
 8005fca:	bf00      	nop
 8005fcc:	200001e4 	.word	0x200001e4

08005fd0 <_isatty_r>:
 8005fd0:	b538      	push	{r3, r4, r5, lr}
 8005fd2:	4d06      	ldr	r5, [pc, #24]	; (8005fec <_isatty_r+0x1c>)
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	4604      	mov	r4, r0
 8005fd8:	4608      	mov	r0, r1
 8005fda:	602b      	str	r3, [r5, #0]
 8005fdc:	f7fa fef1 	bl	8000dc2 <_isatty>
 8005fe0:	1c43      	adds	r3, r0, #1
 8005fe2:	d102      	bne.n	8005fea <_isatty_r+0x1a>
 8005fe4:	682b      	ldr	r3, [r5, #0]
 8005fe6:	b103      	cbz	r3, 8005fea <_isatty_r+0x1a>
 8005fe8:	6023      	str	r3, [r4, #0]
 8005fea:	bd38      	pop	{r3, r4, r5, pc}
 8005fec:	200001e4 	.word	0x200001e4

08005ff0 <_init>:
 8005ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ff2:	bf00      	nop
 8005ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ff6:	bc08      	pop	{r3}
 8005ff8:	469e      	mov	lr, r3
 8005ffa:	4770      	bx	lr

08005ffc <_fini>:
 8005ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ffe:	bf00      	nop
 8006000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006002:	bc08      	pop	{r3}
 8006004:	469e      	mov	lr, r3
 8006006:	4770      	bx	lr
