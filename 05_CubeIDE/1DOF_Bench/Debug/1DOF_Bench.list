
1DOF_Bench.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c914  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e4  0800caa8  0800caa8  0001caa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d08c  0800d08c  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800d08c  0800d08c  0001d08c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d094  0800d094  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d094  0800d094  0001d094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d098  0800d098  0001d098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800d09c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  200001ec  0800d288  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000434  0800d288  00020434  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017fe8  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cda  00000000  00000000  00038204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001438  00000000  00000000  0003aee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001320  00000000  00000000  0003c318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029ce9  00000000  00000000  0003d638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017088  00000000  00000000  00067321  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00109ff6  00000000  00000000  0007e3a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018839f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ccc  00000000  00000000  001883f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ca8c 	.word	0x0800ca8c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	0800ca8c 	.word	0x0800ca8c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <HAL_UART_TxCpltCallback>:
uint8_t gaz_buffer[4];
char gaz_data[4];
int counter=4;


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]

				if (counter==0){
 8001000:	4b0d      	ldr	r3, [pc, #52]	; (8001038 <HAL_UART_TxCpltCallback+0x40>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d110      	bne.n	800102a <HAL_UART_TxCpltCallback+0x32>
					for (int i = 0; i < 4; i++)
 8001008:	2300      	movs	r3, #0
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	e00a      	b.n	8001024 <HAL_UART_TxCpltCallback+0x2c>
						gaz_buffer[counter++]=0;
 800100e:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <HAL_UART_TxCpltCallback+0x40>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	1c5a      	adds	r2, r3, #1
 8001014:	4908      	ldr	r1, [pc, #32]	; (8001038 <HAL_UART_TxCpltCallback+0x40>)
 8001016:	600a      	str	r2, [r1, #0]
 8001018:	4a08      	ldr	r2, [pc, #32]	; (800103c <HAL_UART_TxCpltCallback+0x44>)
 800101a:	2100      	movs	r1, #0
 800101c:	54d1      	strb	r1, [r2, r3]
					for (int i = 0; i < 4; i++)
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	3301      	adds	r3, #1
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	2b03      	cmp	r3, #3
 8001028:	ddf1      	ble.n	800100e <HAL_UART_TxCpltCallback+0x16>


				}


	 	 }
 800102a:	bf00      	nop
 800102c:	3714      	adds	r7, #20
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	20000000 	.word	0x20000000
 800103c:	20000414 	.word	0x20000414

08001040 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001042:	b09d      	sub	sp, #116	; 0x74
 8001044:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE BEGIN 1 */

	enum states etat;
	 etat = init_uc;
 8001046:	2300      	movs	r3, #0
 8001048:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800104a:	f000 ff89 	bl	8001f60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800104e:	f000 f9c7 	bl	80013e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001052:	f000 fb63 	bl	800171c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001056:	f000 fb03 	bl	8001660 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800105a:	f000 fa13 	bl	8001484 <MX_ADC1_Init>
  MX_DMA_Init();
 800105e:	f000 fb2f 	bl	80016c0 <MX_DMA_Init>
  MX_TIM3_Init();
 8001062:	f000 fa85 	bl	8001570 <MX_TIM3_Init>
	//blinkGreenLed(10, 100);
	// Welcome message on UART

	//sendWelcomeMsgRS232(&huart2);
	//la fonction au dessus pose des soucis
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001066:	2104      	movs	r1, #4
 8001068:	48b4      	ldr	r0, [pc, #720]	; (800133c <main+0x2fc>)
 800106a:	f004 fd17 	bl	8005a9c <HAL_TIM_PWM_Start>
	//NOus mettons ici la valeur minimale pour emettre un signal vers notre ESC dans notre registre capture and compare register

	//TIM3->CCR2 = valeur_min_moteur;
	y_print(&huart2, " 0 to 6 to change state \r\n", 26);
 800106e:	221a      	movs	r2, #26
 8001070:	49b3      	ldr	r1, [pc, #716]	; (8001340 <main+0x300>)
 8001072:	48b4      	ldr	r0, [pc, #720]	; (8001344 <main+0x304>)
 8001074:	f000 ff33 	bl	8001ede <y_print>
	HAL_Delay(3000);
 8001078:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800107c:	f000 ffec 	bl	8002058 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		__HAL_UART_CLEAR_OREFLAG(&huart2);
 8001080:	4bb0      	ldr	r3, [pc, #704]	; (8001344 <main+0x304>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2208      	movs	r2, #8
 8001086:	621a      	str	r2, [r3, #32]

		//differents etats qu'on peut avoir

		//---------changement d'etat-------

		switch (etat) {
 8001088:	7dfb      	ldrb	r3, [r7, #23]
 800108a:	2b06      	cmp	r3, #6
 800108c:	f200 819f 	bhi.w	80013ce <main+0x38e>
 8001090:	a201      	add	r2, pc, #4	; (adr r2, 8001098 <main+0x58>)
 8001092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001096:	bf00      	nop
 8001098:	080010b5 	.word	0x080010b5
 800109c:	0800113b 	.word	0x0800113b
 80010a0:	0800117d 	.word	0x0800117d
 80010a4:	0800129d 	.word	0x0800129d
 80010a8:	08001201 	.word	0x08001201
 80010ac:	0800110f 	.word	0x0800110f
 80010b0:	0800132f 	.word	0x0800132f
		case init_uc:
			//traitement des sorties
			/*if (HAL_UART_Transmit(&huart2, (uint8_t*) "UC Initialization \n\r", 22,
			 100) != HAL_OK)
			 Error_Handler();*/
			printf("nucleo ready\r\n");
 80010b4:	48a4      	ldr	r0, [pc, #656]	; (8001348 <main+0x308>)
 80010b6:	f007 fefd 	bl	8008eb4 <puts>
			HAL_Delay(1000);
 80010ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010be:	f000 ffcb 	bl	8002058 <HAL_Delay>
			//traitement des entrées (transitions)
			do {

				if (HAL_UART_Receive(&huart2, (uint8_t*) r_buffer, 2, 10)
 80010c2:	1d39      	adds	r1, r7, #4
 80010c4:	230a      	movs	r3, #10
 80010c6:	2202      	movs	r2, #2
 80010c8:	489e      	ldr	r0, [pc, #632]	; (8001344 <main+0x304>)
 80010ca:	f005 fed5 	bl	8006e78 <HAL_UART_Receive>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d10b      	bne.n	80010ec <main+0xac>
						== HAL_OK) {
					HAL_Delay(50);
 80010d4:	2032      	movs	r0, #50	; 0x32
 80010d6:	f000 ffbf 	bl	8002058 <HAL_Delay>
					HAL_UART_Transmit(&huart2, (uint8_t*) r_buffer, 2, 10);
 80010da:	1d39      	adds	r1, r7, #4
 80010dc:	230a      	movs	r3, #10
 80010de:	2202      	movs	r2, #2
 80010e0:	4898      	ldr	r0, [pc, #608]	; (8001344 <main+0x304>)
 80010e2:	f005 fe35 	bl	8006d50 <HAL_UART_Transmit>
					HAL_Delay(50);
 80010e6:	2032      	movs	r0, #50	; 0x32
 80010e8:	f000 ffb6 	bl	8002058 <HAL_Delay>
				}

			} while ((r_buffer[0] != '1') && (r_buffer[0] != '2')); //|| (r_buffer[0] != '2')
 80010ec:	793b      	ldrb	r3, [r7, #4]
 80010ee:	2b31      	cmp	r3, #49	; 0x31
 80010f0:	d002      	beq.n	80010f8 <main+0xb8>
 80010f2:	793b      	ldrb	r3, [r7, #4]
 80010f4:	2b32      	cmp	r3, #50	; 0x32
 80010f6:	d1e4      	bne.n	80010c2 <main+0x82>
			if (r_buffer[0] == '2')
 80010f8:	793b      	ldrb	r3, [r7, #4]
 80010fa:	2b32      	cmp	r3, #50	; 0x32
 80010fc:	d102      	bne.n	8001104 <main+0xc4>
				etat = info_mode;
 80010fe:	2305      	movs	r3, #5
 8001100:	75fb      	strb	r3, [r7, #23]
 8001102:	e001      	b.n	8001108 <main+0xc8>
			else
				etat = init_motor;
 8001104:	2301      	movs	r3, #1
 8001106:	75fb      	strb	r3, [r7, #23]
			r_buffer[0] = ' ';
 8001108:	2320      	movs	r3, #32
 800110a:	713b      	strb	r3, [r7, #4]
			break;
 800110c:	e160      	b.n	80013d0 <main+0x390>

		case info_mode:
			//if (HAL_UART_Transmit(&huart2, (uint8_t*) "Info mode\n\r", 12, 100)
			//	!= HAL_OK)
			//Error_Handler();
			printf("Info mode\r\n");
 800110e:	488f      	ldr	r0, [pc, #572]	; (800134c <main+0x30c>)
 8001110:	f007 fed0 	bl	8008eb4 <puts>
			printf("Firmware version %.2f \n\r", firmware_version);
 8001114:	4b8e      	ldr	r3, [pc, #568]	; (8001350 <main+0x310>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff fa15 	bl	8000548 <__aeabi_f2d>
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	488c      	ldr	r0, [pc, #560]	; (8001354 <main+0x314>)
 8001124:	f007 fe40 	bl	8008da8 <iprintf>
			HAL_Delay(3000);
 8001128:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800112c:	f000 ff94 	bl	8002058 <HAL_Delay>
			 HAL_Delay(50);
			 }

			 } while (r_buffer[0] != '0');*/

			etat = init_uc;
 8001130:	2300      	movs	r3, #0
 8001132:	75fb      	strb	r3, [r7, #23]
			// Reinitialisation du buffer
			r_buffer[0] = 0;
 8001134:	2300      	movs	r3, #0
 8001136:	713b      	strb	r3, [r7, #4]
			//printf("%f");
			//le programme freeze dans l'etat info
			break;
 8001138:	e14a      	b.n	80013d0 <main+0x390>

		case init_motor:
			/*if (HAL_UART_Transmit(&huart2,
			 (uint8_t*) "Motor Initialization \r\n", 24, 100) != HAL_OK)
			 Error_Handler();*/
			printf("Motor Initialization \n\r");
 800113a:	4887      	ldr	r0, [pc, #540]	; (8001358 <main+0x318>)
 800113c:	f007 fe34 	bl	8008da8 <iprintf>
			HAL_Delay(1000);
 8001140:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001144:	f000 ff88 	bl	8002058 <HAL_Delay>
			//Chargement de la pwm
			//HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
			load_pwm(htim3, valeur_min_moteur);
 8001148:	4b84      	ldr	r3, [pc, #528]	; (800135c <main+0x31c>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4e7b      	ldr	r6, [pc, #492]	; (800133c <main+0x2fc>)
 800114e:	930f      	str	r3, [sp, #60]	; 0x3c
 8001150:	466d      	mov	r5, sp
 8001152:	f106 0410 	add.w	r4, r6, #16
 8001156:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001158:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800115a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800115c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800115e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001160:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001162:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001166:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800116a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800116e:	f000 fea7 	bl	8001ec0 <load_pwm>
			r_buffer[0] = ' ';
 8001172:	2320      	movs	r3, #32
 8001174:	713b      	strb	r3, [r7, #4]
			etat = motor_ready;
 8001176:	2302      	movs	r3, #2
 8001178:	75fb      	strb	r3, [r7, #23]

			break;
 800117a:	e129      	b.n	80013d0 <main+0x390>
			/*	if (HAL_UART_Transmit(&huart2, (uint8_t*) "Motor ready \n\r", 15,
			 100) != HAL_OK)
			 Error_Handler();
			 HAL_Delay(3000);*/
			//k = 0;
			load_pwm(htim3, valeur_min_moteur);
 800117c:	4b77      	ldr	r3, [pc, #476]	; (800135c <main+0x31c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4e6e      	ldr	r6, [pc, #440]	; (800133c <main+0x2fc>)
 8001182:	930f      	str	r3, [sp, #60]	; 0x3c
 8001184:	466d      	mov	r5, sp
 8001186:	f106 0410 	add.w	r4, r6, #16
 800118a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800118c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800118e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001190:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001192:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001194:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001196:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800119a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800119e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80011a2:	f000 fe8d 	bl	8001ec0 <load_pwm>
			printf("Motor ready \n\r");
 80011a6:	486e      	ldr	r0, [pc, #440]	; (8001360 <main+0x320>)
 80011a8:	f007 fdfe 	bl	8008da8 <iprintf>
			HAL_Delay(1000);
 80011ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011b0:	f000 ff52 	bl	8002058 <HAL_Delay>
			do {

				if (HAL_UART_Receive(&huart2, (uint8_t*) r_buffer, 2, 10)
 80011b4:	1d39      	adds	r1, r7, #4
 80011b6:	230a      	movs	r3, #10
 80011b8:	2202      	movs	r2, #2
 80011ba:	4862      	ldr	r0, [pc, #392]	; (8001344 <main+0x304>)
 80011bc:	f005 fe5c 	bl	8006e78 <HAL_UART_Receive>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d10b      	bne.n	80011de <main+0x19e>
						== HAL_OK) {
					HAL_Delay(50);
 80011c6:	2032      	movs	r0, #50	; 0x32
 80011c8:	f000 ff46 	bl	8002058 <HAL_Delay>
					HAL_UART_Transmit(&huart2, (uint8_t*) r_buffer, 2, 10);
 80011cc:	1d39      	adds	r1, r7, #4
 80011ce:	230a      	movs	r3, #10
 80011d0:	2202      	movs	r2, #2
 80011d2:	485c      	ldr	r0, [pc, #368]	; (8001344 <main+0x304>)
 80011d4:	f005 fdbc 	bl	8006d50 <HAL_UART_Transmit>
					HAL_Delay(50);
 80011d8:	2032      	movs	r0, #50	; 0x32
 80011da:	f000 ff3d 	bl	8002058 <HAL_Delay>
				}

			} while ((r_buffer[0] != '3') && (r_buffer[0] != '4')); //|| (r_buffer[0] != '2')
 80011de:	793b      	ldrb	r3, [r7, #4]
 80011e0:	2b33      	cmp	r3, #51	; 0x33
 80011e2:	d002      	beq.n	80011ea <main+0x1aa>
 80011e4:	793b      	ldrb	r3, [r7, #4]
 80011e6:	2b34      	cmp	r3, #52	; 0x34
 80011e8:	d1e4      	bne.n	80011b4 <main+0x174>
			if (r_buffer[0] == '3')
 80011ea:	793b      	ldrb	r3, [r7, #4]
 80011ec:	2b33      	cmp	r3, #51	; 0x33
 80011ee:	d102      	bne.n	80011f6 <main+0x1b6>
				etat = init_pot;
 80011f0:	2306      	movs	r3, #6
 80011f2:	75fb      	strb	r3, [r7, #23]
 80011f4:	e001      	b.n	80011fa <main+0x1ba>
			else
				etat = auto_mode;
 80011f6:	2304      	movs	r3, #4
 80011f8:	75fb      	strb	r3, [r7, #23]
			r_buffer[0] = ' ';
 80011fa:	2320      	movs	r3, #32
 80011fc:	713b      	strb	r3, [r7, #4]

			break;
 80011fe:	e0e7      	b.n	80013d0 <main+0x390>
		case auto_mode:
			//if (HAL_UART_Transmit(&huart2, (uint8_t*) "Auto mode \n\r", 15, 100)
				//	!= HAL_OK)
				//Error_Handler();
			//HAL_Delay(3000);
			printf("Auto mode \n\r");
 8001200:	4858      	ldr	r0, [pc, #352]	; (8001364 <main+0x324>)
 8001202:	f007 fdd1 	bl	8008da8 <iprintf>

			do {

				if (HAL_UART_Receive(&huart2, (uint8_t*) r_buffer, 2, 10)
 8001206:	1d39      	adds	r1, r7, #4
 8001208:	230a      	movs	r3, #10
 800120a:	2202      	movs	r2, #2
 800120c:	484d      	ldr	r0, [pc, #308]	; (8001344 <main+0x304>)
 800120e:	f005 fe33 	bl	8006e78 <HAL_UART_Receive>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d102      	bne.n	800121e <main+0x1de>
						== HAL_OK)
					HAL_Delay(10);
 8001218:	200a      	movs	r0, #10
 800121a:	f000 ff1d 	bl	8002058 <HAL_Delay>
				//HAL_UART_Transmit(&huart2, (uint8_t*) r_buffer, 2, 10);
				//HAL_Delay(50);

			} while (r_buffer[0] != '6' && r_buffer[0] != 'g');
 800121e:	793b      	ldrb	r3, [r7, #4]
 8001220:	2b36      	cmp	r3, #54	; 0x36
 8001222:	d002      	beq.n	800122a <main+0x1ea>
 8001224:	793b      	ldrb	r3, [r7, #4]
 8001226:	2b67      	cmp	r3, #103	; 0x67
 8001228:	d1ed      	bne.n	8001206 <main+0x1c6>

			//quand on envoie le caratère g on se retrouve dans la phase de gaz sur le clavier
			//si 6 on retourne au mode ready

			if (r_buffer[0] == '6') {
 800122a:	793b      	ldrb	r3, [r7, #4]
 800122c:	2b36      	cmp	r3, #54	; 0x36
 800122e:	d104      	bne.n	800123a <main+0x1fa>
				etat = motor_ready;
 8001230:	2302      	movs	r3, #2
 8001232:	75fb      	strb	r3, [r7, #23]
				r_buffer[0] = ' ';
 8001234:	2320      	movs	r3, #32
 8001236:	713b      	strb	r3, [r7, #4]
				break;
 8001238:	e0ca      	b.n	80013d0 <main+0x390>
				//le but pour l'entrée des gaz sera de mettre une valeur, la traiter et retourner en mode auto pour recommencer encore
				//solution simple
			}else {

				//Soucis avec la recuperation deplusieurs caracteres sur la console, rien ne s'affiche
				printf("vroum sur le clavier \n\r");
 800123a:	484b      	ldr	r0, [pc, #300]	; (8001368 <main+0x328>)
 800123c:	f007 fdb4 	bl	8008da8 <iprintf>
				HAL_Delay(1150);
 8001240:	f240 407e 	movw	r0, #1150	; 0x47e
 8001244:	f000 ff08 	bl	8002058 <HAL_Delay>

				//clear le gaz buffer
				gaz_buffer[0]=' ',gaz_buffer[1]=' ',gaz_buffer[2]=' ',gaz_buffer[3]=' ';
 8001248:	4b48      	ldr	r3, [pc, #288]	; (800136c <main+0x32c>)
 800124a:	2220      	movs	r2, #32
 800124c:	701a      	strb	r2, [r3, #0]
 800124e:	4b47      	ldr	r3, [pc, #284]	; (800136c <main+0x32c>)
 8001250:	2220      	movs	r2, #32
 8001252:	705a      	strb	r2, [r3, #1]
 8001254:	4b45      	ldr	r3, [pc, #276]	; (800136c <main+0x32c>)
 8001256:	2220      	movs	r2, #32
 8001258:	709a      	strb	r2, [r3, #2]
 800125a:	4b44      	ldr	r3, [pc, #272]	; (800136c <main+0x32c>)
 800125c:	2220      	movs	r2, #32
 800125e:	70da      	strb	r2, [r3, #3]
				do {


						if (HAL_UART_Receive(&huart2, (uint8_t*) gaz_buffer, 4, 10)
 8001260:	230a      	movs	r3, #10
 8001262:	2204      	movs	r2, #4
 8001264:	4941      	ldr	r1, [pc, #260]	; (800136c <main+0x32c>)
 8001266:	4837      	ldr	r0, [pc, #220]	; (8001344 <main+0x304>)
 8001268:	f005 fe06 	bl	8006e78 <HAL_UART_Receive>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d105      	bne.n	800127e <main+0x23e>
														== HAL_OK)
						HAL_UART_Transmit(&huart2, (uint8_t*) gaz_buffer, 4, 10);
 8001272:	230a      	movs	r3, #10
 8001274:	2204      	movs	r2, #4
 8001276:	493d      	ldr	r1, [pc, #244]	; (800136c <main+0x32c>)
 8001278:	4832      	ldr	r0, [pc, #200]	; (8001344 <main+0x304>)
 800127a:	f005 fd69 	bl	8006d50 <HAL_UART_Transmit>


						//je compare les differentes case de mon tableau pour ma boucle de sortie
						} while (gaz_buffer[1] !='\n' && gaz_buffer[2] !='\n' && gaz_buffer[3] !='\n' );
 800127e:	4b3b      	ldr	r3, [pc, #236]	; (800136c <main+0x32c>)
 8001280:	785b      	ldrb	r3, [r3, #1]
 8001282:	2b0a      	cmp	r3, #10
 8001284:	d007      	beq.n	8001296 <main+0x256>
 8001286:	4b39      	ldr	r3, [pc, #228]	; (800136c <main+0x32c>)
 8001288:	789b      	ldrb	r3, [r3, #2]
 800128a:	2b0a      	cmp	r3, #10
 800128c:	d003      	beq.n	8001296 <main+0x256>
 800128e:	4b37      	ldr	r3, [pc, #220]	; (800136c <main+0x32c>)
 8001290:	78db      	ldrb	r3, [r3, #3]
 8001292:	2b0a      	cmp	r3, #10
 8001294:	d1e4      	bne.n	8001260 <main+0x220>
				etat = auto_mode;
 8001296:	2304      	movs	r3, #4
 8001298:	75fb      	strb	r3, [r7, #23]
				break;
 800129a:	e099      	b.n	80013d0 <main+0x390>



		case manual_mode:

			if (HAL_UART_Transmit(&huart2, (uint8_t*) "Manual mode \n\r", 15,
 800129c:	2364      	movs	r3, #100	; 0x64
 800129e:	220f      	movs	r2, #15
 80012a0:	4933      	ldr	r1, [pc, #204]	; (8001370 <main+0x330>)
 80012a2:	4828      	ldr	r0, [pc, #160]	; (8001344 <main+0x304>)
 80012a4:	f005 fd54 	bl	8006d50 <HAL_UART_Transmit>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <main+0x272>
					100) != HAL_OK)
				Error_Handler();
 80012ae:	f000 fa9b 	bl	80017e8 <Error_Handler>
			//
			//recuperation de la pwm

			do {

				if (HAL_UART_Receive(&huart2, (uint8_t*) r_buffer, 2, 1)
 80012b2:	1d39      	adds	r1, r7, #4
 80012b4:	2301      	movs	r3, #1
 80012b6:	2202      	movs	r2, #2
 80012b8:	4822      	ldr	r0, [pc, #136]	; (8001344 <main+0x304>)
 80012ba:	f005 fddd 	bl	8006e78 <HAL_UART_Receive>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d102      	bne.n	80012ca <main+0x28a>
						== HAL_OK)
					HAL_Delay(10);
 80012c4:	200a      	movs	r0, #10
 80012c6:	f000 fec7 	bl	8002058 <HAL_Delay>
				//HAL_UART_Transmit(&huart2, (uint8_t*) r_buffer, 2, 10);
				//HAL_Delay(50);
				valeur_can = load_adc(hadc1, 5);
 80012ca:	4c2a      	ldr	r4, [pc, #168]	; (8001374 <main+0x334>)
 80012cc:	2305      	movs	r3, #5
 80012ce:	9315      	str	r3, [sp, #84]	; 0x54
 80012d0:	4668      	mov	r0, sp
 80012d2:	f104 0310 	add.w	r3, r4, #16
 80012d6:	2254      	movs	r2, #84	; 0x54
 80012d8:	4619      	mov	r1, r3
 80012da:	f006 fed5 	bl	8008088 <memcpy>
 80012de:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80012e2:	f000 fda5 	bl	8001e30 <load_adc>
 80012e6:	60b8      	str	r0, [r7, #8]
				mapped_value = mapping_adc_value(valeur_can);
 80012e8:	68b8      	ldr	r0, [r7, #8]
 80012ea:	f000 fdbd 	bl	8001e68 <mapping_adc_value>
 80012ee:	60f8      	str	r0, [r7, #12]
				HAL_Delay(100);
 80012f0:	2064      	movs	r0, #100	; 0x64
 80012f2:	f000 feb1 	bl	8002058 <HAL_Delay>
				load_pwm(htim3, mapped_value);
 80012f6:	4e11      	ldr	r6, [pc, #68]	; (800133c <main+0x2fc>)
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	930f      	str	r3, [sp, #60]	; 0x3c
 80012fc:	466d      	mov	r5, sp
 80012fe:	f106 0410 	add.w	r4, r6, #16
 8001302:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001304:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001306:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001308:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800130a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800130c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800130e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001312:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001316:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800131a:	f000 fdd1 	bl	8001ec0 <load_pwm>

			} while (r_buffer[0] != '6');
 800131e:	793b      	ldrb	r3, [r7, #4]
 8001320:	2b36      	cmp	r3, #54	; 0x36
 8001322:	d1c6      	bne.n	80012b2 <main+0x272>

			etat = motor_ready;
 8001324:	2302      	movs	r3, #2
 8001326:	75fb      	strb	r3, [r7, #23]
			r_buffer[0] = ' ';
 8001328:	2320      	movs	r3, #32
 800132a:	713b      	strb	r3, [r7, #4]
			break;
 800132c:	e050      	b.n	80013d0 <main+0x390>

		case init_pot:
			//if (HAL_UART_Transmit(&huart2, (uint8_t*) "Auto mode \n\r", 15, 100)
			//	!= HAL_OK)
			//Error_Handler();
			okay = 1;
 800132e:	2301      	movs	r3, #1
 8001330:	613b      	str	r3, [r7, #16]
			//val = load_adc(hadc1, 5);
			//load_pwm(htim3, val);
			printf("mettez le potentiometre à zero \n\r");
 8001332:	4811      	ldr	r0, [pc, #68]	; (8001378 <main+0x338>)
 8001334:	f007 fd38 	bl	8008da8 <iprintf>
			//HAL_Delay(3000);

			while (okay == 1) {
 8001338:	e03e      	b.n	80013b8 <main+0x378>
 800133a:	bf00      	nop
 800133c:	200002b4 	.word	0x200002b4
 8001340:	0800caa8 	.word	0x0800caa8
 8001344:	20000300 	.word	0x20000300
 8001348:	0800cac4 	.word	0x0800cac4
 800134c:	0800cad4 	.word	0x0800cad4
 8001350:	20000008 	.word	0x20000008
 8001354:	0800cae0 	.word	0x0800cae0
 8001358:	0800cafc 	.word	0x0800cafc
 800135c:	2000000c 	.word	0x2000000c
 8001360:	0800cb14 	.word	0x0800cb14
 8001364:	0800cb24 	.word	0x0800cb24
 8001368:	0800cb34 	.word	0x0800cb34
 800136c:	20000414 	.word	0x20000414
 8001370:	0800cb4c 	.word	0x0800cb4c
 8001374:	20000208 	.word	0x20000208
 8001378:	0800cb5c 	.word	0x0800cb5c
				//valeur_can = load_adc(hadc1, 5);
				//printf("%d \r",valeur_can);
				//printf("\n");
				mapped_value = mapping_adc_value(load_adc(hadc1, 5));
 800137c:	4c15      	ldr	r4, [pc, #84]	; (80013d4 <main+0x394>)
 800137e:	2305      	movs	r3, #5
 8001380:	9315      	str	r3, [sp, #84]	; 0x54
 8001382:	4668      	mov	r0, sp
 8001384:	f104 0310 	add.w	r3, r4, #16
 8001388:	2254      	movs	r2, #84	; 0x54
 800138a:	4619      	mov	r1, r3
 800138c:	f006 fe7c 	bl	8008088 <memcpy>
 8001390:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001394:	f000 fd4c 	bl	8001e30 <load_adc>
 8001398:	4603      	mov	r3, r0
 800139a:	4618      	mov	r0, r3
 800139c:	f000 fd64 	bl	8001e68 <mapping_adc_value>
 80013a0:	60f8      	str	r0, [r7, #12]
				printf("pot %d \r", mapped_value);
 80013a2:	68f9      	ldr	r1, [r7, #12]
 80013a4:	480c      	ldr	r0, [pc, #48]	; (80013d8 <main+0x398>)
 80013a6:	f007 fcff 	bl	8008da8 <iprintf>
				//printf("%d okayy \n \r",okay);
				//load_pwm(htim3, mapped_value);
				if (mapped_value <= 1513) {
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	f240 52e9 	movw	r2, #1513	; 0x5e9
 80013b0:	4293      	cmp	r3, r2
 80013b2:	dc01      	bgt.n	80013b8 <main+0x378>
					okay = 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	613b      	str	r3, [r7, #16]
			while (okay == 1) {
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d0de      	beq.n	800137c <main+0x33c>
					//printf("o %d \n \r", okay);

				}

			}
			printf("succes \n\r");
 80013be:	4807      	ldr	r0, [pc, #28]	; (80013dc <main+0x39c>)
 80013c0:	f007 fcf2 	bl	8008da8 <iprintf>
			etat = manual_mode;
 80013c4:	2303      	movs	r3, #3
 80013c6:	75fb      	strb	r3, [r7, #23]
			r_buffer[0] = ' ';
 80013c8:	2320      	movs	r3, #32
 80013ca:	713b      	strb	r3, [r7, #4]

			break;
 80013cc:	e000      	b.n	80013d0 <main+0x390>

		default:
			break;
 80013ce:	bf00      	nop
		__HAL_UART_CLEAR_OREFLAG(&huart2);
 80013d0:	e656      	b.n	8001080 <main+0x40>
 80013d2:	bf00      	nop
 80013d4:	20000208 	.word	0x20000208
 80013d8:	0800cb80 	.word	0x0800cb80
 80013dc:	0800cb8c 	.word	0x0800cb8c

080013e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b096      	sub	sp, #88	; 0x58
 80013e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013e6:	f107 0314 	add.w	r3, r7, #20
 80013ea:	2244      	movs	r2, #68	; 0x44
 80013ec:	2100      	movs	r1, #0
 80013ee:	4618      	mov	r0, r3
 80013f0:	f006 fe58 	bl	80080a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013f4:	463b      	mov	r3, r7
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	609a      	str	r2, [r3, #8]
 80013fe:	60da      	str	r2, [r3, #12]
 8001400:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001402:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001406:	f002 ff91 	bl	800432c <HAL_PWREx_ControlVoltageScaling>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001410:	f000 f9ea 	bl	80017e8 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001414:	2302      	movs	r3, #2
 8001416:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001418:	f44f 7380 	mov.w	r3, #256	; 0x100
 800141c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800141e:	2310      	movs	r3, #16
 8001420:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001422:	2302      	movs	r3, #2
 8001424:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001426:	2302      	movs	r3, #2
 8001428:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800142a:	2301      	movs	r3, #1
 800142c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800142e:	230a      	movs	r3, #10
 8001430:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001432:	2307      	movs	r3, #7
 8001434:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001436:	2302      	movs	r3, #2
 8001438:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800143a:	2302      	movs	r3, #2
 800143c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800143e:	f107 0314 	add.w	r3, r7, #20
 8001442:	4618      	mov	r0, r3
 8001444:	f002 ffc8 	bl	80043d8 <HAL_RCC_OscConfig>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800144e:	f000 f9cb 	bl	80017e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001452:	230f      	movs	r3, #15
 8001454:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001456:	2303      	movs	r3, #3
 8001458:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800145a:	2300      	movs	r3, #0
 800145c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800145e:	2300      	movs	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001466:	463b      	mov	r3, r7
 8001468:	2104      	movs	r1, #4
 800146a:	4618      	mov	r0, r3
 800146c:	f003 fb9c 	bl	8004ba8 <HAL_RCC_ClockConfig>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001476:	f000 f9b7 	bl	80017e8 <Error_Handler>
  }
}
 800147a:	bf00      	nop
 800147c:	3758      	adds	r7, #88	; 0x58
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
	...

08001484 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08a      	sub	sp, #40	; 0x28
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800148a:	f107 031c 	add.w	r3, r7, #28
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001496:	1d3b      	adds	r3, r7, #4
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	611a      	str	r2, [r3, #16]
 80014a4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80014a6:	4b2f      	ldr	r3, [pc, #188]	; (8001564 <MX_ADC1_Init+0xe0>)
 80014a8:	4a2f      	ldr	r2, [pc, #188]	; (8001568 <MX_ADC1_Init+0xe4>)
 80014aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80014ac:	4b2d      	ldr	r3, [pc, #180]	; (8001564 <MX_ADC1_Init+0xe0>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014b2:	4b2c      	ldr	r3, [pc, #176]	; (8001564 <MX_ADC1_Init+0xe0>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014b8:	4b2a      	ldr	r3, [pc, #168]	; (8001564 <MX_ADC1_Init+0xe0>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014be:	4b29      	ldr	r3, [pc, #164]	; (8001564 <MX_ADC1_Init+0xe0>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014c4:	4b27      	ldr	r3, [pc, #156]	; (8001564 <MX_ADC1_Init+0xe0>)
 80014c6:	2204      	movs	r2, #4
 80014c8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80014ca:	4b26      	ldr	r3, [pc, #152]	; (8001564 <MX_ADC1_Init+0xe0>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014d0:	4b24      	ldr	r3, [pc, #144]	; (8001564 <MX_ADC1_Init+0xe0>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80014d6:	4b23      	ldr	r3, [pc, #140]	; (8001564 <MX_ADC1_Init+0xe0>)
 80014d8:	2201      	movs	r2, #1
 80014da:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014dc:	4b21      	ldr	r3, [pc, #132]	; (8001564 <MX_ADC1_Init+0xe0>)
 80014de:	2200      	movs	r2, #0
 80014e0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014e4:	4b1f      	ldr	r3, [pc, #124]	; (8001564 <MX_ADC1_Init+0xe0>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014ea:	4b1e      	ldr	r3, [pc, #120]	; (8001564 <MX_ADC1_Init+0xe0>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014f0:	4b1c      	ldr	r3, [pc, #112]	; (8001564 <MX_ADC1_Init+0xe0>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80014f8:	4b1a      	ldr	r3, [pc, #104]	; (8001564 <MX_ADC1_Init+0xe0>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80014fe:	4b19      	ldr	r3, [pc, #100]	; (8001564 <MX_ADC1_Init+0xe0>)
 8001500:	2200      	movs	r2, #0
 8001502:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001506:	4817      	ldr	r0, [pc, #92]	; (8001564 <MX_ADC1_Init+0xe0>)
 8001508:	f000 ffc0 	bl	800248c <HAL_ADC_Init>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001512:	f000 f969 	bl	80017e8 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001516:	2300      	movs	r3, #0
 8001518:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800151a:	f107 031c 	add.w	r3, r7, #28
 800151e:	4619      	mov	r1, r3
 8001520:	4810      	ldr	r0, [pc, #64]	; (8001564 <MX_ADC1_Init+0xe0>)
 8001522:	f002 f98b 	bl	800383c <HAL_ADCEx_MultiModeConfigChannel>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800152c:	f000 f95c 	bl	80017e8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001530:	4b0e      	ldr	r3, [pc, #56]	; (800156c <MX_ADC1_Init+0xe8>)
 8001532:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001534:	2306      	movs	r3, #6
 8001536:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001538:	2300      	movs	r3, #0
 800153a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800153c:	237f      	movs	r3, #127	; 0x7f
 800153e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001540:	2304      	movs	r3, #4
 8001542:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001544:	2300      	movs	r3, #0
 8001546:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001548:	1d3b      	adds	r3, r7, #4
 800154a:	4619      	mov	r1, r3
 800154c:	4805      	ldr	r0, [pc, #20]	; (8001564 <MX_ADC1_Init+0xe0>)
 800154e:	f001 fccb 	bl	8002ee8 <HAL_ADC_ConfigChannel>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001558:	f000 f946 	bl	80017e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800155c:	bf00      	nop
 800155e:	3728      	adds	r7, #40	; 0x28
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20000208 	.word	0x20000208
 8001568:	50040000 	.word	0x50040000
 800156c:	14f00020 	.word	0x14f00020

08001570 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08e      	sub	sp, #56	; 0x38
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001576:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]
 8001580:	609a      	str	r2, [r3, #8]
 8001582:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001584:	f107 031c 	add.w	r3, r7, #28
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001590:	463b      	mov	r3, r7
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	605a      	str	r2, [r3, #4]
 8001598:	609a      	str	r2, [r3, #8]
 800159a:	60da      	str	r2, [r3, #12]
 800159c:	611a      	str	r2, [r3, #16]
 800159e:	615a      	str	r2, [r3, #20]
 80015a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015a2:	4b2d      	ldr	r3, [pc, #180]	; (8001658 <MX_TIM3_Init+0xe8>)
 80015a4:	4a2d      	ldr	r2, [pc, #180]	; (800165c <MX_TIM3_Init+0xec>)
 80015a6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80015a8:	4b2b      	ldr	r3, [pc, #172]	; (8001658 <MX_TIM3_Init+0xe8>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ae:	4b2a      	ldr	r3, [pc, #168]	; (8001658 <MX_TIM3_Init+0xe8>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4096;
 80015b4:	4b28      	ldr	r3, [pc, #160]	; (8001658 <MX_TIM3_Init+0xe8>)
 80015b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015bc:	4b26      	ldr	r3, [pc, #152]	; (8001658 <MX_TIM3_Init+0xe8>)
 80015be:	2200      	movs	r2, #0
 80015c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015c2:	4b25      	ldr	r3, [pc, #148]	; (8001658 <MX_TIM3_Init+0xe8>)
 80015c4:	2280      	movs	r2, #128	; 0x80
 80015c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80015c8:	4823      	ldr	r0, [pc, #140]	; (8001658 <MX_TIM3_Init+0xe8>)
 80015ca:	f004 f9af 	bl	800592c <HAL_TIM_Base_Init>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80015d4:	f000 f908 	bl	80017e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015dc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015e2:	4619      	mov	r1, r3
 80015e4:	481c      	ldr	r0, [pc, #112]	; (8001658 <MX_TIM3_Init+0xe8>)
 80015e6:	f004 fd93 	bl	8006110 <HAL_TIM_ConfigClockSource>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80015f0:	f000 f8fa 	bl	80017e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80015f4:	4818      	ldr	r0, [pc, #96]	; (8001658 <MX_TIM3_Init+0xe8>)
 80015f6:	f004 f9f0 	bl	80059da <HAL_TIM_PWM_Init>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001600:	f000 f8f2 	bl	80017e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001604:	2300      	movs	r3, #0
 8001606:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001608:	2300      	movs	r3, #0
 800160a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800160c:	f107 031c 	add.w	r3, r7, #28
 8001610:	4619      	mov	r1, r3
 8001612:	4811      	ldr	r0, [pc, #68]	; (8001658 <MX_TIM3_Init+0xe8>)
 8001614:	f005 faa8 	bl	8006b68 <HAL_TIMEx_MasterConfigSynchronization>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800161e:	f000 f8e3 	bl	80017e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001622:	2360      	movs	r3, #96	; 0x60
 8001624:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 25;
 8001626:	2319      	movs	r3, #25
 8001628:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800162a:	2300      	movs	r3, #0
 800162c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800162e:	2300      	movs	r3, #0
 8001630:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001632:	463b      	mov	r3, r7
 8001634:	2204      	movs	r2, #4
 8001636:	4619      	mov	r1, r3
 8001638:	4807      	ldr	r0, [pc, #28]	; (8001658 <MX_TIM3_Init+0xe8>)
 800163a:	f004 fc55 	bl	8005ee8 <HAL_TIM_PWM_ConfigChannel>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001644:	f000 f8d0 	bl	80017e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001648:	4803      	ldr	r0, [pc, #12]	; (8001658 <MX_TIM3_Init+0xe8>)
 800164a:	f000 f9bd 	bl	80019c8 <HAL_TIM_MspPostInit>

}
 800164e:	bf00      	nop
 8001650:	3738      	adds	r7, #56	; 0x38
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	200002b4 	.word	0x200002b4
 800165c:	40000400 	.word	0x40000400

08001660 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001664:	4b14      	ldr	r3, [pc, #80]	; (80016b8 <MX_USART2_UART_Init+0x58>)
 8001666:	4a15      	ldr	r2, [pc, #84]	; (80016bc <MX_USART2_UART_Init+0x5c>)
 8001668:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800166a:	4b13      	ldr	r3, [pc, #76]	; (80016b8 <MX_USART2_UART_Init+0x58>)
 800166c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001670:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001672:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <MX_USART2_UART_Init+0x58>)
 8001674:	2200      	movs	r2, #0
 8001676:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001678:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <MX_USART2_UART_Init+0x58>)
 800167a:	2200      	movs	r2, #0
 800167c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800167e:	4b0e      	ldr	r3, [pc, #56]	; (80016b8 <MX_USART2_UART_Init+0x58>)
 8001680:	2200      	movs	r2, #0
 8001682:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001684:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <MX_USART2_UART_Init+0x58>)
 8001686:	220c      	movs	r2, #12
 8001688:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800168a:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <MX_USART2_UART_Init+0x58>)
 800168c:	2200      	movs	r2, #0
 800168e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001690:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <MX_USART2_UART_Init+0x58>)
 8001692:	2200      	movs	r2, #0
 8001694:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001696:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <MX_USART2_UART_Init+0x58>)
 8001698:	2200      	movs	r2, #0
 800169a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800169c:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <MX_USART2_UART_Init+0x58>)
 800169e:	2200      	movs	r2, #0
 80016a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016a2:	4805      	ldr	r0, [pc, #20]	; (80016b8 <MX_USART2_UART_Init+0x58>)
 80016a4:	f005 fb06 	bl	8006cb4 <HAL_UART_Init>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80016ae:	f000 f89b 	bl	80017e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20000300 	.word	0x20000300
 80016bc:	40004400 	.word	0x40004400

080016c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016c6:	4b14      	ldr	r3, [pc, #80]	; (8001718 <MX_DMA_Init+0x58>)
 80016c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016ca:	4a13      	ldr	r2, [pc, #76]	; (8001718 <MX_DMA_Init+0x58>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	6493      	str	r3, [r2, #72]	; 0x48
 80016d2:	4b11      	ldr	r3, [pc, #68]	; (8001718 <MX_DMA_Init+0x58>)
 80016d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	607b      	str	r3, [r7, #4]
 80016dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80016de:	2200      	movs	r2, #0
 80016e0:	2100      	movs	r1, #0
 80016e2:	200b      	movs	r0, #11
 80016e4:	f002 fa35 	bl	8003b52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80016e8:	200b      	movs	r0, #11
 80016ea:	f002 fa4e 	bl	8003b8a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2100      	movs	r1, #0
 80016f2:	2010      	movs	r0, #16
 80016f4:	f002 fa2d 	bl	8003b52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80016f8:	2010      	movs	r0, #16
 80016fa:	f002 fa46 	bl	8003b8a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80016fe:	2200      	movs	r2, #0
 8001700:	2100      	movs	r1, #0
 8001702:	2011      	movs	r0, #17
 8001704:	f002 fa25 	bl	8003b52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001708:	2011      	movs	r0, #17
 800170a:	f002 fa3e 	bl	8003b8a <HAL_NVIC_EnableIRQ>

}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40021000 	.word	0x40021000

0800171c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b08a      	sub	sp, #40	; 0x28
 8001720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001722:	f107 0314 	add.w	r3, r7, #20
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	605a      	str	r2, [r3, #4]
 800172c:	609a      	str	r2, [r3, #8]
 800172e:	60da      	str	r2, [r3, #12]
 8001730:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001732:	4b2b      	ldr	r3, [pc, #172]	; (80017e0 <MX_GPIO_Init+0xc4>)
 8001734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001736:	4a2a      	ldr	r2, [pc, #168]	; (80017e0 <MX_GPIO_Init+0xc4>)
 8001738:	f043 0304 	orr.w	r3, r3, #4
 800173c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800173e:	4b28      	ldr	r3, [pc, #160]	; (80017e0 <MX_GPIO_Init+0xc4>)
 8001740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001742:	f003 0304 	and.w	r3, r3, #4
 8001746:	613b      	str	r3, [r7, #16]
 8001748:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800174a:	4b25      	ldr	r3, [pc, #148]	; (80017e0 <MX_GPIO_Init+0xc4>)
 800174c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800174e:	4a24      	ldr	r2, [pc, #144]	; (80017e0 <MX_GPIO_Init+0xc4>)
 8001750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001754:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001756:	4b22      	ldr	r3, [pc, #136]	; (80017e0 <MX_GPIO_Init+0xc4>)
 8001758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001762:	4b1f      	ldr	r3, [pc, #124]	; (80017e0 <MX_GPIO_Init+0xc4>)
 8001764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001766:	4a1e      	ldr	r2, [pc, #120]	; (80017e0 <MX_GPIO_Init+0xc4>)
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800176e:	4b1c      	ldr	r3, [pc, #112]	; (80017e0 <MX_GPIO_Init+0xc4>)
 8001770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	60bb      	str	r3, [r7, #8]
 8001778:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800177a:	4b19      	ldr	r3, [pc, #100]	; (80017e0 <MX_GPIO_Init+0xc4>)
 800177c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800177e:	4a18      	ldr	r2, [pc, #96]	; (80017e0 <MX_GPIO_Init+0xc4>)
 8001780:	f043 0302 	orr.w	r3, r3, #2
 8001784:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001786:	4b16      	ldr	r3, [pc, #88]	; (80017e0 <MX_GPIO_Init+0xc4>)
 8001788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	607b      	str	r3, [r7, #4]
 8001790:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001792:	2200      	movs	r2, #0
 8001794:	2120      	movs	r1, #32
 8001796:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800179a:	f002 fda1 	bl	80042e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800179e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017a4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80017a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017ae:	f107 0314 	add.w	r3, r7, #20
 80017b2:	4619      	mov	r1, r3
 80017b4:	480b      	ldr	r0, [pc, #44]	; (80017e4 <MX_GPIO_Init+0xc8>)
 80017b6:	f002 fbe9 	bl	8003f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80017ba:	2320      	movs	r3, #32
 80017bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017be:	2301      	movs	r3, #1
 80017c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c6:	2300      	movs	r3, #0
 80017c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80017ca:	f107 0314 	add.w	r3, r7, #20
 80017ce:	4619      	mov	r1, r3
 80017d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017d4:	f002 fbda 	bl	8003f8c <HAL_GPIO_Init>

}
 80017d8:	bf00      	nop
 80017da:	3728      	adds	r7, #40	; 0x28
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40021000 	.word	0x40021000
 80017e4:	48000800 	.word	0x48000800

080017e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017ec:	b672      	cpsid	i
}
 80017ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80017f0:	e7fe      	b.n	80017f0 <Error_Handler+0x8>
	...

080017f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017fa:	4b0f      	ldr	r3, [pc, #60]	; (8001838 <HAL_MspInit+0x44>)
 80017fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017fe:	4a0e      	ldr	r2, [pc, #56]	; (8001838 <HAL_MspInit+0x44>)
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	6613      	str	r3, [r2, #96]	; 0x60
 8001806:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <HAL_MspInit+0x44>)
 8001808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	607b      	str	r3, [r7, #4]
 8001810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001812:	4b09      	ldr	r3, [pc, #36]	; (8001838 <HAL_MspInit+0x44>)
 8001814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001816:	4a08      	ldr	r2, [pc, #32]	; (8001838 <HAL_MspInit+0x44>)
 8001818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800181c:	6593      	str	r3, [r2, #88]	; 0x58
 800181e:	4b06      	ldr	r3, [pc, #24]	; (8001838 <HAL_MspInit+0x44>)
 8001820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001826:	603b      	str	r3, [r7, #0]
 8001828:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800182a:	bf00      	nop
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	40021000 	.word	0x40021000

0800183c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b0ac      	sub	sp, #176	; 0xb0
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001844:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]
 8001852:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001854:	f107 0314 	add.w	r3, r7, #20
 8001858:	2288      	movs	r2, #136	; 0x88
 800185a:	2100      	movs	r1, #0
 800185c:	4618      	mov	r0, r3
 800185e:	f006 fc21 	bl	80080a4 <memset>
  if(hadc->Instance==ADC1)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a41      	ldr	r2, [pc, #260]	; (800196c <HAL_ADC_MspInit+0x130>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d17a      	bne.n	8001962 <HAL_ADC_MspInit+0x126>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800186c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001870:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001872:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001876:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800187a:	2302      	movs	r3, #2
 800187c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800187e:	2301      	movs	r3, #1
 8001880:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001882:	2308      	movs	r3, #8
 8001884:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001886:	2307      	movs	r3, #7
 8001888:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800188a:	2302      	movs	r3, #2
 800188c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800188e:	2302      	movs	r3, #2
 8001890:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001892:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001896:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001898:	f107 0314 	add.w	r3, r7, #20
 800189c:	4618      	mov	r0, r3
 800189e:	f003 fb89 	bl	8004fb4 <HAL_RCCEx_PeriphCLKConfig>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80018a8:	f7ff ff9e 	bl	80017e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80018ac:	4b30      	ldr	r3, [pc, #192]	; (8001970 <HAL_ADC_MspInit+0x134>)
 80018ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b0:	4a2f      	ldr	r2, [pc, #188]	; (8001970 <HAL_ADC_MspInit+0x134>)
 80018b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018b8:	4b2d      	ldr	r3, [pc, #180]	; (8001970 <HAL_ADC_MspInit+0x134>)
 80018ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018c0:	613b      	str	r3, [r7, #16]
 80018c2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c4:	4b2a      	ldr	r3, [pc, #168]	; (8001970 <HAL_ADC_MspInit+0x134>)
 80018c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c8:	4a29      	ldr	r2, [pc, #164]	; (8001970 <HAL_ADC_MspInit+0x134>)
 80018ca:	f043 0301 	orr.w	r3, r3, #1
 80018ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018d0:	4b27      	ldr	r3, [pc, #156]	; (8001970 <HAL_ADC_MspInit+0x134>)
 80018d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d4:	f003 0301 	and.w	r3, r3, #1
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018dc:	2301      	movs	r3, #1
 80018de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80018e2:	230b      	movs	r3, #11
 80018e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ee:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018f2:	4619      	mov	r1, r3
 80018f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018f8:	f002 fb48 	bl	8003f8c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80018fc:	4b1d      	ldr	r3, [pc, #116]	; (8001974 <HAL_ADC_MspInit+0x138>)
 80018fe:	4a1e      	ldr	r2, [pc, #120]	; (8001978 <HAL_ADC_MspInit+0x13c>)
 8001900:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001902:	4b1c      	ldr	r3, [pc, #112]	; (8001974 <HAL_ADC_MspInit+0x138>)
 8001904:	2200      	movs	r2, #0
 8001906:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001908:	4b1a      	ldr	r3, [pc, #104]	; (8001974 <HAL_ADC_MspInit+0x138>)
 800190a:	2200      	movs	r2, #0
 800190c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800190e:	4b19      	ldr	r3, [pc, #100]	; (8001974 <HAL_ADC_MspInit+0x138>)
 8001910:	2200      	movs	r2, #0
 8001912:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001914:	4b17      	ldr	r3, [pc, #92]	; (8001974 <HAL_ADC_MspInit+0x138>)
 8001916:	2280      	movs	r2, #128	; 0x80
 8001918:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800191a:	4b16      	ldr	r3, [pc, #88]	; (8001974 <HAL_ADC_MspInit+0x138>)
 800191c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001920:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001922:	4b14      	ldr	r3, [pc, #80]	; (8001974 <HAL_ADC_MspInit+0x138>)
 8001924:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001928:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800192a:	4b12      	ldr	r3, [pc, #72]	; (8001974 <HAL_ADC_MspInit+0x138>)
 800192c:	2200      	movs	r2, #0
 800192e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001930:	4b10      	ldr	r3, [pc, #64]	; (8001974 <HAL_ADC_MspInit+0x138>)
 8001932:	2200      	movs	r2, #0
 8001934:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001936:	480f      	ldr	r0, [pc, #60]	; (8001974 <HAL_ADC_MspInit+0x138>)
 8001938:	f002 f942 	bl	8003bc0 <HAL_DMA_Init>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 8001942:	f7ff ff51 	bl	80017e8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a0a      	ldr	r2, [pc, #40]	; (8001974 <HAL_ADC_MspInit+0x138>)
 800194a:	64da      	str	r2, [r3, #76]	; 0x4c
 800194c:	4a09      	ldr	r2, [pc, #36]	; (8001974 <HAL_ADC_MspInit+0x138>)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001952:	2200      	movs	r2, #0
 8001954:	2100      	movs	r1, #0
 8001956:	2012      	movs	r0, #18
 8001958:	f002 f8fb 	bl	8003b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800195c:	2012      	movs	r0, #18
 800195e:	f002 f914 	bl	8003b8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001962:	bf00      	nop
 8001964:	37b0      	adds	r7, #176	; 0xb0
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	50040000 	.word	0x50040000
 8001970:	40021000 	.word	0x40021000
 8001974:	2000026c 	.word	0x2000026c
 8001978:	40020008 	.word	0x40020008

0800197c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a0d      	ldr	r2, [pc, #52]	; (80019c0 <HAL_TIM_Base_MspInit+0x44>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d113      	bne.n	80019b6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800198e:	4b0d      	ldr	r3, [pc, #52]	; (80019c4 <HAL_TIM_Base_MspInit+0x48>)
 8001990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001992:	4a0c      	ldr	r2, [pc, #48]	; (80019c4 <HAL_TIM_Base_MspInit+0x48>)
 8001994:	f043 0302 	orr.w	r3, r3, #2
 8001998:	6593      	str	r3, [r2, #88]	; 0x58
 800199a:	4b0a      	ldr	r3, [pc, #40]	; (80019c4 <HAL_TIM_Base_MspInit+0x48>)
 800199c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80019a6:	2200      	movs	r2, #0
 80019a8:	2100      	movs	r1, #0
 80019aa:	201d      	movs	r0, #29
 80019ac:	f002 f8d1 	bl	8003b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80019b0:	201d      	movs	r0, #29
 80019b2:	f002 f8ea 	bl	8003b8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80019b6:	bf00      	nop
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40000400 	.word	0x40000400
 80019c4:	40021000 	.word	0x40021000

080019c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b088      	sub	sp, #32
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d0:	f107 030c 	add.w	r3, r7, #12
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]
 80019de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a11      	ldr	r2, [pc, #68]	; (8001a2c <HAL_TIM_MspPostInit+0x64>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d11c      	bne.n	8001a24 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ea:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <HAL_TIM_MspPostInit+0x68>)
 80019ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ee:	4a10      	ldr	r2, [pc, #64]	; (8001a30 <HAL_TIM_MspPostInit+0x68>)
 80019f0:	f043 0301 	orr.w	r3, r3, #1
 80019f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019f6:	4b0e      	ldr	r3, [pc, #56]	; (8001a30 <HAL_TIM_MspPostInit+0x68>)
 80019f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	60bb      	str	r3, [r7, #8]
 8001a00:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001a02:	2380      	movs	r3, #128	; 0x80
 8001a04:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a06:	2302      	movs	r3, #2
 8001a08:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a12:	2302      	movs	r3, #2
 8001a14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a16:	f107 030c 	add.w	r3, r7, #12
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a20:	f002 fab4 	bl	8003f8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001a24:	bf00      	nop
 8001a26:	3720      	adds	r7, #32
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40000400 	.word	0x40000400
 8001a30:	40021000 	.word	0x40021000

08001a34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b0ac      	sub	sp, #176	; 0xb0
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	605a      	str	r2, [r3, #4]
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	60da      	str	r2, [r3, #12]
 8001a4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a4c:	f107 0314 	add.w	r3, r7, #20
 8001a50:	2288      	movs	r2, #136	; 0x88
 8001a52:	2100      	movs	r1, #0
 8001a54:	4618      	mov	r0, r3
 8001a56:	f006 fb25 	bl	80080a4 <memset>
  if(huart->Instance==USART2)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a4f      	ldr	r2, [pc, #316]	; (8001b9c <HAL_UART_MspInit+0x168>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	f040 8096 	bne.w	8001b92 <HAL_UART_MspInit+0x15e>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a66:	2302      	movs	r3, #2
 8001a68:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a6e:	f107 0314 	add.w	r3, r7, #20
 8001a72:	4618      	mov	r0, r3
 8001a74:	f003 fa9e 	bl	8004fb4 <HAL_RCCEx_PeriphCLKConfig>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001a7e:	f7ff feb3 	bl	80017e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a82:	4b47      	ldr	r3, [pc, #284]	; (8001ba0 <HAL_UART_MspInit+0x16c>)
 8001a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a86:	4a46      	ldr	r2, [pc, #280]	; (8001ba0 <HAL_UART_MspInit+0x16c>)
 8001a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a8c:	6593      	str	r3, [r2, #88]	; 0x58
 8001a8e:	4b44      	ldr	r3, [pc, #272]	; (8001ba0 <HAL_UART_MspInit+0x16c>)
 8001a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a96:	613b      	str	r3, [r7, #16]
 8001a98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9a:	4b41      	ldr	r3, [pc, #260]	; (8001ba0 <HAL_UART_MspInit+0x16c>)
 8001a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a9e:	4a40      	ldr	r2, [pc, #256]	; (8001ba0 <HAL_UART_MspInit+0x16c>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aa6:	4b3e      	ldr	r3, [pc, #248]	; (8001ba0 <HAL_UART_MspInit+0x16c>)
 8001aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ab2:	230c      	movs	r3, #12
 8001ab4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001aca:	2307      	movs	r3, #7
 8001acc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ada:	f002 fa57 	bl	8003f8c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001ade:	4b31      	ldr	r3, [pc, #196]	; (8001ba4 <HAL_UART_MspInit+0x170>)
 8001ae0:	4a31      	ldr	r2, [pc, #196]	; (8001ba8 <HAL_UART_MspInit+0x174>)
 8001ae2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8001ae4:	4b2f      	ldr	r3, [pc, #188]	; (8001ba4 <HAL_UART_MspInit+0x170>)
 8001ae6:	2202      	movs	r2, #2
 8001ae8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001aea:	4b2e      	ldr	r3, [pc, #184]	; (8001ba4 <HAL_UART_MspInit+0x170>)
 8001aec:	2210      	movs	r2, #16
 8001aee:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001af0:	4b2c      	ldr	r3, [pc, #176]	; (8001ba4 <HAL_UART_MspInit+0x170>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001af6:	4b2b      	ldr	r3, [pc, #172]	; (8001ba4 <HAL_UART_MspInit+0x170>)
 8001af8:	2280      	movs	r2, #128	; 0x80
 8001afa:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001afc:	4b29      	ldr	r3, [pc, #164]	; (8001ba4 <HAL_UART_MspInit+0x170>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b02:	4b28      	ldr	r3, [pc, #160]	; (8001ba4 <HAL_UART_MspInit+0x170>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001b08:	4b26      	ldr	r3, [pc, #152]	; (8001ba4 <HAL_UART_MspInit+0x170>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b0e:	4b25      	ldr	r3, [pc, #148]	; (8001ba4 <HAL_UART_MspInit+0x170>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001b14:	4823      	ldr	r0, [pc, #140]	; (8001ba4 <HAL_UART_MspInit+0x170>)
 8001b16:	f002 f853 	bl	8003bc0 <HAL_DMA_Init>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8001b20:	f7ff fe62 	bl	80017e8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	4a1f      	ldr	r2, [pc, #124]	; (8001ba4 <HAL_UART_MspInit+0x170>)
 8001b28:	66da      	str	r2, [r3, #108]	; 0x6c
 8001b2a:	4a1e      	ldr	r2, [pc, #120]	; (8001ba4 <HAL_UART_MspInit+0x170>)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001b30:	4b1e      	ldr	r3, [pc, #120]	; (8001bac <HAL_UART_MspInit+0x178>)
 8001b32:	4a1f      	ldr	r2, [pc, #124]	; (8001bb0 <HAL_UART_MspInit+0x17c>)
 8001b34:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8001b36:	4b1d      	ldr	r3, [pc, #116]	; (8001bac <HAL_UART_MspInit+0x178>)
 8001b38:	2202      	movs	r2, #2
 8001b3a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b3c:	4b1b      	ldr	r3, [pc, #108]	; (8001bac <HAL_UART_MspInit+0x178>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b42:	4b1a      	ldr	r3, [pc, #104]	; (8001bac <HAL_UART_MspInit+0x178>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b48:	4b18      	ldr	r3, [pc, #96]	; (8001bac <HAL_UART_MspInit+0x178>)
 8001b4a:	2280      	movs	r2, #128	; 0x80
 8001b4c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b4e:	4b17      	ldr	r3, [pc, #92]	; (8001bac <HAL_UART_MspInit+0x178>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b54:	4b15      	ldr	r3, [pc, #84]	; (8001bac <HAL_UART_MspInit+0x178>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001b5a:	4b14      	ldr	r3, [pc, #80]	; (8001bac <HAL_UART_MspInit+0x178>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b60:	4b12      	ldr	r3, [pc, #72]	; (8001bac <HAL_UART_MspInit+0x178>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001b66:	4811      	ldr	r0, [pc, #68]	; (8001bac <HAL_UART_MspInit+0x178>)
 8001b68:	f002 f82a 	bl	8003bc0 <HAL_DMA_Init>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 8001b72:	f7ff fe39 	bl	80017e8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a0c      	ldr	r2, [pc, #48]	; (8001bac <HAL_UART_MspInit+0x178>)
 8001b7a:	671a      	str	r2, [r3, #112]	; 0x70
 8001b7c:	4a0b      	ldr	r2, [pc, #44]	; (8001bac <HAL_UART_MspInit+0x178>)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001b82:	2200      	movs	r2, #0
 8001b84:	2100      	movs	r1, #0
 8001b86:	2026      	movs	r0, #38	; 0x26
 8001b88:	f001 ffe3 	bl	8003b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b8c:	2026      	movs	r0, #38	; 0x26
 8001b8e:	f001 fffc 	bl	8003b8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b92:	bf00      	nop
 8001b94:	37b0      	adds	r7, #176	; 0xb0
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40004400 	.word	0x40004400
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	20000384 	.word	0x20000384
 8001ba8:	40020080 	.word	0x40020080
 8001bac:	200003cc 	.word	0x200003cc
 8001bb0:	4002006c 	.word	0x4002006c

08001bb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bb8:	e7fe      	b.n	8001bb8 <NMI_Handler+0x4>

08001bba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bbe:	e7fe      	b.n	8001bbe <HardFault_Handler+0x4>

08001bc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bc4:	e7fe      	b.n	8001bc4 <MemManage_Handler+0x4>

08001bc6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bca:	e7fe      	b.n	8001bca <BusFault_Handler+0x4>

08001bcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bd0:	e7fe      	b.n	8001bd0 <UsageFault_Handler+0x4>

08001bd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001be4:	bf00      	nop
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c00:	f000 fa0a 	bl	8002018 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c04:	bf00      	nop
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c0c:	4802      	ldr	r0, [pc, #8]	; (8001c18 <DMA1_Channel1_IRQHandler+0x10>)
 8001c0e:	f002 f90e 	bl	8003e2e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	2000026c 	.word	0x2000026c

08001c1c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001c20:	4802      	ldr	r0, [pc, #8]	; (8001c2c <DMA1_Channel6_IRQHandler+0x10>)
 8001c22:	f002 f904 	bl	8003e2e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	200003cc 	.word	0x200003cc

08001c30 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001c34:	4802      	ldr	r0, [pc, #8]	; (8001c40 <DMA1_Channel7_IRQHandler+0x10>)
 8001c36:	f002 f8fa 	bl	8003e2e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20000384 	.word	0x20000384

08001c44 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001c48:	4802      	ldr	r0, [pc, #8]	; (8001c54 <ADC1_2_IRQHandler+0x10>)
 8001c4a:	f000 ff15 	bl	8002a78 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	20000208 	.word	0x20000208

08001c58 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c5c:	4802      	ldr	r0, [pc, #8]	; (8001c68 <TIM3_IRQHandler+0x10>)
 8001c5e:	f004 f823 	bl	8005ca8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	200002b4 	.word	0x200002b4

08001c6c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c70:	4802      	ldr	r0, [pc, #8]	; (8001c7c <USART2_IRQHandler+0x10>)
 8001c72:	f005 f9d3 	bl	800701c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20000300 	.word	0x20000300

08001c80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
	return 1;
 8001c84:	2301      	movs	r3, #1
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <_kill>:

int _kill(int pid, int sig)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c9a:	f006 f9cb 	bl	8008034 <__errno>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2216      	movs	r2, #22
 8001ca2:	601a      	str	r2, [r3, #0]
	return -1;
 8001ca4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <_exit>:

void _exit (int status)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f7ff ffe7 	bl	8001c90 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001cc2:	e7fe      	b.n	8001cc2 <_exit+0x12>

08001cc4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]
 8001cd4:	e00a      	b.n	8001cec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001cd6:	f3af 8000 	nop.w
 8001cda:	4601      	mov	r1, r0
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	1c5a      	adds	r2, r3, #1
 8001ce0:	60ba      	str	r2, [r7, #8]
 8001ce2:	b2ca      	uxtb	r2, r1
 8001ce4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	617b      	str	r3, [r7, #20]
 8001cec:	697a      	ldr	r2, [r7, #20]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	dbf0      	blt.n	8001cd6 <_read+0x12>
	}

return len;
 8001cf4:	687b      	ldr	r3, [r7, #4]
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3718      	adds	r7, #24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b086      	sub	sp, #24
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	60f8      	str	r0, [r7, #12]
 8001d06:	60b9      	str	r1, [r7, #8]
 8001d08:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	617b      	str	r3, [r7, #20]
 8001d0e:	e009      	b.n	8001d24 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	1c5a      	adds	r2, r3, #1
 8001d14:	60ba      	str	r2, [r7, #8]
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	3301      	adds	r3, #1
 8001d22:	617b      	str	r3, [r7, #20]
 8001d24:	697a      	ldr	r2, [r7, #20]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	dbf1      	blt.n	8001d10 <_write+0x12>
	}
	return len;
 8001d2c:	687b      	ldr	r3, [r7, #4]
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3718      	adds	r7, #24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <_close>:

int _close(int file)
{
 8001d36:	b480      	push	{r7}
 8001d38:	b083      	sub	sp, #12
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
	return -1;
 8001d3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr

08001d4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b083      	sub	sp, #12
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
 8001d56:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d5e:	605a      	str	r2, [r3, #4]
	return 0;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <_isatty>:

int _isatty(int file)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b083      	sub	sp, #12
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
	return 1;
 8001d76:	2301      	movs	r3, #1
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
	return 0;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3714      	adds	r7, #20
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
	...

08001da0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001da8:	4a14      	ldr	r2, [pc, #80]	; (8001dfc <_sbrk+0x5c>)
 8001daa:	4b15      	ldr	r3, [pc, #84]	; (8001e00 <_sbrk+0x60>)
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001db4:	4b13      	ldr	r3, [pc, #76]	; (8001e04 <_sbrk+0x64>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d102      	bne.n	8001dc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dbc:	4b11      	ldr	r3, [pc, #68]	; (8001e04 <_sbrk+0x64>)
 8001dbe:	4a12      	ldr	r2, [pc, #72]	; (8001e08 <_sbrk+0x68>)
 8001dc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dc2:	4b10      	ldr	r3, [pc, #64]	; (8001e04 <_sbrk+0x64>)
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4413      	add	r3, r2
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d207      	bcs.n	8001de0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dd0:	f006 f930 	bl	8008034 <__errno>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	220c      	movs	r2, #12
 8001dd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dda:	f04f 33ff 	mov.w	r3, #4294967295
 8001dde:	e009      	b.n	8001df4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001de0:	4b08      	ldr	r3, [pc, #32]	; (8001e04 <_sbrk+0x64>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001de6:	4b07      	ldr	r3, [pc, #28]	; (8001e04 <_sbrk+0x64>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4413      	add	r3, r2
 8001dee:	4a05      	ldr	r2, [pc, #20]	; (8001e04 <_sbrk+0x64>)
 8001df0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001df2:	68fb      	ldr	r3, [r7, #12]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3718      	adds	r7, #24
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	20018000 	.word	0x20018000
 8001e00:	00000400 	.word	0x00000400
 8001e04:	20000418 	.word	0x20000418
 8001e08:	20000438 	.word	0x20000438

08001e0c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e10:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <SystemInit+0x20>)
 8001e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e16:	4a05      	ldr	r2, [pc, #20]	; (8001e2c <SystemInit+0x20>)
 8001e18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001e20:	bf00      	nop
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	e000ed00 	.word	0xe000ed00

08001e30 <load_adc>:
	 return concat_value;
}*/



int load_adc(ADC_HandleTypeDef hadc, int polTime) {
 8001e30:	b084      	sub	sp, #16
 8001e32:	b580      	push	{r7, lr}
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	f107 0c08 	add.w	ip, r7, #8
 8001e3a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	HAL_ADC_Start(&hadc);
 8001e3e:	f107 0008 	add.w	r0, r7, #8
 8001e42:	f000 fc79 	bl	8002738 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, polTime);
 8001e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e48:	4619      	mov	r1, r3
 8001e4a:	f107 0008 	add.w	r0, r7, #8
 8001e4e:	f000 fd2d 	bl	80028ac <HAL_ADC_PollForConversion>
	return HAL_ADC_GetValue(&hadc);
 8001e52:	f107 0008 	add.w	r0, r7, #8
 8001e56:	f000 fe01 	bl	8002a5c <HAL_ADC_GetValue>
 8001e5a:	4603      	mov	r3, r0



}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001e64:	b004      	add	sp, #16
 8001e66:	4770      	bx	lr

08001e68 <mapping_adc_value>:

int mapping_adc_value(int val){
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
	remap = 1512 +  (val * 2583/4095);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f640 2217 	movw	r2, #2583	; 0xa17
 8001e76:	fb02 f303 	mul.w	r3, r2, r3
 8001e7a:	4a0f      	ldr	r2, [pc, #60]	; (8001eb8 <mapping_adc_value+0x50>)
 8001e7c:	fb82 1203 	smull	r1, r2, r2, r3
 8001e80:	441a      	add	r2, r3
 8001e82:	12d2      	asrs	r2, r2, #11
 8001e84:	17db      	asrs	r3, r3, #31
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	f503 63bd 	add.w	r3, r3, #1512	; 0x5e8
 8001e8c:	ee07 3a90 	vmov	s15, r3
 8001e90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e94:	4b09      	ldr	r3, [pc, #36]	; (8001ebc <mapping_adc_value+0x54>)
 8001e96:	edc3 7a00 	vstr	s15, [r3]
	int map =  remap;
 8001e9a:	4b08      	ldr	r3, [pc, #32]	; (8001ebc <mapping_adc_value+0x54>)
 8001e9c:	edd3 7a00 	vldr	s15, [r3]
 8001ea0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ea4:	ee17 3a90 	vmov	r3, s15
 8001ea8:	60fb      	str	r3, [r7, #12]
	return map;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3714      	adds	r7, #20
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	80080081 	.word	0x80080081
 8001ebc:	2000041c 	.word	0x2000041c

08001ec0 <load_pwm>:

void load_pwm(TIM_HandleTypeDef htimX, int val) {
 8001ec0:	b084      	sub	sp, #16
 8001ec2:	b490      	push	{r4, r7}
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	f107 0408 	add.w	r4, r7, #8
 8001eca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	htimX.Instance->CCR2 = val;
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001ed2:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001ed4:	bf00      	nop
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bc90      	pop	{r4, r7}
 8001eda:	b004      	add	sp, #16
 8001edc:	4770      	bx	lr

08001ede <y_print>:

void y_print(UART_HandleTypeDef *huart, char *mess,int len) {
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b084      	sub	sp, #16
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	60f8      	str	r0, [r7, #12]
 8001ee6:	60b9      	str	r1, [r7, #8]
 8001ee8:	607a      	str	r2, [r7, #4]

	if (HAL_UART_Transmit(huart, (uint8_t*) mess,len, 100) != HAL_OK)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	b29a      	uxth	r2, r3
 8001eee:	2364      	movs	r3, #100	; 0x64
 8001ef0:	68b9      	ldr	r1, [r7, #8]
 8001ef2:	68f8      	ldr	r0, [r7, #12]
 8001ef4:	f004 ff2c 	bl	8006d50 <HAL_UART_Transmit>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <y_print+0x24>
		Error_Handler();
 8001efe:	f7ff fc73 	bl	80017e8 <Error_Handler>
}
 8001f02:	bf00      	nop
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
	...

08001f0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001f0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f44 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f10:	f7ff ff7c 	bl	8001e0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f14:	480c      	ldr	r0, [pc, #48]	; (8001f48 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f16:	490d      	ldr	r1, [pc, #52]	; (8001f4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f18:	4a0d      	ldr	r2, [pc, #52]	; (8001f50 <LoopForever+0xe>)
  movs r3, #0
 8001f1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f1c:	e002      	b.n	8001f24 <LoopCopyDataInit>

08001f1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f22:	3304      	adds	r3, #4

08001f24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f28:	d3f9      	bcc.n	8001f1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f2a:	4a0a      	ldr	r2, [pc, #40]	; (8001f54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f2c:	4c0a      	ldr	r4, [pc, #40]	; (8001f58 <LoopForever+0x16>)
  movs r3, #0
 8001f2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f30:	e001      	b.n	8001f36 <LoopFillZerobss>

08001f32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f34:	3204      	adds	r2, #4

08001f36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f38:	d3fb      	bcc.n	8001f32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f3a:	f006 f881 	bl	8008040 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f3e:	f7ff f87f 	bl	8001040 <main>

08001f42 <LoopForever>:

LoopForever:
    b LoopForever
 8001f42:	e7fe      	b.n	8001f42 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001f44:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001f48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f4c:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001f50:	0800d09c 	.word	0x0800d09c
  ldr r2, =_sbss
 8001f54:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001f58:	20000434 	.word	0x20000434

08001f5c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f5c:	e7fe      	b.n	8001f5c <ADC3_IRQHandler>
	...

08001f60 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f66:	2300      	movs	r3, #0
 8001f68:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f6a:	4b0c      	ldr	r3, [pc, #48]	; (8001f9c <HAL_Init+0x3c>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a0b      	ldr	r2, [pc, #44]	; (8001f9c <HAL_Init+0x3c>)
 8001f70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f74:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f76:	2003      	movs	r0, #3
 8001f78:	f001 fde0 	bl	8003b3c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f7c:	2000      	movs	r0, #0
 8001f7e:	f000 f80f 	bl	8001fa0 <HAL_InitTick>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d002      	beq.n	8001f8e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	71fb      	strb	r3, [r7, #7]
 8001f8c:	e001      	b.n	8001f92 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f8e:	f7ff fc31 	bl	80017f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f92:	79fb      	ldrb	r3, [r7, #7]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3708      	adds	r7, #8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40022000 	.word	0x40022000

08001fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001fac:	4b17      	ldr	r3, [pc, #92]	; (800200c <HAL_InitTick+0x6c>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d023      	beq.n	8001ffc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001fb4:	4b16      	ldr	r3, [pc, #88]	; (8002010 <HAL_InitTick+0x70>)
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	4b14      	ldr	r3, [pc, #80]	; (800200c <HAL_InitTick+0x6c>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f001 fdeb 	bl	8003ba6 <HAL_SYSTICK_Config>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d10f      	bne.n	8001ff6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2b0f      	cmp	r3, #15
 8001fda:	d809      	bhi.n	8001ff0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fdc:	2200      	movs	r2, #0
 8001fde:	6879      	ldr	r1, [r7, #4]
 8001fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe4:	f001 fdb5 	bl	8003b52 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fe8:	4a0a      	ldr	r2, [pc, #40]	; (8002014 <HAL_InitTick+0x74>)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6013      	str	r3, [r2, #0]
 8001fee:	e007      	b.n	8002000 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	73fb      	strb	r3, [r7, #15]
 8001ff4:	e004      	b.n	8002000 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	73fb      	strb	r3, [r7, #15]
 8001ffa:	e001      	b.n	8002000 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002000:	7bfb      	ldrb	r3, [r7, #15]
}
 8002002:	4618      	mov	r0, r3
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	20000014 	.word	0x20000014
 8002010:	20000004 	.word	0x20000004
 8002014:	20000010 	.word	0x20000010

08002018 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800201c:	4b06      	ldr	r3, [pc, #24]	; (8002038 <HAL_IncTick+0x20>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	461a      	mov	r2, r3
 8002022:	4b06      	ldr	r3, [pc, #24]	; (800203c <HAL_IncTick+0x24>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4413      	add	r3, r2
 8002028:	4a04      	ldr	r2, [pc, #16]	; (800203c <HAL_IncTick+0x24>)
 800202a:	6013      	str	r3, [r2, #0]
}
 800202c:	bf00      	nop
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	20000014 	.word	0x20000014
 800203c:	20000420 	.word	0x20000420

08002040 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  return uwTick;
 8002044:	4b03      	ldr	r3, [pc, #12]	; (8002054 <HAL_GetTick+0x14>)
 8002046:	681b      	ldr	r3, [r3, #0]
}
 8002048:	4618      	mov	r0, r3
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	20000420 	.word	0x20000420

08002058 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002060:	f7ff ffee 	bl	8002040 <HAL_GetTick>
 8002064:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002070:	d005      	beq.n	800207e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002072:	4b0a      	ldr	r3, [pc, #40]	; (800209c <HAL_Delay+0x44>)
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	461a      	mov	r2, r3
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	4413      	add	r3, r2
 800207c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800207e:	bf00      	nop
 8002080:	f7ff ffde 	bl	8002040 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	429a      	cmp	r2, r3
 800208e:	d8f7      	bhi.n	8002080 <HAL_Delay+0x28>
  {
  }
}
 8002090:	bf00      	nop
 8002092:	bf00      	nop
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	20000014 	.word	0x20000014

080020a0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	431a      	orrs	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	609a      	str	r2, [r3, #8]
}
 80020ba:	bf00      	nop
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80020c6:	b480      	push	{r7}
 80020c8:	b083      	sub	sp, #12
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
 80020ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	431a      	orrs	r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	609a      	str	r2, [r3, #8]
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002108:	b480      	push	{r7}
 800210a:	b087      	sub	sp, #28
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
 8002114:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	3360      	adds	r3, #96	; 0x60
 800211a:	461a      	mov	r2, r3
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	4413      	add	r3, r2
 8002122:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	4b08      	ldr	r3, [pc, #32]	; (800214c <LL_ADC_SetOffset+0x44>)
 800212a:	4013      	ands	r3, r2
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002132:	683a      	ldr	r2, [r7, #0]
 8002134:	430a      	orrs	r2, r1
 8002136:	4313      	orrs	r3, r2
 8002138:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002140:	bf00      	nop
 8002142:	371c      	adds	r7, #28
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	03fff000 	.word	0x03fff000

08002150 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	3360      	adds	r3, #96	; 0x60
 800215e:	461a      	mov	r2, r3
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	4413      	add	r3, r2
 8002166:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002170:	4618      	mov	r0, r3
 8002172:	3714      	adds	r7, #20
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800217c:	b480      	push	{r7}
 800217e:	b087      	sub	sp, #28
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	3360      	adds	r3, #96	; 0x60
 800218c:	461a      	mov	r2, r3
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	4413      	add	r3, r2
 8002194:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	431a      	orrs	r2, r3
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80021a6:	bf00      	nop
 80021a8:	371c      	adds	r7, #28
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80021b2:	b480      	push	{r7}
 80021b4:	b083      	sub	sp, #12
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80021c6:	2301      	movs	r3, #1
 80021c8:	e000      	b.n	80021cc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80021ca:	2300      	movs	r3, #0
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80021d8:	b480      	push	{r7}
 80021da:	b087      	sub	sp, #28
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	3330      	adds	r3, #48	; 0x30
 80021e8:	461a      	mov	r2, r3
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	0a1b      	lsrs	r3, r3, #8
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	f003 030c 	and.w	r3, r3, #12
 80021f4:	4413      	add	r3, r2
 80021f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	f003 031f 	and.w	r3, r3, #31
 8002202:	211f      	movs	r1, #31
 8002204:	fa01 f303 	lsl.w	r3, r1, r3
 8002208:	43db      	mvns	r3, r3
 800220a:	401a      	ands	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	0e9b      	lsrs	r3, r3, #26
 8002210:	f003 011f 	and.w	r1, r3, #31
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	f003 031f 	and.w	r3, r3, #31
 800221a:	fa01 f303 	lsl.w	r3, r1, r3
 800221e:	431a      	orrs	r2, r3
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002224:	bf00      	nop
 8002226:	371c      	adds	r7, #28
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800223c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d101      	bne.n	8002248 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002244:	2301      	movs	r3, #1
 8002246:	e000      	b.n	800224a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002256:	b480      	push	{r7}
 8002258:	b087      	sub	sp, #28
 800225a:	af00      	add	r7, sp, #0
 800225c:	60f8      	str	r0, [r7, #12]
 800225e:	60b9      	str	r1, [r7, #8]
 8002260:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	3314      	adds	r3, #20
 8002266:	461a      	mov	r2, r3
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	0e5b      	lsrs	r3, r3, #25
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	f003 0304 	and.w	r3, r3, #4
 8002272:	4413      	add	r3, r2
 8002274:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	0d1b      	lsrs	r3, r3, #20
 800227e:	f003 031f 	and.w	r3, r3, #31
 8002282:	2107      	movs	r1, #7
 8002284:	fa01 f303 	lsl.w	r3, r1, r3
 8002288:	43db      	mvns	r3, r3
 800228a:	401a      	ands	r2, r3
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	0d1b      	lsrs	r3, r3, #20
 8002290:	f003 031f 	and.w	r3, r3, #31
 8002294:	6879      	ldr	r1, [r7, #4]
 8002296:	fa01 f303 	lsl.w	r3, r1, r3
 800229a:	431a      	orrs	r2, r3
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80022a0:	bf00      	nop
 80022a2:	371c      	adds	r7, #28
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022c4:	43db      	mvns	r3, r3
 80022c6:	401a      	ands	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f003 0318 	and.w	r3, r3, #24
 80022ce:	4908      	ldr	r1, [pc, #32]	; (80022f0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80022d0:	40d9      	lsrs	r1, r3
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	400b      	ands	r3, r1
 80022d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022da:	431a      	orrs	r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80022e2:	bf00      	nop
 80022e4:	3714      	adds	r7, #20
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	0007ffff 	.word	0x0007ffff

080022f4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f003 031f 	and.w	r3, r3, #31
}
 8002304:	4618      	mov	r0, r3
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002320:	4618      	mov	r0, r3
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800233c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	6093      	str	r3, [r2, #8]
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002360:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002364:	d101      	bne.n	800236a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002366:	2301      	movs	r3, #1
 8002368:	e000      	b.n	800236c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002388:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800238c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80023b4:	d101      	bne.n	80023ba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80023b6:	2301      	movs	r3, #1
 80023b8:	e000      	b.n	80023bc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80023ba:	2300      	movs	r3, #0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023dc:	f043 0201 	orr.w	r2, r3, #1
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f003 0301 	and.w	r3, r3, #1
 8002400:	2b01      	cmp	r3, #1
 8002402:	d101      	bne.n	8002408 <LL_ADC_IsEnabled+0x18>
 8002404:	2301      	movs	r3, #1
 8002406:	e000      	b.n	800240a <LL_ADC_IsEnabled+0x1a>
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr

08002416 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002416:	b480      	push	{r7}
 8002418:	b083      	sub	sp, #12
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002426:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800242a:	f043 0204 	orr.w	r2, r3, #4
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002432:	bf00      	nop
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr

0800243e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800243e:	b480      	push	{r7}
 8002440:	b083      	sub	sp, #12
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f003 0304 	and.w	r3, r3, #4
 800244e:	2b04      	cmp	r3, #4
 8002450:	d101      	bne.n	8002456 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002452:	2301      	movs	r3, #1
 8002454:	e000      	b.n	8002458 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f003 0308 	and.w	r3, r3, #8
 8002474:	2b08      	cmp	r3, #8
 8002476:	d101      	bne.n	800247c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002478:	2301      	movs	r3, #1
 800247a:	e000      	b.n	800247e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
	...

0800248c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800248c:	b590      	push	{r4, r7, lr}
 800248e:	b089      	sub	sp, #36	; 0x24
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002494:	2300      	movs	r3, #0
 8002496:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002498:	2300      	movs	r3, #0
 800249a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e136      	b.n	8002714 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d109      	bne.n	80024c8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f7ff f9c1 	bl	800183c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff ff3f 	bl	8002350 <LL_ADC_IsDeepPowerDownEnabled>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d004      	beq.n	80024e2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff ff25 	bl	800232c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff ff5a 	bl	80023a0 <LL_ADC_IsInternalRegulatorEnabled>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d115      	bne.n	800251e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff ff3e 	bl	8002378 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024fc:	4b87      	ldr	r3, [pc, #540]	; (800271c <HAL_ADC_Init+0x290>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	099b      	lsrs	r3, r3, #6
 8002502:	4a87      	ldr	r2, [pc, #540]	; (8002720 <HAL_ADC_Init+0x294>)
 8002504:	fba2 2303 	umull	r2, r3, r2, r3
 8002508:	099b      	lsrs	r3, r3, #6
 800250a:	3301      	adds	r3, #1
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002510:	e002      	b.n	8002518 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	3b01      	subs	r3, #1
 8002516:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1f9      	bne.n	8002512 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff ff3c 	bl	80023a0 <LL_ADC_IsInternalRegulatorEnabled>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d10d      	bne.n	800254a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002532:	f043 0210 	orr.w	r2, r3, #16
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800253e:	f043 0201 	orr.w	r2, r3, #1
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff ff75 	bl	800243e <LL_ADC_REG_IsConversionOngoing>
 8002554:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800255a:	f003 0310 	and.w	r3, r3, #16
 800255e:	2b00      	cmp	r3, #0
 8002560:	f040 80cf 	bne.w	8002702 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	2b00      	cmp	r3, #0
 8002568:	f040 80cb 	bne.w	8002702 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002570:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002574:	f043 0202 	orr.w	r2, r3, #2
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff ff35 	bl	80023f0 <LL_ADC_IsEnabled>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d115      	bne.n	80025b8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800258c:	4865      	ldr	r0, [pc, #404]	; (8002724 <HAL_ADC_Init+0x298>)
 800258e:	f7ff ff2f 	bl	80023f0 <LL_ADC_IsEnabled>
 8002592:	4604      	mov	r4, r0
 8002594:	4864      	ldr	r0, [pc, #400]	; (8002728 <HAL_ADC_Init+0x29c>)
 8002596:	f7ff ff2b 	bl	80023f0 <LL_ADC_IsEnabled>
 800259a:	4603      	mov	r3, r0
 800259c:	431c      	orrs	r4, r3
 800259e:	4863      	ldr	r0, [pc, #396]	; (800272c <HAL_ADC_Init+0x2a0>)
 80025a0:	f7ff ff26 	bl	80023f0 <LL_ADC_IsEnabled>
 80025a4:	4603      	mov	r3, r0
 80025a6:	4323      	orrs	r3, r4
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d105      	bne.n	80025b8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	4619      	mov	r1, r3
 80025b2:	485f      	ldr	r0, [pc, #380]	; (8002730 <HAL_ADC_Init+0x2a4>)
 80025b4:	f7ff fd74 	bl	80020a0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	7e5b      	ldrb	r3, [r3, #25]
 80025bc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025c2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80025c8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80025ce:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025d6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025d8:	4313      	orrs	r3, r2
 80025da:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d106      	bne.n	80025f4 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ea:	3b01      	subs	r3, #1
 80025ec:	045b      	lsls	r3, r3, #17
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d009      	beq.n	8002610 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002600:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002608:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	4313      	orrs	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68da      	ldr	r2, [r3, #12]
 8002616:	4b47      	ldr	r3, [pc, #284]	; (8002734 <HAL_ADC_Init+0x2a8>)
 8002618:	4013      	ands	r3, r2
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	6812      	ldr	r2, [r2, #0]
 800261e:	69b9      	ldr	r1, [r7, #24]
 8002620:	430b      	orrs	r3, r1
 8002622:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff ff08 	bl	800243e <LL_ADC_REG_IsConversionOngoing>
 800262e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff ff15 	bl	8002464 <LL_ADC_INJ_IsConversionOngoing>
 800263a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d13d      	bne.n	80026be <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d13a      	bne.n	80026be <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800264c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002654:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002656:	4313      	orrs	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002664:	f023 0302 	bic.w	r3, r3, #2
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	6812      	ldr	r2, [r2, #0]
 800266c:	69b9      	ldr	r1, [r7, #24]
 800266e:	430b      	orrs	r3, r1
 8002670:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002678:	2b01      	cmp	r3, #1
 800267a:	d118      	bne.n	80026ae <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002686:	f023 0304 	bic.w	r3, r3, #4
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002692:	4311      	orrs	r1, r2
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002698:	4311      	orrs	r1, r2
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800269e:	430a      	orrs	r2, r1
 80026a0:	431a      	orrs	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f042 0201 	orr.w	r2, r2, #1
 80026aa:	611a      	str	r2, [r3, #16]
 80026ac:	e007      	b.n	80026be <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	691a      	ldr	r2, [r3, #16]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f022 0201 	bic.w	r2, r2, #1
 80026bc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d10c      	bne.n	80026e0 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026cc:	f023 010f 	bic.w	r1, r3, #15
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	69db      	ldr	r3, [r3, #28]
 80026d4:	1e5a      	subs	r2, r3, #1
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	430a      	orrs	r2, r1
 80026dc:	631a      	str	r2, [r3, #48]	; 0x30
 80026de:	e007      	b.n	80026f0 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 020f 	bic.w	r2, r2, #15
 80026ee:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f4:	f023 0303 	bic.w	r3, r3, #3
 80026f8:	f043 0201 	orr.w	r2, r3, #1
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	655a      	str	r2, [r3, #84]	; 0x54
 8002700:	e007      	b.n	8002712 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002706:	f043 0210 	orr.w	r2, r3, #16
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002712:	7ffb      	ldrb	r3, [r7, #31]
}
 8002714:	4618      	mov	r0, r3
 8002716:	3724      	adds	r7, #36	; 0x24
 8002718:	46bd      	mov	sp, r7
 800271a:	bd90      	pop	{r4, r7, pc}
 800271c:	20000004 	.word	0x20000004
 8002720:	053e2d63 	.word	0x053e2d63
 8002724:	50040000 	.word	0x50040000
 8002728:	50040100 	.word	0x50040100
 800272c:	50040200 	.word	0x50040200
 8002730:	50040300 	.word	0x50040300
 8002734:	fff0c007 	.word	0xfff0c007

08002738 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002740:	4857      	ldr	r0, [pc, #348]	; (80028a0 <HAL_ADC_Start+0x168>)
 8002742:	f7ff fdd7 	bl	80022f4 <LL_ADC_GetMultimode>
 8002746:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff fe76 	bl	800243e <LL_ADC_REG_IsConversionOngoing>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	f040 809c 	bne.w	8002892 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002760:	2b01      	cmp	r3, #1
 8002762:	d101      	bne.n	8002768 <HAL_ADC_Start+0x30>
 8002764:	2302      	movs	r3, #2
 8002766:	e097      	b.n	8002898 <HAL_ADC_Start+0x160>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f000 ffa9 	bl	80036c8 <ADC_Enable>
 8002776:	4603      	mov	r3, r0
 8002778:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800277a:	7dfb      	ldrb	r3, [r7, #23]
 800277c:	2b00      	cmp	r3, #0
 800277e:	f040 8083 	bne.w	8002888 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002786:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800278a:	f023 0301 	bic.w	r3, r3, #1
 800278e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a42      	ldr	r2, [pc, #264]	; (80028a4 <HAL_ADC_Start+0x16c>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d002      	beq.n	80027a6 <HAL_ADC_Start+0x6e>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	e000      	b.n	80027a8 <HAL_ADC_Start+0x70>
 80027a6:	4b40      	ldr	r3, [pc, #256]	; (80028a8 <HAL_ADC_Start+0x170>)
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	6812      	ldr	r2, [r2, #0]
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d002      	beq.n	80027b6 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d105      	bne.n	80027c2 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027ce:	d106      	bne.n	80027de <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d4:	f023 0206 	bic.w	r2, r3, #6
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	659a      	str	r2, [r3, #88]	; 0x58
 80027dc:	e002      	b.n	80027e4 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	221c      	movs	r2, #28
 80027ea:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a2a      	ldr	r2, [pc, #168]	; (80028a4 <HAL_ADC_Start+0x16c>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d002      	beq.n	8002804 <HAL_ADC_Start+0xcc>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	e000      	b.n	8002806 <HAL_ADC_Start+0xce>
 8002804:	4b28      	ldr	r3, [pc, #160]	; (80028a8 <HAL_ADC_Start+0x170>)
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	6812      	ldr	r2, [r2, #0]
 800280a:	4293      	cmp	r3, r2
 800280c:	d008      	beq.n	8002820 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d005      	beq.n	8002820 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	2b05      	cmp	r3, #5
 8002818:	d002      	beq.n	8002820 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	2b09      	cmp	r3, #9
 800281e:	d114      	bne.n	800284a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d007      	beq.n	800283e <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002832:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002836:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff fde7 	bl	8002416 <LL_ADC_REG_StartConversion>
 8002848:	e025      	b.n	8002896 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800284e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a12      	ldr	r2, [pc, #72]	; (80028a4 <HAL_ADC_Start+0x16c>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d002      	beq.n	8002866 <HAL_ADC_Start+0x12e>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	e000      	b.n	8002868 <HAL_ADC_Start+0x130>
 8002866:	4b10      	ldr	r3, [pc, #64]	; (80028a8 <HAL_ADC_Start+0x170>)
 8002868:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00f      	beq.n	8002896 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800287a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800287e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	655a      	str	r2, [r3, #84]	; 0x54
 8002886:	e006      	b.n	8002896 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002890:	e001      	b.n	8002896 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002892:	2302      	movs	r3, #2
 8002894:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002896:	7dfb      	ldrb	r3, [r7, #23]
}
 8002898:	4618      	mov	r0, r3
 800289a:	3718      	adds	r7, #24
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	50040300 	.word	0x50040300
 80028a4:	50040100 	.word	0x50040100
 80028a8:	50040000 	.word	0x50040000

080028ac <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b088      	sub	sp, #32
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028b6:	4866      	ldr	r0, [pc, #408]	; (8002a50 <HAL_ADC_PollForConversion+0x1a4>)
 80028b8:	f7ff fd1c 	bl	80022f4 <LL_ADC_GetMultimode>
 80028bc:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	2b08      	cmp	r3, #8
 80028c4:	d102      	bne.n	80028cc <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80028c6:	2308      	movs	r3, #8
 80028c8:	61fb      	str	r3, [r7, #28]
 80028ca:	e02a      	b.n	8002922 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d005      	beq.n	80028de <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	2b05      	cmp	r3, #5
 80028d6:	d002      	beq.n	80028de <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	2b09      	cmp	r3, #9
 80028dc:	d111      	bne.n	8002902 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d007      	beq.n	80028fc <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f0:	f043 0220 	orr.w	r2, r3, #32
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e0a4      	b.n	8002a46 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80028fc:	2304      	movs	r3, #4
 80028fe:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002900:	e00f      	b.n	8002922 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002902:	4853      	ldr	r0, [pc, #332]	; (8002a50 <HAL_ADC_PollForConversion+0x1a4>)
 8002904:	f7ff fd04 	bl	8002310 <LL_ADC_GetMultiDMATransfer>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d007      	beq.n	800291e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002912:	f043 0220 	orr.w	r2, r3, #32
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e093      	b.n	8002a46 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800291e:	2304      	movs	r3, #4
 8002920:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002922:	f7ff fb8d 	bl	8002040 <HAL_GetTick>
 8002926:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002928:	e021      	b.n	800296e <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002930:	d01d      	beq.n	800296e <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002932:	f7ff fb85 	bl	8002040 <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	429a      	cmp	r2, r3
 8002940:	d302      	bcc.n	8002948 <HAL_ADC_PollForConversion+0x9c>
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d112      	bne.n	800296e <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	4013      	ands	r3, r2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d10b      	bne.n	800296e <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800295a:	f043 0204 	orr.w	r2, r3, #4
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e06b      	b.n	8002a46 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	4013      	ands	r3, r2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d0d6      	beq.n	800292a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002980:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4618      	mov	r0, r3
 800298e:	f7ff fc10 	bl	80021b2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d01c      	beq.n	80029d2 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	7e5b      	ldrb	r3, [r3, #25]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d118      	bne.n	80029d2 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0308 	and.w	r3, r3, #8
 80029aa:	2b08      	cmp	r3, #8
 80029ac:	d111      	bne.n	80029d2 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d105      	bne.n	80029d2 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ca:	f043 0201 	orr.w	r2, r3, #1
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a1f      	ldr	r2, [pc, #124]	; (8002a54 <HAL_ADC_PollForConversion+0x1a8>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d002      	beq.n	80029e2 <HAL_ADC_PollForConversion+0x136>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	e000      	b.n	80029e4 <HAL_ADC_PollForConversion+0x138>
 80029e2:	4b1d      	ldr	r3, [pc, #116]	; (8002a58 <HAL_ADC_PollForConversion+0x1ac>)
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	6812      	ldr	r2, [r2, #0]
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d008      	beq.n	80029fe <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d005      	beq.n	80029fe <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	2b05      	cmp	r3, #5
 80029f6:	d002      	beq.n	80029fe <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	2b09      	cmp	r3, #9
 80029fc:	d104      	bne.n	8002a08 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	61bb      	str	r3, [r7, #24]
 8002a06:	e00c      	b.n	8002a22 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a11      	ldr	r2, [pc, #68]	; (8002a54 <HAL_ADC_PollForConversion+0x1a8>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d002      	beq.n	8002a18 <HAL_ADC_PollForConversion+0x16c>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	e000      	b.n	8002a1a <HAL_ADC_PollForConversion+0x16e>
 8002a18:	4b0f      	ldr	r3, [pc, #60]	; (8002a58 <HAL_ADC_PollForConversion+0x1ac>)
 8002a1a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	2b08      	cmp	r3, #8
 8002a26:	d104      	bne.n	8002a32 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2208      	movs	r2, #8
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	e008      	b.n	8002a44 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d103      	bne.n	8002a44 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	220c      	movs	r2, #12
 8002a42:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3720      	adds	r7, #32
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	50040300 	.word	0x50040300
 8002a54:	50040100 	.word	0x50040100
 8002a58:	50040000 	.word	0x50040000

08002a5c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
	...

08002a78 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b08a      	sub	sp, #40	; 0x28
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002a80:	2300      	movs	r3, #0
 8002a82:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a94:	4882      	ldr	r0, [pc, #520]	; (8002ca0 <HAL_ADC_IRQHandler+0x228>)
 8002a96:	f7ff fc2d 	bl	80022f4 <LL_ADC_GetMultimode>
 8002a9a:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d017      	beq.n	8002ad6 <HAL_ADC_IRQHandler+0x5e>
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d012      	beq.n	8002ad6 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab4:	f003 0310 	and.w	r3, r3, #16
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d105      	bne.n	8002ac8 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac0:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 fead 	bl	8003828 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d004      	beq.n	8002aea <HAL_ADC_IRQHandler+0x72>
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	f003 0304 	and.w	r3, r3, #4
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d10a      	bne.n	8002b00 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f000 8083 	beq.w	8002bfc <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	f003 0308 	and.w	r3, r3, #8
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d07d      	beq.n	8002bfc <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b04:	f003 0310 	and.w	r3, r3, #16
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d105      	bne.n	8002b18 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b10:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7ff fb48 	bl	80021b2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d062      	beq.n	8002bee <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a5d      	ldr	r2, [pc, #372]	; (8002ca4 <HAL_ADC_IRQHandler+0x22c>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d002      	beq.n	8002b38 <HAL_ADC_IRQHandler+0xc0>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	e000      	b.n	8002b3a <HAL_ADC_IRQHandler+0xc2>
 8002b38:	4b5b      	ldr	r3, [pc, #364]	; (8002ca8 <HAL_ADC_IRQHandler+0x230>)
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	6812      	ldr	r2, [r2, #0]
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d008      	beq.n	8002b54 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d005      	beq.n	8002b54 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	2b05      	cmp	r3, #5
 8002b4c:	d002      	beq.n	8002b54 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	2b09      	cmp	r3, #9
 8002b52:	d104      	bne.n	8002b5e <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	623b      	str	r3, [r7, #32]
 8002b5c:	e00c      	b.n	8002b78 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a50      	ldr	r2, [pc, #320]	; (8002ca4 <HAL_ADC_IRQHandler+0x22c>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d002      	beq.n	8002b6e <HAL_ADC_IRQHandler+0xf6>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	e000      	b.n	8002b70 <HAL_ADC_IRQHandler+0xf8>
 8002b6e:	4b4e      	ldr	r3, [pc, #312]	; (8002ca8 <HAL_ADC_IRQHandler+0x230>)
 8002b70:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002b78:	6a3b      	ldr	r3, [r7, #32]
 8002b7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d135      	bne.n	8002bee <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0308 	and.w	r3, r3, #8
 8002b8c:	2b08      	cmp	r3, #8
 8002b8e:	d12e      	bne.n	8002bee <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7ff fc52 	bl	800243e <LL_ADC_REG_IsConversionOngoing>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d11a      	bne.n	8002bd6 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	685a      	ldr	r2, [r3, #4]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 020c 	bic.w	r2, r2, #12
 8002bae:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bb4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d112      	bne.n	8002bee <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bcc:	f043 0201 	orr.w	r2, r3, #1
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	655a      	str	r2, [r3, #84]	; 0x54
 8002bd4:	e00b      	b.n	8002bee <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bda:	f043 0210 	orr.w	r2, r3, #16
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be6:	f043 0201 	orr.w	r2, r3, #1
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 f95c 	bl	8002eac <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	220c      	movs	r2, #12
 8002bfa:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	f003 0320 	and.w	r3, r3, #32
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d004      	beq.n	8002c10 <HAL_ADC_IRQHandler+0x198>
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	f003 0320 	and.w	r3, r3, #32
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d10b      	bne.n	8002c28 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f000 809f 	beq.w	8002d5a <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f000 8099 	beq.w	8002d5a <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c2c:	f003 0310 	and.w	r3, r3, #16
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d105      	bne.n	8002c40 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c38:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7ff faf3 	bl	8002230 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002c4a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7ff faae 	bl	80021b2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002c56:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a11      	ldr	r2, [pc, #68]	; (8002ca4 <HAL_ADC_IRQHandler+0x22c>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d002      	beq.n	8002c68 <HAL_ADC_IRQHandler+0x1f0>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	e000      	b.n	8002c6a <HAL_ADC_IRQHandler+0x1f2>
 8002c68:	4b0f      	ldr	r3, [pc, #60]	; (8002ca8 <HAL_ADC_IRQHandler+0x230>)
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	6812      	ldr	r2, [r2, #0]
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d008      	beq.n	8002c84 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d005      	beq.n	8002c84 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	2b06      	cmp	r3, #6
 8002c7c:	d002      	beq.n	8002c84 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	2b07      	cmp	r3, #7
 8002c82:	d104      	bne.n	8002c8e <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	623b      	str	r3, [r7, #32]
 8002c8c:	e013      	b.n	8002cb6 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a04      	ldr	r2, [pc, #16]	; (8002ca4 <HAL_ADC_IRQHandler+0x22c>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d009      	beq.n	8002cac <HAL_ADC_IRQHandler+0x234>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	e007      	b.n	8002cae <HAL_ADC_IRQHandler+0x236>
 8002c9e:	bf00      	nop
 8002ca0:	50040300 	.word	0x50040300
 8002ca4:	50040100 	.word	0x50040100
 8002ca8:	50040000 	.word	0x50040000
 8002cac:	4b7d      	ldr	r3, [pc, #500]	; (8002ea4 <HAL_ADC_IRQHandler+0x42c>)
 8002cae:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d047      	beq.n	8002d4c <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002cbc:	6a3b      	ldr	r3, [r7, #32]
 8002cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d007      	beq.n	8002cd6 <HAL_ADC_IRQHandler+0x25e>
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d03f      	beq.n	8002d4c <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002ccc:	6a3b      	ldr	r3, [r7, #32]
 8002cce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d13a      	bne.n	8002d4c <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ce0:	2b40      	cmp	r3, #64	; 0x40
 8002ce2:	d133      	bne.n	8002d4c <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002ce4:	6a3b      	ldr	r3, [r7, #32]
 8002ce6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d12e      	bne.n	8002d4c <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7ff fbb6 	bl	8002464 <LL_ADC_INJ_IsConversionOngoing>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d11a      	bne.n	8002d34 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	685a      	ldr	r2, [r3, #4]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d0c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d112      	bne.n	8002d4c <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d2a:	f043 0201 	orr.w	r2, r3, #1
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	655a      	str	r2, [r3, #84]	; 0x54
 8002d32:	e00b      	b.n	8002d4c <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d38:	f043 0210 	orr.w	r2, r3, #16
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d44:	f043 0201 	orr.w	r2, r3, #1
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 fd43 	bl	80037d8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2260      	movs	r2, #96	; 0x60
 8002d58:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d011      	beq.n	8002d88 <HAL_ADC_IRQHandler+0x310>
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00c      	beq.n	8002d88 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d72:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 f8a0 	bl	8002ec0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2280      	movs	r2, #128	; 0x80
 8002d86:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d012      	beq.n	8002db8 <HAL_ADC_IRQHandler+0x340>
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d00d      	beq.n	8002db8 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f000 fd29 	bl	8003800 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002db6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d012      	beq.n	8002de8 <HAL_ADC_IRQHandler+0x370>
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00d      	beq.n	8002de8 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f000 fd1b 	bl	8003814 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002de6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	f003 0310 	and.w	r3, r3, #16
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d036      	beq.n	8002e60 <HAL_ADC_IRQHandler+0x3e8>
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	f003 0310 	and.w	r3, r3, #16
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d031      	beq.n	8002e60 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d102      	bne.n	8002e0a <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8002e04:	2301      	movs	r3, #1
 8002e06:	627b      	str	r3, [r7, #36]	; 0x24
 8002e08:	e014      	b.n	8002e34 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d008      	beq.n	8002e22 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002e10:	4825      	ldr	r0, [pc, #148]	; (8002ea8 <HAL_ADC_IRQHandler+0x430>)
 8002e12:	f7ff fa7d 	bl	8002310 <LL_ADC_GetMultiDMATransfer>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d00b      	beq.n	8002e34 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e20:	e008      	b.n	8002e34 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	f003 0301 	and.w	r3, r3, #1
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002e30:	2301      	movs	r3, #1
 8002e32:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d10e      	bne.n	8002e58 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e3e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e4a:	f043 0202 	orr.w	r2, r3, #2
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 f83e 	bl	8002ed4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2210      	movs	r2, #16
 8002e5e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d018      	beq.n	8002e9c <HAL_ADC_IRQHandler+0x424>
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d013      	beq.n	8002e9c <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e78:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e84:	f043 0208 	orr.w	r2, r3, #8
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e94:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 fca8 	bl	80037ec <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002e9c:	bf00      	nop
 8002e9e:	3728      	adds	r7, #40	; 0x28
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	50040000 	.word	0x50040000
 8002ea8:	50040300 	.word	0x50040300

08002eac <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b0b6      	sub	sp, #216	; 0xd8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d101      	bne.n	8002f0a <HAL_ADC_ConfigChannel+0x22>
 8002f06:	2302      	movs	r3, #2
 8002f08:	e3c7      	b.n	800369a <HAL_ADC_ConfigChannel+0x7b2>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7ff fa91 	bl	800243e <LL_ADC_REG_IsConversionOngoing>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f040 83a8 	bne.w	8003674 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	2b05      	cmp	r3, #5
 8002f2a:	d824      	bhi.n	8002f76 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	3b02      	subs	r3, #2
 8002f32:	2b03      	cmp	r3, #3
 8002f34:	d81b      	bhi.n	8002f6e <HAL_ADC_ConfigChannel+0x86>
 8002f36:	a201      	add	r2, pc, #4	; (adr r2, 8002f3c <HAL_ADC_ConfigChannel+0x54>)
 8002f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f3c:	08002f4d 	.word	0x08002f4d
 8002f40:	08002f55 	.word	0x08002f55
 8002f44:	08002f5d 	.word	0x08002f5d
 8002f48:	08002f65 	.word	0x08002f65
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	220c      	movs	r2, #12
 8002f50:	605a      	str	r2, [r3, #4]
          break;
 8002f52:	e011      	b.n	8002f78 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	2212      	movs	r2, #18
 8002f58:	605a      	str	r2, [r3, #4]
          break;
 8002f5a:	e00d      	b.n	8002f78 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	2218      	movs	r2, #24
 8002f60:	605a      	str	r2, [r3, #4]
          break;
 8002f62:	e009      	b.n	8002f78 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f6a:	605a      	str	r2, [r3, #4]
          break;
 8002f6c:	e004      	b.n	8002f78 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	2206      	movs	r2, #6
 8002f72:	605a      	str	r2, [r3, #4]
          break;
 8002f74:	e000      	b.n	8002f78 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002f76:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6818      	ldr	r0, [r3, #0]
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	6859      	ldr	r1, [r3, #4]
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	461a      	mov	r2, r3
 8002f86:	f7ff f927 	bl	80021d8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7ff fa55 	bl	800243e <LL_ADC_REG_IsConversionOngoing>
 8002f94:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7ff fa61 	bl	8002464 <LL_ADC_INJ_IsConversionOngoing>
 8002fa2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002fa6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f040 81a6 	bne.w	80032fc <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002fb0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f040 81a1 	bne.w	80032fc <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6818      	ldr	r0, [r3, #0]
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	6819      	ldr	r1, [r3, #0]
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	f7ff f945 	bl	8002256 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	695a      	ldr	r2, [r3, #20]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	08db      	lsrs	r3, r3, #3
 8002fd8:	f003 0303 	and.w	r3, r3, #3
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	2b04      	cmp	r3, #4
 8002fec:	d00a      	beq.n	8003004 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6818      	ldr	r0, [r3, #0]
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	6919      	ldr	r1, [r3, #16]
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002ffe:	f7ff f883 	bl	8002108 <LL_ADC_SetOffset>
 8003002:	e17b      	b.n	80032fc <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2100      	movs	r1, #0
 800300a:	4618      	mov	r0, r3
 800300c:	f7ff f8a0 	bl	8002150 <LL_ADC_GetOffsetChannel>
 8003010:	4603      	mov	r3, r0
 8003012:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10a      	bne.n	8003030 <HAL_ADC_ConfigChannel+0x148>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2100      	movs	r1, #0
 8003020:	4618      	mov	r0, r3
 8003022:	f7ff f895 	bl	8002150 <LL_ADC_GetOffsetChannel>
 8003026:	4603      	mov	r3, r0
 8003028:	0e9b      	lsrs	r3, r3, #26
 800302a:	f003 021f 	and.w	r2, r3, #31
 800302e:	e01e      	b.n	800306e <HAL_ADC_ConfigChannel+0x186>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2100      	movs	r1, #0
 8003036:	4618      	mov	r0, r3
 8003038:	f7ff f88a 	bl	8002150 <LL_ADC_GetOffsetChannel>
 800303c:	4603      	mov	r3, r0
 800303e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003042:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003046:	fa93 f3a3 	rbit	r3, r3
 800304a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800304e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003052:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003056:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800305e:	2320      	movs	r3, #32
 8003060:	e004      	b.n	800306c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8003062:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003066:	fab3 f383 	clz	r3, r3
 800306a:	b2db      	uxtb	r3, r3
 800306c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003076:	2b00      	cmp	r3, #0
 8003078:	d105      	bne.n	8003086 <HAL_ADC_ConfigChannel+0x19e>
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	0e9b      	lsrs	r3, r3, #26
 8003080:	f003 031f 	and.w	r3, r3, #31
 8003084:	e018      	b.n	80030b8 <HAL_ADC_ConfigChannel+0x1d0>
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003092:	fa93 f3a3 	rbit	r3, r3
 8003096:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800309a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800309e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80030a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80030aa:	2320      	movs	r3, #32
 80030ac:	e004      	b.n	80030b8 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80030ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80030b2:	fab3 f383 	clz	r3, r3
 80030b6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d106      	bne.n	80030ca <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2200      	movs	r2, #0
 80030c2:	2100      	movs	r1, #0
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7ff f859 	bl	800217c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2101      	movs	r1, #1
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7ff f83d 	bl	8002150 <LL_ADC_GetOffsetChannel>
 80030d6:	4603      	mov	r3, r0
 80030d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d10a      	bne.n	80030f6 <HAL_ADC_ConfigChannel+0x20e>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2101      	movs	r1, #1
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7ff f832 	bl	8002150 <LL_ADC_GetOffsetChannel>
 80030ec:	4603      	mov	r3, r0
 80030ee:	0e9b      	lsrs	r3, r3, #26
 80030f0:	f003 021f 	and.w	r2, r3, #31
 80030f4:	e01e      	b.n	8003134 <HAL_ADC_ConfigChannel+0x24c>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2101      	movs	r1, #1
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7ff f827 	bl	8002150 <LL_ADC_GetOffsetChannel>
 8003102:	4603      	mov	r3, r0
 8003104:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003108:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800310c:	fa93 f3a3 	rbit	r3, r3
 8003110:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003114:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003118:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800311c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003120:	2b00      	cmp	r3, #0
 8003122:	d101      	bne.n	8003128 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8003124:	2320      	movs	r3, #32
 8003126:	e004      	b.n	8003132 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8003128:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800312c:	fab3 f383 	clz	r3, r3
 8003130:	b2db      	uxtb	r3, r3
 8003132:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800313c:	2b00      	cmp	r3, #0
 800313e:	d105      	bne.n	800314c <HAL_ADC_ConfigChannel+0x264>
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	0e9b      	lsrs	r3, r3, #26
 8003146:	f003 031f 	and.w	r3, r3, #31
 800314a:	e018      	b.n	800317e <HAL_ADC_ConfigChannel+0x296>
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003154:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003158:	fa93 f3a3 	rbit	r3, r3
 800315c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003160:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003164:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003168:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800316c:	2b00      	cmp	r3, #0
 800316e:	d101      	bne.n	8003174 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8003170:	2320      	movs	r3, #32
 8003172:	e004      	b.n	800317e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8003174:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003178:	fab3 f383 	clz	r3, r3
 800317c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800317e:	429a      	cmp	r2, r3
 8003180:	d106      	bne.n	8003190 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2200      	movs	r2, #0
 8003188:	2101      	movs	r1, #1
 800318a:	4618      	mov	r0, r3
 800318c:	f7fe fff6 	bl	800217c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2102      	movs	r1, #2
 8003196:	4618      	mov	r0, r3
 8003198:	f7fe ffda 	bl	8002150 <LL_ADC_GetOffsetChannel>
 800319c:	4603      	mov	r3, r0
 800319e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d10a      	bne.n	80031bc <HAL_ADC_ConfigChannel+0x2d4>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2102      	movs	r1, #2
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7fe ffcf 	bl	8002150 <LL_ADC_GetOffsetChannel>
 80031b2:	4603      	mov	r3, r0
 80031b4:	0e9b      	lsrs	r3, r3, #26
 80031b6:	f003 021f 	and.w	r2, r3, #31
 80031ba:	e01e      	b.n	80031fa <HAL_ADC_ConfigChannel+0x312>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2102      	movs	r1, #2
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7fe ffc4 	bl	8002150 <LL_ADC_GetOffsetChannel>
 80031c8:	4603      	mov	r3, r0
 80031ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031d2:	fa93 f3a3 	rbit	r3, r3
 80031d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80031da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80031de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80031e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d101      	bne.n	80031ee <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80031ea:	2320      	movs	r3, #32
 80031ec:	e004      	b.n	80031f8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80031ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80031f2:	fab3 f383 	clz	r3, r3
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003202:	2b00      	cmp	r3, #0
 8003204:	d105      	bne.n	8003212 <HAL_ADC_ConfigChannel+0x32a>
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	0e9b      	lsrs	r3, r3, #26
 800320c:	f003 031f 	and.w	r3, r3, #31
 8003210:	e016      	b.n	8003240 <HAL_ADC_ConfigChannel+0x358>
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800321a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800321e:	fa93 f3a3 	rbit	r3, r3
 8003222:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003224:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003226:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800322a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8003232:	2320      	movs	r3, #32
 8003234:	e004      	b.n	8003240 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8003236:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800323a:	fab3 f383 	clz	r3, r3
 800323e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003240:	429a      	cmp	r2, r3
 8003242:	d106      	bne.n	8003252 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2200      	movs	r2, #0
 800324a:	2102      	movs	r1, #2
 800324c:	4618      	mov	r0, r3
 800324e:	f7fe ff95 	bl	800217c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2103      	movs	r1, #3
 8003258:	4618      	mov	r0, r3
 800325a:	f7fe ff79 	bl	8002150 <LL_ADC_GetOffsetChannel>
 800325e:	4603      	mov	r3, r0
 8003260:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003264:	2b00      	cmp	r3, #0
 8003266:	d10a      	bne.n	800327e <HAL_ADC_ConfigChannel+0x396>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2103      	movs	r1, #3
 800326e:	4618      	mov	r0, r3
 8003270:	f7fe ff6e 	bl	8002150 <LL_ADC_GetOffsetChannel>
 8003274:	4603      	mov	r3, r0
 8003276:	0e9b      	lsrs	r3, r3, #26
 8003278:	f003 021f 	and.w	r2, r3, #31
 800327c:	e017      	b.n	80032ae <HAL_ADC_ConfigChannel+0x3c6>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2103      	movs	r1, #3
 8003284:	4618      	mov	r0, r3
 8003286:	f7fe ff63 	bl	8002150 <LL_ADC_GetOffsetChannel>
 800328a:	4603      	mov	r3, r0
 800328c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003290:	fa93 f3a3 	rbit	r3, r3
 8003294:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003296:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003298:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800329a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800329c:	2b00      	cmp	r3, #0
 800329e:	d101      	bne.n	80032a4 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80032a0:	2320      	movs	r3, #32
 80032a2:	e003      	b.n	80032ac <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80032a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032a6:	fab3 f383 	clz	r3, r3
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d105      	bne.n	80032c6 <HAL_ADC_ConfigChannel+0x3de>
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	0e9b      	lsrs	r3, r3, #26
 80032c0:	f003 031f 	and.w	r3, r3, #31
 80032c4:	e011      	b.n	80032ea <HAL_ADC_ConfigChannel+0x402>
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032ce:	fa93 f3a3 	rbit	r3, r3
 80032d2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80032d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032d6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80032d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80032de:	2320      	movs	r3, #32
 80032e0:	e003      	b.n	80032ea <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80032e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032e4:	fab3 f383 	clz	r3, r3
 80032e8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d106      	bne.n	80032fc <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2200      	movs	r2, #0
 80032f4:	2103      	movs	r1, #3
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7fe ff40 	bl	800217c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4618      	mov	r0, r3
 8003302:	f7ff f875 	bl	80023f0 <LL_ADC_IsEnabled>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	f040 813f 	bne.w	800358c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6818      	ldr	r0, [r3, #0]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	6819      	ldr	r1, [r3, #0]
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	461a      	mov	r2, r3
 800331c:	f7fe ffc6 	bl	80022ac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	4a8e      	ldr	r2, [pc, #568]	; (8003560 <HAL_ADC_ConfigChannel+0x678>)
 8003326:	4293      	cmp	r3, r2
 8003328:	f040 8130 	bne.w	800358c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003338:	2b00      	cmp	r3, #0
 800333a:	d10b      	bne.n	8003354 <HAL_ADC_ConfigChannel+0x46c>
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	0e9b      	lsrs	r3, r3, #26
 8003342:	3301      	adds	r3, #1
 8003344:	f003 031f 	and.w	r3, r3, #31
 8003348:	2b09      	cmp	r3, #9
 800334a:	bf94      	ite	ls
 800334c:	2301      	movls	r3, #1
 800334e:	2300      	movhi	r3, #0
 8003350:	b2db      	uxtb	r3, r3
 8003352:	e019      	b.n	8003388 <HAL_ADC_ConfigChannel+0x4a0>
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800335a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800335c:	fa93 f3a3 	rbit	r3, r3
 8003360:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003362:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003364:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003366:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003368:	2b00      	cmp	r3, #0
 800336a:	d101      	bne.n	8003370 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800336c:	2320      	movs	r3, #32
 800336e:	e003      	b.n	8003378 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003370:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003372:	fab3 f383 	clz	r3, r3
 8003376:	b2db      	uxtb	r3, r3
 8003378:	3301      	adds	r3, #1
 800337a:	f003 031f 	and.w	r3, r3, #31
 800337e:	2b09      	cmp	r3, #9
 8003380:	bf94      	ite	ls
 8003382:	2301      	movls	r3, #1
 8003384:	2300      	movhi	r3, #0
 8003386:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003388:	2b00      	cmp	r3, #0
 800338a:	d079      	beq.n	8003480 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003394:	2b00      	cmp	r3, #0
 8003396:	d107      	bne.n	80033a8 <HAL_ADC_ConfigChannel+0x4c0>
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	0e9b      	lsrs	r3, r3, #26
 800339e:	3301      	adds	r3, #1
 80033a0:	069b      	lsls	r3, r3, #26
 80033a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033a6:	e015      	b.n	80033d4 <HAL_ADC_ConfigChannel+0x4ec>
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033b0:	fa93 f3a3 	rbit	r3, r3
 80033b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80033b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033b8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80033ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d101      	bne.n	80033c4 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80033c0:	2320      	movs	r3, #32
 80033c2:	e003      	b.n	80033cc <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80033c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033c6:	fab3 f383 	clz	r3, r3
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	3301      	adds	r3, #1
 80033ce:	069b      	lsls	r3, r3, #26
 80033d0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d109      	bne.n	80033f4 <HAL_ADC_ConfigChannel+0x50c>
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	0e9b      	lsrs	r3, r3, #26
 80033e6:	3301      	adds	r3, #1
 80033e8:	f003 031f 	and.w	r3, r3, #31
 80033ec:	2101      	movs	r1, #1
 80033ee:	fa01 f303 	lsl.w	r3, r1, r3
 80033f2:	e017      	b.n	8003424 <HAL_ADC_ConfigChannel+0x53c>
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033fc:	fa93 f3a3 	rbit	r3, r3
 8003400:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003402:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003404:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003406:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003408:	2b00      	cmp	r3, #0
 800340a:	d101      	bne.n	8003410 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 800340c:	2320      	movs	r3, #32
 800340e:	e003      	b.n	8003418 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8003410:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003412:	fab3 f383 	clz	r3, r3
 8003416:	b2db      	uxtb	r3, r3
 8003418:	3301      	adds	r3, #1
 800341a:	f003 031f 	and.w	r3, r3, #31
 800341e:	2101      	movs	r1, #1
 8003420:	fa01 f303 	lsl.w	r3, r1, r3
 8003424:	ea42 0103 	orr.w	r1, r2, r3
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003430:	2b00      	cmp	r3, #0
 8003432:	d10a      	bne.n	800344a <HAL_ADC_ConfigChannel+0x562>
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	0e9b      	lsrs	r3, r3, #26
 800343a:	3301      	adds	r3, #1
 800343c:	f003 021f 	and.w	r2, r3, #31
 8003440:	4613      	mov	r3, r2
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	4413      	add	r3, r2
 8003446:	051b      	lsls	r3, r3, #20
 8003448:	e018      	b.n	800347c <HAL_ADC_ConfigChannel+0x594>
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003452:	fa93 f3a3 	rbit	r3, r3
 8003456:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800345a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800345c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8003462:	2320      	movs	r3, #32
 8003464:	e003      	b.n	800346e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8003466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003468:	fab3 f383 	clz	r3, r3
 800346c:	b2db      	uxtb	r3, r3
 800346e:	3301      	adds	r3, #1
 8003470:	f003 021f 	and.w	r2, r3, #31
 8003474:	4613      	mov	r3, r2
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	4413      	add	r3, r2
 800347a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800347c:	430b      	orrs	r3, r1
 800347e:	e080      	b.n	8003582 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003488:	2b00      	cmp	r3, #0
 800348a:	d107      	bne.n	800349c <HAL_ADC_ConfigChannel+0x5b4>
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	0e9b      	lsrs	r3, r3, #26
 8003492:	3301      	adds	r3, #1
 8003494:	069b      	lsls	r3, r3, #26
 8003496:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800349a:	e015      	b.n	80034c8 <HAL_ADC_ConfigChannel+0x5e0>
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a4:	fa93 f3a3 	rbit	r3, r3
 80034a8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80034aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ac:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80034ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d101      	bne.n	80034b8 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80034b4:	2320      	movs	r3, #32
 80034b6:	e003      	b.n	80034c0 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80034b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ba:	fab3 f383 	clz	r3, r3
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	3301      	adds	r3, #1
 80034c2:	069b      	lsls	r3, r3, #26
 80034c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d109      	bne.n	80034e8 <HAL_ADC_ConfigChannel+0x600>
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	0e9b      	lsrs	r3, r3, #26
 80034da:	3301      	adds	r3, #1
 80034dc:	f003 031f 	and.w	r3, r3, #31
 80034e0:	2101      	movs	r1, #1
 80034e2:	fa01 f303 	lsl.w	r3, r1, r3
 80034e6:	e017      	b.n	8003518 <HAL_ADC_ConfigChannel+0x630>
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ee:	6a3b      	ldr	r3, [r7, #32]
 80034f0:	fa93 f3a3 	rbit	r3, r3
 80034f4:	61fb      	str	r3, [r7, #28]
  return result;
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80034fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d101      	bne.n	8003504 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8003500:	2320      	movs	r3, #32
 8003502:	e003      	b.n	800350c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8003504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003506:	fab3 f383 	clz	r3, r3
 800350a:	b2db      	uxtb	r3, r3
 800350c:	3301      	adds	r3, #1
 800350e:	f003 031f 	and.w	r3, r3, #31
 8003512:	2101      	movs	r1, #1
 8003514:	fa01 f303 	lsl.w	r3, r1, r3
 8003518:	ea42 0103 	orr.w	r1, r2, r3
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003524:	2b00      	cmp	r3, #0
 8003526:	d10d      	bne.n	8003544 <HAL_ADC_ConfigChannel+0x65c>
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	0e9b      	lsrs	r3, r3, #26
 800352e:	3301      	adds	r3, #1
 8003530:	f003 021f 	and.w	r2, r3, #31
 8003534:	4613      	mov	r3, r2
 8003536:	005b      	lsls	r3, r3, #1
 8003538:	4413      	add	r3, r2
 800353a:	3b1e      	subs	r3, #30
 800353c:	051b      	lsls	r3, r3, #20
 800353e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003542:	e01d      	b.n	8003580 <HAL_ADC_ConfigChannel+0x698>
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	fa93 f3a3 	rbit	r3, r3
 8003550:	613b      	str	r3, [r7, #16]
  return result;
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d103      	bne.n	8003564 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 800355c:	2320      	movs	r3, #32
 800355e:	e005      	b.n	800356c <HAL_ADC_ConfigChannel+0x684>
 8003560:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	fab3 f383 	clz	r3, r3
 800356a:	b2db      	uxtb	r3, r3
 800356c:	3301      	adds	r3, #1
 800356e:	f003 021f 	and.w	r2, r3, #31
 8003572:	4613      	mov	r3, r2
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	4413      	add	r3, r2
 8003578:	3b1e      	subs	r3, #30
 800357a:	051b      	lsls	r3, r3, #20
 800357c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003580:	430b      	orrs	r3, r1
 8003582:	683a      	ldr	r2, [r7, #0]
 8003584:	6892      	ldr	r2, [r2, #8]
 8003586:	4619      	mov	r1, r3
 8003588:	f7fe fe65 	bl	8002256 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	4b44      	ldr	r3, [pc, #272]	; (80036a4 <HAL_ADC_ConfigChannel+0x7bc>)
 8003592:	4013      	ands	r3, r2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d07a      	beq.n	800368e <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003598:	4843      	ldr	r0, [pc, #268]	; (80036a8 <HAL_ADC_ConfigChannel+0x7c0>)
 800359a:	f7fe fda7 	bl	80020ec <LL_ADC_GetCommonPathInternalCh>
 800359e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a41      	ldr	r2, [pc, #260]	; (80036ac <HAL_ADC_ConfigChannel+0x7c4>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d12c      	bne.n	8003606 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80035ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d126      	bne.n	8003606 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a3c      	ldr	r2, [pc, #240]	; (80036b0 <HAL_ADC_ConfigChannel+0x7c8>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d004      	beq.n	80035cc <HAL_ADC_ConfigChannel+0x6e4>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a3b      	ldr	r2, [pc, #236]	; (80036b4 <HAL_ADC_ConfigChannel+0x7cc>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d15d      	bne.n	8003688 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80035d4:	4619      	mov	r1, r3
 80035d6:	4834      	ldr	r0, [pc, #208]	; (80036a8 <HAL_ADC_ConfigChannel+0x7c0>)
 80035d8:	f7fe fd75 	bl	80020c6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035dc:	4b36      	ldr	r3, [pc, #216]	; (80036b8 <HAL_ADC_ConfigChannel+0x7d0>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	099b      	lsrs	r3, r3, #6
 80035e2:	4a36      	ldr	r2, [pc, #216]	; (80036bc <HAL_ADC_ConfigChannel+0x7d4>)
 80035e4:	fba2 2303 	umull	r2, r3, r2, r3
 80035e8:	099b      	lsrs	r3, r3, #6
 80035ea:	1c5a      	adds	r2, r3, #1
 80035ec:	4613      	mov	r3, r2
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	4413      	add	r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80035f6:	e002      	b.n	80035fe <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	3b01      	subs	r3, #1
 80035fc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d1f9      	bne.n	80035f8 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003604:	e040      	b.n	8003688 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a2d      	ldr	r2, [pc, #180]	; (80036c0 <HAL_ADC_ConfigChannel+0x7d8>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d118      	bne.n	8003642 <HAL_ADC_ConfigChannel+0x75a>
 8003610:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003614:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d112      	bne.n	8003642 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a23      	ldr	r2, [pc, #140]	; (80036b0 <HAL_ADC_ConfigChannel+0x7c8>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d004      	beq.n	8003630 <HAL_ADC_ConfigChannel+0x748>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a22      	ldr	r2, [pc, #136]	; (80036b4 <HAL_ADC_ConfigChannel+0x7cc>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d12d      	bne.n	800368c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003630:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003634:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003638:	4619      	mov	r1, r3
 800363a:	481b      	ldr	r0, [pc, #108]	; (80036a8 <HAL_ADC_ConfigChannel+0x7c0>)
 800363c:	f7fe fd43 	bl	80020c6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003640:	e024      	b.n	800368c <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a1f      	ldr	r2, [pc, #124]	; (80036c4 <HAL_ADC_ConfigChannel+0x7dc>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d120      	bne.n	800368e <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800364c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003650:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d11a      	bne.n	800368e <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a14      	ldr	r2, [pc, #80]	; (80036b0 <HAL_ADC_ConfigChannel+0x7c8>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d115      	bne.n	800368e <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003662:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003666:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800366a:	4619      	mov	r1, r3
 800366c:	480e      	ldr	r0, [pc, #56]	; (80036a8 <HAL_ADC_ConfigChannel+0x7c0>)
 800366e:	f7fe fd2a 	bl	80020c6 <LL_ADC_SetCommonPathInternalCh>
 8003672:	e00c      	b.n	800368e <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003678:	f043 0220 	orr.w	r2, r3, #32
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003686:	e002      	b.n	800368e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003688:	bf00      	nop
 800368a:	e000      	b.n	800368e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800368c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003696:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800369a:	4618      	mov	r0, r3
 800369c:	37d8      	adds	r7, #216	; 0xd8
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	80080000 	.word	0x80080000
 80036a8:	50040300 	.word	0x50040300
 80036ac:	c7520000 	.word	0xc7520000
 80036b0:	50040000 	.word	0x50040000
 80036b4:	50040200 	.word	0x50040200
 80036b8:	20000004 	.word	0x20000004
 80036bc:	053e2d63 	.word	0x053e2d63
 80036c0:	cb840000 	.word	0xcb840000
 80036c4:	80000001 	.word	0x80000001

080036c8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7fe fe8b 	bl	80023f0 <LL_ADC_IsEnabled>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d14d      	bne.n	800377c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	689a      	ldr	r2, [r3, #8]
 80036e6:	4b28      	ldr	r3, [pc, #160]	; (8003788 <ADC_Enable+0xc0>)
 80036e8:	4013      	ands	r3, r2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00d      	beq.n	800370a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f2:	f043 0210 	orr.w	r2, r3, #16
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036fe:	f043 0201 	orr.w	r2, r3, #1
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e039      	b.n	800377e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4618      	mov	r0, r3
 8003710:	f7fe fe5a 	bl	80023c8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003714:	f7fe fc94 	bl	8002040 <HAL_GetTick>
 8003718:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800371a:	e028      	b.n	800376e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4618      	mov	r0, r3
 8003722:	f7fe fe65 	bl	80023f0 <LL_ADC_IsEnabled>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d104      	bne.n	8003736 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4618      	mov	r0, r3
 8003732:	f7fe fe49 	bl	80023c8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003736:	f7fe fc83 	bl	8002040 <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	2b02      	cmp	r3, #2
 8003742:	d914      	bls.n	800376e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	2b01      	cmp	r3, #1
 8003750:	d00d      	beq.n	800376e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003756:	f043 0210 	orr.w	r2, r3, #16
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003762:	f043 0201 	orr.w	r2, r3, #1
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e007      	b.n	800377e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0301 	and.w	r3, r3, #1
 8003778:	2b01      	cmp	r3, #1
 800377a:	d1cf      	bne.n	800371c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3710      	adds	r7, #16
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	8000003f 	.word	0x8000003f

0800378c <LL_ADC_IsEnabled>:
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f003 0301 	and.w	r3, r3, #1
 800379c:	2b01      	cmp	r3, #1
 800379e:	d101      	bne.n	80037a4 <LL_ADC_IsEnabled+0x18>
 80037a0:	2301      	movs	r3, #1
 80037a2:	e000      	b.n	80037a6 <LL_ADC_IsEnabled+0x1a>
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr

080037b2 <LL_ADC_REG_IsConversionOngoing>:
{
 80037b2:	b480      	push	{r7}
 80037b4:	b083      	sub	sp, #12
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f003 0304 	and.w	r3, r3, #4
 80037c2:	2b04      	cmp	r3, #4
 80037c4:	d101      	bne.n	80037ca <LL_ADC_REG_IsConversionOngoing+0x18>
 80037c6:	2301      	movs	r3, #1
 80037c8:	e000      	b.n	80037cc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80037ca:	2300      	movs	r3, #0
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80037f4:	bf00      	nop
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800383c:	b590      	push	{r4, r7, lr}
 800383e:	b09f      	sub	sp, #124	; 0x7c
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003846:	2300      	movs	r3, #0
 8003848:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003852:	2b01      	cmp	r3, #1
 8003854:	d101      	bne.n	800385a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003856:	2302      	movs	r3, #2
 8003858:	e093      	b.n	8003982 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2201      	movs	r2, #1
 800385e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003862:	2300      	movs	r3, #0
 8003864:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003866:	2300      	movs	r3, #0
 8003868:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a47      	ldr	r2, [pc, #284]	; (800398c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d102      	bne.n	800387a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003874:	4b46      	ldr	r3, [pc, #280]	; (8003990 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003876:	60bb      	str	r3, [r7, #8]
 8003878:	e001      	b.n	800387e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800387a:	2300      	movs	r3, #0
 800387c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d10b      	bne.n	800389c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003888:	f043 0220 	orr.w	r2, r3, #32
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e072      	b.n	8003982 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	4618      	mov	r0, r3
 80038a0:	f7ff ff87 	bl	80037b2 <LL_ADC_REG_IsConversionOngoing>
 80038a4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7ff ff81 	bl	80037b2 <LL_ADC_REG_IsConversionOngoing>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d154      	bne.n	8003960 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80038b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d151      	bne.n	8003960 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80038bc:	4b35      	ldr	r3, [pc, #212]	; (8003994 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80038be:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d02c      	beq.n	8003922 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80038c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	6859      	ldr	r1, [r3, #4]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80038da:	035b      	lsls	r3, r3, #13
 80038dc:	430b      	orrs	r3, r1
 80038de:	431a      	orrs	r2, r3
 80038e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038e2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80038e4:	4829      	ldr	r0, [pc, #164]	; (800398c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80038e6:	f7ff ff51 	bl	800378c <LL_ADC_IsEnabled>
 80038ea:	4604      	mov	r4, r0
 80038ec:	4828      	ldr	r0, [pc, #160]	; (8003990 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80038ee:	f7ff ff4d 	bl	800378c <LL_ADC_IsEnabled>
 80038f2:	4603      	mov	r3, r0
 80038f4:	431c      	orrs	r4, r3
 80038f6:	4828      	ldr	r0, [pc, #160]	; (8003998 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80038f8:	f7ff ff48 	bl	800378c <LL_ADC_IsEnabled>
 80038fc:	4603      	mov	r3, r0
 80038fe:	4323      	orrs	r3, r4
 8003900:	2b00      	cmp	r3, #0
 8003902:	d137      	bne.n	8003974 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003904:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800390c:	f023 030f 	bic.w	r3, r3, #15
 8003910:	683a      	ldr	r2, [r7, #0]
 8003912:	6811      	ldr	r1, [r2, #0]
 8003914:	683a      	ldr	r2, [r7, #0]
 8003916:	6892      	ldr	r2, [r2, #8]
 8003918:	430a      	orrs	r2, r1
 800391a:	431a      	orrs	r2, r3
 800391c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800391e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003920:	e028      	b.n	8003974 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003922:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800392a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800392c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800392e:	4817      	ldr	r0, [pc, #92]	; (800398c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003930:	f7ff ff2c 	bl	800378c <LL_ADC_IsEnabled>
 8003934:	4604      	mov	r4, r0
 8003936:	4816      	ldr	r0, [pc, #88]	; (8003990 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003938:	f7ff ff28 	bl	800378c <LL_ADC_IsEnabled>
 800393c:	4603      	mov	r3, r0
 800393e:	431c      	orrs	r4, r3
 8003940:	4815      	ldr	r0, [pc, #84]	; (8003998 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003942:	f7ff ff23 	bl	800378c <LL_ADC_IsEnabled>
 8003946:	4603      	mov	r3, r0
 8003948:	4323      	orrs	r3, r4
 800394a:	2b00      	cmp	r3, #0
 800394c:	d112      	bne.n	8003974 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800394e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003956:	f023 030f 	bic.w	r3, r3, #15
 800395a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800395c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800395e:	e009      	b.n	8003974 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003964:	f043 0220 	orr.w	r2, r3, #32
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003972:	e000      	b.n	8003976 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003974:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800397e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003982:	4618      	mov	r0, r3
 8003984:	377c      	adds	r7, #124	; 0x7c
 8003986:	46bd      	mov	sp, r7
 8003988:	bd90      	pop	{r4, r7, pc}
 800398a:	bf00      	nop
 800398c:	50040000 	.word	0x50040000
 8003990:	50040100 	.word	0x50040100
 8003994:	50040300 	.word	0x50040300
 8003998:	50040200 	.word	0x50040200

0800399c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f003 0307 	and.w	r3, r3, #7
 80039aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039ac:	4b0c      	ldr	r3, [pc, #48]	; (80039e0 <__NVIC_SetPriorityGrouping+0x44>)
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039b8:	4013      	ands	r3, r2
 80039ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039ce:	4a04      	ldr	r2, [pc, #16]	; (80039e0 <__NVIC_SetPriorityGrouping+0x44>)
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	60d3      	str	r3, [r2, #12]
}
 80039d4:	bf00      	nop
 80039d6:	3714      	adds	r7, #20
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr
 80039e0:	e000ed00 	.word	0xe000ed00

080039e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039e4:	b480      	push	{r7}
 80039e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039e8:	4b04      	ldr	r3, [pc, #16]	; (80039fc <__NVIC_GetPriorityGrouping+0x18>)
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	0a1b      	lsrs	r3, r3, #8
 80039ee:	f003 0307 	and.w	r3, r3, #7
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr
 80039fc:	e000ed00 	.word	0xe000ed00

08003a00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	4603      	mov	r3, r0
 8003a08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	db0b      	blt.n	8003a2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a12:	79fb      	ldrb	r3, [r7, #7]
 8003a14:	f003 021f 	and.w	r2, r3, #31
 8003a18:	4907      	ldr	r1, [pc, #28]	; (8003a38 <__NVIC_EnableIRQ+0x38>)
 8003a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a1e:	095b      	lsrs	r3, r3, #5
 8003a20:	2001      	movs	r0, #1
 8003a22:	fa00 f202 	lsl.w	r2, r0, r2
 8003a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a2a:	bf00      	nop
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	e000e100 	.word	0xe000e100

08003a3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	4603      	mov	r3, r0
 8003a44:	6039      	str	r1, [r7, #0]
 8003a46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	db0a      	blt.n	8003a66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	b2da      	uxtb	r2, r3
 8003a54:	490c      	ldr	r1, [pc, #48]	; (8003a88 <__NVIC_SetPriority+0x4c>)
 8003a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a5a:	0112      	lsls	r2, r2, #4
 8003a5c:	b2d2      	uxtb	r2, r2
 8003a5e:	440b      	add	r3, r1
 8003a60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a64:	e00a      	b.n	8003a7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	b2da      	uxtb	r2, r3
 8003a6a:	4908      	ldr	r1, [pc, #32]	; (8003a8c <__NVIC_SetPriority+0x50>)
 8003a6c:	79fb      	ldrb	r3, [r7, #7]
 8003a6e:	f003 030f 	and.w	r3, r3, #15
 8003a72:	3b04      	subs	r3, #4
 8003a74:	0112      	lsls	r2, r2, #4
 8003a76:	b2d2      	uxtb	r2, r2
 8003a78:	440b      	add	r3, r1
 8003a7a:	761a      	strb	r2, [r3, #24]
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr
 8003a88:	e000e100 	.word	0xe000e100
 8003a8c:	e000ed00 	.word	0xe000ed00

08003a90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b089      	sub	sp, #36	; 0x24
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f003 0307 	and.w	r3, r3, #7
 8003aa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	f1c3 0307 	rsb	r3, r3, #7
 8003aaa:	2b04      	cmp	r3, #4
 8003aac:	bf28      	it	cs
 8003aae:	2304      	movcs	r3, #4
 8003ab0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	3304      	adds	r3, #4
 8003ab6:	2b06      	cmp	r3, #6
 8003ab8:	d902      	bls.n	8003ac0 <NVIC_EncodePriority+0x30>
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	3b03      	subs	r3, #3
 8003abe:	e000      	b.n	8003ac2 <NVIC_EncodePriority+0x32>
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ace:	43da      	mvns	r2, r3
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	401a      	ands	r2, r3
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ad8:	f04f 31ff 	mov.w	r1, #4294967295
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae2:	43d9      	mvns	r1, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ae8:	4313      	orrs	r3, r2
         );
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3724      	adds	r7, #36	; 0x24
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
	...

08003af8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	3b01      	subs	r3, #1
 8003b04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b08:	d301      	bcc.n	8003b0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e00f      	b.n	8003b2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b0e:	4a0a      	ldr	r2, [pc, #40]	; (8003b38 <SysTick_Config+0x40>)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	3b01      	subs	r3, #1
 8003b14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b16:	210f      	movs	r1, #15
 8003b18:	f04f 30ff 	mov.w	r0, #4294967295
 8003b1c:	f7ff ff8e 	bl	8003a3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b20:	4b05      	ldr	r3, [pc, #20]	; (8003b38 <SysTick_Config+0x40>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b26:	4b04      	ldr	r3, [pc, #16]	; (8003b38 <SysTick_Config+0x40>)
 8003b28:	2207      	movs	r2, #7
 8003b2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3708      	adds	r7, #8
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	e000e010 	.word	0xe000e010

08003b3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f7ff ff29 	bl	800399c <__NVIC_SetPriorityGrouping>
}
 8003b4a:	bf00      	nop
 8003b4c:	3708      	adds	r7, #8
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b086      	sub	sp, #24
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	4603      	mov	r3, r0
 8003b5a:	60b9      	str	r1, [r7, #8]
 8003b5c:	607a      	str	r2, [r7, #4]
 8003b5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003b60:	2300      	movs	r3, #0
 8003b62:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b64:	f7ff ff3e 	bl	80039e4 <__NVIC_GetPriorityGrouping>
 8003b68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	68b9      	ldr	r1, [r7, #8]
 8003b6e:	6978      	ldr	r0, [r7, #20]
 8003b70:	f7ff ff8e 	bl	8003a90 <NVIC_EncodePriority>
 8003b74:	4602      	mov	r2, r0
 8003b76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b7a:	4611      	mov	r1, r2
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f7ff ff5d 	bl	8003a3c <__NVIC_SetPriority>
}
 8003b82:	bf00      	nop
 8003b84:	3718      	adds	r7, #24
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	b082      	sub	sp, #8
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	4603      	mov	r3, r0
 8003b92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f7ff ff31 	bl	8003a00 <__NVIC_EnableIRQ>
}
 8003b9e:	bf00      	nop
 8003ba0:	3708      	adds	r7, #8
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b082      	sub	sp, #8
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f7ff ffa2 	bl	8003af8 <SysTick_Config>
 8003bb4:	4603      	mov	r3, r0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3708      	adds	r7, #8
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
	...

08003bc0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d101      	bne.n	8003bd2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e098      	b.n	8003d04 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	4b4d      	ldr	r3, [pc, #308]	; (8003d10 <HAL_DMA_Init+0x150>)
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d80f      	bhi.n	8003bfe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	461a      	mov	r2, r3
 8003be4:	4b4b      	ldr	r3, [pc, #300]	; (8003d14 <HAL_DMA_Init+0x154>)
 8003be6:	4413      	add	r3, r2
 8003be8:	4a4b      	ldr	r2, [pc, #300]	; (8003d18 <HAL_DMA_Init+0x158>)
 8003bea:	fba2 2303 	umull	r2, r3, r2, r3
 8003bee:	091b      	lsrs	r3, r3, #4
 8003bf0:	009a      	lsls	r2, r3, #2
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a48      	ldr	r2, [pc, #288]	; (8003d1c <HAL_DMA_Init+0x15c>)
 8003bfa:	641a      	str	r2, [r3, #64]	; 0x40
 8003bfc:	e00e      	b.n	8003c1c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	461a      	mov	r2, r3
 8003c04:	4b46      	ldr	r3, [pc, #280]	; (8003d20 <HAL_DMA_Init+0x160>)
 8003c06:	4413      	add	r3, r2
 8003c08:	4a43      	ldr	r2, [pc, #268]	; (8003d18 <HAL_DMA_Init+0x158>)
 8003c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0e:	091b      	lsrs	r3, r3, #4
 8003c10:	009a      	lsls	r2, r3, #2
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a42      	ldr	r2, [pc, #264]	; (8003d24 <HAL_DMA_Init+0x164>)
 8003c1a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2202      	movs	r2, #2
 8003c20:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c36:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003c40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c76:	d039      	beq.n	8003cec <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7c:	4a27      	ldr	r2, [pc, #156]	; (8003d1c <HAL_DMA_Init+0x15c>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d11a      	bne.n	8003cb8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003c82:	4b29      	ldr	r3, [pc, #164]	; (8003d28 <HAL_DMA_Init+0x168>)
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c8a:	f003 031c 	and.w	r3, r3, #28
 8003c8e:	210f      	movs	r1, #15
 8003c90:	fa01 f303 	lsl.w	r3, r1, r3
 8003c94:	43db      	mvns	r3, r3
 8003c96:	4924      	ldr	r1, [pc, #144]	; (8003d28 <HAL_DMA_Init+0x168>)
 8003c98:	4013      	ands	r3, r2
 8003c9a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003c9c:	4b22      	ldr	r3, [pc, #136]	; (8003d28 <HAL_DMA_Init+0x168>)
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6859      	ldr	r1, [r3, #4]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca8:	f003 031c 	and.w	r3, r3, #28
 8003cac:	fa01 f303 	lsl.w	r3, r1, r3
 8003cb0:	491d      	ldr	r1, [pc, #116]	; (8003d28 <HAL_DMA_Init+0x168>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	600b      	str	r3, [r1, #0]
 8003cb6:	e019      	b.n	8003cec <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003cb8:	4b1c      	ldr	r3, [pc, #112]	; (8003d2c <HAL_DMA_Init+0x16c>)
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc0:	f003 031c 	and.w	r3, r3, #28
 8003cc4:	210f      	movs	r1, #15
 8003cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cca:	43db      	mvns	r3, r3
 8003ccc:	4917      	ldr	r1, [pc, #92]	; (8003d2c <HAL_DMA_Init+0x16c>)
 8003cce:	4013      	ands	r3, r2
 8003cd0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003cd2:	4b16      	ldr	r3, [pc, #88]	; (8003d2c <HAL_DMA_Init+0x16c>)
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6859      	ldr	r1, [r3, #4]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cde:	f003 031c 	and.w	r3, r3, #28
 8003ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ce6:	4911      	ldr	r1, [pc, #68]	; (8003d2c <HAL_DMA_Init+0x16c>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003d02:	2300      	movs	r3, #0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3714      	adds	r7, #20
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr
 8003d10:	40020407 	.word	0x40020407
 8003d14:	bffdfff8 	.word	0xbffdfff8
 8003d18:	cccccccd 	.word	0xcccccccd
 8003d1c:	40020000 	.word	0x40020000
 8003d20:	bffdfbf8 	.word	0xbffdfbf8
 8003d24:	40020400 	.word	0x40020400
 8003d28:	400200a8 	.word	0x400200a8
 8003d2c:	400204a8 	.word	0x400204a8

08003d30 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d008      	beq.n	8003d5a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2204      	movs	r2, #4
 8003d4c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e022      	b.n	8003da0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f022 020e 	bic.w	r2, r2, #14
 8003d68:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f022 0201 	bic.w	r2, r2, #1
 8003d78:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d7e:	f003 021c 	and.w	r2, r3, #28
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d86:	2101      	movs	r1, #1
 8003d88:	fa01 f202 	lsl.w	r2, r1, r2
 8003d8c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003d9e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3714      	adds	r7, #20
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003db4:	2300      	movs	r3, #0
 8003db6:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d005      	beq.n	8003dd0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2204      	movs	r2, #4
 8003dc8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	73fb      	strb	r3, [r7, #15]
 8003dce:	e029      	b.n	8003e24 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f022 020e 	bic.w	r2, r2, #14
 8003dde:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f022 0201 	bic.w	r2, r2, #1
 8003dee:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df4:	f003 021c 	and.w	r2, r3, #28
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfc:	2101      	movs	r1, #1
 8003dfe:	fa01 f202 	lsl.w	r2, r1, r2
 8003e02:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d003      	beq.n	8003e24 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	4798      	blx	r3
    }
  }
  return status;
 8003e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}

08003e2e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	b084      	sub	sp, #16
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e4a:	f003 031c 	and.w	r3, r3, #28
 8003e4e:	2204      	movs	r2, #4
 8003e50:	409a      	lsls	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	4013      	ands	r3, r2
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d026      	beq.n	8003ea8 <HAL_DMA_IRQHandler+0x7a>
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	f003 0304 	and.w	r3, r3, #4
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d021      	beq.n	8003ea8 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0320 	and.w	r3, r3, #32
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d107      	bne.n	8003e82 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 0204 	bic.w	r2, r2, #4
 8003e80:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e86:	f003 021c 	and.w	r2, r3, #28
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8e:	2104      	movs	r1, #4
 8003e90:	fa01 f202 	lsl.w	r2, r1, r2
 8003e94:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d071      	beq.n	8003f82 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003ea6:	e06c      	b.n	8003f82 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eac:	f003 031c 	and.w	r3, r3, #28
 8003eb0:	2202      	movs	r2, #2
 8003eb2:	409a      	lsls	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d02e      	beq.n	8003f1a <HAL_DMA_IRQHandler+0xec>
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d029      	beq.n	8003f1a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0320 	and.w	r3, r3, #32
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d10b      	bne.n	8003eec <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f022 020a 	bic.w	r2, r2, #10
 8003ee2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef0:	f003 021c 	and.w	r2, r3, #28
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef8:	2102      	movs	r1, #2
 8003efa:	fa01 f202 	lsl.w	r2, r1, r2
 8003efe:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d038      	beq.n	8003f82 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003f18:	e033      	b.n	8003f82 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f1e:	f003 031c 	and.w	r3, r3, #28
 8003f22:	2208      	movs	r2, #8
 8003f24:	409a      	lsls	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	4013      	ands	r3, r2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d02a      	beq.n	8003f84 <HAL_DMA_IRQHandler+0x156>
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	f003 0308 	and.w	r3, r3, #8
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d025      	beq.n	8003f84 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f022 020e 	bic.w	r2, r2, #14
 8003f46:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f4c:	f003 021c 	and.w	r2, r3, #28
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f54:	2101      	movs	r1, #1
 8003f56:	fa01 f202 	lsl.w	r2, r1, r2
 8003f5a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d004      	beq.n	8003f84 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003f82:	bf00      	nop
 8003f84:	bf00      	nop
}
 8003f86:	3710      	adds	r7, #16
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b087      	sub	sp, #28
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f96:	2300      	movs	r3, #0
 8003f98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f9a:	e17f      	b.n	800429c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	2101      	movs	r1, #1
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fa8:	4013      	ands	r3, r2
 8003faa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	f000 8171 	beq.w	8004296 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f003 0303 	and.w	r3, r3, #3
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d005      	beq.n	8003fcc <HAL_GPIO_Init+0x40>
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f003 0303 	and.w	r3, r3, #3
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d130      	bne.n	800402e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	005b      	lsls	r3, r3, #1
 8003fd6:	2203      	movs	r2, #3
 8003fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fdc:	43db      	mvns	r3, r3
 8003fde:	693a      	ldr	r2, [r7, #16]
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	68da      	ldr	r2, [r3, #12]
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	005b      	lsls	r3, r3, #1
 8003fec:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004002:	2201      	movs	r2, #1
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	fa02 f303 	lsl.w	r3, r2, r3
 800400a:	43db      	mvns	r3, r3
 800400c:	693a      	ldr	r2, [r7, #16]
 800400e:	4013      	ands	r3, r2
 8004010:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	091b      	lsrs	r3, r3, #4
 8004018:	f003 0201 	and.w	r2, r3, #1
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	fa02 f303 	lsl.w	r3, r2, r3
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	4313      	orrs	r3, r2
 8004026:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f003 0303 	and.w	r3, r3, #3
 8004036:	2b03      	cmp	r3, #3
 8004038:	d118      	bne.n	800406c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004040:	2201      	movs	r2, #1
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	fa02 f303 	lsl.w	r3, r2, r3
 8004048:	43db      	mvns	r3, r3
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	4013      	ands	r3, r2
 800404e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	08db      	lsrs	r3, r3, #3
 8004056:	f003 0201 	and.w	r2, r3, #1
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	fa02 f303 	lsl.w	r3, r2, r3
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	4313      	orrs	r3, r2
 8004064:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f003 0303 	and.w	r3, r3, #3
 8004074:	2b03      	cmp	r3, #3
 8004076:	d017      	beq.n	80040a8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	005b      	lsls	r3, r3, #1
 8004082:	2203      	movs	r2, #3
 8004084:	fa02 f303 	lsl.w	r3, r2, r3
 8004088:	43db      	mvns	r3, r3
 800408a:	693a      	ldr	r2, [r7, #16]
 800408c:	4013      	ands	r3, r2
 800408e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	689a      	ldr	r2, [r3, #8]
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	005b      	lsls	r3, r3, #1
 8004098:	fa02 f303 	lsl.w	r3, r2, r3
 800409c:	693a      	ldr	r2, [r7, #16]
 800409e:	4313      	orrs	r3, r2
 80040a0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f003 0303 	and.w	r3, r3, #3
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d123      	bne.n	80040fc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	08da      	lsrs	r2, r3, #3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	3208      	adds	r2, #8
 80040bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	f003 0307 	and.w	r3, r3, #7
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	220f      	movs	r2, #15
 80040cc:	fa02 f303 	lsl.w	r3, r2, r3
 80040d0:	43db      	mvns	r3, r3
 80040d2:	693a      	ldr	r2, [r7, #16]
 80040d4:	4013      	ands	r3, r2
 80040d6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	691a      	ldr	r2, [r3, #16]
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	f003 0307 	and.w	r3, r3, #7
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	fa02 f303 	lsl.w	r3, r2, r3
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	08da      	lsrs	r2, r3, #3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	3208      	adds	r2, #8
 80040f6:	6939      	ldr	r1, [r7, #16]
 80040f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	005b      	lsls	r3, r3, #1
 8004106:	2203      	movs	r2, #3
 8004108:	fa02 f303 	lsl.w	r3, r2, r3
 800410c:	43db      	mvns	r3, r3
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	4013      	ands	r3, r2
 8004112:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f003 0203 	and.w	r2, r3, #3
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	005b      	lsls	r3, r3, #1
 8004120:	fa02 f303 	lsl.w	r3, r2, r3
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	4313      	orrs	r3, r2
 8004128:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004138:	2b00      	cmp	r3, #0
 800413a:	f000 80ac 	beq.w	8004296 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800413e:	4b5f      	ldr	r3, [pc, #380]	; (80042bc <HAL_GPIO_Init+0x330>)
 8004140:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004142:	4a5e      	ldr	r2, [pc, #376]	; (80042bc <HAL_GPIO_Init+0x330>)
 8004144:	f043 0301 	orr.w	r3, r3, #1
 8004148:	6613      	str	r3, [r2, #96]	; 0x60
 800414a:	4b5c      	ldr	r3, [pc, #368]	; (80042bc <HAL_GPIO_Init+0x330>)
 800414c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	60bb      	str	r3, [r7, #8]
 8004154:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004156:	4a5a      	ldr	r2, [pc, #360]	; (80042c0 <HAL_GPIO_Init+0x334>)
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	089b      	lsrs	r3, r3, #2
 800415c:	3302      	adds	r3, #2
 800415e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004162:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	f003 0303 	and.w	r3, r3, #3
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	220f      	movs	r2, #15
 800416e:	fa02 f303 	lsl.w	r3, r2, r3
 8004172:	43db      	mvns	r3, r3
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	4013      	ands	r3, r2
 8004178:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004180:	d025      	beq.n	80041ce <HAL_GPIO_Init+0x242>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a4f      	ldr	r2, [pc, #316]	; (80042c4 <HAL_GPIO_Init+0x338>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d01f      	beq.n	80041ca <HAL_GPIO_Init+0x23e>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a4e      	ldr	r2, [pc, #312]	; (80042c8 <HAL_GPIO_Init+0x33c>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d019      	beq.n	80041c6 <HAL_GPIO_Init+0x23a>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a4d      	ldr	r2, [pc, #308]	; (80042cc <HAL_GPIO_Init+0x340>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d013      	beq.n	80041c2 <HAL_GPIO_Init+0x236>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a4c      	ldr	r2, [pc, #304]	; (80042d0 <HAL_GPIO_Init+0x344>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d00d      	beq.n	80041be <HAL_GPIO_Init+0x232>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a4b      	ldr	r2, [pc, #300]	; (80042d4 <HAL_GPIO_Init+0x348>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d007      	beq.n	80041ba <HAL_GPIO_Init+0x22e>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a4a      	ldr	r2, [pc, #296]	; (80042d8 <HAL_GPIO_Init+0x34c>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d101      	bne.n	80041b6 <HAL_GPIO_Init+0x22a>
 80041b2:	2306      	movs	r3, #6
 80041b4:	e00c      	b.n	80041d0 <HAL_GPIO_Init+0x244>
 80041b6:	2307      	movs	r3, #7
 80041b8:	e00a      	b.n	80041d0 <HAL_GPIO_Init+0x244>
 80041ba:	2305      	movs	r3, #5
 80041bc:	e008      	b.n	80041d0 <HAL_GPIO_Init+0x244>
 80041be:	2304      	movs	r3, #4
 80041c0:	e006      	b.n	80041d0 <HAL_GPIO_Init+0x244>
 80041c2:	2303      	movs	r3, #3
 80041c4:	e004      	b.n	80041d0 <HAL_GPIO_Init+0x244>
 80041c6:	2302      	movs	r3, #2
 80041c8:	e002      	b.n	80041d0 <HAL_GPIO_Init+0x244>
 80041ca:	2301      	movs	r3, #1
 80041cc:	e000      	b.n	80041d0 <HAL_GPIO_Init+0x244>
 80041ce:	2300      	movs	r3, #0
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	f002 0203 	and.w	r2, r2, #3
 80041d6:	0092      	lsls	r2, r2, #2
 80041d8:	4093      	lsls	r3, r2
 80041da:	693a      	ldr	r2, [r7, #16]
 80041dc:	4313      	orrs	r3, r2
 80041de:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80041e0:	4937      	ldr	r1, [pc, #220]	; (80042c0 <HAL_GPIO_Init+0x334>)
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	089b      	lsrs	r3, r3, #2
 80041e6:	3302      	adds	r3, #2
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80041ee:	4b3b      	ldr	r3, [pc, #236]	; (80042dc <HAL_GPIO_Init+0x350>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	43db      	mvns	r3, r3
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	4013      	ands	r3, r2
 80041fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d003      	beq.n	8004212 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	4313      	orrs	r3, r2
 8004210:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004212:	4a32      	ldr	r2, [pc, #200]	; (80042dc <HAL_GPIO_Init+0x350>)
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004218:	4b30      	ldr	r3, [pc, #192]	; (80042dc <HAL_GPIO_Init+0x350>)
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	43db      	mvns	r3, r3
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	4013      	ands	r3, r2
 8004226:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d003      	beq.n	800423c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004234:	693a      	ldr	r2, [r7, #16]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	4313      	orrs	r3, r2
 800423a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800423c:	4a27      	ldr	r2, [pc, #156]	; (80042dc <HAL_GPIO_Init+0x350>)
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004242:	4b26      	ldr	r3, [pc, #152]	; (80042dc <HAL_GPIO_Init+0x350>)
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	43db      	mvns	r3, r3
 800424c:	693a      	ldr	r2, [r7, #16]
 800424e:	4013      	ands	r3, r2
 8004250:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d003      	beq.n	8004266 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	4313      	orrs	r3, r2
 8004264:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004266:	4a1d      	ldr	r2, [pc, #116]	; (80042dc <HAL_GPIO_Init+0x350>)
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800426c:	4b1b      	ldr	r3, [pc, #108]	; (80042dc <HAL_GPIO_Init+0x350>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	43db      	mvns	r3, r3
 8004276:	693a      	ldr	r2, [r7, #16]
 8004278:	4013      	ands	r3, r2
 800427a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d003      	beq.n	8004290 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004288:	693a      	ldr	r2, [r7, #16]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	4313      	orrs	r3, r2
 800428e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004290:	4a12      	ldr	r2, [pc, #72]	; (80042dc <HAL_GPIO_Init+0x350>)
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	3301      	adds	r3, #1
 800429a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	fa22 f303 	lsr.w	r3, r2, r3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	f47f ae78 	bne.w	8003f9c <HAL_GPIO_Init+0x10>
  }
}
 80042ac:	bf00      	nop
 80042ae:	bf00      	nop
 80042b0:	371c      	adds	r7, #28
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	40021000 	.word	0x40021000
 80042c0:	40010000 	.word	0x40010000
 80042c4:	48000400 	.word	0x48000400
 80042c8:	48000800 	.word	0x48000800
 80042cc:	48000c00 	.word	0x48000c00
 80042d0:	48001000 	.word	0x48001000
 80042d4:	48001400 	.word	0x48001400
 80042d8:	48001800 	.word	0x48001800
 80042dc:	40010400 	.word	0x40010400

080042e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	460b      	mov	r3, r1
 80042ea:	807b      	strh	r3, [r7, #2]
 80042ec:	4613      	mov	r3, r2
 80042ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80042f0:	787b      	ldrb	r3, [r7, #1]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d003      	beq.n	80042fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80042f6:	887a      	ldrh	r2, [r7, #2]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80042fc:	e002      	b.n	8004304 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80042fe:	887a      	ldrh	r2, [r7, #2]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004304:	bf00      	nop
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004310:	b480      	push	{r7}
 8004312:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004314:	4b04      	ldr	r3, [pc, #16]	; (8004328 <HAL_PWREx_GetVoltageRange+0x18>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800431c:	4618      	mov	r0, r3
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	40007000 	.word	0x40007000

0800432c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800432c:	b480      	push	{r7}
 800432e:	b085      	sub	sp, #20
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800433a:	d130      	bne.n	800439e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800433c:	4b23      	ldr	r3, [pc, #140]	; (80043cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004344:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004348:	d038      	beq.n	80043bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800434a:	4b20      	ldr	r3, [pc, #128]	; (80043cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004352:	4a1e      	ldr	r2, [pc, #120]	; (80043cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004354:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004358:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800435a:	4b1d      	ldr	r3, [pc, #116]	; (80043d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2232      	movs	r2, #50	; 0x32
 8004360:	fb02 f303 	mul.w	r3, r2, r3
 8004364:	4a1b      	ldr	r2, [pc, #108]	; (80043d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004366:	fba2 2303 	umull	r2, r3, r2, r3
 800436a:	0c9b      	lsrs	r3, r3, #18
 800436c:	3301      	adds	r3, #1
 800436e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004370:	e002      	b.n	8004378 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	3b01      	subs	r3, #1
 8004376:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004378:	4b14      	ldr	r3, [pc, #80]	; (80043cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800437a:	695b      	ldr	r3, [r3, #20]
 800437c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004380:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004384:	d102      	bne.n	800438c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1f2      	bne.n	8004372 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800438c:	4b0f      	ldr	r3, [pc, #60]	; (80043cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800438e:	695b      	ldr	r3, [r3, #20]
 8004390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004394:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004398:	d110      	bne.n	80043bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e00f      	b.n	80043be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800439e:	4b0b      	ldr	r3, [pc, #44]	; (80043cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80043a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043aa:	d007      	beq.n	80043bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80043ac:	4b07      	ldr	r3, [pc, #28]	; (80043cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80043b4:	4a05      	ldr	r2, [pc, #20]	; (80043cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3714      	adds	r7, #20
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	40007000 	.word	0x40007000
 80043d0:	20000004 	.word	0x20000004
 80043d4:	431bde83 	.word	0x431bde83

080043d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b088      	sub	sp, #32
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d101      	bne.n	80043ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e3d8      	b.n	8004b9c <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043ea:	4b97      	ldr	r3, [pc, #604]	; (8004648 <HAL_RCC_OscConfig+0x270>)
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f003 030c 	and.w	r3, r3, #12
 80043f2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043f4:	4b94      	ldr	r3, [pc, #592]	; (8004648 <HAL_RCC_OscConfig+0x270>)
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	f003 0303 	and.w	r3, r3, #3
 80043fc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0310 	and.w	r3, r3, #16
 8004406:	2b00      	cmp	r3, #0
 8004408:	f000 80e4 	beq.w	80045d4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d007      	beq.n	8004422 <HAL_RCC_OscConfig+0x4a>
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	2b0c      	cmp	r3, #12
 8004416:	f040 808b 	bne.w	8004530 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	2b01      	cmp	r3, #1
 800441e:	f040 8087 	bne.w	8004530 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004422:	4b89      	ldr	r3, [pc, #548]	; (8004648 <HAL_RCC_OscConfig+0x270>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d005      	beq.n	800443a <HAL_RCC_OscConfig+0x62>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e3b0      	b.n	8004b9c <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a1a      	ldr	r2, [r3, #32]
 800443e:	4b82      	ldr	r3, [pc, #520]	; (8004648 <HAL_RCC_OscConfig+0x270>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0308 	and.w	r3, r3, #8
 8004446:	2b00      	cmp	r3, #0
 8004448:	d004      	beq.n	8004454 <HAL_RCC_OscConfig+0x7c>
 800444a:	4b7f      	ldr	r3, [pc, #508]	; (8004648 <HAL_RCC_OscConfig+0x270>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004452:	e005      	b.n	8004460 <HAL_RCC_OscConfig+0x88>
 8004454:	4b7c      	ldr	r3, [pc, #496]	; (8004648 <HAL_RCC_OscConfig+0x270>)
 8004456:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800445a:	091b      	lsrs	r3, r3, #4
 800445c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004460:	4293      	cmp	r3, r2
 8004462:	d223      	bcs.n	80044ac <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a1b      	ldr	r3, [r3, #32]
 8004468:	4618      	mov	r0, r3
 800446a:	f000 fd43 	bl	8004ef4 <RCC_SetFlashLatencyFromMSIRange>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d001      	beq.n	8004478 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e391      	b.n	8004b9c <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004478:	4b73      	ldr	r3, [pc, #460]	; (8004648 <HAL_RCC_OscConfig+0x270>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a72      	ldr	r2, [pc, #456]	; (8004648 <HAL_RCC_OscConfig+0x270>)
 800447e:	f043 0308 	orr.w	r3, r3, #8
 8004482:	6013      	str	r3, [r2, #0]
 8004484:	4b70      	ldr	r3, [pc, #448]	; (8004648 <HAL_RCC_OscConfig+0x270>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a1b      	ldr	r3, [r3, #32]
 8004490:	496d      	ldr	r1, [pc, #436]	; (8004648 <HAL_RCC_OscConfig+0x270>)
 8004492:	4313      	orrs	r3, r2
 8004494:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004496:	4b6c      	ldr	r3, [pc, #432]	; (8004648 <HAL_RCC_OscConfig+0x270>)
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	69db      	ldr	r3, [r3, #28]
 80044a2:	021b      	lsls	r3, r3, #8
 80044a4:	4968      	ldr	r1, [pc, #416]	; (8004648 <HAL_RCC_OscConfig+0x270>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	604b      	str	r3, [r1, #4]
 80044aa:	e025      	b.n	80044f8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044ac:	4b66      	ldr	r3, [pc, #408]	; (8004648 <HAL_RCC_OscConfig+0x270>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a65      	ldr	r2, [pc, #404]	; (8004648 <HAL_RCC_OscConfig+0x270>)
 80044b2:	f043 0308 	orr.w	r3, r3, #8
 80044b6:	6013      	str	r3, [r2, #0]
 80044b8:	4b63      	ldr	r3, [pc, #396]	; (8004648 <HAL_RCC_OscConfig+0x270>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a1b      	ldr	r3, [r3, #32]
 80044c4:	4960      	ldr	r1, [pc, #384]	; (8004648 <HAL_RCC_OscConfig+0x270>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044ca:	4b5f      	ldr	r3, [pc, #380]	; (8004648 <HAL_RCC_OscConfig+0x270>)
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	69db      	ldr	r3, [r3, #28]
 80044d6:	021b      	lsls	r3, r3, #8
 80044d8:	495b      	ldr	r1, [pc, #364]	; (8004648 <HAL_RCC_OscConfig+0x270>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d109      	bne.n	80044f8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a1b      	ldr	r3, [r3, #32]
 80044e8:	4618      	mov	r0, r3
 80044ea:	f000 fd03 	bl	8004ef4 <RCC_SetFlashLatencyFromMSIRange>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d001      	beq.n	80044f8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e351      	b.n	8004b9c <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80044f8:	f000 fc38 	bl	8004d6c <HAL_RCC_GetSysClockFreq>
 80044fc:	4602      	mov	r2, r0
 80044fe:	4b52      	ldr	r3, [pc, #328]	; (8004648 <HAL_RCC_OscConfig+0x270>)
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	091b      	lsrs	r3, r3, #4
 8004504:	f003 030f 	and.w	r3, r3, #15
 8004508:	4950      	ldr	r1, [pc, #320]	; (800464c <HAL_RCC_OscConfig+0x274>)
 800450a:	5ccb      	ldrb	r3, [r1, r3]
 800450c:	f003 031f 	and.w	r3, r3, #31
 8004510:	fa22 f303 	lsr.w	r3, r2, r3
 8004514:	4a4e      	ldr	r2, [pc, #312]	; (8004650 <HAL_RCC_OscConfig+0x278>)
 8004516:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004518:	4b4e      	ldr	r3, [pc, #312]	; (8004654 <HAL_RCC_OscConfig+0x27c>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4618      	mov	r0, r3
 800451e:	f7fd fd3f 	bl	8001fa0 <HAL_InitTick>
 8004522:	4603      	mov	r3, r0
 8004524:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004526:	7bfb      	ldrb	r3, [r7, #15]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d052      	beq.n	80045d2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800452c:	7bfb      	ldrb	r3, [r7, #15]
 800452e:	e335      	b.n	8004b9c <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	699b      	ldr	r3, [r3, #24]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d032      	beq.n	800459e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004538:	4b43      	ldr	r3, [pc, #268]	; (8004648 <HAL_RCC_OscConfig+0x270>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a42      	ldr	r2, [pc, #264]	; (8004648 <HAL_RCC_OscConfig+0x270>)
 800453e:	f043 0301 	orr.w	r3, r3, #1
 8004542:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004544:	f7fd fd7c 	bl	8002040 <HAL_GetTick>
 8004548:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800454a:	e008      	b.n	800455e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800454c:	f7fd fd78 	bl	8002040 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	2b02      	cmp	r3, #2
 8004558:	d901      	bls.n	800455e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e31e      	b.n	8004b9c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800455e:	4b3a      	ldr	r3, [pc, #232]	; (8004648 <HAL_RCC_OscConfig+0x270>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0302 	and.w	r3, r3, #2
 8004566:	2b00      	cmp	r3, #0
 8004568:	d0f0      	beq.n	800454c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800456a:	4b37      	ldr	r3, [pc, #220]	; (8004648 <HAL_RCC_OscConfig+0x270>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a36      	ldr	r2, [pc, #216]	; (8004648 <HAL_RCC_OscConfig+0x270>)
 8004570:	f043 0308 	orr.w	r3, r3, #8
 8004574:	6013      	str	r3, [r2, #0]
 8004576:	4b34      	ldr	r3, [pc, #208]	; (8004648 <HAL_RCC_OscConfig+0x270>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	4931      	ldr	r1, [pc, #196]	; (8004648 <HAL_RCC_OscConfig+0x270>)
 8004584:	4313      	orrs	r3, r2
 8004586:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004588:	4b2f      	ldr	r3, [pc, #188]	; (8004648 <HAL_RCC_OscConfig+0x270>)
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	69db      	ldr	r3, [r3, #28]
 8004594:	021b      	lsls	r3, r3, #8
 8004596:	492c      	ldr	r1, [pc, #176]	; (8004648 <HAL_RCC_OscConfig+0x270>)
 8004598:	4313      	orrs	r3, r2
 800459a:	604b      	str	r3, [r1, #4]
 800459c:	e01a      	b.n	80045d4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800459e:	4b2a      	ldr	r3, [pc, #168]	; (8004648 <HAL_RCC_OscConfig+0x270>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a29      	ldr	r2, [pc, #164]	; (8004648 <HAL_RCC_OscConfig+0x270>)
 80045a4:	f023 0301 	bic.w	r3, r3, #1
 80045a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80045aa:	f7fd fd49 	bl	8002040 <HAL_GetTick>
 80045ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80045b0:	e008      	b.n	80045c4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045b2:	f7fd fd45 	bl	8002040 <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d901      	bls.n	80045c4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e2eb      	b.n	8004b9c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80045c4:	4b20      	ldr	r3, [pc, #128]	; (8004648 <HAL_RCC_OscConfig+0x270>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0302 	and.w	r3, r3, #2
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1f0      	bne.n	80045b2 <HAL_RCC_OscConfig+0x1da>
 80045d0:	e000      	b.n	80045d4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80045d2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0301 	and.w	r3, r3, #1
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d074      	beq.n	80046ca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	2b08      	cmp	r3, #8
 80045e4:	d005      	beq.n	80045f2 <HAL_RCC_OscConfig+0x21a>
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	2b0c      	cmp	r3, #12
 80045ea:	d10e      	bne.n	800460a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	2b03      	cmp	r3, #3
 80045f0:	d10b      	bne.n	800460a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045f2:	4b15      	ldr	r3, [pc, #84]	; (8004648 <HAL_RCC_OscConfig+0x270>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d064      	beq.n	80046c8 <HAL_RCC_OscConfig+0x2f0>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d160      	bne.n	80046c8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e2c8      	b.n	8004b9c <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004612:	d106      	bne.n	8004622 <HAL_RCC_OscConfig+0x24a>
 8004614:	4b0c      	ldr	r3, [pc, #48]	; (8004648 <HAL_RCC_OscConfig+0x270>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a0b      	ldr	r2, [pc, #44]	; (8004648 <HAL_RCC_OscConfig+0x270>)
 800461a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800461e:	6013      	str	r3, [r2, #0]
 8004620:	e026      	b.n	8004670 <HAL_RCC_OscConfig+0x298>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800462a:	d115      	bne.n	8004658 <HAL_RCC_OscConfig+0x280>
 800462c:	4b06      	ldr	r3, [pc, #24]	; (8004648 <HAL_RCC_OscConfig+0x270>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a05      	ldr	r2, [pc, #20]	; (8004648 <HAL_RCC_OscConfig+0x270>)
 8004632:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004636:	6013      	str	r3, [r2, #0]
 8004638:	4b03      	ldr	r3, [pc, #12]	; (8004648 <HAL_RCC_OscConfig+0x270>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a02      	ldr	r2, [pc, #8]	; (8004648 <HAL_RCC_OscConfig+0x270>)
 800463e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004642:	6013      	str	r3, [r2, #0]
 8004644:	e014      	b.n	8004670 <HAL_RCC_OscConfig+0x298>
 8004646:	bf00      	nop
 8004648:	40021000 	.word	0x40021000
 800464c:	0800cb98 	.word	0x0800cb98
 8004650:	20000004 	.word	0x20000004
 8004654:	20000010 	.word	0x20000010
 8004658:	4ba0      	ldr	r3, [pc, #640]	; (80048dc <HAL_RCC_OscConfig+0x504>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a9f      	ldr	r2, [pc, #636]	; (80048dc <HAL_RCC_OscConfig+0x504>)
 800465e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004662:	6013      	str	r3, [r2, #0]
 8004664:	4b9d      	ldr	r3, [pc, #628]	; (80048dc <HAL_RCC_OscConfig+0x504>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a9c      	ldr	r2, [pc, #624]	; (80048dc <HAL_RCC_OscConfig+0x504>)
 800466a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800466e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d013      	beq.n	80046a0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004678:	f7fd fce2 	bl	8002040 <HAL_GetTick>
 800467c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800467e:	e008      	b.n	8004692 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004680:	f7fd fcde 	bl	8002040 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b64      	cmp	r3, #100	; 0x64
 800468c:	d901      	bls.n	8004692 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e284      	b.n	8004b9c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004692:	4b92      	ldr	r3, [pc, #584]	; (80048dc <HAL_RCC_OscConfig+0x504>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d0f0      	beq.n	8004680 <HAL_RCC_OscConfig+0x2a8>
 800469e:	e014      	b.n	80046ca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a0:	f7fd fcce 	bl	8002040 <HAL_GetTick>
 80046a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046a6:	e008      	b.n	80046ba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046a8:	f7fd fcca 	bl	8002040 <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	2b64      	cmp	r3, #100	; 0x64
 80046b4:	d901      	bls.n	80046ba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e270      	b.n	8004b9c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046ba:	4b88      	ldr	r3, [pc, #544]	; (80048dc <HAL_RCC_OscConfig+0x504>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1f0      	bne.n	80046a8 <HAL_RCC_OscConfig+0x2d0>
 80046c6:	e000      	b.n	80046ca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0302 	and.w	r3, r3, #2
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d060      	beq.n	8004798 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	2b04      	cmp	r3, #4
 80046da:	d005      	beq.n	80046e8 <HAL_RCC_OscConfig+0x310>
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	2b0c      	cmp	r3, #12
 80046e0:	d119      	bne.n	8004716 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d116      	bne.n	8004716 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046e8:	4b7c      	ldr	r3, [pc, #496]	; (80048dc <HAL_RCC_OscConfig+0x504>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d005      	beq.n	8004700 <HAL_RCC_OscConfig+0x328>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d101      	bne.n	8004700 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e24d      	b.n	8004b9c <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004700:	4b76      	ldr	r3, [pc, #472]	; (80048dc <HAL_RCC_OscConfig+0x504>)
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	061b      	lsls	r3, r3, #24
 800470e:	4973      	ldr	r1, [pc, #460]	; (80048dc <HAL_RCC_OscConfig+0x504>)
 8004710:	4313      	orrs	r3, r2
 8004712:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004714:	e040      	b.n	8004798 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d023      	beq.n	8004766 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800471e:	4b6f      	ldr	r3, [pc, #444]	; (80048dc <HAL_RCC_OscConfig+0x504>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a6e      	ldr	r2, [pc, #440]	; (80048dc <HAL_RCC_OscConfig+0x504>)
 8004724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004728:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800472a:	f7fd fc89 	bl	8002040 <HAL_GetTick>
 800472e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004730:	e008      	b.n	8004744 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004732:	f7fd fc85 	bl	8002040 <HAL_GetTick>
 8004736:	4602      	mov	r2, r0
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	2b02      	cmp	r3, #2
 800473e:	d901      	bls.n	8004744 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e22b      	b.n	8004b9c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004744:	4b65      	ldr	r3, [pc, #404]	; (80048dc <HAL_RCC_OscConfig+0x504>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800474c:	2b00      	cmp	r3, #0
 800474e:	d0f0      	beq.n	8004732 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004750:	4b62      	ldr	r3, [pc, #392]	; (80048dc <HAL_RCC_OscConfig+0x504>)
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	061b      	lsls	r3, r3, #24
 800475e:	495f      	ldr	r1, [pc, #380]	; (80048dc <HAL_RCC_OscConfig+0x504>)
 8004760:	4313      	orrs	r3, r2
 8004762:	604b      	str	r3, [r1, #4]
 8004764:	e018      	b.n	8004798 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004766:	4b5d      	ldr	r3, [pc, #372]	; (80048dc <HAL_RCC_OscConfig+0x504>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a5c      	ldr	r2, [pc, #368]	; (80048dc <HAL_RCC_OscConfig+0x504>)
 800476c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004770:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004772:	f7fd fc65 	bl	8002040 <HAL_GetTick>
 8004776:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004778:	e008      	b.n	800478c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800477a:	f7fd fc61 	bl	8002040 <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	2b02      	cmp	r3, #2
 8004786:	d901      	bls.n	800478c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e207      	b.n	8004b9c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800478c:	4b53      	ldr	r3, [pc, #332]	; (80048dc <HAL_RCC_OscConfig+0x504>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004794:	2b00      	cmp	r3, #0
 8004796:	d1f0      	bne.n	800477a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 0308 	and.w	r3, r3, #8
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d03c      	beq.n	800481e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	695b      	ldr	r3, [r3, #20]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d01c      	beq.n	80047e6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047ac:	4b4b      	ldr	r3, [pc, #300]	; (80048dc <HAL_RCC_OscConfig+0x504>)
 80047ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047b2:	4a4a      	ldr	r2, [pc, #296]	; (80048dc <HAL_RCC_OscConfig+0x504>)
 80047b4:	f043 0301 	orr.w	r3, r3, #1
 80047b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047bc:	f7fd fc40 	bl	8002040 <HAL_GetTick>
 80047c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80047c2:	e008      	b.n	80047d6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047c4:	f7fd fc3c 	bl	8002040 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e1e2      	b.n	8004b9c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80047d6:	4b41      	ldr	r3, [pc, #260]	; (80048dc <HAL_RCC_OscConfig+0x504>)
 80047d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047dc:	f003 0302 	and.w	r3, r3, #2
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d0ef      	beq.n	80047c4 <HAL_RCC_OscConfig+0x3ec>
 80047e4:	e01b      	b.n	800481e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047e6:	4b3d      	ldr	r3, [pc, #244]	; (80048dc <HAL_RCC_OscConfig+0x504>)
 80047e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047ec:	4a3b      	ldr	r2, [pc, #236]	; (80048dc <HAL_RCC_OscConfig+0x504>)
 80047ee:	f023 0301 	bic.w	r3, r3, #1
 80047f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047f6:	f7fd fc23 	bl	8002040 <HAL_GetTick>
 80047fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047fc:	e008      	b.n	8004810 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047fe:	f7fd fc1f 	bl	8002040 <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	2b02      	cmp	r3, #2
 800480a:	d901      	bls.n	8004810 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800480c:	2303      	movs	r3, #3
 800480e:	e1c5      	b.n	8004b9c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004810:	4b32      	ldr	r3, [pc, #200]	; (80048dc <HAL_RCC_OscConfig+0x504>)
 8004812:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004816:	f003 0302 	and.w	r3, r3, #2
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1ef      	bne.n	80047fe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0304 	and.w	r3, r3, #4
 8004826:	2b00      	cmp	r3, #0
 8004828:	f000 80a6 	beq.w	8004978 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800482c:	2300      	movs	r3, #0
 800482e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004830:	4b2a      	ldr	r3, [pc, #168]	; (80048dc <HAL_RCC_OscConfig+0x504>)
 8004832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d10d      	bne.n	8004858 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800483c:	4b27      	ldr	r3, [pc, #156]	; (80048dc <HAL_RCC_OscConfig+0x504>)
 800483e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004840:	4a26      	ldr	r2, [pc, #152]	; (80048dc <HAL_RCC_OscConfig+0x504>)
 8004842:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004846:	6593      	str	r3, [r2, #88]	; 0x58
 8004848:	4b24      	ldr	r3, [pc, #144]	; (80048dc <HAL_RCC_OscConfig+0x504>)
 800484a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800484c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004850:	60bb      	str	r3, [r7, #8]
 8004852:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004854:	2301      	movs	r3, #1
 8004856:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004858:	4b21      	ldr	r3, [pc, #132]	; (80048e0 <HAL_RCC_OscConfig+0x508>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004860:	2b00      	cmp	r3, #0
 8004862:	d118      	bne.n	8004896 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004864:	4b1e      	ldr	r3, [pc, #120]	; (80048e0 <HAL_RCC_OscConfig+0x508>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a1d      	ldr	r2, [pc, #116]	; (80048e0 <HAL_RCC_OscConfig+0x508>)
 800486a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800486e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004870:	f7fd fbe6 	bl	8002040 <HAL_GetTick>
 8004874:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004876:	e008      	b.n	800488a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004878:	f7fd fbe2 	bl	8002040 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	2b02      	cmp	r3, #2
 8004884:	d901      	bls.n	800488a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e188      	b.n	8004b9c <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800488a:	4b15      	ldr	r3, [pc, #84]	; (80048e0 <HAL_RCC_OscConfig+0x508>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004892:	2b00      	cmp	r3, #0
 8004894:	d0f0      	beq.n	8004878 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	2b01      	cmp	r3, #1
 800489c:	d108      	bne.n	80048b0 <HAL_RCC_OscConfig+0x4d8>
 800489e:	4b0f      	ldr	r3, [pc, #60]	; (80048dc <HAL_RCC_OscConfig+0x504>)
 80048a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a4:	4a0d      	ldr	r2, [pc, #52]	; (80048dc <HAL_RCC_OscConfig+0x504>)
 80048a6:	f043 0301 	orr.w	r3, r3, #1
 80048aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048ae:	e029      	b.n	8004904 <HAL_RCC_OscConfig+0x52c>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	2b05      	cmp	r3, #5
 80048b6:	d115      	bne.n	80048e4 <HAL_RCC_OscConfig+0x50c>
 80048b8:	4b08      	ldr	r3, [pc, #32]	; (80048dc <HAL_RCC_OscConfig+0x504>)
 80048ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048be:	4a07      	ldr	r2, [pc, #28]	; (80048dc <HAL_RCC_OscConfig+0x504>)
 80048c0:	f043 0304 	orr.w	r3, r3, #4
 80048c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048c8:	4b04      	ldr	r3, [pc, #16]	; (80048dc <HAL_RCC_OscConfig+0x504>)
 80048ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ce:	4a03      	ldr	r2, [pc, #12]	; (80048dc <HAL_RCC_OscConfig+0x504>)
 80048d0:	f043 0301 	orr.w	r3, r3, #1
 80048d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048d8:	e014      	b.n	8004904 <HAL_RCC_OscConfig+0x52c>
 80048da:	bf00      	nop
 80048dc:	40021000 	.word	0x40021000
 80048e0:	40007000 	.word	0x40007000
 80048e4:	4b91      	ldr	r3, [pc, #580]	; (8004b2c <HAL_RCC_OscConfig+0x754>)
 80048e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ea:	4a90      	ldr	r2, [pc, #576]	; (8004b2c <HAL_RCC_OscConfig+0x754>)
 80048ec:	f023 0301 	bic.w	r3, r3, #1
 80048f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048f4:	4b8d      	ldr	r3, [pc, #564]	; (8004b2c <HAL_RCC_OscConfig+0x754>)
 80048f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048fa:	4a8c      	ldr	r2, [pc, #560]	; (8004b2c <HAL_RCC_OscConfig+0x754>)
 80048fc:	f023 0304 	bic.w	r3, r3, #4
 8004900:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d016      	beq.n	800493a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800490c:	f7fd fb98 	bl	8002040 <HAL_GetTick>
 8004910:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004912:	e00a      	b.n	800492a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004914:	f7fd fb94 	bl	8002040 <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004922:	4293      	cmp	r3, r2
 8004924:	d901      	bls.n	800492a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e138      	b.n	8004b9c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800492a:	4b80      	ldr	r3, [pc, #512]	; (8004b2c <HAL_RCC_OscConfig+0x754>)
 800492c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004930:	f003 0302 	and.w	r3, r3, #2
 8004934:	2b00      	cmp	r3, #0
 8004936:	d0ed      	beq.n	8004914 <HAL_RCC_OscConfig+0x53c>
 8004938:	e015      	b.n	8004966 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800493a:	f7fd fb81 	bl	8002040 <HAL_GetTick>
 800493e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004940:	e00a      	b.n	8004958 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004942:	f7fd fb7d 	bl	8002040 <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004950:	4293      	cmp	r3, r2
 8004952:	d901      	bls.n	8004958 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e121      	b.n	8004b9c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004958:	4b74      	ldr	r3, [pc, #464]	; (8004b2c <HAL_RCC_OscConfig+0x754>)
 800495a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1ed      	bne.n	8004942 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004966:	7ffb      	ldrb	r3, [r7, #31]
 8004968:	2b01      	cmp	r3, #1
 800496a:	d105      	bne.n	8004978 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800496c:	4b6f      	ldr	r3, [pc, #444]	; (8004b2c <HAL_RCC_OscConfig+0x754>)
 800496e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004970:	4a6e      	ldr	r2, [pc, #440]	; (8004b2c <HAL_RCC_OscConfig+0x754>)
 8004972:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004976:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497c:	2b00      	cmp	r3, #0
 800497e:	f000 810c 	beq.w	8004b9a <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004986:	2b02      	cmp	r3, #2
 8004988:	f040 80d4 	bne.w	8004b34 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800498c:	4b67      	ldr	r3, [pc, #412]	; (8004b2c <HAL_RCC_OscConfig+0x754>)
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	f003 0203 	and.w	r2, r3, #3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499c:	429a      	cmp	r2, r3
 800499e:	d130      	bne.n	8004a02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049aa:	3b01      	subs	r3, #1
 80049ac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d127      	bne.n	8004a02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049bc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049be:	429a      	cmp	r2, r3
 80049c0:	d11f      	bne.n	8004a02 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80049cc:	2a07      	cmp	r2, #7
 80049ce:	bf14      	ite	ne
 80049d0:	2201      	movne	r2, #1
 80049d2:	2200      	moveq	r2, #0
 80049d4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d113      	bne.n	8004a02 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049e4:	085b      	lsrs	r3, r3, #1
 80049e6:	3b01      	subs	r3, #1
 80049e8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d109      	bne.n	8004a02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f8:	085b      	lsrs	r3, r3, #1
 80049fa:	3b01      	subs	r3, #1
 80049fc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d06e      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	2b0c      	cmp	r3, #12
 8004a06:	d069      	beq.n	8004adc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004a08:	4b48      	ldr	r3, [pc, #288]	; (8004b2c <HAL_RCC_OscConfig+0x754>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d105      	bne.n	8004a20 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004a14:	4b45      	ldr	r3, [pc, #276]	; (8004b2c <HAL_RCC_OscConfig+0x754>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d001      	beq.n	8004a24 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e0bb      	b.n	8004b9c <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004a24:	4b41      	ldr	r3, [pc, #260]	; (8004b2c <HAL_RCC_OscConfig+0x754>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a40      	ldr	r2, [pc, #256]	; (8004b2c <HAL_RCC_OscConfig+0x754>)
 8004a2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a2e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a30:	f7fd fb06 	bl	8002040 <HAL_GetTick>
 8004a34:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a36:	e008      	b.n	8004a4a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a38:	f7fd fb02 	bl	8002040 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d901      	bls.n	8004a4a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e0a8      	b.n	8004b9c <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a4a:	4b38      	ldr	r3, [pc, #224]	; (8004b2c <HAL_RCC_OscConfig+0x754>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d1f0      	bne.n	8004a38 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a56:	4b35      	ldr	r3, [pc, #212]	; (8004b2c <HAL_RCC_OscConfig+0x754>)
 8004a58:	68da      	ldr	r2, [r3, #12]
 8004a5a:	4b35      	ldr	r3, [pc, #212]	; (8004b30 <HAL_RCC_OscConfig+0x758>)
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004a66:	3a01      	subs	r2, #1
 8004a68:	0112      	lsls	r2, r2, #4
 8004a6a:	4311      	orrs	r1, r2
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a70:	0212      	lsls	r2, r2, #8
 8004a72:	4311      	orrs	r1, r2
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004a78:	0852      	lsrs	r2, r2, #1
 8004a7a:	3a01      	subs	r2, #1
 8004a7c:	0552      	lsls	r2, r2, #21
 8004a7e:	4311      	orrs	r1, r2
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004a84:	0852      	lsrs	r2, r2, #1
 8004a86:	3a01      	subs	r2, #1
 8004a88:	0652      	lsls	r2, r2, #25
 8004a8a:	4311      	orrs	r1, r2
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a90:	0912      	lsrs	r2, r2, #4
 8004a92:	0452      	lsls	r2, r2, #17
 8004a94:	430a      	orrs	r2, r1
 8004a96:	4925      	ldr	r1, [pc, #148]	; (8004b2c <HAL_RCC_OscConfig+0x754>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004a9c:	4b23      	ldr	r3, [pc, #140]	; (8004b2c <HAL_RCC_OscConfig+0x754>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a22      	ldr	r2, [pc, #136]	; (8004b2c <HAL_RCC_OscConfig+0x754>)
 8004aa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004aa6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004aa8:	4b20      	ldr	r3, [pc, #128]	; (8004b2c <HAL_RCC_OscConfig+0x754>)
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	4a1f      	ldr	r2, [pc, #124]	; (8004b2c <HAL_RCC_OscConfig+0x754>)
 8004aae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ab2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ab4:	f7fd fac4 	bl	8002040 <HAL_GetTick>
 8004ab8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004aba:	e008      	b.n	8004ace <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004abc:	f7fd fac0 	bl	8002040 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e066      	b.n	8004b9c <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ace:	4b17      	ldr	r3, [pc, #92]	; (8004b2c <HAL_RCC_OscConfig+0x754>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d0f0      	beq.n	8004abc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ada:	e05e      	b.n	8004b9a <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e05d      	b.n	8004b9c <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ae0:	4b12      	ldr	r3, [pc, #72]	; (8004b2c <HAL_RCC_OscConfig+0x754>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d156      	bne.n	8004b9a <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004aec:	4b0f      	ldr	r3, [pc, #60]	; (8004b2c <HAL_RCC_OscConfig+0x754>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a0e      	ldr	r2, [pc, #56]	; (8004b2c <HAL_RCC_OscConfig+0x754>)
 8004af2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004af6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004af8:	4b0c      	ldr	r3, [pc, #48]	; (8004b2c <HAL_RCC_OscConfig+0x754>)
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	4a0b      	ldr	r2, [pc, #44]	; (8004b2c <HAL_RCC_OscConfig+0x754>)
 8004afe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b02:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004b04:	f7fd fa9c 	bl	8002040 <HAL_GetTick>
 8004b08:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b0a:	e008      	b.n	8004b1e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b0c:	f7fd fa98 	bl	8002040 <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d901      	bls.n	8004b1e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e03e      	b.n	8004b9c <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b1e:	4b03      	ldr	r3, [pc, #12]	; (8004b2c <HAL_RCC_OscConfig+0x754>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d0f0      	beq.n	8004b0c <HAL_RCC_OscConfig+0x734>
 8004b2a:	e036      	b.n	8004b9a <HAL_RCC_OscConfig+0x7c2>
 8004b2c:	40021000 	.word	0x40021000
 8004b30:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	2b0c      	cmp	r3, #12
 8004b38:	d02d      	beq.n	8004b96 <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b3a:	4b1a      	ldr	r3, [pc, #104]	; (8004ba4 <HAL_RCC_OscConfig+0x7cc>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a19      	ldr	r2, [pc, #100]	; (8004ba4 <HAL_RCC_OscConfig+0x7cc>)
 8004b40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b44:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004b46:	4b17      	ldr	r3, [pc, #92]	; (8004ba4 <HAL_RCC_OscConfig+0x7cc>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d105      	bne.n	8004b5e <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004b52:	4b14      	ldr	r3, [pc, #80]	; (8004ba4 <HAL_RCC_OscConfig+0x7cc>)
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	4a13      	ldr	r2, [pc, #76]	; (8004ba4 <HAL_RCC_OscConfig+0x7cc>)
 8004b58:	f023 0303 	bic.w	r3, r3, #3
 8004b5c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004b5e:	4b11      	ldr	r3, [pc, #68]	; (8004ba4 <HAL_RCC_OscConfig+0x7cc>)
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	4a10      	ldr	r2, [pc, #64]	; (8004ba4 <HAL_RCC_OscConfig+0x7cc>)
 8004b64:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004b68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b6c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b6e:	f7fd fa67 	bl	8002040 <HAL_GetTick>
 8004b72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b74:	e008      	b.n	8004b88 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b76:	f7fd fa63 	bl	8002040 <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d901      	bls.n	8004b88 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e009      	b.n	8004b9c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b88:	4b06      	ldr	r3, [pc, #24]	; (8004ba4 <HAL_RCC_OscConfig+0x7cc>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d1f0      	bne.n	8004b76 <HAL_RCC_OscConfig+0x79e>
 8004b94:	e001      	b.n	8004b9a <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e000      	b.n	8004b9c <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3720      	adds	r7, #32
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	40021000 	.word	0x40021000

08004ba8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d101      	bne.n	8004bbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e0c8      	b.n	8004d4e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bbc:	4b66      	ldr	r3, [pc, #408]	; (8004d58 <HAL_RCC_ClockConfig+0x1b0>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0307 	and.w	r3, r3, #7
 8004bc4:	683a      	ldr	r2, [r7, #0]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d910      	bls.n	8004bec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bca:	4b63      	ldr	r3, [pc, #396]	; (8004d58 <HAL_RCC_ClockConfig+0x1b0>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f023 0207 	bic.w	r2, r3, #7
 8004bd2:	4961      	ldr	r1, [pc, #388]	; (8004d58 <HAL_RCC_ClockConfig+0x1b0>)
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bda:	4b5f      	ldr	r3, [pc, #380]	; (8004d58 <HAL_RCC_ClockConfig+0x1b0>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0307 	and.w	r3, r3, #7
 8004be2:	683a      	ldr	r2, [r7, #0]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d001      	beq.n	8004bec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e0b0      	b.n	8004d4e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0301 	and.w	r3, r3, #1
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d04c      	beq.n	8004c92 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	2b03      	cmp	r3, #3
 8004bfe:	d107      	bne.n	8004c10 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c00:	4b56      	ldr	r3, [pc, #344]	; (8004d5c <HAL_RCC_ClockConfig+0x1b4>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d121      	bne.n	8004c50 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e09e      	b.n	8004d4e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	2b02      	cmp	r3, #2
 8004c16:	d107      	bne.n	8004c28 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c18:	4b50      	ldr	r3, [pc, #320]	; (8004d5c <HAL_RCC_ClockConfig+0x1b4>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d115      	bne.n	8004c50 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e092      	b.n	8004d4e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d107      	bne.n	8004c40 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c30:	4b4a      	ldr	r3, [pc, #296]	; (8004d5c <HAL_RCC_ClockConfig+0x1b4>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0302 	and.w	r3, r3, #2
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d109      	bne.n	8004c50 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e086      	b.n	8004d4e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c40:	4b46      	ldr	r3, [pc, #280]	; (8004d5c <HAL_RCC_ClockConfig+0x1b4>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d101      	bne.n	8004c50 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e07e      	b.n	8004d4e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c50:	4b42      	ldr	r3, [pc, #264]	; (8004d5c <HAL_RCC_ClockConfig+0x1b4>)
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f023 0203 	bic.w	r2, r3, #3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	493f      	ldr	r1, [pc, #252]	; (8004d5c <HAL_RCC_ClockConfig+0x1b4>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c62:	f7fd f9ed 	bl	8002040 <HAL_GetTick>
 8004c66:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c68:	e00a      	b.n	8004c80 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c6a:	f7fd f9e9 	bl	8002040 <HAL_GetTick>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d901      	bls.n	8004c80 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e066      	b.n	8004d4e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c80:	4b36      	ldr	r3, [pc, #216]	; (8004d5c <HAL_RCC_ClockConfig+0x1b4>)
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	f003 020c 	and.w	r2, r3, #12
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d1eb      	bne.n	8004c6a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0302 	and.w	r3, r3, #2
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d008      	beq.n	8004cb0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c9e:	4b2f      	ldr	r3, [pc, #188]	; (8004d5c <HAL_RCC_ClockConfig+0x1b4>)
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	492c      	ldr	r1, [pc, #176]	; (8004d5c <HAL_RCC_ClockConfig+0x1b4>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cb0:	4b29      	ldr	r3, [pc, #164]	; (8004d58 <HAL_RCC_ClockConfig+0x1b0>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0307 	and.w	r3, r3, #7
 8004cb8:	683a      	ldr	r2, [r7, #0]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d210      	bcs.n	8004ce0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cbe:	4b26      	ldr	r3, [pc, #152]	; (8004d58 <HAL_RCC_ClockConfig+0x1b0>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f023 0207 	bic.w	r2, r3, #7
 8004cc6:	4924      	ldr	r1, [pc, #144]	; (8004d58 <HAL_RCC_ClockConfig+0x1b0>)
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cce:	4b22      	ldr	r3, [pc, #136]	; (8004d58 <HAL_RCC_ClockConfig+0x1b0>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0307 	and.w	r3, r3, #7
 8004cd6:	683a      	ldr	r2, [r7, #0]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d001      	beq.n	8004ce0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e036      	b.n	8004d4e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0304 	and.w	r3, r3, #4
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d008      	beq.n	8004cfe <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cec:	4b1b      	ldr	r3, [pc, #108]	; (8004d5c <HAL_RCC_ClockConfig+0x1b4>)
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	4918      	ldr	r1, [pc, #96]	; (8004d5c <HAL_RCC_ClockConfig+0x1b4>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0308 	and.w	r3, r3, #8
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d009      	beq.n	8004d1e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d0a:	4b14      	ldr	r3, [pc, #80]	; (8004d5c <HAL_RCC_ClockConfig+0x1b4>)
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	00db      	lsls	r3, r3, #3
 8004d18:	4910      	ldr	r1, [pc, #64]	; (8004d5c <HAL_RCC_ClockConfig+0x1b4>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d1e:	f000 f825 	bl	8004d6c <HAL_RCC_GetSysClockFreq>
 8004d22:	4602      	mov	r2, r0
 8004d24:	4b0d      	ldr	r3, [pc, #52]	; (8004d5c <HAL_RCC_ClockConfig+0x1b4>)
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	091b      	lsrs	r3, r3, #4
 8004d2a:	f003 030f 	and.w	r3, r3, #15
 8004d2e:	490c      	ldr	r1, [pc, #48]	; (8004d60 <HAL_RCC_ClockConfig+0x1b8>)
 8004d30:	5ccb      	ldrb	r3, [r1, r3]
 8004d32:	f003 031f 	and.w	r3, r3, #31
 8004d36:	fa22 f303 	lsr.w	r3, r2, r3
 8004d3a:	4a0a      	ldr	r2, [pc, #40]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004d3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004d3e:	4b0a      	ldr	r3, [pc, #40]	; (8004d68 <HAL_RCC_ClockConfig+0x1c0>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4618      	mov	r0, r3
 8004d44:	f7fd f92c 	bl	8001fa0 <HAL_InitTick>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	72fb      	strb	r3, [r7, #11]

  return status;
 8004d4c:	7afb      	ldrb	r3, [r7, #11]
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3710      	adds	r7, #16
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	40022000 	.word	0x40022000
 8004d5c:	40021000 	.word	0x40021000
 8004d60:	0800cb98 	.word	0x0800cb98
 8004d64:	20000004 	.word	0x20000004
 8004d68:	20000010 	.word	0x20000010

08004d6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b089      	sub	sp, #36	; 0x24
 8004d70:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004d72:	2300      	movs	r3, #0
 8004d74:	61fb      	str	r3, [r7, #28]
 8004d76:	2300      	movs	r3, #0
 8004d78:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d7a:	4b3e      	ldr	r3, [pc, #248]	; (8004e74 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f003 030c 	and.w	r3, r3, #12
 8004d82:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d84:	4b3b      	ldr	r3, [pc, #236]	; (8004e74 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	f003 0303 	and.w	r3, r3, #3
 8004d8c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d005      	beq.n	8004da0 <HAL_RCC_GetSysClockFreq+0x34>
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	2b0c      	cmp	r3, #12
 8004d98:	d121      	bne.n	8004dde <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d11e      	bne.n	8004dde <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004da0:	4b34      	ldr	r3, [pc, #208]	; (8004e74 <HAL_RCC_GetSysClockFreq+0x108>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0308 	and.w	r3, r3, #8
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d107      	bne.n	8004dbc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004dac:	4b31      	ldr	r3, [pc, #196]	; (8004e74 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004db2:	0a1b      	lsrs	r3, r3, #8
 8004db4:	f003 030f 	and.w	r3, r3, #15
 8004db8:	61fb      	str	r3, [r7, #28]
 8004dba:	e005      	b.n	8004dc8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004dbc:	4b2d      	ldr	r3, [pc, #180]	; (8004e74 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	091b      	lsrs	r3, r3, #4
 8004dc2:	f003 030f 	and.w	r3, r3, #15
 8004dc6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004dc8:	4a2b      	ldr	r2, [pc, #172]	; (8004e78 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dd0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d10d      	bne.n	8004df4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ddc:	e00a      	b.n	8004df4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	2b04      	cmp	r3, #4
 8004de2:	d102      	bne.n	8004dea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004de4:	4b25      	ldr	r3, [pc, #148]	; (8004e7c <HAL_RCC_GetSysClockFreq+0x110>)
 8004de6:	61bb      	str	r3, [r7, #24]
 8004de8:	e004      	b.n	8004df4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	2b08      	cmp	r3, #8
 8004dee:	d101      	bne.n	8004df4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004df0:	4b23      	ldr	r3, [pc, #140]	; (8004e80 <HAL_RCC_GetSysClockFreq+0x114>)
 8004df2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	2b0c      	cmp	r3, #12
 8004df8:	d134      	bne.n	8004e64 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004dfa:	4b1e      	ldr	r3, [pc, #120]	; (8004e74 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	f003 0303 	and.w	r3, r3, #3
 8004e02:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d003      	beq.n	8004e12 <HAL_RCC_GetSysClockFreq+0xa6>
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	2b03      	cmp	r3, #3
 8004e0e:	d003      	beq.n	8004e18 <HAL_RCC_GetSysClockFreq+0xac>
 8004e10:	e005      	b.n	8004e1e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004e12:	4b1a      	ldr	r3, [pc, #104]	; (8004e7c <HAL_RCC_GetSysClockFreq+0x110>)
 8004e14:	617b      	str	r3, [r7, #20]
      break;
 8004e16:	e005      	b.n	8004e24 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004e18:	4b19      	ldr	r3, [pc, #100]	; (8004e80 <HAL_RCC_GetSysClockFreq+0x114>)
 8004e1a:	617b      	str	r3, [r7, #20]
      break;
 8004e1c:	e002      	b.n	8004e24 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	617b      	str	r3, [r7, #20]
      break;
 8004e22:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e24:	4b13      	ldr	r3, [pc, #76]	; (8004e74 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	091b      	lsrs	r3, r3, #4
 8004e2a:	f003 0307 	and.w	r3, r3, #7
 8004e2e:	3301      	adds	r3, #1
 8004e30:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004e32:	4b10      	ldr	r3, [pc, #64]	; (8004e74 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	0a1b      	lsrs	r3, r3, #8
 8004e38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e3c:	697a      	ldr	r2, [r7, #20]
 8004e3e:	fb03 f202 	mul.w	r2, r3, r2
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e48:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e4a:	4b0a      	ldr	r3, [pc, #40]	; (8004e74 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	0e5b      	lsrs	r3, r3, #25
 8004e50:	f003 0303 	and.w	r3, r3, #3
 8004e54:	3301      	adds	r3, #1
 8004e56:	005b      	lsls	r3, r3, #1
 8004e58:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e62:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004e64:	69bb      	ldr	r3, [r7, #24]
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3724      	adds	r7, #36	; 0x24
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	40021000 	.word	0x40021000
 8004e78:	0800cbb0 	.word	0x0800cbb0
 8004e7c:	00f42400 	.word	0x00f42400
 8004e80:	007a1200 	.word	0x007a1200

08004e84 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e84:	b480      	push	{r7}
 8004e86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e88:	4b03      	ldr	r3, [pc, #12]	; (8004e98 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	20000004 	.word	0x20000004

08004e9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004ea0:	f7ff fff0 	bl	8004e84 <HAL_RCC_GetHCLKFreq>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	4b06      	ldr	r3, [pc, #24]	; (8004ec0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	0a1b      	lsrs	r3, r3, #8
 8004eac:	f003 0307 	and.w	r3, r3, #7
 8004eb0:	4904      	ldr	r1, [pc, #16]	; (8004ec4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004eb2:	5ccb      	ldrb	r3, [r1, r3]
 8004eb4:	f003 031f 	and.w	r3, r3, #31
 8004eb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	40021000 	.word	0x40021000
 8004ec4:	0800cba8 	.word	0x0800cba8

08004ec8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004ecc:	f7ff ffda 	bl	8004e84 <HAL_RCC_GetHCLKFreq>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	4b06      	ldr	r3, [pc, #24]	; (8004eec <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	0adb      	lsrs	r3, r3, #11
 8004ed8:	f003 0307 	and.w	r3, r3, #7
 8004edc:	4904      	ldr	r1, [pc, #16]	; (8004ef0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004ede:	5ccb      	ldrb	r3, [r1, r3]
 8004ee0:	f003 031f 	and.w	r3, r3, #31
 8004ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	40021000 	.word	0x40021000
 8004ef0:	0800cba8 	.word	0x0800cba8

08004ef4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b086      	sub	sp, #24
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004efc:	2300      	movs	r3, #0
 8004efe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004f00:	4b2a      	ldr	r3, [pc, #168]	; (8004fac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d003      	beq.n	8004f14 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004f0c:	f7ff fa00 	bl	8004310 <HAL_PWREx_GetVoltageRange>
 8004f10:	6178      	str	r0, [r7, #20]
 8004f12:	e014      	b.n	8004f3e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f14:	4b25      	ldr	r3, [pc, #148]	; (8004fac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f18:	4a24      	ldr	r2, [pc, #144]	; (8004fac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f1e:	6593      	str	r3, [r2, #88]	; 0x58
 8004f20:	4b22      	ldr	r3, [pc, #136]	; (8004fac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f28:	60fb      	str	r3, [r7, #12]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004f2c:	f7ff f9f0 	bl	8004310 <HAL_PWREx_GetVoltageRange>
 8004f30:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004f32:	4b1e      	ldr	r3, [pc, #120]	; (8004fac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f36:	4a1d      	ldr	r2, [pc, #116]	; (8004fac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f3c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f44:	d10b      	bne.n	8004f5e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2b80      	cmp	r3, #128	; 0x80
 8004f4a:	d919      	bls.n	8004f80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2ba0      	cmp	r3, #160	; 0xa0
 8004f50:	d902      	bls.n	8004f58 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f52:	2302      	movs	r3, #2
 8004f54:	613b      	str	r3, [r7, #16]
 8004f56:	e013      	b.n	8004f80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f58:	2301      	movs	r3, #1
 8004f5a:	613b      	str	r3, [r7, #16]
 8004f5c:	e010      	b.n	8004f80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2b80      	cmp	r3, #128	; 0x80
 8004f62:	d902      	bls.n	8004f6a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004f64:	2303      	movs	r3, #3
 8004f66:	613b      	str	r3, [r7, #16]
 8004f68:	e00a      	b.n	8004f80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2b80      	cmp	r3, #128	; 0x80
 8004f6e:	d102      	bne.n	8004f76 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f70:	2302      	movs	r3, #2
 8004f72:	613b      	str	r3, [r7, #16]
 8004f74:	e004      	b.n	8004f80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2b70      	cmp	r3, #112	; 0x70
 8004f7a:	d101      	bne.n	8004f80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004f80:	4b0b      	ldr	r3, [pc, #44]	; (8004fb0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f023 0207 	bic.w	r2, r3, #7
 8004f88:	4909      	ldr	r1, [pc, #36]	; (8004fb0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004f90:	4b07      	ldr	r3, [pc, #28]	; (8004fb0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0307 	and.w	r3, r3, #7
 8004f98:	693a      	ldr	r2, [r7, #16]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d001      	beq.n	8004fa2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e000      	b.n	8004fa4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004fa2:	2300      	movs	r3, #0
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3718      	adds	r7, #24
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	40021000 	.word	0x40021000
 8004fb0:	40022000 	.word	0x40022000

08004fb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b086      	sub	sp, #24
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d041      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fd4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004fd8:	d02a      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004fda:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004fde:	d824      	bhi.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004fe0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004fe4:	d008      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004fe6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004fea:	d81e      	bhi.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d00a      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004ff0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ff4:	d010      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004ff6:	e018      	b.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ff8:	4b86      	ldr	r3, [pc, #536]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	4a85      	ldr	r2, [pc, #532]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ffe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005002:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005004:	e015      	b.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	3304      	adds	r3, #4
 800500a:	2100      	movs	r1, #0
 800500c:	4618      	mov	r0, r3
 800500e:	f000 fabb 	bl	8005588 <RCCEx_PLLSAI1_Config>
 8005012:	4603      	mov	r3, r0
 8005014:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005016:	e00c      	b.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	3320      	adds	r3, #32
 800501c:	2100      	movs	r1, #0
 800501e:	4618      	mov	r0, r3
 8005020:	f000 fba6 	bl	8005770 <RCCEx_PLLSAI2_Config>
 8005024:	4603      	mov	r3, r0
 8005026:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005028:	e003      	b.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	74fb      	strb	r3, [r7, #19]
      break;
 800502e:	e000      	b.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005030:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005032:	7cfb      	ldrb	r3, [r7, #19]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d10b      	bne.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005038:	4b76      	ldr	r3, [pc, #472]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800503a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800503e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005046:	4973      	ldr	r1, [pc, #460]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005048:	4313      	orrs	r3, r2
 800504a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800504e:	e001      	b.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005050:	7cfb      	ldrb	r3, [r7, #19]
 8005052:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d041      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005064:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005068:	d02a      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800506a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800506e:	d824      	bhi.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005070:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005074:	d008      	beq.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005076:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800507a:	d81e      	bhi.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x106>
 800507c:	2b00      	cmp	r3, #0
 800507e:	d00a      	beq.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005080:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005084:	d010      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005086:	e018      	b.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005088:	4b62      	ldr	r3, [pc, #392]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	4a61      	ldr	r2, [pc, #388]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800508e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005092:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005094:	e015      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	3304      	adds	r3, #4
 800509a:	2100      	movs	r1, #0
 800509c:	4618      	mov	r0, r3
 800509e:	f000 fa73 	bl	8005588 <RCCEx_PLLSAI1_Config>
 80050a2:	4603      	mov	r3, r0
 80050a4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80050a6:	e00c      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	3320      	adds	r3, #32
 80050ac:	2100      	movs	r1, #0
 80050ae:	4618      	mov	r0, r3
 80050b0:	f000 fb5e 	bl	8005770 <RCCEx_PLLSAI2_Config>
 80050b4:	4603      	mov	r3, r0
 80050b6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80050b8:	e003      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	74fb      	strb	r3, [r7, #19]
      break;
 80050be:	e000      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80050c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050c2:	7cfb      	ldrb	r3, [r7, #19]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d10b      	bne.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80050c8:	4b52      	ldr	r3, [pc, #328]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ce:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050d6:	494f      	ldr	r1, [pc, #316]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050d8:	4313      	orrs	r3, r2
 80050da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80050de:	e001      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050e0:	7cfb      	ldrb	r3, [r7, #19]
 80050e2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f000 80a0 	beq.w	8005232 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050f2:	2300      	movs	r3, #0
 80050f4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80050f6:	4b47      	ldr	r3, [pc, #284]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d101      	bne.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005102:	2301      	movs	r3, #1
 8005104:	e000      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005106:	2300      	movs	r3, #0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d00d      	beq.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800510c:	4b41      	ldr	r3, [pc, #260]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800510e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005110:	4a40      	ldr	r2, [pc, #256]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005112:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005116:	6593      	str	r3, [r2, #88]	; 0x58
 8005118:	4b3e      	ldr	r3, [pc, #248]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800511a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800511c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005120:	60bb      	str	r3, [r7, #8]
 8005122:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005124:	2301      	movs	r3, #1
 8005126:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005128:	4b3b      	ldr	r3, [pc, #236]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a3a      	ldr	r2, [pc, #232]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800512e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005132:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005134:	f7fc ff84 	bl	8002040 <HAL_GetTick>
 8005138:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800513a:	e009      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800513c:	f7fc ff80 	bl	8002040 <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	2b02      	cmp	r3, #2
 8005148:	d902      	bls.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	74fb      	strb	r3, [r7, #19]
        break;
 800514e:	e005      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005150:	4b31      	ldr	r3, [pc, #196]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005158:	2b00      	cmp	r3, #0
 800515a:	d0ef      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800515c:	7cfb      	ldrb	r3, [r7, #19]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d15c      	bne.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005162:	4b2c      	ldr	r3, [pc, #176]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005168:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800516c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d01f      	beq.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800517a:	697a      	ldr	r2, [r7, #20]
 800517c:	429a      	cmp	r2, r3
 800517e:	d019      	beq.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005180:	4b24      	ldr	r3, [pc, #144]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005186:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800518a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800518c:	4b21      	ldr	r3, [pc, #132]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800518e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005192:	4a20      	ldr	r2, [pc, #128]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005198:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800519c:	4b1d      	ldr	r3, [pc, #116]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800519e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051a2:	4a1c      	ldr	r2, [pc, #112]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80051ac:	4a19      	ldr	r2, [pc, #100]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	f003 0301 	and.w	r3, r3, #1
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d016      	beq.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051be:	f7fc ff3f 	bl	8002040 <HAL_GetTick>
 80051c2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051c4:	e00b      	b.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051c6:	f7fc ff3b 	bl	8002040 <HAL_GetTick>
 80051ca:	4602      	mov	r2, r0
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d902      	bls.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80051d8:	2303      	movs	r3, #3
 80051da:	74fb      	strb	r3, [r7, #19]
            break;
 80051dc:	e006      	b.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051de:	4b0d      	ldr	r3, [pc, #52]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051e4:	f003 0302 	and.w	r3, r3, #2
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d0ec      	beq.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80051ec:	7cfb      	ldrb	r3, [r7, #19]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d10c      	bne.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051f2:	4b08      	ldr	r3, [pc, #32]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005202:	4904      	ldr	r1, [pc, #16]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005204:	4313      	orrs	r3, r2
 8005206:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800520a:	e009      	b.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800520c:	7cfb      	ldrb	r3, [r7, #19]
 800520e:	74bb      	strb	r3, [r7, #18]
 8005210:	e006      	b.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005212:	bf00      	nop
 8005214:	40021000 	.word	0x40021000
 8005218:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800521c:	7cfb      	ldrb	r3, [r7, #19]
 800521e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005220:	7c7b      	ldrb	r3, [r7, #17]
 8005222:	2b01      	cmp	r3, #1
 8005224:	d105      	bne.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005226:	4b9e      	ldr	r3, [pc, #632]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800522a:	4a9d      	ldr	r2, [pc, #628]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800522c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005230:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0301 	and.w	r3, r3, #1
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00a      	beq.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800523e:	4b98      	ldr	r3, [pc, #608]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005244:	f023 0203 	bic.w	r2, r3, #3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524c:	4994      	ldr	r1, [pc, #592]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800524e:	4313      	orrs	r3, r2
 8005250:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 0302 	and.w	r3, r3, #2
 800525c:	2b00      	cmp	r3, #0
 800525e:	d00a      	beq.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005260:	4b8f      	ldr	r3, [pc, #572]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005266:	f023 020c 	bic.w	r2, r3, #12
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800526e:	498c      	ldr	r1, [pc, #560]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005270:	4313      	orrs	r3, r2
 8005272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 0304 	and.w	r3, r3, #4
 800527e:	2b00      	cmp	r3, #0
 8005280:	d00a      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005282:	4b87      	ldr	r3, [pc, #540]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005288:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005290:	4983      	ldr	r1, [pc, #524]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005292:	4313      	orrs	r3, r2
 8005294:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 0308 	and.w	r3, r3, #8
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00a      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80052a4:	4b7e      	ldr	r3, [pc, #504]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052b2:	497b      	ldr	r1, [pc, #492]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052b4:	4313      	orrs	r3, r2
 80052b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0310 	and.w	r3, r3, #16
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00a      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80052c6:	4b76      	ldr	r3, [pc, #472]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052d4:	4972      	ldr	r1, [pc, #456]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052d6:	4313      	orrs	r3, r2
 80052d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0320 	and.w	r3, r3, #32
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d00a      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80052e8:	4b6d      	ldr	r3, [pc, #436]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052f6:	496a      	ldr	r1, [pc, #424]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052f8:	4313      	orrs	r3, r2
 80052fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00a      	beq.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800530a:	4b65      	ldr	r3, [pc, #404]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800530c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005310:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005318:	4961      	ldr	r1, [pc, #388]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800531a:	4313      	orrs	r3, r2
 800531c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00a      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800532c:	4b5c      	ldr	r3, [pc, #368]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800532e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005332:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800533a:	4959      	ldr	r1, [pc, #356]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800533c:	4313      	orrs	r3, r2
 800533e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00a      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800534e:	4b54      	ldr	r3, [pc, #336]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005354:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800535c:	4950      	ldr	r1, [pc, #320]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800535e:	4313      	orrs	r3, r2
 8005360:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00a      	beq.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005370:	4b4b      	ldr	r3, [pc, #300]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005376:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800537e:	4948      	ldr	r1, [pc, #288]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005380:	4313      	orrs	r3, r2
 8005382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00a      	beq.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005392:	4b43      	ldr	r3, [pc, #268]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005398:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053a0:	493f      	ldr	r1, [pc, #252]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053a2:	4313      	orrs	r3, r2
 80053a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d028      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80053b4:	4b3a      	ldr	r3, [pc, #232]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053c2:	4937      	ldr	r1, [pc, #220]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053c4:	4313      	orrs	r3, r2
 80053c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053d2:	d106      	bne.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053d4:	4b32      	ldr	r3, [pc, #200]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	4a31      	ldr	r2, [pc, #196]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053de:	60d3      	str	r3, [r2, #12]
 80053e0:	e011      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053ea:	d10c      	bne.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	3304      	adds	r3, #4
 80053f0:	2101      	movs	r1, #1
 80053f2:	4618      	mov	r0, r3
 80053f4:	f000 f8c8 	bl	8005588 <RCCEx_PLLSAI1_Config>
 80053f8:	4603      	mov	r3, r0
 80053fa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80053fc:	7cfb      	ldrb	r3, [r7, #19]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d001      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005402:	7cfb      	ldrb	r3, [r7, #19]
 8005404:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800540e:	2b00      	cmp	r3, #0
 8005410:	d028      	beq.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005412:	4b23      	ldr	r3, [pc, #140]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005418:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005420:	491f      	ldr	r1, [pc, #124]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005422:	4313      	orrs	r3, r2
 8005424:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800542c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005430:	d106      	bne.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005432:	4b1b      	ldr	r3, [pc, #108]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	4a1a      	ldr	r2, [pc, #104]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005438:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800543c:	60d3      	str	r3, [r2, #12]
 800543e:	e011      	b.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005444:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005448:	d10c      	bne.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	3304      	adds	r3, #4
 800544e:	2101      	movs	r1, #1
 8005450:	4618      	mov	r0, r3
 8005452:	f000 f899 	bl	8005588 <RCCEx_PLLSAI1_Config>
 8005456:	4603      	mov	r3, r0
 8005458:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800545a:	7cfb      	ldrb	r3, [r7, #19]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d001      	beq.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005460:	7cfb      	ldrb	r3, [r7, #19]
 8005462:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800546c:	2b00      	cmp	r3, #0
 800546e:	d02b      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005470:	4b0b      	ldr	r3, [pc, #44]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005476:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800547e:	4908      	ldr	r1, [pc, #32]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005480:	4313      	orrs	r3, r2
 8005482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800548a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800548e:	d109      	bne.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005490:	4b03      	ldr	r3, [pc, #12]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	4a02      	ldr	r2, [pc, #8]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005496:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800549a:	60d3      	str	r3, [r2, #12]
 800549c:	e014      	b.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800549e:	bf00      	nop
 80054a0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054ac:	d10c      	bne.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	3304      	adds	r3, #4
 80054b2:	2101      	movs	r1, #1
 80054b4:	4618      	mov	r0, r3
 80054b6:	f000 f867 	bl	8005588 <RCCEx_PLLSAI1_Config>
 80054ba:	4603      	mov	r3, r0
 80054bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054be:	7cfb      	ldrb	r3, [r7, #19]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d001      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80054c4:	7cfb      	ldrb	r3, [r7, #19]
 80054c6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d02f      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80054d4:	4b2b      	ldr	r3, [pc, #172]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80054d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054da:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054e2:	4928      	ldr	r1, [pc, #160]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80054e4:	4313      	orrs	r3, r2
 80054e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054f2:	d10d      	bne.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	3304      	adds	r3, #4
 80054f8:	2102      	movs	r1, #2
 80054fa:	4618      	mov	r0, r3
 80054fc:	f000 f844 	bl	8005588 <RCCEx_PLLSAI1_Config>
 8005500:	4603      	mov	r3, r0
 8005502:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005504:	7cfb      	ldrb	r3, [r7, #19]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d014      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800550a:	7cfb      	ldrb	r3, [r7, #19]
 800550c:	74bb      	strb	r3, [r7, #18]
 800550e:	e011      	b.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005514:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005518:	d10c      	bne.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	3320      	adds	r3, #32
 800551e:	2102      	movs	r1, #2
 8005520:	4618      	mov	r0, r3
 8005522:	f000 f925 	bl	8005770 <RCCEx_PLLSAI2_Config>
 8005526:	4603      	mov	r3, r0
 8005528:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800552a:	7cfb      	ldrb	r3, [r7, #19]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d001      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005530:	7cfb      	ldrb	r3, [r7, #19]
 8005532:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00a      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005540:	4b10      	ldr	r3, [pc, #64]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005546:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800554e:	490d      	ldr	r1, [pc, #52]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005550:	4313      	orrs	r3, r2
 8005552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800555e:	2b00      	cmp	r3, #0
 8005560:	d00b      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005562:	4b08      	ldr	r3, [pc, #32]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005568:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005572:	4904      	ldr	r1, [pc, #16]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005574:	4313      	orrs	r3, r2
 8005576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800557a:	7cbb      	ldrb	r3, [r7, #18]
}
 800557c:	4618      	mov	r0, r3
 800557e:	3718      	adds	r7, #24
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}
 8005584:	40021000 	.word	0x40021000

08005588 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005592:	2300      	movs	r3, #0
 8005594:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005596:	4b75      	ldr	r3, [pc, #468]	; (800576c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	f003 0303 	and.w	r3, r3, #3
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d018      	beq.n	80055d4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80055a2:	4b72      	ldr	r3, [pc, #456]	; (800576c <RCCEx_PLLSAI1_Config+0x1e4>)
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	f003 0203 	and.w	r2, r3, #3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d10d      	bne.n	80055ce <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
       ||
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d009      	beq.n	80055ce <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80055ba:	4b6c      	ldr	r3, [pc, #432]	; (800576c <RCCEx_PLLSAI1_Config+0x1e4>)
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	091b      	lsrs	r3, r3, #4
 80055c0:	f003 0307 	and.w	r3, r3, #7
 80055c4:	1c5a      	adds	r2, r3, #1
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	685b      	ldr	r3, [r3, #4]
       ||
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d047      	beq.n	800565e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	73fb      	strb	r3, [r7, #15]
 80055d2:	e044      	b.n	800565e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2b03      	cmp	r3, #3
 80055da:	d018      	beq.n	800560e <RCCEx_PLLSAI1_Config+0x86>
 80055dc:	2b03      	cmp	r3, #3
 80055de:	d825      	bhi.n	800562c <RCCEx_PLLSAI1_Config+0xa4>
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d002      	beq.n	80055ea <RCCEx_PLLSAI1_Config+0x62>
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	d009      	beq.n	80055fc <RCCEx_PLLSAI1_Config+0x74>
 80055e8:	e020      	b.n	800562c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80055ea:	4b60      	ldr	r3, [pc, #384]	; (800576c <RCCEx_PLLSAI1_Config+0x1e4>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 0302 	and.w	r3, r3, #2
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d11d      	bne.n	8005632 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055fa:	e01a      	b.n	8005632 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80055fc:	4b5b      	ldr	r3, [pc, #364]	; (800576c <RCCEx_PLLSAI1_Config+0x1e4>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005604:	2b00      	cmp	r3, #0
 8005606:	d116      	bne.n	8005636 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800560c:	e013      	b.n	8005636 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800560e:	4b57      	ldr	r3, [pc, #348]	; (800576c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d10f      	bne.n	800563a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800561a:	4b54      	ldr	r3, [pc, #336]	; (800576c <RCCEx_PLLSAI1_Config+0x1e4>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d109      	bne.n	800563a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800562a:	e006      	b.n	800563a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	73fb      	strb	r3, [r7, #15]
      break;
 8005630:	e004      	b.n	800563c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005632:	bf00      	nop
 8005634:	e002      	b.n	800563c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005636:	bf00      	nop
 8005638:	e000      	b.n	800563c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800563a:	bf00      	nop
    }

    if(status == HAL_OK)
 800563c:	7bfb      	ldrb	r3, [r7, #15]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d10d      	bne.n	800565e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005642:	4b4a      	ldr	r3, [pc, #296]	; (800576c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6819      	ldr	r1, [r3, #0]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	3b01      	subs	r3, #1
 8005654:	011b      	lsls	r3, r3, #4
 8005656:	430b      	orrs	r3, r1
 8005658:	4944      	ldr	r1, [pc, #272]	; (800576c <RCCEx_PLLSAI1_Config+0x1e4>)
 800565a:	4313      	orrs	r3, r2
 800565c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800565e:	7bfb      	ldrb	r3, [r7, #15]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d17d      	bne.n	8005760 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005664:	4b41      	ldr	r3, [pc, #260]	; (800576c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a40      	ldr	r2, [pc, #256]	; (800576c <RCCEx_PLLSAI1_Config+0x1e4>)
 800566a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800566e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005670:	f7fc fce6 	bl	8002040 <HAL_GetTick>
 8005674:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005676:	e009      	b.n	800568c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005678:	f7fc fce2 	bl	8002040 <HAL_GetTick>
 800567c:	4602      	mov	r2, r0
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	2b02      	cmp	r3, #2
 8005684:	d902      	bls.n	800568c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005686:	2303      	movs	r3, #3
 8005688:	73fb      	strb	r3, [r7, #15]
        break;
 800568a:	e005      	b.n	8005698 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800568c:	4b37      	ldr	r3, [pc, #220]	; (800576c <RCCEx_PLLSAI1_Config+0x1e4>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005694:	2b00      	cmp	r3, #0
 8005696:	d1ef      	bne.n	8005678 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005698:	7bfb      	ldrb	r3, [r7, #15]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d160      	bne.n	8005760 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d111      	bne.n	80056c8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056a4:	4b31      	ldr	r3, [pc, #196]	; (800576c <RCCEx_PLLSAI1_Config+0x1e4>)
 80056a6:	691b      	ldr	r3, [r3, #16]
 80056a8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80056ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	6892      	ldr	r2, [r2, #8]
 80056b4:	0211      	lsls	r1, r2, #8
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	68d2      	ldr	r2, [r2, #12]
 80056ba:	0912      	lsrs	r2, r2, #4
 80056bc:	0452      	lsls	r2, r2, #17
 80056be:	430a      	orrs	r2, r1
 80056c0:	492a      	ldr	r1, [pc, #168]	; (800576c <RCCEx_PLLSAI1_Config+0x1e4>)
 80056c2:	4313      	orrs	r3, r2
 80056c4:	610b      	str	r3, [r1, #16]
 80056c6:	e027      	b.n	8005718 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d112      	bne.n	80056f4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056ce:	4b27      	ldr	r3, [pc, #156]	; (800576c <RCCEx_PLLSAI1_Config+0x1e4>)
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80056d6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	6892      	ldr	r2, [r2, #8]
 80056de:	0211      	lsls	r1, r2, #8
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	6912      	ldr	r2, [r2, #16]
 80056e4:	0852      	lsrs	r2, r2, #1
 80056e6:	3a01      	subs	r2, #1
 80056e8:	0552      	lsls	r2, r2, #21
 80056ea:	430a      	orrs	r2, r1
 80056ec:	491f      	ldr	r1, [pc, #124]	; (800576c <RCCEx_PLLSAI1_Config+0x1e4>)
 80056ee:	4313      	orrs	r3, r2
 80056f0:	610b      	str	r3, [r1, #16]
 80056f2:	e011      	b.n	8005718 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056f4:	4b1d      	ldr	r3, [pc, #116]	; (800576c <RCCEx_PLLSAI1_Config+0x1e4>)
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80056fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	6892      	ldr	r2, [r2, #8]
 8005704:	0211      	lsls	r1, r2, #8
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	6952      	ldr	r2, [r2, #20]
 800570a:	0852      	lsrs	r2, r2, #1
 800570c:	3a01      	subs	r2, #1
 800570e:	0652      	lsls	r2, r2, #25
 8005710:	430a      	orrs	r2, r1
 8005712:	4916      	ldr	r1, [pc, #88]	; (800576c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005714:	4313      	orrs	r3, r2
 8005716:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005718:	4b14      	ldr	r3, [pc, #80]	; (800576c <RCCEx_PLLSAI1_Config+0x1e4>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a13      	ldr	r2, [pc, #76]	; (800576c <RCCEx_PLLSAI1_Config+0x1e4>)
 800571e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005722:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005724:	f7fc fc8c 	bl	8002040 <HAL_GetTick>
 8005728:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800572a:	e009      	b.n	8005740 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800572c:	f7fc fc88 	bl	8002040 <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	2b02      	cmp	r3, #2
 8005738:	d902      	bls.n	8005740 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	73fb      	strb	r3, [r7, #15]
          break;
 800573e:	e005      	b.n	800574c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005740:	4b0a      	ldr	r3, [pc, #40]	; (800576c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005748:	2b00      	cmp	r3, #0
 800574a:	d0ef      	beq.n	800572c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800574c:	7bfb      	ldrb	r3, [r7, #15]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d106      	bne.n	8005760 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005752:	4b06      	ldr	r3, [pc, #24]	; (800576c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005754:	691a      	ldr	r2, [r3, #16]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	699b      	ldr	r3, [r3, #24]
 800575a:	4904      	ldr	r1, [pc, #16]	; (800576c <RCCEx_PLLSAI1_Config+0x1e4>)
 800575c:	4313      	orrs	r3, r2
 800575e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005760:	7bfb      	ldrb	r3, [r7, #15]
}
 8005762:	4618      	mov	r0, r3
 8005764:	3710      	adds	r7, #16
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	40021000 	.word	0x40021000

08005770 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800577a:	2300      	movs	r3, #0
 800577c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800577e:	4b6a      	ldr	r3, [pc, #424]	; (8005928 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	f003 0303 	and.w	r3, r3, #3
 8005786:	2b00      	cmp	r3, #0
 8005788:	d018      	beq.n	80057bc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800578a:	4b67      	ldr	r3, [pc, #412]	; (8005928 <RCCEx_PLLSAI2_Config+0x1b8>)
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	f003 0203 	and.w	r2, r3, #3
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	429a      	cmp	r2, r3
 8005798:	d10d      	bne.n	80057b6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
       ||
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d009      	beq.n	80057b6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80057a2:	4b61      	ldr	r3, [pc, #388]	; (8005928 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	091b      	lsrs	r3, r3, #4
 80057a8:	f003 0307 	and.w	r3, r3, #7
 80057ac:	1c5a      	adds	r2, r3, #1
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	685b      	ldr	r3, [r3, #4]
       ||
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d047      	beq.n	8005846 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	73fb      	strb	r3, [r7, #15]
 80057ba:	e044      	b.n	8005846 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2b03      	cmp	r3, #3
 80057c2:	d018      	beq.n	80057f6 <RCCEx_PLLSAI2_Config+0x86>
 80057c4:	2b03      	cmp	r3, #3
 80057c6:	d825      	bhi.n	8005814 <RCCEx_PLLSAI2_Config+0xa4>
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d002      	beq.n	80057d2 <RCCEx_PLLSAI2_Config+0x62>
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d009      	beq.n	80057e4 <RCCEx_PLLSAI2_Config+0x74>
 80057d0:	e020      	b.n	8005814 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80057d2:	4b55      	ldr	r3, [pc, #340]	; (8005928 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 0302 	and.w	r3, r3, #2
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d11d      	bne.n	800581a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057e2:	e01a      	b.n	800581a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80057e4:	4b50      	ldr	r3, [pc, #320]	; (8005928 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d116      	bne.n	800581e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057f4:	e013      	b.n	800581e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80057f6:	4b4c      	ldr	r3, [pc, #304]	; (8005928 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d10f      	bne.n	8005822 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005802:	4b49      	ldr	r3, [pc, #292]	; (8005928 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d109      	bne.n	8005822 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005812:	e006      	b.n	8005822 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	73fb      	strb	r3, [r7, #15]
      break;
 8005818:	e004      	b.n	8005824 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800581a:	bf00      	nop
 800581c:	e002      	b.n	8005824 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800581e:	bf00      	nop
 8005820:	e000      	b.n	8005824 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005822:	bf00      	nop
    }

    if(status == HAL_OK)
 8005824:	7bfb      	ldrb	r3, [r7, #15]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d10d      	bne.n	8005846 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800582a:	4b3f      	ldr	r3, [pc, #252]	; (8005928 <RCCEx_PLLSAI2_Config+0x1b8>)
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6819      	ldr	r1, [r3, #0]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	3b01      	subs	r3, #1
 800583c:	011b      	lsls	r3, r3, #4
 800583e:	430b      	orrs	r3, r1
 8005840:	4939      	ldr	r1, [pc, #228]	; (8005928 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005842:	4313      	orrs	r3, r2
 8005844:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005846:	7bfb      	ldrb	r3, [r7, #15]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d167      	bne.n	800591c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800584c:	4b36      	ldr	r3, [pc, #216]	; (8005928 <RCCEx_PLLSAI2_Config+0x1b8>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a35      	ldr	r2, [pc, #212]	; (8005928 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005852:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005856:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005858:	f7fc fbf2 	bl	8002040 <HAL_GetTick>
 800585c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800585e:	e009      	b.n	8005874 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005860:	f7fc fbee 	bl	8002040 <HAL_GetTick>
 8005864:	4602      	mov	r2, r0
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	2b02      	cmp	r3, #2
 800586c:	d902      	bls.n	8005874 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	73fb      	strb	r3, [r7, #15]
        break;
 8005872:	e005      	b.n	8005880 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005874:	4b2c      	ldr	r3, [pc, #176]	; (8005928 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800587c:	2b00      	cmp	r3, #0
 800587e:	d1ef      	bne.n	8005860 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005880:	7bfb      	ldrb	r3, [r7, #15]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d14a      	bne.n	800591c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d111      	bne.n	80058b0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800588c:	4b26      	ldr	r3, [pc, #152]	; (8005928 <RCCEx_PLLSAI2_Config+0x1b8>)
 800588e:	695b      	ldr	r3, [r3, #20]
 8005890:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005894:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	6892      	ldr	r2, [r2, #8]
 800589c:	0211      	lsls	r1, r2, #8
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	68d2      	ldr	r2, [r2, #12]
 80058a2:	0912      	lsrs	r2, r2, #4
 80058a4:	0452      	lsls	r2, r2, #17
 80058a6:	430a      	orrs	r2, r1
 80058a8:	491f      	ldr	r1, [pc, #124]	; (8005928 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058aa:	4313      	orrs	r3, r2
 80058ac:	614b      	str	r3, [r1, #20]
 80058ae:	e011      	b.n	80058d4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80058b0:	4b1d      	ldr	r3, [pc, #116]	; (8005928 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058b2:	695b      	ldr	r3, [r3, #20]
 80058b4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80058b8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	6892      	ldr	r2, [r2, #8]
 80058c0:	0211      	lsls	r1, r2, #8
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	6912      	ldr	r2, [r2, #16]
 80058c6:	0852      	lsrs	r2, r2, #1
 80058c8:	3a01      	subs	r2, #1
 80058ca:	0652      	lsls	r2, r2, #25
 80058cc:	430a      	orrs	r2, r1
 80058ce:	4916      	ldr	r1, [pc, #88]	; (8005928 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058d0:	4313      	orrs	r3, r2
 80058d2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80058d4:	4b14      	ldr	r3, [pc, #80]	; (8005928 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a13      	ldr	r2, [pc, #76]	; (8005928 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058de:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058e0:	f7fc fbae 	bl	8002040 <HAL_GetTick>
 80058e4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80058e6:	e009      	b.n	80058fc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80058e8:	f7fc fbaa 	bl	8002040 <HAL_GetTick>
 80058ec:	4602      	mov	r2, r0
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	d902      	bls.n	80058fc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	73fb      	strb	r3, [r7, #15]
          break;
 80058fa:	e005      	b.n	8005908 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80058fc:	4b0a      	ldr	r3, [pc, #40]	; (8005928 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005904:	2b00      	cmp	r3, #0
 8005906:	d0ef      	beq.n	80058e8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005908:	7bfb      	ldrb	r3, [r7, #15]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d106      	bne.n	800591c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800590e:	4b06      	ldr	r3, [pc, #24]	; (8005928 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005910:	695a      	ldr	r2, [r3, #20]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	695b      	ldr	r3, [r3, #20]
 8005916:	4904      	ldr	r1, [pc, #16]	; (8005928 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005918:	4313      	orrs	r3, r2
 800591a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800591c:	7bfb      	ldrb	r3, [r7, #15]
}
 800591e:	4618      	mov	r0, r3
 8005920:	3710      	adds	r7, #16
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	40021000 	.word	0x40021000

0800592c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b082      	sub	sp, #8
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d101      	bne.n	800593e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e049      	b.n	80059d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005944:	b2db      	uxtb	r3, r3
 8005946:	2b00      	cmp	r3, #0
 8005948:	d106      	bne.n	8005958 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f7fc f812 	bl	800197c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2202      	movs	r2, #2
 800595c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	3304      	adds	r3, #4
 8005968:	4619      	mov	r1, r3
 800596a:	4610      	mov	r0, r2
 800596c:	f000 fccc 	bl	8006308 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3708      	adds	r7, #8
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}

080059da <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80059da:	b580      	push	{r7, lr}
 80059dc:	b082      	sub	sp, #8
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d101      	bne.n	80059ec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e049      	b.n	8005a80 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d106      	bne.n	8005a06 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f000 f841 	bl	8005a88 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2202      	movs	r2, #2
 8005a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	3304      	adds	r3, #4
 8005a16:	4619      	mov	r1, r3
 8005a18:	4610      	mov	r0, r2
 8005a1a:	f000 fc75 	bl	8006308 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2201      	movs	r2, #1
 8005a22:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2201      	movs	r2, #1
 8005a32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2201      	movs	r2, #1
 8005a42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2201      	movs	r2, #1
 8005a52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2201      	movs	r2, #1
 8005a62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2201      	movs	r2, #1
 8005a72:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a7e:	2300      	movs	r3, #0
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3708      	adds	r7, #8
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005a90:	bf00      	nop
 8005a92:	370c      	adds	r7, #12
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d109      	bne.n	8005ac0 <HAL_TIM_PWM_Start+0x24>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	bf14      	ite	ne
 8005ab8:	2301      	movne	r3, #1
 8005aba:	2300      	moveq	r3, #0
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	e03c      	b.n	8005b3a <HAL_TIM_PWM_Start+0x9e>
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	2b04      	cmp	r3, #4
 8005ac4:	d109      	bne.n	8005ada <HAL_TIM_PWM_Start+0x3e>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	bf14      	ite	ne
 8005ad2:	2301      	movne	r3, #1
 8005ad4:	2300      	moveq	r3, #0
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	e02f      	b.n	8005b3a <HAL_TIM_PWM_Start+0x9e>
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	2b08      	cmp	r3, #8
 8005ade:	d109      	bne.n	8005af4 <HAL_TIM_PWM_Start+0x58>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	bf14      	ite	ne
 8005aec:	2301      	movne	r3, #1
 8005aee:	2300      	moveq	r3, #0
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	e022      	b.n	8005b3a <HAL_TIM_PWM_Start+0x9e>
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	2b0c      	cmp	r3, #12
 8005af8:	d109      	bne.n	8005b0e <HAL_TIM_PWM_Start+0x72>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	bf14      	ite	ne
 8005b06:	2301      	movne	r3, #1
 8005b08:	2300      	moveq	r3, #0
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	e015      	b.n	8005b3a <HAL_TIM_PWM_Start+0x9e>
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	2b10      	cmp	r3, #16
 8005b12:	d109      	bne.n	8005b28 <HAL_TIM_PWM_Start+0x8c>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	bf14      	ite	ne
 8005b20:	2301      	movne	r3, #1
 8005b22:	2300      	moveq	r3, #0
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	e008      	b.n	8005b3a <HAL_TIM_PWM_Start+0x9e>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	bf14      	ite	ne
 8005b34:	2301      	movne	r3, #1
 8005b36:	2300      	moveq	r3, #0
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d001      	beq.n	8005b42 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e09c      	b.n	8005c7c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d104      	bne.n	8005b52 <HAL_TIM_PWM_Start+0xb6>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2202      	movs	r2, #2
 8005b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b50:	e023      	b.n	8005b9a <HAL_TIM_PWM_Start+0xfe>
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	2b04      	cmp	r3, #4
 8005b56:	d104      	bne.n	8005b62 <HAL_TIM_PWM_Start+0xc6>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2202      	movs	r2, #2
 8005b5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b60:	e01b      	b.n	8005b9a <HAL_TIM_PWM_Start+0xfe>
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	2b08      	cmp	r3, #8
 8005b66:	d104      	bne.n	8005b72 <HAL_TIM_PWM_Start+0xd6>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2202      	movs	r2, #2
 8005b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b70:	e013      	b.n	8005b9a <HAL_TIM_PWM_Start+0xfe>
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	2b0c      	cmp	r3, #12
 8005b76:	d104      	bne.n	8005b82 <HAL_TIM_PWM_Start+0xe6>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2202      	movs	r2, #2
 8005b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b80:	e00b      	b.n	8005b9a <HAL_TIM_PWM_Start+0xfe>
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	2b10      	cmp	r3, #16
 8005b86:	d104      	bne.n	8005b92 <HAL_TIM_PWM_Start+0xf6>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2202      	movs	r2, #2
 8005b8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b90:	e003      	b.n	8005b9a <HAL_TIM_PWM_Start+0xfe>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2202      	movs	r2, #2
 8005b96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	6839      	ldr	r1, [r7, #0]
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f000 ffba 	bl	8006b1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a35      	ldr	r2, [pc, #212]	; (8005c84 <HAL_TIM_PWM_Start+0x1e8>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d013      	beq.n	8005bda <HAL_TIM_PWM_Start+0x13e>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a34      	ldr	r2, [pc, #208]	; (8005c88 <HAL_TIM_PWM_Start+0x1ec>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d00e      	beq.n	8005bda <HAL_TIM_PWM_Start+0x13e>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a32      	ldr	r2, [pc, #200]	; (8005c8c <HAL_TIM_PWM_Start+0x1f0>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d009      	beq.n	8005bda <HAL_TIM_PWM_Start+0x13e>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a31      	ldr	r2, [pc, #196]	; (8005c90 <HAL_TIM_PWM_Start+0x1f4>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d004      	beq.n	8005bda <HAL_TIM_PWM_Start+0x13e>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a2f      	ldr	r2, [pc, #188]	; (8005c94 <HAL_TIM_PWM_Start+0x1f8>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d101      	bne.n	8005bde <HAL_TIM_PWM_Start+0x142>
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e000      	b.n	8005be0 <HAL_TIM_PWM_Start+0x144>
 8005bde:	2300      	movs	r3, #0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d007      	beq.n	8005bf4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005bf2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a22      	ldr	r2, [pc, #136]	; (8005c84 <HAL_TIM_PWM_Start+0x1e8>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d01d      	beq.n	8005c3a <HAL_TIM_PWM_Start+0x19e>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c06:	d018      	beq.n	8005c3a <HAL_TIM_PWM_Start+0x19e>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a22      	ldr	r2, [pc, #136]	; (8005c98 <HAL_TIM_PWM_Start+0x1fc>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d013      	beq.n	8005c3a <HAL_TIM_PWM_Start+0x19e>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a21      	ldr	r2, [pc, #132]	; (8005c9c <HAL_TIM_PWM_Start+0x200>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d00e      	beq.n	8005c3a <HAL_TIM_PWM_Start+0x19e>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a1f      	ldr	r2, [pc, #124]	; (8005ca0 <HAL_TIM_PWM_Start+0x204>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d009      	beq.n	8005c3a <HAL_TIM_PWM_Start+0x19e>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a17      	ldr	r2, [pc, #92]	; (8005c88 <HAL_TIM_PWM_Start+0x1ec>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d004      	beq.n	8005c3a <HAL_TIM_PWM_Start+0x19e>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a15      	ldr	r2, [pc, #84]	; (8005c8c <HAL_TIM_PWM_Start+0x1f0>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d115      	bne.n	8005c66 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	689a      	ldr	r2, [r3, #8]
 8005c40:	4b18      	ldr	r3, [pc, #96]	; (8005ca4 <HAL_TIM_PWM_Start+0x208>)
 8005c42:	4013      	ands	r3, r2
 8005c44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2b06      	cmp	r3, #6
 8005c4a:	d015      	beq.n	8005c78 <HAL_TIM_PWM_Start+0x1dc>
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c52:	d011      	beq.n	8005c78 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f042 0201 	orr.w	r2, r2, #1
 8005c62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c64:	e008      	b.n	8005c78 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f042 0201 	orr.w	r2, r2, #1
 8005c74:	601a      	str	r2, [r3, #0]
 8005c76:	e000      	b.n	8005c7a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c78:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c7a:	2300      	movs	r3, #0
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3710      	adds	r7, #16
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	40012c00 	.word	0x40012c00
 8005c88:	40013400 	.word	0x40013400
 8005c8c:	40014000 	.word	0x40014000
 8005c90:	40014400 	.word	0x40014400
 8005c94:	40014800 	.word	0x40014800
 8005c98:	40000400 	.word	0x40000400
 8005c9c:	40000800 	.word	0x40000800
 8005ca0:	40000c00 	.word	0x40000c00
 8005ca4:	00010007 	.word	0x00010007

08005ca8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b082      	sub	sp, #8
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	f003 0302 	and.w	r3, r3, #2
 8005cba:	2b02      	cmp	r3, #2
 8005cbc:	d122      	bne.n	8005d04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	f003 0302 	and.w	r3, r3, #2
 8005cc8:	2b02      	cmp	r3, #2
 8005cca:	d11b      	bne.n	8005d04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f06f 0202 	mvn.w	r2, #2
 8005cd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	699b      	ldr	r3, [r3, #24]
 8005ce2:	f003 0303 	and.w	r3, r3, #3
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d003      	beq.n	8005cf2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 faed 	bl	80062ca <HAL_TIM_IC_CaptureCallback>
 8005cf0:	e005      	b.n	8005cfe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 fadf 	bl	80062b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 faf0 	bl	80062de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	f003 0304 	and.w	r3, r3, #4
 8005d0e:	2b04      	cmp	r3, #4
 8005d10:	d122      	bne.n	8005d58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	f003 0304 	and.w	r3, r3, #4
 8005d1c:	2b04      	cmp	r3, #4
 8005d1e:	d11b      	bne.n	8005d58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f06f 0204 	mvn.w	r2, #4
 8005d28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2202      	movs	r2, #2
 8005d2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	699b      	ldr	r3, [r3, #24]
 8005d36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d003      	beq.n	8005d46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 fac3 	bl	80062ca <HAL_TIM_IC_CaptureCallback>
 8005d44:	e005      	b.n	8005d52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 fab5 	bl	80062b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f000 fac6 	bl	80062de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	f003 0308 	and.w	r3, r3, #8
 8005d62:	2b08      	cmp	r3, #8
 8005d64:	d122      	bne.n	8005dac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	f003 0308 	and.w	r3, r3, #8
 8005d70:	2b08      	cmp	r3, #8
 8005d72:	d11b      	bne.n	8005dac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f06f 0208 	mvn.w	r2, #8
 8005d7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2204      	movs	r2, #4
 8005d82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	69db      	ldr	r3, [r3, #28]
 8005d8a:	f003 0303 	and.w	r3, r3, #3
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d003      	beq.n	8005d9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 fa99 	bl	80062ca <HAL_TIM_IC_CaptureCallback>
 8005d98:	e005      	b.n	8005da6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 fa8b 	bl	80062b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f000 fa9c 	bl	80062de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	f003 0310 	and.w	r3, r3, #16
 8005db6:	2b10      	cmp	r3, #16
 8005db8:	d122      	bne.n	8005e00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	f003 0310 	and.w	r3, r3, #16
 8005dc4:	2b10      	cmp	r3, #16
 8005dc6:	d11b      	bne.n	8005e00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f06f 0210 	mvn.w	r2, #16
 8005dd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2208      	movs	r2, #8
 8005dd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	69db      	ldr	r3, [r3, #28]
 8005dde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d003      	beq.n	8005dee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 fa6f 	bl	80062ca <HAL_TIM_IC_CaptureCallback>
 8005dec:	e005      	b.n	8005dfa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 fa61 	bl	80062b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f000 fa72 	bl	80062de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	f003 0301 	and.w	r3, r3, #1
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d10e      	bne.n	8005e2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	f003 0301 	and.w	r3, r3, #1
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d107      	bne.n	8005e2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f06f 0201 	mvn.w	r2, #1
 8005e24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 fa3b 	bl	80062a2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e36:	2b80      	cmp	r3, #128	; 0x80
 8005e38:	d10e      	bne.n	8005e58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	68db      	ldr	r3, [r3, #12]
 8005e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e44:	2b80      	cmp	r3, #128	; 0x80
 8005e46:	d107      	bne.n	8005e58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 ff1a 	bl	8006c8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e66:	d10e      	bne.n	8005e86 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e72:	2b80      	cmp	r3, #128	; 0x80
 8005e74:	d107      	bne.n	8005e86 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005e7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 ff0d 	bl	8006ca0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	691b      	ldr	r3, [r3, #16]
 8005e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e90:	2b40      	cmp	r3, #64	; 0x40
 8005e92:	d10e      	bne.n	8005eb2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e9e:	2b40      	cmp	r3, #64	; 0x40
 8005ea0:	d107      	bne.n	8005eb2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005eaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 fa20 	bl	80062f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	691b      	ldr	r3, [r3, #16]
 8005eb8:	f003 0320 	and.w	r3, r3, #32
 8005ebc:	2b20      	cmp	r3, #32
 8005ebe:	d10e      	bne.n	8005ede <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	f003 0320 	and.w	r3, r3, #32
 8005eca:	2b20      	cmp	r3, #32
 8005ecc:	d107      	bne.n	8005ede <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f06f 0220 	mvn.w	r2, #32
 8005ed6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f000 fecd 	bl	8006c78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ede:	bf00      	nop
 8005ee0:	3708      	adds	r7, #8
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
	...

08005ee8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b086      	sub	sp, #24
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d101      	bne.n	8005f06 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005f02:	2302      	movs	r3, #2
 8005f04:	e0ff      	b.n	8006106 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2b14      	cmp	r3, #20
 8005f12:	f200 80f0 	bhi.w	80060f6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005f16:	a201      	add	r2, pc, #4	; (adr r2, 8005f1c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f1c:	08005f71 	.word	0x08005f71
 8005f20:	080060f7 	.word	0x080060f7
 8005f24:	080060f7 	.word	0x080060f7
 8005f28:	080060f7 	.word	0x080060f7
 8005f2c:	08005fb1 	.word	0x08005fb1
 8005f30:	080060f7 	.word	0x080060f7
 8005f34:	080060f7 	.word	0x080060f7
 8005f38:	080060f7 	.word	0x080060f7
 8005f3c:	08005ff3 	.word	0x08005ff3
 8005f40:	080060f7 	.word	0x080060f7
 8005f44:	080060f7 	.word	0x080060f7
 8005f48:	080060f7 	.word	0x080060f7
 8005f4c:	08006033 	.word	0x08006033
 8005f50:	080060f7 	.word	0x080060f7
 8005f54:	080060f7 	.word	0x080060f7
 8005f58:	080060f7 	.word	0x080060f7
 8005f5c:	08006075 	.word	0x08006075
 8005f60:	080060f7 	.word	0x080060f7
 8005f64:	080060f7 	.word	0x080060f7
 8005f68:	080060f7 	.word	0x080060f7
 8005f6c:	080060b5 	.word	0x080060b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	68b9      	ldr	r1, [r7, #8]
 8005f76:	4618      	mov	r0, r3
 8005f78:	f000 fa60 	bl	800643c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	699a      	ldr	r2, [r3, #24]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f042 0208 	orr.w	r2, r2, #8
 8005f8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	699a      	ldr	r2, [r3, #24]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f022 0204 	bic.w	r2, r2, #4
 8005f9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	6999      	ldr	r1, [r3, #24]
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	691a      	ldr	r2, [r3, #16]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	430a      	orrs	r2, r1
 8005fac:	619a      	str	r2, [r3, #24]
      break;
 8005fae:	e0a5      	b.n	80060fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	68b9      	ldr	r1, [r7, #8]
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f000 fad0 	bl	800655c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	699a      	ldr	r2, [r3, #24]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	699a      	ldr	r2, [r3, #24]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	6999      	ldr	r1, [r3, #24]
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	691b      	ldr	r3, [r3, #16]
 8005fe6:	021a      	lsls	r2, r3, #8
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	430a      	orrs	r2, r1
 8005fee:	619a      	str	r2, [r3, #24]
      break;
 8005ff0:	e084      	b.n	80060fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	68b9      	ldr	r1, [r7, #8]
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f000 fb39 	bl	8006670 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	69da      	ldr	r2, [r3, #28]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f042 0208 	orr.w	r2, r2, #8
 800600c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	69da      	ldr	r2, [r3, #28]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f022 0204 	bic.w	r2, r2, #4
 800601c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	69d9      	ldr	r1, [r3, #28]
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	691a      	ldr	r2, [r3, #16]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	430a      	orrs	r2, r1
 800602e:	61da      	str	r2, [r3, #28]
      break;
 8006030:	e064      	b.n	80060fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	68b9      	ldr	r1, [r7, #8]
 8006038:	4618      	mov	r0, r3
 800603a:	f000 fba1 	bl	8006780 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	69da      	ldr	r2, [r3, #28]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800604c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	69da      	ldr	r2, [r3, #28]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800605c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	69d9      	ldr	r1, [r3, #28]
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	691b      	ldr	r3, [r3, #16]
 8006068:	021a      	lsls	r2, r3, #8
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	430a      	orrs	r2, r1
 8006070:	61da      	str	r2, [r3, #28]
      break;
 8006072:	e043      	b.n	80060fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	68b9      	ldr	r1, [r7, #8]
 800607a:	4618      	mov	r0, r3
 800607c:	f000 fbea 	bl	8006854 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f042 0208 	orr.w	r2, r2, #8
 800608e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f022 0204 	bic.w	r2, r2, #4
 800609e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	691a      	ldr	r2, [r3, #16]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	430a      	orrs	r2, r1
 80060b0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80060b2:	e023      	b.n	80060fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	68b9      	ldr	r1, [r7, #8]
 80060ba:	4618      	mov	r0, r3
 80060bc:	f000 fc2e 	bl	800691c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	021a      	lsls	r2, r3, #8
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	430a      	orrs	r2, r1
 80060f2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80060f4:	e002      	b.n	80060fc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	75fb      	strb	r3, [r7, #23]
      break;
 80060fa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2200      	movs	r2, #0
 8006100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006104:	7dfb      	ldrb	r3, [r7, #23]
}
 8006106:	4618      	mov	r0, r3
 8006108:	3718      	adds	r7, #24
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop

08006110 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800611a:	2300      	movs	r3, #0
 800611c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006124:	2b01      	cmp	r3, #1
 8006126:	d101      	bne.n	800612c <HAL_TIM_ConfigClockSource+0x1c>
 8006128:	2302      	movs	r3, #2
 800612a:	e0b6      	b.n	800629a <HAL_TIM_ConfigClockSource+0x18a>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2202      	movs	r2, #2
 8006138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800614a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800614e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006156:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68ba      	ldr	r2, [r7, #8]
 800615e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006168:	d03e      	beq.n	80061e8 <HAL_TIM_ConfigClockSource+0xd8>
 800616a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800616e:	f200 8087 	bhi.w	8006280 <HAL_TIM_ConfigClockSource+0x170>
 8006172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006176:	f000 8086 	beq.w	8006286 <HAL_TIM_ConfigClockSource+0x176>
 800617a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800617e:	d87f      	bhi.n	8006280 <HAL_TIM_ConfigClockSource+0x170>
 8006180:	2b70      	cmp	r3, #112	; 0x70
 8006182:	d01a      	beq.n	80061ba <HAL_TIM_ConfigClockSource+0xaa>
 8006184:	2b70      	cmp	r3, #112	; 0x70
 8006186:	d87b      	bhi.n	8006280 <HAL_TIM_ConfigClockSource+0x170>
 8006188:	2b60      	cmp	r3, #96	; 0x60
 800618a:	d050      	beq.n	800622e <HAL_TIM_ConfigClockSource+0x11e>
 800618c:	2b60      	cmp	r3, #96	; 0x60
 800618e:	d877      	bhi.n	8006280 <HAL_TIM_ConfigClockSource+0x170>
 8006190:	2b50      	cmp	r3, #80	; 0x50
 8006192:	d03c      	beq.n	800620e <HAL_TIM_ConfigClockSource+0xfe>
 8006194:	2b50      	cmp	r3, #80	; 0x50
 8006196:	d873      	bhi.n	8006280 <HAL_TIM_ConfigClockSource+0x170>
 8006198:	2b40      	cmp	r3, #64	; 0x40
 800619a:	d058      	beq.n	800624e <HAL_TIM_ConfigClockSource+0x13e>
 800619c:	2b40      	cmp	r3, #64	; 0x40
 800619e:	d86f      	bhi.n	8006280 <HAL_TIM_ConfigClockSource+0x170>
 80061a0:	2b30      	cmp	r3, #48	; 0x30
 80061a2:	d064      	beq.n	800626e <HAL_TIM_ConfigClockSource+0x15e>
 80061a4:	2b30      	cmp	r3, #48	; 0x30
 80061a6:	d86b      	bhi.n	8006280 <HAL_TIM_ConfigClockSource+0x170>
 80061a8:	2b20      	cmp	r3, #32
 80061aa:	d060      	beq.n	800626e <HAL_TIM_ConfigClockSource+0x15e>
 80061ac:	2b20      	cmp	r3, #32
 80061ae:	d867      	bhi.n	8006280 <HAL_TIM_ConfigClockSource+0x170>
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d05c      	beq.n	800626e <HAL_TIM_ConfigClockSource+0x15e>
 80061b4:	2b10      	cmp	r3, #16
 80061b6:	d05a      	beq.n	800626e <HAL_TIM_ConfigClockSource+0x15e>
 80061b8:	e062      	b.n	8006280 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6818      	ldr	r0, [r3, #0]
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	6899      	ldr	r1, [r3, #8]
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	685a      	ldr	r2, [r3, #4]
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	f000 fc87 	bl	8006adc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80061dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	68ba      	ldr	r2, [r7, #8]
 80061e4:	609a      	str	r2, [r3, #8]
      break;
 80061e6:	e04f      	b.n	8006288 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6818      	ldr	r0, [r3, #0]
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	6899      	ldr	r1, [r3, #8]
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	685a      	ldr	r2, [r3, #4]
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	f000 fc70 	bl	8006adc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	689a      	ldr	r2, [r3, #8]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800620a:	609a      	str	r2, [r3, #8]
      break;
 800620c:	e03c      	b.n	8006288 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6818      	ldr	r0, [r3, #0]
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	6859      	ldr	r1, [r3, #4]
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	461a      	mov	r2, r3
 800621c:	f000 fbe4 	bl	80069e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2150      	movs	r1, #80	; 0x50
 8006226:	4618      	mov	r0, r3
 8006228:	f000 fc3d 	bl	8006aa6 <TIM_ITRx_SetConfig>
      break;
 800622c:	e02c      	b.n	8006288 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6818      	ldr	r0, [r3, #0]
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	6859      	ldr	r1, [r3, #4]
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	461a      	mov	r2, r3
 800623c:	f000 fc03 	bl	8006a46 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2160      	movs	r1, #96	; 0x60
 8006246:	4618      	mov	r0, r3
 8006248:	f000 fc2d 	bl	8006aa6 <TIM_ITRx_SetConfig>
      break;
 800624c:	e01c      	b.n	8006288 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6818      	ldr	r0, [r3, #0]
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	6859      	ldr	r1, [r3, #4]
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	461a      	mov	r2, r3
 800625c:	f000 fbc4 	bl	80069e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2140      	movs	r1, #64	; 0x40
 8006266:	4618      	mov	r0, r3
 8006268:	f000 fc1d 	bl	8006aa6 <TIM_ITRx_SetConfig>
      break;
 800626c:	e00c      	b.n	8006288 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4619      	mov	r1, r3
 8006278:	4610      	mov	r0, r2
 800627a:	f000 fc14 	bl	8006aa6 <TIM_ITRx_SetConfig>
      break;
 800627e:	e003      	b.n	8006288 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	73fb      	strb	r3, [r7, #15]
      break;
 8006284:	e000      	b.n	8006288 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006286:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006298:	7bfb      	ldrb	r3, [r7, #15]
}
 800629a:	4618      	mov	r0, r3
 800629c:	3710      	adds	r7, #16
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}

080062a2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062a2:	b480      	push	{r7}
 80062a4:	b083      	sub	sp, #12
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80062aa:	bf00      	nop
 80062ac:	370c      	adds	r7, #12
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr

080062b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062b6:	b480      	push	{r7}
 80062b8:	b083      	sub	sp, #12
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062be:	bf00      	nop
 80062c0:	370c      	adds	r7, #12
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr

080062ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062ca:	b480      	push	{r7}
 80062cc:	b083      	sub	sp, #12
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062d2:	bf00      	nop
 80062d4:	370c      	adds	r7, #12
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr

080062de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062de:	b480      	push	{r7}
 80062e0:	b083      	sub	sp, #12
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062e6:	bf00      	nop
 80062e8:	370c      	adds	r7, #12
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr

080062f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80062f2:	b480      	push	{r7}
 80062f4:	b083      	sub	sp, #12
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80062fa:	bf00      	nop
 80062fc:	370c      	adds	r7, #12
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr
	...

08006308 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006308:	b480      	push	{r7}
 800630a:	b085      	sub	sp, #20
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	4a40      	ldr	r2, [pc, #256]	; (800641c <TIM_Base_SetConfig+0x114>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d013      	beq.n	8006348 <TIM_Base_SetConfig+0x40>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006326:	d00f      	beq.n	8006348 <TIM_Base_SetConfig+0x40>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	4a3d      	ldr	r2, [pc, #244]	; (8006420 <TIM_Base_SetConfig+0x118>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d00b      	beq.n	8006348 <TIM_Base_SetConfig+0x40>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4a3c      	ldr	r2, [pc, #240]	; (8006424 <TIM_Base_SetConfig+0x11c>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d007      	beq.n	8006348 <TIM_Base_SetConfig+0x40>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4a3b      	ldr	r2, [pc, #236]	; (8006428 <TIM_Base_SetConfig+0x120>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d003      	beq.n	8006348 <TIM_Base_SetConfig+0x40>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4a3a      	ldr	r2, [pc, #232]	; (800642c <TIM_Base_SetConfig+0x124>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d108      	bne.n	800635a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800634e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	68fa      	ldr	r2, [r7, #12]
 8006356:	4313      	orrs	r3, r2
 8006358:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	4a2f      	ldr	r2, [pc, #188]	; (800641c <TIM_Base_SetConfig+0x114>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d01f      	beq.n	80063a2 <TIM_Base_SetConfig+0x9a>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006368:	d01b      	beq.n	80063a2 <TIM_Base_SetConfig+0x9a>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4a2c      	ldr	r2, [pc, #176]	; (8006420 <TIM_Base_SetConfig+0x118>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d017      	beq.n	80063a2 <TIM_Base_SetConfig+0x9a>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4a2b      	ldr	r2, [pc, #172]	; (8006424 <TIM_Base_SetConfig+0x11c>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d013      	beq.n	80063a2 <TIM_Base_SetConfig+0x9a>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a2a      	ldr	r2, [pc, #168]	; (8006428 <TIM_Base_SetConfig+0x120>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d00f      	beq.n	80063a2 <TIM_Base_SetConfig+0x9a>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a29      	ldr	r2, [pc, #164]	; (800642c <TIM_Base_SetConfig+0x124>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d00b      	beq.n	80063a2 <TIM_Base_SetConfig+0x9a>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a28      	ldr	r2, [pc, #160]	; (8006430 <TIM_Base_SetConfig+0x128>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d007      	beq.n	80063a2 <TIM_Base_SetConfig+0x9a>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a27      	ldr	r2, [pc, #156]	; (8006434 <TIM_Base_SetConfig+0x12c>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d003      	beq.n	80063a2 <TIM_Base_SetConfig+0x9a>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4a26      	ldr	r2, [pc, #152]	; (8006438 <TIM_Base_SetConfig+0x130>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d108      	bne.n	80063b4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	695b      	ldr	r3, [r3, #20]
 80063be:	4313      	orrs	r3, r2
 80063c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	689a      	ldr	r2, [r3, #8]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	4a10      	ldr	r2, [pc, #64]	; (800641c <TIM_Base_SetConfig+0x114>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d00f      	beq.n	8006400 <TIM_Base_SetConfig+0xf8>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4a12      	ldr	r2, [pc, #72]	; (800642c <TIM_Base_SetConfig+0x124>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d00b      	beq.n	8006400 <TIM_Base_SetConfig+0xf8>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	4a11      	ldr	r2, [pc, #68]	; (8006430 <TIM_Base_SetConfig+0x128>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d007      	beq.n	8006400 <TIM_Base_SetConfig+0xf8>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4a10      	ldr	r2, [pc, #64]	; (8006434 <TIM_Base_SetConfig+0x12c>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d003      	beq.n	8006400 <TIM_Base_SetConfig+0xf8>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4a0f      	ldr	r2, [pc, #60]	; (8006438 <TIM_Base_SetConfig+0x130>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d103      	bne.n	8006408 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	691a      	ldr	r2, [r3, #16]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2201      	movs	r2, #1
 800640c:	615a      	str	r2, [r3, #20]
}
 800640e:	bf00      	nop
 8006410:	3714      	adds	r7, #20
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr
 800641a:	bf00      	nop
 800641c:	40012c00 	.word	0x40012c00
 8006420:	40000400 	.word	0x40000400
 8006424:	40000800 	.word	0x40000800
 8006428:	40000c00 	.word	0x40000c00
 800642c:	40013400 	.word	0x40013400
 8006430:	40014000 	.word	0x40014000
 8006434:	40014400 	.word	0x40014400
 8006438:	40014800 	.word	0x40014800

0800643c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800643c:	b480      	push	{r7}
 800643e:	b087      	sub	sp, #28
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a1b      	ldr	r3, [r3, #32]
 800644a:	f023 0201 	bic.w	r2, r3, #1
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6a1b      	ldr	r3, [r3, #32]
 8006456:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	699b      	ldr	r3, [r3, #24]
 8006462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800646a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800646e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f023 0303 	bic.w	r3, r3, #3
 8006476:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	68fa      	ldr	r2, [r7, #12]
 800647e:	4313      	orrs	r3, r2
 8006480:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	f023 0302 	bic.w	r3, r3, #2
 8006488:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	697a      	ldr	r2, [r7, #20]
 8006490:	4313      	orrs	r3, r2
 8006492:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4a2c      	ldr	r2, [pc, #176]	; (8006548 <TIM_OC1_SetConfig+0x10c>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d00f      	beq.n	80064bc <TIM_OC1_SetConfig+0x80>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	4a2b      	ldr	r2, [pc, #172]	; (800654c <TIM_OC1_SetConfig+0x110>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d00b      	beq.n	80064bc <TIM_OC1_SetConfig+0x80>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	4a2a      	ldr	r2, [pc, #168]	; (8006550 <TIM_OC1_SetConfig+0x114>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d007      	beq.n	80064bc <TIM_OC1_SetConfig+0x80>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4a29      	ldr	r2, [pc, #164]	; (8006554 <TIM_OC1_SetConfig+0x118>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d003      	beq.n	80064bc <TIM_OC1_SetConfig+0x80>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a28      	ldr	r2, [pc, #160]	; (8006558 <TIM_OC1_SetConfig+0x11c>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d10c      	bne.n	80064d6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	f023 0308 	bic.w	r3, r3, #8
 80064c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	697a      	ldr	r2, [r7, #20]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	f023 0304 	bic.w	r3, r3, #4
 80064d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a1b      	ldr	r2, [pc, #108]	; (8006548 <TIM_OC1_SetConfig+0x10c>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d00f      	beq.n	80064fe <TIM_OC1_SetConfig+0xc2>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4a1a      	ldr	r2, [pc, #104]	; (800654c <TIM_OC1_SetConfig+0x110>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d00b      	beq.n	80064fe <TIM_OC1_SetConfig+0xc2>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a19      	ldr	r2, [pc, #100]	; (8006550 <TIM_OC1_SetConfig+0x114>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d007      	beq.n	80064fe <TIM_OC1_SetConfig+0xc2>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a18      	ldr	r2, [pc, #96]	; (8006554 <TIM_OC1_SetConfig+0x118>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d003      	beq.n	80064fe <TIM_OC1_SetConfig+0xc2>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4a17      	ldr	r2, [pc, #92]	; (8006558 <TIM_OC1_SetConfig+0x11c>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d111      	bne.n	8006522 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006504:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800650c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	695b      	ldr	r3, [r3, #20]
 8006512:	693a      	ldr	r2, [r7, #16]
 8006514:	4313      	orrs	r3, r2
 8006516:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	699b      	ldr	r3, [r3, #24]
 800651c:	693a      	ldr	r2, [r7, #16]
 800651e:	4313      	orrs	r3, r2
 8006520:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	693a      	ldr	r2, [r7, #16]
 8006526:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	68fa      	ldr	r2, [r7, #12]
 800652c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	685a      	ldr	r2, [r3, #4]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	697a      	ldr	r2, [r7, #20]
 800653a:	621a      	str	r2, [r3, #32]
}
 800653c:	bf00      	nop
 800653e:	371c      	adds	r7, #28
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr
 8006548:	40012c00 	.word	0x40012c00
 800654c:	40013400 	.word	0x40013400
 8006550:	40014000 	.word	0x40014000
 8006554:	40014400 	.word	0x40014400
 8006558:	40014800 	.word	0x40014800

0800655c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800655c:	b480      	push	{r7}
 800655e:	b087      	sub	sp, #28
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a1b      	ldr	r3, [r3, #32]
 800656a:	f023 0210 	bic.w	r2, r3, #16
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a1b      	ldr	r3, [r3, #32]
 8006576:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	699b      	ldr	r3, [r3, #24]
 8006582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800658a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800658e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006596:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	021b      	lsls	r3, r3, #8
 800659e:	68fa      	ldr	r2, [r7, #12]
 80065a0:	4313      	orrs	r3, r2
 80065a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	f023 0320 	bic.w	r3, r3, #32
 80065aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	011b      	lsls	r3, r3, #4
 80065b2:	697a      	ldr	r2, [r7, #20]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4a28      	ldr	r2, [pc, #160]	; (800665c <TIM_OC2_SetConfig+0x100>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d003      	beq.n	80065c8 <TIM_OC2_SetConfig+0x6c>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4a27      	ldr	r2, [pc, #156]	; (8006660 <TIM_OC2_SetConfig+0x104>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d10d      	bne.n	80065e4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	011b      	lsls	r3, r3, #4
 80065d6:	697a      	ldr	r2, [r7, #20]
 80065d8:	4313      	orrs	r3, r2
 80065da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	4a1d      	ldr	r2, [pc, #116]	; (800665c <TIM_OC2_SetConfig+0x100>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d00f      	beq.n	800660c <TIM_OC2_SetConfig+0xb0>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	4a1c      	ldr	r2, [pc, #112]	; (8006660 <TIM_OC2_SetConfig+0x104>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d00b      	beq.n	800660c <TIM_OC2_SetConfig+0xb0>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4a1b      	ldr	r2, [pc, #108]	; (8006664 <TIM_OC2_SetConfig+0x108>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d007      	beq.n	800660c <TIM_OC2_SetConfig+0xb0>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	4a1a      	ldr	r2, [pc, #104]	; (8006668 <TIM_OC2_SetConfig+0x10c>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d003      	beq.n	800660c <TIM_OC2_SetConfig+0xb0>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4a19      	ldr	r2, [pc, #100]	; (800666c <TIM_OC2_SetConfig+0x110>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d113      	bne.n	8006634 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006612:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800661a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	695b      	ldr	r3, [r3, #20]
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	693a      	ldr	r2, [r7, #16]
 8006624:	4313      	orrs	r3, r2
 8006626:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	699b      	ldr	r3, [r3, #24]
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	693a      	ldr	r2, [r7, #16]
 8006630:	4313      	orrs	r3, r2
 8006632:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	693a      	ldr	r2, [r7, #16]
 8006638:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	68fa      	ldr	r2, [r7, #12]
 800663e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	685a      	ldr	r2, [r3, #4]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	697a      	ldr	r2, [r7, #20]
 800664c:	621a      	str	r2, [r3, #32]
}
 800664e:	bf00      	nop
 8006650:	371c      	adds	r7, #28
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr
 800665a:	bf00      	nop
 800665c:	40012c00 	.word	0x40012c00
 8006660:	40013400 	.word	0x40013400
 8006664:	40014000 	.word	0x40014000
 8006668:	40014400 	.word	0x40014400
 800666c:	40014800 	.word	0x40014800

08006670 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006670:	b480      	push	{r7}
 8006672:	b087      	sub	sp, #28
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6a1b      	ldr	r3, [r3, #32]
 800667e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6a1b      	ldr	r3, [r3, #32]
 800668a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	69db      	ldr	r3, [r3, #28]
 8006696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800669e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f023 0303 	bic.w	r3, r3, #3
 80066aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	68fa      	ldr	r2, [r7, #12]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	021b      	lsls	r3, r3, #8
 80066c4:	697a      	ldr	r2, [r7, #20]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a27      	ldr	r2, [pc, #156]	; (800676c <TIM_OC3_SetConfig+0xfc>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d003      	beq.n	80066da <TIM_OC3_SetConfig+0x6a>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4a26      	ldr	r2, [pc, #152]	; (8006770 <TIM_OC3_SetConfig+0x100>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d10d      	bne.n	80066f6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80066e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	021b      	lsls	r3, r3, #8
 80066e8:	697a      	ldr	r2, [r7, #20]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80066f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4a1c      	ldr	r2, [pc, #112]	; (800676c <TIM_OC3_SetConfig+0xfc>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d00f      	beq.n	800671e <TIM_OC3_SetConfig+0xae>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4a1b      	ldr	r2, [pc, #108]	; (8006770 <TIM_OC3_SetConfig+0x100>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d00b      	beq.n	800671e <TIM_OC3_SetConfig+0xae>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4a1a      	ldr	r2, [pc, #104]	; (8006774 <TIM_OC3_SetConfig+0x104>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d007      	beq.n	800671e <TIM_OC3_SetConfig+0xae>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a19      	ldr	r2, [pc, #100]	; (8006778 <TIM_OC3_SetConfig+0x108>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d003      	beq.n	800671e <TIM_OC3_SetConfig+0xae>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4a18      	ldr	r2, [pc, #96]	; (800677c <TIM_OC3_SetConfig+0x10c>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d113      	bne.n	8006746 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006724:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800672c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	695b      	ldr	r3, [r3, #20]
 8006732:	011b      	lsls	r3, r3, #4
 8006734:	693a      	ldr	r2, [r7, #16]
 8006736:	4313      	orrs	r3, r2
 8006738:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	699b      	ldr	r3, [r3, #24]
 800673e:	011b      	lsls	r3, r3, #4
 8006740:	693a      	ldr	r2, [r7, #16]
 8006742:	4313      	orrs	r3, r2
 8006744:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	693a      	ldr	r2, [r7, #16]
 800674a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	68fa      	ldr	r2, [r7, #12]
 8006750:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	685a      	ldr	r2, [r3, #4]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	697a      	ldr	r2, [r7, #20]
 800675e:	621a      	str	r2, [r3, #32]
}
 8006760:	bf00      	nop
 8006762:	371c      	adds	r7, #28
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr
 800676c:	40012c00 	.word	0x40012c00
 8006770:	40013400 	.word	0x40013400
 8006774:	40014000 	.word	0x40014000
 8006778:	40014400 	.word	0x40014400
 800677c:	40014800 	.word	0x40014800

08006780 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006780:	b480      	push	{r7}
 8006782:	b087      	sub	sp, #28
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6a1b      	ldr	r3, [r3, #32]
 800678e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6a1b      	ldr	r3, [r3, #32]
 800679a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	69db      	ldr	r3, [r3, #28]
 80067a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80067ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	021b      	lsls	r3, r3, #8
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	4313      	orrs	r3, r2
 80067c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80067ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	031b      	lsls	r3, r3, #12
 80067d6:	693a      	ldr	r2, [r7, #16]
 80067d8:	4313      	orrs	r3, r2
 80067da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4a18      	ldr	r2, [pc, #96]	; (8006840 <TIM_OC4_SetConfig+0xc0>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d00f      	beq.n	8006804 <TIM_OC4_SetConfig+0x84>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4a17      	ldr	r2, [pc, #92]	; (8006844 <TIM_OC4_SetConfig+0xc4>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d00b      	beq.n	8006804 <TIM_OC4_SetConfig+0x84>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	4a16      	ldr	r2, [pc, #88]	; (8006848 <TIM_OC4_SetConfig+0xc8>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d007      	beq.n	8006804 <TIM_OC4_SetConfig+0x84>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4a15      	ldr	r2, [pc, #84]	; (800684c <TIM_OC4_SetConfig+0xcc>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d003      	beq.n	8006804 <TIM_OC4_SetConfig+0x84>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4a14      	ldr	r2, [pc, #80]	; (8006850 <TIM_OC4_SetConfig+0xd0>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d109      	bne.n	8006818 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800680a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	695b      	ldr	r3, [r3, #20]
 8006810:	019b      	lsls	r3, r3, #6
 8006812:	697a      	ldr	r2, [r7, #20]
 8006814:	4313      	orrs	r3, r2
 8006816:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	697a      	ldr	r2, [r7, #20]
 800681c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	685a      	ldr	r2, [r3, #4]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	693a      	ldr	r2, [r7, #16]
 8006830:	621a      	str	r2, [r3, #32]
}
 8006832:	bf00      	nop
 8006834:	371c      	adds	r7, #28
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr
 800683e:	bf00      	nop
 8006840:	40012c00 	.word	0x40012c00
 8006844:	40013400 	.word	0x40013400
 8006848:	40014000 	.word	0x40014000
 800684c:	40014400 	.word	0x40014400
 8006850:	40014800 	.word	0x40014800

08006854 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006854:	b480      	push	{r7}
 8006856:	b087      	sub	sp, #28
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a1b      	ldr	r3, [r3, #32]
 8006862:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a1b      	ldr	r3, [r3, #32]
 800686e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800687a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006886:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	68fa      	ldr	r2, [r7, #12]
 800688e:	4313      	orrs	r3, r2
 8006890:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006898:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	041b      	lsls	r3, r3, #16
 80068a0:	693a      	ldr	r2, [r7, #16]
 80068a2:	4313      	orrs	r3, r2
 80068a4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4a17      	ldr	r2, [pc, #92]	; (8006908 <TIM_OC5_SetConfig+0xb4>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d00f      	beq.n	80068ce <TIM_OC5_SetConfig+0x7a>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4a16      	ldr	r2, [pc, #88]	; (800690c <TIM_OC5_SetConfig+0xb8>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d00b      	beq.n	80068ce <TIM_OC5_SetConfig+0x7a>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4a15      	ldr	r2, [pc, #84]	; (8006910 <TIM_OC5_SetConfig+0xbc>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d007      	beq.n	80068ce <TIM_OC5_SetConfig+0x7a>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4a14      	ldr	r2, [pc, #80]	; (8006914 <TIM_OC5_SetConfig+0xc0>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d003      	beq.n	80068ce <TIM_OC5_SetConfig+0x7a>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4a13      	ldr	r2, [pc, #76]	; (8006918 <TIM_OC5_SetConfig+0xc4>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d109      	bne.n	80068e2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	695b      	ldr	r3, [r3, #20]
 80068da:	021b      	lsls	r3, r3, #8
 80068dc:	697a      	ldr	r2, [r7, #20]
 80068de:	4313      	orrs	r3, r2
 80068e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	697a      	ldr	r2, [r7, #20]
 80068e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	68fa      	ldr	r2, [r7, #12]
 80068ec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	685a      	ldr	r2, [r3, #4]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	693a      	ldr	r2, [r7, #16]
 80068fa:	621a      	str	r2, [r3, #32]
}
 80068fc:	bf00      	nop
 80068fe:	371c      	adds	r7, #28
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr
 8006908:	40012c00 	.word	0x40012c00
 800690c:	40013400 	.word	0x40013400
 8006910:	40014000 	.word	0x40014000
 8006914:	40014400 	.word	0x40014400
 8006918:	40014800 	.word	0x40014800

0800691c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800691c:	b480      	push	{r7}
 800691e:	b087      	sub	sp, #28
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6a1b      	ldr	r3, [r3, #32]
 800692a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a1b      	ldr	r3, [r3, #32]
 8006936:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800694a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800694e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	021b      	lsls	r3, r3, #8
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	4313      	orrs	r3, r2
 800695a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006962:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	051b      	lsls	r3, r3, #20
 800696a:	693a      	ldr	r2, [r7, #16]
 800696c:	4313      	orrs	r3, r2
 800696e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4a18      	ldr	r2, [pc, #96]	; (80069d4 <TIM_OC6_SetConfig+0xb8>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d00f      	beq.n	8006998 <TIM_OC6_SetConfig+0x7c>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	4a17      	ldr	r2, [pc, #92]	; (80069d8 <TIM_OC6_SetConfig+0xbc>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d00b      	beq.n	8006998 <TIM_OC6_SetConfig+0x7c>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	4a16      	ldr	r2, [pc, #88]	; (80069dc <TIM_OC6_SetConfig+0xc0>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d007      	beq.n	8006998 <TIM_OC6_SetConfig+0x7c>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	4a15      	ldr	r2, [pc, #84]	; (80069e0 <TIM_OC6_SetConfig+0xc4>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d003      	beq.n	8006998 <TIM_OC6_SetConfig+0x7c>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	4a14      	ldr	r2, [pc, #80]	; (80069e4 <TIM_OC6_SetConfig+0xc8>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d109      	bne.n	80069ac <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800699e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	695b      	ldr	r3, [r3, #20]
 80069a4:	029b      	lsls	r3, r3, #10
 80069a6:	697a      	ldr	r2, [r7, #20]
 80069a8:	4313      	orrs	r3, r2
 80069aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	697a      	ldr	r2, [r7, #20]
 80069b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	68fa      	ldr	r2, [r7, #12]
 80069b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	685a      	ldr	r2, [r3, #4]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	693a      	ldr	r2, [r7, #16]
 80069c4:	621a      	str	r2, [r3, #32]
}
 80069c6:	bf00      	nop
 80069c8:	371c      	adds	r7, #28
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr
 80069d2:	bf00      	nop
 80069d4:	40012c00 	.word	0x40012c00
 80069d8:	40013400 	.word	0x40013400
 80069dc:	40014000 	.word	0x40014000
 80069e0:	40014400 	.word	0x40014400
 80069e4:	40014800 	.word	0x40014800

080069e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b087      	sub	sp, #28
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6a1b      	ldr	r3, [r3, #32]
 80069f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	6a1b      	ldr	r3, [r3, #32]
 80069fe:	f023 0201 	bic.w	r2, r3, #1
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	699b      	ldr	r3, [r3, #24]
 8006a0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	011b      	lsls	r3, r3, #4
 8006a18:	693a      	ldr	r2, [r7, #16]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	f023 030a 	bic.w	r3, r3, #10
 8006a24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a26:	697a      	ldr	r2, [r7, #20]
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	693a      	ldr	r2, [r7, #16]
 8006a32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	697a      	ldr	r2, [r7, #20]
 8006a38:	621a      	str	r2, [r3, #32]
}
 8006a3a:	bf00      	nop
 8006a3c:	371c      	adds	r7, #28
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr

08006a46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a46:	b480      	push	{r7}
 8006a48:	b087      	sub	sp, #28
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	60f8      	str	r0, [r7, #12]
 8006a4e:	60b9      	str	r1, [r7, #8]
 8006a50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	6a1b      	ldr	r3, [r3, #32]
 8006a56:	f023 0210 	bic.w	r2, r3, #16
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	699b      	ldr	r3, [r3, #24]
 8006a62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	6a1b      	ldr	r3, [r3, #32]
 8006a68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	031b      	lsls	r3, r3, #12
 8006a76:	697a      	ldr	r2, [r7, #20]
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a82:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	011b      	lsls	r3, r3, #4
 8006a88:	693a      	ldr	r2, [r7, #16]
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	697a      	ldr	r2, [r7, #20]
 8006a92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	693a      	ldr	r2, [r7, #16]
 8006a98:	621a      	str	r2, [r3, #32]
}
 8006a9a:	bf00      	nop
 8006a9c:	371c      	adds	r7, #28
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr

08006aa6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006aa6:	b480      	push	{r7}
 8006aa8:	b085      	sub	sp, #20
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
 8006aae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006abc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006abe:	683a      	ldr	r2, [r7, #0]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	f043 0307 	orr.w	r3, r3, #7
 8006ac8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	68fa      	ldr	r2, [r7, #12]
 8006ace:	609a      	str	r2, [r3, #8]
}
 8006ad0:	bf00      	nop
 8006ad2:	3714      	adds	r7, #20
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr

08006adc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b087      	sub	sp, #28
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	607a      	str	r2, [r7, #4]
 8006ae8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006af6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	021a      	lsls	r2, r3, #8
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	431a      	orrs	r2, r3
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	697a      	ldr	r2, [r7, #20]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	697a      	ldr	r2, [r7, #20]
 8006b0e:	609a      	str	r2, [r3, #8]
}
 8006b10:	bf00      	nop
 8006b12:	371c      	adds	r7, #28
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr

08006b1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b087      	sub	sp, #28
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	60f8      	str	r0, [r7, #12]
 8006b24:	60b9      	str	r1, [r7, #8]
 8006b26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	f003 031f 	and.w	r3, r3, #31
 8006b2e:	2201      	movs	r2, #1
 8006b30:	fa02 f303 	lsl.w	r3, r2, r3
 8006b34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	6a1a      	ldr	r2, [r3, #32]
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	43db      	mvns	r3, r3
 8006b3e:	401a      	ands	r2, r3
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6a1a      	ldr	r2, [r3, #32]
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	f003 031f 	and.w	r3, r3, #31
 8006b4e:	6879      	ldr	r1, [r7, #4]
 8006b50:	fa01 f303 	lsl.w	r3, r1, r3
 8006b54:	431a      	orrs	r2, r3
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	621a      	str	r2, [r3, #32]
}
 8006b5a:	bf00      	nop
 8006b5c:	371c      	adds	r7, #28
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr
	...

08006b68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b085      	sub	sp, #20
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d101      	bne.n	8006b80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b7c:	2302      	movs	r3, #2
 8006b7e:	e068      	b.n	8006c52 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2201      	movs	r2, #1
 8006b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2202      	movs	r2, #2
 8006b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a2e      	ldr	r2, [pc, #184]	; (8006c60 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d004      	beq.n	8006bb4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a2d      	ldr	r2, [pc, #180]	; (8006c64 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d108      	bne.n	8006bc6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006bba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	68fa      	ldr	r2, [r7, #12]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bcc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	68fa      	ldr	r2, [r7, #12]
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	68fa      	ldr	r2, [r7, #12]
 8006bde:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a1e      	ldr	r2, [pc, #120]	; (8006c60 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d01d      	beq.n	8006c26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bf2:	d018      	beq.n	8006c26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a1b      	ldr	r2, [pc, #108]	; (8006c68 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d013      	beq.n	8006c26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a1a      	ldr	r2, [pc, #104]	; (8006c6c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d00e      	beq.n	8006c26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a18      	ldr	r2, [pc, #96]	; (8006c70 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d009      	beq.n	8006c26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a13      	ldr	r2, [pc, #76]	; (8006c64 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d004      	beq.n	8006c26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a14      	ldr	r2, [pc, #80]	; (8006c74 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d10c      	bne.n	8006c40 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	68ba      	ldr	r2, [r7, #8]
 8006c34:	4313      	orrs	r3, r2
 8006c36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	68ba      	ldr	r2, [r7, #8]
 8006c3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3714      	adds	r7, #20
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop
 8006c60:	40012c00 	.word	0x40012c00
 8006c64:	40013400 	.word	0x40013400
 8006c68:	40000400 	.word	0x40000400
 8006c6c:	40000800 	.word	0x40000800
 8006c70:	40000c00 	.word	0x40000c00
 8006c74:	40014000 	.word	0x40014000

08006c78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c80:	bf00      	nop
 8006c82:	370c      	adds	r7, #12
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr

08006c8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c94:	bf00      	nop
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006ca8:	bf00      	nop
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b082      	sub	sp, #8
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d101      	bne.n	8006cc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e040      	b.n	8006d48 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d106      	bne.n	8006cdc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f7fa feac 	bl	8001a34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2224      	movs	r2, #36	; 0x24
 8006ce0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f022 0201 	bic.w	r2, r2, #1
 8006cf0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f000 fc8a 	bl	800760c <UART_SetConfig>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d101      	bne.n	8006d02 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	e022      	b.n	8006d48 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d002      	beq.n	8006d10 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 ff36 	bl	8007b7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	685a      	ldr	r2, [r3, #4]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	689a      	ldr	r2, [r3, #8]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f042 0201 	orr.w	r2, r2, #1
 8006d3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f000 ffbd 	bl	8007cc0 <UART_CheckIdleState>
 8006d46:	4603      	mov	r3, r0
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3708      	adds	r7, #8
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b08a      	sub	sp, #40	; 0x28
 8006d54:	af02      	add	r7, sp, #8
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	60b9      	str	r1, [r7, #8]
 8006d5a:	603b      	str	r3, [r7, #0]
 8006d5c:	4613      	mov	r3, r2
 8006d5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d64:	2b20      	cmp	r3, #32
 8006d66:	f040 8082 	bne.w	8006e6e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d002      	beq.n	8006d76 <HAL_UART_Transmit+0x26>
 8006d70:	88fb      	ldrh	r3, [r7, #6]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d101      	bne.n	8006d7a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	e07a      	b.n	8006e70 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d101      	bne.n	8006d88 <HAL_UART_Transmit+0x38>
 8006d84:	2302      	movs	r3, #2
 8006d86:	e073      	b.n	8006e70 <HAL_UART_Transmit+0x120>
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2221      	movs	r2, #33	; 0x21
 8006d9c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d9e:	f7fb f94f 	bl	8002040 <HAL_GetTick>
 8006da2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	88fa      	ldrh	r2, [r7, #6]
 8006da8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	88fa      	ldrh	r2, [r7, #6]
 8006db0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dbc:	d108      	bne.n	8006dd0 <HAL_UART_Transmit+0x80>
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d104      	bne.n	8006dd0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	61bb      	str	r3, [r7, #24]
 8006dce:	e003      	b.n	8006dd8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006de0:	e02d      	b.n	8006e3e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	9300      	str	r3, [sp, #0]
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	2200      	movs	r2, #0
 8006dea:	2180      	movs	r1, #128	; 0x80
 8006dec:	68f8      	ldr	r0, [r7, #12]
 8006dee:	f000 ffb0 	bl	8007d52 <UART_WaitOnFlagUntilTimeout>
 8006df2:	4603      	mov	r3, r0
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d001      	beq.n	8006dfc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006df8:	2303      	movs	r3, #3
 8006dfa:	e039      	b.n	8006e70 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006dfc:	69fb      	ldr	r3, [r7, #28]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d10b      	bne.n	8006e1a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e02:	69bb      	ldr	r3, [r7, #24]
 8006e04:	881a      	ldrh	r2, [r3, #0]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e0e:	b292      	uxth	r2, r2
 8006e10:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006e12:	69bb      	ldr	r3, [r7, #24]
 8006e14:	3302      	adds	r3, #2
 8006e16:	61bb      	str	r3, [r7, #24]
 8006e18:	e008      	b.n	8006e2c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006e1a:	69fb      	ldr	r3, [r7, #28]
 8006e1c:	781a      	ldrb	r2, [r3, #0]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	b292      	uxth	r2, r2
 8006e24:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006e26:	69fb      	ldr	r3, [r7, #28]
 8006e28:	3301      	adds	r3, #1
 8006e2a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	3b01      	subs	r3, #1
 8006e36:	b29a      	uxth	r2, r3
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d1cb      	bne.n	8006de2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	9300      	str	r3, [sp, #0]
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	2200      	movs	r2, #0
 8006e52:	2140      	movs	r1, #64	; 0x40
 8006e54:	68f8      	ldr	r0, [r7, #12]
 8006e56:	f000 ff7c 	bl	8007d52 <UART_WaitOnFlagUntilTimeout>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d001      	beq.n	8006e64 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006e60:	2303      	movs	r3, #3
 8006e62:	e005      	b.n	8006e70 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2220      	movs	r2, #32
 8006e68:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	e000      	b.n	8006e70 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006e6e:	2302      	movs	r3, #2
  }
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3720      	adds	r7, #32
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b08a      	sub	sp, #40	; 0x28
 8006e7c:	af02      	add	r7, sp, #8
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	603b      	str	r3, [r7, #0]
 8006e84:	4613      	mov	r3, r2
 8006e86:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e8c:	2b20      	cmp	r3, #32
 8006e8e:	f040 80bf 	bne.w	8007010 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d002      	beq.n	8006e9e <HAL_UART_Receive+0x26>
 8006e98:	88fb      	ldrh	r3, [r7, #6]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d101      	bne.n	8006ea2 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e0b7      	b.n	8007012 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d101      	bne.n	8006eb0 <HAL_UART_Receive+0x38>
 8006eac:	2302      	movs	r3, #2
 8006eae:	e0b0      	b.n	8007012 <HAL_UART_Receive+0x19a>
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2222      	movs	r2, #34	; 0x22
 8006ec4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ecc:	f7fb f8b8 	bl	8002040 <HAL_GetTick>
 8006ed0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	88fa      	ldrh	r2, [r7, #6]
 8006ed6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	88fa      	ldrh	r2, [r7, #6]
 8006ede:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eea:	d10e      	bne.n	8006f0a <HAL_UART_Receive+0x92>
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	691b      	ldr	r3, [r3, #16]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d105      	bne.n	8006f00 <HAL_UART_Receive+0x88>
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006efa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006efe:	e02d      	b.n	8006f5c <HAL_UART_Receive+0xe4>
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	22ff      	movs	r2, #255	; 0xff
 8006f04:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f08:	e028      	b.n	8006f5c <HAL_UART_Receive+0xe4>
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d10d      	bne.n	8006f2e <HAL_UART_Receive+0xb6>
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	691b      	ldr	r3, [r3, #16]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d104      	bne.n	8006f24 <HAL_UART_Receive+0xac>
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	22ff      	movs	r2, #255	; 0xff
 8006f1e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f22:	e01b      	b.n	8006f5c <HAL_UART_Receive+0xe4>
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	227f      	movs	r2, #127	; 0x7f
 8006f28:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f2c:	e016      	b.n	8006f5c <HAL_UART_Receive+0xe4>
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f36:	d10d      	bne.n	8006f54 <HAL_UART_Receive+0xdc>
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	691b      	ldr	r3, [r3, #16]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d104      	bne.n	8006f4a <HAL_UART_Receive+0xd2>
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	227f      	movs	r2, #127	; 0x7f
 8006f44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f48:	e008      	b.n	8006f5c <HAL_UART_Receive+0xe4>
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	223f      	movs	r2, #63	; 0x3f
 8006f4e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f52:	e003      	b.n	8006f5c <HAL_UART_Receive+0xe4>
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006f62:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f6c:	d108      	bne.n	8006f80 <HAL_UART_Receive+0x108>
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d104      	bne.n	8006f80 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8006f76:	2300      	movs	r3, #0
 8006f78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	61bb      	str	r3, [r7, #24]
 8006f7e:	e003      	b.n	8006f88 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f84:	2300      	movs	r3, #0
 8006f86:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006f90:	e033      	b.n	8006ffa <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	9300      	str	r3, [sp, #0]
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	2120      	movs	r1, #32
 8006f9c:	68f8      	ldr	r0, [r7, #12]
 8006f9e:	f000 fed8 	bl	8007d52 <UART_WaitOnFlagUntilTimeout>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d001      	beq.n	8006fac <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8006fa8:	2303      	movs	r3, #3
 8006faa:	e032      	b.n	8007012 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8006fac:	69fb      	ldr	r3, [r7, #28]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d10c      	bne.n	8006fcc <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006fb8:	b29a      	uxth	r2, r3
 8006fba:	8a7b      	ldrh	r3, [r7, #18]
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	b29a      	uxth	r2, r3
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	3302      	adds	r3, #2
 8006fc8:	61bb      	str	r3, [r7, #24]
 8006fca:	e00d      	b.n	8006fe8 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	b2da      	uxtb	r2, r3
 8006fd6:	8a7b      	ldrh	r3, [r7, #18]
 8006fd8:	b2db      	uxtb	r3, r3
 8006fda:	4013      	ands	r3, r2
 8006fdc:	b2da      	uxtb	r2, r3
 8006fde:	69fb      	ldr	r3, [r7, #28]
 8006fe0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	3b01      	subs	r3, #1
 8006ff2:	b29a      	uxth	r2, r3
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007000:	b29b      	uxth	r3, r3
 8007002:	2b00      	cmp	r3, #0
 8007004:	d1c5      	bne.n	8006f92 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2220      	movs	r2, #32
 800700a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800700c:	2300      	movs	r3, #0
 800700e:	e000      	b.n	8007012 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8007010:	2302      	movs	r3, #2
  }
}
 8007012:	4618      	mov	r0, r3
 8007014:	3720      	adds	r7, #32
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
	...

0800701c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b0ba      	sub	sp, #232	; 0xe8
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	69db      	ldr	r3, [r3, #28]
 800702a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007042:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007046:	f640 030f 	movw	r3, #2063	; 0x80f
 800704a:	4013      	ands	r3, r2
 800704c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007050:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007054:	2b00      	cmp	r3, #0
 8007056:	d115      	bne.n	8007084 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007058:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800705c:	f003 0320 	and.w	r3, r3, #32
 8007060:	2b00      	cmp	r3, #0
 8007062:	d00f      	beq.n	8007084 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007064:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007068:	f003 0320 	and.w	r3, r3, #32
 800706c:	2b00      	cmp	r3, #0
 800706e:	d009      	beq.n	8007084 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007074:	2b00      	cmp	r3, #0
 8007076:	f000 82a6 	beq.w	80075c6 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	4798      	blx	r3
      }
      return;
 8007082:	e2a0      	b.n	80075c6 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007084:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007088:	2b00      	cmp	r3, #0
 800708a:	f000 8117 	beq.w	80072bc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800708e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007092:	f003 0301 	and.w	r3, r3, #1
 8007096:	2b00      	cmp	r3, #0
 8007098:	d106      	bne.n	80070a8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800709a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800709e:	4b85      	ldr	r3, [pc, #532]	; (80072b4 <HAL_UART_IRQHandler+0x298>)
 80070a0:	4013      	ands	r3, r2
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	f000 810a 	beq.w	80072bc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80070a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070ac:	f003 0301 	and.w	r3, r3, #1
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d011      	beq.n	80070d8 <HAL_UART_IRQHandler+0xbc>
 80070b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d00b      	beq.n	80070d8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	2201      	movs	r2, #1
 80070c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070ce:	f043 0201 	orr.w	r2, r3, #1
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80070d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070dc:	f003 0302 	and.w	r3, r3, #2
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d011      	beq.n	8007108 <HAL_UART_IRQHandler+0xec>
 80070e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070e8:	f003 0301 	and.w	r3, r3, #1
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d00b      	beq.n	8007108 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	2202      	movs	r2, #2
 80070f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070fe:	f043 0204 	orr.w	r2, r3, #4
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800710c:	f003 0304 	and.w	r3, r3, #4
 8007110:	2b00      	cmp	r3, #0
 8007112:	d011      	beq.n	8007138 <HAL_UART_IRQHandler+0x11c>
 8007114:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007118:	f003 0301 	and.w	r3, r3, #1
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00b      	beq.n	8007138 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	2204      	movs	r2, #4
 8007126:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800712e:	f043 0202 	orr.w	r2, r3, #2
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800713c:	f003 0308 	and.w	r3, r3, #8
 8007140:	2b00      	cmp	r3, #0
 8007142:	d017      	beq.n	8007174 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007148:	f003 0320 	and.w	r3, r3, #32
 800714c:	2b00      	cmp	r3, #0
 800714e:	d105      	bne.n	800715c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007150:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007154:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007158:	2b00      	cmp	r3, #0
 800715a:	d00b      	beq.n	8007174 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2208      	movs	r2, #8
 8007162:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800716a:	f043 0208 	orr.w	r2, r3, #8
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007174:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007178:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800717c:	2b00      	cmp	r3, #0
 800717e:	d012      	beq.n	80071a6 <HAL_UART_IRQHandler+0x18a>
 8007180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007184:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007188:	2b00      	cmp	r3, #0
 800718a:	d00c      	beq.n	80071a6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007194:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800719c:	f043 0220 	orr.w	r2, r3, #32
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	f000 820c 	beq.w	80075ca <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80071b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071b6:	f003 0320 	and.w	r3, r3, #32
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d00d      	beq.n	80071da <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80071be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071c2:	f003 0320 	and.w	r3, r3, #32
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d007      	beq.n	80071da <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d003      	beq.n	80071da <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ee:	2b40      	cmp	r3, #64	; 0x40
 80071f0:	d005      	beq.n	80071fe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80071f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80071f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d04f      	beq.n	800729e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 fe6b 	bl	8007eda <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800720e:	2b40      	cmp	r3, #64	; 0x40
 8007210:	d141      	bne.n	8007296 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	3308      	adds	r3, #8
 8007218:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800721c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007220:	e853 3f00 	ldrex	r3, [r3]
 8007224:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007228:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800722c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007230:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	3308      	adds	r3, #8
 800723a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800723e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007242:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007246:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800724a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800724e:	e841 2300 	strex	r3, r2, [r1]
 8007252:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007256:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800725a:	2b00      	cmp	r3, #0
 800725c:	d1d9      	bne.n	8007212 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007262:	2b00      	cmp	r3, #0
 8007264:	d013      	beq.n	800728e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800726a:	4a13      	ldr	r2, [pc, #76]	; (80072b8 <HAL_UART_IRQHandler+0x29c>)
 800726c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007272:	4618      	mov	r0, r3
 8007274:	f7fc fd9a 	bl	8003dac <HAL_DMA_Abort_IT>
 8007278:	4603      	mov	r3, r0
 800727a:	2b00      	cmp	r3, #0
 800727c:	d017      	beq.n	80072ae <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8007288:	4610      	mov	r0, r2
 800728a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800728c:	e00f      	b.n	80072ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 f9a6 	bl	80075e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007294:	e00b      	b.n	80072ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 f9a2 	bl	80075e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800729c:	e007      	b.n	80072ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f000 f99e 	bl	80075e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2200      	movs	r2, #0
 80072a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80072ac:	e18d      	b.n	80075ca <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072ae:	bf00      	nop
    return;
 80072b0:	e18b      	b.n	80075ca <HAL_UART_IRQHandler+0x5ae>
 80072b2:	bf00      	nop
 80072b4:	04000120 	.word	0x04000120
 80072b8:	08007fa1 	.word	0x08007fa1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	f040 8146 	bne.w	8007552 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80072c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072ca:	f003 0310 	and.w	r3, r3, #16
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	f000 813f 	beq.w	8007552 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80072d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072d8:	f003 0310 	and.w	r3, r3, #16
 80072dc:	2b00      	cmp	r3, #0
 80072de:	f000 8138 	beq.w	8007552 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	2210      	movs	r2, #16
 80072e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072f4:	2b40      	cmp	r3, #64	; 0x40
 80072f6:	f040 80b4 	bne.w	8007462 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007306:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800730a:	2b00      	cmp	r3, #0
 800730c:	f000 815f 	beq.w	80075ce <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007316:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800731a:	429a      	cmp	r2, r3
 800731c:	f080 8157 	bcs.w	80075ce <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007326:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f003 0320 	and.w	r3, r3, #32
 8007336:	2b00      	cmp	r3, #0
 8007338:	f040 8085 	bne.w	8007446 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007344:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007348:	e853 3f00 	ldrex	r3, [r3]
 800734c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007350:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007354:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007358:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	461a      	mov	r2, r3
 8007362:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007366:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800736a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800736e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007372:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007376:	e841 2300 	strex	r3, r2, [r1]
 800737a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800737e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007382:	2b00      	cmp	r3, #0
 8007384:	d1da      	bne.n	800733c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	3308      	adds	r3, #8
 800738c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800738e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007390:	e853 3f00 	ldrex	r3, [r3]
 8007394:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007396:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007398:	f023 0301 	bic.w	r3, r3, #1
 800739c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	3308      	adds	r3, #8
 80073a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80073aa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80073ae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80073b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80073b6:	e841 2300 	strex	r3, r2, [r1]
 80073ba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80073bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d1e1      	bne.n	8007386 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	3308      	adds	r3, #8
 80073c8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073cc:	e853 3f00 	ldrex	r3, [r3]
 80073d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80073d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	3308      	adds	r3, #8
 80073e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80073e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80073e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80073ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80073ee:	e841 2300 	strex	r3, r2, [r1]
 80073f2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80073f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d1e3      	bne.n	80073c2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2220      	movs	r2, #32
 80073fe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800740c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800740e:	e853 3f00 	ldrex	r3, [r3]
 8007412:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007414:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007416:	f023 0310 	bic.w	r3, r3, #16
 800741a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	461a      	mov	r2, r3
 8007424:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007428:	65bb      	str	r3, [r7, #88]	; 0x58
 800742a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800742c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800742e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007430:	e841 2300 	strex	r3, r2, [r1]
 8007434:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007436:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007438:	2b00      	cmp	r3, #0
 800743a:	d1e4      	bne.n	8007406 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007440:	4618      	mov	r0, r3
 8007442:	f7fc fc75 	bl	8003d30 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007452:	b29b      	uxth	r3, r3
 8007454:	1ad3      	subs	r3, r2, r3
 8007456:	b29b      	uxth	r3, r3
 8007458:	4619      	mov	r1, r3
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 f8ca 	bl	80075f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007460:	e0b5      	b.n	80075ce <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800746e:	b29b      	uxth	r3, r3
 8007470:	1ad3      	subs	r3, r2, r3
 8007472:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800747c:	b29b      	uxth	r3, r3
 800747e:	2b00      	cmp	r3, #0
 8007480:	f000 80a7 	beq.w	80075d2 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8007484:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007488:	2b00      	cmp	r3, #0
 800748a:	f000 80a2 	beq.w	80075d2 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007496:	e853 3f00 	ldrex	r3, [r3]
 800749a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800749c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800749e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	461a      	mov	r2, r3
 80074ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80074b0:	647b      	str	r3, [r7, #68]	; 0x44
 80074b2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80074b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074b8:	e841 2300 	strex	r3, r2, [r1]
 80074bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80074be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d1e4      	bne.n	800748e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	3308      	adds	r3, #8
 80074ca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ce:	e853 3f00 	ldrex	r3, [r3]
 80074d2:	623b      	str	r3, [r7, #32]
   return(result);
 80074d4:	6a3b      	ldr	r3, [r7, #32]
 80074d6:	f023 0301 	bic.w	r3, r3, #1
 80074da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	3308      	adds	r3, #8
 80074e4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80074e8:	633a      	str	r2, [r7, #48]	; 0x30
 80074ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074f0:	e841 2300 	strex	r3, r2, [r1]
 80074f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80074f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d1e3      	bne.n	80074c4 <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2220      	movs	r2, #32
 8007500:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2200      	movs	r2, #0
 8007506:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2200      	movs	r2, #0
 800750c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	e853 3f00 	ldrex	r3, [r3]
 800751a:	60fb      	str	r3, [r7, #12]
   return(result);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f023 0310 	bic.w	r3, r3, #16
 8007522:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	461a      	mov	r2, r3
 800752c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007530:	61fb      	str	r3, [r7, #28]
 8007532:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007534:	69b9      	ldr	r1, [r7, #24]
 8007536:	69fa      	ldr	r2, [r7, #28]
 8007538:	e841 2300 	strex	r3, r2, [r1]
 800753c:	617b      	str	r3, [r7, #20]
   return(result);
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d1e4      	bne.n	800750e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007544:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007548:	4619      	mov	r1, r3
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 f852 	bl	80075f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007550:	e03f      	b.n	80075d2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007556:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800755a:	2b00      	cmp	r3, #0
 800755c:	d00e      	beq.n	800757c <HAL_UART_IRQHandler+0x560>
 800755e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007562:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007566:	2b00      	cmp	r3, #0
 8007568:	d008      	beq.n	800757c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007572:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 fd53 	bl	8008020 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800757a:	e02d      	b.n	80075d8 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800757c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007584:	2b00      	cmp	r3, #0
 8007586:	d00e      	beq.n	80075a6 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007588:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800758c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007590:	2b00      	cmp	r3, #0
 8007592:	d008      	beq.n	80075a6 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007598:	2b00      	cmp	r3, #0
 800759a:	d01c      	beq.n	80075d6 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	4798      	blx	r3
    }
    return;
 80075a4:	e017      	b.n	80075d6 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80075a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d012      	beq.n	80075d8 <HAL_UART_IRQHandler+0x5bc>
 80075b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d00c      	beq.n	80075d8 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 fd04 	bl	8007fcc <UART_EndTransmit_IT>
    return;
 80075c4:	e008      	b.n	80075d8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80075c6:	bf00      	nop
 80075c8:	e006      	b.n	80075d8 <HAL_UART_IRQHandler+0x5bc>
    return;
 80075ca:	bf00      	nop
 80075cc:	e004      	b.n	80075d8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80075ce:	bf00      	nop
 80075d0:	e002      	b.n	80075d8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80075d2:	bf00      	nop
 80075d4:	e000      	b.n	80075d8 <HAL_UART_IRQHandler+0x5bc>
    return;
 80075d6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80075d8:	37e8      	adds	r7, #232	; 0xe8
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop

080075e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b083      	sub	sp, #12
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80075e8:	bf00      	nop
 80075ea:	370c      	adds	r7, #12
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	460b      	mov	r3, r1
 80075fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007600:	bf00      	nop
 8007602:	370c      	adds	r7, #12
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr

0800760c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800760c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007610:	b08a      	sub	sp, #40	; 0x28
 8007612:	af00      	add	r7, sp, #0
 8007614:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007616:	2300      	movs	r3, #0
 8007618:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	689a      	ldr	r2, [r3, #8]
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	691b      	ldr	r3, [r3, #16]
 8007624:	431a      	orrs	r2, r3
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	695b      	ldr	r3, [r3, #20]
 800762a:	431a      	orrs	r2, r3
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	69db      	ldr	r3, [r3, #28]
 8007630:	4313      	orrs	r3, r2
 8007632:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	681a      	ldr	r2, [r3, #0]
 800763a:	4ba4      	ldr	r3, [pc, #656]	; (80078cc <UART_SetConfig+0x2c0>)
 800763c:	4013      	ands	r3, r2
 800763e:	68fa      	ldr	r2, [r7, #12]
 8007640:	6812      	ldr	r2, [r2, #0]
 8007642:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007644:	430b      	orrs	r3, r1
 8007646:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	68da      	ldr	r2, [r3, #12]
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	430a      	orrs	r2, r1
 800765c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	699b      	ldr	r3, [r3, #24]
 8007662:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a99      	ldr	r2, [pc, #612]	; (80078d0 <UART_SetConfig+0x2c4>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d004      	beq.n	8007678 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	6a1b      	ldr	r3, [r3, #32]
 8007672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007674:	4313      	orrs	r3, r2
 8007676:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007688:	430a      	orrs	r2, r1
 800768a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a90      	ldr	r2, [pc, #576]	; (80078d4 <UART_SetConfig+0x2c8>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d126      	bne.n	80076e4 <UART_SetConfig+0xd8>
 8007696:	4b90      	ldr	r3, [pc, #576]	; (80078d8 <UART_SetConfig+0x2cc>)
 8007698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800769c:	f003 0303 	and.w	r3, r3, #3
 80076a0:	2b03      	cmp	r3, #3
 80076a2:	d81b      	bhi.n	80076dc <UART_SetConfig+0xd0>
 80076a4:	a201      	add	r2, pc, #4	; (adr r2, 80076ac <UART_SetConfig+0xa0>)
 80076a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076aa:	bf00      	nop
 80076ac:	080076bd 	.word	0x080076bd
 80076b0:	080076cd 	.word	0x080076cd
 80076b4:	080076c5 	.word	0x080076c5
 80076b8:	080076d5 	.word	0x080076d5
 80076bc:	2301      	movs	r3, #1
 80076be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076c2:	e116      	b.n	80078f2 <UART_SetConfig+0x2e6>
 80076c4:	2302      	movs	r3, #2
 80076c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076ca:	e112      	b.n	80078f2 <UART_SetConfig+0x2e6>
 80076cc:	2304      	movs	r3, #4
 80076ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076d2:	e10e      	b.n	80078f2 <UART_SetConfig+0x2e6>
 80076d4:	2308      	movs	r3, #8
 80076d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076da:	e10a      	b.n	80078f2 <UART_SetConfig+0x2e6>
 80076dc:	2310      	movs	r3, #16
 80076de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076e2:	e106      	b.n	80078f2 <UART_SetConfig+0x2e6>
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a7c      	ldr	r2, [pc, #496]	; (80078dc <UART_SetConfig+0x2d0>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d138      	bne.n	8007760 <UART_SetConfig+0x154>
 80076ee:	4b7a      	ldr	r3, [pc, #488]	; (80078d8 <UART_SetConfig+0x2cc>)
 80076f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076f4:	f003 030c 	and.w	r3, r3, #12
 80076f8:	2b0c      	cmp	r3, #12
 80076fa:	d82d      	bhi.n	8007758 <UART_SetConfig+0x14c>
 80076fc:	a201      	add	r2, pc, #4	; (adr r2, 8007704 <UART_SetConfig+0xf8>)
 80076fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007702:	bf00      	nop
 8007704:	08007739 	.word	0x08007739
 8007708:	08007759 	.word	0x08007759
 800770c:	08007759 	.word	0x08007759
 8007710:	08007759 	.word	0x08007759
 8007714:	08007749 	.word	0x08007749
 8007718:	08007759 	.word	0x08007759
 800771c:	08007759 	.word	0x08007759
 8007720:	08007759 	.word	0x08007759
 8007724:	08007741 	.word	0x08007741
 8007728:	08007759 	.word	0x08007759
 800772c:	08007759 	.word	0x08007759
 8007730:	08007759 	.word	0x08007759
 8007734:	08007751 	.word	0x08007751
 8007738:	2300      	movs	r3, #0
 800773a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800773e:	e0d8      	b.n	80078f2 <UART_SetConfig+0x2e6>
 8007740:	2302      	movs	r3, #2
 8007742:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007746:	e0d4      	b.n	80078f2 <UART_SetConfig+0x2e6>
 8007748:	2304      	movs	r3, #4
 800774a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800774e:	e0d0      	b.n	80078f2 <UART_SetConfig+0x2e6>
 8007750:	2308      	movs	r3, #8
 8007752:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007756:	e0cc      	b.n	80078f2 <UART_SetConfig+0x2e6>
 8007758:	2310      	movs	r3, #16
 800775a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800775e:	e0c8      	b.n	80078f2 <UART_SetConfig+0x2e6>
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a5e      	ldr	r2, [pc, #376]	; (80078e0 <UART_SetConfig+0x2d4>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d125      	bne.n	80077b6 <UART_SetConfig+0x1aa>
 800776a:	4b5b      	ldr	r3, [pc, #364]	; (80078d8 <UART_SetConfig+0x2cc>)
 800776c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007770:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007774:	2b30      	cmp	r3, #48	; 0x30
 8007776:	d016      	beq.n	80077a6 <UART_SetConfig+0x19a>
 8007778:	2b30      	cmp	r3, #48	; 0x30
 800777a:	d818      	bhi.n	80077ae <UART_SetConfig+0x1a2>
 800777c:	2b20      	cmp	r3, #32
 800777e:	d00a      	beq.n	8007796 <UART_SetConfig+0x18a>
 8007780:	2b20      	cmp	r3, #32
 8007782:	d814      	bhi.n	80077ae <UART_SetConfig+0x1a2>
 8007784:	2b00      	cmp	r3, #0
 8007786:	d002      	beq.n	800778e <UART_SetConfig+0x182>
 8007788:	2b10      	cmp	r3, #16
 800778a:	d008      	beq.n	800779e <UART_SetConfig+0x192>
 800778c:	e00f      	b.n	80077ae <UART_SetConfig+0x1a2>
 800778e:	2300      	movs	r3, #0
 8007790:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007794:	e0ad      	b.n	80078f2 <UART_SetConfig+0x2e6>
 8007796:	2302      	movs	r3, #2
 8007798:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800779c:	e0a9      	b.n	80078f2 <UART_SetConfig+0x2e6>
 800779e:	2304      	movs	r3, #4
 80077a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077a4:	e0a5      	b.n	80078f2 <UART_SetConfig+0x2e6>
 80077a6:	2308      	movs	r3, #8
 80077a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077ac:	e0a1      	b.n	80078f2 <UART_SetConfig+0x2e6>
 80077ae:	2310      	movs	r3, #16
 80077b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077b4:	e09d      	b.n	80078f2 <UART_SetConfig+0x2e6>
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a4a      	ldr	r2, [pc, #296]	; (80078e4 <UART_SetConfig+0x2d8>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d125      	bne.n	800780c <UART_SetConfig+0x200>
 80077c0:	4b45      	ldr	r3, [pc, #276]	; (80078d8 <UART_SetConfig+0x2cc>)
 80077c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077c6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80077ca:	2bc0      	cmp	r3, #192	; 0xc0
 80077cc:	d016      	beq.n	80077fc <UART_SetConfig+0x1f0>
 80077ce:	2bc0      	cmp	r3, #192	; 0xc0
 80077d0:	d818      	bhi.n	8007804 <UART_SetConfig+0x1f8>
 80077d2:	2b80      	cmp	r3, #128	; 0x80
 80077d4:	d00a      	beq.n	80077ec <UART_SetConfig+0x1e0>
 80077d6:	2b80      	cmp	r3, #128	; 0x80
 80077d8:	d814      	bhi.n	8007804 <UART_SetConfig+0x1f8>
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d002      	beq.n	80077e4 <UART_SetConfig+0x1d8>
 80077de:	2b40      	cmp	r3, #64	; 0x40
 80077e0:	d008      	beq.n	80077f4 <UART_SetConfig+0x1e8>
 80077e2:	e00f      	b.n	8007804 <UART_SetConfig+0x1f8>
 80077e4:	2300      	movs	r3, #0
 80077e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077ea:	e082      	b.n	80078f2 <UART_SetConfig+0x2e6>
 80077ec:	2302      	movs	r3, #2
 80077ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077f2:	e07e      	b.n	80078f2 <UART_SetConfig+0x2e6>
 80077f4:	2304      	movs	r3, #4
 80077f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077fa:	e07a      	b.n	80078f2 <UART_SetConfig+0x2e6>
 80077fc:	2308      	movs	r3, #8
 80077fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007802:	e076      	b.n	80078f2 <UART_SetConfig+0x2e6>
 8007804:	2310      	movs	r3, #16
 8007806:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800780a:	e072      	b.n	80078f2 <UART_SetConfig+0x2e6>
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a35      	ldr	r2, [pc, #212]	; (80078e8 <UART_SetConfig+0x2dc>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d12a      	bne.n	800786c <UART_SetConfig+0x260>
 8007816:	4b30      	ldr	r3, [pc, #192]	; (80078d8 <UART_SetConfig+0x2cc>)
 8007818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800781c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007820:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007824:	d01a      	beq.n	800785c <UART_SetConfig+0x250>
 8007826:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800782a:	d81b      	bhi.n	8007864 <UART_SetConfig+0x258>
 800782c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007830:	d00c      	beq.n	800784c <UART_SetConfig+0x240>
 8007832:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007836:	d815      	bhi.n	8007864 <UART_SetConfig+0x258>
 8007838:	2b00      	cmp	r3, #0
 800783a:	d003      	beq.n	8007844 <UART_SetConfig+0x238>
 800783c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007840:	d008      	beq.n	8007854 <UART_SetConfig+0x248>
 8007842:	e00f      	b.n	8007864 <UART_SetConfig+0x258>
 8007844:	2300      	movs	r3, #0
 8007846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800784a:	e052      	b.n	80078f2 <UART_SetConfig+0x2e6>
 800784c:	2302      	movs	r3, #2
 800784e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007852:	e04e      	b.n	80078f2 <UART_SetConfig+0x2e6>
 8007854:	2304      	movs	r3, #4
 8007856:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800785a:	e04a      	b.n	80078f2 <UART_SetConfig+0x2e6>
 800785c:	2308      	movs	r3, #8
 800785e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007862:	e046      	b.n	80078f2 <UART_SetConfig+0x2e6>
 8007864:	2310      	movs	r3, #16
 8007866:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800786a:	e042      	b.n	80078f2 <UART_SetConfig+0x2e6>
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a17      	ldr	r2, [pc, #92]	; (80078d0 <UART_SetConfig+0x2c4>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d13a      	bne.n	80078ec <UART_SetConfig+0x2e0>
 8007876:	4b18      	ldr	r3, [pc, #96]	; (80078d8 <UART_SetConfig+0x2cc>)
 8007878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800787c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007880:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007884:	d01a      	beq.n	80078bc <UART_SetConfig+0x2b0>
 8007886:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800788a:	d81b      	bhi.n	80078c4 <UART_SetConfig+0x2b8>
 800788c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007890:	d00c      	beq.n	80078ac <UART_SetConfig+0x2a0>
 8007892:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007896:	d815      	bhi.n	80078c4 <UART_SetConfig+0x2b8>
 8007898:	2b00      	cmp	r3, #0
 800789a:	d003      	beq.n	80078a4 <UART_SetConfig+0x298>
 800789c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078a0:	d008      	beq.n	80078b4 <UART_SetConfig+0x2a8>
 80078a2:	e00f      	b.n	80078c4 <UART_SetConfig+0x2b8>
 80078a4:	2300      	movs	r3, #0
 80078a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078aa:	e022      	b.n	80078f2 <UART_SetConfig+0x2e6>
 80078ac:	2302      	movs	r3, #2
 80078ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078b2:	e01e      	b.n	80078f2 <UART_SetConfig+0x2e6>
 80078b4:	2304      	movs	r3, #4
 80078b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078ba:	e01a      	b.n	80078f2 <UART_SetConfig+0x2e6>
 80078bc:	2308      	movs	r3, #8
 80078be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078c2:	e016      	b.n	80078f2 <UART_SetConfig+0x2e6>
 80078c4:	2310      	movs	r3, #16
 80078c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078ca:	e012      	b.n	80078f2 <UART_SetConfig+0x2e6>
 80078cc:	efff69f3 	.word	0xefff69f3
 80078d0:	40008000 	.word	0x40008000
 80078d4:	40013800 	.word	0x40013800
 80078d8:	40021000 	.word	0x40021000
 80078dc:	40004400 	.word	0x40004400
 80078e0:	40004800 	.word	0x40004800
 80078e4:	40004c00 	.word	0x40004c00
 80078e8:	40005000 	.word	0x40005000
 80078ec:	2310      	movs	r3, #16
 80078ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a9f      	ldr	r2, [pc, #636]	; (8007b74 <UART_SetConfig+0x568>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d17a      	bne.n	80079f2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80078fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007900:	2b08      	cmp	r3, #8
 8007902:	d824      	bhi.n	800794e <UART_SetConfig+0x342>
 8007904:	a201      	add	r2, pc, #4	; (adr r2, 800790c <UART_SetConfig+0x300>)
 8007906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800790a:	bf00      	nop
 800790c:	08007931 	.word	0x08007931
 8007910:	0800794f 	.word	0x0800794f
 8007914:	08007939 	.word	0x08007939
 8007918:	0800794f 	.word	0x0800794f
 800791c:	0800793f 	.word	0x0800793f
 8007920:	0800794f 	.word	0x0800794f
 8007924:	0800794f 	.word	0x0800794f
 8007928:	0800794f 	.word	0x0800794f
 800792c:	08007947 	.word	0x08007947
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007930:	f7fd fab4 	bl	8004e9c <HAL_RCC_GetPCLK1Freq>
 8007934:	61f8      	str	r0, [r7, #28]
        break;
 8007936:	e010      	b.n	800795a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007938:	4b8f      	ldr	r3, [pc, #572]	; (8007b78 <UART_SetConfig+0x56c>)
 800793a:	61fb      	str	r3, [r7, #28]
        break;
 800793c:	e00d      	b.n	800795a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800793e:	f7fd fa15 	bl	8004d6c <HAL_RCC_GetSysClockFreq>
 8007942:	61f8      	str	r0, [r7, #28]
        break;
 8007944:	e009      	b.n	800795a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007946:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800794a:	61fb      	str	r3, [r7, #28]
        break;
 800794c:	e005      	b.n	800795a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800794e:	2300      	movs	r3, #0
 8007950:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007958:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800795a:	69fb      	ldr	r3, [r7, #28]
 800795c:	2b00      	cmp	r3, #0
 800795e:	f000 80fb 	beq.w	8007b58 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	685a      	ldr	r2, [r3, #4]
 8007966:	4613      	mov	r3, r2
 8007968:	005b      	lsls	r3, r3, #1
 800796a:	4413      	add	r3, r2
 800796c:	69fa      	ldr	r2, [r7, #28]
 800796e:	429a      	cmp	r2, r3
 8007970:	d305      	bcc.n	800797e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007978:	69fa      	ldr	r2, [r7, #28]
 800797a:	429a      	cmp	r2, r3
 800797c:	d903      	bls.n	8007986 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800797e:	2301      	movs	r3, #1
 8007980:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007984:	e0e8      	b.n	8007b58 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007986:	69fb      	ldr	r3, [r7, #28]
 8007988:	2200      	movs	r2, #0
 800798a:	461c      	mov	r4, r3
 800798c:	4615      	mov	r5, r2
 800798e:	f04f 0200 	mov.w	r2, #0
 8007992:	f04f 0300 	mov.w	r3, #0
 8007996:	022b      	lsls	r3, r5, #8
 8007998:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800799c:	0222      	lsls	r2, r4, #8
 800799e:	68f9      	ldr	r1, [r7, #12]
 80079a0:	6849      	ldr	r1, [r1, #4]
 80079a2:	0849      	lsrs	r1, r1, #1
 80079a4:	2000      	movs	r0, #0
 80079a6:	4688      	mov	r8, r1
 80079a8:	4681      	mov	r9, r0
 80079aa:	eb12 0a08 	adds.w	sl, r2, r8
 80079ae:	eb43 0b09 	adc.w	fp, r3, r9
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	603b      	str	r3, [r7, #0]
 80079ba:	607a      	str	r2, [r7, #4]
 80079bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079c0:	4650      	mov	r0, sl
 80079c2:	4659      	mov	r1, fp
 80079c4:	f7f9 f960 	bl	8000c88 <__aeabi_uldivmod>
 80079c8:	4602      	mov	r2, r0
 80079ca:	460b      	mov	r3, r1
 80079cc:	4613      	mov	r3, r2
 80079ce:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80079d0:	69bb      	ldr	r3, [r7, #24]
 80079d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079d6:	d308      	bcc.n	80079ea <UART_SetConfig+0x3de>
 80079d8:	69bb      	ldr	r3, [r7, #24]
 80079da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079de:	d204      	bcs.n	80079ea <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	69ba      	ldr	r2, [r7, #24]
 80079e6:	60da      	str	r2, [r3, #12]
 80079e8:	e0b6      	b.n	8007b58 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80079ea:	2301      	movs	r3, #1
 80079ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80079f0:	e0b2      	b.n	8007b58 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	69db      	ldr	r3, [r3, #28]
 80079f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079fa:	d15e      	bne.n	8007aba <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80079fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a00:	2b08      	cmp	r3, #8
 8007a02:	d828      	bhi.n	8007a56 <UART_SetConfig+0x44a>
 8007a04:	a201      	add	r2, pc, #4	; (adr r2, 8007a0c <UART_SetConfig+0x400>)
 8007a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a0a:	bf00      	nop
 8007a0c:	08007a31 	.word	0x08007a31
 8007a10:	08007a39 	.word	0x08007a39
 8007a14:	08007a41 	.word	0x08007a41
 8007a18:	08007a57 	.word	0x08007a57
 8007a1c:	08007a47 	.word	0x08007a47
 8007a20:	08007a57 	.word	0x08007a57
 8007a24:	08007a57 	.word	0x08007a57
 8007a28:	08007a57 	.word	0x08007a57
 8007a2c:	08007a4f 	.word	0x08007a4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a30:	f7fd fa34 	bl	8004e9c <HAL_RCC_GetPCLK1Freq>
 8007a34:	61f8      	str	r0, [r7, #28]
        break;
 8007a36:	e014      	b.n	8007a62 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a38:	f7fd fa46 	bl	8004ec8 <HAL_RCC_GetPCLK2Freq>
 8007a3c:	61f8      	str	r0, [r7, #28]
        break;
 8007a3e:	e010      	b.n	8007a62 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a40:	4b4d      	ldr	r3, [pc, #308]	; (8007b78 <UART_SetConfig+0x56c>)
 8007a42:	61fb      	str	r3, [r7, #28]
        break;
 8007a44:	e00d      	b.n	8007a62 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a46:	f7fd f991 	bl	8004d6c <HAL_RCC_GetSysClockFreq>
 8007a4a:	61f8      	str	r0, [r7, #28]
        break;
 8007a4c:	e009      	b.n	8007a62 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a52:	61fb      	str	r3, [r7, #28]
        break;
 8007a54:	e005      	b.n	8007a62 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007a56:	2300      	movs	r3, #0
 8007a58:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007a60:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a62:	69fb      	ldr	r3, [r7, #28]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d077      	beq.n	8007b58 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007a68:	69fb      	ldr	r3, [r7, #28]
 8007a6a:	005a      	lsls	r2, r3, #1
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	085b      	lsrs	r3, r3, #1
 8007a72:	441a      	add	r2, r3
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a7c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a7e:	69bb      	ldr	r3, [r7, #24]
 8007a80:	2b0f      	cmp	r3, #15
 8007a82:	d916      	bls.n	8007ab2 <UART_SetConfig+0x4a6>
 8007a84:	69bb      	ldr	r3, [r7, #24]
 8007a86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a8a:	d212      	bcs.n	8007ab2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a8c:	69bb      	ldr	r3, [r7, #24]
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	f023 030f 	bic.w	r3, r3, #15
 8007a94:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a96:	69bb      	ldr	r3, [r7, #24]
 8007a98:	085b      	lsrs	r3, r3, #1
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	f003 0307 	and.w	r3, r3, #7
 8007aa0:	b29a      	uxth	r2, r3
 8007aa2:	8afb      	ldrh	r3, [r7, #22]
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	8afa      	ldrh	r2, [r7, #22]
 8007aae:	60da      	str	r2, [r3, #12]
 8007ab0:	e052      	b.n	8007b58 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007ab8:	e04e      	b.n	8007b58 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007aba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007abe:	2b08      	cmp	r3, #8
 8007ac0:	d827      	bhi.n	8007b12 <UART_SetConfig+0x506>
 8007ac2:	a201      	add	r2, pc, #4	; (adr r2, 8007ac8 <UART_SetConfig+0x4bc>)
 8007ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac8:	08007aed 	.word	0x08007aed
 8007acc:	08007af5 	.word	0x08007af5
 8007ad0:	08007afd 	.word	0x08007afd
 8007ad4:	08007b13 	.word	0x08007b13
 8007ad8:	08007b03 	.word	0x08007b03
 8007adc:	08007b13 	.word	0x08007b13
 8007ae0:	08007b13 	.word	0x08007b13
 8007ae4:	08007b13 	.word	0x08007b13
 8007ae8:	08007b0b 	.word	0x08007b0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007aec:	f7fd f9d6 	bl	8004e9c <HAL_RCC_GetPCLK1Freq>
 8007af0:	61f8      	str	r0, [r7, #28]
        break;
 8007af2:	e014      	b.n	8007b1e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007af4:	f7fd f9e8 	bl	8004ec8 <HAL_RCC_GetPCLK2Freq>
 8007af8:	61f8      	str	r0, [r7, #28]
        break;
 8007afa:	e010      	b.n	8007b1e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007afc:	4b1e      	ldr	r3, [pc, #120]	; (8007b78 <UART_SetConfig+0x56c>)
 8007afe:	61fb      	str	r3, [r7, #28]
        break;
 8007b00:	e00d      	b.n	8007b1e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b02:	f7fd f933 	bl	8004d6c <HAL_RCC_GetSysClockFreq>
 8007b06:	61f8      	str	r0, [r7, #28]
        break;
 8007b08:	e009      	b.n	8007b1e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b0e:	61fb      	str	r3, [r7, #28]
        break;
 8007b10:	e005      	b.n	8007b1e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007b12:	2300      	movs	r3, #0
 8007b14:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007b1c:	bf00      	nop
    }

    if (pclk != 0U)
 8007b1e:	69fb      	ldr	r3, [r7, #28]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d019      	beq.n	8007b58 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	085a      	lsrs	r2, r3, #1
 8007b2a:	69fb      	ldr	r3, [r7, #28]
 8007b2c:	441a      	add	r2, r3
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b36:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b38:	69bb      	ldr	r3, [r7, #24]
 8007b3a:	2b0f      	cmp	r3, #15
 8007b3c:	d909      	bls.n	8007b52 <UART_SetConfig+0x546>
 8007b3e:	69bb      	ldr	r3, [r7, #24]
 8007b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b44:	d205      	bcs.n	8007b52 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007b46:	69bb      	ldr	r3, [r7, #24]
 8007b48:	b29a      	uxth	r2, r3
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	60da      	str	r2, [r3, #12]
 8007b50:	e002      	b.n	8007b58 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007b52:	2301      	movs	r3, #1
 8007b54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2200      	movs	r2, #0
 8007b62:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007b64:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3728      	adds	r7, #40	; 0x28
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b72:	bf00      	nop
 8007b74:	40008000 	.word	0x40008000
 8007b78:	00f42400 	.word	0x00f42400

08007b7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b083      	sub	sp, #12
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b88:	f003 0301 	and.w	r3, r3, #1
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d00a      	beq.n	8007ba6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	430a      	orrs	r2, r1
 8007ba4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007baa:	f003 0302 	and.w	r3, r3, #2
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d00a      	beq.n	8007bc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	430a      	orrs	r2, r1
 8007bc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bcc:	f003 0304 	and.w	r3, r3, #4
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d00a      	beq.n	8007bea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	430a      	orrs	r2, r1
 8007be8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bee:	f003 0308 	and.w	r3, r3, #8
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d00a      	beq.n	8007c0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	430a      	orrs	r2, r1
 8007c0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c10:	f003 0310 	and.w	r3, r3, #16
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d00a      	beq.n	8007c2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	689b      	ldr	r3, [r3, #8]
 8007c1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	430a      	orrs	r2, r1
 8007c2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c32:	f003 0320 	and.w	r3, r3, #32
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d00a      	beq.n	8007c50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	430a      	orrs	r2, r1
 8007c4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d01a      	beq.n	8007c92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	430a      	orrs	r2, r1
 8007c70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c7a:	d10a      	bne.n	8007c92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	430a      	orrs	r2, r1
 8007c90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d00a      	beq.n	8007cb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	430a      	orrs	r2, r1
 8007cb2:	605a      	str	r2, [r3, #4]
  }
}
 8007cb4:	bf00      	nop
 8007cb6:	370c      	adds	r7, #12
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr

08007cc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b086      	sub	sp, #24
 8007cc4:	af02      	add	r7, sp, #8
 8007cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007cd0:	f7fa f9b6 	bl	8002040 <HAL_GetTick>
 8007cd4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f003 0308 	and.w	r3, r3, #8
 8007ce0:	2b08      	cmp	r3, #8
 8007ce2:	d10e      	bne.n	8007d02 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ce4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ce8:	9300      	str	r3, [sp, #0]
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2200      	movs	r2, #0
 8007cee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 f82d 	bl	8007d52 <UART_WaitOnFlagUntilTimeout>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d001      	beq.n	8007d02 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007cfe:	2303      	movs	r3, #3
 8007d00:	e023      	b.n	8007d4a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f003 0304 	and.w	r3, r3, #4
 8007d0c:	2b04      	cmp	r3, #4
 8007d0e:	d10e      	bne.n	8007d2e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d14:	9300      	str	r3, [sp, #0]
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 f817 	bl	8007d52 <UART_WaitOnFlagUntilTimeout>
 8007d24:	4603      	mov	r3, r0
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d001      	beq.n	8007d2e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d2a:	2303      	movs	r3, #3
 8007d2c:	e00d      	b.n	8007d4a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2220      	movs	r2, #32
 8007d32:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2220      	movs	r2, #32
 8007d38:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2200      	movs	r2, #0
 8007d44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007d48:	2300      	movs	r3, #0
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3710      	adds	r7, #16
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}

08007d52 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d52:	b580      	push	{r7, lr}
 8007d54:	b09c      	sub	sp, #112	; 0x70
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	60f8      	str	r0, [r7, #12]
 8007d5a:	60b9      	str	r1, [r7, #8]
 8007d5c:	603b      	str	r3, [r7, #0]
 8007d5e:	4613      	mov	r3, r2
 8007d60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d62:	e0a5      	b.n	8007eb0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d6a:	f000 80a1 	beq.w	8007eb0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d6e:	f7fa f967 	bl	8002040 <HAL_GetTick>
 8007d72:	4602      	mov	r2, r0
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	1ad3      	subs	r3, r2, r3
 8007d78:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d302      	bcc.n	8007d84 <UART_WaitOnFlagUntilTimeout+0x32>
 8007d7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d13e      	bne.n	8007e02 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d8c:	e853 3f00 	ldrex	r3, [r3]
 8007d90:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007d92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d94:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007d98:	667b      	str	r3, [r7, #100]	; 0x64
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	461a      	mov	r2, r3
 8007da0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007da2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007da4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007da8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007daa:	e841 2300 	strex	r3, r2, [r1]
 8007dae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007db0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d1e6      	bne.n	8007d84 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	3308      	adds	r3, #8
 8007dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dc0:	e853 3f00 	ldrex	r3, [r3]
 8007dc4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc8:	f023 0301 	bic.w	r3, r3, #1
 8007dcc:	663b      	str	r3, [r7, #96]	; 0x60
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	3308      	adds	r3, #8
 8007dd4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007dd6:	64ba      	str	r2, [r7, #72]	; 0x48
 8007dd8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dda:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007ddc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007dde:	e841 2300 	strex	r3, r2, [r1]
 8007de2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007de4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d1e5      	bne.n	8007db6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2220      	movs	r2, #32
 8007dee:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2220      	movs	r2, #32
 8007df4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007dfe:	2303      	movs	r3, #3
 8007e00:	e067      	b.n	8007ed2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f003 0304 	and.w	r3, r3, #4
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d04f      	beq.n	8007eb0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	69db      	ldr	r3, [r3, #28]
 8007e16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e1e:	d147      	bne.n	8007eb0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e28:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e32:	e853 3f00 	ldrex	r3, [r3]
 8007e36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e3a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007e3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	461a      	mov	r2, r3
 8007e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e48:	637b      	str	r3, [r7, #52]	; 0x34
 8007e4a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007e4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e50:	e841 2300 	strex	r3, r2, [r1]
 8007e54:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d1e6      	bne.n	8007e2a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	3308      	adds	r3, #8
 8007e62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	e853 3f00 	ldrex	r3, [r3]
 8007e6a:	613b      	str	r3, [r7, #16]
   return(result);
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	f023 0301 	bic.w	r3, r3, #1
 8007e72:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	3308      	adds	r3, #8
 8007e7a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007e7c:	623a      	str	r2, [r7, #32]
 8007e7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e80:	69f9      	ldr	r1, [r7, #28]
 8007e82:	6a3a      	ldr	r2, [r7, #32]
 8007e84:	e841 2300 	strex	r3, r2, [r1]
 8007e88:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e8a:	69bb      	ldr	r3, [r7, #24]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d1e5      	bne.n	8007e5c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2220      	movs	r2, #32
 8007e94:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2220      	movs	r2, #32
 8007e9a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2220      	movs	r2, #32
 8007ea0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007eac:	2303      	movs	r3, #3
 8007eae:	e010      	b.n	8007ed2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	69da      	ldr	r2, [r3, #28]
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	4013      	ands	r3, r2
 8007eba:	68ba      	ldr	r2, [r7, #8]
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	bf0c      	ite	eq
 8007ec0:	2301      	moveq	r3, #1
 8007ec2:	2300      	movne	r3, #0
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	461a      	mov	r2, r3
 8007ec8:	79fb      	ldrb	r3, [r7, #7]
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	f43f af4a 	beq.w	8007d64 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ed0:	2300      	movs	r3, #0
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3770      	adds	r7, #112	; 0x70
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}

08007eda <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007eda:	b480      	push	{r7}
 8007edc:	b095      	sub	sp, #84	; 0x54
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eea:	e853 3f00 	ldrex	r3, [r3]
 8007eee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ef6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	461a      	mov	r2, r3
 8007efe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f00:	643b      	str	r3, [r7, #64]	; 0x40
 8007f02:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f04:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007f06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f08:	e841 2300 	strex	r3, r2, [r1]
 8007f0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d1e6      	bne.n	8007ee2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	3308      	adds	r3, #8
 8007f1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f1c:	6a3b      	ldr	r3, [r7, #32]
 8007f1e:	e853 3f00 	ldrex	r3, [r3]
 8007f22:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f24:	69fb      	ldr	r3, [r7, #28]
 8007f26:	f023 0301 	bic.w	r3, r3, #1
 8007f2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	3308      	adds	r3, #8
 8007f32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f3c:	e841 2300 	strex	r3, r2, [r1]
 8007f40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d1e5      	bne.n	8007f14 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d118      	bne.n	8007f82 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	e853 3f00 	ldrex	r3, [r3]
 8007f5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	f023 0310 	bic.w	r3, r3, #16
 8007f64:	647b      	str	r3, [r7, #68]	; 0x44
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	461a      	mov	r2, r3
 8007f6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f6e:	61bb      	str	r3, [r7, #24]
 8007f70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f72:	6979      	ldr	r1, [r7, #20]
 8007f74:	69ba      	ldr	r2, [r7, #24]
 8007f76:	e841 2300 	strex	r3, r2, [r1]
 8007f7a:	613b      	str	r3, [r7, #16]
   return(result);
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d1e6      	bne.n	8007f50 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2220      	movs	r2, #32
 8007f86:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2200      	movs	r2, #0
 8007f92:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007f94:	bf00      	nop
 8007f96:	3754      	adds	r7, #84	; 0x54
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr

08007fa0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b084      	sub	sp, #16
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007fbe:	68f8      	ldr	r0, [r7, #12]
 8007fc0:	f7ff fb0e 	bl	80075e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fc4:	bf00      	nop
 8007fc6:	3710      	adds	r7, #16
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b088      	sub	sp, #32
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	e853 3f00 	ldrex	r3, [r3]
 8007fe0:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fe8:	61fb      	str	r3, [r7, #28]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	461a      	mov	r2, r3
 8007ff0:	69fb      	ldr	r3, [r7, #28]
 8007ff2:	61bb      	str	r3, [r7, #24]
 8007ff4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff6:	6979      	ldr	r1, [r7, #20]
 8007ff8:	69ba      	ldr	r2, [r7, #24]
 8007ffa:	e841 2300 	strex	r3, r2, [r1]
 8007ffe:	613b      	str	r3, [r7, #16]
   return(result);
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d1e6      	bne.n	8007fd4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2220      	movs	r2, #32
 800800a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2200      	movs	r2, #0
 8008010:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f7f8 fff0 	bl	8000ff8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008018:	bf00      	nop
 800801a:	3720      	adds	r7, #32
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}

08008020 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008020:	b480      	push	{r7}
 8008022:	b083      	sub	sp, #12
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008028:	bf00      	nop
 800802a:	370c      	adds	r7, #12
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr

08008034 <__errno>:
 8008034:	4b01      	ldr	r3, [pc, #4]	; (800803c <__errno+0x8>)
 8008036:	6818      	ldr	r0, [r3, #0]
 8008038:	4770      	bx	lr
 800803a:	bf00      	nop
 800803c:	20000018 	.word	0x20000018

08008040 <__libc_init_array>:
 8008040:	b570      	push	{r4, r5, r6, lr}
 8008042:	4d0d      	ldr	r5, [pc, #52]	; (8008078 <__libc_init_array+0x38>)
 8008044:	4c0d      	ldr	r4, [pc, #52]	; (800807c <__libc_init_array+0x3c>)
 8008046:	1b64      	subs	r4, r4, r5
 8008048:	10a4      	asrs	r4, r4, #2
 800804a:	2600      	movs	r6, #0
 800804c:	42a6      	cmp	r6, r4
 800804e:	d109      	bne.n	8008064 <__libc_init_array+0x24>
 8008050:	4d0b      	ldr	r5, [pc, #44]	; (8008080 <__libc_init_array+0x40>)
 8008052:	4c0c      	ldr	r4, [pc, #48]	; (8008084 <__libc_init_array+0x44>)
 8008054:	f004 fd1a 	bl	800ca8c <_init>
 8008058:	1b64      	subs	r4, r4, r5
 800805a:	10a4      	asrs	r4, r4, #2
 800805c:	2600      	movs	r6, #0
 800805e:	42a6      	cmp	r6, r4
 8008060:	d105      	bne.n	800806e <__libc_init_array+0x2e>
 8008062:	bd70      	pop	{r4, r5, r6, pc}
 8008064:	f855 3b04 	ldr.w	r3, [r5], #4
 8008068:	4798      	blx	r3
 800806a:	3601      	adds	r6, #1
 800806c:	e7ee      	b.n	800804c <__libc_init_array+0xc>
 800806e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008072:	4798      	blx	r3
 8008074:	3601      	adds	r6, #1
 8008076:	e7f2      	b.n	800805e <__libc_init_array+0x1e>
 8008078:	0800d094 	.word	0x0800d094
 800807c:	0800d094 	.word	0x0800d094
 8008080:	0800d094 	.word	0x0800d094
 8008084:	0800d098 	.word	0x0800d098

08008088 <memcpy>:
 8008088:	440a      	add	r2, r1
 800808a:	4291      	cmp	r1, r2
 800808c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008090:	d100      	bne.n	8008094 <memcpy+0xc>
 8008092:	4770      	bx	lr
 8008094:	b510      	push	{r4, lr}
 8008096:	f811 4b01 	ldrb.w	r4, [r1], #1
 800809a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800809e:	4291      	cmp	r1, r2
 80080a0:	d1f9      	bne.n	8008096 <memcpy+0xe>
 80080a2:	bd10      	pop	{r4, pc}

080080a4 <memset>:
 80080a4:	4402      	add	r2, r0
 80080a6:	4603      	mov	r3, r0
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d100      	bne.n	80080ae <memset+0xa>
 80080ac:	4770      	bx	lr
 80080ae:	f803 1b01 	strb.w	r1, [r3], #1
 80080b2:	e7f9      	b.n	80080a8 <memset+0x4>

080080b4 <__cvt>:
 80080b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80080b8:	ec55 4b10 	vmov	r4, r5, d0
 80080bc:	2d00      	cmp	r5, #0
 80080be:	460e      	mov	r6, r1
 80080c0:	4619      	mov	r1, r3
 80080c2:	462b      	mov	r3, r5
 80080c4:	bfbb      	ittet	lt
 80080c6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80080ca:	461d      	movlt	r5, r3
 80080cc:	2300      	movge	r3, #0
 80080ce:	232d      	movlt	r3, #45	; 0x2d
 80080d0:	700b      	strb	r3, [r1, #0]
 80080d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080d4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80080d8:	4691      	mov	r9, r2
 80080da:	f023 0820 	bic.w	r8, r3, #32
 80080de:	bfbc      	itt	lt
 80080e0:	4622      	movlt	r2, r4
 80080e2:	4614      	movlt	r4, r2
 80080e4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80080e8:	d005      	beq.n	80080f6 <__cvt+0x42>
 80080ea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80080ee:	d100      	bne.n	80080f2 <__cvt+0x3e>
 80080f0:	3601      	adds	r6, #1
 80080f2:	2102      	movs	r1, #2
 80080f4:	e000      	b.n	80080f8 <__cvt+0x44>
 80080f6:	2103      	movs	r1, #3
 80080f8:	ab03      	add	r3, sp, #12
 80080fa:	9301      	str	r3, [sp, #4]
 80080fc:	ab02      	add	r3, sp, #8
 80080fe:	9300      	str	r3, [sp, #0]
 8008100:	ec45 4b10 	vmov	d0, r4, r5
 8008104:	4653      	mov	r3, sl
 8008106:	4632      	mov	r2, r6
 8008108:	f001 fefa 	bl	8009f00 <_dtoa_r>
 800810c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008110:	4607      	mov	r7, r0
 8008112:	d102      	bne.n	800811a <__cvt+0x66>
 8008114:	f019 0f01 	tst.w	r9, #1
 8008118:	d022      	beq.n	8008160 <__cvt+0xac>
 800811a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800811e:	eb07 0906 	add.w	r9, r7, r6
 8008122:	d110      	bne.n	8008146 <__cvt+0x92>
 8008124:	783b      	ldrb	r3, [r7, #0]
 8008126:	2b30      	cmp	r3, #48	; 0x30
 8008128:	d10a      	bne.n	8008140 <__cvt+0x8c>
 800812a:	2200      	movs	r2, #0
 800812c:	2300      	movs	r3, #0
 800812e:	4620      	mov	r0, r4
 8008130:	4629      	mov	r1, r5
 8008132:	f7f8 fcc9 	bl	8000ac8 <__aeabi_dcmpeq>
 8008136:	b918      	cbnz	r0, 8008140 <__cvt+0x8c>
 8008138:	f1c6 0601 	rsb	r6, r6, #1
 800813c:	f8ca 6000 	str.w	r6, [sl]
 8008140:	f8da 3000 	ldr.w	r3, [sl]
 8008144:	4499      	add	r9, r3
 8008146:	2200      	movs	r2, #0
 8008148:	2300      	movs	r3, #0
 800814a:	4620      	mov	r0, r4
 800814c:	4629      	mov	r1, r5
 800814e:	f7f8 fcbb 	bl	8000ac8 <__aeabi_dcmpeq>
 8008152:	b108      	cbz	r0, 8008158 <__cvt+0xa4>
 8008154:	f8cd 900c 	str.w	r9, [sp, #12]
 8008158:	2230      	movs	r2, #48	; 0x30
 800815a:	9b03      	ldr	r3, [sp, #12]
 800815c:	454b      	cmp	r3, r9
 800815e:	d307      	bcc.n	8008170 <__cvt+0xbc>
 8008160:	9b03      	ldr	r3, [sp, #12]
 8008162:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008164:	1bdb      	subs	r3, r3, r7
 8008166:	4638      	mov	r0, r7
 8008168:	6013      	str	r3, [r2, #0]
 800816a:	b004      	add	sp, #16
 800816c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008170:	1c59      	adds	r1, r3, #1
 8008172:	9103      	str	r1, [sp, #12]
 8008174:	701a      	strb	r2, [r3, #0]
 8008176:	e7f0      	b.n	800815a <__cvt+0xa6>

08008178 <__exponent>:
 8008178:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800817a:	4603      	mov	r3, r0
 800817c:	2900      	cmp	r1, #0
 800817e:	bfb8      	it	lt
 8008180:	4249      	neglt	r1, r1
 8008182:	f803 2b02 	strb.w	r2, [r3], #2
 8008186:	bfb4      	ite	lt
 8008188:	222d      	movlt	r2, #45	; 0x2d
 800818a:	222b      	movge	r2, #43	; 0x2b
 800818c:	2909      	cmp	r1, #9
 800818e:	7042      	strb	r2, [r0, #1]
 8008190:	dd2a      	ble.n	80081e8 <__exponent+0x70>
 8008192:	f10d 0407 	add.w	r4, sp, #7
 8008196:	46a4      	mov	ip, r4
 8008198:	270a      	movs	r7, #10
 800819a:	46a6      	mov	lr, r4
 800819c:	460a      	mov	r2, r1
 800819e:	fb91 f6f7 	sdiv	r6, r1, r7
 80081a2:	fb07 1516 	mls	r5, r7, r6, r1
 80081a6:	3530      	adds	r5, #48	; 0x30
 80081a8:	2a63      	cmp	r2, #99	; 0x63
 80081aa:	f104 34ff 	add.w	r4, r4, #4294967295
 80081ae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80081b2:	4631      	mov	r1, r6
 80081b4:	dcf1      	bgt.n	800819a <__exponent+0x22>
 80081b6:	3130      	adds	r1, #48	; 0x30
 80081b8:	f1ae 0502 	sub.w	r5, lr, #2
 80081bc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80081c0:	1c44      	adds	r4, r0, #1
 80081c2:	4629      	mov	r1, r5
 80081c4:	4561      	cmp	r1, ip
 80081c6:	d30a      	bcc.n	80081de <__exponent+0x66>
 80081c8:	f10d 0209 	add.w	r2, sp, #9
 80081cc:	eba2 020e 	sub.w	r2, r2, lr
 80081d0:	4565      	cmp	r5, ip
 80081d2:	bf88      	it	hi
 80081d4:	2200      	movhi	r2, #0
 80081d6:	4413      	add	r3, r2
 80081d8:	1a18      	subs	r0, r3, r0
 80081da:	b003      	add	sp, #12
 80081dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80081e2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80081e6:	e7ed      	b.n	80081c4 <__exponent+0x4c>
 80081e8:	2330      	movs	r3, #48	; 0x30
 80081ea:	3130      	adds	r1, #48	; 0x30
 80081ec:	7083      	strb	r3, [r0, #2]
 80081ee:	70c1      	strb	r1, [r0, #3]
 80081f0:	1d03      	adds	r3, r0, #4
 80081f2:	e7f1      	b.n	80081d8 <__exponent+0x60>

080081f4 <_printf_float>:
 80081f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081f8:	ed2d 8b02 	vpush	{d8}
 80081fc:	b08d      	sub	sp, #52	; 0x34
 80081fe:	460c      	mov	r4, r1
 8008200:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008204:	4616      	mov	r6, r2
 8008206:	461f      	mov	r7, r3
 8008208:	4605      	mov	r5, r0
 800820a:	f003 f98d 	bl	800b528 <_localeconv_r>
 800820e:	f8d0 a000 	ldr.w	sl, [r0]
 8008212:	4650      	mov	r0, sl
 8008214:	f7f7 ffdc 	bl	80001d0 <strlen>
 8008218:	2300      	movs	r3, #0
 800821a:	930a      	str	r3, [sp, #40]	; 0x28
 800821c:	6823      	ldr	r3, [r4, #0]
 800821e:	9305      	str	r3, [sp, #20]
 8008220:	f8d8 3000 	ldr.w	r3, [r8]
 8008224:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008228:	3307      	adds	r3, #7
 800822a:	f023 0307 	bic.w	r3, r3, #7
 800822e:	f103 0208 	add.w	r2, r3, #8
 8008232:	f8c8 2000 	str.w	r2, [r8]
 8008236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800823a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800823e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008242:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008246:	9307      	str	r3, [sp, #28]
 8008248:	f8cd 8018 	str.w	r8, [sp, #24]
 800824c:	ee08 0a10 	vmov	s16, r0
 8008250:	4b9f      	ldr	r3, [pc, #636]	; (80084d0 <_printf_float+0x2dc>)
 8008252:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008256:	f04f 32ff 	mov.w	r2, #4294967295
 800825a:	f7f8 fc67 	bl	8000b2c <__aeabi_dcmpun>
 800825e:	bb88      	cbnz	r0, 80082c4 <_printf_float+0xd0>
 8008260:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008264:	4b9a      	ldr	r3, [pc, #616]	; (80084d0 <_printf_float+0x2dc>)
 8008266:	f04f 32ff 	mov.w	r2, #4294967295
 800826a:	f7f8 fc41 	bl	8000af0 <__aeabi_dcmple>
 800826e:	bb48      	cbnz	r0, 80082c4 <_printf_float+0xd0>
 8008270:	2200      	movs	r2, #0
 8008272:	2300      	movs	r3, #0
 8008274:	4640      	mov	r0, r8
 8008276:	4649      	mov	r1, r9
 8008278:	f7f8 fc30 	bl	8000adc <__aeabi_dcmplt>
 800827c:	b110      	cbz	r0, 8008284 <_printf_float+0x90>
 800827e:	232d      	movs	r3, #45	; 0x2d
 8008280:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008284:	4b93      	ldr	r3, [pc, #588]	; (80084d4 <_printf_float+0x2e0>)
 8008286:	4894      	ldr	r0, [pc, #592]	; (80084d8 <_printf_float+0x2e4>)
 8008288:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800828c:	bf94      	ite	ls
 800828e:	4698      	movls	r8, r3
 8008290:	4680      	movhi	r8, r0
 8008292:	2303      	movs	r3, #3
 8008294:	6123      	str	r3, [r4, #16]
 8008296:	9b05      	ldr	r3, [sp, #20]
 8008298:	f023 0204 	bic.w	r2, r3, #4
 800829c:	6022      	str	r2, [r4, #0]
 800829e:	f04f 0900 	mov.w	r9, #0
 80082a2:	9700      	str	r7, [sp, #0]
 80082a4:	4633      	mov	r3, r6
 80082a6:	aa0b      	add	r2, sp, #44	; 0x2c
 80082a8:	4621      	mov	r1, r4
 80082aa:	4628      	mov	r0, r5
 80082ac:	f000 f9d8 	bl	8008660 <_printf_common>
 80082b0:	3001      	adds	r0, #1
 80082b2:	f040 8090 	bne.w	80083d6 <_printf_float+0x1e2>
 80082b6:	f04f 30ff 	mov.w	r0, #4294967295
 80082ba:	b00d      	add	sp, #52	; 0x34
 80082bc:	ecbd 8b02 	vpop	{d8}
 80082c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082c4:	4642      	mov	r2, r8
 80082c6:	464b      	mov	r3, r9
 80082c8:	4640      	mov	r0, r8
 80082ca:	4649      	mov	r1, r9
 80082cc:	f7f8 fc2e 	bl	8000b2c <__aeabi_dcmpun>
 80082d0:	b140      	cbz	r0, 80082e4 <_printf_float+0xf0>
 80082d2:	464b      	mov	r3, r9
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	bfbc      	itt	lt
 80082d8:	232d      	movlt	r3, #45	; 0x2d
 80082da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80082de:	487f      	ldr	r0, [pc, #508]	; (80084dc <_printf_float+0x2e8>)
 80082e0:	4b7f      	ldr	r3, [pc, #508]	; (80084e0 <_printf_float+0x2ec>)
 80082e2:	e7d1      	b.n	8008288 <_printf_float+0x94>
 80082e4:	6863      	ldr	r3, [r4, #4]
 80082e6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80082ea:	9206      	str	r2, [sp, #24]
 80082ec:	1c5a      	adds	r2, r3, #1
 80082ee:	d13f      	bne.n	8008370 <_printf_float+0x17c>
 80082f0:	2306      	movs	r3, #6
 80082f2:	6063      	str	r3, [r4, #4]
 80082f4:	9b05      	ldr	r3, [sp, #20]
 80082f6:	6861      	ldr	r1, [r4, #4]
 80082f8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80082fc:	2300      	movs	r3, #0
 80082fe:	9303      	str	r3, [sp, #12]
 8008300:	ab0a      	add	r3, sp, #40	; 0x28
 8008302:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008306:	ab09      	add	r3, sp, #36	; 0x24
 8008308:	ec49 8b10 	vmov	d0, r8, r9
 800830c:	9300      	str	r3, [sp, #0]
 800830e:	6022      	str	r2, [r4, #0]
 8008310:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008314:	4628      	mov	r0, r5
 8008316:	f7ff fecd 	bl	80080b4 <__cvt>
 800831a:	9b06      	ldr	r3, [sp, #24]
 800831c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800831e:	2b47      	cmp	r3, #71	; 0x47
 8008320:	4680      	mov	r8, r0
 8008322:	d108      	bne.n	8008336 <_printf_float+0x142>
 8008324:	1cc8      	adds	r0, r1, #3
 8008326:	db02      	blt.n	800832e <_printf_float+0x13a>
 8008328:	6863      	ldr	r3, [r4, #4]
 800832a:	4299      	cmp	r1, r3
 800832c:	dd41      	ble.n	80083b2 <_printf_float+0x1be>
 800832e:	f1ab 0b02 	sub.w	fp, fp, #2
 8008332:	fa5f fb8b 	uxtb.w	fp, fp
 8008336:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800833a:	d820      	bhi.n	800837e <_printf_float+0x18a>
 800833c:	3901      	subs	r1, #1
 800833e:	465a      	mov	r2, fp
 8008340:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008344:	9109      	str	r1, [sp, #36]	; 0x24
 8008346:	f7ff ff17 	bl	8008178 <__exponent>
 800834a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800834c:	1813      	adds	r3, r2, r0
 800834e:	2a01      	cmp	r2, #1
 8008350:	4681      	mov	r9, r0
 8008352:	6123      	str	r3, [r4, #16]
 8008354:	dc02      	bgt.n	800835c <_printf_float+0x168>
 8008356:	6822      	ldr	r2, [r4, #0]
 8008358:	07d2      	lsls	r2, r2, #31
 800835a:	d501      	bpl.n	8008360 <_printf_float+0x16c>
 800835c:	3301      	adds	r3, #1
 800835e:	6123      	str	r3, [r4, #16]
 8008360:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008364:	2b00      	cmp	r3, #0
 8008366:	d09c      	beq.n	80082a2 <_printf_float+0xae>
 8008368:	232d      	movs	r3, #45	; 0x2d
 800836a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800836e:	e798      	b.n	80082a2 <_printf_float+0xae>
 8008370:	9a06      	ldr	r2, [sp, #24]
 8008372:	2a47      	cmp	r2, #71	; 0x47
 8008374:	d1be      	bne.n	80082f4 <_printf_float+0x100>
 8008376:	2b00      	cmp	r3, #0
 8008378:	d1bc      	bne.n	80082f4 <_printf_float+0x100>
 800837a:	2301      	movs	r3, #1
 800837c:	e7b9      	b.n	80082f2 <_printf_float+0xfe>
 800837e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008382:	d118      	bne.n	80083b6 <_printf_float+0x1c2>
 8008384:	2900      	cmp	r1, #0
 8008386:	6863      	ldr	r3, [r4, #4]
 8008388:	dd0b      	ble.n	80083a2 <_printf_float+0x1ae>
 800838a:	6121      	str	r1, [r4, #16]
 800838c:	b913      	cbnz	r3, 8008394 <_printf_float+0x1a0>
 800838e:	6822      	ldr	r2, [r4, #0]
 8008390:	07d0      	lsls	r0, r2, #31
 8008392:	d502      	bpl.n	800839a <_printf_float+0x1a6>
 8008394:	3301      	adds	r3, #1
 8008396:	440b      	add	r3, r1
 8008398:	6123      	str	r3, [r4, #16]
 800839a:	65a1      	str	r1, [r4, #88]	; 0x58
 800839c:	f04f 0900 	mov.w	r9, #0
 80083a0:	e7de      	b.n	8008360 <_printf_float+0x16c>
 80083a2:	b913      	cbnz	r3, 80083aa <_printf_float+0x1b6>
 80083a4:	6822      	ldr	r2, [r4, #0]
 80083a6:	07d2      	lsls	r2, r2, #31
 80083a8:	d501      	bpl.n	80083ae <_printf_float+0x1ba>
 80083aa:	3302      	adds	r3, #2
 80083ac:	e7f4      	b.n	8008398 <_printf_float+0x1a4>
 80083ae:	2301      	movs	r3, #1
 80083b0:	e7f2      	b.n	8008398 <_printf_float+0x1a4>
 80083b2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80083b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083b8:	4299      	cmp	r1, r3
 80083ba:	db05      	blt.n	80083c8 <_printf_float+0x1d4>
 80083bc:	6823      	ldr	r3, [r4, #0]
 80083be:	6121      	str	r1, [r4, #16]
 80083c0:	07d8      	lsls	r0, r3, #31
 80083c2:	d5ea      	bpl.n	800839a <_printf_float+0x1a6>
 80083c4:	1c4b      	adds	r3, r1, #1
 80083c6:	e7e7      	b.n	8008398 <_printf_float+0x1a4>
 80083c8:	2900      	cmp	r1, #0
 80083ca:	bfd4      	ite	le
 80083cc:	f1c1 0202 	rsble	r2, r1, #2
 80083d0:	2201      	movgt	r2, #1
 80083d2:	4413      	add	r3, r2
 80083d4:	e7e0      	b.n	8008398 <_printf_float+0x1a4>
 80083d6:	6823      	ldr	r3, [r4, #0]
 80083d8:	055a      	lsls	r2, r3, #21
 80083da:	d407      	bmi.n	80083ec <_printf_float+0x1f8>
 80083dc:	6923      	ldr	r3, [r4, #16]
 80083de:	4642      	mov	r2, r8
 80083e0:	4631      	mov	r1, r6
 80083e2:	4628      	mov	r0, r5
 80083e4:	47b8      	blx	r7
 80083e6:	3001      	adds	r0, #1
 80083e8:	d12c      	bne.n	8008444 <_printf_float+0x250>
 80083ea:	e764      	b.n	80082b6 <_printf_float+0xc2>
 80083ec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80083f0:	f240 80e0 	bls.w	80085b4 <_printf_float+0x3c0>
 80083f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80083f8:	2200      	movs	r2, #0
 80083fa:	2300      	movs	r3, #0
 80083fc:	f7f8 fb64 	bl	8000ac8 <__aeabi_dcmpeq>
 8008400:	2800      	cmp	r0, #0
 8008402:	d034      	beq.n	800846e <_printf_float+0x27a>
 8008404:	4a37      	ldr	r2, [pc, #220]	; (80084e4 <_printf_float+0x2f0>)
 8008406:	2301      	movs	r3, #1
 8008408:	4631      	mov	r1, r6
 800840a:	4628      	mov	r0, r5
 800840c:	47b8      	blx	r7
 800840e:	3001      	adds	r0, #1
 8008410:	f43f af51 	beq.w	80082b6 <_printf_float+0xc2>
 8008414:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008418:	429a      	cmp	r2, r3
 800841a:	db02      	blt.n	8008422 <_printf_float+0x22e>
 800841c:	6823      	ldr	r3, [r4, #0]
 800841e:	07d8      	lsls	r0, r3, #31
 8008420:	d510      	bpl.n	8008444 <_printf_float+0x250>
 8008422:	ee18 3a10 	vmov	r3, s16
 8008426:	4652      	mov	r2, sl
 8008428:	4631      	mov	r1, r6
 800842a:	4628      	mov	r0, r5
 800842c:	47b8      	blx	r7
 800842e:	3001      	adds	r0, #1
 8008430:	f43f af41 	beq.w	80082b6 <_printf_float+0xc2>
 8008434:	f04f 0800 	mov.w	r8, #0
 8008438:	f104 091a 	add.w	r9, r4, #26
 800843c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800843e:	3b01      	subs	r3, #1
 8008440:	4543      	cmp	r3, r8
 8008442:	dc09      	bgt.n	8008458 <_printf_float+0x264>
 8008444:	6823      	ldr	r3, [r4, #0]
 8008446:	079b      	lsls	r3, r3, #30
 8008448:	f100 8105 	bmi.w	8008656 <_printf_float+0x462>
 800844c:	68e0      	ldr	r0, [r4, #12]
 800844e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008450:	4298      	cmp	r0, r3
 8008452:	bfb8      	it	lt
 8008454:	4618      	movlt	r0, r3
 8008456:	e730      	b.n	80082ba <_printf_float+0xc6>
 8008458:	2301      	movs	r3, #1
 800845a:	464a      	mov	r2, r9
 800845c:	4631      	mov	r1, r6
 800845e:	4628      	mov	r0, r5
 8008460:	47b8      	blx	r7
 8008462:	3001      	adds	r0, #1
 8008464:	f43f af27 	beq.w	80082b6 <_printf_float+0xc2>
 8008468:	f108 0801 	add.w	r8, r8, #1
 800846c:	e7e6      	b.n	800843c <_printf_float+0x248>
 800846e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008470:	2b00      	cmp	r3, #0
 8008472:	dc39      	bgt.n	80084e8 <_printf_float+0x2f4>
 8008474:	4a1b      	ldr	r2, [pc, #108]	; (80084e4 <_printf_float+0x2f0>)
 8008476:	2301      	movs	r3, #1
 8008478:	4631      	mov	r1, r6
 800847a:	4628      	mov	r0, r5
 800847c:	47b8      	blx	r7
 800847e:	3001      	adds	r0, #1
 8008480:	f43f af19 	beq.w	80082b6 <_printf_float+0xc2>
 8008484:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008488:	4313      	orrs	r3, r2
 800848a:	d102      	bne.n	8008492 <_printf_float+0x29e>
 800848c:	6823      	ldr	r3, [r4, #0]
 800848e:	07d9      	lsls	r1, r3, #31
 8008490:	d5d8      	bpl.n	8008444 <_printf_float+0x250>
 8008492:	ee18 3a10 	vmov	r3, s16
 8008496:	4652      	mov	r2, sl
 8008498:	4631      	mov	r1, r6
 800849a:	4628      	mov	r0, r5
 800849c:	47b8      	blx	r7
 800849e:	3001      	adds	r0, #1
 80084a0:	f43f af09 	beq.w	80082b6 <_printf_float+0xc2>
 80084a4:	f04f 0900 	mov.w	r9, #0
 80084a8:	f104 0a1a 	add.w	sl, r4, #26
 80084ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084ae:	425b      	negs	r3, r3
 80084b0:	454b      	cmp	r3, r9
 80084b2:	dc01      	bgt.n	80084b8 <_printf_float+0x2c4>
 80084b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084b6:	e792      	b.n	80083de <_printf_float+0x1ea>
 80084b8:	2301      	movs	r3, #1
 80084ba:	4652      	mov	r2, sl
 80084bc:	4631      	mov	r1, r6
 80084be:	4628      	mov	r0, r5
 80084c0:	47b8      	blx	r7
 80084c2:	3001      	adds	r0, #1
 80084c4:	f43f aef7 	beq.w	80082b6 <_printf_float+0xc2>
 80084c8:	f109 0901 	add.w	r9, r9, #1
 80084cc:	e7ee      	b.n	80084ac <_printf_float+0x2b8>
 80084ce:	bf00      	nop
 80084d0:	7fefffff 	.word	0x7fefffff
 80084d4:	0800cbe4 	.word	0x0800cbe4
 80084d8:	0800cbe8 	.word	0x0800cbe8
 80084dc:	0800cbf0 	.word	0x0800cbf0
 80084e0:	0800cbec 	.word	0x0800cbec
 80084e4:	0800cbf4 	.word	0x0800cbf4
 80084e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80084ec:	429a      	cmp	r2, r3
 80084ee:	bfa8      	it	ge
 80084f0:	461a      	movge	r2, r3
 80084f2:	2a00      	cmp	r2, #0
 80084f4:	4691      	mov	r9, r2
 80084f6:	dc37      	bgt.n	8008568 <_printf_float+0x374>
 80084f8:	f04f 0b00 	mov.w	fp, #0
 80084fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008500:	f104 021a 	add.w	r2, r4, #26
 8008504:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008506:	9305      	str	r3, [sp, #20]
 8008508:	eba3 0309 	sub.w	r3, r3, r9
 800850c:	455b      	cmp	r3, fp
 800850e:	dc33      	bgt.n	8008578 <_printf_float+0x384>
 8008510:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008514:	429a      	cmp	r2, r3
 8008516:	db3b      	blt.n	8008590 <_printf_float+0x39c>
 8008518:	6823      	ldr	r3, [r4, #0]
 800851a:	07da      	lsls	r2, r3, #31
 800851c:	d438      	bmi.n	8008590 <_printf_float+0x39c>
 800851e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008520:	9a05      	ldr	r2, [sp, #20]
 8008522:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008524:	1a9a      	subs	r2, r3, r2
 8008526:	eba3 0901 	sub.w	r9, r3, r1
 800852a:	4591      	cmp	r9, r2
 800852c:	bfa8      	it	ge
 800852e:	4691      	movge	r9, r2
 8008530:	f1b9 0f00 	cmp.w	r9, #0
 8008534:	dc35      	bgt.n	80085a2 <_printf_float+0x3ae>
 8008536:	f04f 0800 	mov.w	r8, #0
 800853a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800853e:	f104 0a1a 	add.w	sl, r4, #26
 8008542:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008546:	1a9b      	subs	r3, r3, r2
 8008548:	eba3 0309 	sub.w	r3, r3, r9
 800854c:	4543      	cmp	r3, r8
 800854e:	f77f af79 	ble.w	8008444 <_printf_float+0x250>
 8008552:	2301      	movs	r3, #1
 8008554:	4652      	mov	r2, sl
 8008556:	4631      	mov	r1, r6
 8008558:	4628      	mov	r0, r5
 800855a:	47b8      	blx	r7
 800855c:	3001      	adds	r0, #1
 800855e:	f43f aeaa 	beq.w	80082b6 <_printf_float+0xc2>
 8008562:	f108 0801 	add.w	r8, r8, #1
 8008566:	e7ec      	b.n	8008542 <_printf_float+0x34e>
 8008568:	4613      	mov	r3, r2
 800856a:	4631      	mov	r1, r6
 800856c:	4642      	mov	r2, r8
 800856e:	4628      	mov	r0, r5
 8008570:	47b8      	blx	r7
 8008572:	3001      	adds	r0, #1
 8008574:	d1c0      	bne.n	80084f8 <_printf_float+0x304>
 8008576:	e69e      	b.n	80082b6 <_printf_float+0xc2>
 8008578:	2301      	movs	r3, #1
 800857a:	4631      	mov	r1, r6
 800857c:	4628      	mov	r0, r5
 800857e:	9205      	str	r2, [sp, #20]
 8008580:	47b8      	blx	r7
 8008582:	3001      	adds	r0, #1
 8008584:	f43f ae97 	beq.w	80082b6 <_printf_float+0xc2>
 8008588:	9a05      	ldr	r2, [sp, #20]
 800858a:	f10b 0b01 	add.w	fp, fp, #1
 800858e:	e7b9      	b.n	8008504 <_printf_float+0x310>
 8008590:	ee18 3a10 	vmov	r3, s16
 8008594:	4652      	mov	r2, sl
 8008596:	4631      	mov	r1, r6
 8008598:	4628      	mov	r0, r5
 800859a:	47b8      	blx	r7
 800859c:	3001      	adds	r0, #1
 800859e:	d1be      	bne.n	800851e <_printf_float+0x32a>
 80085a0:	e689      	b.n	80082b6 <_printf_float+0xc2>
 80085a2:	9a05      	ldr	r2, [sp, #20]
 80085a4:	464b      	mov	r3, r9
 80085a6:	4442      	add	r2, r8
 80085a8:	4631      	mov	r1, r6
 80085aa:	4628      	mov	r0, r5
 80085ac:	47b8      	blx	r7
 80085ae:	3001      	adds	r0, #1
 80085b0:	d1c1      	bne.n	8008536 <_printf_float+0x342>
 80085b2:	e680      	b.n	80082b6 <_printf_float+0xc2>
 80085b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085b6:	2a01      	cmp	r2, #1
 80085b8:	dc01      	bgt.n	80085be <_printf_float+0x3ca>
 80085ba:	07db      	lsls	r3, r3, #31
 80085bc:	d538      	bpl.n	8008630 <_printf_float+0x43c>
 80085be:	2301      	movs	r3, #1
 80085c0:	4642      	mov	r2, r8
 80085c2:	4631      	mov	r1, r6
 80085c4:	4628      	mov	r0, r5
 80085c6:	47b8      	blx	r7
 80085c8:	3001      	adds	r0, #1
 80085ca:	f43f ae74 	beq.w	80082b6 <_printf_float+0xc2>
 80085ce:	ee18 3a10 	vmov	r3, s16
 80085d2:	4652      	mov	r2, sl
 80085d4:	4631      	mov	r1, r6
 80085d6:	4628      	mov	r0, r5
 80085d8:	47b8      	blx	r7
 80085da:	3001      	adds	r0, #1
 80085dc:	f43f ae6b 	beq.w	80082b6 <_printf_float+0xc2>
 80085e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80085e4:	2200      	movs	r2, #0
 80085e6:	2300      	movs	r3, #0
 80085e8:	f7f8 fa6e 	bl	8000ac8 <__aeabi_dcmpeq>
 80085ec:	b9d8      	cbnz	r0, 8008626 <_printf_float+0x432>
 80085ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085f0:	f108 0201 	add.w	r2, r8, #1
 80085f4:	3b01      	subs	r3, #1
 80085f6:	4631      	mov	r1, r6
 80085f8:	4628      	mov	r0, r5
 80085fa:	47b8      	blx	r7
 80085fc:	3001      	adds	r0, #1
 80085fe:	d10e      	bne.n	800861e <_printf_float+0x42a>
 8008600:	e659      	b.n	80082b6 <_printf_float+0xc2>
 8008602:	2301      	movs	r3, #1
 8008604:	4652      	mov	r2, sl
 8008606:	4631      	mov	r1, r6
 8008608:	4628      	mov	r0, r5
 800860a:	47b8      	blx	r7
 800860c:	3001      	adds	r0, #1
 800860e:	f43f ae52 	beq.w	80082b6 <_printf_float+0xc2>
 8008612:	f108 0801 	add.w	r8, r8, #1
 8008616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008618:	3b01      	subs	r3, #1
 800861a:	4543      	cmp	r3, r8
 800861c:	dcf1      	bgt.n	8008602 <_printf_float+0x40e>
 800861e:	464b      	mov	r3, r9
 8008620:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008624:	e6dc      	b.n	80083e0 <_printf_float+0x1ec>
 8008626:	f04f 0800 	mov.w	r8, #0
 800862a:	f104 0a1a 	add.w	sl, r4, #26
 800862e:	e7f2      	b.n	8008616 <_printf_float+0x422>
 8008630:	2301      	movs	r3, #1
 8008632:	4642      	mov	r2, r8
 8008634:	e7df      	b.n	80085f6 <_printf_float+0x402>
 8008636:	2301      	movs	r3, #1
 8008638:	464a      	mov	r2, r9
 800863a:	4631      	mov	r1, r6
 800863c:	4628      	mov	r0, r5
 800863e:	47b8      	blx	r7
 8008640:	3001      	adds	r0, #1
 8008642:	f43f ae38 	beq.w	80082b6 <_printf_float+0xc2>
 8008646:	f108 0801 	add.w	r8, r8, #1
 800864a:	68e3      	ldr	r3, [r4, #12]
 800864c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800864e:	1a5b      	subs	r3, r3, r1
 8008650:	4543      	cmp	r3, r8
 8008652:	dcf0      	bgt.n	8008636 <_printf_float+0x442>
 8008654:	e6fa      	b.n	800844c <_printf_float+0x258>
 8008656:	f04f 0800 	mov.w	r8, #0
 800865a:	f104 0919 	add.w	r9, r4, #25
 800865e:	e7f4      	b.n	800864a <_printf_float+0x456>

08008660 <_printf_common>:
 8008660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008664:	4616      	mov	r6, r2
 8008666:	4699      	mov	r9, r3
 8008668:	688a      	ldr	r2, [r1, #8]
 800866a:	690b      	ldr	r3, [r1, #16]
 800866c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008670:	4293      	cmp	r3, r2
 8008672:	bfb8      	it	lt
 8008674:	4613      	movlt	r3, r2
 8008676:	6033      	str	r3, [r6, #0]
 8008678:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800867c:	4607      	mov	r7, r0
 800867e:	460c      	mov	r4, r1
 8008680:	b10a      	cbz	r2, 8008686 <_printf_common+0x26>
 8008682:	3301      	adds	r3, #1
 8008684:	6033      	str	r3, [r6, #0]
 8008686:	6823      	ldr	r3, [r4, #0]
 8008688:	0699      	lsls	r1, r3, #26
 800868a:	bf42      	ittt	mi
 800868c:	6833      	ldrmi	r3, [r6, #0]
 800868e:	3302      	addmi	r3, #2
 8008690:	6033      	strmi	r3, [r6, #0]
 8008692:	6825      	ldr	r5, [r4, #0]
 8008694:	f015 0506 	ands.w	r5, r5, #6
 8008698:	d106      	bne.n	80086a8 <_printf_common+0x48>
 800869a:	f104 0a19 	add.w	sl, r4, #25
 800869e:	68e3      	ldr	r3, [r4, #12]
 80086a0:	6832      	ldr	r2, [r6, #0]
 80086a2:	1a9b      	subs	r3, r3, r2
 80086a4:	42ab      	cmp	r3, r5
 80086a6:	dc26      	bgt.n	80086f6 <_printf_common+0x96>
 80086a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80086ac:	1e13      	subs	r3, r2, #0
 80086ae:	6822      	ldr	r2, [r4, #0]
 80086b0:	bf18      	it	ne
 80086b2:	2301      	movne	r3, #1
 80086b4:	0692      	lsls	r2, r2, #26
 80086b6:	d42b      	bmi.n	8008710 <_printf_common+0xb0>
 80086b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80086bc:	4649      	mov	r1, r9
 80086be:	4638      	mov	r0, r7
 80086c0:	47c0      	blx	r8
 80086c2:	3001      	adds	r0, #1
 80086c4:	d01e      	beq.n	8008704 <_printf_common+0xa4>
 80086c6:	6823      	ldr	r3, [r4, #0]
 80086c8:	68e5      	ldr	r5, [r4, #12]
 80086ca:	6832      	ldr	r2, [r6, #0]
 80086cc:	f003 0306 	and.w	r3, r3, #6
 80086d0:	2b04      	cmp	r3, #4
 80086d2:	bf08      	it	eq
 80086d4:	1aad      	subeq	r5, r5, r2
 80086d6:	68a3      	ldr	r3, [r4, #8]
 80086d8:	6922      	ldr	r2, [r4, #16]
 80086da:	bf0c      	ite	eq
 80086dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80086e0:	2500      	movne	r5, #0
 80086e2:	4293      	cmp	r3, r2
 80086e4:	bfc4      	itt	gt
 80086e6:	1a9b      	subgt	r3, r3, r2
 80086e8:	18ed      	addgt	r5, r5, r3
 80086ea:	2600      	movs	r6, #0
 80086ec:	341a      	adds	r4, #26
 80086ee:	42b5      	cmp	r5, r6
 80086f0:	d11a      	bne.n	8008728 <_printf_common+0xc8>
 80086f2:	2000      	movs	r0, #0
 80086f4:	e008      	b.n	8008708 <_printf_common+0xa8>
 80086f6:	2301      	movs	r3, #1
 80086f8:	4652      	mov	r2, sl
 80086fa:	4649      	mov	r1, r9
 80086fc:	4638      	mov	r0, r7
 80086fe:	47c0      	blx	r8
 8008700:	3001      	adds	r0, #1
 8008702:	d103      	bne.n	800870c <_printf_common+0xac>
 8008704:	f04f 30ff 	mov.w	r0, #4294967295
 8008708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800870c:	3501      	adds	r5, #1
 800870e:	e7c6      	b.n	800869e <_printf_common+0x3e>
 8008710:	18e1      	adds	r1, r4, r3
 8008712:	1c5a      	adds	r2, r3, #1
 8008714:	2030      	movs	r0, #48	; 0x30
 8008716:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800871a:	4422      	add	r2, r4
 800871c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008720:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008724:	3302      	adds	r3, #2
 8008726:	e7c7      	b.n	80086b8 <_printf_common+0x58>
 8008728:	2301      	movs	r3, #1
 800872a:	4622      	mov	r2, r4
 800872c:	4649      	mov	r1, r9
 800872e:	4638      	mov	r0, r7
 8008730:	47c0      	blx	r8
 8008732:	3001      	adds	r0, #1
 8008734:	d0e6      	beq.n	8008704 <_printf_common+0xa4>
 8008736:	3601      	adds	r6, #1
 8008738:	e7d9      	b.n	80086ee <_printf_common+0x8e>
	...

0800873c <_printf_i>:
 800873c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008740:	7e0f      	ldrb	r7, [r1, #24]
 8008742:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008744:	2f78      	cmp	r7, #120	; 0x78
 8008746:	4691      	mov	r9, r2
 8008748:	4680      	mov	r8, r0
 800874a:	460c      	mov	r4, r1
 800874c:	469a      	mov	sl, r3
 800874e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008752:	d807      	bhi.n	8008764 <_printf_i+0x28>
 8008754:	2f62      	cmp	r7, #98	; 0x62
 8008756:	d80a      	bhi.n	800876e <_printf_i+0x32>
 8008758:	2f00      	cmp	r7, #0
 800875a:	f000 80d8 	beq.w	800890e <_printf_i+0x1d2>
 800875e:	2f58      	cmp	r7, #88	; 0x58
 8008760:	f000 80a3 	beq.w	80088aa <_printf_i+0x16e>
 8008764:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008768:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800876c:	e03a      	b.n	80087e4 <_printf_i+0xa8>
 800876e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008772:	2b15      	cmp	r3, #21
 8008774:	d8f6      	bhi.n	8008764 <_printf_i+0x28>
 8008776:	a101      	add	r1, pc, #4	; (adr r1, 800877c <_printf_i+0x40>)
 8008778:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800877c:	080087d5 	.word	0x080087d5
 8008780:	080087e9 	.word	0x080087e9
 8008784:	08008765 	.word	0x08008765
 8008788:	08008765 	.word	0x08008765
 800878c:	08008765 	.word	0x08008765
 8008790:	08008765 	.word	0x08008765
 8008794:	080087e9 	.word	0x080087e9
 8008798:	08008765 	.word	0x08008765
 800879c:	08008765 	.word	0x08008765
 80087a0:	08008765 	.word	0x08008765
 80087a4:	08008765 	.word	0x08008765
 80087a8:	080088f5 	.word	0x080088f5
 80087ac:	08008819 	.word	0x08008819
 80087b0:	080088d7 	.word	0x080088d7
 80087b4:	08008765 	.word	0x08008765
 80087b8:	08008765 	.word	0x08008765
 80087bc:	08008917 	.word	0x08008917
 80087c0:	08008765 	.word	0x08008765
 80087c4:	08008819 	.word	0x08008819
 80087c8:	08008765 	.word	0x08008765
 80087cc:	08008765 	.word	0x08008765
 80087d0:	080088df 	.word	0x080088df
 80087d4:	682b      	ldr	r3, [r5, #0]
 80087d6:	1d1a      	adds	r2, r3, #4
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	602a      	str	r2, [r5, #0]
 80087dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80087e4:	2301      	movs	r3, #1
 80087e6:	e0a3      	b.n	8008930 <_printf_i+0x1f4>
 80087e8:	6820      	ldr	r0, [r4, #0]
 80087ea:	6829      	ldr	r1, [r5, #0]
 80087ec:	0606      	lsls	r6, r0, #24
 80087ee:	f101 0304 	add.w	r3, r1, #4
 80087f2:	d50a      	bpl.n	800880a <_printf_i+0xce>
 80087f4:	680e      	ldr	r6, [r1, #0]
 80087f6:	602b      	str	r3, [r5, #0]
 80087f8:	2e00      	cmp	r6, #0
 80087fa:	da03      	bge.n	8008804 <_printf_i+0xc8>
 80087fc:	232d      	movs	r3, #45	; 0x2d
 80087fe:	4276      	negs	r6, r6
 8008800:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008804:	485e      	ldr	r0, [pc, #376]	; (8008980 <_printf_i+0x244>)
 8008806:	230a      	movs	r3, #10
 8008808:	e019      	b.n	800883e <_printf_i+0x102>
 800880a:	680e      	ldr	r6, [r1, #0]
 800880c:	602b      	str	r3, [r5, #0]
 800880e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008812:	bf18      	it	ne
 8008814:	b236      	sxthne	r6, r6
 8008816:	e7ef      	b.n	80087f8 <_printf_i+0xbc>
 8008818:	682b      	ldr	r3, [r5, #0]
 800881a:	6820      	ldr	r0, [r4, #0]
 800881c:	1d19      	adds	r1, r3, #4
 800881e:	6029      	str	r1, [r5, #0]
 8008820:	0601      	lsls	r1, r0, #24
 8008822:	d501      	bpl.n	8008828 <_printf_i+0xec>
 8008824:	681e      	ldr	r6, [r3, #0]
 8008826:	e002      	b.n	800882e <_printf_i+0xf2>
 8008828:	0646      	lsls	r6, r0, #25
 800882a:	d5fb      	bpl.n	8008824 <_printf_i+0xe8>
 800882c:	881e      	ldrh	r6, [r3, #0]
 800882e:	4854      	ldr	r0, [pc, #336]	; (8008980 <_printf_i+0x244>)
 8008830:	2f6f      	cmp	r7, #111	; 0x6f
 8008832:	bf0c      	ite	eq
 8008834:	2308      	moveq	r3, #8
 8008836:	230a      	movne	r3, #10
 8008838:	2100      	movs	r1, #0
 800883a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800883e:	6865      	ldr	r5, [r4, #4]
 8008840:	60a5      	str	r5, [r4, #8]
 8008842:	2d00      	cmp	r5, #0
 8008844:	bfa2      	ittt	ge
 8008846:	6821      	ldrge	r1, [r4, #0]
 8008848:	f021 0104 	bicge.w	r1, r1, #4
 800884c:	6021      	strge	r1, [r4, #0]
 800884e:	b90e      	cbnz	r6, 8008854 <_printf_i+0x118>
 8008850:	2d00      	cmp	r5, #0
 8008852:	d04d      	beq.n	80088f0 <_printf_i+0x1b4>
 8008854:	4615      	mov	r5, r2
 8008856:	fbb6 f1f3 	udiv	r1, r6, r3
 800885a:	fb03 6711 	mls	r7, r3, r1, r6
 800885e:	5dc7      	ldrb	r7, [r0, r7]
 8008860:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008864:	4637      	mov	r7, r6
 8008866:	42bb      	cmp	r3, r7
 8008868:	460e      	mov	r6, r1
 800886a:	d9f4      	bls.n	8008856 <_printf_i+0x11a>
 800886c:	2b08      	cmp	r3, #8
 800886e:	d10b      	bne.n	8008888 <_printf_i+0x14c>
 8008870:	6823      	ldr	r3, [r4, #0]
 8008872:	07de      	lsls	r6, r3, #31
 8008874:	d508      	bpl.n	8008888 <_printf_i+0x14c>
 8008876:	6923      	ldr	r3, [r4, #16]
 8008878:	6861      	ldr	r1, [r4, #4]
 800887a:	4299      	cmp	r1, r3
 800887c:	bfde      	ittt	le
 800887e:	2330      	movle	r3, #48	; 0x30
 8008880:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008884:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008888:	1b52      	subs	r2, r2, r5
 800888a:	6122      	str	r2, [r4, #16]
 800888c:	f8cd a000 	str.w	sl, [sp]
 8008890:	464b      	mov	r3, r9
 8008892:	aa03      	add	r2, sp, #12
 8008894:	4621      	mov	r1, r4
 8008896:	4640      	mov	r0, r8
 8008898:	f7ff fee2 	bl	8008660 <_printf_common>
 800889c:	3001      	adds	r0, #1
 800889e:	d14c      	bne.n	800893a <_printf_i+0x1fe>
 80088a0:	f04f 30ff 	mov.w	r0, #4294967295
 80088a4:	b004      	add	sp, #16
 80088a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088aa:	4835      	ldr	r0, [pc, #212]	; (8008980 <_printf_i+0x244>)
 80088ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80088b0:	6829      	ldr	r1, [r5, #0]
 80088b2:	6823      	ldr	r3, [r4, #0]
 80088b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80088b8:	6029      	str	r1, [r5, #0]
 80088ba:	061d      	lsls	r5, r3, #24
 80088bc:	d514      	bpl.n	80088e8 <_printf_i+0x1ac>
 80088be:	07df      	lsls	r7, r3, #31
 80088c0:	bf44      	itt	mi
 80088c2:	f043 0320 	orrmi.w	r3, r3, #32
 80088c6:	6023      	strmi	r3, [r4, #0]
 80088c8:	b91e      	cbnz	r6, 80088d2 <_printf_i+0x196>
 80088ca:	6823      	ldr	r3, [r4, #0]
 80088cc:	f023 0320 	bic.w	r3, r3, #32
 80088d0:	6023      	str	r3, [r4, #0]
 80088d2:	2310      	movs	r3, #16
 80088d4:	e7b0      	b.n	8008838 <_printf_i+0xfc>
 80088d6:	6823      	ldr	r3, [r4, #0]
 80088d8:	f043 0320 	orr.w	r3, r3, #32
 80088dc:	6023      	str	r3, [r4, #0]
 80088de:	2378      	movs	r3, #120	; 0x78
 80088e0:	4828      	ldr	r0, [pc, #160]	; (8008984 <_printf_i+0x248>)
 80088e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80088e6:	e7e3      	b.n	80088b0 <_printf_i+0x174>
 80088e8:	0659      	lsls	r1, r3, #25
 80088ea:	bf48      	it	mi
 80088ec:	b2b6      	uxthmi	r6, r6
 80088ee:	e7e6      	b.n	80088be <_printf_i+0x182>
 80088f0:	4615      	mov	r5, r2
 80088f2:	e7bb      	b.n	800886c <_printf_i+0x130>
 80088f4:	682b      	ldr	r3, [r5, #0]
 80088f6:	6826      	ldr	r6, [r4, #0]
 80088f8:	6961      	ldr	r1, [r4, #20]
 80088fa:	1d18      	adds	r0, r3, #4
 80088fc:	6028      	str	r0, [r5, #0]
 80088fe:	0635      	lsls	r5, r6, #24
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	d501      	bpl.n	8008908 <_printf_i+0x1cc>
 8008904:	6019      	str	r1, [r3, #0]
 8008906:	e002      	b.n	800890e <_printf_i+0x1d2>
 8008908:	0670      	lsls	r0, r6, #25
 800890a:	d5fb      	bpl.n	8008904 <_printf_i+0x1c8>
 800890c:	8019      	strh	r1, [r3, #0]
 800890e:	2300      	movs	r3, #0
 8008910:	6123      	str	r3, [r4, #16]
 8008912:	4615      	mov	r5, r2
 8008914:	e7ba      	b.n	800888c <_printf_i+0x150>
 8008916:	682b      	ldr	r3, [r5, #0]
 8008918:	1d1a      	adds	r2, r3, #4
 800891a:	602a      	str	r2, [r5, #0]
 800891c:	681d      	ldr	r5, [r3, #0]
 800891e:	6862      	ldr	r2, [r4, #4]
 8008920:	2100      	movs	r1, #0
 8008922:	4628      	mov	r0, r5
 8008924:	f7f7 fc5c 	bl	80001e0 <memchr>
 8008928:	b108      	cbz	r0, 800892e <_printf_i+0x1f2>
 800892a:	1b40      	subs	r0, r0, r5
 800892c:	6060      	str	r0, [r4, #4]
 800892e:	6863      	ldr	r3, [r4, #4]
 8008930:	6123      	str	r3, [r4, #16]
 8008932:	2300      	movs	r3, #0
 8008934:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008938:	e7a8      	b.n	800888c <_printf_i+0x150>
 800893a:	6923      	ldr	r3, [r4, #16]
 800893c:	462a      	mov	r2, r5
 800893e:	4649      	mov	r1, r9
 8008940:	4640      	mov	r0, r8
 8008942:	47d0      	blx	sl
 8008944:	3001      	adds	r0, #1
 8008946:	d0ab      	beq.n	80088a0 <_printf_i+0x164>
 8008948:	6823      	ldr	r3, [r4, #0]
 800894a:	079b      	lsls	r3, r3, #30
 800894c:	d413      	bmi.n	8008976 <_printf_i+0x23a>
 800894e:	68e0      	ldr	r0, [r4, #12]
 8008950:	9b03      	ldr	r3, [sp, #12]
 8008952:	4298      	cmp	r0, r3
 8008954:	bfb8      	it	lt
 8008956:	4618      	movlt	r0, r3
 8008958:	e7a4      	b.n	80088a4 <_printf_i+0x168>
 800895a:	2301      	movs	r3, #1
 800895c:	4632      	mov	r2, r6
 800895e:	4649      	mov	r1, r9
 8008960:	4640      	mov	r0, r8
 8008962:	47d0      	blx	sl
 8008964:	3001      	adds	r0, #1
 8008966:	d09b      	beq.n	80088a0 <_printf_i+0x164>
 8008968:	3501      	adds	r5, #1
 800896a:	68e3      	ldr	r3, [r4, #12]
 800896c:	9903      	ldr	r1, [sp, #12]
 800896e:	1a5b      	subs	r3, r3, r1
 8008970:	42ab      	cmp	r3, r5
 8008972:	dcf2      	bgt.n	800895a <_printf_i+0x21e>
 8008974:	e7eb      	b.n	800894e <_printf_i+0x212>
 8008976:	2500      	movs	r5, #0
 8008978:	f104 0619 	add.w	r6, r4, #25
 800897c:	e7f5      	b.n	800896a <_printf_i+0x22e>
 800897e:	bf00      	nop
 8008980:	0800cbf6 	.word	0x0800cbf6
 8008984:	0800cc07 	.word	0x0800cc07

08008988 <_scanf_float>:
 8008988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800898c:	b087      	sub	sp, #28
 800898e:	4617      	mov	r7, r2
 8008990:	9303      	str	r3, [sp, #12]
 8008992:	688b      	ldr	r3, [r1, #8]
 8008994:	1e5a      	subs	r2, r3, #1
 8008996:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800899a:	bf83      	ittte	hi
 800899c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80089a0:	195b      	addhi	r3, r3, r5
 80089a2:	9302      	strhi	r3, [sp, #8]
 80089a4:	2300      	movls	r3, #0
 80089a6:	bf86      	itte	hi
 80089a8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80089ac:	608b      	strhi	r3, [r1, #8]
 80089ae:	9302      	strls	r3, [sp, #8]
 80089b0:	680b      	ldr	r3, [r1, #0]
 80089b2:	468b      	mov	fp, r1
 80089b4:	2500      	movs	r5, #0
 80089b6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80089ba:	f84b 3b1c 	str.w	r3, [fp], #28
 80089be:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80089c2:	4680      	mov	r8, r0
 80089c4:	460c      	mov	r4, r1
 80089c6:	465e      	mov	r6, fp
 80089c8:	46aa      	mov	sl, r5
 80089ca:	46a9      	mov	r9, r5
 80089cc:	9501      	str	r5, [sp, #4]
 80089ce:	68a2      	ldr	r2, [r4, #8]
 80089d0:	b152      	cbz	r2, 80089e8 <_scanf_float+0x60>
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	2b4e      	cmp	r3, #78	; 0x4e
 80089d8:	d864      	bhi.n	8008aa4 <_scanf_float+0x11c>
 80089da:	2b40      	cmp	r3, #64	; 0x40
 80089dc:	d83c      	bhi.n	8008a58 <_scanf_float+0xd0>
 80089de:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80089e2:	b2c8      	uxtb	r0, r1
 80089e4:	280e      	cmp	r0, #14
 80089e6:	d93a      	bls.n	8008a5e <_scanf_float+0xd6>
 80089e8:	f1b9 0f00 	cmp.w	r9, #0
 80089ec:	d003      	beq.n	80089f6 <_scanf_float+0x6e>
 80089ee:	6823      	ldr	r3, [r4, #0]
 80089f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089f4:	6023      	str	r3, [r4, #0]
 80089f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80089fa:	f1ba 0f01 	cmp.w	sl, #1
 80089fe:	f200 8113 	bhi.w	8008c28 <_scanf_float+0x2a0>
 8008a02:	455e      	cmp	r6, fp
 8008a04:	f200 8105 	bhi.w	8008c12 <_scanf_float+0x28a>
 8008a08:	2501      	movs	r5, #1
 8008a0a:	4628      	mov	r0, r5
 8008a0c:	b007      	add	sp, #28
 8008a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a12:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008a16:	2a0d      	cmp	r2, #13
 8008a18:	d8e6      	bhi.n	80089e8 <_scanf_float+0x60>
 8008a1a:	a101      	add	r1, pc, #4	; (adr r1, 8008a20 <_scanf_float+0x98>)
 8008a1c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008a20:	08008b5f 	.word	0x08008b5f
 8008a24:	080089e9 	.word	0x080089e9
 8008a28:	080089e9 	.word	0x080089e9
 8008a2c:	080089e9 	.word	0x080089e9
 8008a30:	08008bbf 	.word	0x08008bbf
 8008a34:	08008b97 	.word	0x08008b97
 8008a38:	080089e9 	.word	0x080089e9
 8008a3c:	080089e9 	.word	0x080089e9
 8008a40:	08008b6d 	.word	0x08008b6d
 8008a44:	080089e9 	.word	0x080089e9
 8008a48:	080089e9 	.word	0x080089e9
 8008a4c:	080089e9 	.word	0x080089e9
 8008a50:	080089e9 	.word	0x080089e9
 8008a54:	08008b25 	.word	0x08008b25
 8008a58:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008a5c:	e7db      	b.n	8008a16 <_scanf_float+0x8e>
 8008a5e:	290e      	cmp	r1, #14
 8008a60:	d8c2      	bhi.n	80089e8 <_scanf_float+0x60>
 8008a62:	a001      	add	r0, pc, #4	; (adr r0, 8008a68 <_scanf_float+0xe0>)
 8008a64:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008a68:	08008b17 	.word	0x08008b17
 8008a6c:	080089e9 	.word	0x080089e9
 8008a70:	08008b17 	.word	0x08008b17
 8008a74:	08008bab 	.word	0x08008bab
 8008a78:	080089e9 	.word	0x080089e9
 8008a7c:	08008ac5 	.word	0x08008ac5
 8008a80:	08008b01 	.word	0x08008b01
 8008a84:	08008b01 	.word	0x08008b01
 8008a88:	08008b01 	.word	0x08008b01
 8008a8c:	08008b01 	.word	0x08008b01
 8008a90:	08008b01 	.word	0x08008b01
 8008a94:	08008b01 	.word	0x08008b01
 8008a98:	08008b01 	.word	0x08008b01
 8008a9c:	08008b01 	.word	0x08008b01
 8008aa0:	08008b01 	.word	0x08008b01
 8008aa4:	2b6e      	cmp	r3, #110	; 0x6e
 8008aa6:	d809      	bhi.n	8008abc <_scanf_float+0x134>
 8008aa8:	2b60      	cmp	r3, #96	; 0x60
 8008aaa:	d8b2      	bhi.n	8008a12 <_scanf_float+0x8a>
 8008aac:	2b54      	cmp	r3, #84	; 0x54
 8008aae:	d077      	beq.n	8008ba0 <_scanf_float+0x218>
 8008ab0:	2b59      	cmp	r3, #89	; 0x59
 8008ab2:	d199      	bne.n	80089e8 <_scanf_float+0x60>
 8008ab4:	2d07      	cmp	r5, #7
 8008ab6:	d197      	bne.n	80089e8 <_scanf_float+0x60>
 8008ab8:	2508      	movs	r5, #8
 8008aba:	e029      	b.n	8008b10 <_scanf_float+0x188>
 8008abc:	2b74      	cmp	r3, #116	; 0x74
 8008abe:	d06f      	beq.n	8008ba0 <_scanf_float+0x218>
 8008ac0:	2b79      	cmp	r3, #121	; 0x79
 8008ac2:	e7f6      	b.n	8008ab2 <_scanf_float+0x12a>
 8008ac4:	6821      	ldr	r1, [r4, #0]
 8008ac6:	05c8      	lsls	r0, r1, #23
 8008ac8:	d51a      	bpl.n	8008b00 <_scanf_float+0x178>
 8008aca:	9b02      	ldr	r3, [sp, #8]
 8008acc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008ad0:	6021      	str	r1, [r4, #0]
 8008ad2:	f109 0901 	add.w	r9, r9, #1
 8008ad6:	b11b      	cbz	r3, 8008ae0 <_scanf_float+0x158>
 8008ad8:	3b01      	subs	r3, #1
 8008ada:	3201      	adds	r2, #1
 8008adc:	9302      	str	r3, [sp, #8]
 8008ade:	60a2      	str	r2, [r4, #8]
 8008ae0:	68a3      	ldr	r3, [r4, #8]
 8008ae2:	3b01      	subs	r3, #1
 8008ae4:	60a3      	str	r3, [r4, #8]
 8008ae6:	6923      	ldr	r3, [r4, #16]
 8008ae8:	3301      	adds	r3, #1
 8008aea:	6123      	str	r3, [r4, #16]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	3b01      	subs	r3, #1
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	607b      	str	r3, [r7, #4]
 8008af4:	f340 8084 	ble.w	8008c00 <_scanf_float+0x278>
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	3301      	adds	r3, #1
 8008afc:	603b      	str	r3, [r7, #0]
 8008afe:	e766      	b.n	80089ce <_scanf_float+0x46>
 8008b00:	eb1a 0f05 	cmn.w	sl, r5
 8008b04:	f47f af70 	bne.w	80089e8 <_scanf_float+0x60>
 8008b08:	6822      	ldr	r2, [r4, #0]
 8008b0a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008b0e:	6022      	str	r2, [r4, #0]
 8008b10:	f806 3b01 	strb.w	r3, [r6], #1
 8008b14:	e7e4      	b.n	8008ae0 <_scanf_float+0x158>
 8008b16:	6822      	ldr	r2, [r4, #0]
 8008b18:	0610      	lsls	r0, r2, #24
 8008b1a:	f57f af65 	bpl.w	80089e8 <_scanf_float+0x60>
 8008b1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008b22:	e7f4      	b.n	8008b0e <_scanf_float+0x186>
 8008b24:	f1ba 0f00 	cmp.w	sl, #0
 8008b28:	d10e      	bne.n	8008b48 <_scanf_float+0x1c0>
 8008b2a:	f1b9 0f00 	cmp.w	r9, #0
 8008b2e:	d10e      	bne.n	8008b4e <_scanf_float+0x1c6>
 8008b30:	6822      	ldr	r2, [r4, #0]
 8008b32:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008b36:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008b3a:	d108      	bne.n	8008b4e <_scanf_float+0x1c6>
 8008b3c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008b40:	6022      	str	r2, [r4, #0]
 8008b42:	f04f 0a01 	mov.w	sl, #1
 8008b46:	e7e3      	b.n	8008b10 <_scanf_float+0x188>
 8008b48:	f1ba 0f02 	cmp.w	sl, #2
 8008b4c:	d055      	beq.n	8008bfa <_scanf_float+0x272>
 8008b4e:	2d01      	cmp	r5, #1
 8008b50:	d002      	beq.n	8008b58 <_scanf_float+0x1d0>
 8008b52:	2d04      	cmp	r5, #4
 8008b54:	f47f af48 	bne.w	80089e8 <_scanf_float+0x60>
 8008b58:	3501      	adds	r5, #1
 8008b5a:	b2ed      	uxtb	r5, r5
 8008b5c:	e7d8      	b.n	8008b10 <_scanf_float+0x188>
 8008b5e:	f1ba 0f01 	cmp.w	sl, #1
 8008b62:	f47f af41 	bne.w	80089e8 <_scanf_float+0x60>
 8008b66:	f04f 0a02 	mov.w	sl, #2
 8008b6a:	e7d1      	b.n	8008b10 <_scanf_float+0x188>
 8008b6c:	b97d      	cbnz	r5, 8008b8e <_scanf_float+0x206>
 8008b6e:	f1b9 0f00 	cmp.w	r9, #0
 8008b72:	f47f af3c 	bne.w	80089ee <_scanf_float+0x66>
 8008b76:	6822      	ldr	r2, [r4, #0]
 8008b78:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008b7c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008b80:	f47f af39 	bne.w	80089f6 <_scanf_float+0x6e>
 8008b84:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008b88:	6022      	str	r2, [r4, #0]
 8008b8a:	2501      	movs	r5, #1
 8008b8c:	e7c0      	b.n	8008b10 <_scanf_float+0x188>
 8008b8e:	2d03      	cmp	r5, #3
 8008b90:	d0e2      	beq.n	8008b58 <_scanf_float+0x1d0>
 8008b92:	2d05      	cmp	r5, #5
 8008b94:	e7de      	b.n	8008b54 <_scanf_float+0x1cc>
 8008b96:	2d02      	cmp	r5, #2
 8008b98:	f47f af26 	bne.w	80089e8 <_scanf_float+0x60>
 8008b9c:	2503      	movs	r5, #3
 8008b9e:	e7b7      	b.n	8008b10 <_scanf_float+0x188>
 8008ba0:	2d06      	cmp	r5, #6
 8008ba2:	f47f af21 	bne.w	80089e8 <_scanf_float+0x60>
 8008ba6:	2507      	movs	r5, #7
 8008ba8:	e7b2      	b.n	8008b10 <_scanf_float+0x188>
 8008baa:	6822      	ldr	r2, [r4, #0]
 8008bac:	0591      	lsls	r1, r2, #22
 8008bae:	f57f af1b 	bpl.w	80089e8 <_scanf_float+0x60>
 8008bb2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008bb6:	6022      	str	r2, [r4, #0]
 8008bb8:	f8cd 9004 	str.w	r9, [sp, #4]
 8008bbc:	e7a8      	b.n	8008b10 <_scanf_float+0x188>
 8008bbe:	6822      	ldr	r2, [r4, #0]
 8008bc0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008bc4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008bc8:	d006      	beq.n	8008bd8 <_scanf_float+0x250>
 8008bca:	0550      	lsls	r0, r2, #21
 8008bcc:	f57f af0c 	bpl.w	80089e8 <_scanf_float+0x60>
 8008bd0:	f1b9 0f00 	cmp.w	r9, #0
 8008bd4:	f43f af0f 	beq.w	80089f6 <_scanf_float+0x6e>
 8008bd8:	0591      	lsls	r1, r2, #22
 8008bda:	bf58      	it	pl
 8008bdc:	9901      	ldrpl	r1, [sp, #4]
 8008bde:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008be2:	bf58      	it	pl
 8008be4:	eba9 0101 	subpl.w	r1, r9, r1
 8008be8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008bec:	bf58      	it	pl
 8008bee:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008bf2:	6022      	str	r2, [r4, #0]
 8008bf4:	f04f 0900 	mov.w	r9, #0
 8008bf8:	e78a      	b.n	8008b10 <_scanf_float+0x188>
 8008bfa:	f04f 0a03 	mov.w	sl, #3
 8008bfe:	e787      	b.n	8008b10 <_scanf_float+0x188>
 8008c00:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008c04:	4639      	mov	r1, r7
 8008c06:	4640      	mov	r0, r8
 8008c08:	4798      	blx	r3
 8008c0a:	2800      	cmp	r0, #0
 8008c0c:	f43f aedf 	beq.w	80089ce <_scanf_float+0x46>
 8008c10:	e6ea      	b.n	80089e8 <_scanf_float+0x60>
 8008c12:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008c16:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008c1a:	463a      	mov	r2, r7
 8008c1c:	4640      	mov	r0, r8
 8008c1e:	4798      	blx	r3
 8008c20:	6923      	ldr	r3, [r4, #16]
 8008c22:	3b01      	subs	r3, #1
 8008c24:	6123      	str	r3, [r4, #16]
 8008c26:	e6ec      	b.n	8008a02 <_scanf_float+0x7a>
 8008c28:	1e6b      	subs	r3, r5, #1
 8008c2a:	2b06      	cmp	r3, #6
 8008c2c:	d825      	bhi.n	8008c7a <_scanf_float+0x2f2>
 8008c2e:	2d02      	cmp	r5, #2
 8008c30:	d836      	bhi.n	8008ca0 <_scanf_float+0x318>
 8008c32:	455e      	cmp	r6, fp
 8008c34:	f67f aee8 	bls.w	8008a08 <_scanf_float+0x80>
 8008c38:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008c3c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008c40:	463a      	mov	r2, r7
 8008c42:	4640      	mov	r0, r8
 8008c44:	4798      	blx	r3
 8008c46:	6923      	ldr	r3, [r4, #16]
 8008c48:	3b01      	subs	r3, #1
 8008c4a:	6123      	str	r3, [r4, #16]
 8008c4c:	e7f1      	b.n	8008c32 <_scanf_float+0x2aa>
 8008c4e:	9802      	ldr	r0, [sp, #8]
 8008c50:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008c54:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008c58:	9002      	str	r0, [sp, #8]
 8008c5a:	463a      	mov	r2, r7
 8008c5c:	4640      	mov	r0, r8
 8008c5e:	4798      	blx	r3
 8008c60:	6923      	ldr	r3, [r4, #16]
 8008c62:	3b01      	subs	r3, #1
 8008c64:	6123      	str	r3, [r4, #16]
 8008c66:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c6a:	fa5f fa8a 	uxtb.w	sl, sl
 8008c6e:	f1ba 0f02 	cmp.w	sl, #2
 8008c72:	d1ec      	bne.n	8008c4e <_scanf_float+0x2c6>
 8008c74:	3d03      	subs	r5, #3
 8008c76:	b2ed      	uxtb	r5, r5
 8008c78:	1b76      	subs	r6, r6, r5
 8008c7a:	6823      	ldr	r3, [r4, #0]
 8008c7c:	05da      	lsls	r2, r3, #23
 8008c7e:	d52f      	bpl.n	8008ce0 <_scanf_float+0x358>
 8008c80:	055b      	lsls	r3, r3, #21
 8008c82:	d510      	bpl.n	8008ca6 <_scanf_float+0x31e>
 8008c84:	455e      	cmp	r6, fp
 8008c86:	f67f aebf 	bls.w	8008a08 <_scanf_float+0x80>
 8008c8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008c8e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008c92:	463a      	mov	r2, r7
 8008c94:	4640      	mov	r0, r8
 8008c96:	4798      	blx	r3
 8008c98:	6923      	ldr	r3, [r4, #16]
 8008c9a:	3b01      	subs	r3, #1
 8008c9c:	6123      	str	r3, [r4, #16]
 8008c9e:	e7f1      	b.n	8008c84 <_scanf_float+0x2fc>
 8008ca0:	46aa      	mov	sl, r5
 8008ca2:	9602      	str	r6, [sp, #8]
 8008ca4:	e7df      	b.n	8008c66 <_scanf_float+0x2de>
 8008ca6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008caa:	6923      	ldr	r3, [r4, #16]
 8008cac:	2965      	cmp	r1, #101	; 0x65
 8008cae:	f103 33ff 	add.w	r3, r3, #4294967295
 8008cb2:	f106 35ff 	add.w	r5, r6, #4294967295
 8008cb6:	6123      	str	r3, [r4, #16]
 8008cb8:	d00c      	beq.n	8008cd4 <_scanf_float+0x34c>
 8008cba:	2945      	cmp	r1, #69	; 0x45
 8008cbc:	d00a      	beq.n	8008cd4 <_scanf_float+0x34c>
 8008cbe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008cc2:	463a      	mov	r2, r7
 8008cc4:	4640      	mov	r0, r8
 8008cc6:	4798      	blx	r3
 8008cc8:	6923      	ldr	r3, [r4, #16]
 8008cca:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008cce:	3b01      	subs	r3, #1
 8008cd0:	1eb5      	subs	r5, r6, #2
 8008cd2:	6123      	str	r3, [r4, #16]
 8008cd4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008cd8:	463a      	mov	r2, r7
 8008cda:	4640      	mov	r0, r8
 8008cdc:	4798      	blx	r3
 8008cde:	462e      	mov	r6, r5
 8008ce0:	6825      	ldr	r5, [r4, #0]
 8008ce2:	f015 0510 	ands.w	r5, r5, #16
 8008ce6:	d159      	bne.n	8008d9c <_scanf_float+0x414>
 8008ce8:	7035      	strb	r5, [r6, #0]
 8008cea:	6823      	ldr	r3, [r4, #0]
 8008cec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008cf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008cf4:	d11b      	bne.n	8008d2e <_scanf_float+0x3a6>
 8008cf6:	9b01      	ldr	r3, [sp, #4]
 8008cf8:	454b      	cmp	r3, r9
 8008cfa:	eba3 0209 	sub.w	r2, r3, r9
 8008cfe:	d123      	bne.n	8008d48 <_scanf_float+0x3c0>
 8008d00:	2200      	movs	r2, #0
 8008d02:	4659      	mov	r1, fp
 8008d04:	4640      	mov	r0, r8
 8008d06:	f000 ff25 	bl	8009b54 <_strtod_r>
 8008d0a:	6822      	ldr	r2, [r4, #0]
 8008d0c:	9b03      	ldr	r3, [sp, #12]
 8008d0e:	f012 0f02 	tst.w	r2, #2
 8008d12:	ec57 6b10 	vmov	r6, r7, d0
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	d021      	beq.n	8008d5e <_scanf_float+0x3d6>
 8008d1a:	9903      	ldr	r1, [sp, #12]
 8008d1c:	1d1a      	adds	r2, r3, #4
 8008d1e:	600a      	str	r2, [r1, #0]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	e9c3 6700 	strd	r6, r7, [r3]
 8008d26:	68e3      	ldr	r3, [r4, #12]
 8008d28:	3301      	adds	r3, #1
 8008d2a:	60e3      	str	r3, [r4, #12]
 8008d2c:	e66d      	b.n	8008a0a <_scanf_float+0x82>
 8008d2e:	9b04      	ldr	r3, [sp, #16]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d0e5      	beq.n	8008d00 <_scanf_float+0x378>
 8008d34:	9905      	ldr	r1, [sp, #20]
 8008d36:	230a      	movs	r3, #10
 8008d38:	462a      	mov	r2, r5
 8008d3a:	3101      	adds	r1, #1
 8008d3c:	4640      	mov	r0, r8
 8008d3e:	f000 ff91 	bl	8009c64 <_strtol_r>
 8008d42:	9b04      	ldr	r3, [sp, #16]
 8008d44:	9e05      	ldr	r6, [sp, #20]
 8008d46:	1ac2      	subs	r2, r0, r3
 8008d48:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008d4c:	429e      	cmp	r6, r3
 8008d4e:	bf28      	it	cs
 8008d50:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008d54:	4912      	ldr	r1, [pc, #72]	; (8008da0 <_scanf_float+0x418>)
 8008d56:	4630      	mov	r0, r6
 8008d58:	f000 f8ba 	bl	8008ed0 <siprintf>
 8008d5c:	e7d0      	b.n	8008d00 <_scanf_float+0x378>
 8008d5e:	9903      	ldr	r1, [sp, #12]
 8008d60:	f012 0f04 	tst.w	r2, #4
 8008d64:	f103 0204 	add.w	r2, r3, #4
 8008d68:	600a      	str	r2, [r1, #0]
 8008d6a:	d1d9      	bne.n	8008d20 <_scanf_float+0x398>
 8008d6c:	f8d3 8000 	ldr.w	r8, [r3]
 8008d70:	ee10 2a10 	vmov	r2, s0
 8008d74:	ee10 0a10 	vmov	r0, s0
 8008d78:	463b      	mov	r3, r7
 8008d7a:	4639      	mov	r1, r7
 8008d7c:	f7f7 fed6 	bl	8000b2c <__aeabi_dcmpun>
 8008d80:	b128      	cbz	r0, 8008d8e <_scanf_float+0x406>
 8008d82:	4808      	ldr	r0, [pc, #32]	; (8008da4 <_scanf_float+0x41c>)
 8008d84:	f000 f89e 	bl	8008ec4 <nanf>
 8008d88:	ed88 0a00 	vstr	s0, [r8]
 8008d8c:	e7cb      	b.n	8008d26 <_scanf_float+0x39e>
 8008d8e:	4630      	mov	r0, r6
 8008d90:	4639      	mov	r1, r7
 8008d92:	f7f7 ff29 	bl	8000be8 <__aeabi_d2f>
 8008d96:	f8c8 0000 	str.w	r0, [r8]
 8008d9a:	e7c4      	b.n	8008d26 <_scanf_float+0x39e>
 8008d9c:	2500      	movs	r5, #0
 8008d9e:	e634      	b.n	8008a0a <_scanf_float+0x82>
 8008da0:	0800cc18 	.word	0x0800cc18
 8008da4:	0800d088 	.word	0x0800d088

08008da8 <iprintf>:
 8008da8:	b40f      	push	{r0, r1, r2, r3}
 8008daa:	4b0a      	ldr	r3, [pc, #40]	; (8008dd4 <iprintf+0x2c>)
 8008dac:	b513      	push	{r0, r1, r4, lr}
 8008dae:	681c      	ldr	r4, [r3, #0]
 8008db0:	b124      	cbz	r4, 8008dbc <iprintf+0x14>
 8008db2:	69a3      	ldr	r3, [r4, #24]
 8008db4:	b913      	cbnz	r3, 8008dbc <iprintf+0x14>
 8008db6:	4620      	mov	r0, r4
 8008db8:	f001 ffaa 	bl	800ad10 <__sinit>
 8008dbc:	ab05      	add	r3, sp, #20
 8008dbe:	9a04      	ldr	r2, [sp, #16]
 8008dc0:	68a1      	ldr	r1, [r4, #8]
 8008dc2:	9301      	str	r3, [sp, #4]
 8008dc4:	4620      	mov	r0, r4
 8008dc6:	f003 fb73 	bl	800c4b0 <_vfiprintf_r>
 8008dca:	b002      	add	sp, #8
 8008dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008dd0:	b004      	add	sp, #16
 8008dd2:	4770      	bx	lr
 8008dd4:	20000018 	.word	0x20000018

08008dd8 <_puts_r>:
 8008dd8:	b570      	push	{r4, r5, r6, lr}
 8008dda:	460e      	mov	r6, r1
 8008ddc:	4605      	mov	r5, r0
 8008dde:	b118      	cbz	r0, 8008de8 <_puts_r+0x10>
 8008de0:	6983      	ldr	r3, [r0, #24]
 8008de2:	b90b      	cbnz	r3, 8008de8 <_puts_r+0x10>
 8008de4:	f001 ff94 	bl	800ad10 <__sinit>
 8008de8:	69ab      	ldr	r3, [r5, #24]
 8008dea:	68ac      	ldr	r4, [r5, #8]
 8008dec:	b913      	cbnz	r3, 8008df4 <_puts_r+0x1c>
 8008dee:	4628      	mov	r0, r5
 8008df0:	f001 ff8e 	bl	800ad10 <__sinit>
 8008df4:	4b2c      	ldr	r3, [pc, #176]	; (8008ea8 <_puts_r+0xd0>)
 8008df6:	429c      	cmp	r4, r3
 8008df8:	d120      	bne.n	8008e3c <_puts_r+0x64>
 8008dfa:	686c      	ldr	r4, [r5, #4]
 8008dfc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008dfe:	07db      	lsls	r3, r3, #31
 8008e00:	d405      	bmi.n	8008e0e <_puts_r+0x36>
 8008e02:	89a3      	ldrh	r3, [r4, #12]
 8008e04:	0598      	lsls	r0, r3, #22
 8008e06:	d402      	bmi.n	8008e0e <_puts_r+0x36>
 8008e08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e0a:	f002 fb92 	bl	800b532 <__retarget_lock_acquire_recursive>
 8008e0e:	89a3      	ldrh	r3, [r4, #12]
 8008e10:	0719      	lsls	r1, r3, #28
 8008e12:	d51d      	bpl.n	8008e50 <_puts_r+0x78>
 8008e14:	6923      	ldr	r3, [r4, #16]
 8008e16:	b1db      	cbz	r3, 8008e50 <_puts_r+0x78>
 8008e18:	3e01      	subs	r6, #1
 8008e1a:	68a3      	ldr	r3, [r4, #8]
 8008e1c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008e20:	3b01      	subs	r3, #1
 8008e22:	60a3      	str	r3, [r4, #8]
 8008e24:	bb39      	cbnz	r1, 8008e76 <_puts_r+0x9e>
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	da38      	bge.n	8008e9c <_puts_r+0xc4>
 8008e2a:	4622      	mov	r2, r4
 8008e2c:	210a      	movs	r1, #10
 8008e2e:	4628      	mov	r0, r5
 8008e30:	f000 ff1a 	bl	8009c68 <__swbuf_r>
 8008e34:	3001      	adds	r0, #1
 8008e36:	d011      	beq.n	8008e5c <_puts_r+0x84>
 8008e38:	250a      	movs	r5, #10
 8008e3a:	e011      	b.n	8008e60 <_puts_r+0x88>
 8008e3c:	4b1b      	ldr	r3, [pc, #108]	; (8008eac <_puts_r+0xd4>)
 8008e3e:	429c      	cmp	r4, r3
 8008e40:	d101      	bne.n	8008e46 <_puts_r+0x6e>
 8008e42:	68ac      	ldr	r4, [r5, #8]
 8008e44:	e7da      	b.n	8008dfc <_puts_r+0x24>
 8008e46:	4b1a      	ldr	r3, [pc, #104]	; (8008eb0 <_puts_r+0xd8>)
 8008e48:	429c      	cmp	r4, r3
 8008e4a:	bf08      	it	eq
 8008e4c:	68ec      	ldreq	r4, [r5, #12]
 8008e4e:	e7d5      	b.n	8008dfc <_puts_r+0x24>
 8008e50:	4621      	mov	r1, r4
 8008e52:	4628      	mov	r0, r5
 8008e54:	f000 ff5a 	bl	8009d0c <__swsetup_r>
 8008e58:	2800      	cmp	r0, #0
 8008e5a:	d0dd      	beq.n	8008e18 <_puts_r+0x40>
 8008e5c:	f04f 35ff 	mov.w	r5, #4294967295
 8008e60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e62:	07da      	lsls	r2, r3, #31
 8008e64:	d405      	bmi.n	8008e72 <_puts_r+0x9a>
 8008e66:	89a3      	ldrh	r3, [r4, #12]
 8008e68:	059b      	lsls	r3, r3, #22
 8008e6a:	d402      	bmi.n	8008e72 <_puts_r+0x9a>
 8008e6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e6e:	f002 fb61 	bl	800b534 <__retarget_lock_release_recursive>
 8008e72:	4628      	mov	r0, r5
 8008e74:	bd70      	pop	{r4, r5, r6, pc}
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	da04      	bge.n	8008e84 <_puts_r+0xac>
 8008e7a:	69a2      	ldr	r2, [r4, #24]
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	dc06      	bgt.n	8008e8e <_puts_r+0xb6>
 8008e80:	290a      	cmp	r1, #10
 8008e82:	d004      	beq.n	8008e8e <_puts_r+0xb6>
 8008e84:	6823      	ldr	r3, [r4, #0]
 8008e86:	1c5a      	adds	r2, r3, #1
 8008e88:	6022      	str	r2, [r4, #0]
 8008e8a:	7019      	strb	r1, [r3, #0]
 8008e8c:	e7c5      	b.n	8008e1a <_puts_r+0x42>
 8008e8e:	4622      	mov	r2, r4
 8008e90:	4628      	mov	r0, r5
 8008e92:	f000 fee9 	bl	8009c68 <__swbuf_r>
 8008e96:	3001      	adds	r0, #1
 8008e98:	d1bf      	bne.n	8008e1a <_puts_r+0x42>
 8008e9a:	e7df      	b.n	8008e5c <_puts_r+0x84>
 8008e9c:	6823      	ldr	r3, [r4, #0]
 8008e9e:	250a      	movs	r5, #10
 8008ea0:	1c5a      	adds	r2, r3, #1
 8008ea2:	6022      	str	r2, [r4, #0]
 8008ea4:	701d      	strb	r5, [r3, #0]
 8008ea6:	e7db      	b.n	8008e60 <_puts_r+0x88>
 8008ea8:	0800ce24 	.word	0x0800ce24
 8008eac:	0800ce44 	.word	0x0800ce44
 8008eb0:	0800ce04 	.word	0x0800ce04

08008eb4 <puts>:
 8008eb4:	4b02      	ldr	r3, [pc, #8]	; (8008ec0 <puts+0xc>)
 8008eb6:	4601      	mov	r1, r0
 8008eb8:	6818      	ldr	r0, [r3, #0]
 8008eba:	f7ff bf8d 	b.w	8008dd8 <_puts_r>
 8008ebe:	bf00      	nop
 8008ec0:	20000018 	.word	0x20000018

08008ec4 <nanf>:
 8008ec4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008ecc <nanf+0x8>
 8008ec8:	4770      	bx	lr
 8008eca:	bf00      	nop
 8008ecc:	7fc00000 	.word	0x7fc00000

08008ed0 <siprintf>:
 8008ed0:	b40e      	push	{r1, r2, r3}
 8008ed2:	b500      	push	{lr}
 8008ed4:	b09c      	sub	sp, #112	; 0x70
 8008ed6:	ab1d      	add	r3, sp, #116	; 0x74
 8008ed8:	9002      	str	r0, [sp, #8]
 8008eda:	9006      	str	r0, [sp, #24]
 8008edc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008ee0:	4809      	ldr	r0, [pc, #36]	; (8008f08 <siprintf+0x38>)
 8008ee2:	9107      	str	r1, [sp, #28]
 8008ee4:	9104      	str	r1, [sp, #16]
 8008ee6:	4909      	ldr	r1, [pc, #36]	; (8008f0c <siprintf+0x3c>)
 8008ee8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008eec:	9105      	str	r1, [sp, #20]
 8008eee:	6800      	ldr	r0, [r0, #0]
 8008ef0:	9301      	str	r3, [sp, #4]
 8008ef2:	a902      	add	r1, sp, #8
 8008ef4:	f003 f9b2 	bl	800c25c <_svfiprintf_r>
 8008ef8:	9b02      	ldr	r3, [sp, #8]
 8008efa:	2200      	movs	r2, #0
 8008efc:	701a      	strb	r2, [r3, #0]
 8008efe:	b01c      	add	sp, #112	; 0x70
 8008f00:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f04:	b003      	add	sp, #12
 8008f06:	4770      	bx	lr
 8008f08:	20000018 	.word	0x20000018
 8008f0c:	ffff0208 	.word	0xffff0208

08008f10 <sulp>:
 8008f10:	b570      	push	{r4, r5, r6, lr}
 8008f12:	4604      	mov	r4, r0
 8008f14:	460d      	mov	r5, r1
 8008f16:	ec45 4b10 	vmov	d0, r4, r5
 8008f1a:	4616      	mov	r6, r2
 8008f1c:	f002 fefc 	bl	800bd18 <__ulp>
 8008f20:	ec51 0b10 	vmov	r0, r1, d0
 8008f24:	b17e      	cbz	r6, 8008f46 <sulp+0x36>
 8008f26:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008f2a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	dd09      	ble.n	8008f46 <sulp+0x36>
 8008f32:	051b      	lsls	r3, r3, #20
 8008f34:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008f38:	2400      	movs	r4, #0
 8008f3a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008f3e:	4622      	mov	r2, r4
 8008f40:	462b      	mov	r3, r5
 8008f42:	f7f7 fb59 	bl	80005f8 <__aeabi_dmul>
 8008f46:	bd70      	pop	{r4, r5, r6, pc}

08008f48 <_strtod_l>:
 8008f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f4c:	ed2d 8b02 	vpush	{d8}
 8008f50:	b09d      	sub	sp, #116	; 0x74
 8008f52:	461f      	mov	r7, r3
 8008f54:	2300      	movs	r3, #0
 8008f56:	9318      	str	r3, [sp, #96]	; 0x60
 8008f58:	4ba2      	ldr	r3, [pc, #648]	; (80091e4 <_strtod_l+0x29c>)
 8008f5a:	9213      	str	r2, [sp, #76]	; 0x4c
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	9305      	str	r3, [sp, #20]
 8008f60:	4604      	mov	r4, r0
 8008f62:	4618      	mov	r0, r3
 8008f64:	4688      	mov	r8, r1
 8008f66:	f7f7 f933 	bl	80001d0 <strlen>
 8008f6a:	f04f 0a00 	mov.w	sl, #0
 8008f6e:	4605      	mov	r5, r0
 8008f70:	f04f 0b00 	mov.w	fp, #0
 8008f74:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008f78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008f7a:	781a      	ldrb	r2, [r3, #0]
 8008f7c:	2a2b      	cmp	r2, #43	; 0x2b
 8008f7e:	d04e      	beq.n	800901e <_strtod_l+0xd6>
 8008f80:	d83b      	bhi.n	8008ffa <_strtod_l+0xb2>
 8008f82:	2a0d      	cmp	r2, #13
 8008f84:	d834      	bhi.n	8008ff0 <_strtod_l+0xa8>
 8008f86:	2a08      	cmp	r2, #8
 8008f88:	d834      	bhi.n	8008ff4 <_strtod_l+0xac>
 8008f8a:	2a00      	cmp	r2, #0
 8008f8c:	d03e      	beq.n	800900c <_strtod_l+0xc4>
 8008f8e:	2300      	movs	r3, #0
 8008f90:	930a      	str	r3, [sp, #40]	; 0x28
 8008f92:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008f94:	7833      	ldrb	r3, [r6, #0]
 8008f96:	2b30      	cmp	r3, #48	; 0x30
 8008f98:	f040 80b0 	bne.w	80090fc <_strtod_l+0x1b4>
 8008f9c:	7873      	ldrb	r3, [r6, #1]
 8008f9e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008fa2:	2b58      	cmp	r3, #88	; 0x58
 8008fa4:	d168      	bne.n	8009078 <_strtod_l+0x130>
 8008fa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fa8:	9301      	str	r3, [sp, #4]
 8008faa:	ab18      	add	r3, sp, #96	; 0x60
 8008fac:	9702      	str	r7, [sp, #8]
 8008fae:	9300      	str	r3, [sp, #0]
 8008fb0:	4a8d      	ldr	r2, [pc, #564]	; (80091e8 <_strtod_l+0x2a0>)
 8008fb2:	ab19      	add	r3, sp, #100	; 0x64
 8008fb4:	a917      	add	r1, sp, #92	; 0x5c
 8008fb6:	4620      	mov	r0, r4
 8008fb8:	f001 ffae 	bl	800af18 <__gethex>
 8008fbc:	f010 0707 	ands.w	r7, r0, #7
 8008fc0:	4605      	mov	r5, r0
 8008fc2:	d005      	beq.n	8008fd0 <_strtod_l+0x88>
 8008fc4:	2f06      	cmp	r7, #6
 8008fc6:	d12c      	bne.n	8009022 <_strtod_l+0xda>
 8008fc8:	3601      	adds	r6, #1
 8008fca:	2300      	movs	r3, #0
 8008fcc:	9617      	str	r6, [sp, #92]	; 0x5c
 8008fce:	930a      	str	r3, [sp, #40]	; 0x28
 8008fd0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	f040 8590 	bne.w	8009af8 <_strtod_l+0xbb0>
 8008fd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fda:	b1eb      	cbz	r3, 8009018 <_strtod_l+0xd0>
 8008fdc:	4652      	mov	r2, sl
 8008fde:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008fe2:	ec43 2b10 	vmov	d0, r2, r3
 8008fe6:	b01d      	add	sp, #116	; 0x74
 8008fe8:	ecbd 8b02 	vpop	{d8}
 8008fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ff0:	2a20      	cmp	r2, #32
 8008ff2:	d1cc      	bne.n	8008f8e <_strtod_l+0x46>
 8008ff4:	3301      	adds	r3, #1
 8008ff6:	9317      	str	r3, [sp, #92]	; 0x5c
 8008ff8:	e7be      	b.n	8008f78 <_strtod_l+0x30>
 8008ffa:	2a2d      	cmp	r2, #45	; 0x2d
 8008ffc:	d1c7      	bne.n	8008f8e <_strtod_l+0x46>
 8008ffe:	2201      	movs	r2, #1
 8009000:	920a      	str	r2, [sp, #40]	; 0x28
 8009002:	1c5a      	adds	r2, r3, #1
 8009004:	9217      	str	r2, [sp, #92]	; 0x5c
 8009006:	785b      	ldrb	r3, [r3, #1]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d1c2      	bne.n	8008f92 <_strtod_l+0x4a>
 800900c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800900e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009012:	2b00      	cmp	r3, #0
 8009014:	f040 856e 	bne.w	8009af4 <_strtod_l+0xbac>
 8009018:	4652      	mov	r2, sl
 800901a:	465b      	mov	r3, fp
 800901c:	e7e1      	b.n	8008fe2 <_strtod_l+0x9a>
 800901e:	2200      	movs	r2, #0
 8009020:	e7ee      	b.n	8009000 <_strtod_l+0xb8>
 8009022:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009024:	b13a      	cbz	r2, 8009036 <_strtod_l+0xee>
 8009026:	2135      	movs	r1, #53	; 0x35
 8009028:	a81a      	add	r0, sp, #104	; 0x68
 800902a:	f002 ff80 	bl	800bf2e <__copybits>
 800902e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009030:	4620      	mov	r0, r4
 8009032:	f002 fb3f 	bl	800b6b4 <_Bfree>
 8009036:	3f01      	subs	r7, #1
 8009038:	2f04      	cmp	r7, #4
 800903a:	d806      	bhi.n	800904a <_strtod_l+0x102>
 800903c:	e8df f007 	tbb	[pc, r7]
 8009040:	1714030a 	.word	0x1714030a
 8009044:	0a          	.byte	0x0a
 8009045:	00          	.byte	0x00
 8009046:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800904a:	0728      	lsls	r0, r5, #28
 800904c:	d5c0      	bpl.n	8008fd0 <_strtod_l+0x88>
 800904e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009052:	e7bd      	b.n	8008fd0 <_strtod_l+0x88>
 8009054:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8009058:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800905a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800905e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009062:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009066:	e7f0      	b.n	800904a <_strtod_l+0x102>
 8009068:	f8df b180 	ldr.w	fp, [pc, #384]	; 80091ec <_strtod_l+0x2a4>
 800906c:	e7ed      	b.n	800904a <_strtod_l+0x102>
 800906e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009072:	f04f 3aff 	mov.w	sl, #4294967295
 8009076:	e7e8      	b.n	800904a <_strtod_l+0x102>
 8009078:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800907a:	1c5a      	adds	r2, r3, #1
 800907c:	9217      	str	r2, [sp, #92]	; 0x5c
 800907e:	785b      	ldrb	r3, [r3, #1]
 8009080:	2b30      	cmp	r3, #48	; 0x30
 8009082:	d0f9      	beq.n	8009078 <_strtod_l+0x130>
 8009084:	2b00      	cmp	r3, #0
 8009086:	d0a3      	beq.n	8008fd0 <_strtod_l+0x88>
 8009088:	2301      	movs	r3, #1
 800908a:	f04f 0900 	mov.w	r9, #0
 800908e:	9304      	str	r3, [sp, #16]
 8009090:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009092:	9308      	str	r3, [sp, #32]
 8009094:	f8cd 901c 	str.w	r9, [sp, #28]
 8009098:	464f      	mov	r7, r9
 800909a:	220a      	movs	r2, #10
 800909c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800909e:	7806      	ldrb	r6, [r0, #0]
 80090a0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80090a4:	b2d9      	uxtb	r1, r3
 80090a6:	2909      	cmp	r1, #9
 80090a8:	d92a      	bls.n	8009100 <_strtod_l+0x1b8>
 80090aa:	9905      	ldr	r1, [sp, #20]
 80090ac:	462a      	mov	r2, r5
 80090ae:	f003 fb8a 	bl	800c7c6 <strncmp>
 80090b2:	b398      	cbz	r0, 800911c <_strtod_l+0x1d4>
 80090b4:	2000      	movs	r0, #0
 80090b6:	4632      	mov	r2, r6
 80090b8:	463d      	mov	r5, r7
 80090ba:	9005      	str	r0, [sp, #20]
 80090bc:	4603      	mov	r3, r0
 80090be:	2a65      	cmp	r2, #101	; 0x65
 80090c0:	d001      	beq.n	80090c6 <_strtod_l+0x17e>
 80090c2:	2a45      	cmp	r2, #69	; 0x45
 80090c4:	d118      	bne.n	80090f8 <_strtod_l+0x1b0>
 80090c6:	b91d      	cbnz	r5, 80090d0 <_strtod_l+0x188>
 80090c8:	9a04      	ldr	r2, [sp, #16]
 80090ca:	4302      	orrs	r2, r0
 80090cc:	d09e      	beq.n	800900c <_strtod_l+0xc4>
 80090ce:	2500      	movs	r5, #0
 80090d0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80090d4:	f108 0201 	add.w	r2, r8, #1
 80090d8:	9217      	str	r2, [sp, #92]	; 0x5c
 80090da:	f898 2001 	ldrb.w	r2, [r8, #1]
 80090de:	2a2b      	cmp	r2, #43	; 0x2b
 80090e0:	d075      	beq.n	80091ce <_strtod_l+0x286>
 80090e2:	2a2d      	cmp	r2, #45	; 0x2d
 80090e4:	d07b      	beq.n	80091de <_strtod_l+0x296>
 80090e6:	f04f 0c00 	mov.w	ip, #0
 80090ea:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80090ee:	2909      	cmp	r1, #9
 80090f0:	f240 8082 	bls.w	80091f8 <_strtod_l+0x2b0>
 80090f4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80090f8:	2600      	movs	r6, #0
 80090fa:	e09d      	b.n	8009238 <_strtod_l+0x2f0>
 80090fc:	2300      	movs	r3, #0
 80090fe:	e7c4      	b.n	800908a <_strtod_l+0x142>
 8009100:	2f08      	cmp	r7, #8
 8009102:	bfd8      	it	le
 8009104:	9907      	ldrle	r1, [sp, #28]
 8009106:	f100 0001 	add.w	r0, r0, #1
 800910a:	bfda      	itte	le
 800910c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009110:	9307      	strle	r3, [sp, #28]
 8009112:	fb02 3909 	mlagt	r9, r2, r9, r3
 8009116:	3701      	adds	r7, #1
 8009118:	9017      	str	r0, [sp, #92]	; 0x5c
 800911a:	e7bf      	b.n	800909c <_strtod_l+0x154>
 800911c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800911e:	195a      	adds	r2, r3, r5
 8009120:	9217      	str	r2, [sp, #92]	; 0x5c
 8009122:	5d5a      	ldrb	r2, [r3, r5]
 8009124:	2f00      	cmp	r7, #0
 8009126:	d037      	beq.n	8009198 <_strtod_l+0x250>
 8009128:	9005      	str	r0, [sp, #20]
 800912a:	463d      	mov	r5, r7
 800912c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009130:	2b09      	cmp	r3, #9
 8009132:	d912      	bls.n	800915a <_strtod_l+0x212>
 8009134:	2301      	movs	r3, #1
 8009136:	e7c2      	b.n	80090be <_strtod_l+0x176>
 8009138:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800913a:	1c5a      	adds	r2, r3, #1
 800913c:	9217      	str	r2, [sp, #92]	; 0x5c
 800913e:	785a      	ldrb	r2, [r3, #1]
 8009140:	3001      	adds	r0, #1
 8009142:	2a30      	cmp	r2, #48	; 0x30
 8009144:	d0f8      	beq.n	8009138 <_strtod_l+0x1f0>
 8009146:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800914a:	2b08      	cmp	r3, #8
 800914c:	f200 84d9 	bhi.w	8009b02 <_strtod_l+0xbba>
 8009150:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009152:	9005      	str	r0, [sp, #20]
 8009154:	2000      	movs	r0, #0
 8009156:	9308      	str	r3, [sp, #32]
 8009158:	4605      	mov	r5, r0
 800915a:	3a30      	subs	r2, #48	; 0x30
 800915c:	f100 0301 	add.w	r3, r0, #1
 8009160:	d014      	beq.n	800918c <_strtod_l+0x244>
 8009162:	9905      	ldr	r1, [sp, #20]
 8009164:	4419      	add	r1, r3
 8009166:	9105      	str	r1, [sp, #20]
 8009168:	462b      	mov	r3, r5
 800916a:	eb00 0e05 	add.w	lr, r0, r5
 800916e:	210a      	movs	r1, #10
 8009170:	4573      	cmp	r3, lr
 8009172:	d113      	bne.n	800919c <_strtod_l+0x254>
 8009174:	182b      	adds	r3, r5, r0
 8009176:	2b08      	cmp	r3, #8
 8009178:	f105 0501 	add.w	r5, r5, #1
 800917c:	4405      	add	r5, r0
 800917e:	dc1c      	bgt.n	80091ba <_strtod_l+0x272>
 8009180:	9907      	ldr	r1, [sp, #28]
 8009182:	230a      	movs	r3, #10
 8009184:	fb03 2301 	mla	r3, r3, r1, r2
 8009188:	9307      	str	r3, [sp, #28]
 800918a:	2300      	movs	r3, #0
 800918c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800918e:	1c51      	adds	r1, r2, #1
 8009190:	9117      	str	r1, [sp, #92]	; 0x5c
 8009192:	7852      	ldrb	r2, [r2, #1]
 8009194:	4618      	mov	r0, r3
 8009196:	e7c9      	b.n	800912c <_strtod_l+0x1e4>
 8009198:	4638      	mov	r0, r7
 800919a:	e7d2      	b.n	8009142 <_strtod_l+0x1fa>
 800919c:	2b08      	cmp	r3, #8
 800919e:	dc04      	bgt.n	80091aa <_strtod_l+0x262>
 80091a0:	9e07      	ldr	r6, [sp, #28]
 80091a2:	434e      	muls	r6, r1
 80091a4:	9607      	str	r6, [sp, #28]
 80091a6:	3301      	adds	r3, #1
 80091a8:	e7e2      	b.n	8009170 <_strtod_l+0x228>
 80091aa:	f103 0c01 	add.w	ip, r3, #1
 80091ae:	f1bc 0f10 	cmp.w	ip, #16
 80091b2:	bfd8      	it	le
 80091b4:	fb01 f909 	mulle.w	r9, r1, r9
 80091b8:	e7f5      	b.n	80091a6 <_strtod_l+0x25e>
 80091ba:	2d10      	cmp	r5, #16
 80091bc:	bfdc      	itt	le
 80091be:	230a      	movle	r3, #10
 80091c0:	fb03 2909 	mlale	r9, r3, r9, r2
 80091c4:	e7e1      	b.n	800918a <_strtod_l+0x242>
 80091c6:	2300      	movs	r3, #0
 80091c8:	9305      	str	r3, [sp, #20]
 80091ca:	2301      	movs	r3, #1
 80091cc:	e77c      	b.n	80090c8 <_strtod_l+0x180>
 80091ce:	f04f 0c00 	mov.w	ip, #0
 80091d2:	f108 0202 	add.w	r2, r8, #2
 80091d6:	9217      	str	r2, [sp, #92]	; 0x5c
 80091d8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80091dc:	e785      	b.n	80090ea <_strtod_l+0x1a2>
 80091de:	f04f 0c01 	mov.w	ip, #1
 80091e2:	e7f6      	b.n	80091d2 <_strtod_l+0x28a>
 80091e4:	0800cecc 	.word	0x0800cecc
 80091e8:	0800cc20 	.word	0x0800cc20
 80091ec:	7ff00000 	.word	0x7ff00000
 80091f0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80091f2:	1c51      	adds	r1, r2, #1
 80091f4:	9117      	str	r1, [sp, #92]	; 0x5c
 80091f6:	7852      	ldrb	r2, [r2, #1]
 80091f8:	2a30      	cmp	r2, #48	; 0x30
 80091fa:	d0f9      	beq.n	80091f0 <_strtod_l+0x2a8>
 80091fc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009200:	2908      	cmp	r1, #8
 8009202:	f63f af79 	bhi.w	80090f8 <_strtod_l+0x1b0>
 8009206:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800920a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800920c:	9206      	str	r2, [sp, #24]
 800920e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009210:	1c51      	adds	r1, r2, #1
 8009212:	9117      	str	r1, [sp, #92]	; 0x5c
 8009214:	7852      	ldrb	r2, [r2, #1]
 8009216:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800921a:	2e09      	cmp	r6, #9
 800921c:	d937      	bls.n	800928e <_strtod_l+0x346>
 800921e:	9e06      	ldr	r6, [sp, #24]
 8009220:	1b89      	subs	r1, r1, r6
 8009222:	2908      	cmp	r1, #8
 8009224:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009228:	dc02      	bgt.n	8009230 <_strtod_l+0x2e8>
 800922a:	4576      	cmp	r6, lr
 800922c:	bfa8      	it	ge
 800922e:	4676      	movge	r6, lr
 8009230:	f1bc 0f00 	cmp.w	ip, #0
 8009234:	d000      	beq.n	8009238 <_strtod_l+0x2f0>
 8009236:	4276      	negs	r6, r6
 8009238:	2d00      	cmp	r5, #0
 800923a:	d14d      	bne.n	80092d8 <_strtod_l+0x390>
 800923c:	9904      	ldr	r1, [sp, #16]
 800923e:	4301      	orrs	r1, r0
 8009240:	f47f aec6 	bne.w	8008fd0 <_strtod_l+0x88>
 8009244:	2b00      	cmp	r3, #0
 8009246:	f47f aee1 	bne.w	800900c <_strtod_l+0xc4>
 800924a:	2a69      	cmp	r2, #105	; 0x69
 800924c:	d027      	beq.n	800929e <_strtod_l+0x356>
 800924e:	dc24      	bgt.n	800929a <_strtod_l+0x352>
 8009250:	2a49      	cmp	r2, #73	; 0x49
 8009252:	d024      	beq.n	800929e <_strtod_l+0x356>
 8009254:	2a4e      	cmp	r2, #78	; 0x4e
 8009256:	f47f aed9 	bne.w	800900c <_strtod_l+0xc4>
 800925a:	499f      	ldr	r1, [pc, #636]	; (80094d8 <_strtod_l+0x590>)
 800925c:	a817      	add	r0, sp, #92	; 0x5c
 800925e:	f002 f8b3 	bl	800b3c8 <__match>
 8009262:	2800      	cmp	r0, #0
 8009264:	f43f aed2 	beq.w	800900c <_strtod_l+0xc4>
 8009268:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800926a:	781b      	ldrb	r3, [r3, #0]
 800926c:	2b28      	cmp	r3, #40	; 0x28
 800926e:	d12d      	bne.n	80092cc <_strtod_l+0x384>
 8009270:	499a      	ldr	r1, [pc, #616]	; (80094dc <_strtod_l+0x594>)
 8009272:	aa1a      	add	r2, sp, #104	; 0x68
 8009274:	a817      	add	r0, sp, #92	; 0x5c
 8009276:	f002 f8bb 	bl	800b3f0 <__hexnan>
 800927a:	2805      	cmp	r0, #5
 800927c:	d126      	bne.n	80092cc <_strtod_l+0x384>
 800927e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009280:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8009284:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009288:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800928c:	e6a0      	b.n	8008fd0 <_strtod_l+0x88>
 800928e:	210a      	movs	r1, #10
 8009290:	fb01 2e0e 	mla	lr, r1, lr, r2
 8009294:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009298:	e7b9      	b.n	800920e <_strtod_l+0x2c6>
 800929a:	2a6e      	cmp	r2, #110	; 0x6e
 800929c:	e7db      	b.n	8009256 <_strtod_l+0x30e>
 800929e:	4990      	ldr	r1, [pc, #576]	; (80094e0 <_strtod_l+0x598>)
 80092a0:	a817      	add	r0, sp, #92	; 0x5c
 80092a2:	f002 f891 	bl	800b3c8 <__match>
 80092a6:	2800      	cmp	r0, #0
 80092a8:	f43f aeb0 	beq.w	800900c <_strtod_l+0xc4>
 80092ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80092ae:	498d      	ldr	r1, [pc, #564]	; (80094e4 <_strtod_l+0x59c>)
 80092b0:	3b01      	subs	r3, #1
 80092b2:	a817      	add	r0, sp, #92	; 0x5c
 80092b4:	9317      	str	r3, [sp, #92]	; 0x5c
 80092b6:	f002 f887 	bl	800b3c8 <__match>
 80092ba:	b910      	cbnz	r0, 80092c2 <_strtod_l+0x37a>
 80092bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80092be:	3301      	adds	r3, #1
 80092c0:	9317      	str	r3, [sp, #92]	; 0x5c
 80092c2:	f8df b230 	ldr.w	fp, [pc, #560]	; 80094f4 <_strtod_l+0x5ac>
 80092c6:	f04f 0a00 	mov.w	sl, #0
 80092ca:	e681      	b.n	8008fd0 <_strtod_l+0x88>
 80092cc:	4886      	ldr	r0, [pc, #536]	; (80094e8 <_strtod_l+0x5a0>)
 80092ce:	f003 fa1f 	bl	800c710 <nan>
 80092d2:	ec5b ab10 	vmov	sl, fp, d0
 80092d6:	e67b      	b.n	8008fd0 <_strtod_l+0x88>
 80092d8:	9b05      	ldr	r3, [sp, #20]
 80092da:	9807      	ldr	r0, [sp, #28]
 80092dc:	1af3      	subs	r3, r6, r3
 80092de:	2f00      	cmp	r7, #0
 80092e0:	bf08      	it	eq
 80092e2:	462f      	moveq	r7, r5
 80092e4:	2d10      	cmp	r5, #16
 80092e6:	9306      	str	r3, [sp, #24]
 80092e8:	46a8      	mov	r8, r5
 80092ea:	bfa8      	it	ge
 80092ec:	f04f 0810 	movge.w	r8, #16
 80092f0:	f7f7 f908 	bl	8000504 <__aeabi_ui2d>
 80092f4:	2d09      	cmp	r5, #9
 80092f6:	4682      	mov	sl, r0
 80092f8:	468b      	mov	fp, r1
 80092fa:	dd13      	ble.n	8009324 <_strtod_l+0x3dc>
 80092fc:	4b7b      	ldr	r3, [pc, #492]	; (80094ec <_strtod_l+0x5a4>)
 80092fe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009302:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009306:	f7f7 f977 	bl	80005f8 <__aeabi_dmul>
 800930a:	4682      	mov	sl, r0
 800930c:	4648      	mov	r0, r9
 800930e:	468b      	mov	fp, r1
 8009310:	f7f7 f8f8 	bl	8000504 <__aeabi_ui2d>
 8009314:	4602      	mov	r2, r0
 8009316:	460b      	mov	r3, r1
 8009318:	4650      	mov	r0, sl
 800931a:	4659      	mov	r1, fp
 800931c:	f7f6 ffb6 	bl	800028c <__adddf3>
 8009320:	4682      	mov	sl, r0
 8009322:	468b      	mov	fp, r1
 8009324:	2d0f      	cmp	r5, #15
 8009326:	dc38      	bgt.n	800939a <_strtod_l+0x452>
 8009328:	9b06      	ldr	r3, [sp, #24]
 800932a:	2b00      	cmp	r3, #0
 800932c:	f43f ae50 	beq.w	8008fd0 <_strtod_l+0x88>
 8009330:	dd24      	ble.n	800937c <_strtod_l+0x434>
 8009332:	2b16      	cmp	r3, #22
 8009334:	dc0b      	bgt.n	800934e <_strtod_l+0x406>
 8009336:	496d      	ldr	r1, [pc, #436]	; (80094ec <_strtod_l+0x5a4>)
 8009338:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800933c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009340:	4652      	mov	r2, sl
 8009342:	465b      	mov	r3, fp
 8009344:	f7f7 f958 	bl	80005f8 <__aeabi_dmul>
 8009348:	4682      	mov	sl, r0
 800934a:	468b      	mov	fp, r1
 800934c:	e640      	b.n	8008fd0 <_strtod_l+0x88>
 800934e:	9a06      	ldr	r2, [sp, #24]
 8009350:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8009354:	4293      	cmp	r3, r2
 8009356:	db20      	blt.n	800939a <_strtod_l+0x452>
 8009358:	4c64      	ldr	r4, [pc, #400]	; (80094ec <_strtod_l+0x5a4>)
 800935a:	f1c5 050f 	rsb	r5, r5, #15
 800935e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009362:	4652      	mov	r2, sl
 8009364:	465b      	mov	r3, fp
 8009366:	e9d1 0100 	ldrd	r0, r1, [r1]
 800936a:	f7f7 f945 	bl	80005f8 <__aeabi_dmul>
 800936e:	9b06      	ldr	r3, [sp, #24]
 8009370:	1b5d      	subs	r5, r3, r5
 8009372:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009376:	e9d4 2300 	ldrd	r2, r3, [r4]
 800937a:	e7e3      	b.n	8009344 <_strtod_l+0x3fc>
 800937c:	9b06      	ldr	r3, [sp, #24]
 800937e:	3316      	adds	r3, #22
 8009380:	db0b      	blt.n	800939a <_strtod_l+0x452>
 8009382:	9b05      	ldr	r3, [sp, #20]
 8009384:	1b9e      	subs	r6, r3, r6
 8009386:	4b59      	ldr	r3, [pc, #356]	; (80094ec <_strtod_l+0x5a4>)
 8009388:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800938c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009390:	4650      	mov	r0, sl
 8009392:	4659      	mov	r1, fp
 8009394:	f7f7 fa5a 	bl	800084c <__aeabi_ddiv>
 8009398:	e7d6      	b.n	8009348 <_strtod_l+0x400>
 800939a:	9b06      	ldr	r3, [sp, #24]
 800939c:	eba5 0808 	sub.w	r8, r5, r8
 80093a0:	4498      	add	r8, r3
 80093a2:	f1b8 0f00 	cmp.w	r8, #0
 80093a6:	dd74      	ble.n	8009492 <_strtod_l+0x54a>
 80093a8:	f018 030f 	ands.w	r3, r8, #15
 80093ac:	d00a      	beq.n	80093c4 <_strtod_l+0x47c>
 80093ae:	494f      	ldr	r1, [pc, #316]	; (80094ec <_strtod_l+0x5a4>)
 80093b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80093b4:	4652      	mov	r2, sl
 80093b6:	465b      	mov	r3, fp
 80093b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093bc:	f7f7 f91c 	bl	80005f8 <__aeabi_dmul>
 80093c0:	4682      	mov	sl, r0
 80093c2:	468b      	mov	fp, r1
 80093c4:	f038 080f 	bics.w	r8, r8, #15
 80093c8:	d04f      	beq.n	800946a <_strtod_l+0x522>
 80093ca:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80093ce:	dd22      	ble.n	8009416 <_strtod_l+0x4ce>
 80093d0:	2500      	movs	r5, #0
 80093d2:	462e      	mov	r6, r5
 80093d4:	9507      	str	r5, [sp, #28]
 80093d6:	9505      	str	r5, [sp, #20]
 80093d8:	2322      	movs	r3, #34	; 0x22
 80093da:	f8df b118 	ldr.w	fp, [pc, #280]	; 80094f4 <_strtod_l+0x5ac>
 80093de:	6023      	str	r3, [r4, #0]
 80093e0:	f04f 0a00 	mov.w	sl, #0
 80093e4:	9b07      	ldr	r3, [sp, #28]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	f43f adf2 	beq.w	8008fd0 <_strtod_l+0x88>
 80093ec:	9918      	ldr	r1, [sp, #96]	; 0x60
 80093ee:	4620      	mov	r0, r4
 80093f0:	f002 f960 	bl	800b6b4 <_Bfree>
 80093f4:	9905      	ldr	r1, [sp, #20]
 80093f6:	4620      	mov	r0, r4
 80093f8:	f002 f95c 	bl	800b6b4 <_Bfree>
 80093fc:	4631      	mov	r1, r6
 80093fe:	4620      	mov	r0, r4
 8009400:	f002 f958 	bl	800b6b4 <_Bfree>
 8009404:	9907      	ldr	r1, [sp, #28]
 8009406:	4620      	mov	r0, r4
 8009408:	f002 f954 	bl	800b6b4 <_Bfree>
 800940c:	4629      	mov	r1, r5
 800940e:	4620      	mov	r0, r4
 8009410:	f002 f950 	bl	800b6b4 <_Bfree>
 8009414:	e5dc      	b.n	8008fd0 <_strtod_l+0x88>
 8009416:	4b36      	ldr	r3, [pc, #216]	; (80094f0 <_strtod_l+0x5a8>)
 8009418:	9304      	str	r3, [sp, #16]
 800941a:	2300      	movs	r3, #0
 800941c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009420:	4650      	mov	r0, sl
 8009422:	4659      	mov	r1, fp
 8009424:	4699      	mov	r9, r3
 8009426:	f1b8 0f01 	cmp.w	r8, #1
 800942a:	dc21      	bgt.n	8009470 <_strtod_l+0x528>
 800942c:	b10b      	cbz	r3, 8009432 <_strtod_l+0x4ea>
 800942e:	4682      	mov	sl, r0
 8009430:	468b      	mov	fp, r1
 8009432:	4b2f      	ldr	r3, [pc, #188]	; (80094f0 <_strtod_l+0x5a8>)
 8009434:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009438:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800943c:	4652      	mov	r2, sl
 800943e:	465b      	mov	r3, fp
 8009440:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009444:	f7f7 f8d8 	bl	80005f8 <__aeabi_dmul>
 8009448:	4b2a      	ldr	r3, [pc, #168]	; (80094f4 <_strtod_l+0x5ac>)
 800944a:	460a      	mov	r2, r1
 800944c:	400b      	ands	r3, r1
 800944e:	492a      	ldr	r1, [pc, #168]	; (80094f8 <_strtod_l+0x5b0>)
 8009450:	428b      	cmp	r3, r1
 8009452:	4682      	mov	sl, r0
 8009454:	d8bc      	bhi.n	80093d0 <_strtod_l+0x488>
 8009456:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800945a:	428b      	cmp	r3, r1
 800945c:	bf86      	itte	hi
 800945e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80094fc <_strtod_l+0x5b4>
 8009462:	f04f 3aff 	movhi.w	sl, #4294967295
 8009466:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800946a:	2300      	movs	r3, #0
 800946c:	9304      	str	r3, [sp, #16]
 800946e:	e084      	b.n	800957a <_strtod_l+0x632>
 8009470:	f018 0f01 	tst.w	r8, #1
 8009474:	d005      	beq.n	8009482 <_strtod_l+0x53a>
 8009476:	9b04      	ldr	r3, [sp, #16]
 8009478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800947c:	f7f7 f8bc 	bl	80005f8 <__aeabi_dmul>
 8009480:	2301      	movs	r3, #1
 8009482:	9a04      	ldr	r2, [sp, #16]
 8009484:	3208      	adds	r2, #8
 8009486:	f109 0901 	add.w	r9, r9, #1
 800948a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800948e:	9204      	str	r2, [sp, #16]
 8009490:	e7c9      	b.n	8009426 <_strtod_l+0x4de>
 8009492:	d0ea      	beq.n	800946a <_strtod_l+0x522>
 8009494:	f1c8 0800 	rsb	r8, r8, #0
 8009498:	f018 020f 	ands.w	r2, r8, #15
 800949c:	d00a      	beq.n	80094b4 <_strtod_l+0x56c>
 800949e:	4b13      	ldr	r3, [pc, #76]	; (80094ec <_strtod_l+0x5a4>)
 80094a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80094a4:	4650      	mov	r0, sl
 80094a6:	4659      	mov	r1, fp
 80094a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ac:	f7f7 f9ce 	bl	800084c <__aeabi_ddiv>
 80094b0:	4682      	mov	sl, r0
 80094b2:	468b      	mov	fp, r1
 80094b4:	ea5f 1828 	movs.w	r8, r8, asr #4
 80094b8:	d0d7      	beq.n	800946a <_strtod_l+0x522>
 80094ba:	f1b8 0f1f 	cmp.w	r8, #31
 80094be:	dd1f      	ble.n	8009500 <_strtod_l+0x5b8>
 80094c0:	2500      	movs	r5, #0
 80094c2:	462e      	mov	r6, r5
 80094c4:	9507      	str	r5, [sp, #28]
 80094c6:	9505      	str	r5, [sp, #20]
 80094c8:	2322      	movs	r3, #34	; 0x22
 80094ca:	f04f 0a00 	mov.w	sl, #0
 80094ce:	f04f 0b00 	mov.w	fp, #0
 80094d2:	6023      	str	r3, [r4, #0]
 80094d4:	e786      	b.n	80093e4 <_strtod_l+0x49c>
 80094d6:	bf00      	nop
 80094d8:	0800cbf1 	.word	0x0800cbf1
 80094dc:	0800cc34 	.word	0x0800cc34
 80094e0:	0800cbe9 	.word	0x0800cbe9
 80094e4:	0800cd74 	.word	0x0800cd74
 80094e8:	0800d088 	.word	0x0800d088
 80094ec:	0800cf68 	.word	0x0800cf68
 80094f0:	0800cf40 	.word	0x0800cf40
 80094f4:	7ff00000 	.word	0x7ff00000
 80094f8:	7ca00000 	.word	0x7ca00000
 80094fc:	7fefffff 	.word	0x7fefffff
 8009500:	f018 0310 	ands.w	r3, r8, #16
 8009504:	bf18      	it	ne
 8009506:	236a      	movne	r3, #106	; 0x6a
 8009508:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80098b8 <_strtod_l+0x970>
 800950c:	9304      	str	r3, [sp, #16]
 800950e:	4650      	mov	r0, sl
 8009510:	4659      	mov	r1, fp
 8009512:	2300      	movs	r3, #0
 8009514:	f018 0f01 	tst.w	r8, #1
 8009518:	d004      	beq.n	8009524 <_strtod_l+0x5dc>
 800951a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800951e:	f7f7 f86b 	bl	80005f8 <__aeabi_dmul>
 8009522:	2301      	movs	r3, #1
 8009524:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009528:	f109 0908 	add.w	r9, r9, #8
 800952c:	d1f2      	bne.n	8009514 <_strtod_l+0x5cc>
 800952e:	b10b      	cbz	r3, 8009534 <_strtod_l+0x5ec>
 8009530:	4682      	mov	sl, r0
 8009532:	468b      	mov	fp, r1
 8009534:	9b04      	ldr	r3, [sp, #16]
 8009536:	b1c3      	cbz	r3, 800956a <_strtod_l+0x622>
 8009538:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800953c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009540:	2b00      	cmp	r3, #0
 8009542:	4659      	mov	r1, fp
 8009544:	dd11      	ble.n	800956a <_strtod_l+0x622>
 8009546:	2b1f      	cmp	r3, #31
 8009548:	f340 8124 	ble.w	8009794 <_strtod_l+0x84c>
 800954c:	2b34      	cmp	r3, #52	; 0x34
 800954e:	bfde      	ittt	le
 8009550:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009554:	f04f 33ff 	movle.w	r3, #4294967295
 8009558:	fa03 f202 	lslle.w	r2, r3, r2
 800955c:	f04f 0a00 	mov.w	sl, #0
 8009560:	bfcc      	ite	gt
 8009562:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009566:	ea02 0b01 	andle.w	fp, r2, r1
 800956a:	2200      	movs	r2, #0
 800956c:	2300      	movs	r3, #0
 800956e:	4650      	mov	r0, sl
 8009570:	4659      	mov	r1, fp
 8009572:	f7f7 faa9 	bl	8000ac8 <__aeabi_dcmpeq>
 8009576:	2800      	cmp	r0, #0
 8009578:	d1a2      	bne.n	80094c0 <_strtod_l+0x578>
 800957a:	9b07      	ldr	r3, [sp, #28]
 800957c:	9300      	str	r3, [sp, #0]
 800957e:	9908      	ldr	r1, [sp, #32]
 8009580:	462b      	mov	r3, r5
 8009582:	463a      	mov	r2, r7
 8009584:	4620      	mov	r0, r4
 8009586:	f002 f8fd 	bl	800b784 <__s2b>
 800958a:	9007      	str	r0, [sp, #28]
 800958c:	2800      	cmp	r0, #0
 800958e:	f43f af1f 	beq.w	80093d0 <_strtod_l+0x488>
 8009592:	9b05      	ldr	r3, [sp, #20]
 8009594:	1b9e      	subs	r6, r3, r6
 8009596:	9b06      	ldr	r3, [sp, #24]
 8009598:	2b00      	cmp	r3, #0
 800959a:	bfb4      	ite	lt
 800959c:	4633      	movlt	r3, r6
 800959e:	2300      	movge	r3, #0
 80095a0:	930c      	str	r3, [sp, #48]	; 0x30
 80095a2:	9b06      	ldr	r3, [sp, #24]
 80095a4:	2500      	movs	r5, #0
 80095a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80095aa:	9312      	str	r3, [sp, #72]	; 0x48
 80095ac:	462e      	mov	r6, r5
 80095ae:	9b07      	ldr	r3, [sp, #28]
 80095b0:	4620      	mov	r0, r4
 80095b2:	6859      	ldr	r1, [r3, #4]
 80095b4:	f002 f83e 	bl	800b634 <_Balloc>
 80095b8:	9005      	str	r0, [sp, #20]
 80095ba:	2800      	cmp	r0, #0
 80095bc:	f43f af0c 	beq.w	80093d8 <_strtod_l+0x490>
 80095c0:	9b07      	ldr	r3, [sp, #28]
 80095c2:	691a      	ldr	r2, [r3, #16]
 80095c4:	3202      	adds	r2, #2
 80095c6:	f103 010c 	add.w	r1, r3, #12
 80095ca:	0092      	lsls	r2, r2, #2
 80095cc:	300c      	adds	r0, #12
 80095ce:	f7fe fd5b 	bl	8008088 <memcpy>
 80095d2:	ec4b ab10 	vmov	d0, sl, fp
 80095d6:	aa1a      	add	r2, sp, #104	; 0x68
 80095d8:	a919      	add	r1, sp, #100	; 0x64
 80095da:	4620      	mov	r0, r4
 80095dc:	f002 fc18 	bl	800be10 <__d2b>
 80095e0:	ec4b ab18 	vmov	d8, sl, fp
 80095e4:	9018      	str	r0, [sp, #96]	; 0x60
 80095e6:	2800      	cmp	r0, #0
 80095e8:	f43f aef6 	beq.w	80093d8 <_strtod_l+0x490>
 80095ec:	2101      	movs	r1, #1
 80095ee:	4620      	mov	r0, r4
 80095f0:	f002 f962 	bl	800b8b8 <__i2b>
 80095f4:	4606      	mov	r6, r0
 80095f6:	2800      	cmp	r0, #0
 80095f8:	f43f aeee 	beq.w	80093d8 <_strtod_l+0x490>
 80095fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80095fe:	9904      	ldr	r1, [sp, #16]
 8009600:	2b00      	cmp	r3, #0
 8009602:	bfab      	itete	ge
 8009604:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8009606:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009608:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800960a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800960e:	bfac      	ite	ge
 8009610:	eb03 0902 	addge.w	r9, r3, r2
 8009614:	1ad7      	sublt	r7, r2, r3
 8009616:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009618:	eba3 0801 	sub.w	r8, r3, r1
 800961c:	4490      	add	r8, r2
 800961e:	4ba1      	ldr	r3, [pc, #644]	; (80098a4 <_strtod_l+0x95c>)
 8009620:	f108 38ff 	add.w	r8, r8, #4294967295
 8009624:	4598      	cmp	r8, r3
 8009626:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800962a:	f280 80c7 	bge.w	80097bc <_strtod_l+0x874>
 800962e:	eba3 0308 	sub.w	r3, r3, r8
 8009632:	2b1f      	cmp	r3, #31
 8009634:	eba2 0203 	sub.w	r2, r2, r3
 8009638:	f04f 0101 	mov.w	r1, #1
 800963c:	f300 80b1 	bgt.w	80097a2 <_strtod_l+0x85a>
 8009640:	fa01 f303 	lsl.w	r3, r1, r3
 8009644:	930d      	str	r3, [sp, #52]	; 0x34
 8009646:	2300      	movs	r3, #0
 8009648:	9308      	str	r3, [sp, #32]
 800964a:	eb09 0802 	add.w	r8, r9, r2
 800964e:	9b04      	ldr	r3, [sp, #16]
 8009650:	45c1      	cmp	r9, r8
 8009652:	4417      	add	r7, r2
 8009654:	441f      	add	r7, r3
 8009656:	464b      	mov	r3, r9
 8009658:	bfa8      	it	ge
 800965a:	4643      	movge	r3, r8
 800965c:	42bb      	cmp	r3, r7
 800965e:	bfa8      	it	ge
 8009660:	463b      	movge	r3, r7
 8009662:	2b00      	cmp	r3, #0
 8009664:	bfc2      	ittt	gt
 8009666:	eba8 0803 	subgt.w	r8, r8, r3
 800966a:	1aff      	subgt	r7, r7, r3
 800966c:	eba9 0903 	subgt.w	r9, r9, r3
 8009670:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009672:	2b00      	cmp	r3, #0
 8009674:	dd17      	ble.n	80096a6 <_strtod_l+0x75e>
 8009676:	4631      	mov	r1, r6
 8009678:	461a      	mov	r2, r3
 800967a:	4620      	mov	r0, r4
 800967c:	f002 f9dc 	bl	800ba38 <__pow5mult>
 8009680:	4606      	mov	r6, r0
 8009682:	2800      	cmp	r0, #0
 8009684:	f43f aea8 	beq.w	80093d8 <_strtod_l+0x490>
 8009688:	4601      	mov	r1, r0
 800968a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800968c:	4620      	mov	r0, r4
 800968e:	f002 f929 	bl	800b8e4 <__multiply>
 8009692:	900b      	str	r0, [sp, #44]	; 0x2c
 8009694:	2800      	cmp	r0, #0
 8009696:	f43f ae9f 	beq.w	80093d8 <_strtod_l+0x490>
 800969a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800969c:	4620      	mov	r0, r4
 800969e:	f002 f809 	bl	800b6b4 <_Bfree>
 80096a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096a4:	9318      	str	r3, [sp, #96]	; 0x60
 80096a6:	f1b8 0f00 	cmp.w	r8, #0
 80096aa:	f300 808c 	bgt.w	80097c6 <_strtod_l+0x87e>
 80096ae:	9b06      	ldr	r3, [sp, #24]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	dd08      	ble.n	80096c6 <_strtod_l+0x77e>
 80096b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80096b6:	9905      	ldr	r1, [sp, #20]
 80096b8:	4620      	mov	r0, r4
 80096ba:	f002 f9bd 	bl	800ba38 <__pow5mult>
 80096be:	9005      	str	r0, [sp, #20]
 80096c0:	2800      	cmp	r0, #0
 80096c2:	f43f ae89 	beq.w	80093d8 <_strtod_l+0x490>
 80096c6:	2f00      	cmp	r7, #0
 80096c8:	dd08      	ble.n	80096dc <_strtod_l+0x794>
 80096ca:	9905      	ldr	r1, [sp, #20]
 80096cc:	463a      	mov	r2, r7
 80096ce:	4620      	mov	r0, r4
 80096d0:	f002 fa0c 	bl	800baec <__lshift>
 80096d4:	9005      	str	r0, [sp, #20]
 80096d6:	2800      	cmp	r0, #0
 80096d8:	f43f ae7e 	beq.w	80093d8 <_strtod_l+0x490>
 80096dc:	f1b9 0f00 	cmp.w	r9, #0
 80096e0:	dd08      	ble.n	80096f4 <_strtod_l+0x7ac>
 80096e2:	4631      	mov	r1, r6
 80096e4:	464a      	mov	r2, r9
 80096e6:	4620      	mov	r0, r4
 80096e8:	f002 fa00 	bl	800baec <__lshift>
 80096ec:	4606      	mov	r6, r0
 80096ee:	2800      	cmp	r0, #0
 80096f0:	f43f ae72 	beq.w	80093d8 <_strtod_l+0x490>
 80096f4:	9a05      	ldr	r2, [sp, #20]
 80096f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80096f8:	4620      	mov	r0, r4
 80096fa:	f002 fa83 	bl	800bc04 <__mdiff>
 80096fe:	4605      	mov	r5, r0
 8009700:	2800      	cmp	r0, #0
 8009702:	f43f ae69 	beq.w	80093d8 <_strtod_l+0x490>
 8009706:	68c3      	ldr	r3, [r0, #12]
 8009708:	930b      	str	r3, [sp, #44]	; 0x2c
 800970a:	2300      	movs	r3, #0
 800970c:	60c3      	str	r3, [r0, #12]
 800970e:	4631      	mov	r1, r6
 8009710:	f002 fa5c 	bl	800bbcc <__mcmp>
 8009714:	2800      	cmp	r0, #0
 8009716:	da60      	bge.n	80097da <_strtod_l+0x892>
 8009718:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800971a:	ea53 030a 	orrs.w	r3, r3, sl
 800971e:	f040 8082 	bne.w	8009826 <_strtod_l+0x8de>
 8009722:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009726:	2b00      	cmp	r3, #0
 8009728:	d17d      	bne.n	8009826 <_strtod_l+0x8de>
 800972a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800972e:	0d1b      	lsrs	r3, r3, #20
 8009730:	051b      	lsls	r3, r3, #20
 8009732:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009736:	d976      	bls.n	8009826 <_strtod_l+0x8de>
 8009738:	696b      	ldr	r3, [r5, #20]
 800973a:	b913      	cbnz	r3, 8009742 <_strtod_l+0x7fa>
 800973c:	692b      	ldr	r3, [r5, #16]
 800973e:	2b01      	cmp	r3, #1
 8009740:	dd71      	ble.n	8009826 <_strtod_l+0x8de>
 8009742:	4629      	mov	r1, r5
 8009744:	2201      	movs	r2, #1
 8009746:	4620      	mov	r0, r4
 8009748:	f002 f9d0 	bl	800baec <__lshift>
 800974c:	4631      	mov	r1, r6
 800974e:	4605      	mov	r5, r0
 8009750:	f002 fa3c 	bl	800bbcc <__mcmp>
 8009754:	2800      	cmp	r0, #0
 8009756:	dd66      	ble.n	8009826 <_strtod_l+0x8de>
 8009758:	9904      	ldr	r1, [sp, #16]
 800975a:	4a53      	ldr	r2, [pc, #332]	; (80098a8 <_strtod_l+0x960>)
 800975c:	465b      	mov	r3, fp
 800975e:	2900      	cmp	r1, #0
 8009760:	f000 8081 	beq.w	8009866 <_strtod_l+0x91e>
 8009764:	ea02 010b 	and.w	r1, r2, fp
 8009768:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800976c:	dc7b      	bgt.n	8009866 <_strtod_l+0x91e>
 800976e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009772:	f77f aea9 	ble.w	80094c8 <_strtod_l+0x580>
 8009776:	4b4d      	ldr	r3, [pc, #308]	; (80098ac <_strtod_l+0x964>)
 8009778:	4650      	mov	r0, sl
 800977a:	4659      	mov	r1, fp
 800977c:	2200      	movs	r2, #0
 800977e:	f7f6 ff3b 	bl	80005f8 <__aeabi_dmul>
 8009782:	460b      	mov	r3, r1
 8009784:	4303      	orrs	r3, r0
 8009786:	bf08      	it	eq
 8009788:	2322      	moveq	r3, #34	; 0x22
 800978a:	4682      	mov	sl, r0
 800978c:	468b      	mov	fp, r1
 800978e:	bf08      	it	eq
 8009790:	6023      	streq	r3, [r4, #0]
 8009792:	e62b      	b.n	80093ec <_strtod_l+0x4a4>
 8009794:	f04f 32ff 	mov.w	r2, #4294967295
 8009798:	fa02 f303 	lsl.w	r3, r2, r3
 800979c:	ea03 0a0a 	and.w	sl, r3, sl
 80097a0:	e6e3      	b.n	800956a <_strtod_l+0x622>
 80097a2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80097a6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80097aa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80097ae:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80097b2:	fa01 f308 	lsl.w	r3, r1, r8
 80097b6:	9308      	str	r3, [sp, #32]
 80097b8:	910d      	str	r1, [sp, #52]	; 0x34
 80097ba:	e746      	b.n	800964a <_strtod_l+0x702>
 80097bc:	2300      	movs	r3, #0
 80097be:	9308      	str	r3, [sp, #32]
 80097c0:	2301      	movs	r3, #1
 80097c2:	930d      	str	r3, [sp, #52]	; 0x34
 80097c4:	e741      	b.n	800964a <_strtod_l+0x702>
 80097c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80097c8:	4642      	mov	r2, r8
 80097ca:	4620      	mov	r0, r4
 80097cc:	f002 f98e 	bl	800baec <__lshift>
 80097d0:	9018      	str	r0, [sp, #96]	; 0x60
 80097d2:	2800      	cmp	r0, #0
 80097d4:	f47f af6b 	bne.w	80096ae <_strtod_l+0x766>
 80097d8:	e5fe      	b.n	80093d8 <_strtod_l+0x490>
 80097da:	465f      	mov	r7, fp
 80097dc:	d16e      	bne.n	80098bc <_strtod_l+0x974>
 80097de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80097e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80097e4:	b342      	cbz	r2, 8009838 <_strtod_l+0x8f0>
 80097e6:	4a32      	ldr	r2, [pc, #200]	; (80098b0 <_strtod_l+0x968>)
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d128      	bne.n	800983e <_strtod_l+0x8f6>
 80097ec:	9b04      	ldr	r3, [sp, #16]
 80097ee:	4651      	mov	r1, sl
 80097f0:	b1eb      	cbz	r3, 800982e <_strtod_l+0x8e6>
 80097f2:	4b2d      	ldr	r3, [pc, #180]	; (80098a8 <_strtod_l+0x960>)
 80097f4:	403b      	ands	r3, r7
 80097f6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80097fa:	f04f 32ff 	mov.w	r2, #4294967295
 80097fe:	d819      	bhi.n	8009834 <_strtod_l+0x8ec>
 8009800:	0d1b      	lsrs	r3, r3, #20
 8009802:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009806:	fa02 f303 	lsl.w	r3, r2, r3
 800980a:	4299      	cmp	r1, r3
 800980c:	d117      	bne.n	800983e <_strtod_l+0x8f6>
 800980e:	4b29      	ldr	r3, [pc, #164]	; (80098b4 <_strtod_l+0x96c>)
 8009810:	429f      	cmp	r7, r3
 8009812:	d102      	bne.n	800981a <_strtod_l+0x8d2>
 8009814:	3101      	adds	r1, #1
 8009816:	f43f addf 	beq.w	80093d8 <_strtod_l+0x490>
 800981a:	4b23      	ldr	r3, [pc, #140]	; (80098a8 <_strtod_l+0x960>)
 800981c:	403b      	ands	r3, r7
 800981e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009822:	f04f 0a00 	mov.w	sl, #0
 8009826:	9b04      	ldr	r3, [sp, #16]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d1a4      	bne.n	8009776 <_strtod_l+0x82e>
 800982c:	e5de      	b.n	80093ec <_strtod_l+0x4a4>
 800982e:	f04f 33ff 	mov.w	r3, #4294967295
 8009832:	e7ea      	b.n	800980a <_strtod_l+0x8c2>
 8009834:	4613      	mov	r3, r2
 8009836:	e7e8      	b.n	800980a <_strtod_l+0x8c2>
 8009838:	ea53 030a 	orrs.w	r3, r3, sl
 800983c:	d08c      	beq.n	8009758 <_strtod_l+0x810>
 800983e:	9b08      	ldr	r3, [sp, #32]
 8009840:	b1db      	cbz	r3, 800987a <_strtod_l+0x932>
 8009842:	423b      	tst	r3, r7
 8009844:	d0ef      	beq.n	8009826 <_strtod_l+0x8de>
 8009846:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009848:	9a04      	ldr	r2, [sp, #16]
 800984a:	4650      	mov	r0, sl
 800984c:	4659      	mov	r1, fp
 800984e:	b1c3      	cbz	r3, 8009882 <_strtod_l+0x93a>
 8009850:	f7ff fb5e 	bl	8008f10 <sulp>
 8009854:	4602      	mov	r2, r0
 8009856:	460b      	mov	r3, r1
 8009858:	ec51 0b18 	vmov	r0, r1, d8
 800985c:	f7f6 fd16 	bl	800028c <__adddf3>
 8009860:	4682      	mov	sl, r0
 8009862:	468b      	mov	fp, r1
 8009864:	e7df      	b.n	8009826 <_strtod_l+0x8de>
 8009866:	4013      	ands	r3, r2
 8009868:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800986c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009870:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009874:	f04f 3aff 	mov.w	sl, #4294967295
 8009878:	e7d5      	b.n	8009826 <_strtod_l+0x8de>
 800987a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800987c:	ea13 0f0a 	tst.w	r3, sl
 8009880:	e7e0      	b.n	8009844 <_strtod_l+0x8fc>
 8009882:	f7ff fb45 	bl	8008f10 <sulp>
 8009886:	4602      	mov	r2, r0
 8009888:	460b      	mov	r3, r1
 800988a:	ec51 0b18 	vmov	r0, r1, d8
 800988e:	f7f6 fcfb 	bl	8000288 <__aeabi_dsub>
 8009892:	2200      	movs	r2, #0
 8009894:	2300      	movs	r3, #0
 8009896:	4682      	mov	sl, r0
 8009898:	468b      	mov	fp, r1
 800989a:	f7f7 f915 	bl	8000ac8 <__aeabi_dcmpeq>
 800989e:	2800      	cmp	r0, #0
 80098a0:	d0c1      	beq.n	8009826 <_strtod_l+0x8de>
 80098a2:	e611      	b.n	80094c8 <_strtod_l+0x580>
 80098a4:	fffffc02 	.word	0xfffffc02
 80098a8:	7ff00000 	.word	0x7ff00000
 80098ac:	39500000 	.word	0x39500000
 80098b0:	000fffff 	.word	0x000fffff
 80098b4:	7fefffff 	.word	0x7fefffff
 80098b8:	0800cc48 	.word	0x0800cc48
 80098bc:	4631      	mov	r1, r6
 80098be:	4628      	mov	r0, r5
 80098c0:	f002 fb02 	bl	800bec8 <__ratio>
 80098c4:	ec59 8b10 	vmov	r8, r9, d0
 80098c8:	ee10 0a10 	vmov	r0, s0
 80098cc:	2200      	movs	r2, #0
 80098ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80098d2:	4649      	mov	r1, r9
 80098d4:	f7f7 f90c 	bl	8000af0 <__aeabi_dcmple>
 80098d8:	2800      	cmp	r0, #0
 80098da:	d07a      	beq.n	80099d2 <_strtod_l+0xa8a>
 80098dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d04a      	beq.n	8009978 <_strtod_l+0xa30>
 80098e2:	4b95      	ldr	r3, [pc, #596]	; (8009b38 <_strtod_l+0xbf0>)
 80098e4:	2200      	movs	r2, #0
 80098e6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80098ea:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009b38 <_strtod_l+0xbf0>
 80098ee:	f04f 0800 	mov.w	r8, #0
 80098f2:	4b92      	ldr	r3, [pc, #584]	; (8009b3c <_strtod_l+0xbf4>)
 80098f4:	403b      	ands	r3, r7
 80098f6:	930d      	str	r3, [sp, #52]	; 0x34
 80098f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80098fa:	4b91      	ldr	r3, [pc, #580]	; (8009b40 <_strtod_l+0xbf8>)
 80098fc:	429a      	cmp	r2, r3
 80098fe:	f040 80b0 	bne.w	8009a62 <_strtod_l+0xb1a>
 8009902:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009906:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800990a:	ec4b ab10 	vmov	d0, sl, fp
 800990e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009912:	f002 fa01 	bl	800bd18 <__ulp>
 8009916:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800991a:	ec53 2b10 	vmov	r2, r3, d0
 800991e:	f7f6 fe6b 	bl	80005f8 <__aeabi_dmul>
 8009922:	4652      	mov	r2, sl
 8009924:	465b      	mov	r3, fp
 8009926:	f7f6 fcb1 	bl	800028c <__adddf3>
 800992a:	460b      	mov	r3, r1
 800992c:	4983      	ldr	r1, [pc, #524]	; (8009b3c <_strtod_l+0xbf4>)
 800992e:	4a85      	ldr	r2, [pc, #532]	; (8009b44 <_strtod_l+0xbfc>)
 8009930:	4019      	ands	r1, r3
 8009932:	4291      	cmp	r1, r2
 8009934:	4682      	mov	sl, r0
 8009936:	d960      	bls.n	80099fa <_strtod_l+0xab2>
 8009938:	ee18 3a90 	vmov	r3, s17
 800993c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009940:	4293      	cmp	r3, r2
 8009942:	d104      	bne.n	800994e <_strtod_l+0xa06>
 8009944:	ee18 3a10 	vmov	r3, s16
 8009948:	3301      	adds	r3, #1
 800994a:	f43f ad45 	beq.w	80093d8 <_strtod_l+0x490>
 800994e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8009b50 <_strtod_l+0xc08>
 8009952:	f04f 3aff 	mov.w	sl, #4294967295
 8009956:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009958:	4620      	mov	r0, r4
 800995a:	f001 feab 	bl	800b6b4 <_Bfree>
 800995e:	9905      	ldr	r1, [sp, #20]
 8009960:	4620      	mov	r0, r4
 8009962:	f001 fea7 	bl	800b6b4 <_Bfree>
 8009966:	4631      	mov	r1, r6
 8009968:	4620      	mov	r0, r4
 800996a:	f001 fea3 	bl	800b6b4 <_Bfree>
 800996e:	4629      	mov	r1, r5
 8009970:	4620      	mov	r0, r4
 8009972:	f001 fe9f 	bl	800b6b4 <_Bfree>
 8009976:	e61a      	b.n	80095ae <_strtod_l+0x666>
 8009978:	f1ba 0f00 	cmp.w	sl, #0
 800997c:	d11b      	bne.n	80099b6 <_strtod_l+0xa6e>
 800997e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009982:	b9f3      	cbnz	r3, 80099c2 <_strtod_l+0xa7a>
 8009984:	4b6c      	ldr	r3, [pc, #432]	; (8009b38 <_strtod_l+0xbf0>)
 8009986:	2200      	movs	r2, #0
 8009988:	4640      	mov	r0, r8
 800998a:	4649      	mov	r1, r9
 800998c:	f7f7 f8a6 	bl	8000adc <__aeabi_dcmplt>
 8009990:	b9d0      	cbnz	r0, 80099c8 <_strtod_l+0xa80>
 8009992:	4640      	mov	r0, r8
 8009994:	4649      	mov	r1, r9
 8009996:	4b6c      	ldr	r3, [pc, #432]	; (8009b48 <_strtod_l+0xc00>)
 8009998:	2200      	movs	r2, #0
 800999a:	f7f6 fe2d 	bl	80005f8 <__aeabi_dmul>
 800999e:	4680      	mov	r8, r0
 80099a0:	4689      	mov	r9, r1
 80099a2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80099a6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80099aa:	9315      	str	r3, [sp, #84]	; 0x54
 80099ac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80099b0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80099b4:	e79d      	b.n	80098f2 <_strtod_l+0x9aa>
 80099b6:	f1ba 0f01 	cmp.w	sl, #1
 80099ba:	d102      	bne.n	80099c2 <_strtod_l+0xa7a>
 80099bc:	2f00      	cmp	r7, #0
 80099be:	f43f ad83 	beq.w	80094c8 <_strtod_l+0x580>
 80099c2:	4b62      	ldr	r3, [pc, #392]	; (8009b4c <_strtod_l+0xc04>)
 80099c4:	2200      	movs	r2, #0
 80099c6:	e78e      	b.n	80098e6 <_strtod_l+0x99e>
 80099c8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009b48 <_strtod_l+0xc00>
 80099cc:	f04f 0800 	mov.w	r8, #0
 80099d0:	e7e7      	b.n	80099a2 <_strtod_l+0xa5a>
 80099d2:	4b5d      	ldr	r3, [pc, #372]	; (8009b48 <_strtod_l+0xc00>)
 80099d4:	4640      	mov	r0, r8
 80099d6:	4649      	mov	r1, r9
 80099d8:	2200      	movs	r2, #0
 80099da:	f7f6 fe0d 	bl	80005f8 <__aeabi_dmul>
 80099de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099e0:	4680      	mov	r8, r0
 80099e2:	4689      	mov	r9, r1
 80099e4:	b933      	cbnz	r3, 80099f4 <_strtod_l+0xaac>
 80099e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80099ea:	900e      	str	r0, [sp, #56]	; 0x38
 80099ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80099ee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80099f2:	e7dd      	b.n	80099b0 <_strtod_l+0xa68>
 80099f4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80099f8:	e7f9      	b.n	80099ee <_strtod_l+0xaa6>
 80099fa:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80099fe:	9b04      	ldr	r3, [sp, #16]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d1a8      	bne.n	8009956 <_strtod_l+0xa0e>
 8009a04:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009a08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009a0a:	0d1b      	lsrs	r3, r3, #20
 8009a0c:	051b      	lsls	r3, r3, #20
 8009a0e:	429a      	cmp	r2, r3
 8009a10:	d1a1      	bne.n	8009956 <_strtod_l+0xa0e>
 8009a12:	4640      	mov	r0, r8
 8009a14:	4649      	mov	r1, r9
 8009a16:	f7f7 f94f 	bl	8000cb8 <__aeabi_d2lz>
 8009a1a:	f7f6 fdbf 	bl	800059c <__aeabi_l2d>
 8009a1e:	4602      	mov	r2, r0
 8009a20:	460b      	mov	r3, r1
 8009a22:	4640      	mov	r0, r8
 8009a24:	4649      	mov	r1, r9
 8009a26:	f7f6 fc2f 	bl	8000288 <__aeabi_dsub>
 8009a2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009a2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009a30:	ea43 030a 	orr.w	r3, r3, sl
 8009a34:	4313      	orrs	r3, r2
 8009a36:	4680      	mov	r8, r0
 8009a38:	4689      	mov	r9, r1
 8009a3a:	d055      	beq.n	8009ae8 <_strtod_l+0xba0>
 8009a3c:	a336      	add	r3, pc, #216	; (adr r3, 8009b18 <_strtod_l+0xbd0>)
 8009a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a42:	f7f7 f84b 	bl	8000adc <__aeabi_dcmplt>
 8009a46:	2800      	cmp	r0, #0
 8009a48:	f47f acd0 	bne.w	80093ec <_strtod_l+0x4a4>
 8009a4c:	a334      	add	r3, pc, #208	; (adr r3, 8009b20 <_strtod_l+0xbd8>)
 8009a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a52:	4640      	mov	r0, r8
 8009a54:	4649      	mov	r1, r9
 8009a56:	f7f7 f85f 	bl	8000b18 <__aeabi_dcmpgt>
 8009a5a:	2800      	cmp	r0, #0
 8009a5c:	f43f af7b 	beq.w	8009956 <_strtod_l+0xa0e>
 8009a60:	e4c4      	b.n	80093ec <_strtod_l+0x4a4>
 8009a62:	9b04      	ldr	r3, [sp, #16]
 8009a64:	b333      	cbz	r3, 8009ab4 <_strtod_l+0xb6c>
 8009a66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a68:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009a6c:	d822      	bhi.n	8009ab4 <_strtod_l+0xb6c>
 8009a6e:	a32e      	add	r3, pc, #184	; (adr r3, 8009b28 <_strtod_l+0xbe0>)
 8009a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a74:	4640      	mov	r0, r8
 8009a76:	4649      	mov	r1, r9
 8009a78:	f7f7 f83a 	bl	8000af0 <__aeabi_dcmple>
 8009a7c:	b1a0      	cbz	r0, 8009aa8 <_strtod_l+0xb60>
 8009a7e:	4649      	mov	r1, r9
 8009a80:	4640      	mov	r0, r8
 8009a82:	f7f7 f891 	bl	8000ba8 <__aeabi_d2uiz>
 8009a86:	2801      	cmp	r0, #1
 8009a88:	bf38      	it	cc
 8009a8a:	2001      	movcc	r0, #1
 8009a8c:	f7f6 fd3a 	bl	8000504 <__aeabi_ui2d>
 8009a90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a92:	4680      	mov	r8, r0
 8009a94:	4689      	mov	r9, r1
 8009a96:	bb23      	cbnz	r3, 8009ae2 <_strtod_l+0xb9a>
 8009a98:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009a9c:	9010      	str	r0, [sp, #64]	; 0x40
 8009a9e:	9311      	str	r3, [sp, #68]	; 0x44
 8009aa0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009aa4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009aa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009aaa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009aac:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009ab0:	1a9b      	subs	r3, r3, r2
 8009ab2:	9309      	str	r3, [sp, #36]	; 0x24
 8009ab4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009ab8:	eeb0 0a48 	vmov.f32	s0, s16
 8009abc:	eef0 0a68 	vmov.f32	s1, s17
 8009ac0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009ac4:	f002 f928 	bl	800bd18 <__ulp>
 8009ac8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009acc:	ec53 2b10 	vmov	r2, r3, d0
 8009ad0:	f7f6 fd92 	bl	80005f8 <__aeabi_dmul>
 8009ad4:	ec53 2b18 	vmov	r2, r3, d8
 8009ad8:	f7f6 fbd8 	bl	800028c <__adddf3>
 8009adc:	4682      	mov	sl, r0
 8009ade:	468b      	mov	fp, r1
 8009ae0:	e78d      	b.n	80099fe <_strtod_l+0xab6>
 8009ae2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8009ae6:	e7db      	b.n	8009aa0 <_strtod_l+0xb58>
 8009ae8:	a311      	add	r3, pc, #68	; (adr r3, 8009b30 <_strtod_l+0xbe8>)
 8009aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aee:	f7f6 fff5 	bl	8000adc <__aeabi_dcmplt>
 8009af2:	e7b2      	b.n	8009a5a <_strtod_l+0xb12>
 8009af4:	2300      	movs	r3, #0
 8009af6:	930a      	str	r3, [sp, #40]	; 0x28
 8009af8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009afa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009afc:	6013      	str	r3, [r2, #0]
 8009afe:	f7ff ba6b 	b.w	8008fd8 <_strtod_l+0x90>
 8009b02:	2a65      	cmp	r2, #101	; 0x65
 8009b04:	f43f ab5f 	beq.w	80091c6 <_strtod_l+0x27e>
 8009b08:	2a45      	cmp	r2, #69	; 0x45
 8009b0a:	f43f ab5c 	beq.w	80091c6 <_strtod_l+0x27e>
 8009b0e:	2301      	movs	r3, #1
 8009b10:	f7ff bb94 	b.w	800923c <_strtod_l+0x2f4>
 8009b14:	f3af 8000 	nop.w
 8009b18:	94a03595 	.word	0x94a03595
 8009b1c:	3fdfffff 	.word	0x3fdfffff
 8009b20:	35afe535 	.word	0x35afe535
 8009b24:	3fe00000 	.word	0x3fe00000
 8009b28:	ffc00000 	.word	0xffc00000
 8009b2c:	41dfffff 	.word	0x41dfffff
 8009b30:	94a03595 	.word	0x94a03595
 8009b34:	3fcfffff 	.word	0x3fcfffff
 8009b38:	3ff00000 	.word	0x3ff00000
 8009b3c:	7ff00000 	.word	0x7ff00000
 8009b40:	7fe00000 	.word	0x7fe00000
 8009b44:	7c9fffff 	.word	0x7c9fffff
 8009b48:	3fe00000 	.word	0x3fe00000
 8009b4c:	bff00000 	.word	0xbff00000
 8009b50:	7fefffff 	.word	0x7fefffff

08009b54 <_strtod_r>:
 8009b54:	4b01      	ldr	r3, [pc, #4]	; (8009b5c <_strtod_r+0x8>)
 8009b56:	f7ff b9f7 	b.w	8008f48 <_strtod_l>
 8009b5a:	bf00      	nop
 8009b5c:	20000080 	.word	0x20000080

08009b60 <_strtol_l.constprop.0>:
 8009b60:	2b01      	cmp	r3, #1
 8009b62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b66:	d001      	beq.n	8009b6c <_strtol_l.constprop.0+0xc>
 8009b68:	2b24      	cmp	r3, #36	; 0x24
 8009b6a:	d906      	bls.n	8009b7a <_strtol_l.constprop.0+0x1a>
 8009b6c:	f7fe fa62 	bl	8008034 <__errno>
 8009b70:	2316      	movs	r3, #22
 8009b72:	6003      	str	r3, [r0, #0]
 8009b74:	2000      	movs	r0, #0
 8009b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b7a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009c60 <_strtol_l.constprop.0+0x100>
 8009b7e:	460d      	mov	r5, r1
 8009b80:	462e      	mov	r6, r5
 8009b82:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009b86:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009b8a:	f017 0708 	ands.w	r7, r7, #8
 8009b8e:	d1f7      	bne.n	8009b80 <_strtol_l.constprop.0+0x20>
 8009b90:	2c2d      	cmp	r4, #45	; 0x2d
 8009b92:	d132      	bne.n	8009bfa <_strtol_l.constprop.0+0x9a>
 8009b94:	782c      	ldrb	r4, [r5, #0]
 8009b96:	2701      	movs	r7, #1
 8009b98:	1cb5      	adds	r5, r6, #2
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d05b      	beq.n	8009c56 <_strtol_l.constprop.0+0xf6>
 8009b9e:	2b10      	cmp	r3, #16
 8009ba0:	d109      	bne.n	8009bb6 <_strtol_l.constprop.0+0x56>
 8009ba2:	2c30      	cmp	r4, #48	; 0x30
 8009ba4:	d107      	bne.n	8009bb6 <_strtol_l.constprop.0+0x56>
 8009ba6:	782c      	ldrb	r4, [r5, #0]
 8009ba8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009bac:	2c58      	cmp	r4, #88	; 0x58
 8009bae:	d14d      	bne.n	8009c4c <_strtol_l.constprop.0+0xec>
 8009bb0:	786c      	ldrb	r4, [r5, #1]
 8009bb2:	2310      	movs	r3, #16
 8009bb4:	3502      	adds	r5, #2
 8009bb6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009bba:	f108 38ff 	add.w	r8, r8, #4294967295
 8009bbe:	f04f 0c00 	mov.w	ip, #0
 8009bc2:	fbb8 f9f3 	udiv	r9, r8, r3
 8009bc6:	4666      	mov	r6, ip
 8009bc8:	fb03 8a19 	mls	sl, r3, r9, r8
 8009bcc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009bd0:	f1be 0f09 	cmp.w	lr, #9
 8009bd4:	d816      	bhi.n	8009c04 <_strtol_l.constprop.0+0xa4>
 8009bd6:	4674      	mov	r4, lr
 8009bd8:	42a3      	cmp	r3, r4
 8009bda:	dd24      	ble.n	8009c26 <_strtol_l.constprop.0+0xc6>
 8009bdc:	f1bc 0f00 	cmp.w	ip, #0
 8009be0:	db1e      	blt.n	8009c20 <_strtol_l.constprop.0+0xc0>
 8009be2:	45b1      	cmp	r9, r6
 8009be4:	d31c      	bcc.n	8009c20 <_strtol_l.constprop.0+0xc0>
 8009be6:	d101      	bne.n	8009bec <_strtol_l.constprop.0+0x8c>
 8009be8:	45a2      	cmp	sl, r4
 8009bea:	db19      	blt.n	8009c20 <_strtol_l.constprop.0+0xc0>
 8009bec:	fb06 4603 	mla	r6, r6, r3, r4
 8009bf0:	f04f 0c01 	mov.w	ip, #1
 8009bf4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009bf8:	e7e8      	b.n	8009bcc <_strtol_l.constprop.0+0x6c>
 8009bfa:	2c2b      	cmp	r4, #43	; 0x2b
 8009bfc:	bf04      	itt	eq
 8009bfe:	782c      	ldrbeq	r4, [r5, #0]
 8009c00:	1cb5      	addeq	r5, r6, #2
 8009c02:	e7ca      	b.n	8009b9a <_strtol_l.constprop.0+0x3a>
 8009c04:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009c08:	f1be 0f19 	cmp.w	lr, #25
 8009c0c:	d801      	bhi.n	8009c12 <_strtol_l.constprop.0+0xb2>
 8009c0e:	3c37      	subs	r4, #55	; 0x37
 8009c10:	e7e2      	b.n	8009bd8 <_strtol_l.constprop.0+0x78>
 8009c12:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009c16:	f1be 0f19 	cmp.w	lr, #25
 8009c1a:	d804      	bhi.n	8009c26 <_strtol_l.constprop.0+0xc6>
 8009c1c:	3c57      	subs	r4, #87	; 0x57
 8009c1e:	e7db      	b.n	8009bd8 <_strtol_l.constprop.0+0x78>
 8009c20:	f04f 3cff 	mov.w	ip, #4294967295
 8009c24:	e7e6      	b.n	8009bf4 <_strtol_l.constprop.0+0x94>
 8009c26:	f1bc 0f00 	cmp.w	ip, #0
 8009c2a:	da05      	bge.n	8009c38 <_strtol_l.constprop.0+0xd8>
 8009c2c:	2322      	movs	r3, #34	; 0x22
 8009c2e:	6003      	str	r3, [r0, #0]
 8009c30:	4646      	mov	r6, r8
 8009c32:	b942      	cbnz	r2, 8009c46 <_strtol_l.constprop.0+0xe6>
 8009c34:	4630      	mov	r0, r6
 8009c36:	e79e      	b.n	8009b76 <_strtol_l.constprop.0+0x16>
 8009c38:	b107      	cbz	r7, 8009c3c <_strtol_l.constprop.0+0xdc>
 8009c3a:	4276      	negs	r6, r6
 8009c3c:	2a00      	cmp	r2, #0
 8009c3e:	d0f9      	beq.n	8009c34 <_strtol_l.constprop.0+0xd4>
 8009c40:	f1bc 0f00 	cmp.w	ip, #0
 8009c44:	d000      	beq.n	8009c48 <_strtol_l.constprop.0+0xe8>
 8009c46:	1e69      	subs	r1, r5, #1
 8009c48:	6011      	str	r1, [r2, #0]
 8009c4a:	e7f3      	b.n	8009c34 <_strtol_l.constprop.0+0xd4>
 8009c4c:	2430      	movs	r4, #48	; 0x30
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d1b1      	bne.n	8009bb6 <_strtol_l.constprop.0+0x56>
 8009c52:	2308      	movs	r3, #8
 8009c54:	e7af      	b.n	8009bb6 <_strtol_l.constprop.0+0x56>
 8009c56:	2c30      	cmp	r4, #48	; 0x30
 8009c58:	d0a5      	beq.n	8009ba6 <_strtol_l.constprop.0+0x46>
 8009c5a:	230a      	movs	r3, #10
 8009c5c:	e7ab      	b.n	8009bb6 <_strtol_l.constprop.0+0x56>
 8009c5e:	bf00      	nop
 8009c60:	0800cc71 	.word	0x0800cc71

08009c64 <_strtol_r>:
 8009c64:	f7ff bf7c 	b.w	8009b60 <_strtol_l.constprop.0>

08009c68 <__swbuf_r>:
 8009c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c6a:	460e      	mov	r6, r1
 8009c6c:	4614      	mov	r4, r2
 8009c6e:	4605      	mov	r5, r0
 8009c70:	b118      	cbz	r0, 8009c7a <__swbuf_r+0x12>
 8009c72:	6983      	ldr	r3, [r0, #24]
 8009c74:	b90b      	cbnz	r3, 8009c7a <__swbuf_r+0x12>
 8009c76:	f001 f84b 	bl	800ad10 <__sinit>
 8009c7a:	4b21      	ldr	r3, [pc, #132]	; (8009d00 <__swbuf_r+0x98>)
 8009c7c:	429c      	cmp	r4, r3
 8009c7e:	d12b      	bne.n	8009cd8 <__swbuf_r+0x70>
 8009c80:	686c      	ldr	r4, [r5, #4]
 8009c82:	69a3      	ldr	r3, [r4, #24]
 8009c84:	60a3      	str	r3, [r4, #8]
 8009c86:	89a3      	ldrh	r3, [r4, #12]
 8009c88:	071a      	lsls	r2, r3, #28
 8009c8a:	d52f      	bpl.n	8009cec <__swbuf_r+0x84>
 8009c8c:	6923      	ldr	r3, [r4, #16]
 8009c8e:	b36b      	cbz	r3, 8009cec <__swbuf_r+0x84>
 8009c90:	6923      	ldr	r3, [r4, #16]
 8009c92:	6820      	ldr	r0, [r4, #0]
 8009c94:	1ac0      	subs	r0, r0, r3
 8009c96:	6963      	ldr	r3, [r4, #20]
 8009c98:	b2f6      	uxtb	r6, r6
 8009c9a:	4283      	cmp	r3, r0
 8009c9c:	4637      	mov	r7, r6
 8009c9e:	dc04      	bgt.n	8009caa <__swbuf_r+0x42>
 8009ca0:	4621      	mov	r1, r4
 8009ca2:	4628      	mov	r0, r5
 8009ca4:	f000 ffa0 	bl	800abe8 <_fflush_r>
 8009ca8:	bb30      	cbnz	r0, 8009cf8 <__swbuf_r+0x90>
 8009caa:	68a3      	ldr	r3, [r4, #8]
 8009cac:	3b01      	subs	r3, #1
 8009cae:	60a3      	str	r3, [r4, #8]
 8009cb0:	6823      	ldr	r3, [r4, #0]
 8009cb2:	1c5a      	adds	r2, r3, #1
 8009cb4:	6022      	str	r2, [r4, #0]
 8009cb6:	701e      	strb	r6, [r3, #0]
 8009cb8:	6963      	ldr	r3, [r4, #20]
 8009cba:	3001      	adds	r0, #1
 8009cbc:	4283      	cmp	r3, r0
 8009cbe:	d004      	beq.n	8009cca <__swbuf_r+0x62>
 8009cc0:	89a3      	ldrh	r3, [r4, #12]
 8009cc2:	07db      	lsls	r3, r3, #31
 8009cc4:	d506      	bpl.n	8009cd4 <__swbuf_r+0x6c>
 8009cc6:	2e0a      	cmp	r6, #10
 8009cc8:	d104      	bne.n	8009cd4 <__swbuf_r+0x6c>
 8009cca:	4621      	mov	r1, r4
 8009ccc:	4628      	mov	r0, r5
 8009cce:	f000 ff8b 	bl	800abe8 <_fflush_r>
 8009cd2:	b988      	cbnz	r0, 8009cf8 <__swbuf_r+0x90>
 8009cd4:	4638      	mov	r0, r7
 8009cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cd8:	4b0a      	ldr	r3, [pc, #40]	; (8009d04 <__swbuf_r+0x9c>)
 8009cda:	429c      	cmp	r4, r3
 8009cdc:	d101      	bne.n	8009ce2 <__swbuf_r+0x7a>
 8009cde:	68ac      	ldr	r4, [r5, #8]
 8009ce0:	e7cf      	b.n	8009c82 <__swbuf_r+0x1a>
 8009ce2:	4b09      	ldr	r3, [pc, #36]	; (8009d08 <__swbuf_r+0xa0>)
 8009ce4:	429c      	cmp	r4, r3
 8009ce6:	bf08      	it	eq
 8009ce8:	68ec      	ldreq	r4, [r5, #12]
 8009cea:	e7ca      	b.n	8009c82 <__swbuf_r+0x1a>
 8009cec:	4621      	mov	r1, r4
 8009cee:	4628      	mov	r0, r5
 8009cf0:	f000 f80c 	bl	8009d0c <__swsetup_r>
 8009cf4:	2800      	cmp	r0, #0
 8009cf6:	d0cb      	beq.n	8009c90 <__swbuf_r+0x28>
 8009cf8:	f04f 37ff 	mov.w	r7, #4294967295
 8009cfc:	e7ea      	b.n	8009cd4 <__swbuf_r+0x6c>
 8009cfe:	bf00      	nop
 8009d00:	0800ce24 	.word	0x0800ce24
 8009d04:	0800ce44 	.word	0x0800ce44
 8009d08:	0800ce04 	.word	0x0800ce04

08009d0c <__swsetup_r>:
 8009d0c:	4b32      	ldr	r3, [pc, #200]	; (8009dd8 <__swsetup_r+0xcc>)
 8009d0e:	b570      	push	{r4, r5, r6, lr}
 8009d10:	681d      	ldr	r5, [r3, #0]
 8009d12:	4606      	mov	r6, r0
 8009d14:	460c      	mov	r4, r1
 8009d16:	b125      	cbz	r5, 8009d22 <__swsetup_r+0x16>
 8009d18:	69ab      	ldr	r3, [r5, #24]
 8009d1a:	b913      	cbnz	r3, 8009d22 <__swsetup_r+0x16>
 8009d1c:	4628      	mov	r0, r5
 8009d1e:	f000 fff7 	bl	800ad10 <__sinit>
 8009d22:	4b2e      	ldr	r3, [pc, #184]	; (8009ddc <__swsetup_r+0xd0>)
 8009d24:	429c      	cmp	r4, r3
 8009d26:	d10f      	bne.n	8009d48 <__swsetup_r+0x3c>
 8009d28:	686c      	ldr	r4, [r5, #4]
 8009d2a:	89a3      	ldrh	r3, [r4, #12]
 8009d2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d30:	0719      	lsls	r1, r3, #28
 8009d32:	d42c      	bmi.n	8009d8e <__swsetup_r+0x82>
 8009d34:	06dd      	lsls	r5, r3, #27
 8009d36:	d411      	bmi.n	8009d5c <__swsetup_r+0x50>
 8009d38:	2309      	movs	r3, #9
 8009d3a:	6033      	str	r3, [r6, #0]
 8009d3c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009d40:	81a3      	strh	r3, [r4, #12]
 8009d42:	f04f 30ff 	mov.w	r0, #4294967295
 8009d46:	e03e      	b.n	8009dc6 <__swsetup_r+0xba>
 8009d48:	4b25      	ldr	r3, [pc, #148]	; (8009de0 <__swsetup_r+0xd4>)
 8009d4a:	429c      	cmp	r4, r3
 8009d4c:	d101      	bne.n	8009d52 <__swsetup_r+0x46>
 8009d4e:	68ac      	ldr	r4, [r5, #8]
 8009d50:	e7eb      	b.n	8009d2a <__swsetup_r+0x1e>
 8009d52:	4b24      	ldr	r3, [pc, #144]	; (8009de4 <__swsetup_r+0xd8>)
 8009d54:	429c      	cmp	r4, r3
 8009d56:	bf08      	it	eq
 8009d58:	68ec      	ldreq	r4, [r5, #12]
 8009d5a:	e7e6      	b.n	8009d2a <__swsetup_r+0x1e>
 8009d5c:	0758      	lsls	r0, r3, #29
 8009d5e:	d512      	bpl.n	8009d86 <__swsetup_r+0x7a>
 8009d60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d62:	b141      	cbz	r1, 8009d76 <__swsetup_r+0x6a>
 8009d64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d68:	4299      	cmp	r1, r3
 8009d6a:	d002      	beq.n	8009d72 <__swsetup_r+0x66>
 8009d6c:	4630      	mov	r0, r6
 8009d6e:	f002 f939 	bl	800bfe4 <_free_r>
 8009d72:	2300      	movs	r3, #0
 8009d74:	6363      	str	r3, [r4, #52]	; 0x34
 8009d76:	89a3      	ldrh	r3, [r4, #12]
 8009d78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009d7c:	81a3      	strh	r3, [r4, #12]
 8009d7e:	2300      	movs	r3, #0
 8009d80:	6063      	str	r3, [r4, #4]
 8009d82:	6923      	ldr	r3, [r4, #16]
 8009d84:	6023      	str	r3, [r4, #0]
 8009d86:	89a3      	ldrh	r3, [r4, #12]
 8009d88:	f043 0308 	orr.w	r3, r3, #8
 8009d8c:	81a3      	strh	r3, [r4, #12]
 8009d8e:	6923      	ldr	r3, [r4, #16]
 8009d90:	b94b      	cbnz	r3, 8009da6 <__swsetup_r+0x9a>
 8009d92:	89a3      	ldrh	r3, [r4, #12]
 8009d94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009d98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d9c:	d003      	beq.n	8009da6 <__swsetup_r+0x9a>
 8009d9e:	4621      	mov	r1, r4
 8009da0:	4630      	mov	r0, r6
 8009da2:	f001 fbed 	bl	800b580 <__smakebuf_r>
 8009da6:	89a0      	ldrh	r0, [r4, #12]
 8009da8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009dac:	f010 0301 	ands.w	r3, r0, #1
 8009db0:	d00a      	beq.n	8009dc8 <__swsetup_r+0xbc>
 8009db2:	2300      	movs	r3, #0
 8009db4:	60a3      	str	r3, [r4, #8]
 8009db6:	6963      	ldr	r3, [r4, #20]
 8009db8:	425b      	negs	r3, r3
 8009dba:	61a3      	str	r3, [r4, #24]
 8009dbc:	6923      	ldr	r3, [r4, #16]
 8009dbe:	b943      	cbnz	r3, 8009dd2 <__swsetup_r+0xc6>
 8009dc0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009dc4:	d1ba      	bne.n	8009d3c <__swsetup_r+0x30>
 8009dc6:	bd70      	pop	{r4, r5, r6, pc}
 8009dc8:	0781      	lsls	r1, r0, #30
 8009dca:	bf58      	it	pl
 8009dcc:	6963      	ldrpl	r3, [r4, #20]
 8009dce:	60a3      	str	r3, [r4, #8]
 8009dd0:	e7f4      	b.n	8009dbc <__swsetup_r+0xb0>
 8009dd2:	2000      	movs	r0, #0
 8009dd4:	e7f7      	b.n	8009dc6 <__swsetup_r+0xba>
 8009dd6:	bf00      	nop
 8009dd8:	20000018 	.word	0x20000018
 8009ddc:	0800ce24 	.word	0x0800ce24
 8009de0:	0800ce44 	.word	0x0800ce44
 8009de4:	0800ce04 	.word	0x0800ce04

08009de8 <quorem>:
 8009de8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dec:	6903      	ldr	r3, [r0, #16]
 8009dee:	690c      	ldr	r4, [r1, #16]
 8009df0:	42a3      	cmp	r3, r4
 8009df2:	4607      	mov	r7, r0
 8009df4:	f2c0 8081 	blt.w	8009efa <quorem+0x112>
 8009df8:	3c01      	subs	r4, #1
 8009dfa:	f101 0814 	add.w	r8, r1, #20
 8009dfe:	f100 0514 	add.w	r5, r0, #20
 8009e02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e06:	9301      	str	r3, [sp, #4]
 8009e08:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009e0c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e10:	3301      	adds	r3, #1
 8009e12:	429a      	cmp	r2, r3
 8009e14:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009e18:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009e1c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009e20:	d331      	bcc.n	8009e86 <quorem+0x9e>
 8009e22:	f04f 0e00 	mov.w	lr, #0
 8009e26:	4640      	mov	r0, r8
 8009e28:	46ac      	mov	ip, r5
 8009e2a:	46f2      	mov	sl, lr
 8009e2c:	f850 2b04 	ldr.w	r2, [r0], #4
 8009e30:	b293      	uxth	r3, r2
 8009e32:	fb06 e303 	mla	r3, r6, r3, lr
 8009e36:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009e3a:	b29b      	uxth	r3, r3
 8009e3c:	ebaa 0303 	sub.w	r3, sl, r3
 8009e40:	f8dc a000 	ldr.w	sl, [ip]
 8009e44:	0c12      	lsrs	r2, r2, #16
 8009e46:	fa13 f38a 	uxtah	r3, r3, sl
 8009e4a:	fb06 e202 	mla	r2, r6, r2, lr
 8009e4e:	9300      	str	r3, [sp, #0]
 8009e50:	9b00      	ldr	r3, [sp, #0]
 8009e52:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009e56:	b292      	uxth	r2, r2
 8009e58:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009e5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009e60:	f8bd 3000 	ldrh.w	r3, [sp]
 8009e64:	4581      	cmp	r9, r0
 8009e66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e6a:	f84c 3b04 	str.w	r3, [ip], #4
 8009e6e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009e72:	d2db      	bcs.n	8009e2c <quorem+0x44>
 8009e74:	f855 300b 	ldr.w	r3, [r5, fp]
 8009e78:	b92b      	cbnz	r3, 8009e86 <quorem+0x9e>
 8009e7a:	9b01      	ldr	r3, [sp, #4]
 8009e7c:	3b04      	subs	r3, #4
 8009e7e:	429d      	cmp	r5, r3
 8009e80:	461a      	mov	r2, r3
 8009e82:	d32e      	bcc.n	8009ee2 <quorem+0xfa>
 8009e84:	613c      	str	r4, [r7, #16]
 8009e86:	4638      	mov	r0, r7
 8009e88:	f001 fea0 	bl	800bbcc <__mcmp>
 8009e8c:	2800      	cmp	r0, #0
 8009e8e:	db24      	blt.n	8009eda <quorem+0xf2>
 8009e90:	3601      	adds	r6, #1
 8009e92:	4628      	mov	r0, r5
 8009e94:	f04f 0c00 	mov.w	ip, #0
 8009e98:	f858 2b04 	ldr.w	r2, [r8], #4
 8009e9c:	f8d0 e000 	ldr.w	lr, [r0]
 8009ea0:	b293      	uxth	r3, r2
 8009ea2:	ebac 0303 	sub.w	r3, ip, r3
 8009ea6:	0c12      	lsrs	r2, r2, #16
 8009ea8:	fa13 f38e 	uxtah	r3, r3, lr
 8009eac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009eb0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009eb4:	b29b      	uxth	r3, r3
 8009eb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009eba:	45c1      	cmp	r9, r8
 8009ebc:	f840 3b04 	str.w	r3, [r0], #4
 8009ec0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009ec4:	d2e8      	bcs.n	8009e98 <quorem+0xb0>
 8009ec6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009eca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009ece:	b922      	cbnz	r2, 8009eda <quorem+0xf2>
 8009ed0:	3b04      	subs	r3, #4
 8009ed2:	429d      	cmp	r5, r3
 8009ed4:	461a      	mov	r2, r3
 8009ed6:	d30a      	bcc.n	8009eee <quorem+0x106>
 8009ed8:	613c      	str	r4, [r7, #16]
 8009eda:	4630      	mov	r0, r6
 8009edc:	b003      	add	sp, #12
 8009ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ee2:	6812      	ldr	r2, [r2, #0]
 8009ee4:	3b04      	subs	r3, #4
 8009ee6:	2a00      	cmp	r2, #0
 8009ee8:	d1cc      	bne.n	8009e84 <quorem+0x9c>
 8009eea:	3c01      	subs	r4, #1
 8009eec:	e7c7      	b.n	8009e7e <quorem+0x96>
 8009eee:	6812      	ldr	r2, [r2, #0]
 8009ef0:	3b04      	subs	r3, #4
 8009ef2:	2a00      	cmp	r2, #0
 8009ef4:	d1f0      	bne.n	8009ed8 <quorem+0xf0>
 8009ef6:	3c01      	subs	r4, #1
 8009ef8:	e7eb      	b.n	8009ed2 <quorem+0xea>
 8009efa:	2000      	movs	r0, #0
 8009efc:	e7ee      	b.n	8009edc <quorem+0xf4>
	...

08009f00 <_dtoa_r>:
 8009f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f04:	ed2d 8b04 	vpush	{d8-d9}
 8009f08:	ec57 6b10 	vmov	r6, r7, d0
 8009f0c:	b093      	sub	sp, #76	; 0x4c
 8009f0e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009f10:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009f14:	9106      	str	r1, [sp, #24]
 8009f16:	ee10 aa10 	vmov	sl, s0
 8009f1a:	4604      	mov	r4, r0
 8009f1c:	9209      	str	r2, [sp, #36]	; 0x24
 8009f1e:	930c      	str	r3, [sp, #48]	; 0x30
 8009f20:	46bb      	mov	fp, r7
 8009f22:	b975      	cbnz	r5, 8009f42 <_dtoa_r+0x42>
 8009f24:	2010      	movs	r0, #16
 8009f26:	f001 fb6b 	bl	800b600 <malloc>
 8009f2a:	4602      	mov	r2, r0
 8009f2c:	6260      	str	r0, [r4, #36]	; 0x24
 8009f2e:	b920      	cbnz	r0, 8009f3a <_dtoa_r+0x3a>
 8009f30:	4ba7      	ldr	r3, [pc, #668]	; (800a1d0 <_dtoa_r+0x2d0>)
 8009f32:	21ea      	movs	r1, #234	; 0xea
 8009f34:	48a7      	ldr	r0, [pc, #668]	; (800a1d4 <_dtoa_r+0x2d4>)
 8009f36:	f002 fc79 	bl	800c82c <__assert_func>
 8009f3a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009f3e:	6005      	str	r5, [r0, #0]
 8009f40:	60c5      	str	r5, [r0, #12]
 8009f42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f44:	6819      	ldr	r1, [r3, #0]
 8009f46:	b151      	cbz	r1, 8009f5e <_dtoa_r+0x5e>
 8009f48:	685a      	ldr	r2, [r3, #4]
 8009f4a:	604a      	str	r2, [r1, #4]
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	4093      	lsls	r3, r2
 8009f50:	608b      	str	r3, [r1, #8]
 8009f52:	4620      	mov	r0, r4
 8009f54:	f001 fbae 	bl	800b6b4 <_Bfree>
 8009f58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	601a      	str	r2, [r3, #0]
 8009f5e:	1e3b      	subs	r3, r7, #0
 8009f60:	bfaa      	itet	ge
 8009f62:	2300      	movge	r3, #0
 8009f64:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009f68:	f8c8 3000 	strge.w	r3, [r8]
 8009f6c:	4b9a      	ldr	r3, [pc, #616]	; (800a1d8 <_dtoa_r+0x2d8>)
 8009f6e:	bfbc      	itt	lt
 8009f70:	2201      	movlt	r2, #1
 8009f72:	f8c8 2000 	strlt.w	r2, [r8]
 8009f76:	ea33 030b 	bics.w	r3, r3, fp
 8009f7a:	d11b      	bne.n	8009fb4 <_dtoa_r+0xb4>
 8009f7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f7e:	f242 730f 	movw	r3, #9999	; 0x270f
 8009f82:	6013      	str	r3, [r2, #0]
 8009f84:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009f88:	4333      	orrs	r3, r6
 8009f8a:	f000 8592 	beq.w	800aab2 <_dtoa_r+0xbb2>
 8009f8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f90:	b963      	cbnz	r3, 8009fac <_dtoa_r+0xac>
 8009f92:	4b92      	ldr	r3, [pc, #584]	; (800a1dc <_dtoa_r+0x2dc>)
 8009f94:	e022      	b.n	8009fdc <_dtoa_r+0xdc>
 8009f96:	4b92      	ldr	r3, [pc, #584]	; (800a1e0 <_dtoa_r+0x2e0>)
 8009f98:	9301      	str	r3, [sp, #4]
 8009f9a:	3308      	adds	r3, #8
 8009f9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009f9e:	6013      	str	r3, [r2, #0]
 8009fa0:	9801      	ldr	r0, [sp, #4]
 8009fa2:	b013      	add	sp, #76	; 0x4c
 8009fa4:	ecbd 8b04 	vpop	{d8-d9}
 8009fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fac:	4b8b      	ldr	r3, [pc, #556]	; (800a1dc <_dtoa_r+0x2dc>)
 8009fae:	9301      	str	r3, [sp, #4]
 8009fb0:	3303      	adds	r3, #3
 8009fb2:	e7f3      	b.n	8009f9c <_dtoa_r+0x9c>
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	4650      	mov	r0, sl
 8009fba:	4659      	mov	r1, fp
 8009fbc:	f7f6 fd84 	bl	8000ac8 <__aeabi_dcmpeq>
 8009fc0:	ec4b ab19 	vmov	d9, sl, fp
 8009fc4:	4680      	mov	r8, r0
 8009fc6:	b158      	cbz	r0, 8009fe0 <_dtoa_r+0xe0>
 8009fc8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009fca:	2301      	movs	r3, #1
 8009fcc:	6013      	str	r3, [r2, #0]
 8009fce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	f000 856b 	beq.w	800aaac <_dtoa_r+0xbac>
 8009fd6:	4883      	ldr	r0, [pc, #524]	; (800a1e4 <_dtoa_r+0x2e4>)
 8009fd8:	6018      	str	r0, [r3, #0]
 8009fda:	1e43      	subs	r3, r0, #1
 8009fdc:	9301      	str	r3, [sp, #4]
 8009fde:	e7df      	b.n	8009fa0 <_dtoa_r+0xa0>
 8009fe0:	ec4b ab10 	vmov	d0, sl, fp
 8009fe4:	aa10      	add	r2, sp, #64	; 0x40
 8009fe6:	a911      	add	r1, sp, #68	; 0x44
 8009fe8:	4620      	mov	r0, r4
 8009fea:	f001 ff11 	bl	800be10 <__d2b>
 8009fee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009ff2:	ee08 0a10 	vmov	s16, r0
 8009ff6:	2d00      	cmp	r5, #0
 8009ff8:	f000 8084 	beq.w	800a104 <_dtoa_r+0x204>
 8009ffc:	ee19 3a90 	vmov	r3, s19
 800a000:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a004:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a008:	4656      	mov	r6, sl
 800a00a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a00e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a012:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a016:	4b74      	ldr	r3, [pc, #464]	; (800a1e8 <_dtoa_r+0x2e8>)
 800a018:	2200      	movs	r2, #0
 800a01a:	4630      	mov	r0, r6
 800a01c:	4639      	mov	r1, r7
 800a01e:	f7f6 f933 	bl	8000288 <__aeabi_dsub>
 800a022:	a365      	add	r3, pc, #404	; (adr r3, 800a1b8 <_dtoa_r+0x2b8>)
 800a024:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a028:	f7f6 fae6 	bl	80005f8 <__aeabi_dmul>
 800a02c:	a364      	add	r3, pc, #400	; (adr r3, 800a1c0 <_dtoa_r+0x2c0>)
 800a02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a032:	f7f6 f92b 	bl	800028c <__adddf3>
 800a036:	4606      	mov	r6, r0
 800a038:	4628      	mov	r0, r5
 800a03a:	460f      	mov	r7, r1
 800a03c:	f7f6 fa72 	bl	8000524 <__aeabi_i2d>
 800a040:	a361      	add	r3, pc, #388	; (adr r3, 800a1c8 <_dtoa_r+0x2c8>)
 800a042:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a046:	f7f6 fad7 	bl	80005f8 <__aeabi_dmul>
 800a04a:	4602      	mov	r2, r0
 800a04c:	460b      	mov	r3, r1
 800a04e:	4630      	mov	r0, r6
 800a050:	4639      	mov	r1, r7
 800a052:	f7f6 f91b 	bl	800028c <__adddf3>
 800a056:	4606      	mov	r6, r0
 800a058:	460f      	mov	r7, r1
 800a05a:	f7f6 fd7d 	bl	8000b58 <__aeabi_d2iz>
 800a05e:	2200      	movs	r2, #0
 800a060:	9000      	str	r0, [sp, #0]
 800a062:	2300      	movs	r3, #0
 800a064:	4630      	mov	r0, r6
 800a066:	4639      	mov	r1, r7
 800a068:	f7f6 fd38 	bl	8000adc <__aeabi_dcmplt>
 800a06c:	b150      	cbz	r0, 800a084 <_dtoa_r+0x184>
 800a06e:	9800      	ldr	r0, [sp, #0]
 800a070:	f7f6 fa58 	bl	8000524 <__aeabi_i2d>
 800a074:	4632      	mov	r2, r6
 800a076:	463b      	mov	r3, r7
 800a078:	f7f6 fd26 	bl	8000ac8 <__aeabi_dcmpeq>
 800a07c:	b910      	cbnz	r0, 800a084 <_dtoa_r+0x184>
 800a07e:	9b00      	ldr	r3, [sp, #0]
 800a080:	3b01      	subs	r3, #1
 800a082:	9300      	str	r3, [sp, #0]
 800a084:	9b00      	ldr	r3, [sp, #0]
 800a086:	2b16      	cmp	r3, #22
 800a088:	d85a      	bhi.n	800a140 <_dtoa_r+0x240>
 800a08a:	9a00      	ldr	r2, [sp, #0]
 800a08c:	4b57      	ldr	r3, [pc, #348]	; (800a1ec <_dtoa_r+0x2ec>)
 800a08e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a092:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a096:	ec51 0b19 	vmov	r0, r1, d9
 800a09a:	f7f6 fd1f 	bl	8000adc <__aeabi_dcmplt>
 800a09e:	2800      	cmp	r0, #0
 800a0a0:	d050      	beq.n	800a144 <_dtoa_r+0x244>
 800a0a2:	9b00      	ldr	r3, [sp, #0]
 800a0a4:	3b01      	subs	r3, #1
 800a0a6:	9300      	str	r3, [sp, #0]
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	930b      	str	r3, [sp, #44]	; 0x2c
 800a0ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a0ae:	1b5d      	subs	r5, r3, r5
 800a0b0:	1e6b      	subs	r3, r5, #1
 800a0b2:	9305      	str	r3, [sp, #20]
 800a0b4:	bf45      	ittet	mi
 800a0b6:	f1c5 0301 	rsbmi	r3, r5, #1
 800a0ba:	9304      	strmi	r3, [sp, #16]
 800a0bc:	2300      	movpl	r3, #0
 800a0be:	2300      	movmi	r3, #0
 800a0c0:	bf4c      	ite	mi
 800a0c2:	9305      	strmi	r3, [sp, #20]
 800a0c4:	9304      	strpl	r3, [sp, #16]
 800a0c6:	9b00      	ldr	r3, [sp, #0]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	db3d      	blt.n	800a148 <_dtoa_r+0x248>
 800a0cc:	9b05      	ldr	r3, [sp, #20]
 800a0ce:	9a00      	ldr	r2, [sp, #0]
 800a0d0:	920a      	str	r2, [sp, #40]	; 0x28
 800a0d2:	4413      	add	r3, r2
 800a0d4:	9305      	str	r3, [sp, #20]
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	9307      	str	r3, [sp, #28]
 800a0da:	9b06      	ldr	r3, [sp, #24]
 800a0dc:	2b09      	cmp	r3, #9
 800a0de:	f200 8089 	bhi.w	800a1f4 <_dtoa_r+0x2f4>
 800a0e2:	2b05      	cmp	r3, #5
 800a0e4:	bfc4      	itt	gt
 800a0e6:	3b04      	subgt	r3, #4
 800a0e8:	9306      	strgt	r3, [sp, #24]
 800a0ea:	9b06      	ldr	r3, [sp, #24]
 800a0ec:	f1a3 0302 	sub.w	r3, r3, #2
 800a0f0:	bfcc      	ite	gt
 800a0f2:	2500      	movgt	r5, #0
 800a0f4:	2501      	movle	r5, #1
 800a0f6:	2b03      	cmp	r3, #3
 800a0f8:	f200 8087 	bhi.w	800a20a <_dtoa_r+0x30a>
 800a0fc:	e8df f003 	tbb	[pc, r3]
 800a100:	59383a2d 	.word	0x59383a2d
 800a104:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a108:	441d      	add	r5, r3
 800a10a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a10e:	2b20      	cmp	r3, #32
 800a110:	bfc1      	itttt	gt
 800a112:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a116:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a11a:	fa0b f303 	lslgt.w	r3, fp, r3
 800a11e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a122:	bfda      	itte	le
 800a124:	f1c3 0320 	rsble	r3, r3, #32
 800a128:	fa06 f003 	lslle.w	r0, r6, r3
 800a12c:	4318      	orrgt	r0, r3
 800a12e:	f7f6 f9e9 	bl	8000504 <__aeabi_ui2d>
 800a132:	2301      	movs	r3, #1
 800a134:	4606      	mov	r6, r0
 800a136:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a13a:	3d01      	subs	r5, #1
 800a13c:	930e      	str	r3, [sp, #56]	; 0x38
 800a13e:	e76a      	b.n	800a016 <_dtoa_r+0x116>
 800a140:	2301      	movs	r3, #1
 800a142:	e7b2      	b.n	800a0aa <_dtoa_r+0x1aa>
 800a144:	900b      	str	r0, [sp, #44]	; 0x2c
 800a146:	e7b1      	b.n	800a0ac <_dtoa_r+0x1ac>
 800a148:	9b04      	ldr	r3, [sp, #16]
 800a14a:	9a00      	ldr	r2, [sp, #0]
 800a14c:	1a9b      	subs	r3, r3, r2
 800a14e:	9304      	str	r3, [sp, #16]
 800a150:	4253      	negs	r3, r2
 800a152:	9307      	str	r3, [sp, #28]
 800a154:	2300      	movs	r3, #0
 800a156:	930a      	str	r3, [sp, #40]	; 0x28
 800a158:	e7bf      	b.n	800a0da <_dtoa_r+0x1da>
 800a15a:	2300      	movs	r3, #0
 800a15c:	9308      	str	r3, [sp, #32]
 800a15e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a160:	2b00      	cmp	r3, #0
 800a162:	dc55      	bgt.n	800a210 <_dtoa_r+0x310>
 800a164:	2301      	movs	r3, #1
 800a166:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a16a:	461a      	mov	r2, r3
 800a16c:	9209      	str	r2, [sp, #36]	; 0x24
 800a16e:	e00c      	b.n	800a18a <_dtoa_r+0x28a>
 800a170:	2301      	movs	r3, #1
 800a172:	e7f3      	b.n	800a15c <_dtoa_r+0x25c>
 800a174:	2300      	movs	r3, #0
 800a176:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a178:	9308      	str	r3, [sp, #32]
 800a17a:	9b00      	ldr	r3, [sp, #0]
 800a17c:	4413      	add	r3, r2
 800a17e:	9302      	str	r3, [sp, #8]
 800a180:	3301      	adds	r3, #1
 800a182:	2b01      	cmp	r3, #1
 800a184:	9303      	str	r3, [sp, #12]
 800a186:	bfb8      	it	lt
 800a188:	2301      	movlt	r3, #1
 800a18a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a18c:	2200      	movs	r2, #0
 800a18e:	6042      	str	r2, [r0, #4]
 800a190:	2204      	movs	r2, #4
 800a192:	f102 0614 	add.w	r6, r2, #20
 800a196:	429e      	cmp	r6, r3
 800a198:	6841      	ldr	r1, [r0, #4]
 800a19a:	d93d      	bls.n	800a218 <_dtoa_r+0x318>
 800a19c:	4620      	mov	r0, r4
 800a19e:	f001 fa49 	bl	800b634 <_Balloc>
 800a1a2:	9001      	str	r0, [sp, #4]
 800a1a4:	2800      	cmp	r0, #0
 800a1a6:	d13b      	bne.n	800a220 <_dtoa_r+0x320>
 800a1a8:	4b11      	ldr	r3, [pc, #68]	; (800a1f0 <_dtoa_r+0x2f0>)
 800a1aa:	4602      	mov	r2, r0
 800a1ac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a1b0:	e6c0      	b.n	8009f34 <_dtoa_r+0x34>
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	e7df      	b.n	800a176 <_dtoa_r+0x276>
 800a1b6:	bf00      	nop
 800a1b8:	636f4361 	.word	0x636f4361
 800a1bc:	3fd287a7 	.word	0x3fd287a7
 800a1c0:	8b60c8b3 	.word	0x8b60c8b3
 800a1c4:	3fc68a28 	.word	0x3fc68a28
 800a1c8:	509f79fb 	.word	0x509f79fb
 800a1cc:	3fd34413 	.word	0x3fd34413
 800a1d0:	0800cd7e 	.word	0x0800cd7e
 800a1d4:	0800cd95 	.word	0x0800cd95
 800a1d8:	7ff00000 	.word	0x7ff00000
 800a1dc:	0800cd7a 	.word	0x0800cd7a
 800a1e0:	0800cd71 	.word	0x0800cd71
 800a1e4:	0800cbf5 	.word	0x0800cbf5
 800a1e8:	3ff80000 	.word	0x3ff80000
 800a1ec:	0800cf68 	.word	0x0800cf68
 800a1f0:	0800cdf0 	.word	0x0800cdf0
 800a1f4:	2501      	movs	r5, #1
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	9306      	str	r3, [sp, #24]
 800a1fa:	9508      	str	r5, [sp, #32]
 800a1fc:	f04f 33ff 	mov.w	r3, #4294967295
 800a200:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a204:	2200      	movs	r2, #0
 800a206:	2312      	movs	r3, #18
 800a208:	e7b0      	b.n	800a16c <_dtoa_r+0x26c>
 800a20a:	2301      	movs	r3, #1
 800a20c:	9308      	str	r3, [sp, #32]
 800a20e:	e7f5      	b.n	800a1fc <_dtoa_r+0x2fc>
 800a210:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a212:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a216:	e7b8      	b.n	800a18a <_dtoa_r+0x28a>
 800a218:	3101      	adds	r1, #1
 800a21a:	6041      	str	r1, [r0, #4]
 800a21c:	0052      	lsls	r2, r2, #1
 800a21e:	e7b8      	b.n	800a192 <_dtoa_r+0x292>
 800a220:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a222:	9a01      	ldr	r2, [sp, #4]
 800a224:	601a      	str	r2, [r3, #0]
 800a226:	9b03      	ldr	r3, [sp, #12]
 800a228:	2b0e      	cmp	r3, #14
 800a22a:	f200 809d 	bhi.w	800a368 <_dtoa_r+0x468>
 800a22e:	2d00      	cmp	r5, #0
 800a230:	f000 809a 	beq.w	800a368 <_dtoa_r+0x468>
 800a234:	9b00      	ldr	r3, [sp, #0]
 800a236:	2b00      	cmp	r3, #0
 800a238:	dd32      	ble.n	800a2a0 <_dtoa_r+0x3a0>
 800a23a:	4ab7      	ldr	r2, [pc, #732]	; (800a518 <_dtoa_r+0x618>)
 800a23c:	f003 030f 	and.w	r3, r3, #15
 800a240:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a244:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a248:	9b00      	ldr	r3, [sp, #0]
 800a24a:	05d8      	lsls	r0, r3, #23
 800a24c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a250:	d516      	bpl.n	800a280 <_dtoa_r+0x380>
 800a252:	4bb2      	ldr	r3, [pc, #712]	; (800a51c <_dtoa_r+0x61c>)
 800a254:	ec51 0b19 	vmov	r0, r1, d9
 800a258:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a25c:	f7f6 faf6 	bl	800084c <__aeabi_ddiv>
 800a260:	f007 070f 	and.w	r7, r7, #15
 800a264:	4682      	mov	sl, r0
 800a266:	468b      	mov	fp, r1
 800a268:	2503      	movs	r5, #3
 800a26a:	4eac      	ldr	r6, [pc, #688]	; (800a51c <_dtoa_r+0x61c>)
 800a26c:	b957      	cbnz	r7, 800a284 <_dtoa_r+0x384>
 800a26e:	4642      	mov	r2, r8
 800a270:	464b      	mov	r3, r9
 800a272:	4650      	mov	r0, sl
 800a274:	4659      	mov	r1, fp
 800a276:	f7f6 fae9 	bl	800084c <__aeabi_ddiv>
 800a27a:	4682      	mov	sl, r0
 800a27c:	468b      	mov	fp, r1
 800a27e:	e028      	b.n	800a2d2 <_dtoa_r+0x3d2>
 800a280:	2502      	movs	r5, #2
 800a282:	e7f2      	b.n	800a26a <_dtoa_r+0x36a>
 800a284:	07f9      	lsls	r1, r7, #31
 800a286:	d508      	bpl.n	800a29a <_dtoa_r+0x39a>
 800a288:	4640      	mov	r0, r8
 800a28a:	4649      	mov	r1, r9
 800a28c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a290:	f7f6 f9b2 	bl	80005f8 <__aeabi_dmul>
 800a294:	3501      	adds	r5, #1
 800a296:	4680      	mov	r8, r0
 800a298:	4689      	mov	r9, r1
 800a29a:	107f      	asrs	r7, r7, #1
 800a29c:	3608      	adds	r6, #8
 800a29e:	e7e5      	b.n	800a26c <_dtoa_r+0x36c>
 800a2a0:	f000 809b 	beq.w	800a3da <_dtoa_r+0x4da>
 800a2a4:	9b00      	ldr	r3, [sp, #0]
 800a2a6:	4f9d      	ldr	r7, [pc, #628]	; (800a51c <_dtoa_r+0x61c>)
 800a2a8:	425e      	negs	r6, r3
 800a2aa:	4b9b      	ldr	r3, [pc, #620]	; (800a518 <_dtoa_r+0x618>)
 800a2ac:	f006 020f 	and.w	r2, r6, #15
 800a2b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b8:	ec51 0b19 	vmov	r0, r1, d9
 800a2bc:	f7f6 f99c 	bl	80005f8 <__aeabi_dmul>
 800a2c0:	1136      	asrs	r6, r6, #4
 800a2c2:	4682      	mov	sl, r0
 800a2c4:	468b      	mov	fp, r1
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	2502      	movs	r5, #2
 800a2ca:	2e00      	cmp	r6, #0
 800a2cc:	d17a      	bne.n	800a3c4 <_dtoa_r+0x4c4>
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d1d3      	bne.n	800a27a <_dtoa_r+0x37a>
 800a2d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	f000 8082 	beq.w	800a3de <_dtoa_r+0x4de>
 800a2da:	4b91      	ldr	r3, [pc, #580]	; (800a520 <_dtoa_r+0x620>)
 800a2dc:	2200      	movs	r2, #0
 800a2de:	4650      	mov	r0, sl
 800a2e0:	4659      	mov	r1, fp
 800a2e2:	f7f6 fbfb 	bl	8000adc <__aeabi_dcmplt>
 800a2e6:	2800      	cmp	r0, #0
 800a2e8:	d079      	beq.n	800a3de <_dtoa_r+0x4de>
 800a2ea:	9b03      	ldr	r3, [sp, #12]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d076      	beq.n	800a3de <_dtoa_r+0x4de>
 800a2f0:	9b02      	ldr	r3, [sp, #8]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	dd36      	ble.n	800a364 <_dtoa_r+0x464>
 800a2f6:	9b00      	ldr	r3, [sp, #0]
 800a2f8:	4650      	mov	r0, sl
 800a2fa:	4659      	mov	r1, fp
 800a2fc:	1e5f      	subs	r7, r3, #1
 800a2fe:	2200      	movs	r2, #0
 800a300:	4b88      	ldr	r3, [pc, #544]	; (800a524 <_dtoa_r+0x624>)
 800a302:	f7f6 f979 	bl	80005f8 <__aeabi_dmul>
 800a306:	9e02      	ldr	r6, [sp, #8]
 800a308:	4682      	mov	sl, r0
 800a30a:	468b      	mov	fp, r1
 800a30c:	3501      	adds	r5, #1
 800a30e:	4628      	mov	r0, r5
 800a310:	f7f6 f908 	bl	8000524 <__aeabi_i2d>
 800a314:	4652      	mov	r2, sl
 800a316:	465b      	mov	r3, fp
 800a318:	f7f6 f96e 	bl	80005f8 <__aeabi_dmul>
 800a31c:	4b82      	ldr	r3, [pc, #520]	; (800a528 <_dtoa_r+0x628>)
 800a31e:	2200      	movs	r2, #0
 800a320:	f7f5 ffb4 	bl	800028c <__adddf3>
 800a324:	46d0      	mov	r8, sl
 800a326:	46d9      	mov	r9, fp
 800a328:	4682      	mov	sl, r0
 800a32a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a32e:	2e00      	cmp	r6, #0
 800a330:	d158      	bne.n	800a3e4 <_dtoa_r+0x4e4>
 800a332:	4b7e      	ldr	r3, [pc, #504]	; (800a52c <_dtoa_r+0x62c>)
 800a334:	2200      	movs	r2, #0
 800a336:	4640      	mov	r0, r8
 800a338:	4649      	mov	r1, r9
 800a33a:	f7f5 ffa5 	bl	8000288 <__aeabi_dsub>
 800a33e:	4652      	mov	r2, sl
 800a340:	465b      	mov	r3, fp
 800a342:	4680      	mov	r8, r0
 800a344:	4689      	mov	r9, r1
 800a346:	f7f6 fbe7 	bl	8000b18 <__aeabi_dcmpgt>
 800a34a:	2800      	cmp	r0, #0
 800a34c:	f040 8295 	bne.w	800a87a <_dtoa_r+0x97a>
 800a350:	4652      	mov	r2, sl
 800a352:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a356:	4640      	mov	r0, r8
 800a358:	4649      	mov	r1, r9
 800a35a:	f7f6 fbbf 	bl	8000adc <__aeabi_dcmplt>
 800a35e:	2800      	cmp	r0, #0
 800a360:	f040 8289 	bne.w	800a876 <_dtoa_r+0x976>
 800a364:	ec5b ab19 	vmov	sl, fp, d9
 800a368:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	f2c0 8148 	blt.w	800a600 <_dtoa_r+0x700>
 800a370:	9a00      	ldr	r2, [sp, #0]
 800a372:	2a0e      	cmp	r2, #14
 800a374:	f300 8144 	bgt.w	800a600 <_dtoa_r+0x700>
 800a378:	4b67      	ldr	r3, [pc, #412]	; (800a518 <_dtoa_r+0x618>)
 800a37a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a37e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a382:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a384:	2b00      	cmp	r3, #0
 800a386:	f280 80d5 	bge.w	800a534 <_dtoa_r+0x634>
 800a38a:	9b03      	ldr	r3, [sp, #12]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	f300 80d1 	bgt.w	800a534 <_dtoa_r+0x634>
 800a392:	f040 826f 	bne.w	800a874 <_dtoa_r+0x974>
 800a396:	4b65      	ldr	r3, [pc, #404]	; (800a52c <_dtoa_r+0x62c>)
 800a398:	2200      	movs	r2, #0
 800a39a:	4640      	mov	r0, r8
 800a39c:	4649      	mov	r1, r9
 800a39e:	f7f6 f92b 	bl	80005f8 <__aeabi_dmul>
 800a3a2:	4652      	mov	r2, sl
 800a3a4:	465b      	mov	r3, fp
 800a3a6:	f7f6 fbad 	bl	8000b04 <__aeabi_dcmpge>
 800a3aa:	9e03      	ldr	r6, [sp, #12]
 800a3ac:	4637      	mov	r7, r6
 800a3ae:	2800      	cmp	r0, #0
 800a3b0:	f040 8245 	bne.w	800a83e <_dtoa_r+0x93e>
 800a3b4:	9d01      	ldr	r5, [sp, #4]
 800a3b6:	2331      	movs	r3, #49	; 0x31
 800a3b8:	f805 3b01 	strb.w	r3, [r5], #1
 800a3bc:	9b00      	ldr	r3, [sp, #0]
 800a3be:	3301      	adds	r3, #1
 800a3c0:	9300      	str	r3, [sp, #0]
 800a3c2:	e240      	b.n	800a846 <_dtoa_r+0x946>
 800a3c4:	07f2      	lsls	r2, r6, #31
 800a3c6:	d505      	bpl.n	800a3d4 <_dtoa_r+0x4d4>
 800a3c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3cc:	f7f6 f914 	bl	80005f8 <__aeabi_dmul>
 800a3d0:	3501      	adds	r5, #1
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	1076      	asrs	r6, r6, #1
 800a3d6:	3708      	adds	r7, #8
 800a3d8:	e777      	b.n	800a2ca <_dtoa_r+0x3ca>
 800a3da:	2502      	movs	r5, #2
 800a3dc:	e779      	b.n	800a2d2 <_dtoa_r+0x3d2>
 800a3de:	9f00      	ldr	r7, [sp, #0]
 800a3e0:	9e03      	ldr	r6, [sp, #12]
 800a3e2:	e794      	b.n	800a30e <_dtoa_r+0x40e>
 800a3e4:	9901      	ldr	r1, [sp, #4]
 800a3e6:	4b4c      	ldr	r3, [pc, #304]	; (800a518 <_dtoa_r+0x618>)
 800a3e8:	4431      	add	r1, r6
 800a3ea:	910d      	str	r1, [sp, #52]	; 0x34
 800a3ec:	9908      	ldr	r1, [sp, #32]
 800a3ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a3f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a3f6:	2900      	cmp	r1, #0
 800a3f8:	d043      	beq.n	800a482 <_dtoa_r+0x582>
 800a3fa:	494d      	ldr	r1, [pc, #308]	; (800a530 <_dtoa_r+0x630>)
 800a3fc:	2000      	movs	r0, #0
 800a3fe:	f7f6 fa25 	bl	800084c <__aeabi_ddiv>
 800a402:	4652      	mov	r2, sl
 800a404:	465b      	mov	r3, fp
 800a406:	f7f5 ff3f 	bl	8000288 <__aeabi_dsub>
 800a40a:	9d01      	ldr	r5, [sp, #4]
 800a40c:	4682      	mov	sl, r0
 800a40e:	468b      	mov	fp, r1
 800a410:	4649      	mov	r1, r9
 800a412:	4640      	mov	r0, r8
 800a414:	f7f6 fba0 	bl	8000b58 <__aeabi_d2iz>
 800a418:	4606      	mov	r6, r0
 800a41a:	f7f6 f883 	bl	8000524 <__aeabi_i2d>
 800a41e:	4602      	mov	r2, r0
 800a420:	460b      	mov	r3, r1
 800a422:	4640      	mov	r0, r8
 800a424:	4649      	mov	r1, r9
 800a426:	f7f5 ff2f 	bl	8000288 <__aeabi_dsub>
 800a42a:	3630      	adds	r6, #48	; 0x30
 800a42c:	f805 6b01 	strb.w	r6, [r5], #1
 800a430:	4652      	mov	r2, sl
 800a432:	465b      	mov	r3, fp
 800a434:	4680      	mov	r8, r0
 800a436:	4689      	mov	r9, r1
 800a438:	f7f6 fb50 	bl	8000adc <__aeabi_dcmplt>
 800a43c:	2800      	cmp	r0, #0
 800a43e:	d163      	bne.n	800a508 <_dtoa_r+0x608>
 800a440:	4642      	mov	r2, r8
 800a442:	464b      	mov	r3, r9
 800a444:	4936      	ldr	r1, [pc, #216]	; (800a520 <_dtoa_r+0x620>)
 800a446:	2000      	movs	r0, #0
 800a448:	f7f5 ff1e 	bl	8000288 <__aeabi_dsub>
 800a44c:	4652      	mov	r2, sl
 800a44e:	465b      	mov	r3, fp
 800a450:	f7f6 fb44 	bl	8000adc <__aeabi_dcmplt>
 800a454:	2800      	cmp	r0, #0
 800a456:	f040 80b5 	bne.w	800a5c4 <_dtoa_r+0x6c4>
 800a45a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a45c:	429d      	cmp	r5, r3
 800a45e:	d081      	beq.n	800a364 <_dtoa_r+0x464>
 800a460:	4b30      	ldr	r3, [pc, #192]	; (800a524 <_dtoa_r+0x624>)
 800a462:	2200      	movs	r2, #0
 800a464:	4650      	mov	r0, sl
 800a466:	4659      	mov	r1, fp
 800a468:	f7f6 f8c6 	bl	80005f8 <__aeabi_dmul>
 800a46c:	4b2d      	ldr	r3, [pc, #180]	; (800a524 <_dtoa_r+0x624>)
 800a46e:	4682      	mov	sl, r0
 800a470:	468b      	mov	fp, r1
 800a472:	4640      	mov	r0, r8
 800a474:	4649      	mov	r1, r9
 800a476:	2200      	movs	r2, #0
 800a478:	f7f6 f8be 	bl	80005f8 <__aeabi_dmul>
 800a47c:	4680      	mov	r8, r0
 800a47e:	4689      	mov	r9, r1
 800a480:	e7c6      	b.n	800a410 <_dtoa_r+0x510>
 800a482:	4650      	mov	r0, sl
 800a484:	4659      	mov	r1, fp
 800a486:	f7f6 f8b7 	bl	80005f8 <__aeabi_dmul>
 800a48a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a48c:	9d01      	ldr	r5, [sp, #4]
 800a48e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a490:	4682      	mov	sl, r0
 800a492:	468b      	mov	fp, r1
 800a494:	4649      	mov	r1, r9
 800a496:	4640      	mov	r0, r8
 800a498:	f7f6 fb5e 	bl	8000b58 <__aeabi_d2iz>
 800a49c:	4606      	mov	r6, r0
 800a49e:	f7f6 f841 	bl	8000524 <__aeabi_i2d>
 800a4a2:	3630      	adds	r6, #48	; 0x30
 800a4a4:	4602      	mov	r2, r0
 800a4a6:	460b      	mov	r3, r1
 800a4a8:	4640      	mov	r0, r8
 800a4aa:	4649      	mov	r1, r9
 800a4ac:	f7f5 feec 	bl	8000288 <__aeabi_dsub>
 800a4b0:	f805 6b01 	strb.w	r6, [r5], #1
 800a4b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a4b6:	429d      	cmp	r5, r3
 800a4b8:	4680      	mov	r8, r0
 800a4ba:	4689      	mov	r9, r1
 800a4bc:	f04f 0200 	mov.w	r2, #0
 800a4c0:	d124      	bne.n	800a50c <_dtoa_r+0x60c>
 800a4c2:	4b1b      	ldr	r3, [pc, #108]	; (800a530 <_dtoa_r+0x630>)
 800a4c4:	4650      	mov	r0, sl
 800a4c6:	4659      	mov	r1, fp
 800a4c8:	f7f5 fee0 	bl	800028c <__adddf3>
 800a4cc:	4602      	mov	r2, r0
 800a4ce:	460b      	mov	r3, r1
 800a4d0:	4640      	mov	r0, r8
 800a4d2:	4649      	mov	r1, r9
 800a4d4:	f7f6 fb20 	bl	8000b18 <__aeabi_dcmpgt>
 800a4d8:	2800      	cmp	r0, #0
 800a4da:	d173      	bne.n	800a5c4 <_dtoa_r+0x6c4>
 800a4dc:	4652      	mov	r2, sl
 800a4de:	465b      	mov	r3, fp
 800a4e0:	4913      	ldr	r1, [pc, #76]	; (800a530 <_dtoa_r+0x630>)
 800a4e2:	2000      	movs	r0, #0
 800a4e4:	f7f5 fed0 	bl	8000288 <__aeabi_dsub>
 800a4e8:	4602      	mov	r2, r0
 800a4ea:	460b      	mov	r3, r1
 800a4ec:	4640      	mov	r0, r8
 800a4ee:	4649      	mov	r1, r9
 800a4f0:	f7f6 faf4 	bl	8000adc <__aeabi_dcmplt>
 800a4f4:	2800      	cmp	r0, #0
 800a4f6:	f43f af35 	beq.w	800a364 <_dtoa_r+0x464>
 800a4fa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a4fc:	1e6b      	subs	r3, r5, #1
 800a4fe:	930f      	str	r3, [sp, #60]	; 0x3c
 800a500:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a504:	2b30      	cmp	r3, #48	; 0x30
 800a506:	d0f8      	beq.n	800a4fa <_dtoa_r+0x5fa>
 800a508:	9700      	str	r7, [sp, #0]
 800a50a:	e049      	b.n	800a5a0 <_dtoa_r+0x6a0>
 800a50c:	4b05      	ldr	r3, [pc, #20]	; (800a524 <_dtoa_r+0x624>)
 800a50e:	f7f6 f873 	bl	80005f8 <__aeabi_dmul>
 800a512:	4680      	mov	r8, r0
 800a514:	4689      	mov	r9, r1
 800a516:	e7bd      	b.n	800a494 <_dtoa_r+0x594>
 800a518:	0800cf68 	.word	0x0800cf68
 800a51c:	0800cf40 	.word	0x0800cf40
 800a520:	3ff00000 	.word	0x3ff00000
 800a524:	40240000 	.word	0x40240000
 800a528:	401c0000 	.word	0x401c0000
 800a52c:	40140000 	.word	0x40140000
 800a530:	3fe00000 	.word	0x3fe00000
 800a534:	9d01      	ldr	r5, [sp, #4]
 800a536:	4656      	mov	r6, sl
 800a538:	465f      	mov	r7, fp
 800a53a:	4642      	mov	r2, r8
 800a53c:	464b      	mov	r3, r9
 800a53e:	4630      	mov	r0, r6
 800a540:	4639      	mov	r1, r7
 800a542:	f7f6 f983 	bl	800084c <__aeabi_ddiv>
 800a546:	f7f6 fb07 	bl	8000b58 <__aeabi_d2iz>
 800a54a:	4682      	mov	sl, r0
 800a54c:	f7f5 ffea 	bl	8000524 <__aeabi_i2d>
 800a550:	4642      	mov	r2, r8
 800a552:	464b      	mov	r3, r9
 800a554:	f7f6 f850 	bl	80005f8 <__aeabi_dmul>
 800a558:	4602      	mov	r2, r0
 800a55a:	460b      	mov	r3, r1
 800a55c:	4630      	mov	r0, r6
 800a55e:	4639      	mov	r1, r7
 800a560:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a564:	f7f5 fe90 	bl	8000288 <__aeabi_dsub>
 800a568:	f805 6b01 	strb.w	r6, [r5], #1
 800a56c:	9e01      	ldr	r6, [sp, #4]
 800a56e:	9f03      	ldr	r7, [sp, #12]
 800a570:	1bae      	subs	r6, r5, r6
 800a572:	42b7      	cmp	r7, r6
 800a574:	4602      	mov	r2, r0
 800a576:	460b      	mov	r3, r1
 800a578:	d135      	bne.n	800a5e6 <_dtoa_r+0x6e6>
 800a57a:	f7f5 fe87 	bl	800028c <__adddf3>
 800a57e:	4642      	mov	r2, r8
 800a580:	464b      	mov	r3, r9
 800a582:	4606      	mov	r6, r0
 800a584:	460f      	mov	r7, r1
 800a586:	f7f6 fac7 	bl	8000b18 <__aeabi_dcmpgt>
 800a58a:	b9d0      	cbnz	r0, 800a5c2 <_dtoa_r+0x6c2>
 800a58c:	4642      	mov	r2, r8
 800a58e:	464b      	mov	r3, r9
 800a590:	4630      	mov	r0, r6
 800a592:	4639      	mov	r1, r7
 800a594:	f7f6 fa98 	bl	8000ac8 <__aeabi_dcmpeq>
 800a598:	b110      	cbz	r0, 800a5a0 <_dtoa_r+0x6a0>
 800a59a:	f01a 0f01 	tst.w	sl, #1
 800a59e:	d110      	bne.n	800a5c2 <_dtoa_r+0x6c2>
 800a5a0:	4620      	mov	r0, r4
 800a5a2:	ee18 1a10 	vmov	r1, s16
 800a5a6:	f001 f885 	bl	800b6b4 <_Bfree>
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	9800      	ldr	r0, [sp, #0]
 800a5ae:	702b      	strb	r3, [r5, #0]
 800a5b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a5b2:	3001      	adds	r0, #1
 800a5b4:	6018      	str	r0, [r3, #0]
 800a5b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	f43f acf1 	beq.w	8009fa0 <_dtoa_r+0xa0>
 800a5be:	601d      	str	r5, [r3, #0]
 800a5c0:	e4ee      	b.n	8009fa0 <_dtoa_r+0xa0>
 800a5c2:	9f00      	ldr	r7, [sp, #0]
 800a5c4:	462b      	mov	r3, r5
 800a5c6:	461d      	mov	r5, r3
 800a5c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a5cc:	2a39      	cmp	r2, #57	; 0x39
 800a5ce:	d106      	bne.n	800a5de <_dtoa_r+0x6de>
 800a5d0:	9a01      	ldr	r2, [sp, #4]
 800a5d2:	429a      	cmp	r2, r3
 800a5d4:	d1f7      	bne.n	800a5c6 <_dtoa_r+0x6c6>
 800a5d6:	9901      	ldr	r1, [sp, #4]
 800a5d8:	2230      	movs	r2, #48	; 0x30
 800a5da:	3701      	adds	r7, #1
 800a5dc:	700a      	strb	r2, [r1, #0]
 800a5de:	781a      	ldrb	r2, [r3, #0]
 800a5e0:	3201      	adds	r2, #1
 800a5e2:	701a      	strb	r2, [r3, #0]
 800a5e4:	e790      	b.n	800a508 <_dtoa_r+0x608>
 800a5e6:	4ba6      	ldr	r3, [pc, #664]	; (800a880 <_dtoa_r+0x980>)
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	f7f6 f805 	bl	80005f8 <__aeabi_dmul>
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	4606      	mov	r6, r0
 800a5f4:	460f      	mov	r7, r1
 800a5f6:	f7f6 fa67 	bl	8000ac8 <__aeabi_dcmpeq>
 800a5fa:	2800      	cmp	r0, #0
 800a5fc:	d09d      	beq.n	800a53a <_dtoa_r+0x63a>
 800a5fe:	e7cf      	b.n	800a5a0 <_dtoa_r+0x6a0>
 800a600:	9a08      	ldr	r2, [sp, #32]
 800a602:	2a00      	cmp	r2, #0
 800a604:	f000 80d7 	beq.w	800a7b6 <_dtoa_r+0x8b6>
 800a608:	9a06      	ldr	r2, [sp, #24]
 800a60a:	2a01      	cmp	r2, #1
 800a60c:	f300 80ba 	bgt.w	800a784 <_dtoa_r+0x884>
 800a610:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a612:	2a00      	cmp	r2, #0
 800a614:	f000 80b2 	beq.w	800a77c <_dtoa_r+0x87c>
 800a618:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a61c:	9e07      	ldr	r6, [sp, #28]
 800a61e:	9d04      	ldr	r5, [sp, #16]
 800a620:	9a04      	ldr	r2, [sp, #16]
 800a622:	441a      	add	r2, r3
 800a624:	9204      	str	r2, [sp, #16]
 800a626:	9a05      	ldr	r2, [sp, #20]
 800a628:	2101      	movs	r1, #1
 800a62a:	441a      	add	r2, r3
 800a62c:	4620      	mov	r0, r4
 800a62e:	9205      	str	r2, [sp, #20]
 800a630:	f001 f942 	bl	800b8b8 <__i2b>
 800a634:	4607      	mov	r7, r0
 800a636:	2d00      	cmp	r5, #0
 800a638:	dd0c      	ble.n	800a654 <_dtoa_r+0x754>
 800a63a:	9b05      	ldr	r3, [sp, #20]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	dd09      	ble.n	800a654 <_dtoa_r+0x754>
 800a640:	42ab      	cmp	r3, r5
 800a642:	9a04      	ldr	r2, [sp, #16]
 800a644:	bfa8      	it	ge
 800a646:	462b      	movge	r3, r5
 800a648:	1ad2      	subs	r2, r2, r3
 800a64a:	9204      	str	r2, [sp, #16]
 800a64c:	9a05      	ldr	r2, [sp, #20]
 800a64e:	1aed      	subs	r5, r5, r3
 800a650:	1ad3      	subs	r3, r2, r3
 800a652:	9305      	str	r3, [sp, #20]
 800a654:	9b07      	ldr	r3, [sp, #28]
 800a656:	b31b      	cbz	r3, 800a6a0 <_dtoa_r+0x7a0>
 800a658:	9b08      	ldr	r3, [sp, #32]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	f000 80af 	beq.w	800a7be <_dtoa_r+0x8be>
 800a660:	2e00      	cmp	r6, #0
 800a662:	dd13      	ble.n	800a68c <_dtoa_r+0x78c>
 800a664:	4639      	mov	r1, r7
 800a666:	4632      	mov	r2, r6
 800a668:	4620      	mov	r0, r4
 800a66a:	f001 f9e5 	bl	800ba38 <__pow5mult>
 800a66e:	ee18 2a10 	vmov	r2, s16
 800a672:	4601      	mov	r1, r0
 800a674:	4607      	mov	r7, r0
 800a676:	4620      	mov	r0, r4
 800a678:	f001 f934 	bl	800b8e4 <__multiply>
 800a67c:	ee18 1a10 	vmov	r1, s16
 800a680:	4680      	mov	r8, r0
 800a682:	4620      	mov	r0, r4
 800a684:	f001 f816 	bl	800b6b4 <_Bfree>
 800a688:	ee08 8a10 	vmov	s16, r8
 800a68c:	9b07      	ldr	r3, [sp, #28]
 800a68e:	1b9a      	subs	r2, r3, r6
 800a690:	d006      	beq.n	800a6a0 <_dtoa_r+0x7a0>
 800a692:	ee18 1a10 	vmov	r1, s16
 800a696:	4620      	mov	r0, r4
 800a698:	f001 f9ce 	bl	800ba38 <__pow5mult>
 800a69c:	ee08 0a10 	vmov	s16, r0
 800a6a0:	2101      	movs	r1, #1
 800a6a2:	4620      	mov	r0, r4
 800a6a4:	f001 f908 	bl	800b8b8 <__i2b>
 800a6a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	4606      	mov	r6, r0
 800a6ae:	f340 8088 	ble.w	800a7c2 <_dtoa_r+0x8c2>
 800a6b2:	461a      	mov	r2, r3
 800a6b4:	4601      	mov	r1, r0
 800a6b6:	4620      	mov	r0, r4
 800a6b8:	f001 f9be 	bl	800ba38 <__pow5mult>
 800a6bc:	9b06      	ldr	r3, [sp, #24]
 800a6be:	2b01      	cmp	r3, #1
 800a6c0:	4606      	mov	r6, r0
 800a6c2:	f340 8081 	ble.w	800a7c8 <_dtoa_r+0x8c8>
 800a6c6:	f04f 0800 	mov.w	r8, #0
 800a6ca:	6933      	ldr	r3, [r6, #16]
 800a6cc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a6d0:	6918      	ldr	r0, [r3, #16]
 800a6d2:	f001 f8a1 	bl	800b818 <__hi0bits>
 800a6d6:	f1c0 0020 	rsb	r0, r0, #32
 800a6da:	9b05      	ldr	r3, [sp, #20]
 800a6dc:	4418      	add	r0, r3
 800a6de:	f010 001f 	ands.w	r0, r0, #31
 800a6e2:	f000 8092 	beq.w	800a80a <_dtoa_r+0x90a>
 800a6e6:	f1c0 0320 	rsb	r3, r0, #32
 800a6ea:	2b04      	cmp	r3, #4
 800a6ec:	f340 808a 	ble.w	800a804 <_dtoa_r+0x904>
 800a6f0:	f1c0 001c 	rsb	r0, r0, #28
 800a6f4:	9b04      	ldr	r3, [sp, #16]
 800a6f6:	4403      	add	r3, r0
 800a6f8:	9304      	str	r3, [sp, #16]
 800a6fa:	9b05      	ldr	r3, [sp, #20]
 800a6fc:	4403      	add	r3, r0
 800a6fe:	4405      	add	r5, r0
 800a700:	9305      	str	r3, [sp, #20]
 800a702:	9b04      	ldr	r3, [sp, #16]
 800a704:	2b00      	cmp	r3, #0
 800a706:	dd07      	ble.n	800a718 <_dtoa_r+0x818>
 800a708:	ee18 1a10 	vmov	r1, s16
 800a70c:	461a      	mov	r2, r3
 800a70e:	4620      	mov	r0, r4
 800a710:	f001 f9ec 	bl	800baec <__lshift>
 800a714:	ee08 0a10 	vmov	s16, r0
 800a718:	9b05      	ldr	r3, [sp, #20]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	dd05      	ble.n	800a72a <_dtoa_r+0x82a>
 800a71e:	4631      	mov	r1, r6
 800a720:	461a      	mov	r2, r3
 800a722:	4620      	mov	r0, r4
 800a724:	f001 f9e2 	bl	800baec <__lshift>
 800a728:	4606      	mov	r6, r0
 800a72a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d06e      	beq.n	800a80e <_dtoa_r+0x90e>
 800a730:	ee18 0a10 	vmov	r0, s16
 800a734:	4631      	mov	r1, r6
 800a736:	f001 fa49 	bl	800bbcc <__mcmp>
 800a73a:	2800      	cmp	r0, #0
 800a73c:	da67      	bge.n	800a80e <_dtoa_r+0x90e>
 800a73e:	9b00      	ldr	r3, [sp, #0]
 800a740:	3b01      	subs	r3, #1
 800a742:	ee18 1a10 	vmov	r1, s16
 800a746:	9300      	str	r3, [sp, #0]
 800a748:	220a      	movs	r2, #10
 800a74a:	2300      	movs	r3, #0
 800a74c:	4620      	mov	r0, r4
 800a74e:	f000 ffd3 	bl	800b6f8 <__multadd>
 800a752:	9b08      	ldr	r3, [sp, #32]
 800a754:	ee08 0a10 	vmov	s16, r0
 800a758:	2b00      	cmp	r3, #0
 800a75a:	f000 81b1 	beq.w	800aac0 <_dtoa_r+0xbc0>
 800a75e:	2300      	movs	r3, #0
 800a760:	4639      	mov	r1, r7
 800a762:	220a      	movs	r2, #10
 800a764:	4620      	mov	r0, r4
 800a766:	f000 ffc7 	bl	800b6f8 <__multadd>
 800a76a:	9b02      	ldr	r3, [sp, #8]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	4607      	mov	r7, r0
 800a770:	f300 808e 	bgt.w	800a890 <_dtoa_r+0x990>
 800a774:	9b06      	ldr	r3, [sp, #24]
 800a776:	2b02      	cmp	r3, #2
 800a778:	dc51      	bgt.n	800a81e <_dtoa_r+0x91e>
 800a77a:	e089      	b.n	800a890 <_dtoa_r+0x990>
 800a77c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a77e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a782:	e74b      	b.n	800a61c <_dtoa_r+0x71c>
 800a784:	9b03      	ldr	r3, [sp, #12]
 800a786:	1e5e      	subs	r6, r3, #1
 800a788:	9b07      	ldr	r3, [sp, #28]
 800a78a:	42b3      	cmp	r3, r6
 800a78c:	bfbf      	itttt	lt
 800a78e:	9b07      	ldrlt	r3, [sp, #28]
 800a790:	9607      	strlt	r6, [sp, #28]
 800a792:	1af2      	sublt	r2, r6, r3
 800a794:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a796:	bfb6      	itet	lt
 800a798:	189b      	addlt	r3, r3, r2
 800a79a:	1b9e      	subge	r6, r3, r6
 800a79c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a79e:	9b03      	ldr	r3, [sp, #12]
 800a7a0:	bfb8      	it	lt
 800a7a2:	2600      	movlt	r6, #0
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	bfb7      	itett	lt
 800a7a8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a7ac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a7b0:	1a9d      	sublt	r5, r3, r2
 800a7b2:	2300      	movlt	r3, #0
 800a7b4:	e734      	b.n	800a620 <_dtoa_r+0x720>
 800a7b6:	9e07      	ldr	r6, [sp, #28]
 800a7b8:	9d04      	ldr	r5, [sp, #16]
 800a7ba:	9f08      	ldr	r7, [sp, #32]
 800a7bc:	e73b      	b.n	800a636 <_dtoa_r+0x736>
 800a7be:	9a07      	ldr	r2, [sp, #28]
 800a7c0:	e767      	b.n	800a692 <_dtoa_r+0x792>
 800a7c2:	9b06      	ldr	r3, [sp, #24]
 800a7c4:	2b01      	cmp	r3, #1
 800a7c6:	dc18      	bgt.n	800a7fa <_dtoa_r+0x8fa>
 800a7c8:	f1ba 0f00 	cmp.w	sl, #0
 800a7cc:	d115      	bne.n	800a7fa <_dtoa_r+0x8fa>
 800a7ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a7d2:	b993      	cbnz	r3, 800a7fa <_dtoa_r+0x8fa>
 800a7d4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a7d8:	0d1b      	lsrs	r3, r3, #20
 800a7da:	051b      	lsls	r3, r3, #20
 800a7dc:	b183      	cbz	r3, 800a800 <_dtoa_r+0x900>
 800a7de:	9b04      	ldr	r3, [sp, #16]
 800a7e0:	3301      	adds	r3, #1
 800a7e2:	9304      	str	r3, [sp, #16]
 800a7e4:	9b05      	ldr	r3, [sp, #20]
 800a7e6:	3301      	adds	r3, #1
 800a7e8:	9305      	str	r3, [sp, #20]
 800a7ea:	f04f 0801 	mov.w	r8, #1
 800a7ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	f47f af6a 	bne.w	800a6ca <_dtoa_r+0x7ca>
 800a7f6:	2001      	movs	r0, #1
 800a7f8:	e76f      	b.n	800a6da <_dtoa_r+0x7da>
 800a7fa:	f04f 0800 	mov.w	r8, #0
 800a7fe:	e7f6      	b.n	800a7ee <_dtoa_r+0x8ee>
 800a800:	4698      	mov	r8, r3
 800a802:	e7f4      	b.n	800a7ee <_dtoa_r+0x8ee>
 800a804:	f43f af7d 	beq.w	800a702 <_dtoa_r+0x802>
 800a808:	4618      	mov	r0, r3
 800a80a:	301c      	adds	r0, #28
 800a80c:	e772      	b.n	800a6f4 <_dtoa_r+0x7f4>
 800a80e:	9b03      	ldr	r3, [sp, #12]
 800a810:	2b00      	cmp	r3, #0
 800a812:	dc37      	bgt.n	800a884 <_dtoa_r+0x984>
 800a814:	9b06      	ldr	r3, [sp, #24]
 800a816:	2b02      	cmp	r3, #2
 800a818:	dd34      	ble.n	800a884 <_dtoa_r+0x984>
 800a81a:	9b03      	ldr	r3, [sp, #12]
 800a81c:	9302      	str	r3, [sp, #8]
 800a81e:	9b02      	ldr	r3, [sp, #8]
 800a820:	b96b      	cbnz	r3, 800a83e <_dtoa_r+0x93e>
 800a822:	4631      	mov	r1, r6
 800a824:	2205      	movs	r2, #5
 800a826:	4620      	mov	r0, r4
 800a828:	f000 ff66 	bl	800b6f8 <__multadd>
 800a82c:	4601      	mov	r1, r0
 800a82e:	4606      	mov	r6, r0
 800a830:	ee18 0a10 	vmov	r0, s16
 800a834:	f001 f9ca 	bl	800bbcc <__mcmp>
 800a838:	2800      	cmp	r0, #0
 800a83a:	f73f adbb 	bgt.w	800a3b4 <_dtoa_r+0x4b4>
 800a83e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a840:	9d01      	ldr	r5, [sp, #4]
 800a842:	43db      	mvns	r3, r3
 800a844:	9300      	str	r3, [sp, #0]
 800a846:	f04f 0800 	mov.w	r8, #0
 800a84a:	4631      	mov	r1, r6
 800a84c:	4620      	mov	r0, r4
 800a84e:	f000 ff31 	bl	800b6b4 <_Bfree>
 800a852:	2f00      	cmp	r7, #0
 800a854:	f43f aea4 	beq.w	800a5a0 <_dtoa_r+0x6a0>
 800a858:	f1b8 0f00 	cmp.w	r8, #0
 800a85c:	d005      	beq.n	800a86a <_dtoa_r+0x96a>
 800a85e:	45b8      	cmp	r8, r7
 800a860:	d003      	beq.n	800a86a <_dtoa_r+0x96a>
 800a862:	4641      	mov	r1, r8
 800a864:	4620      	mov	r0, r4
 800a866:	f000 ff25 	bl	800b6b4 <_Bfree>
 800a86a:	4639      	mov	r1, r7
 800a86c:	4620      	mov	r0, r4
 800a86e:	f000 ff21 	bl	800b6b4 <_Bfree>
 800a872:	e695      	b.n	800a5a0 <_dtoa_r+0x6a0>
 800a874:	2600      	movs	r6, #0
 800a876:	4637      	mov	r7, r6
 800a878:	e7e1      	b.n	800a83e <_dtoa_r+0x93e>
 800a87a:	9700      	str	r7, [sp, #0]
 800a87c:	4637      	mov	r7, r6
 800a87e:	e599      	b.n	800a3b4 <_dtoa_r+0x4b4>
 800a880:	40240000 	.word	0x40240000
 800a884:	9b08      	ldr	r3, [sp, #32]
 800a886:	2b00      	cmp	r3, #0
 800a888:	f000 80ca 	beq.w	800aa20 <_dtoa_r+0xb20>
 800a88c:	9b03      	ldr	r3, [sp, #12]
 800a88e:	9302      	str	r3, [sp, #8]
 800a890:	2d00      	cmp	r5, #0
 800a892:	dd05      	ble.n	800a8a0 <_dtoa_r+0x9a0>
 800a894:	4639      	mov	r1, r7
 800a896:	462a      	mov	r2, r5
 800a898:	4620      	mov	r0, r4
 800a89a:	f001 f927 	bl	800baec <__lshift>
 800a89e:	4607      	mov	r7, r0
 800a8a0:	f1b8 0f00 	cmp.w	r8, #0
 800a8a4:	d05b      	beq.n	800a95e <_dtoa_r+0xa5e>
 800a8a6:	6879      	ldr	r1, [r7, #4]
 800a8a8:	4620      	mov	r0, r4
 800a8aa:	f000 fec3 	bl	800b634 <_Balloc>
 800a8ae:	4605      	mov	r5, r0
 800a8b0:	b928      	cbnz	r0, 800a8be <_dtoa_r+0x9be>
 800a8b2:	4b87      	ldr	r3, [pc, #540]	; (800aad0 <_dtoa_r+0xbd0>)
 800a8b4:	4602      	mov	r2, r0
 800a8b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a8ba:	f7ff bb3b 	b.w	8009f34 <_dtoa_r+0x34>
 800a8be:	693a      	ldr	r2, [r7, #16]
 800a8c0:	3202      	adds	r2, #2
 800a8c2:	0092      	lsls	r2, r2, #2
 800a8c4:	f107 010c 	add.w	r1, r7, #12
 800a8c8:	300c      	adds	r0, #12
 800a8ca:	f7fd fbdd 	bl	8008088 <memcpy>
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	4629      	mov	r1, r5
 800a8d2:	4620      	mov	r0, r4
 800a8d4:	f001 f90a 	bl	800baec <__lshift>
 800a8d8:	9b01      	ldr	r3, [sp, #4]
 800a8da:	f103 0901 	add.w	r9, r3, #1
 800a8de:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a8e2:	4413      	add	r3, r2
 800a8e4:	9305      	str	r3, [sp, #20]
 800a8e6:	f00a 0301 	and.w	r3, sl, #1
 800a8ea:	46b8      	mov	r8, r7
 800a8ec:	9304      	str	r3, [sp, #16]
 800a8ee:	4607      	mov	r7, r0
 800a8f0:	4631      	mov	r1, r6
 800a8f2:	ee18 0a10 	vmov	r0, s16
 800a8f6:	f7ff fa77 	bl	8009de8 <quorem>
 800a8fa:	4641      	mov	r1, r8
 800a8fc:	9002      	str	r0, [sp, #8]
 800a8fe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a902:	ee18 0a10 	vmov	r0, s16
 800a906:	f001 f961 	bl	800bbcc <__mcmp>
 800a90a:	463a      	mov	r2, r7
 800a90c:	9003      	str	r0, [sp, #12]
 800a90e:	4631      	mov	r1, r6
 800a910:	4620      	mov	r0, r4
 800a912:	f001 f977 	bl	800bc04 <__mdiff>
 800a916:	68c2      	ldr	r2, [r0, #12]
 800a918:	f109 3bff 	add.w	fp, r9, #4294967295
 800a91c:	4605      	mov	r5, r0
 800a91e:	bb02      	cbnz	r2, 800a962 <_dtoa_r+0xa62>
 800a920:	4601      	mov	r1, r0
 800a922:	ee18 0a10 	vmov	r0, s16
 800a926:	f001 f951 	bl	800bbcc <__mcmp>
 800a92a:	4602      	mov	r2, r0
 800a92c:	4629      	mov	r1, r5
 800a92e:	4620      	mov	r0, r4
 800a930:	9207      	str	r2, [sp, #28]
 800a932:	f000 febf 	bl	800b6b4 <_Bfree>
 800a936:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a93a:	ea43 0102 	orr.w	r1, r3, r2
 800a93e:	9b04      	ldr	r3, [sp, #16]
 800a940:	430b      	orrs	r3, r1
 800a942:	464d      	mov	r5, r9
 800a944:	d10f      	bne.n	800a966 <_dtoa_r+0xa66>
 800a946:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a94a:	d02a      	beq.n	800a9a2 <_dtoa_r+0xaa2>
 800a94c:	9b03      	ldr	r3, [sp, #12]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	dd02      	ble.n	800a958 <_dtoa_r+0xa58>
 800a952:	9b02      	ldr	r3, [sp, #8]
 800a954:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a958:	f88b a000 	strb.w	sl, [fp]
 800a95c:	e775      	b.n	800a84a <_dtoa_r+0x94a>
 800a95e:	4638      	mov	r0, r7
 800a960:	e7ba      	b.n	800a8d8 <_dtoa_r+0x9d8>
 800a962:	2201      	movs	r2, #1
 800a964:	e7e2      	b.n	800a92c <_dtoa_r+0xa2c>
 800a966:	9b03      	ldr	r3, [sp, #12]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	db04      	blt.n	800a976 <_dtoa_r+0xa76>
 800a96c:	9906      	ldr	r1, [sp, #24]
 800a96e:	430b      	orrs	r3, r1
 800a970:	9904      	ldr	r1, [sp, #16]
 800a972:	430b      	orrs	r3, r1
 800a974:	d122      	bne.n	800a9bc <_dtoa_r+0xabc>
 800a976:	2a00      	cmp	r2, #0
 800a978:	ddee      	ble.n	800a958 <_dtoa_r+0xa58>
 800a97a:	ee18 1a10 	vmov	r1, s16
 800a97e:	2201      	movs	r2, #1
 800a980:	4620      	mov	r0, r4
 800a982:	f001 f8b3 	bl	800baec <__lshift>
 800a986:	4631      	mov	r1, r6
 800a988:	ee08 0a10 	vmov	s16, r0
 800a98c:	f001 f91e 	bl	800bbcc <__mcmp>
 800a990:	2800      	cmp	r0, #0
 800a992:	dc03      	bgt.n	800a99c <_dtoa_r+0xa9c>
 800a994:	d1e0      	bne.n	800a958 <_dtoa_r+0xa58>
 800a996:	f01a 0f01 	tst.w	sl, #1
 800a99a:	d0dd      	beq.n	800a958 <_dtoa_r+0xa58>
 800a99c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a9a0:	d1d7      	bne.n	800a952 <_dtoa_r+0xa52>
 800a9a2:	2339      	movs	r3, #57	; 0x39
 800a9a4:	f88b 3000 	strb.w	r3, [fp]
 800a9a8:	462b      	mov	r3, r5
 800a9aa:	461d      	mov	r5, r3
 800a9ac:	3b01      	subs	r3, #1
 800a9ae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a9b2:	2a39      	cmp	r2, #57	; 0x39
 800a9b4:	d071      	beq.n	800aa9a <_dtoa_r+0xb9a>
 800a9b6:	3201      	adds	r2, #1
 800a9b8:	701a      	strb	r2, [r3, #0]
 800a9ba:	e746      	b.n	800a84a <_dtoa_r+0x94a>
 800a9bc:	2a00      	cmp	r2, #0
 800a9be:	dd07      	ble.n	800a9d0 <_dtoa_r+0xad0>
 800a9c0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a9c4:	d0ed      	beq.n	800a9a2 <_dtoa_r+0xaa2>
 800a9c6:	f10a 0301 	add.w	r3, sl, #1
 800a9ca:	f88b 3000 	strb.w	r3, [fp]
 800a9ce:	e73c      	b.n	800a84a <_dtoa_r+0x94a>
 800a9d0:	9b05      	ldr	r3, [sp, #20]
 800a9d2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a9d6:	4599      	cmp	r9, r3
 800a9d8:	d047      	beq.n	800aa6a <_dtoa_r+0xb6a>
 800a9da:	ee18 1a10 	vmov	r1, s16
 800a9de:	2300      	movs	r3, #0
 800a9e0:	220a      	movs	r2, #10
 800a9e2:	4620      	mov	r0, r4
 800a9e4:	f000 fe88 	bl	800b6f8 <__multadd>
 800a9e8:	45b8      	cmp	r8, r7
 800a9ea:	ee08 0a10 	vmov	s16, r0
 800a9ee:	f04f 0300 	mov.w	r3, #0
 800a9f2:	f04f 020a 	mov.w	r2, #10
 800a9f6:	4641      	mov	r1, r8
 800a9f8:	4620      	mov	r0, r4
 800a9fa:	d106      	bne.n	800aa0a <_dtoa_r+0xb0a>
 800a9fc:	f000 fe7c 	bl	800b6f8 <__multadd>
 800aa00:	4680      	mov	r8, r0
 800aa02:	4607      	mov	r7, r0
 800aa04:	f109 0901 	add.w	r9, r9, #1
 800aa08:	e772      	b.n	800a8f0 <_dtoa_r+0x9f0>
 800aa0a:	f000 fe75 	bl	800b6f8 <__multadd>
 800aa0e:	4639      	mov	r1, r7
 800aa10:	4680      	mov	r8, r0
 800aa12:	2300      	movs	r3, #0
 800aa14:	220a      	movs	r2, #10
 800aa16:	4620      	mov	r0, r4
 800aa18:	f000 fe6e 	bl	800b6f8 <__multadd>
 800aa1c:	4607      	mov	r7, r0
 800aa1e:	e7f1      	b.n	800aa04 <_dtoa_r+0xb04>
 800aa20:	9b03      	ldr	r3, [sp, #12]
 800aa22:	9302      	str	r3, [sp, #8]
 800aa24:	9d01      	ldr	r5, [sp, #4]
 800aa26:	ee18 0a10 	vmov	r0, s16
 800aa2a:	4631      	mov	r1, r6
 800aa2c:	f7ff f9dc 	bl	8009de8 <quorem>
 800aa30:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800aa34:	9b01      	ldr	r3, [sp, #4]
 800aa36:	f805 ab01 	strb.w	sl, [r5], #1
 800aa3a:	1aea      	subs	r2, r5, r3
 800aa3c:	9b02      	ldr	r3, [sp, #8]
 800aa3e:	4293      	cmp	r3, r2
 800aa40:	dd09      	ble.n	800aa56 <_dtoa_r+0xb56>
 800aa42:	ee18 1a10 	vmov	r1, s16
 800aa46:	2300      	movs	r3, #0
 800aa48:	220a      	movs	r2, #10
 800aa4a:	4620      	mov	r0, r4
 800aa4c:	f000 fe54 	bl	800b6f8 <__multadd>
 800aa50:	ee08 0a10 	vmov	s16, r0
 800aa54:	e7e7      	b.n	800aa26 <_dtoa_r+0xb26>
 800aa56:	9b02      	ldr	r3, [sp, #8]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	bfc8      	it	gt
 800aa5c:	461d      	movgt	r5, r3
 800aa5e:	9b01      	ldr	r3, [sp, #4]
 800aa60:	bfd8      	it	le
 800aa62:	2501      	movle	r5, #1
 800aa64:	441d      	add	r5, r3
 800aa66:	f04f 0800 	mov.w	r8, #0
 800aa6a:	ee18 1a10 	vmov	r1, s16
 800aa6e:	2201      	movs	r2, #1
 800aa70:	4620      	mov	r0, r4
 800aa72:	f001 f83b 	bl	800baec <__lshift>
 800aa76:	4631      	mov	r1, r6
 800aa78:	ee08 0a10 	vmov	s16, r0
 800aa7c:	f001 f8a6 	bl	800bbcc <__mcmp>
 800aa80:	2800      	cmp	r0, #0
 800aa82:	dc91      	bgt.n	800a9a8 <_dtoa_r+0xaa8>
 800aa84:	d102      	bne.n	800aa8c <_dtoa_r+0xb8c>
 800aa86:	f01a 0f01 	tst.w	sl, #1
 800aa8a:	d18d      	bne.n	800a9a8 <_dtoa_r+0xaa8>
 800aa8c:	462b      	mov	r3, r5
 800aa8e:	461d      	mov	r5, r3
 800aa90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aa94:	2a30      	cmp	r2, #48	; 0x30
 800aa96:	d0fa      	beq.n	800aa8e <_dtoa_r+0xb8e>
 800aa98:	e6d7      	b.n	800a84a <_dtoa_r+0x94a>
 800aa9a:	9a01      	ldr	r2, [sp, #4]
 800aa9c:	429a      	cmp	r2, r3
 800aa9e:	d184      	bne.n	800a9aa <_dtoa_r+0xaaa>
 800aaa0:	9b00      	ldr	r3, [sp, #0]
 800aaa2:	3301      	adds	r3, #1
 800aaa4:	9300      	str	r3, [sp, #0]
 800aaa6:	2331      	movs	r3, #49	; 0x31
 800aaa8:	7013      	strb	r3, [r2, #0]
 800aaaa:	e6ce      	b.n	800a84a <_dtoa_r+0x94a>
 800aaac:	4b09      	ldr	r3, [pc, #36]	; (800aad4 <_dtoa_r+0xbd4>)
 800aaae:	f7ff ba95 	b.w	8009fdc <_dtoa_r+0xdc>
 800aab2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	f47f aa6e 	bne.w	8009f96 <_dtoa_r+0x96>
 800aaba:	4b07      	ldr	r3, [pc, #28]	; (800aad8 <_dtoa_r+0xbd8>)
 800aabc:	f7ff ba8e 	b.w	8009fdc <_dtoa_r+0xdc>
 800aac0:	9b02      	ldr	r3, [sp, #8]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	dcae      	bgt.n	800aa24 <_dtoa_r+0xb24>
 800aac6:	9b06      	ldr	r3, [sp, #24]
 800aac8:	2b02      	cmp	r3, #2
 800aaca:	f73f aea8 	bgt.w	800a81e <_dtoa_r+0x91e>
 800aace:	e7a9      	b.n	800aa24 <_dtoa_r+0xb24>
 800aad0:	0800cdf0 	.word	0x0800cdf0
 800aad4:	0800cbf4 	.word	0x0800cbf4
 800aad8:	0800cd71 	.word	0x0800cd71

0800aadc <__sflush_r>:
 800aadc:	898a      	ldrh	r2, [r1, #12]
 800aade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aae2:	4605      	mov	r5, r0
 800aae4:	0710      	lsls	r0, r2, #28
 800aae6:	460c      	mov	r4, r1
 800aae8:	d458      	bmi.n	800ab9c <__sflush_r+0xc0>
 800aaea:	684b      	ldr	r3, [r1, #4]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	dc05      	bgt.n	800aafc <__sflush_r+0x20>
 800aaf0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	dc02      	bgt.n	800aafc <__sflush_r+0x20>
 800aaf6:	2000      	movs	r0, #0
 800aaf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aafc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aafe:	2e00      	cmp	r6, #0
 800ab00:	d0f9      	beq.n	800aaf6 <__sflush_r+0x1a>
 800ab02:	2300      	movs	r3, #0
 800ab04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ab08:	682f      	ldr	r7, [r5, #0]
 800ab0a:	602b      	str	r3, [r5, #0]
 800ab0c:	d032      	beq.n	800ab74 <__sflush_r+0x98>
 800ab0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ab10:	89a3      	ldrh	r3, [r4, #12]
 800ab12:	075a      	lsls	r2, r3, #29
 800ab14:	d505      	bpl.n	800ab22 <__sflush_r+0x46>
 800ab16:	6863      	ldr	r3, [r4, #4]
 800ab18:	1ac0      	subs	r0, r0, r3
 800ab1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ab1c:	b10b      	cbz	r3, 800ab22 <__sflush_r+0x46>
 800ab1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ab20:	1ac0      	subs	r0, r0, r3
 800ab22:	2300      	movs	r3, #0
 800ab24:	4602      	mov	r2, r0
 800ab26:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab28:	6a21      	ldr	r1, [r4, #32]
 800ab2a:	4628      	mov	r0, r5
 800ab2c:	47b0      	blx	r6
 800ab2e:	1c43      	adds	r3, r0, #1
 800ab30:	89a3      	ldrh	r3, [r4, #12]
 800ab32:	d106      	bne.n	800ab42 <__sflush_r+0x66>
 800ab34:	6829      	ldr	r1, [r5, #0]
 800ab36:	291d      	cmp	r1, #29
 800ab38:	d82c      	bhi.n	800ab94 <__sflush_r+0xb8>
 800ab3a:	4a2a      	ldr	r2, [pc, #168]	; (800abe4 <__sflush_r+0x108>)
 800ab3c:	40ca      	lsrs	r2, r1
 800ab3e:	07d6      	lsls	r6, r2, #31
 800ab40:	d528      	bpl.n	800ab94 <__sflush_r+0xb8>
 800ab42:	2200      	movs	r2, #0
 800ab44:	6062      	str	r2, [r4, #4]
 800ab46:	04d9      	lsls	r1, r3, #19
 800ab48:	6922      	ldr	r2, [r4, #16]
 800ab4a:	6022      	str	r2, [r4, #0]
 800ab4c:	d504      	bpl.n	800ab58 <__sflush_r+0x7c>
 800ab4e:	1c42      	adds	r2, r0, #1
 800ab50:	d101      	bne.n	800ab56 <__sflush_r+0x7a>
 800ab52:	682b      	ldr	r3, [r5, #0]
 800ab54:	b903      	cbnz	r3, 800ab58 <__sflush_r+0x7c>
 800ab56:	6560      	str	r0, [r4, #84]	; 0x54
 800ab58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab5a:	602f      	str	r7, [r5, #0]
 800ab5c:	2900      	cmp	r1, #0
 800ab5e:	d0ca      	beq.n	800aaf6 <__sflush_r+0x1a>
 800ab60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab64:	4299      	cmp	r1, r3
 800ab66:	d002      	beq.n	800ab6e <__sflush_r+0x92>
 800ab68:	4628      	mov	r0, r5
 800ab6a:	f001 fa3b 	bl	800bfe4 <_free_r>
 800ab6e:	2000      	movs	r0, #0
 800ab70:	6360      	str	r0, [r4, #52]	; 0x34
 800ab72:	e7c1      	b.n	800aaf8 <__sflush_r+0x1c>
 800ab74:	6a21      	ldr	r1, [r4, #32]
 800ab76:	2301      	movs	r3, #1
 800ab78:	4628      	mov	r0, r5
 800ab7a:	47b0      	blx	r6
 800ab7c:	1c41      	adds	r1, r0, #1
 800ab7e:	d1c7      	bne.n	800ab10 <__sflush_r+0x34>
 800ab80:	682b      	ldr	r3, [r5, #0]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d0c4      	beq.n	800ab10 <__sflush_r+0x34>
 800ab86:	2b1d      	cmp	r3, #29
 800ab88:	d001      	beq.n	800ab8e <__sflush_r+0xb2>
 800ab8a:	2b16      	cmp	r3, #22
 800ab8c:	d101      	bne.n	800ab92 <__sflush_r+0xb6>
 800ab8e:	602f      	str	r7, [r5, #0]
 800ab90:	e7b1      	b.n	800aaf6 <__sflush_r+0x1a>
 800ab92:	89a3      	ldrh	r3, [r4, #12]
 800ab94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab98:	81a3      	strh	r3, [r4, #12]
 800ab9a:	e7ad      	b.n	800aaf8 <__sflush_r+0x1c>
 800ab9c:	690f      	ldr	r7, [r1, #16]
 800ab9e:	2f00      	cmp	r7, #0
 800aba0:	d0a9      	beq.n	800aaf6 <__sflush_r+0x1a>
 800aba2:	0793      	lsls	r3, r2, #30
 800aba4:	680e      	ldr	r6, [r1, #0]
 800aba6:	bf08      	it	eq
 800aba8:	694b      	ldreq	r3, [r1, #20]
 800abaa:	600f      	str	r7, [r1, #0]
 800abac:	bf18      	it	ne
 800abae:	2300      	movne	r3, #0
 800abb0:	eba6 0807 	sub.w	r8, r6, r7
 800abb4:	608b      	str	r3, [r1, #8]
 800abb6:	f1b8 0f00 	cmp.w	r8, #0
 800abba:	dd9c      	ble.n	800aaf6 <__sflush_r+0x1a>
 800abbc:	6a21      	ldr	r1, [r4, #32]
 800abbe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800abc0:	4643      	mov	r3, r8
 800abc2:	463a      	mov	r2, r7
 800abc4:	4628      	mov	r0, r5
 800abc6:	47b0      	blx	r6
 800abc8:	2800      	cmp	r0, #0
 800abca:	dc06      	bgt.n	800abda <__sflush_r+0xfe>
 800abcc:	89a3      	ldrh	r3, [r4, #12]
 800abce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abd2:	81a3      	strh	r3, [r4, #12]
 800abd4:	f04f 30ff 	mov.w	r0, #4294967295
 800abd8:	e78e      	b.n	800aaf8 <__sflush_r+0x1c>
 800abda:	4407      	add	r7, r0
 800abdc:	eba8 0800 	sub.w	r8, r8, r0
 800abe0:	e7e9      	b.n	800abb6 <__sflush_r+0xda>
 800abe2:	bf00      	nop
 800abe4:	20400001 	.word	0x20400001

0800abe8 <_fflush_r>:
 800abe8:	b538      	push	{r3, r4, r5, lr}
 800abea:	690b      	ldr	r3, [r1, #16]
 800abec:	4605      	mov	r5, r0
 800abee:	460c      	mov	r4, r1
 800abf0:	b913      	cbnz	r3, 800abf8 <_fflush_r+0x10>
 800abf2:	2500      	movs	r5, #0
 800abf4:	4628      	mov	r0, r5
 800abf6:	bd38      	pop	{r3, r4, r5, pc}
 800abf8:	b118      	cbz	r0, 800ac02 <_fflush_r+0x1a>
 800abfa:	6983      	ldr	r3, [r0, #24]
 800abfc:	b90b      	cbnz	r3, 800ac02 <_fflush_r+0x1a>
 800abfe:	f000 f887 	bl	800ad10 <__sinit>
 800ac02:	4b14      	ldr	r3, [pc, #80]	; (800ac54 <_fflush_r+0x6c>)
 800ac04:	429c      	cmp	r4, r3
 800ac06:	d11b      	bne.n	800ac40 <_fflush_r+0x58>
 800ac08:	686c      	ldr	r4, [r5, #4]
 800ac0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d0ef      	beq.n	800abf2 <_fflush_r+0xa>
 800ac12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ac14:	07d0      	lsls	r0, r2, #31
 800ac16:	d404      	bmi.n	800ac22 <_fflush_r+0x3a>
 800ac18:	0599      	lsls	r1, r3, #22
 800ac1a:	d402      	bmi.n	800ac22 <_fflush_r+0x3a>
 800ac1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac1e:	f000 fc88 	bl	800b532 <__retarget_lock_acquire_recursive>
 800ac22:	4628      	mov	r0, r5
 800ac24:	4621      	mov	r1, r4
 800ac26:	f7ff ff59 	bl	800aadc <__sflush_r>
 800ac2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac2c:	07da      	lsls	r2, r3, #31
 800ac2e:	4605      	mov	r5, r0
 800ac30:	d4e0      	bmi.n	800abf4 <_fflush_r+0xc>
 800ac32:	89a3      	ldrh	r3, [r4, #12]
 800ac34:	059b      	lsls	r3, r3, #22
 800ac36:	d4dd      	bmi.n	800abf4 <_fflush_r+0xc>
 800ac38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac3a:	f000 fc7b 	bl	800b534 <__retarget_lock_release_recursive>
 800ac3e:	e7d9      	b.n	800abf4 <_fflush_r+0xc>
 800ac40:	4b05      	ldr	r3, [pc, #20]	; (800ac58 <_fflush_r+0x70>)
 800ac42:	429c      	cmp	r4, r3
 800ac44:	d101      	bne.n	800ac4a <_fflush_r+0x62>
 800ac46:	68ac      	ldr	r4, [r5, #8]
 800ac48:	e7df      	b.n	800ac0a <_fflush_r+0x22>
 800ac4a:	4b04      	ldr	r3, [pc, #16]	; (800ac5c <_fflush_r+0x74>)
 800ac4c:	429c      	cmp	r4, r3
 800ac4e:	bf08      	it	eq
 800ac50:	68ec      	ldreq	r4, [r5, #12]
 800ac52:	e7da      	b.n	800ac0a <_fflush_r+0x22>
 800ac54:	0800ce24 	.word	0x0800ce24
 800ac58:	0800ce44 	.word	0x0800ce44
 800ac5c:	0800ce04 	.word	0x0800ce04

0800ac60 <std>:
 800ac60:	2300      	movs	r3, #0
 800ac62:	b510      	push	{r4, lr}
 800ac64:	4604      	mov	r4, r0
 800ac66:	e9c0 3300 	strd	r3, r3, [r0]
 800ac6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ac6e:	6083      	str	r3, [r0, #8]
 800ac70:	8181      	strh	r1, [r0, #12]
 800ac72:	6643      	str	r3, [r0, #100]	; 0x64
 800ac74:	81c2      	strh	r2, [r0, #14]
 800ac76:	6183      	str	r3, [r0, #24]
 800ac78:	4619      	mov	r1, r3
 800ac7a:	2208      	movs	r2, #8
 800ac7c:	305c      	adds	r0, #92	; 0x5c
 800ac7e:	f7fd fa11 	bl	80080a4 <memset>
 800ac82:	4b05      	ldr	r3, [pc, #20]	; (800ac98 <std+0x38>)
 800ac84:	6263      	str	r3, [r4, #36]	; 0x24
 800ac86:	4b05      	ldr	r3, [pc, #20]	; (800ac9c <std+0x3c>)
 800ac88:	62a3      	str	r3, [r4, #40]	; 0x28
 800ac8a:	4b05      	ldr	r3, [pc, #20]	; (800aca0 <std+0x40>)
 800ac8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ac8e:	4b05      	ldr	r3, [pc, #20]	; (800aca4 <std+0x44>)
 800ac90:	6224      	str	r4, [r4, #32]
 800ac92:	6323      	str	r3, [r4, #48]	; 0x30
 800ac94:	bd10      	pop	{r4, pc}
 800ac96:	bf00      	nop
 800ac98:	0800c741 	.word	0x0800c741
 800ac9c:	0800c763 	.word	0x0800c763
 800aca0:	0800c79b 	.word	0x0800c79b
 800aca4:	0800c7bf 	.word	0x0800c7bf

0800aca8 <_cleanup_r>:
 800aca8:	4901      	ldr	r1, [pc, #4]	; (800acb0 <_cleanup_r+0x8>)
 800acaa:	f000 b8af 	b.w	800ae0c <_fwalk_reent>
 800acae:	bf00      	nop
 800acb0:	0800abe9 	.word	0x0800abe9

0800acb4 <__sfmoreglue>:
 800acb4:	b570      	push	{r4, r5, r6, lr}
 800acb6:	2268      	movs	r2, #104	; 0x68
 800acb8:	1e4d      	subs	r5, r1, #1
 800acba:	4355      	muls	r5, r2
 800acbc:	460e      	mov	r6, r1
 800acbe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800acc2:	f001 f9fb 	bl	800c0bc <_malloc_r>
 800acc6:	4604      	mov	r4, r0
 800acc8:	b140      	cbz	r0, 800acdc <__sfmoreglue+0x28>
 800acca:	2100      	movs	r1, #0
 800accc:	e9c0 1600 	strd	r1, r6, [r0]
 800acd0:	300c      	adds	r0, #12
 800acd2:	60a0      	str	r0, [r4, #8]
 800acd4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800acd8:	f7fd f9e4 	bl	80080a4 <memset>
 800acdc:	4620      	mov	r0, r4
 800acde:	bd70      	pop	{r4, r5, r6, pc}

0800ace0 <__sfp_lock_acquire>:
 800ace0:	4801      	ldr	r0, [pc, #4]	; (800ace8 <__sfp_lock_acquire+0x8>)
 800ace2:	f000 bc26 	b.w	800b532 <__retarget_lock_acquire_recursive>
 800ace6:	bf00      	nop
 800ace8:	20000425 	.word	0x20000425

0800acec <__sfp_lock_release>:
 800acec:	4801      	ldr	r0, [pc, #4]	; (800acf4 <__sfp_lock_release+0x8>)
 800acee:	f000 bc21 	b.w	800b534 <__retarget_lock_release_recursive>
 800acf2:	bf00      	nop
 800acf4:	20000425 	.word	0x20000425

0800acf8 <__sinit_lock_acquire>:
 800acf8:	4801      	ldr	r0, [pc, #4]	; (800ad00 <__sinit_lock_acquire+0x8>)
 800acfa:	f000 bc1a 	b.w	800b532 <__retarget_lock_acquire_recursive>
 800acfe:	bf00      	nop
 800ad00:	20000426 	.word	0x20000426

0800ad04 <__sinit_lock_release>:
 800ad04:	4801      	ldr	r0, [pc, #4]	; (800ad0c <__sinit_lock_release+0x8>)
 800ad06:	f000 bc15 	b.w	800b534 <__retarget_lock_release_recursive>
 800ad0a:	bf00      	nop
 800ad0c:	20000426 	.word	0x20000426

0800ad10 <__sinit>:
 800ad10:	b510      	push	{r4, lr}
 800ad12:	4604      	mov	r4, r0
 800ad14:	f7ff fff0 	bl	800acf8 <__sinit_lock_acquire>
 800ad18:	69a3      	ldr	r3, [r4, #24]
 800ad1a:	b11b      	cbz	r3, 800ad24 <__sinit+0x14>
 800ad1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad20:	f7ff bff0 	b.w	800ad04 <__sinit_lock_release>
 800ad24:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ad28:	6523      	str	r3, [r4, #80]	; 0x50
 800ad2a:	4b13      	ldr	r3, [pc, #76]	; (800ad78 <__sinit+0x68>)
 800ad2c:	4a13      	ldr	r2, [pc, #76]	; (800ad7c <__sinit+0x6c>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	62a2      	str	r2, [r4, #40]	; 0x28
 800ad32:	42a3      	cmp	r3, r4
 800ad34:	bf04      	itt	eq
 800ad36:	2301      	moveq	r3, #1
 800ad38:	61a3      	streq	r3, [r4, #24]
 800ad3a:	4620      	mov	r0, r4
 800ad3c:	f000 f820 	bl	800ad80 <__sfp>
 800ad40:	6060      	str	r0, [r4, #4]
 800ad42:	4620      	mov	r0, r4
 800ad44:	f000 f81c 	bl	800ad80 <__sfp>
 800ad48:	60a0      	str	r0, [r4, #8]
 800ad4a:	4620      	mov	r0, r4
 800ad4c:	f000 f818 	bl	800ad80 <__sfp>
 800ad50:	2200      	movs	r2, #0
 800ad52:	60e0      	str	r0, [r4, #12]
 800ad54:	2104      	movs	r1, #4
 800ad56:	6860      	ldr	r0, [r4, #4]
 800ad58:	f7ff ff82 	bl	800ac60 <std>
 800ad5c:	68a0      	ldr	r0, [r4, #8]
 800ad5e:	2201      	movs	r2, #1
 800ad60:	2109      	movs	r1, #9
 800ad62:	f7ff ff7d 	bl	800ac60 <std>
 800ad66:	68e0      	ldr	r0, [r4, #12]
 800ad68:	2202      	movs	r2, #2
 800ad6a:	2112      	movs	r1, #18
 800ad6c:	f7ff ff78 	bl	800ac60 <std>
 800ad70:	2301      	movs	r3, #1
 800ad72:	61a3      	str	r3, [r4, #24]
 800ad74:	e7d2      	b.n	800ad1c <__sinit+0xc>
 800ad76:	bf00      	nop
 800ad78:	0800cbe0 	.word	0x0800cbe0
 800ad7c:	0800aca9 	.word	0x0800aca9

0800ad80 <__sfp>:
 800ad80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad82:	4607      	mov	r7, r0
 800ad84:	f7ff ffac 	bl	800ace0 <__sfp_lock_acquire>
 800ad88:	4b1e      	ldr	r3, [pc, #120]	; (800ae04 <__sfp+0x84>)
 800ad8a:	681e      	ldr	r6, [r3, #0]
 800ad8c:	69b3      	ldr	r3, [r6, #24]
 800ad8e:	b913      	cbnz	r3, 800ad96 <__sfp+0x16>
 800ad90:	4630      	mov	r0, r6
 800ad92:	f7ff ffbd 	bl	800ad10 <__sinit>
 800ad96:	3648      	adds	r6, #72	; 0x48
 800ad98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ad9c:	3b01      	subs	r3, #1
 800ad9e:	d503      	bpl.n	800ada8 <__sfp+0x28>
 800ada0:	6833      	ldr	r3, [r6, #0]
 800ada2:	b30b      	cbz	r3, 800ade8 <__sfp+0x68>
 800ada4:	6836      	ldr	r6, [r6, #0]
 800ada6:	e7f7      	b.n	800ad98 <__sfp+0x18>
 800ada8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800adac:	b9d5      	cbnz	r5, 800ade4 <__sfp+0x64>
 800adae:	4b16      	ldr	r3, [pc, #88]	; (800ae08 <__sfp+0x88>)
 800adb0:	60e3      	str	r3, [r4, #12]
 800adb2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800adb6:	6665      	str	r5, [r4, #100]	; 0x64
 800adb8:	f000 fbba 	bl	800b530 <__retarget_lock_init_recursive>
 800adbc:	f7ff ff96 	bl	800acec <__sfp_lock_release>
 800adc0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800adc4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800adc8:	6025      	str	r5, [r4, #0]
 800adca:	61a5      	str	r5, [r4, #24]
 800adcc:	2208      	movs	r2, #8
 800adce:	4629      	mov	r1, r5
 800add0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800add4:	f7fd f966 	bl	80080a4 <memset>
 800add8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800addc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ade0:	4620      	mov	r0, r4
 800ade2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ade4:	3468      	adds	r4, #104	; 0x68
 800ade6:	e7d9      	b.n	800ad9c <__sfp+0x1c>
 800ade8:	2104      	movs	r1, #4
 800adea:	4638      	mov	r0, r7
 800adec:	f7ff ff62 	bl	800acb4 <__sfmoreglue>
 800adf0:	4604      	mov	r4, r0
 800adf2:	6030      	str	r0, [r6, #0]
 800adf4:	2800      	cmp	r0, #0
 800adf6:	d1d5      	bne.n	800ada4 <__sfp+0x24>
 800adf8:	f7ff ff78 	bl	800acec <__sfp_lock_release>
 800adfc:	230c      	movs	r3, #12
 800adfe:	603b      	str	r3, [r7, #0]
 800ae00:	e7ee      	b.n	800ade0 <__sfp+0x60>
 800ae02:	bf00      	nop
 800ae04:	0800cbe0 	.word	0x0800cbe0
 800ae08:	ffff0001 	.word	0xffff0001

0800ae0c <_fwalk_reent>:
 800ae0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae10:	4606      	mov	r6, r0
 800ae12:	4688      	mov	r8, r1
 800ae14:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ae18:	2700      	movs	r7, #0
 800ae1a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ae1e:	f1b9 0901 	subs.w	r9, r9, #1
 800ae22:	d505      	bpl.n	800ae30 <_fwalk_reent+0x24>
 800ae24:	6824      	ldr	r4, [r4, #0]
 800ae26:	2c00      	cmp	r4, #0
 800ae28:	d1f7      	bne.n	800ae1a <_fwalk_reent+0xe>
 800ae2a:	4638      	mov	r0, r7
 800ae2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae30:	89ab      	ldrh	r3, [r5, #12]
 800ae32:	2b01      	cmp	r3, #1
 800ae34:	d907      	bls.n	800ae46 <_fwalk_reent+0x3a>
 800ae36:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ae3a:	3301      	adds	r3, #1
 800ae3c:	d003      	beq.n	800ae46 <_fwalk_reent+0x3a>
 800ae3e:	4629      	mov	r1, r5
 800ae40:	4630      	mov	r0, r6
 800ae42:	47c0      	blx	r8
 800ae44:	4307      	orrs	r7, r0
 800ae46:	3568      	adds	r5, #104	; 0x68
 800ae48:	e7e9      	b.n	800ae1e <_fwalk_reent+0x12>

0800ae4a <rshift>:
 800ae4a:	6903      	ldr	r3, [r0, #16]
 800ae4c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ae50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ae54:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ae58:	f100 0414 	add.w	r4, r0, #20
 800ae5c:	dd45      	ble.n	800aeea <rshift+0xa0>
 800ae5e:	f011 011f 	ands.w	r1, r1, #31
 800ae62:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ae66:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ae6a:	d10c      	bne.n	800ae86 <rshift+0x3c>
 800ae6c:	f100 0710 	add.w	r7, r0, #16
 800ae70:	4629      	mov	r1, r5
 800ae72:	42b1      	cmp	r1, r6
 800ae74:	d334      	bcc.n	800aee0 <rshift+0x96>
 800ae76:	1a9b      	subs	r3, r3, r2
 800ae78:	009b      	lsls	r3, r3, #2
 800ae7a:	1eea      	subs	r2, r5, #3
 800ae7c:	4296      	cmp	r6, r2
 800ae7e:	bf38      	it	cc
 800ae80:	2300      	movcc	r3, #0
 800ae82:	4423      	add	r3, r4
 800ae84:	e015      	b.n	800aeb2 <rshift+0x68>
 800ae86:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ae8a:	f1c1 0820 	rsb	r8, r1, #32
 800ae8e:	40cf      	lsrs	r7, r1
 800ae90:	f105 0e04 	add.w	lr, r5, #4
 800ae94:	46a1      	mov	r9, r4
 800ae96:	4576      	cmp	r6, lr
 800ae98:	46f4      	mov	ip, lr
 800ae9a:	d815      	bhi.n	800aec8 <rshift+0x7e>
 800ae9c:	1a9a      	subs	r2, r3, r2
 800ae9e:	0092      	lsls	r2, r2, #2
 800aea0:	3a04      	subs	r2, #4
 800aea2:	3501      	adds	r5, #1
 800aea4:	42ae      	cmp	r6, r5
 800aea6:	bf38      	it	cc
 800aea8:	2200      	movcc	r2, #0
 800aeaa:	18a3      	adds	r3, r4, r2
 800aeac:	50a7      	str	r7, [r4, r2]
 800aeae:	b107      	cbz	r7, 800aeb2 <rshift+0x68>
 800aeb0:	3304      	adds	r3, #4
 800aeb2:	1b1a      	subs	r2, r3, r4
 800aeb4:	42a3      	cmp	r3, r4
 800aeb6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800aeba:	bf08      	it	eq
 800aebc:	2300      	moveq	r3, #0
 800aebe:	6102      	str	r2, [r0, #16]
 800aec0:	bf08      	it	eq
 800aec2:	6143      	streq	r3, [r0, #20]
 800aec4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aec8:	f8dc c000 	ldr.w	ip, [ip]
 800aecc:	fa0c fc08 	lsl.w	ip, ip, r8
 800aed0:	ea4c 0707 	orr.w	r7, ip, r7
 800aed4:	f849 7b04 	str.w	r7, [r9], #4
 800aed8:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aedc:	40cf      	lsrs	r7, r1
 800aede:	e7da      	b.n	800ae96 <rshift+0x4c>
 800aee0:	f851 cb04 	ldr.w	ip, [r1], #4
 800aee4:	f847 cf04 	str.w	ip, [r7, #4]!
 800aee8:	e7c3      	b.n	800ae72 <rshift+0x28>
 800aeea:	4623      	mov	r3, r4
 800aeec:	e7e1      	b.n	800aeb2 <rshift+0x68>

0800aeee <__hexdig_fun>:
 800aeee:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800aef2:	2b09      	cmp	r3, #9
 800aef4:	d802      	bhi.n	800aefc <__hexdig_fun+0xe>
 800aef6:	3820      	subs	r0, #32
 800aef8:	b2c0      	uxtb	r0, r0
 800aefa:	4770      	bx	lr
 800aefc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800af00:	2b05      	cmp	r3, #5
 800af02:	d801      	bhi.n	800af08 <__hexdig_fun+0x1a>
 800af04:	3847      	subs	r0, #71	; 0x47
 800af06:	e7f7      	b.n	800aef8 <__hexdig_fun+0xa>
 800af08:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800af0c:	2b05      	cmp	r3, #5
 800af0e:	d801      	bhi.n	800af14 <__hexdig_fun+0x26>
 800af10:	3827      	subs	r0, #39	; 0x27
 800af12:	e7f1      	b.n	800aef8 <__hexdig_fun+0xa>
 800af14:	2000      	movs	r0, #0
 800af16:	4770      	bx	lr

0800af18 <__gethex>:
 800af18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af1c:	ed2d 8b02 	vpush	{d8}
 800af20:	b089      	sub	sp, #36	; 0x24
 800af22:	ee08 0a10 	vmov	s16, r0
 800af26:	9304      	str	r3, [sp, #16]
 800af28:	4bb4      	ldr	r3, [pc, #720]	; (800b1fc <__gethex+0x2e4>)
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	9301      	str	r3, [sp, #4]
 800af2e:	4618      	mov	r0, r3
 800af30:	468b      	mov	fp, r1
 800af32:	4690      	mov	r8, r2
 800af34:	f7f5 f94c 	bl	80001d0 <strlen>
 800af38:	9b01      	ldr	r3, [sp, #4]
 800af3a:	f8db 2000 	ldr.w	r2, [fp]
 800af3e:	4403      	add	r3, r0
 800af40:	4682      	mov	sl, r0
 800af42:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800af46:	9305      	str	r3, [sp, #20]
 800af48:	1c93      	adds	r3, r2, #2
 800af4a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800af4e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800af52:	32fe      	adds	r2, #254	; 0xfe
 800af54:	18d1      	adds	r1, r2, r3
 800af56:	461f      	mov	r7, r3
 800af58:	f813 0b01 	ldrb.w	r0, [r3], #1
 800af5c:	9100      	str	r1, [sp, #0]
 800af5e:	2830      	cmp	r0, #48	; 0x30
 800af60:	d0f8      	beq.n	800af54 <__gethex+0x3c>
 800af62:	f7ff ffc4 	bl	800aeee <__hexdig_fun>
 800af66:	4604      	mov	r4, r0
 800af68:	2800      	cmp	r0, #0
 800af6a:	d13a      	bne.n	800afe2 <__gethex+0xca>
 800af6c:	9901      	ldr	r1, [sp, #4]
 800af6e:	4652      	mov	r2, sl
 800af70:	4638      	mov	r0, r7
 800af72:	f001 fc28 	bl	800c7c6 <strncmp>
 800af76:	4605      	mov	r5, r0
 800af78:	2800      	cmp	r0, #0
 800af7a:	d168      	bne.n	800b04e <__gethex+0x136>
 800af7c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800af80:	eb07 060a 	add.w	r6, r7, sl
 800af84:	f7ff ffb3 	bl	800aeee <__hexdig_fun>
 800af88:	2800      	cmp	r0, #0
 800af8a:	d062      	beq.n	800b052 <__gethex+0x13a>
 800af8c:	4633      	mov	r3, r6
 800af8e:	7818      	ldrb	r0, [r3, #0]
 800af90:	2830      	cmp	r0, #48	; 0x30
 800af92:	461f      	mov	r7, r3
 800af94:	f103 0301 	add.w	r3, r3, #1
 800af98:	d0f9      	beq.n	800af8e <__gethex+0x76>
 800af9a:	f7ff ffa8 	bl	800aeee <__hexdig_fun>
 800af9e:	2301      	movs	r3, #1
 800afa0:	fab0 f480 	clz	r4, r0
 800afa4:	0964      	lsrs	r4, r4, #5
 800afa6:	4635      	mov	r5, r6
 800afa8:	9300      	str	r3, [sp, #0]
 800afaa:	463a      	mov	r2, r7
 800afac:	4616      	mov	r6, r2
 800afae:	3201      	adds	r2, #1
 800afb0:	7830      	ldrb	r0, [r6, #0]
 800afb2:	f7ff ff9c 	bl	800aeee <__hexdig_fun>
 800afb6:	2800      	cmp	r0, #0
 800afb8:	d1f8      	bne.n	800afac <__gethex+0x94>
 800afba:	9901      	ldr	r1, [sp, #4]
 800afbc:	4652      	mov	r2, sl
 800afbe:	4630      	mov	r0, r6
 800afc0:	f001 fc01 	bl	800c7c6 <strncmp>
 800afc4:	b980      	cbnz	r0, 800afe8 <__gethex+0xd0>
 800afc6:	b94d      	cbnz	r5, 800afdc <__gethex+0xc4>
 800afc8:	eb06 050a 	add.w	r5, r6, sl
 800afcc:	462a      	mov	r2, r5
 800afce:	4616      	mov	r6, r2
 800afd0:	3201      	adds	r2, #1
 800afd2:	7830      	ldrb	r0, [r6, #0]
 800afd4:	f7ff ff8b 	bl	800aeee <__hexdig_fun>
 800afd8:	2800      	cmp	r0, #0
 800afda:	d1f8      	bne.n	800afce <__gethex+0xb6>
 800afdc:	1bad      	subs	r5, r5, r6
 800afde:	00ad      	lsls	r5, r5, #2
 800afe0:	e004      	b.n	800afec <__gethex+0xd4>
 800afe2:	2400      	movs	r4, #0
 800afe4:	4625      	mov	r5, r4
 800afe6:	e7e0      	b.n	800afaa <__gethex+0x92>
 800afe8:	2d00      	cmp	r5, #0
 800afea:	d1f7      	bne.n	800afdc <__gethex+0xc4>
 800afec:	7833      	ldrb	r3, [r6, #0]
 800afee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800aff2:	2b50      	cmp	r3, #80	; 0x50
 800aff4:	d13b      	bne.n	800b06e <__gethex+0x156>
 800aff6:	7873      	ldrb	r3, [r6, #1]
 800aff8:	2b2b      	cmp	r3, #43	; 0x2b
 800affa:	d02c      	beq.n	800b056 <__gethex+0x13e>
 800affc:	2b2d      	cmp	r3, #45	; 0x2d
 800affe:	d02e      	beq.n	800b05e <__gethex+0x146>
 800b000:	1c71      	adds	r1, r6, #1
 800b002:	f04f 0900 	mov.w	r9, #0
 800b006:	7808      	ldrb	r0, [r1, #0]
 800b008:	f7ff ff71 	bl	800aeee <__hexdig_fun>
 800b00c:	1e43      	subs	r3, r0, #1
 800b00e:	b2db      	uxtb	r3, r3
 800b010:	2b18      	cmp	r3, #24
 800b012:	d82c      	bhi.n	800b06e <__gethex+0x156>
 800b014:	f1a0 0210 	sub.w	r2, r0, #16
 800b018:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b01c:	f7ff ff67 	bl	800aeee <__hexdig_fun>
 800b020:	1e43      	subs	r3, r0, #1
 800b022:	b2db      	uxtb	r3, r3
 800b024:	2b18      	cmp	r3, #24
 800b026:	d91d      	bls.n	800b064 <__gethex+0x14c>
 800b028:	f1b9 0f00 	cmp.w	r9, #0
 800b02c:	d000      	beq.n	800b030 <__gethex+0x118>
 800b02e:	4252      	negs	r2, r2
 800b030:	4415      	add	r5, r2
 800b032:	f8cb 1000 	str.w	r1, [fp]
 800b036:	b1e4      	cbz	r4, 800b072 <__gethex+0x15a>
 800b038:	9b00      	ldr	r3, [sp, #0]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	bf14      	ite	ne
 800b03e:	2700      	movne	r7, #0
 800b040:	2706      	moveq	r7, #6
 800b042:	4638      	mov	r0, r7
 800b044:	b009      	add	sp, #36	; 0x24
 800b046:	ecbd 8b02 	vpop	{d8}
 800b04a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b04e:	463e      	mov	r6, r7
 800b050:	4625      	mov	r5, r4
 800b052:	2401      	movs	r4, #1
 800b054:	e7ca      	b.n	800afec <__gethex+0xd4>
 800b056:	f04f 0900 	mov.w	r9, #0
 800b05a:	1cb1      	adds	r1, r6, #2
 800b05c:	e7d3      	b.n	800b006 <__gethex+0xee>
 800b05e:	f04f 0901 	mov.w	r9, #1
 800b062:	e7fa      	b.n	800b05a <__gethex+0x142>
 800b064:	230a      	movs	r3, #10
 800b066:	fb03 0202 	mla	r2, r3, r2, r0
 800b06a:	3a10      	subs	r2, #16
 800b06c:	e7d4      	b.n	800b018 <__gethex+0x100>
 800b06e:	4631      	mov	r1, r6
 800b070:	e7df      	b.n	800b032 <__gethex+0x11a>
 800b072:	1bf3      	subs	r3, r6, r7
 800b074:	3b01      	subs	r3, #1
 800b076:	4621      	mov	r1, r4
 800b078:	2b07      	cmp	r3, #7
 800b07a:	dc0b      	bgt.n	800b094 <__gethex+0x17c>
 800b07c:	ee18 0a10 	vmov	r0, s16
 800b080:	f000 fad8 	bl	800b634 <_Balloc>
 800b084:	4604      	mov	r4, r0
 800b086:	b940      	cbnz	r0, 800b09a <__gethex+0x182>
 800b088:	4b5d      	ldr	r3, [pc, #372]	; (800b200 <__gethex+0x2e8>)
 800b08a:	4602      	mov	r2, r0
 800b08c:	21de      	movs	r1, #222	; 0xde
 800b08e:	485d      	ldr	r0, [pc, #372]	; (800b204 <__gethex+0x2ec>)
 800b090:	f001 fbcc 	bl	800c82c <__assert_func>
 800b094:	3101      	adds	r1, #1
 800b096:	105b      	asrs	r3, r3, #1
 800b098:	e7ee      	b.n	800b078 <__gethex+0x160>
 800b09a:	f100 0914 	add.w	r9, r0, #20
 800b09e:	f04f 0b00 	mov.w	fp, #0
 800b0a2:	f1ca 0301 	rsb	r3, sl, #1
 800b0a6:	f8cd 9008 	str.w	r9, [sp, #8]
 800b0aa:	f8cd b000 	str.w	fp, [sp]
 800b0ae:	9306      	str	r3, [sp, #24]
 800b0b0:	42b7      	cmp	r7, r6
 800b0b2:	d340      	bcc.n	800b136 <__gethex+0x21e>
 800b0b4:	9802      	ldr	r0, [sp, #8]
 800b0b6:	9b00      	ldr	r3, [sp, #0]
 800b0b8:	f840 3b04 	str.w	r3, [r0], #4
 800b0bc:	eba0 0009 	sub.w	r0, r0, r9
 800b0c0:	1080      	asrs	r0, r0, #2
 800b0c2:	0146      	lsls	r6, r0, #5
 800b0c4:	6120      	str	r0, [r4, #16]
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	f000 fba6 	bl	800b818 <__hi0bits>
 800b0cc:	1a30      	subs	r0, r6, r0
 800b0ce:	f8d8 6000 	ldr.w	r6, [r8]
 800b0d2:	42b0      	cmp	r0, r6
 800b0d4:	dd63      	ble.n	800b19e <__gethex+0x286>
 800b0d6:	1b87      	subs	r7, r0, r6
 800b0d8:	4639      	mov	r1, r7
 800b0da:	4620      	mov	r0, r4
 800b0dc:	f000 ff4a 	bl	800bf74 <__any_on>
 800b0e0:	4682      	mov	sl, r0
 800b0e2:	b1a8      	cbz	r0, 800b110 <__gethex+0x1f8>
 800b0e4:	1e7b      	subs	r3, r7, #1
 800b0e6:	1159      	asrs	r1, r3, #5
 800b0e8:	f003 021f 	and.w	r2, r3, #31
 800b0ec:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b0f0:	f04f 0a01 	mov.w	sl, #1
 800b0f4:	fa0a f202 	lsl.w	r2, sl, r2
 800b0f8:	420a      	tst	r2, r1
 800b0fa:	d009      	beq.n	800b110 <__gethex+0x1f8>
 800b0fc:	4553      	cmp	r3, sl
 800b0fe:	dd05      	ble.n	800b10c <__gethex+0x1f4>
 800b100:	1eb9      	subs	r1, r7, #2
 800b102:	4620      	mov	r0, r4
 800b104:	f000 ff36 	bl	800bf74 <__any_on>
 800b108:	2800      	cmp	r0, #0
 800b10a:	d145      	bne.n	800b198 <__gethex+0x280>
 800b10c:	f04f 0a02 	mov.w	sl, #2
 800b110:	4639      	mov	r1, r7
 800b112:	4620      	mov	r0, r4
 800b114:	f7ff fe99 	bl	800ae4a <rshift>
 800b118:	443d      	add	r5, r7
 800b11a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b11e:	42ab      	cmp	r3, r5
 800b120:	da4c      	bge.n	800b1bc <__gethex+0x2a4>
 800b122:	ee18 0a10 	vmov	r0, s16
 800b126:	4621      	mov	r1, r4
 800b128:	f000 fac4 	bl	800b6b4 <_Bfree>
 800b12c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b12e:	2300      	movs	r3, #0
 800b130:	6013      	str	r3, [r2, #0]
 800b132:	27a3      	movs	r7, #163	; 0xa3
 800b134:	e785      	b.n	800b042 <__gethex+0x12a>
 800b136:	1e73      	subs	r3, r6, #1
 800b138:	9a05      	ldr	r2, [sp, #20]
 800b13a:	9303      	str	r3, [sp, #12]
 800b13c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b140:	4293      	cmp	r3, r2
 800b142:	d019      	beq.n	800b178 <__gethex+0x260>
 800b144:	f1bb 0f20 	cmp.w	fp, #32
 800b148:	d107      	bne.n	800b15a <__gethex+0x242>
 800b14a:	9b02      	ldr	r3, [sp, #8]
 800b14c:	9a00      	ldr	r2, [sp, #0]
 800b14e:	f843 2b04 	str.w	r2, [r3], #4
 800b152:	9302      	str	r3, [sp, #8]
 800b154:	2300      	movs	r3, #0
 800b156:	9300      	str	r3, [sp, #0]
 800b158:	469b      	mov	fp, r3
 800b15a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b15e:	f7ff fec6 	bl	800aeee <__hexdig_fun>
 800b162:	9b00      	ldr	r3, [sp, #0]
 800b164:	f000 000f 	and.w	r0, r0, #15
 800b168:	fa00 f00b 	lsl.w	r0, r0, fp
 800b16c:	4303      	orrs	r3, r0
 800b16e:	9300      	str	r3, [sp, #0]
 800b170:	f10b 0b04 	add.w	fp, fp, #4
 800b174:	9b03      	ldr	r3, [sp, #12]
 800b176:	e00d      	b.n	800b194 <__gethex+0x27c>
 800b178:	9b03      	ldr	r3, [sp, #12]
 800b17a:	9a06      	ldr	r2, [sp, #24]
 800b17c:	4413      	add	r3, r2
 800b17e:	42bb      	cmp	r3, r7
 800b180:	d3e0      	bcc.n	800b144 <__gethex+0x22c>
 800b182:	4618      	mov	r0, r3
 800b184:	9901      	ldr	r1, [sp, #4]
 800b186:	9307      	str	r3, [sp, #28]
 800b188:	4652      	mov	r2, sl
 800b18a:	f001 fb1c 	bl	800c7c6 <strncmp>
 800b18e:	9b07      	ldr	r3, [sp, #28]
 800b190:	2800      	cmp	r0, #0
 800b192:	d1d7      	bne.n	800b144 <__gethex+0x22c>
 800b194:	461e      	mov	r6, r3
 800b196:	e78b      	b.n	800b0b0 <__gethex+0x198>
 800b198:	f04f 0a03 	mov.w	sl, #3
 800b19c:	e7b8      	b.n	800b110 <__gethex+0x1f8>
 800b19e:	da0a      	bge.n	800b1b6 <__gethex+0x29e>
 800b1a0:	1a37      	subs	r7, r6, r0
 800b1a2:	4621      	mov	r1, r4
 800b1a4:	ee18 0a10 	vmov	r0, s16
 800b1a8:	463a      	mov	r2, r7
 800b1aa:	f000 fc9f 	bl	800baec <__lshift>
 800b1ae:	1bed      	subs	r5, r5, r7
 800b1b0:	4604      	mov	r4, r0
 800b1b2:	f100 0914 	add.w	r9, r0, #20
 800b1b6:	f04f 0a00 	mov.w	sl, #0
 800b1ba:	e7ae      	b.n	800b11a <__gethex+0x202>
 800b1bc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b1c0:	42a8      	cmp	r0, r5
 800b1c2:	dd72      	ble.n	800b2aa <__gethex+0x392>
 800b1c4:	1b45      	subs	r5, r0, r5
 800b1c6:	42ae      	cmp	r6, r5
 800b1c8:	dc36      	bgt.n	800b238 <__gethex+0x320>
 800b1ca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b1ce:	2b02      	cmp	r3, #2
 800b1d0:	d02a      	beq.n	800b228 <__gethex+0x310>
 800b1d2:	2b03      	cmp	r3, #3
 800b1d4:	d02c      	beq.n	800b230 <__gethex+0x318>
 800b1d6:	2b01      	cmp	r3, #1
 800b1d8:	d11c      	bne.n	800b214 <__gethex+0x2fc>
 800b1da:	42ae      	cmp	r6, r5
 800b1dc:	d11a      	bne.n	800b214 <__gethex+0x2fc>
 800b1de:	2e01      	cmp	r6, #1
 800b1e0:	d112      	bne.n	800b208 <__gethex+0x2f0>
 800b1e2:	9a04      	ldr	r2, [sp, #16]
 800b1e4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b1e8:	6013      	str	r3, [r2, #0]
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	6123      	str	r3, [r4, #16]
 800b1ee:	f8c9 3000 	str.w	r3, [r9]
 800b1f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b1f4:	2762      	movs	r7, #98	; 0x62
 800b1f6:	601c      	str	r4, [r3, #0]
 800b1f8:	e723      	b.n	800b042 <__gethex+0x12a>
 800b1fa:	bf00      	nop
 800b1fc:	0800cecc 	.word	0x0800cecc
 800b200:	0800cdf0 	.word	0x0800cdf0
 800b204:	0800ce64 	.word	0x0800ce64
 800b208:	1e71      	subs	r1, r6, #1
 800b20a:	4620      	mov	r0, r4
 800b20c:	f000 feb2 	bl	800bf74 <__any_on>
 800b210:	2800      	cmp	r0, #0
 800b212:	d1e6      	bne.n	800b1e2 <__gethex+0x2ca>
 800b214:	ee18 0a10 	vmov	r0, s16
 800b218:	4621      	mov	r1, r4
 800b21a:	f000 fa4b 	bl	800b6b4 <_Bfree>
 800b21e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b220:	2300      	movs	r3, #0
 800b222:	6013      	str	r3, [r2, #0]
 800b224:	2750      	movs	r7, #80	; 0x50
 800b226:	e70c      	b.n	800b042 <__gethex+0x12a>
 800b228:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d1f2      	bne.n	800b214 <__gethex+0x2fc>
 800b22e:	e7d8      	b.n	800b1e2 <__gethex+0x2ca>
 800b230:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b232:	2b00      	cmp	r3, #0
 800b234:	d1d5      	bne.n	800b1e2 <__gethex+0x2ca>
 800b236:	e7ed      	b.n	800b214 <__gethex+0x2fc>
 800b238:	1e6f      	subs	r7, r5, #1
 800b23a:	f1ba 0f00 	cmp.w	sl, #0
 800b23e:	d131      	bne.n	800b2a4 <__gethex+0x38c>
 800b240:	b127      	cbz	r7, 800b24c <__gethex+0x334>
 800b242:	4639      	mov	r1, r7
 800b244:	4620      	mov	r0, r4
 800b246:	f000 fe95 	bl	800bf74 <__any_on>
 800b24a:	4682      	mov	sl, r0
 800b24c:	117b      	asrs	r3, r7, #5
 800b24e:	2101      	movs	r1, #1
 800b250:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b254:	f007 071f 	and.w	r7, r7, #31
 800b258:	fa01 f707 	lsl.w	r7, r1, r7
 800b25c:	421f      	tst	r7, r3
 800b25e:	4629      	mov	r1, r5
 800b260:	4620      	mov	r0, r4
 800b262:	bf18      	it	ne
 800b264:	f04a 0a02 	orrne.w	sl, sl, #2
 800b268:	1b76      	subs	r6, r6, r5
 800b26a:	f7ff fdee 	bl	800ae4a <rshift>
 800b26e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b272:	2702      	movs	r7, #2
 800b274:	f1ba 0f00 	cmp.w	sl, #0
 800b278:	d048      	beq.n	800b30c <__gethex+0x3f4>
 800b27a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b27e:	2b02      	cmp	r3, #2
 800b280:	d015      	beq.n	800b2ae <__gethex+0x396>
 800b282:	2b03      	cmp	r3, #3
 800b284:	d017      	beq.n	800b2b6 <__gethex+0x39e>
 800b286:	2b01      	cmp	r3, #1
 800b288:	d109      	bne.n	800b29e <__gethex+0x386>
 800b28a:	f01a 0f02 	tst.w	sl, #2
 800b28e:	d006      	beq.n	800b29e <__gethex+0x386>
 800b290:	f8d9 0000 	ldr.w	r0, [r9]
 800b294:	ea4a 0a00 	orr.w	sl, sl, r0
 800b298:	f01a 0f01 	tst.w	sl, #1
 800b29c:	d10e      	bne.n	800b2bc <__gethex+0x3a4>
 800b29e:	f047 0710 	orr.w	r7, r7, #16
 800b2a2:	e033      	b.n	800b30c <__gethex+0x3f4>
 800b2a4:	f04f 0a01 	mov.w	sl, #1
 800b2a8:	e7d0      	b.n	800b24c <__gethex+0x334>
 800b2aa:	2701      	movs	r7, #1
 800b2ac:	e7e2      	b.n	800b274 <__gethex+0x35c>
 800b2ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b2b0:	f1c3 0301 	rsb	r3, r3, #1
 800b2b4:	9315      	str	r3, [sp, #84]	; 0x54
 800b2b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d0f0      	beq.n	800b29e <__gethex+0x386>
 800b2bc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b2c0:	f104 0314 	add.w	r3, r4, #20
 800b2c4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b2c8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b2cc:	f04f 0c00 	mov.w	ip, #0
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2d6:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b2da:	d01c      	beq.n	800b316 <__gethex+0x3fe>
 800b2dc:	3201      	adds	r2, #1
 800b2de:	6002      	str	r2, [r0, #0]
 800b2e0:	2f02      	cmp	r7, #2
 800b2e2:	f104 0314 	add.w	r3, r4, #20
 800b2e6:	d13f      	bne.n	800b368 <__gethex+0x450>
 800b2e8:	f8d8 2000 	ldr.w	r2, [r8]
 800b2ec:	3a01      	subs	r2, #1
 800b2ee:	42b2      	cmp	r2, r6
 800b2f0:	d10a      	bne.n	800b308 <__gethex+0x3f0>
 800b2f2:	1171      	asrs	r1, r6, #5
 800b2f4:	2201      	movs	r2, #1
 800b2f6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b2fa:	f006 061f 	and.w	r6, r6, #31
 800b2fe:	fa02 f606 	lsl.w	r6, r2, r6
 800b302:	421e      	tst	r6, r3
 800b304:	bf18      	it	ne
 800b306:	4617      	movne	r7, r2
 800b308:	f047 0720 	orr.w	r7, r7, #32
 800b30c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b30e:	601c      	str	r4, [r3, #0]
 800b310:	9b04      	ldr	r3, [sp, #16]
 800b312:	601d      	str	r5, [r3, #0]
 800b314:	e695      	b.n	800b042 <__gethex+0x12a>
 800b316:	4299      	cmp	r1, r3
 800b318:	f843 cc04 	str.w	ip, [r3, #-4]
 800b31c:	d8d8      	bhi.n	800b2d0 <__gethex+0x3b8>
 800b31e:	68a3      	ldr	r3, [r4, #8]
 800b320:	459b      	cmp	fp, r3
 800b322:	db19      	blt.n	800b358 <__gethex+0x440>
 800b324:	6861      	ldr	r1, [r4, #4]
 800b326:	ee18 0a10 	vmov	r0, s16
 800b32a:	3101      	adds	r1, #1
 800b32c:	f000 f982 	bl	800b634 <_Balloc>
 800b330:	4681      	mov	r9, r0
 800b332:	b918      	cbnz	r0, 800b33c <__gethex+0x424>
 800b334:	4b1a      	ldr	r3, [pc, #104]	; (800b3a0 <__gethex+0x488>)
 800b336:	4602      	mov	r2, r0
 800b338:	2184      	movs	r1, #132	; 0x84
 800b33a:	e6a8      	b.n	800b08e <__gethex+0x176>
 800b33c:	6922      	ldr	r2, [r4, #16]
 800b33e:	3202      	adds	r2, #2
 800b340:	f104 010c 	add.w	r1, r4, #12
 800b344:	0092      	lsls	r2, r2, #2
 800b346:	300c      	adds	r0, #12
 800b348:	f7fc fe9e 	bl	8008088 <memcpy>
 800b34c:	4621      	mov	r1, r4
 800b34e:	ee18 0a10 	vmov	r0, s16
 800b352:	f000 f9af 	bl	800b6b4 <_Bfree>
 800b356:	464c      	mov	r4, r9
 800b358:	6923      	ldr	r3, [r4, #16]
 800b35a:	1c5a      	adds	r2, r3, #1
 800b35c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b360:	6122      	str	r2, [r4, #16]
 800b362:	2201      	movs	r2, #1
 800b364:	615a      	str	r2, [r3, #20]
 800b366:	e7bb      	b.n	800b2e0 <__gethex+0x3c8>
 800b368:	6922      	ldr	r2, [r4, #16]
 800b36a:	455a      	cmp	r2, fp
 800b36c:	dd0b      	ble.n	800b386 <__gethex+0x46e>
 800b36e:	2101      	movs	r1, #1
 800b370:	4620      	mov	r0, r4
 800b372:	f7ff fd6a 	bl	800ae4a <rshift>
 800b376:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b37a:	3501      	adds	r5, #1
 800b37c:	42ab      	cmp	r3, r5
 800b37e:	f6ff aed0 	blt.w	800b122 <__gethex+0x20a>
 800b382:	2701      	movs	r7, #1
 800b384:	e7c0      	b.n	800b308 <__gethex+0x3f0>
 800b386:	f016 061f 	ands.w	r6, r6, #31
 800b38a:	d0fa      	beq.n	800b382 <__gethex+0x46a>
 800b38c:	4453      	add	r3, sl
 800b38e:	f1c6 0620 	rsb	r6, r6, #32
 800b392:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b396:	f000 fa3f 	bl	800b818 <__hi0bits>
 800b39a:	42b0      	cmp	r0, r6
 800b39c:	dbe7      	blt.n	800b36e <__gethex+0x456>
 800b39e:	e7f0      	b.n	800b382 <__gethex+0x46a>
 800b3a0:	0800cdf0 	.word	0x0800cdf0

0800b3a4 <L_shift>:
 800b3a4:	f1c2 0208 	rsb	r2, r2, #8
 800b3a8:	0092      	lsls	r2, r2, #2
 800b3aa:	b570      	push	{r4, r5, r6, lr}
 800b3ac:	f1c2 0620 	rsb	r6, r2, #32
 800b3b0:	6843      	ldr	r3, [r0, #4]
 800b3b2:	6804      	ldr	r4, [r0, #0]
 800b3b4:	fa03 f506 	lsl.w	r5, r3, r6
 800b3b8:	432c      	orrs	r4, r5
 800b3ba:	40d3      	lsrs	r3, r2
 800b3bc:	6004      	str	r4, [r0, #0]
 800b3be:	f840 3f04 	str.w	r3, [r0, #4]!
 800b3c2:	4288      	cmp	r0, r1
 800b3c4:	d3f4      	bcc.n	800b3b0 <L_shift+0xc>
 800b3c6:	bd70      	pop	{r4, r5, r6, pc}

0800b3c8 <__match>:
 800b3c8:	b530      	push	{r4, r5, lr}
 800b3ca:	6803      	ldr	r3, [r0, #0]
 800b3cc:	3301      	adds	r3, #1
 800b3ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3d2:	b914      	cbnz	r4, 800b3da <__match+0x12>
 800b3d4:	6003      	str	r3, [r0, #0]
 800b3d6:	2001      	movs	r0, #1
 800b3d8:	bd30      	pop	{r4, r5, pc}
 800b3da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3de:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b3e2:	2d19      	cmp	r5, #25
 800b3e4:	bf98      	it	ls
 800b3e6:	3220      	addls	r2, #32
 800b3e8:	42a2      	cmp	r2, r4
 800b3ea:	d0f0      	beq.n	800b3ce <__match+0x6>
 800b3ec:	2000      	movs	r0, #0
 800b3ee:	e7f3      	b.n	800b3d8 <__match+0x10>

0800b3f0 <__hexnan>:
 800b3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3f4:	680b      	ldr	r3, [r1, #0]
 800b3f6:	115e      	asrs	r6, r3, #5
 800b3f8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b3fc:	f013 031f 	ands.w	r3, r3, #31
 800b400:	b087      	sub	sp, #28
 800b402:	bf18      	it	ne
 800b404:	3604      	addne	r6, #4
 800b406:	2500      	movs	r5, #0
 800b408:	1f37      	subs	r7, r6, #4
 800b40a:	4690      	mov	r8, r2
 800b40c:	6802      	ldr	r2, [r0, #0]
 800b40e:	9301      	str	r3, [sp, #4]
 800b410:	4682      	mov	sl, r0
 800b412:	f846 5c04 	str.w	r5, [r6, #-4]
 800b416:	46b9      	mov	r9, r7
 800b418:	463c      	mov	r4, r7
 800b41a:	9502      	str	r5, [sp, #8]
 800b41c:	46ab      	mov	fp, r5
 800b41e:	7851      	ldrb	r1, [r2, #1]
 800b420:	1c53      	adds	r3, r2, #1
 800b422:	9303      	str	r3, [sp, #12]
 800b424:	b341      	cbz	r1, 800b478 <__hexnan+0x88>
 800b426:	4608      	mov	r0, r1
 800b428:	9205      	str	r2, [sp, #20]
 800b42a:	9104      	str	r1, [sp, #16]
 800b42c:	f7ff fd5f 	bl	800aeee <__hexdig_fun>
 800b430:	2800      	cmp	r0, #0
 800b432:	d14f      	bne.n	800b4d4 <__hexnan+0xe4>
 800b434:	9904      	ldr	r1, [sp, #16]
 800b436:	9a05      	ldr	r2, [sp, #20]
 800b438:	2920      	cmp	r1, #32
 800b43a:	d818      	bhi.n	800b46e <__hexnan+0x7e>
 800b43c:	9b02      	ldr	r3, [sp, #8]
 800b43e:	459b      	cmp	fp, r3
 800b440:	dd13      	ble.n	800b46a <__hexnan+0x7a>
 800b442:	454c      	cmp	r4, r9
 800b444:	d206      	bcs.n	800b454 <__hexnan+0x64>
 800b446:	2d07      	cmp	r5, #7
 800b448:	dc04      	bgt.n	800b454 <__hexnan+0x64>
 800b44a:	462a      	mov	r2, r5
 800b44c:	4649      	mov	r1, r9
 800b44e:	4620      	mov	r0, r4
 800b450:	f7ff ffa8 	bl	800b3a4 <L_shift>
 800b454:	4544      	cmp	r4, r8
 800b456:	d950      	bls.n	800b4fa <__hexnan+0x10a>
 800b458:	2300      	movs	r3, #0
 800b45a:	f1a4 0904 	sub.w	r9, r4, #4
 800b45e:	f844 3c04 	str.w	r3, [r4, #-4]
 800b462:	f8cd b008 	str.w	fp, [sp, #8]
 800b466:	464c      	mov	r4, r9
 800b468:	461d      	mov	r5, r3
 800b46a:	9a03      	ldr	r2, [sp, #12]
 800b46c:	e7d7      	b.n	800b41e <__hexnan+0x2e>
 800b46e:	2929      	cmp	r1, #41	; 0x29
 800b470:	d156      	bne.n	800b520 <__hexnan+0x130>
 800b472:	3202      	adds	r2, #2
 800b474:	f8ca 2000 	str.w	r2, [sl]
 800b478:	f1bb 0f00 	cmp.w	fp, #0
 800b47c:	d050      	beq.n	800b520 <__hexnan+0x130>
 800b47e:	454c      	cmp	r4, r9
 800b480:	d206      	bcs.n	800b490 <__hexnan+0xa0>
 800b482:	2d07      	cmp	r5, #7
 800b484:	dc04      	bgt.n	800b490 <__hexnan+0xa0>
 800b486:	462a      	mov	r2, r5
 800b488:	4649      	mov	r1, r9
 800b48a:	4620      	mov	r0, r4
 800b48c:	f7ff ff8a 	bl	800b3a4 <L_shift>
 800b490:	4544      	cmp	r4, r8
 800b492:	d934      	bls.n	800b4fe <__hexnan+0x10e>
 800b494:	f1a8 0204 	sub.w	r2, r8, #4
 800b498:	4623      	mov	r3, r4
 800b49a:	f853 1b04 	ldr.w	r1, [r3], #4
 800b49e:	f842 1f04 	str.w	r1, [r2, #4]!
 800b4a2:	429f      	cmp	r7, r3
 800b4a4:	d2f9      	bcs.n	800b49a <__hexnan+0xaa>
 800b4a6:	1b3b      	subs	r3, r7, r4
 800b4a8:	f023 0303 	bic.w	r3, r3, #3
 800b4ac:	3304      	adds	r3, #4
 800b4ae:	3401      	adds	r4, #1
 800b4b0:	3e03      	subs	r6, #3
 800b4b2:	42b4      	cmp	r4, r6
 800b4b4:	bf88      	it	hi
 800b4b6:	2304      	movhi	r3, #4
 800b4b8:	4443      	add	r3, r8
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	f843 2b04 	str.w	r2, [r3], #4
 800b4c0:	429f      	cmp	r7, r3
 800b4c2:	d2fb      	bcs.n	800b4bc <__hexnan+0xcc>
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	b91b      	cbnz	r3, 800b4d0 <__hexnan+0xe0>
 800b4c8:	4547      	cmp	r7, r8
 800b4ca:	d127      	bne.n	800b51c <__hexnan+0x12c>
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	603b      	str	r3, [r7, #0]
 800b4d0:	2005      	movs	r0, #5
 800b4d2:	e026      	b.n	800b522 <__hexnan+0x132>
 800b4d4:	3501      	adds	r5, #1
 800b4d6:	2d08      	cmp	r5, #8
 800b4d8:	f10b 0b01 	add.w	fp, fp, #1
 800b4dc:	dd06      	ble.n	800b4ec <__hexnan+0xfc>
 800b4de:	4544      	cmp	r4, r8
 800b4e0:	d9c3      	bls.n	800b46a <__hexnan+0x7a>
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	f844 3c04 	str.w	r3, [r4, #-4]
 800b4e8:	2501      	movs	r5, #1
 800b4ea:	3c04      	subs	r4, #4
 800b4ec:	6822      	ldr	r2, [r4, #0]
 800b4ee:	f000 000f 	and.w	r0, r0, #15
 800b4f2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b4f6:	6022      	str	r2, [r4, #0]
 800b4f8:	e7b7      	b.n	800b46a <__hexnan+0x7a>
 800b4fa:	2508      	movs	r5, #8
 800b4fc:	e7b5      	b.n	800b46a <__hexnan+0x7a>
 800b4fe:	9b01      	ldr	r3, [sp, #4]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d0df      	beq.n	800b4c4 <__hexnan+0xd4>
 800b504:	f04f 32ff 	mov.w	r2, #4294967295
 800b508:	f1c3 0320 	rsb	r3, r3, #32
 800b50c:	fa22 f303 	lsr.w	r3, r2, r3
 800b510:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b514:	401a      	ands	r2, r3
 800b516:	f846 2c04 	str.w	r2, [r6, #-4]
 800b51a:	e7d3      	b.n	800b4c4 <__hexnan+0xd4>
 800b51c:	3f04      	subs	r7, #4
 800b51e:	e7d1      	b.n	800b4c4 <__hexnan+0xd4>
 800b520:	2004      	movs	r0, #4
 800b522:	b007      	add	sp, #28
 800b524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b528 <_localeconv_r>:
 800b528:	4800      	ldr	r0, [pc, #0]	; (800b52c <_localeconv_r+0x4>)
 800b52a:	4770      	bx	lr
 800b52c:	20000170 	.word	0x20000170

0800b530 <__retarget_lock_init_recursive>:
 800b530:	4770      	bx	lr

0800b532 <__retarget_lock_acquire_recursive>:
 800b532:	4770      	bx	lr

0800b534 <__retarget_lock_release_recursive>:
 800b534:	4770      	bx	lr

0800b536 <__swhatbuf_r>:
 800b536:	b570      	push	{r4, r5, r6, lr}
 800b538:	460e      	mov	r6, r1
 800b53a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b53e:	2900      	cmp	r1, #0
 800b540:	b096      	sub	sp, #88	; 0x58
 800b542:	4614      	mov	r4, r2
 800b544:	461d      	mov	r5, r3
 800b546:	da08      	bge.n	800b55a <__swhatbuf_r+0x24>
 800b548:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b54c:	2200      	movs	r2, #0
 800b54e:	602a      	str	r2, [r5, #0]
 800b550:	061a      	lsls	r2, r3, #24
 800b552:	d410      	bmi.n	800b576 <__swhatbuf_r+0x40>
 800b554:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b558:	e00e      	b.n	800b578 <__swhatbuf_r+0x42>
 800b55a:	466a      	mov	r2, sp
 800b55c:	f001 f9a6 	bl	800c8ac <_fstat_r>
 800b560:	2800      	cmp	r0, #0
 800b562:	dbf1      	blt.n	800b548 <__swhatbuf_r+0x12>
 800b564:	9a01      	ldr	r2, [sp, #4]
 800b566:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b56a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b56e:	425a      	negs	r2, r3
 800b570:	415a      	adcs	r2, r3
 800b572:	602a      	str	r2, [r5, #0]
 800b574:	e7ee      	b.n	800b554 <__swhatbuf_r+0x1e>
 800b576:	2340      	movs	r3, #64	; 0x40
 800b578:	2000      	movs	r0, #0
 800b57a:	6023      	str	r3, [r4, #0]
 800b57c:	b016      	add	sp, #88	; 0x58
 800b57e:	bd70      	pop	{r4, r5, r6, pc}

0800b580 <__smakebuf_r>:
 800b580:	898b      	ldrh	r3, [r1, #12]
 800b582:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b584:	079d      	lsls	r5, r3, #30
 800b586:	4606      	mov	r6, r0
 800b588:	460c      	mov	r4, r1
 800b58a:	d507      	bpl.n	800b59c <__smakebuf_r+0x1c>
 800b58c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b590:	6023      	str	r3, [r4, #0]
 800b592:	6123      	str	r3, [r4, #16]
 800b594:	2301      	movs	r3, #1
 800b596:	6163      	str	r3, [r4, #20]
 800b598:	b002      	add	sp, #8
 800b59a:	bd70      	pop	{r4, r5, r6, pc}
 800b59c:	ab01      	add	r3, sp, #4
 800b59e:	466a      	mov	r2, sp
 800b5a0:	f7ff ffc9 	bl	800b536 <__swhatbuf_r>
 800b5a4:	9900      	ldr	r1, [sp, #0]
 800b5a6:	4605      	mov	r5, r0
 800b5a8:	4630      	mov	r0, r6
 800b5aa:	f000 fd87 	bl	800c0bc <_malloc_r>
 800b5ae:	b948      	cbnz	r0, 800b5c4 <__smakebuf_r+0x44>
 800b5b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5b4:	059a      	lsls	r2, r3, #22
 800b5b6:	d4ef      	bmi.n	800b598 <__smakebuf_r+0x18>
 800b5b8:	f023 0303 	bic.w	r3, r3, #3
 800b5bc:	f043 0302 	orr.w	r3, r3, #2
 800b5c0:	81a3      	strh	r3, [r4, #12]
 800b5c2:	e7e3      	b.n	800b58c <__smakebuf_r+0xc>
 800b5c4:	4b0d      	ldr	r3, [pc, #52]	; (800b5fc <__smakebuf_r+0x7c>)
 800b5c6:	62b3      	str	r3, [r6, #40]	; 0x28
 800b5c8:	89a3      	ldrh	r3, [r4, #12]
 800b5ca:	6020      	str	r0, [r4, #0]
 800b5cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5d0:	81a3      	strh	r3, [r4, #12]
 800b5d2:	9b00      	ldr	r3, [sp, #0]
 800b5d4:	6163      	str	r3, [r4, #20]
 800b5d6:	9b01      	ldr	r3, [sp, #4]
 800b5d8:	6120      	str	r0, [r4, #16]
 800b5da:	b15b      	cbz	r3, 800b5f4 <__smakebuf_r+0x74>
 800b5dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5e0:	4630      	mov	r0, r6
 800b5e2:	f001 f975 	bl	800c8d0 <_isatty_r>
 800b5e6:	b128      	cbz	r0, 800b5f4 <__smakebuf_r+0x74>
 800b5e8:	89a3      	ldrh	r3, [r4, #12]
 800b5ea:	f023 0303 	bic.w	r3, r3, #3
 800b5ee:	f043 0301 	orr.w	r3, r3, #1
 800b5f2:	81a3      	strh	r3, [r4, #12]
 800b5f4:	89a0      	ldrh	r0, [r4, #12]
 800b5f6:	4305      	orrs	r5, r0
 800b5f8:	81a5      	strh	r5, [r4, #12]
 800b5fa:	e7cd      	b.n	800b598 <__smakebuf_r+0x18>
 800b5fc:	0800aca9 	.word	0x0800aca9

0800b600 <malloc>:
 800b600:	4b02      	ldr	r3, [pc, #8]	; (800b60c <malloc+0xc>)
 800b602:	4601      	mov	r1, r0
 800b604:	6818      	ldr	r0, [r3, #0]
 800b606:	f000 bd59 	b.w	800c0bc <_malloc_r>
 800b60a:	bf00      	nop
 800b60c:	20000018 	.word	0x20000018

0800b610 <__ascii_mbtowc>:
 800b610:	b082      	sub	sp, #8
 800b612:	b901      	cbnz	r1, 800b616 <__ascii_mbtowc+0x6>
 800b614:	a901      	add	r1, sp, #4
 800b616:	b142      	cbz	r2, 800b62a <__ascii_mbtowc+0x1a>
 800b618:	b14b      	cbz	r3, 800b62e <__ascii_mbtowc+0x1e>
 800b61a:	7813      	ldrb	r3, [r2, #0]
 800b61c:	600b      	str	r3, [r1, #0]
 800b61e:	7812      	ldrb	r2, [r2, #0]
 800b620:	1e10      	subs	r0, r2, #0
 800b622:	bf18      	it	ne
 800b624:	2001      	movne	r0, #1
 800b626:	b002      	add	sp, #8
 800b628:	4770      	bx	lr
 800b62a:	4610      	mov	r0, r2
 800b62c:	e7fb      	b.n	800b626 <__ascii_mbtowc+0x16>
 800b62e:	f06f 0001 	mvn.w	r0, #1
 800b632:	e7f8      	b.n	800b626 <__ascii_mbtowc+0x16>

0800b634 <_Balloc>:
 800b634:	b570      	push	{r4, r5, r6, lr}
 800b636:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b638:	4604      	mov	r4, r0
 800b63a:	460d      	mov	r5, r1
 800b63c:	b976      	cbnz	r6, 800b65c <_Balloc+0x28>
 800b63e:	2010      	movs	r0, #16
 800b640:	f7ff ffde 	bl	800b600 <malloc>
 800b644:	4602      	mov	r2, r0
 800b646:	6260      	str	r0, [r4, #36]	; 0x24
 800b648:	b920      	cbnz	r0, 800b654 <_Balloc+0x20>
 800b64a:	4b18      	ldr	r3, [pc, #96]	; (800b6ac <_Balloc+0x78>)
 800b64c:	4818      	ldr	r0, [pc, #96]	; (800b6b0 <_Balloc+0x7c>)
 800b64e:	2166      	movs	r1, #102	; 0x66
 800b650:	f001 f8ec 	bl	800c82c <__assert_func>
 800b654:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b658:	6006      	str	r6, [r0, #0]
 800b65a:	60c6      	str	r6, [r0, #12]
 800b65c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b65e:	68f3      	ldr	r3, [r6, #12]
 800b660:	b183      	cbz	r3, 800b684 <_Balloc+0x50>
 800b662:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b664:	68db      	ldr	r3, [r3, #12]
 800b666:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b66a:	b9b8      	cbnz	r0, 800b69c <_Balloc+0x68>
 800b66c:	2101      	movs	r1, #1
 800b66e:	fa01 f605 	lsl.w	r6, r1, r5
 800b672:	1d72      	adds	r2, r6, #5
 800b674:	0092      	lsls	r2, r2, #2
 800b676:	4620      	mov	r0, r4
 800b678:	f000 fc9d 	bl	800bfb6 <_calloc_r>
 800b67c:	b160      	cbz	r0, 800b698 <_Balloc+0x64>
 800b67e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b682:	e00e      	b.n	800b6a2 <_Balloc+0x6e>
 800b684:	2221      	movs	r2, #33	; 0x21
 800b686:	2104      	movs	r1, #4
 800b688:	4620      	mov	r0, r4
 800b68a:	f000 fc94 	bl	800bfb6 <_calloc_r>
 800b68e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b690:	60f0      	str	r0, [r6, #12]
 800b692:	68db      	ldr	r3, [r3, #12]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d1e4      	bne.n	800b662 <_Balloc+0x2e>
 800b698:	2000      	movs	r0, #0
 800b69a:	bd70      	pop	{r4, r5, r6, pc}
 800b69c:	6802      	ldr	r2, [r0, #0]
 800b69e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b6a8:	e7f7      	b.n	800b69a <_Balloc+0x66>
 800b6aa:	bf00      	nop
 800b6ac:	0800cd7e 	.word	0x0800cd7e
 800b6b0:	0800cee0 	.word	0x0800cee0

0800b6b4 <_Bfree>:
 800b6b4:	b570      	push	{r4, r5, r6, lr}
 800b6b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b6b8:	4605      	mov	r5, r0
 800b6ba:	460c      	mov	r4, r1
 800b6bc:	b976      	cbnz	r6, 800b6dc <_Bfree+0x28>
 800b6be:	2010      	movs	r0, #16
 800b6c0:	f7ff ff9e 	bl	800b600 <malloc>
 800b6c4:	4602      	mov	r2, r0
 800b6c6:	6268      	str	r0, [r5, #36]	; 0x24
 800b6c8:	b920      	cbnz	r0, 800b6d4 <_Bfree+0x20>
 800b6ca:	4b09      	ldr	r3, [pc, #36]	; (800b6f0 <_Bfree+0x3c>)
 800b6cc:	4809      	ldr	r0, [pc, #36]	; (800b6f4 <_Bfree+0x40>)
 800b6ce:	218a      	movs	r1, #138	; 0x8a
 800b6d0:	f001 f8ac 	bl	800c82c <__assert_func>
 800b6d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b6d8:	6006      	str	r6, [r0, #0]
 800b6da:	60c6      	str	r6, [r0, #12]
 800b6dc:	b13c      	cbz	r4, 800b6ee <_Bfree+0x3a>
 800b6de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b6e0:	6862      	ldr	r2, [r4, #4]
 800b6e2:	68db      	ldr	r3, [r3, #12]
 800b6e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b6e8:	6021      	str	r1, [r4, #0]
 800b6ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b6ee:	bd70      	pop	{r4, r5, r6, pc}
 800b6f0:	0800cd7e 	.word	0x0800cd7e
 800b6f4:	0800cee0 	.word	0x0800cee0

0800b6f8 <__multadd>:
 800b6f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6fc:	690d      	ldr	r5, [r1, #16]
 800b6fe:	4607      	mov	r7, r0
 800b700:	460c      	mov	r4, r1
 800b702:	461e      	mov	r6, r3
 800b704:	f101 0c14 	add.w	ip, r1, #20
 800b708:	2000      	movs	r0, #0
 800b70a:	f8dc 3000 	ldr.w	r3, [ip]
 800b70e:	b299      	uxth	r1, r3
 800b710:	fb02 6101 	mla	r1, r2, r1, r6
 800b714:	0c1e      	lsrs	r6, r3, #16
 800b716:	0c0b      	lsrs	r3, r1, #16
 800b718:	fb02 3306 	mla	r3, r2, r6, r3
 800b71c:	b289      	uxth	r1, r1
 800b71e:	3001      	adds	r0, #1
 800b720:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b724:	4285      	cmp	r5, r0
 800b726:	f84c 1b04 	str.w	r1, [ip], #4
 800b72a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b72e:	dcec      	bgt.n	800b70a <__multadd+0x12>
 800b730:	b30e      	cbz	r6, 800b776 <__multadd+0x7e>
 800b732:	68a3      	ldr	r3, [r4, #8]
 800b734:	42ab      	cmp	r3, r5
 800b736:	dc19      	bgt.n	800b76c <__multadd+0x74>
 800b738:	6861      	ldr	r1, [r4, #4]
 800b73a:	4638      	mov	r0, r7
 800b73c:	3101      	adds	r1, #1
 800b73e:	f7ff ff79 	bl	800b634 <_Balloc>
 800b742:	4680      	mov	r8, r0
 800b744:	b928      	cbnz	r0, 800b752 <__multadd+0x5a>
 800b746:	4602      	mov	r2, r0
 800b748:	4b0c      	ldr	r3, [pc, #48]	; (800b77c <__multadd+0x84>)
 800b74a:	480d      	ldr	r0, [pc, #52]	; (800b780 <__multadd+0x88>)
 800b74c:	21b5      	movs	r1, #181	; 0xb5
 800b74e:	f001 f86d 	bl	800c82c <__assert_func>
 800b752:	6922      	ldr	r2, [r4, #16]
 800b754:	3202      	adds	r2, #2
 800b756:	f104 010c 	add.w	r1, r4, #12
 800b75a:	0092      	lsls	r2, r2, #2
 800b75c:	300c      	adds	r0, #12
 800b75e:	f7fc fc93 	bl	8008088 <memcpy>
 800b762:	4621      	mov	r1, r4
 800b764:	4638      	mov	r0, r7
 800b766:	f7ff ffa5 	bl	800b6b4 <_Bfree>
 800b76a:	4644      	mov	r4, r8
 800b76c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b770:	3501      	adds	r5, #1
 800b772:	615e      	str	r6, [r3, #20]
 800b774:	6125      	str	r5, [r4, #16]
 800b776:	4620      	mov	r0, r4
 800b778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b77c:	0800cdf0 	.word	0x0800cdf0
 800b780:	0800cee0 	.word	0x0800cee0

0800b784 <__s2b>:
 800b784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b788:	460c      	mov	r4, r1
 800b78a:	4615      	mov	r5, r2
 800b78c:	461f      	mov	r7, r3
 800b78e:	2209      	movs	r2, #9
 800b790:	3308      	adds	r3, #8
 800b792:	4606      	mov	r6, r0
 800b794:	fb93 f3f2 	sdiv	r3, r3, r2
 800b798:	2100      	movs	r1, #0
 800b79a:	2201      	movs	r2, #1
 800b79c:	429a      	cmp	r2, r3
 800b79e:	db09      	blt.n	800b7b4 <__s2b+0x30>
 800b7a0:	4630      	mov	r0, r6
 800b7a2:	f7ff ff47 	bl	800b634 <_Balloc>
 800b7a6:	b940      	cbnz	r0, 800b7ba <__s2b+0x36>
 800b7a8:	4602      	mov	r2, r0
 800b7aa:	4b19      	ldr	r3, [pc, #100]	; (800b810 <__s2b+0x8c>)
 800b7ac:	4819      	ldr	r0, [pc, #100]	; (800b814 <__s2b+0x90>)
 800b7ae:	21ce      	movs	r1, #206	; 0xce
 800b7b0:	f001 f83c 	bl	800c82c <__assert_func>
 800b7b4:	0052      	lsls	r2, r2, #1
 800b7b6:	3101      	adds	r1, #1
 800b7b8:	e7f0      	b.n	800b79c <__s2b+0x18>
 800b7ba:	9b08      	ldr	r3, [sp, #32]
 800b7bc:	6143      	str	r3, [r0, #20]
 800b7be:	2d09      	cmp	r5, #9
 800b7c0:	f04f 0301 	mov.w	r3, #1
 800b7c4:	6103      	str	r3, [r0, #16]
 800b7c6:	dd16      	ble.n	800b7f6 <__s2b+0x72>
 800b7c8:	f104 0909 	add.w	r9, r4, #9
 800b7cc:	46c8      	mov	r8, r9
 800b7ce:	442c      	add	r4, r5
 800b7d0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b7d4:	4601      	mov	r1, r0
 800b7d6:	3b30      	subs	r3, #48	; 0x30
 800b7d8:	220a      	movs	r2, #10
 800b7da:	4630      	mov	r0, r6
 800b7dc:	f7ff ff8c 	bl	800b6f8 <__multadd>
 800b7e0:	45a0      	cmp	r8, r4
 800b7e2:	d1f5      	bne.n	800b7d0 <__s2b+0x4c>
 800b7e4:	f1a5 0408 	sub.w	r4, r5, #8
 800b7e8:	444c      	add	r4, r9
 800b7ea:	1b2d      	subs	r5, r5, r4
 800b7ec:	1963      	adds	r3, r4, r5
 800b7ee:	42bb      	cmp	r3, r7
 800b7f0:	db04      	blt.n	800b7fc <__s2b+0x78>
 800b7f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7f6:	340a      	adds	r4, #10
 800b7f8:	2509      	movs	r5, #9
 800b7fa:	e7f6      	b.n	800b7ea <__s2b+0x66>
 800b7fc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b800:	4601      	mov	r1, r0
 800b802:	3b30      	subs	r3, #48	; 0x30
 800b804:	220a      	movs	r2, #10
 800b806:	4630      	mov	r0, r6
 800b808:	f7ff ff76 	bl	800b6f8 <__multadd>
 800b80c:	e7ee      	b.n	800b7ec <__s2b+0x68>
 800b80e:	bf00      	nop
 800b810:	0800cdf0 	.word	0x0800cdf0
 800b814:	0800cee0 	.word	0x0800cee0

0800b818 <__hi0bits>:
 800b818:	0c03      	lsrs	r3, r0, #16
 800b81a:	041b      	lsls	r3, r3, #16
 800b81c:	b9d3      	cbnz	r3, 800b854 <__hi0bits+0x3c>
 800b81e:	0400      	lsls	r0, r0, #16
 800b820:	2310      	movs	r3, #16
 800b822:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b826:	bf04      	itt	eq
 800b828:	0200      	lsleq	r0, r0, #8
 800b82a:	3308      	addeq	r3, #8
 800b82c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b830:	bf04      	itt	eq
 800b832:	0100      	lsleq	r0, r0, #4
 800b834:	3304      	addeq	r3, #4
 800b836:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b83a:	bf04      	itt	eq
 800b83c:	0080      	lsleq	r0, r0, #2
 800b83e:	3302      	addeq	r3, #2
 800b840:	2800      	cmp	r0, #0
 800b842:	db05      	blt.n	800b850 <__hi0bits+0x38>
 800b844:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b848:	f103 0301 	add.w	r3, r3, #1
 800b84c:	bf08      	it	eq
 800b84e:	2320      	moveq	r3, #32
 800b850:	4618      	mov	r0, r3
 800b852:	4770      	bx	lr
 800b854:	2300      	movs	r3, #0
 800b856:	e7e4      	b.n	800b822 <__hi0bits+0xa>

0800b858 <__lo0bits>:
 800b858:	6803      	ldr	r3, [r0, #0]
 800b85a:	f013 0207 	ands.w	r2, r3, #7
 800b85e:	4601      	mov	r1, r0
 800b860:	d00b      	beq.n	800b87a <__lo0bits+0x22>
 800b862:	07da      	lsls	r2, r3, #31
 800b864:	d423      	bmi.n	800b8ae <__lo0bits+0x56>
 800b866:	0798      	lsls	r0, r3, #30
 800b868:	bf49      	itett	mi
 800b86a:	085b      	lsrmi	r3, r3, #1
 800b86c:	089b      	lsrpl	r3, r3, #2
 800b86e:	2001      	movmi	r0, #1
 800b870:	600b      	strmi	r3, [r1, #0]
 800b872:	bf5c      	itt	pl
 800b874:	600b      	strpl	r3, [r1, #0]
 800b876:	2002      	movpl	r0, #2
 800b878:	4770      	bx	lr
 800b87a:	b298      	uxth	r0, r3
 800b87c:	b9a8      	cbnz	r0, 800b8aa <__lo0bits+0x52>
 800b87e:	0c1b      	lsrs	r3, r3, #16
 800b880:	2010      	movs	r0, #16
 800b882:	b2da      	uxtb	r2, r3
 800b884:	b90a      	cbnz	r2, 800b88a <__lo0bits+0x32>
 800b886:	3008      	adds	r0, #8
 800b888:	0a1b      	lsrs	r3, r3, #8
 800b88a:	071a      	lsls	r2, r3, #28
 800b88c:	bf04      	itt	eq
 800b88e:	091b      	lsreq	r3, r3, #4
 800b890:	3004      	addeq	r0, #4
 800b892:	079a      	lsls	r2, r3, #30
 800b894:	bf04      	itt	eq
 800b896:	089b      	lsreq	r3, r3, #2
 800b898:	3002      	addeq	r0, #2
 800b89a:	07da      	lsls	r2, r3, #31
 800b89c:	d403      	bmi.n	800b8a6 <__lo0bits+0x4e>
 800b89e:	085b      	lsrs	r3, r3, #1
 800b8a0:	f100 0001 	add.w	r0, r0, #1
 800b8a4:	d005      	beq.n	800b8b2 <__lo0bits+0x5a>
 800b8a6:	600b      	str	r3, [r1, #0]
 800b8a8:	4770      	bx	lr
 800b8aa:	4610      	mov	r0, r2
 800b8ac:	e7e9      	b.n	800b882 <__lo0bits+0x2a>
 800b8ae:	2000      	movs	r0, #0
 800b8b0:	4770      	bx	lr
 800b8b2:	2020      	movs	r0, #32
 800b8b4:	4770      	bx	lr
	...

0800b8b8 <__i2b>:
 800b8b8:	b510      	push	{r4, lr}
 800b8ba:	460c      	mov	r4, r1
 800b8bc:	2101      	movs	r1, #1
 800b8be:	f7ff feb9 	bl	800b634 <_Balloc>
 800b8c2:	4602      	mov	r2, r0
 800b8c4:	b928      	cbnz	r0, 800b8d2 <__i2b+0x1a>
 800b8c6:	4b05      	ldr	r3, [pc, #20]	; (800b8dc <__i2b+0x24>)
 800b8c8:	4805      	ldr	r0, [pc, #20]	; (800b8e0 <__i2b+0x28>)
 800b8ca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b8ce:	f000 ffad 	bl	800c82c <__assert_func>
 800b8d2:	2301      	movs	r3, #1
 800b8d4:	6144      	str	r4, [r0, #20]
 800b8d6:	6103      	str	r3, [r0, #16]
 800b8d8:	bd10      	pop	{r4, pc}
 800b8da:	bf00      	nop
 800b8dc:	0800cdf0 	.word	0x0800cdf0
 800b8e0:	0800cee0 	.word	0x0800cee0

0800b8e4 <__multiply>:
 800b8e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8e8:	4691      	mov	r9, r2
 800b8ea:	690a      	ldr	r2, [r1, #16]
 800b8ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b8f0:	429a      	cmp	r2, r3
 800b8f2:	bfb8      	it	lt
 800b8f4:	460b      	movlt	r3, r1
 800b8f6:	460c      	mov	r4, r1
 800b8f8:	bfbc      	itt	lt
 800b8fa:	464c      	movlt	r4, r9
 800b8fc:	4699      	movlt	r9, r3
 800b8fe:	6927      	ldr	r7, [r4, #16]
 800b900:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b904:	68a3      	ldr	r3, [r4, #8]
 800b906:	6861      	ldr	r1, [r4, #4]
 800b908:	eb07 060a 	add.w	r6, r7, sl
 800b90c:	42b3      	cmp	r3, r6
 800b90e:	b085      	sub	sp, #20
 800b910:	bfb8      	it	lt
 800b912:	3101      	addlt	r1, #1
 800b914:	f7ff fe8e 	bl	800b634 <_Balloc>
 800b918:	b930      	cbnz	r0, 800b928 <__multiply+0x44>
 800b91a:	4602      	mov	r2, r0
 800b91c:	4b44      	ldr	r3, [pc, #272]	; (800ba30 <__multiply+0x14c>)
 800b91e:	4845      	ldr	r0, [pc, #276]	; (800ba34 <__multiply+0x150>)
 800b920:	f240 115d 	movw	r1, #349	; 0x15d
 800b924:	f000 ff82 	bl	800c82c <__assert_func>
 800b928:	f100 0514 	add.w	r5, r0, #20
 800b92c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b930:	462b      	mov	r3, r5
 800b932:	2200      	movs	r2, #0
 800b934:	4543      	cmp	r3, r8
 800b936:	d321      	bcc.n	800b97c <__multiply+0x98>
 800b938:	f104 0314 	add.w	r3, r4, #20
 800b93c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b940:	f109 0314 	add.w	r3, r9, #20
 800b944:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b948:	9202      	str	r2, [sp, #8]
 800b94a:	1b3a      	subs	r2, r7, r4
 800b94c:	3a15      	subs	r2, #21
 800b94e:	f022 0203 	bic.w	r2, r2, #3
 800b952:	3204      	adds	r2, #4
 800b954:	f104 0115 	add.w	r1, r4, #21
 800b958:	428f      	cmp	r7, r1
 800b95a:	bf38      	it	cc
 800b95c:	2204      	movcc	r2, #4
 800b95e:	9201      	str	r2, [sp, #4]
 800b960:	9a02      	ldr	r2, [sp, #8]
 800b962:	9303      	str	r3, [sp, #12]
 800b964:	429a      	cmp	r2, r3
 800b966:	d80c      	bhi.n	800b982 <__multiply+0x9e>
 800b968:	2e00      	cmp	r6, #0
 800b96a:	dd03      	ble.n	800b974 <__multiply+0x90>
 800b96c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b970:	2b00      	cmp	r3, #0
 800b972:	d05a      	beq.n	800ba2a <__multiply+0x146>
 800b974:	6106      	str	r6, [r0, #16]
 800b976:	b005      	add	sp, #20
 800b978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b97c:	f843 2b04 	str.w	r2, [r3], #4
 800b980:	e7d8      	b.n	800b934 <__multiply+0x50>
 800b982:	f8b3 a000 	ldrh.w	sl, [r3]
 800b986:	f1ba 0f00 	cmp.w	sl, #0
 800b98a:	d024      	beq.n	800b9d6 <__multiply+0xf2>
 800b98c:	f104 0e14 	add.w	lr, r4, #20
 800b990:	46a9      	mov	r9, r5
 800b992:	f04f 0c00 	mov.w	ip, #0
 800b996:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b99a:	f8d9 1000 	ldr.w	r1, [r9]
 800b99e:	fa1f fb82 	uxth.w	fp, r2
 800b9a2:	b289      	uxth	r1, r1
 800b9a4:	fb0a 110b 	mla	r1, sl, fp, r1
 800b9a8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b9ac:	f8d9 2000 	ldr.w	r2, [r9]
 800b9b0:	4461      	add	r1, ip
 800b9b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b9b6:	fb0a c20b 	mla	r2, sl, fp, ip
 800b9ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b9be:	b289      	uxth	r1, r1
 800b9c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b9c4:	4577      	cmp	r7, lr
 800b9c6:	f849 1b04 	str.w	r1, [r9], #4
 800b9ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b9ce:	d8e2      	bhi.n	800b996 <__multiply+0xb2>
 800b9d0:	9a01      	ldr	r2, [sp, #4]
 800b9d2:	f845 c002 	str.w	ip, [r5, r2]
 800b9d6:	9a03      	ldr	r2, [sp, #12]
 800b9d8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b9dc:	3304      	adds	r3, #4
 800b9de:	f1b9 0f00 	cmp.w	r9, #0
 800b9e2:	d020      	beq.n	800ba26 <__multiply+0x142>
 800b9e4:	6829      	ldr	r1, [r5, #0]
 800b9e6:	f104 0c14 	add.w	ip, r4, #20
 800b9ea:	46ae      	mov	lr, r5
 800b9ec:	f04f 0a00 	mov.w	sl, #0
 800b9f0:	f8bc b000 	ldrh.w	fp, [ip]
 800b9f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b9f8:	fb09 220b 	mla	r2, r9, fp, r2
 800b9fc:	4492      	add	sl, r2
 800b9fe:	b289      	uxth	r1, r1
 800ba00:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ba04:	f84e 1b04 	str.w	r1, [lr], #4
 800ba08:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ba0c:	f8be 1000 	ldrh.w	r1, [lr]
 800ba10:	0c12      	lsrs	r2, r2, #16
 800ba12:	fb09 1102 	mla	r1, r9, r2, r1
 800ba16:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ba1a:	4567      	cmp	r7, ip
 800ba1c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ba20:	d8e6      	bhi.n	800b9f0 <__multiply+0x10c>
 800ba22:	9a01      	ldr	r2, [sp, #4]
 800ba24:	50a9      	str	r1, [r5, r2]
 800ba26:	3504      	adds	r5, #4
 800ba28:	e79a      	b.n	800b960 <__multiply+0x7c>
 800ba2a:	3e01      	subs	r6, #1
 800ba2c:	e79c      	b.n	800b968 <__multiply+0x84>
 800ba2e:	bf00      	nop
 800ba30:	0800cdf0 	.word	0x0800cdf0
 800ba34:	0800cee0 	.word	0x0800cee0

0800ba38 <__pow5mult>:
 800ba38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba3c:	4615      	mov	r5, r2
 800ba3e:	f012 0203 	ands.w	r2, r2, #3
 800ba42:	4606      	mov	r6, r0
 800ba44:	460f      	mov	r7, r1
 800ba46:	d007      	beq.n	800ba58 <__pow5mult+0x20>
 800ba48:	4c25      	ldr	r4, [pc, #148]	; (800bae0 <__pow5mult+0xa8>)
 800ba4a:	3a01      	subs	r2, #1
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ba52:	f7ff fe51 	bl	800b6f8 <__multadd>
 800ba56:	4607      	mov	r7, r0
 800ba58:	10ad      	asrs	r5, r5, #2
 800ba5a:	d03d      	beq.n	800bad8 <__pow5mult+0xa0>
 800ba5c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ba5e:	b97c      	cbnz	r4, 800ba80 <__pow5mult+0x48>
 800ba60:	2010      	movs	r0, #16
 800ba62:	f7ff fdcd 	bl	800b600 <malloc>
 800ba66:	4602      	mov	r2, r0
 800ba68:	6270      	str	r0, [r6, #36]	; 0x24
 800ba6a:	b928      	cbnz	r0, 800ba78 <__pow5mult+0x40>
 800ba6c:	4b1d      	ldr	r3, [pc, #116]	; (800bae4 <__pow5mult+0xac>)
 800ba6e:	481e      	ldr	r0, [pc, #120]	; (800bae8 <__pow5mult+0xb0>)
 800ba70:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ba74:	f000 feda 	bl	800c82c <__assert_func>
 800ba78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ba7c:	6004      	str	r4, [r0, #0]
 800ba7e:	60c4      	str	r4, [r0, #12]
 800ba80:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ba84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ba88:	b94c      	cbnz	r4, 800ba9e <__pow5mult+0x66>
 800ba8a:	f240 2171 	movw	r1, #625	; 0x271
 800ba8e:	4630      	mov	r0, r6
 800ba90:	f7ff ff12 	bl	800b8b8 <__i2b>
 800ba94:	2300      	movs	r3, #0
 800ba96:	f8c8 0008 	str.w	r0, [r8, #8]
 800ba9a:	4604      	mov	r4, r0
 800ba9c:	6003      	str	r3, [r0, #0]
 800ba9e:	f04f 0900 	mov.w	r9, #0
 800baa2:	07eb      	lsls	r3, r5, #31
 800baa4:	d50a      	bpl.n	800babc <__pow5mult+0x84>
 800baa6:	4639      	mov	r1, r7
 800baa8:	4622      	mov	r2, r4
 800baaa:	4630      	mov	r0, r6
 800baac:	f7ff ff1a 	bl	800b8e4 <__multiply>
 800bab0:	4639      	mov	r1, r7
 800bab2:	4680      	mov	r8, r0
 800bab4:	4630      	mov	r0, r6
 800bab6:	f7ff fdfd 	bl	800b6b4 <_Bfree>
 800baba:	4647      	mov	r7, r8
 800babc:	106d      	asrs	r5, r5, #1
 800babe:	d00b      	beq.n	800bad8 <__pow5mult+0xa0>
 800bac0:	6820      	ldr	r0, [r4, #0]
 800bac2:	b938      	cbnz	r0, 800bad4 <__pow5mult+0x9c>
 800bac4:	4622      	mov	r2, r4
 800bac6:	4621      	mov	r1, r4
 800bac8:	4630      	mov	r0, r6
 800baca:	f7ff ff0b 	bl	800b8e4 <__multiply>
 800bace:	6020      	str	r0, [r4, #0]
 800bad0:	f8c0 9000 	str.w	r9, [r0]
 800bad4:	4604      	mov	r4, r0
 800bad6:	e7e4      	b.n	800baa2 <__pow5mult+0x6a>
 800bad8:	4638      	mov	r0, r7
 800bada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bade:	bf00      	nop
 800bae0:	0800d030 	.word	0x0800d030
 800bae4:	0800cd7e 	.word	0x0800cd7e
 800bae8:	0800cee0 	.word	0x0800cee0

0800baec <__lshift>:
 800baec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800baf0:	460c      	mov	r4, r1
 800baf2:	6849      	ldr	r1, [r1, #4]
 800baf4:	6923      	ldr	r3, [r4, #16]
 800baf6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bafa:	68a3      	ldr	r3, [r4, #8]
 800bafc:	4607      	mov	r7, r0
 800bafe:	4691      	mov	r9, r2
 800bb00:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bb04:	f108 0601 	add.w	r6, r8, #1
 800bb08:	42b3      	cmp	r3, r6
 800bb0a:	db0b      	blt.n	800bb24 <__lshift+0x38>
 800bb0c:	4638      	mov	r0, r7
 800bb0e:	f7ff fd91 	bl	800b634 <_Balloc>
 800bb12:	4605      	mov	r5, r0
 800bb14:	b948      	cbnz	r0, 800bb2a <__lshift+0x3e>
 800bb16:	4602      	mov	r2, r0
 800bb18:	4b2a      	ldr	r3, [pc, #168]	; (800bbc4 <__lshift+0xd8>)
 800bb1a:	482b      	ldr	r0, [pc, #172]	; (800bbc8 <__lshift+0xdc>)
 800bb1c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bb20:	f000 fe84 	bl	800c82c <__assert_func>
 800bb24:	3101      	adds	r1, #1
 800bb26:	005b      	lsls	r3, r3, #1
 800bb28:	e7ee      	b.n	800bb08 <__lshift+0x1c>
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	f100 0114 	add.w	r1, r0, #20
 800bb30:	f100 0210 	add.w	r2, r0, #16
 800bb34:	4618      	mov	r0, r3
 800bb36:	4553      	cmp	r3, sl
 800bb38:	db37      	blt.n	800bbaa <__lshift+0xbe>
 800bb3a:	6920      	ldr	r0, [r4, #16]
 800bb3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bb40:	f104 0314 	add.w	r3, r4, #20
 800bb44:	f019 091f 	ands.w	r9, r9, #31
 800bb48:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bb4c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bb50:	d02f      	beq.n	800bbb2 <__lshift+0xc6>
 800bb52:	f1c9 0e20 	rsb	lr, r9, #32
 800bb56:	468a      	mov	sl, r1
 800bb58:	f04f 0c00 	mov.w	ip, #0
 800bb5c:	681a      	ldr	r2, [r3, #0]
 800bb5e:	fa02 f209 	lsl.w	r2, r2, r9
 800bb62:	ea42 020c 	orr.w	r2, r2, ip
 800bb66:	f84a 2b04 	str.w	r2, [sl], #4
 800bb6a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb6e:	4298      	cmp	r0, r3
 800bb70:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bb74:	d8f2      	bhi.n	800bb5c <__lshift+0x70>
 800bb76:	1b03      	subs	r3, r0, r4
 800bb78:	3b15      	subs	r3, #21
 800bb7a:	f023 0303 	bic.w	r3, r3, #3
 800bb7e:	3304      	adds	r3, #4
 800bb80:	f104 0215 	add.w	r2, r4, #21
 800bb84:	4290      	cmp	r0, r2
 800bb86:	bf38      	it	cc
 800bb88:	2304      	movcc	r3, #4
 800bb8a:	f841 c003 	str.w	ip, [r1, r3]
 800bb8e:	f1bc 0f00 	cmp.w	ip, #0
 800bb92:	d001      	beq.n	800bb98 <__lshift+0xac>
 800bb94:	f108 0602 	add.w	r6, r8, #2
 800bb98:	3e01      	subs	r6, #1
 800bb9a:	4638      	mov	r0, r7
 800bb9c:	612e      	str	r6, [r5, #16]
 800bb9e:	4621      	mov	r1, r4
 800bba0:	f7ff fd88 	bl	800b6b4 <_Bfree>
 800bba4:	4628      	mov	r0, r5
 800bba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbaa:	f842 0f04 	str.w	r0, [r2, #4]!
 800bbae:	3301      	adds	r3, #1
 800bbb0:	e7c1      	b.n	800bb36 <__lshift+0x4a>
 800bbb2:	3904      	subs	r1, #4
 800bbb4:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbb8:	f841 2f04 	str.w	r2, [r1, #4]!
 800bbbc:	4298      	cmp	r0, r3
 800bbbe:	d8f9      	bhi.n	800bbb4 <__lshift+0xc8>
 800bbc0:	e7ea      	b.n	800bb98 <__lshift+0xac>
 800bbc2:	bf00      	nop
 800bbc4:	0800cdf0 	.word	0x0800cdf0
 800bbc8:	0800cee0 	.word	0x0800cee0

0800bbcc <__mcmp>:
 800bbcc:	b530      	push	{r4, r5, lr}
 800bbce:	6902      	ldr	r2, [r0, #16]
 800bbd0:	690c      	ldr	r4, [r1, #16]
 800bbd2:	1b12      	subs	r2, r2, r4
 800bbd4:	d10e      	bne.n	800bbf4 <__mcmp+0x28>
 800bbd6:	f100 0314 	add.w	r3, r0, #20
 800bbda:	3114      	adds	r1, #20
 800bbdc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bbe0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bbe4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bbe8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bbec:	42a5      	cmp	r5, r4
 800bbee:	d003      	beq.n	800bbf8 <__mcmp+0x2c>
 800bbf0:	d305      	bcc.n	800bbfe <__mcmp+0x32>
 800bbf2:	2201      	movs	r2, #1
 800bbf4:	4610      	mov	r0, r2
 800bbf6:	bd30      	pop	{r4, r5, pc}
 800bbf8:	4283      	cmp	r3, r0
 800bbfa:	d3f3      	bcc.n	800bbe4 <__mcmp+0x18>
 800bbfc:	e7fa      	b.n	800bbf4 <__mcmp+0x28>
 800bbfe:	f04f 32ff 	mov.w	r2, #4294967295
 800bc02:	e7f7      	b.n	800bbf4 <__mcmp+0x28>

0800bc04 <__mdiff>:
 800bc04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc08:	460c      	mov	r4, r1
 800bc0a:	4606      	mov	r6, r0
 800bc0c:	4611      	mov	r1, r2
 800bc0e:	4620      	mov	r0, r4
 800bc10:	4690      	mov	r8, r2
 800bc12:	f7ff ffdb 	bl	800bbcc <__mcmp>
 800bc16:	1e05      	subs	r5, r0, #0
 800bc18:	d110      	bne.n	800bc3c <__mdiff+0x38>
 800bc1a:	4629      	mov	r1, r5
 800bc1c:	4630      	mov	r0, r6
 800bc1e:	f7ff fd09 	bl	800b634 <_Balloc>
 800bc22:	b930      	cbnz	r0, 800bc32 <__mdiff+0x2e>
 800bc24:	4b3a      	ldr	r3, [pc, #232]	; (800bd10 <__mdiff+0x10c>)
 800bc26:	4602      	mov	r2, r0
 800bc28:	f240 2132 	movw	r1, #562	; 0x232
 800bc2c:	4839      	ldr	r0, [pc, #228]	; (800bd14 <__mdiff+0x110>)
 800bc2e:	f000 fdfd 	bl	800c82c <__assert_func>
 800bc32:	2301      	movs	r3, #1
 800bc34:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bc38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc3c:	bfa4      	itt	ge
 800bc3e:	4643      	movge	r3, r8
 800bc40:	46a0      	movge	r8, r4
 800bc42:	4630      	mov	r0, r6
 800bc44:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bc48:	bfa6      	itte	ge
 800bc4a:	461c      	movge	r4, r3
 800bc4c:	2500      	movge	r5, #0
 800bc4e:	2501      	movlt	r5, #1
 800bc50:	f7ff fcf0 	bl	800b634 <_Balloc>
 800bc54:	b920      	cbnz	r0, 800bc60 <__mdiff+0x5c>
 800bc56:	4b2e      	ldr	r3, [pc, #184]	; (800bd10 <__mdiff+0x10c>)
 800bc58:	4602      	mov	r2, r0
 800bc5a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bc5e:	e7e5      	b.n	800bc2c <__mdiff+0x28>
 800bc60:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bc64:	6926      	ldr	r6, [r4, #16]
 800bc66:	60c5      	str	r5, [r0, #12]
 800bc68:	f104 0914 	add.w	r9, r4, #20
 800bc6c:	f108 0514 	add.w	r5, r8, #20
 800bc70:	f100 0e14 	add.w	lr, r0, #20
 800bc74:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bc78:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bc7c:	f108 0210 	add.w	r2, r8, #16
 800bc80:	46f2      	mov	sl, lr
 800bc82:	2100      	movs	r1, #0
 800bc84:	f859 3b04 	ldr.w	r3, [r9], #4
 800bc88:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bc8c:	fa1f f883 	uxth.w	r8, r3
 800bc90:	fa11 f18b 	uxtah	r1, r1, fp
 800bc94:	0c1b      	lsrs	r3, r3, #16
 800bc96:	eba1 0808 	sub.w	r8, r1, r8
 800bc9a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bc9e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bca2:	fa1f f888 	uxth.w	r8, r8
 800bca6:	1419      	asrs	r1, r3, #16
 800bca8:	454e      	cmp	r6, r9
 800bcaa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bcae:	f84a 3b04 	str.w	r3, [sl], #4
 800bcb2:	d8e7      	bhi.n	800bc84 <__mdiff+0x80>
 800bcb4:	1b33      	subs	r3, r6, r4
 800bcb6:	3b15      	subs	r3, #21
 800bcb8:	f023 0303 	bic.w	r3, r3, #3
 800bcbc:	3304      	adds	r3, #4
 800bcbe:	3415      	adds	r4, #21
 800bcc0:	42a6      	cmp	r6, r4
 800bcc2:	bf38      	it	cc
 800bcc4:	2304      	movcc	r3, #4
 800bcc6:	441d      	add	r5, r3
 800bcc8:	4473      	add	r3, lr
 800bcca:	469e      	mov	lr, r3
 800bccc:	462e      	mov	r6, r5
 800bcce:	4566      	cmp	r6, ip
 800bcd0:	d30e      	bcc.n	800bcf0 <__mdiff+0xec>
 800bcd2:	f10c 0203 	add.w	r2, ip, #3
 800bcd6:	1b52      	subs	r2, r2, r5
 800bcd8:	f022 0203 	bic.w	r2, r2, #3
 800bcdc:	3d03      	subs	r5, #3
 800bcde:	45ac      	cmp	ip, r5
 800bce0:	bf38      	it	cc
 800bce2:	2200      	movcc	r2, #0
 800bce4:	441a      	add	r2, r3
 800bce6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bcea:	b17b      	cbz	r3, 800bd0c <__mdiff+0x108>
 800bcec:	6107      	str	r7, [r0, #16]
 800bcee:	e7a3      	b.n	800bc38 <__mdiff+0x34>
 800bcf0:	f856 8b04 	ldr.w	r8, [r6], #4
 800bcf4:	fa11 f288 	uxtah	r2, r1, r8
 800bcf8:	1414      	asrs	r4, r2, #16
 800bcfa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bcfe:	b292      	uxth	r2, r2
 800bd00:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bd04:	f84e 2b04 	str.w	r2, [lr], #4
 800bd08:	1421      	asrs	r1, r4, #16
 800bd0a:	e7e0      	b.n	800bcce <__mdiff+0xca>
 800bd0c:	3f01      	subs	r7, #1
 800bd0e:	e7ea      	b.n	800bce6 <__mdiff+0xe2>
 800bd10:	0800cdf0 	.word	0x0800cdf0
 800bd14:	0800cee0 	.word	0x0800cee0

0800bd18 <__ulp>:
 800bd18:	b082      	sub	sp, #8
 800bd1a:	ed8d 0b00 	vstr	d0, [sp]
 800bd1e:	9b01      	ldr	r3, [sp, #4]
 800bd20:	4912      	ldr	r1, [pc, #72]	; (800bd6c <__ulp+0x54>)
 800bd22:	4019      	ands	r1, r3
 800bd24:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800bd28:	2900      	cmp	r1, #0
 800bd2a:	dd05      	ble.n	800bd38 <__ulp+0x20>
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	460b      	mov	r3, r1
 800bd30:	ec43 2b10 	vmov	d0, r2, r3
 800bd34:	b002      	add	sp, #8
 800bd36:	4770      	bx	lr
 800bd38:	4249      	negs	r1, r1
 800bd3a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800bd3e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800bd42:	f04f 0200 	mov.w	r2, #0
 800bd46:	f04f 0300 	mov.w	r3, #0
 800bd4a:	da04      	bge.n	800bd56 <__ulp+0x3e>
 800bd4c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800bd50:	fa41 f300 	asr.w	r3, r1, r0
 800bd54:	e7ec      	b.n	800bd30 <__ulp+0x18>
 800bd56:	f1a0 0114 	sub.w	r1, r0, #20
 800bd5a:	291e      	cmp	r1, #30
 800bd5c:	bfda      	itte	le
 800bd5e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800bd62:	fa20 f101 	lsrle.w	r1, r0, r1
 800bd66:	2101      	movgt	r1, #1
 800bd68:	460a      	mov	r2, r1
 800bd6a:	e7e1      	b.n	800bd30 <__ulp+0x18>
 800bd6c:	7ff00000 	.word	0x7ff00000

0800bd70 <__b2d>:
 800bd70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd72:	6905      	ldr	r5, [r0, #16]
 800bd74:	f100 0714 	add.w	r7, r0, #20
 800bd78:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800bd7c:	1f2e      	subs	r6, r5, #4
 800bd7e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800bd82:	4620      	mov	r0, r4
 800bd84:	f7ff fd48 	bl	800b818 <__hi0bits>
 800bd88:	f1c0 0320 	rsb	r3, r0, #32
 800bd8c:	280a      	cmp	r0, #10
 800bd8e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800be0c <__b2d+0x9c>
 800bd92:	600b      	str	r3, [r1, #0]
 800bd94:	dc14      	bgt.n	800bdc0 <__b2d+0x50>
 800bd96:	f1c0 0e0b 	rsb	lr, r0, #11
 800bd9a:	fa24 f10e 	lsr.w	r1, r4, lr
 800bd9e:	42b7      	cmp	r7, r6
 800bda0:	ea41 030c 	orr.w	r3, r1, ip
 800bda4:	bf34      	ite	cc
 800bda6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bdaa:	2100      	movcs	r1, #0
 800bdac:	3015      	adds	r0, #21
 800bdae:	fa04 f000 	lsl.w	r0, r4, r0
 800bdb2:	fa21 f10e 	lsr.w	r1, r1, lr
 800bdb6:	ea40 0201 	orr.w	r2, r0, r1
 800bdba:	ec43 2b10 	vmov	d0, r2, r3
 800bdbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bdc0:	42b7      	cmp	r7, r6
 800bdc2:	bf3a      	itte	cc
 800bdc4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bdc8:	f1a5 0608 	subcc.w	r6, r5, #8
 800bdcc:	2100      	movcs	r1, #0
 800bdce:	380b      	subs	r0, #11
 800bdd0:	d017      	beq.n	800be02 <__b2d+0x92>
 800bdd2:	f1c0 0c20 	rsb	ip, r0, #32
 800bdd6:	fa04 f500 	lsl.w	r5, r4, r0
 800bdda:	42be      	cmp	r6, r7
 800bddc:	fa21 f40c 	lsr.w	r4, r1, ip
 800bde0:	ea45 0504 	orr.w	r5, r5, r4
 800bde4:	bf8c      	ite	hi
 800bde6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800bdea:	2400      	movls	r4, #0
 800bdec:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800bdf0:	fa01 f000 	lsl.w	r0, r1, r0
 800bdf4:	fa24 f40c 	lsr.w	r4, r4, ip
 800bdf8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bdfc:	ea40 0204 	orr.w	r2, r0, r4
 800be00:	e7db      	b.n	800bdba <__b2d+0x4a>
 800be02:	ea44 030c 	orr.w	r3, r4, ip
 800be06:	460a      	mov	r2, r1
 800be08:	e7d7      	b.n	800bdba <__b2d+0x4a>
 800be0a:	bf00      	nop
 800be0c:	3ff00000 	.word	0x3ff00000

0800be10 <__d2b>:
 800be10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800be14:	4689      	mov	r9, r1
 800be16:	2101      	movs	r1, #1
 800be18:	ec57 6b10 	vmov	r6, r7, d0
 800be1c:	4690      	mov	r8, r2
 800be1e:	f7ff fc09 	bl	800b634 <_Balloc>
 800be22:	4604      	mov	r4, r0
 800be24:	b930      	cbnz	r0, 800be34 <__d2b+0x24>
 800be26:	4602      	mov	r2, r0
 800be28:	4b25      	ldr	r3, [pc, #148]	; (800bec0 <__d2b+0xb0>)
 800be2a:	4826      	ldr	r0, [pc, #152]	; (800bec4 <__d2b+0xb4>)
 800be2c:	f240 310a 	movw	r1, #778	; 0x30a
 800be30:	f000 fcfc 	bl	800c82c <__assert_func>
 800be34:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800be38:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800be3c:	bb35      	cbnz	r5, 800be8c <__d2b+0x7c>
 800be3e:	2e00      	cmp	r6, #0
 800be40:	9301      	str	r3, [sp, #4]
 800be42:	d028      	beq.n	800be96 <__d2b+0x86>
 800be44:	4668      	mov	r0, sp
 800be46:	9600      	str	r6, [sp, #0]
 800be48:	f7ff fd06 	bl	800b858 <__lo0bits>
 800be4c:	9900      	ldr	r1, [sp, #0]
 800be4e:	b300      	cbz	r0, 800be92 <__d2b+0x82>
 800be50:	9a01      	ldr	r2, [sp, #4]
 800be52:	f1c0 0320 	rsb	r3, r0, #32
 800be56:	fa02 f303 	lsl.w	r3, r2, r3
 800be5a:	430b      	orrs	r3, r1
 800be5c:	40c2      	lsrs	r2, r0
 800be5e:	6163      	str	r3, [r4, #20]
 800be60:	9201      	str	r2, [sp, #4]
 800be62:	9b01      	ldr	r3, [sp, #4]
 800be64:	61a3      	str	r3, [r4, #24]
 800be66:	2b00      	cmp	r3, #0
 800be68:	bf14      	ite	ne
 800be6a:	2202      	movne	r2, #2
 800be6c:	2201      	moveq	r2, #1
 800be6e:	6122      	str	r2, [r4, #16]
 800be70:	b1d5      	cbz	r5, 800bea8 <__d2b+0x98>
 800be72:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800be76:	4405      	add	r5, r0
 800be78:	f8c9 5000 	str.w	r5, [r9]
 800be7c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800be80:	f8c8 0000 	str.w	r0, [r8]
 800be84:	4620      	mov	r0, r4
 800be86:	b003      	add	sp, #12
 800be88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800be90:	e7d5      	b.n	800be3e <__d2b+0x2e>
 800be92:	6161      	str	r1, [r4, #20]
 800be94:	e7e5      	b.n	800be62 <__d2b+0x52>
 800be96:	a801      	add	r0, sp, #4
 800be98:	f7ff fcde 	bl	800b858 <__lo0bits>
 800be9c:	9b01      	ldr	r3, [sp, #4]
 800be9e:	6163      	str	r3, [r4, #20]
 800bea0:	2201      	movs	r2, #1
 800bea2:	6122      	str	r2, [r4, #16]
 800bea4:	3020      	adds	r0, #32
 800bea6:	e7e3      	b.n	800be70 <__d2b+0x60>
 800bea8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800beac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800beb0:	f8c9 0000 	str.w	r0, [r9]
 800beb4:	6918      	ldr	r0, [r3, #16]
 800beb6:	f7ff fcaf 	bl	800b818 <__hi0bits>
 800beba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bebe:	e7df      	b.n	800be80 <__d2b+0x70>
 800bec0:	0800cdf0 	.word	0x0800cdf0
 800bec4:	0800cee0 	.word	0x0800cee0

0800bec8 <__ratio>:
 800bec8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800becc:	4688      	mov	r8, r1
 800bece:	4669      	mov	r1, sp
 800bed0:	4681      	mov	r9, r0
 800bed2:	f7ff ff4d 	bl	800bd70 <__b2d>
 800bed6:	a901      	add	r1, sp, #4
 800bed8:	4640      	mov	r0, r8
 800beda:	ec55 4b10 	vmov	r4, r5, d0
 800bede:	f7ff ff47 	bl	800bd70 <__b2d>
 800bee2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bee6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800beea:	eba3 0c02 	sub.w	ip, r3, r2
 800beee:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bef2:	1a9b      	subs	r3, r3, r2
 800bef4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800bef8:	ec51 0b10 	vmov	r0, r1, d0
 800befc:	2b00      	cmp	r3, #0
 800befe:	bfd6      	itet	le
 800bf00:	460a      	movle	r2, r1
 800bf02:	462a      	movgt	r2, r5
 800bf04:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bf08:	468b      	mov	fp, r1
 800bf0a:	462f      	mov	r7, r5
 800bf0c:	bfd4      	ite	le
 800bf0e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800bf12:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800bf16:	4620      	mov	r0, r4
 800bf18:	ee10 2a10 	vmov	r2, s0
 800bf1c:	465b      	mov	r3, fp
 800bf1e:	4639      	mov	r1, r7
 800bf20:	f7f4 fc94 	bl	800084c <__aeabi_ddiv>
 800bf24:	ec41 0b10 	vmov	d0, r0, r1
 800bf28:	b003      	add	sp, #12
 800bf2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bf2e <__copybits>:
 800bf2e:	3901      	subs	r1, #1
 800bf30:	b570      	push	{r4, r5, r6, lr}
 800bf32:	1149      	asrs	r1, r1, #5
 800bf34:	6914      	ldr	r4, [r2, #16]
 800bf36:	3101      	adds	r1, #1
 800bf38:	f102 0314 	add.w	r3, r2, #20
 800bf3c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bf40:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bf44:	1f05      	subs	r5, r0, #4
 800bf46:	42a3      	cmp	r3, r4
 800bf48:	d30c      	bcc.n	800bf64 <__copybits+0x36>
 800bf4a:	1aa3      	subs	r3, r4, r2
 800bf4c:	3b11      	subs	r3, #17
 800bf4e:	f023 0303 	bic.w	r3, r3, #3
 800bf52:	3211      	adds	r2, #17
 800bf54:	42a2      	cmp	r2, r4
 800bf56:	bf88      	it	hi
 800bf58:	2300      	movhi	r3, #0
 800bf5a:	4418      	add	r0, r3
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	4288      	cmp	r0, r1
 800bf60:	d305      	bcc.n	800bf6e <__copybits+0x40>
 800bf62:	bd70      	pop	{r4, r5, r6, pc}
 800bf64:	f853 6b04 	ldr.w	r6, [r3], #4
 800bf68:	f845 6f04 	str.w	r6, [r5, #4]!
 800bf6c:	e7eb      	b.n	800bf46 <__copybits+0x18>
 800bf6e:	f840 3b04 	str.w	r3, [r0], #4
 800bf72:	e7f4      	b.n	800bf5e <__copybits+0x30>

0800bf74 <__any_on>:
 800bf74:	f100 0214 	add.w	r2, r0, #20
 800bf78:	6900      	ldr	r0, [r0, #16]
 800bf7a:	114b      	asrs	r3, r1, #5
 800bf7c:	4298      	cmp	r0, r3
 800bf7e:	b510      	push	{r4, lr}
 800bf80:	db11      	blt.n	800bfa6 <__any_on+0x32>
 800bf82:	dd0a      	ble.n	800bf9a <__any_on+0x26>
 800bf84:	f011 011f 	ands.w	r1, r1, #31
 800bf88:	d007      	beq.n	800bf9a <__any_on+0x26>
 800bf8a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bf8e:	fa24 f001 	lsr.w	r0, r4, r1
 800bf92:	fa00 f101 	lsl.w	r1, r0, r1
 800bf96:	428c      	cmp	r4, r1
 800bf98:	d10b      	bne.n	800bfb2 <__any_on+0x3e>
 800bf9a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bf9e:	4293      	cmp	r3, r2
 800bfa0:	d803      	bhi.n	800bfaa <__any_on+0x36>
 800bfa2:	2000      	movs	r0, #0
 800bfa4:	bd10      	pop	{r4, pc}
 800bfa6:	4603      	mov	r3, r0
 800bfa8:	e7f7      	b.n	800bf9a <__any_on+0x26>
 800bfaa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bfae:	2900      	cmp	r1, #0
 800bfb0:	d0f5      	beq.n	800bf9e <__any_on+0x2a>
 800bfb2:	2001      	movs	r0, #1
 800bfb4:	e7f6      	b.n	800bfa4 <__any_on+0x30>

0800bfb6 <_calloc_r>:
 800bfb6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bfb8:	fba1 2402 	umull	r2, r4, r1, r2
 800bfbc:	b94c      	cbnz	r4, 800bfd2 <_calloc_r+0x1c>
 800bfbe:	4611      	mov	r1, r2
 800bfc0:	9201      	str	r2, [sp, #4]
 800bfc2:	f000 f87b 	bl	800c0bc <_malloc_r>
 800bfc6:	9a01      	ldr	r2, [sp, #4]
 800bfc8:	4605      	mov	r5, r0
 800bfca:	b930      	cbnz	r0, 800bfda <_calloc_r+0x24>
 800bfcc:	4628      	mov	r0, r5
 800bfce:	b003      	add	sp, #12
 800bfd0:	bd30      	pop	{r4, r5, pc}
 800bfd2:	220c      	movs	r2, #12
 800bfd4:	6002      	str	r2, [r0, #0]
 800bfd6:	2500      	movs	r5, #0
 800bfd8:	e7f8      	b.n	800bfcc <_calloc_r+0x16>
 800bfda:	4621      	mov	r1, r4
 800bfdc:	f7fc f862 	bl	80080a4 <memset>
 800bfe0:	e7f4      	b.n	800bfcc <_calloc_r+0x16>
	...

0800bfe4 <_free_r>:
 800bfe4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bfe6:	2900      	cmp	r1, #0
 800bfe8:	d044      	beq.n	800c074 <_free_r+0x90>
 800bfea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bfee:	9001      	str	r0, [sp, #4]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	f1a1 0404 	sub.w	r4, r1, #4
 800bff6:	bfb8      	it	lt
 800bff8:	18e4      	addlt	r4, r4, r3
 800bffa:	f000 fca5 	bl	800c948 <__malloc_lock>
 800bffe:	4a1e      	ldr	r2, [pc, #120]	; (800c078 <_free_r+0x94>)
 800c000:	9801      	ldr	r0, [sp, #4]
 800c002:	6813      	ldr	r3, [r2, #0]
 800c004:	b933      	cbnz	r3, 800c014 <_free_r+0x30>
 800c006:	6063      	str	r3, [r4, #4]
 800c008:	6014      	str	r4, [r2, #0]
 800c00a:	b003      	add	sp, #12
 800c00c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c010:	f000 bca0 	b.w	800c954 <__malloc_unlock>
 800c014:	42a3      	cmp	r3, r4
 800c016:	d908      	bls.n	800c02a <_free_r+0x46>
 800c018:	6825      	ldr	r5, [r4, #0]
 800c01a:	1961      	adds	r1, r4, r5
 800c01c:	428b      	cmp	r3, r1
 800c01e:	bf01      	itttt	eq
 800c020:	6819      	ldreq	r1, [r3, #0]
 800c022:	685b      	ldreq	r3, [r3, #4]
 800c024:	1949      	addeq	r1, r1, r5
 800c026:	6021      	streq	r1, [r4, #0]
 800c028:	e7ed      	b.n	800c006 <_free_r+0x22>
 800c02a:	461a      	mov	r2, r3
 800c02c:	685b      	ldr	r3, [r3, #4]
 800c02e:	b10b      	cbz	r3, 800c034 <_free_r+0x50>
 800c030:	42a3      	cmp	r3, r4
 800c032:	d9fa      	bls.n	800c02a <_free_r+0x46>
 800c034:	6811      	ldr	r1, [r2, #0]
 800c036:	1855      	adds	r5, r2, r1
 800c038:	42a5      	cmp	r5, r4
 800c03a:	d10b      	bne.n	800c054 <_free_r+0x70>
 800c03c:	6824      	ldr	r4, [r4, #0]
 800c03e:	4421      	add	r1, r4
 800c040:	1854      	adds	r4, r2, r1
 800c042:	42a3      	cmp	r3, r4
 800c044:	6011      	str	r1, [r2, #0]
 800c046:	d1e0      	bne.n	800c00a <_free_r+0x26>
 800c048:	681c      	ldr	r4, [r3, #0]
 800c04a:	685b      	ldr	r3, [r3, #4]
 800c04c:	6053      	str	r3, [r2, #4]
 800c04e:	4421      	add	r1, r4
 800c050:	6011      	str	r1, [r2, #0]
 800c052:	e7da      	b.n	800c00a <_free_r+0x26>
 800c054:	d902      	bls.n	800c05c <_free_r+0x78>
 800c056:	230c      	movs	r3, #12
 800c058:	6003      	str	r3, [r0, #0]
 800c05a:	e7d6      	b.n	800c00a <_free_r+0x26>
 800c05c:	6825      	ldr	r5, [r4, #0]
 800c05e:	1961      	adds	r1, r4, r5
 800c060:	428b      	cmp	r3, r1
 800c062:	bf04      	itt	eq
 800c064:	6819      	ldreq	r1, [r3, #0]
 800c066:	685b      	ldreq	r3, [r3, #4]
 800c068:	6063      	str	r3, [r4, #4]
 800c06a:	bf04      	itt	eq
 800c06c:	1949      	addeq	r1, r1, r5
 800c06e:	6021      	streq	r1, [r4, #0]
 800c070:	6054      	str	r4, [r2, #4]
 800c072:	e7ca      	b.n	800c00a <_free_r+0x26>
 800c074:	b003      	add	sp, #12
 800c076:	bd30      	pop	{r4, r5, pc}
 800c078:	20000428 	.word	0x20000428

0800c07c <sbrk_aligned>:
 800c07c:	b570      	push	{r4, r5, r6, lr}
 800c07e:	4e0e      	ldr	r6, [pc, #56]	; (800c0b8 <sbrk_aligned+0x3c>)
 800c080:	460c      	mov	r4, r1
 800c082:	6831      	ldr	r1, [r6, #0]
 800c084:	4605      	mov	r5, r0
 800c086:	b911      	cbnz	r1, 800c08e <sbrk_aligned+0x12>
 800c088:	f000 fb4a 	bl	800c720 <_sbrk_r>
 800c08c:	6030      	str	r0, [r6, #0]
 800c08e:	4621      	mov	r1, r4
 800c090:	4628      	mov	r0, r5
 800c092:	f000 fb45 	bl	800c720 <_sbrk_r>
 800c096:	1c43      	adds	r3, r0, #1
 800c098:	d00a      	beq.n	800c0b0 <sbrk_aligned+0x34>
 800c09a:	1cc4      	adds	r4, r0, #3
 800c09c:	f024 0403 	bic.w	r4, r4, #3
 800c0a0:	42a0      	cmp	r0, r4
 800c0a2:	d007      	beq.n	800c0b4 <sbrk_aligned+0x38>
 800c0a4:	1a21      	subs	r1, r4, r0
 800c0a6:	4628      	mov	r0, r5
 800c0a8:	f000 fb3a 	bl	800c720 <_sbrk_r>
 800c0ac:	3001      	adds	r0, #1
 800c0ae:	d101      	bne.n	800c0b4 <sbrk_aligned+0x38>
 800c0b0:	f04f 34ff 	mov.w	r4, #4294967295
 800c0b4:	4620      	mov	r0, r4
 800c0b6:	bd70      	pop	{r4, r5, r6, pc}
 800c0b8:	2000042c 	.word	0x2000042c

0800c0bc <_malloc_r>:
 800c0bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0c0:	1ccd      	adds	r5, r1, #3
 800c0c2:	f025 0503 	bic.w	r5, r5, #3
 800c0c6:	3508      	adds	r5, #8
 800c0c8:	2d0c      	cmp	r5, #12
 800c0ca:	bf38      	it	cc
 800c0cc:	250c      	movcc	r5, #12
 800c0ce:	2d00      	cmp	r5, #0
 800c0d0:	4607      	mov	r7, r0
 800c0d2:	db01      	blt.n	800c0d8 <_malloc_r+0x1c>
 800c0d4:	42a9      	cmp	r1, r5
 800c0d6:	d905      	bls.n	800c0e4 <_malloc_r+0x28>
 800c0d8:	230c      	movs	r3, #12
 800c0da:	603b      	str	r3, [r7, #0]
 800c0dc:	2600      	movs	r6, #0
 800c0de:	4630      	mov	r0, r6
 800c0e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0e4:	4e2e      	ldr	r6, [pc, #184]	; (800c1a0 <_malloc_r+0xe4>)
 800c0e6:	f000 fc2f 	bl	800c948 <__malloc_lock>
 800c0ea:	6833      	ldr	r3, [r6, #0]
 800c0ec:	461c      	mov	r4, r3
 800c0ee:	bb34      	cbnz	r4, 800c13e <_malloc_r+0x82>
 800c0f0:	4629      	mov	r1, r5
 800c0f2:	4638      	mov	r0, r7
 800c0f4:	f7ff ffc2 	bl	800c07c <sbrk_aligned>
 800c0f8:	1c43      	adds	r3, r0, #1
 800c0fa:	4604      	mov	r4, r0
 800c0fc:	d14d      	bne.n	800c19a <_malloc_r+0xde>
 800c0fe:	6834      	ldr	r4, [r6, #0]
 800c100:	4626      	mov	r6, r4
 800c102:	2e00      	cmp	r6, #0
 800c104:	d140      	bne.n	800c188 <_malloc_r+0xcc>
 800c106:	6823      	ldr	r3, [r4, #0]
 800c108:	4631      	mov	r1, r6
 800c10a:	4638      	mov	r0, r7
 800c10c:	eb04 0803 	add.w	r8, r4, r3
 800c110:	f000 fb06 	bl	800c720 <_sbrk_r>
 800c114:	4580      	cmp	r8, r0
 800c116:	d13a      	bne.n	800c18e <_malloc_r+0xd2>
 800c118:	6821      	ldr	r1, [r4, #0]
 800c11a:	3503      	adds	r5, #3
 800c11c:	1a6d      	subs	r5, r5, r1
 800c11e:	f025 0503 	bic.w	r5, r5, #3
 800c122:	3508      	adds	r5, #8
 800c124:	2d0c      	cmp	r5, #12
 800c126:	bf38      	it	cc
 800c128:	250c      	movcc	r5, #12
 800c12a:	4629      	mov	r1, r5
 800c12c:	4638      	mov	r0, r7
 800c12e:	f7ff ffa5 	bl	800c07c <sbrk_aligned>
 800c132:	3001      	adds	r0, #1
 800c134:	d02b      	beq.n	800c18e <_malloc_r+0xd2>
 800c136:	6823      	ldr	r3, [r4, #0]
 800c138:	442b      	add	r3, r5
 800c13a:	6023      	str	r3, [r4, #0]
 800c13c:	e00e      	b.n	800c15c <_malloc_r+0xa0>
 800c13e:	6822      	ldr	r2, [r4, #0]
 800c140:	1b52      	subs	r2, r2, r5
 800c142:	d41e      	bmi.n	800c182 <_malloc_r+0xc6>
 800c144:	2a0b      	cmp	r2, #11
 800c146:	d916      	bls.n	800c176 <_malloc_r+0xba>
 800c148:	1961      	adds	r1, r4, r5
 800c14a:	42a3      	cmp	r3, r4
 800c14c:	6025      	str	r5, [r4, #0]
 800c14e:	bf18      	it	ne
 800c150:	6059      	strne	r1, [r3, #4]
 800c152:	6863      	ldr	r3, [r4, #4]
 800c154:	bf08      	it	eq
 800c156:	6031      	streq	r1, [r6, #0]
 800c158:	5162      	str	r2, [r4, r5]
 800c15a:	604b      	str	r3, [r1, #4]
 800c15c:	4638      	mov	r0, r7
 800c15e:	f104 060b 	add.w	r6, r4, #11
 800c162:	f000 fbf7 	bl	800c954 <__malloc_unlock>
 800c166:	f026 0607 	bic.w	r6, r6, #7
 800c16a:	1d23      	adds	r3, r4, #4
 800c16c:	1af2      	subs	r2, r6, r3
 800c16e:	d0b6      	beq.n	800c0de <_malloc_r+0x22>
 800c170:	1b9b      	subs	r3, r3, r6
 800c172:	50a3      	str	r3, [r4, r2]
 800c174:	e7b3      	b.n	800c0de <_malloc_r+0x22>
 800c176:	6862      	ldr	r2, [r4, #4]
 800c178:	42a3      	cmp	r3, r4
 800c17a:	bf0c      	ite	eq
 800c17c:	6032      	streq	r2, [r6, #0]
 800c17e:	605a      	strne	r2, [r3, #4]
 800c180:	e7ec      	b.n	800c15c <_malloc_r+0xa0>
 800c182:	4623      	mov	r3, r4
 800c184:	6864      	ldr	r4, [r4, #4]
 800c186:	e7b2      	b.n	800c0ee <_malloc_r+0x32>
 800c188:	4634      	mov	r4, r6
 800c18a:	6876      	ldr	r6, [r6, #4]
 800c18c:	e7b9      	b.n	800c102 <_malloc_r+0x46>
 800c18e:	230c      	movs	r3, #12
 800c190:	603b      	str	r3, [r7, #0]
 800c192:	4638      	mov	r0, r7
 800c194:	f000 fbde 	bl	800c954 <__malloc_unlock>
 800c198:	e7a1      	b.n	800c0de <_malloc_r+0x22>
 800c19a:	6025      	str	r5, [r4, #0]
 800c19c:	e7de      	b.n	800c15c <_malloc_r+0xa0>
 800c19e:	bf00      	nop
 800c1a0:	20000428 	.word	0x20000428

0800c1a4 <__ssputs_r>:
 800c1a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1a8:	688e      	ldr	r6, [r1, #8]
 800c1aa:	429e      	cmp	r6, r3
 800c1ac:	4682      	mov	sl, r0
 800c1ae:	460c      	mov	r4, r1
 800c1b0:	4690      	mov	r8, r2
 800c1b2:	461f      	mov	r7, r3
 800c1b4:	d838      	bhi.n	800c228 <__ssputs_r+0x84>
 800c1b6:	898a      	ldrh	r2, [r1, #12]
 800c1b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c1bc:	d032      	beq.n	800c224 <__ssputs_r+0x80>
 800c1be:	6825      	ldr	r5, [r4, #0]
 800c1c0:	6909      	ldr	r1, [r1, #16]
 800c1c2:	eba5 0901 	sub.w	r9, r5, r1
 800c1c6:	6965      	ldr	r5, [r4, #20]
 800c1c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c1cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c1d0:	3301      	adds	r3, #1
 800c1d2:	444b      	add	r3, r9
 800c1d4:	106d      	asrs	r5, r5, #1
 800c1d6:	429d      	cmp	r5, r3
 800c1d8:	bf38      	it	cc
 800c1da:	461d      	movcc	r5, r3
 800c1dc:	0553      	lsls	r3, r2, #21
 800c1de:	d531      	bpl.n	800c244 <__ssputs_r+0xa0>
 800c1e0:	4629      	mov	r1, r5
 800c1e2:	f7ff ff6b 	bl	800c0bc <_malloc_r>
 800c1e6:	4606      	mov	r6, r0
 800c1e8:	b950      	cbnz	r0, 800c200 <__ssputs_r+0x5c>
 800c1ea:	230c      	movs	r3, #12
 800c1ec:	f8ca 3000 	str.w	r3, [sl]
 800c1f0:	89a3      	ldrh	r3, [r4, #12]
 800c1f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1f6:	81a3      	strh	r3, [r4, #12]
 800c1f8:	f04f 30ff 	mov.w	r0, #4294967295
 800c1fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c200:	6921      	ldr	r1, [r4, #16]
 800c202:	464a      	mov	r2, r9
 800c204:	f7fb ff40 	bl	8008088 <memcpy>
 800c208:	89a3      	ldrh	r3, [r4, #12]
 800c20a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c20e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c212:	81a3      	strh	r3, [r4, #12]
 800c214:	6126      	str	r6, [r4, #16]
 800c216:	6165      	str	r5, [r4, #20]
 800c218:	444e      	add	r6, r9
 800c21a:	eba5 0509 	sub.w	r5, r5, r9
 800c21e:	6026      	str	r6, [r4, #0]
 800c220:	60a5      	str	r5, [r4, #8]
 800c222:	463e      	mov	r6, r7
 800c224:	42be      	cmp	r6, r7
 800c226:	d900      	bls.n	800c22a <__ssputs_r+0x86>
 800c228:	463e      	mov	r6, r7
 800c22a:	6820      	ldr	r0, [r4, #0]
 800c22c:	4632      	mov	r2, r6
 800c22e:	4641      	mov	r1, r8
 800c230:	f000 fb70 	bl	800c914 <memmove>
 800c234:	68a3      	ldr	r3, [r4, #8]
 800c236:	1b9b      	subs	r3, r3, r6
 800c238:	60a3      	str	r3, [r4, #8]
 800c23a:	6823      	ldr	r3, [r4, #0]
 800c23c:	4433      	add	r3, r6
 800c23e:	6023      	str	r3, [r4, #0]
 800c240:	2000      	movs	r0, #0
 800c242:	e7db      	b.n	800c1fc <__ssputs_r+0x58>
 800c244:	462a      	mov	r2, r5
 800c246:	f000 fb8b 	bl	800c960 <_realloc_r>
 800c24a:	4606      	mov	r6, r0
 800c24c:	2800      	cmp	r0, #0
 800c24e:	d1e1      	bne.n	800c214 <__ssputs_r+0x70>
 800c250:	6921      	ldr	r1, [r4, #16]
 800c252:	4650      	mov	r0, sl
 800c254:	f7ff fec6 	bl	800bfe4 <_free_r>
 800c258:	e7c7      	b.n	800c1ea <__ssputs_r+0x46>
	...

0800c25c <_svfiprintf_r>:
 800c25c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c260:	4698      	mov	r8, r3
 800c262:	898b      	ldrh	r3, [r1, #12]
 800c264:	061b      	lsls	r3, r3, #24
 800c266:	b09d      	sub	sp, #116	; 0x74
 800c268:	4607      	mov	r7, r0
 800c26a:	460d      	mov	r5, r1
 800c26c:	4614      	mov	r4, r2
 800c26e:	d50e      	bpl.n	800c28e <_svfiprintf_r+0x32>
 800c270:	690b      	ldr	r3, [r1, #16]
 800c272:	b963      	cbnz	r3, 800c28e <_svfiprintf_r+0x32>
 800c274:	2140      	movs	r1, #64	; 0x40
 800c276:	f7ff ff21 	bl	800c0bc <_malloc_r>
 800c27a:	6028      	str	r0, [r5, #0]
 800c27c:	6128      	str	r0, [r5, #16]
 800c27e:	b920      	cbnz	r0, 800c28a <_svfiprintf_r+0x2e>
 800c280:	230c      	movs	r3, #12
 800c282:	603b      	str	r3, [r7, #0]
 800c284:	f04f 30ff 	mov.w	r0, #4294967295
 800c288:	e0d1      	b.n	800c42e <_svfiprintf_r+0x1d2>
 800c28a:	2340      	movs	r3, #64	; 0x40
 800c28c:	616b      	str	r3, [r5, #20]
 800c28e:	2300      	movs	r3, #0
 800c290:	9309      	str	r3, [sp, #36]	; 0x24
 800c292:	2320      	movs	r3, #32
 800c294:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c298:	f8cd 800c 	str.w	r8, [sp, #12]
 800c29c:	2330      	movs	r3, #48	; 0x30
 800c29e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c448 <_svfiprintf_r+0x1ec>
 800c2a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c2a6:	f04f 0901 	mov.w	r9, #1
 800c2aa:	4623      	mov	r3, r4
 800c2ac:	469a      	mov	sl, r3
 800c2ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2b2:	b10a      	cbz	r2, 800c2b8 <_svfiprintf_r+0x5c>
 800c2b4:	2a25      	cmp	r2, #37	; 0x25
 800c2b6:	d1f9      	bne.n	800c2ac <_svfiprintf_r+0x50>
 800c2b8:	ebba 0b04 	subs.w	fp, sl, r4
 800c2bc:	d00b      	beq.n	800c2d6 <_svfiprintf_r+0x7a>
 800c2be:	465b      	mov	r3, fp
 800c2c0:	4622      	mov	r2, r4
 800c2c2:	4629      	mov	r1, r5
 800c2c4:	4638      	mov	r0, r7
 800c2c6:	f7ff ff6d 	bl	800c1a4 <__ssputs_r>
 800c2ca:	3001      	adds	r0, #1
 800c2cc:	f000 80aa 	beq.w	800c424 <_svfiprintf_r+0x1c8>
 800c2d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c2d2:	445a      	add	r2, fp
 800c2d4:	9209      	str	r2, [sp, #36]	; 0x24
 800c2d6:	f89a 3000 	ldrb.w	r3, [sl]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	f000 80a2 	beq.w	800c424 <_svfiprintf_r+0x1c8>
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	f04f 32ff 	mov.w	r2, #4294967295
 800c2e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c2ea:	f10a 0a01 	add.w	sl, sl, #1
 800c2ee:	9304      	str	r3, [sp, #16]
 800c2f0:	9307      	str	r3, [sp, #28]
 800c2f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c2f6:	931a      	str	r3, [sp, #104]	; 0x68
 800c2f8:	4654      	mov	r4, sl
 800c2fa:	2205      	movs	r2, #5
 800c2fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c300:	4851      	ldr	r0, [pc, #324]	; (800c448 <_svfiprintf_r+0x1ec>)
 800c302:	f7f3 ff6d 	bl	80001e0 <memchr>
 800c306:	9a04      	ldr	r2, [sp, #16]
 800c308:	b9d8      	cbnz	r0, 800c342 <_svfiprintf_r+0xe6>
 800c30a:	06d0      	lsls	r0, r2, #27
 800c30c:	bf44      	itt	mi
 800c30e:	2320      	movmi	r3, #32
 800c310:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c314:	0711      	lsls	r1, r2, #28
 800c316:	bf44      	itt	mi
 800c318:	232b      	movmi	r3, #43	; 0x2b
 800c31a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c31e:	f89a 3000 	ldrb.w	r3, [sl]
 800c322:	2b2a      	cmp	r3, #42	; 0x2a
 800c324:	d015      	beq.n	800c352 <_svfiprintf_r+0xf6>
 800c326:	9a07      	ldr	r2, [sp, #28]
 800c328:	4654      	mov	r4, sl
 800c32a:	2000      	movs	r0, #0
 800c32c:	f04f 0c0a 	mov.w	ip, #10
 800c330:	4621      	mov	r1, r4
 800c332:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c336:	3b30      	subs	r3, #48	; 0x30
 800c338:	2b09      	cmp	r3, #9
 800c33a:	d94e      	bls.n	800c3da <_svfiprintf_r+0x17e>
 800c33c:	b1b0      	cbz	r0, 800c36c <_svfiprintf_r+0x110>
 800c33e:	9207      	str	r2, [sp, #28]
 800c340:	e014      	b.n	800c36c <_svfiprintf_r+0x110>
 800c342:	eba0 0308 	sub.w	r3, r0, r8
 800c346:	fa09 f303 	lsl.w	r3, r9, r3
 800c34a:	4313      	orrs	r3, r2
 800c34c:	9304      	str	r3, [sp, #16]
 800c34e:	46a2      	mov	sl, r4
 800c350:	e7d2      	b.n	800c2f8 <_svfiprintf_r+0x9c>
 800c352:	9b03      	ldr	r3, [sp, #12]
 800c354:	1d19      	adds	r1, r3, #4
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	9103      	str	r1, [sp, #12]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	bfbb      	ittet	lt
 800c35e:	425b      	neglt	r3, r3
 800c360:	f042 0202 	orrlt.w	r2, r2, #2
 800c364:	9307      	strge	r3, [sp, #28]
 800c366:	9307      	strlt	r3, [sp, #28]
 800c368:	bfb8      	it	lt
 800c36a:	9204      	strlt	r2, [sp, #16]
 800c36c:	7823      	ldrb	r3, [r4, #0]
 800c36e:	2b2e      	cmp	r3, #46	; 0x2e
 800c370:	d10c      	bne.n	800c38c <_svfiprintf_r+0x130>
 800c372:	7863      	ldrb	r3, [r4, #1]
 800c374:	2b2a      	cmp	r3, #42	; 0x2a
 800c376:	d135      	bne.n	800c3e4 <_svfiprintf_r+0x188>
 800c378:	9b03      	ldr	r3, [sp, #12]
 800c37a:	1d1a      	adds	r2, r3, #4
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	9203      	str	r2, [sp, #12]
 800c380:	2b00      	cmp	r3, #0
 800c382:	bfb8      	it	lt
 800c384:	f04f 33ff 	movlt.w	r3, #4294967295
 800c388:	3402      	adds	r4, #2
 800c38a:	9305      	str	r3, [sp, #20]
 800c38c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c458 <_svfiprintf_r+0x1fc>
 800c390:	7821      	ldrb	r1, [r4, #0]
 800c392:	2203      	movs	r2, #3
 800c394:	4650      	mov	r0, sl
 800c396:	f7f3 ff23 	bl	80001e0 <memchr>
 800c39a:	b140      	cbz	r0, 800c3ae <_svfiprintf_r+0x152>
 800c39c:	2340      	movs	r3, #64	; 0x40
 800c39e:	eba0 000a 	sub.w	r0, r0, sl
 800c3a2:	fa03 f000 	lsl.w	r0, r3, r0
 800c3a6:	9b04      	ldr	r3, [sp, #16]
 800c3a8:	4303      	orrs	r3, r0
 800c3aa:	3401      	adds	r4, #1
 800c3ac:	9304      	str	r3, [sp, #16]
 800c3ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3b2:	4826      	ldr	r0, [pc, #152]	; (800c44c <_svfiprintf_r+0x1f0>)
 800c3b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c3b8:	2206      	movs	r2, #6
 800c3ba:	f7f3 ff11 	bl	80001e0 <memchr>
 800c3be:	2800      	cmp	r0, #0
 800c3c0:	d038      	beq.n	800c434 <_svfiprintf_r+0x1d8>
 800c3c2:	4b23      	ldr	r3, [pc, #140]	; (800c450 <_svfiprintf_r+0x1f4>)
 800c3c4:	bb1b      	cbnz	r3, 800c40e <_svfiprintf_r+0x1b2>
 800c3c6:	9b03      	ldr	r3, [sp, #12]
 800c3c8:	3307      	adds	r3, #7
 800c3ca:	f023 0307 	bic.w	r3, r3, #7
 800c3ce:	3308      	adds	r3, #8
 800c3d0:	9303      	str	r3, [sp, #12]
 800c3d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3d4:	4433      	add	r3, r6
 800c3d6:	9309      	str	r3, [sp, #36]	; 0x24
 800c3d8:	e767      	b.n	800c2aa <_svfiprintf_r+0x4e>
 800c3da:	fb0c 3202 	mla	r2, ip, r2, r3
 800c3de:	460c      	mov	r4, r1
 800c3e0:	2001      	movs	r0, #1
 800c3e2:	e7a5      	b.n	800c330 <_svfiprintf_r+0xd4>
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	3401      	adds	r4, #1
 800c3e8:	9305      	str	r3, [sp, #20]
 800c3ea:	4619      	mov	r1, r3
 800c3ec:	f04f 0c0a 	mov.w	ip, #10
 800c3f0:	4620      	mov	r0, r4
 800c3f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c3f6:	3a30      	subs	r2, #48	; 0x30
 800c3f8:	2a09      	cmp	r2, #9
 800c3fa:	d903      	bls.n	800c404 <_svfiprintf_r+0x1a8>
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d0c5      	beq.n	800c38c <_svfiprintf_r+0x130>
 800c400:	9105      	str	r1, [sp, #20]
 800c402:	e7c3      	b.n	800c38c <_svfiprintf_r+0x130>
 800c404:	fb0c 2101 	mla	r1, ip, r1, r2
 800c408:	4604      	mov	r4, r0
 800c40a:	2301      	movs	r3, #1
 800c40c:	e7f0      	b.n	800c3f0 <_svfiprintf_r+0x194>
 800c40e:	ab03      	add	r3, sp, #12
 800c410:	9300      	str	r3, [sp, #0]
 800c412:	462a      	mov	r2, r5
 800c414:	4b0f      	ldr	r3, [pc, #60]	; (800c454 <_svfiprintf_r+0x1f8>)
 800c416:	a904      	add	r1, sp, #16
 800c418:	4638      	mov	r0, r7
 800c41a:	f7fb feeb 	bl	80081f4 <_printf_float>
 800c41e:	1c42      	adds	r2, r0, #1
 800c420:	4606      	mov	r6, r0
 800c422:	d1d6      	bne.n	800c3d2 <_svfiprintf_r+0x176>
 800c424:	89ab      	ldrh	r3, [r5, #12]
 800c426:	065b      	lsls	r3, r3, #25
 800c428:	f53f af2c 	bmi.w	800c284 <_svfiprintf_r+0x28>
 800c42c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c42e:	b01d      	add	sp, #116	; 0x74
 800c430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c434:	ab03      	add	r3, sp, #12
 800c436:	9300      	str	r3, [sp, #0]
 800c438:	462a      	mov	r2, r5
 800c43a:	4b06      	ldr	r3, [pc, #24]	; (800c454 <_svfiprintf_r+0x1f8>)
 800c43c:	a904      	add	r1, sp, #16
 800c43e:	4638      	mov	r0, r7
 800c440:	f7fc f97c 	bl	800873c <_printf_i>
 800c444:	e7eb      	b.n	800c41e <_svfiprintf_r+0x1c2>
 800c446:	bf00      	nop
 800c448:	0800d03c 	.word	0x0800d03c
 800c44c:	0800d046 	.word	0x0800d046
 800c450:	080081f5 	.word	0x080081f5
 800c454:	0800c1a5 	.word	0x0800c1a5
 800c458:	0800d042 	.word	0x0800d042

0800c45c <__sfputc_r>:
 800c45c:	6893      	ldr	r3, [r2, #8]
 800c45e:	3b01      	subs	r3, #1
 800c460:	2b00      	cmp	r3, #0
 800c462:	b410      	push	{r4}
 800c464:	6093      	str	r3, [r2, #8]
 800c466:	da08      	bge.n	800c47a <__sfputc_r+0x1e>
 800c468:	6994      	ldr	r4, [r2, #24]
 800c46a:	42a3      	cmp	r3, r4
 800c46c:	db01      	blt.n	800c472 <__sfputc_r+0x16>
 800c46e:	290a      	cmp	r1, #10
 800c470:	d103      	bne.n	800c47a <__sfputc_r+0x1e>
 800c472:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c476:	f7fd bbf7 	b.w	8009c68 <__swbuf_r>
 800c47a:	6813      	ldr	r3, [r2, #0]
 800c47c:	1c58      	adds	r0, r3, #1
 800c47e:	6010      	str	r0, [r2, #0]
 800c480:	7019      	strb	r1, [r3, #0]
 800c482:	4608      	mov	r0, r1
 800c484:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c488:	4770      	bx	lr

0800c48a <__sfputs_r>:
 800c48a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c48c:	4606      	mov	r6, r0
 800c48e:	460f      	mov	r7, r1
 800c490:	4614      	mov	r4, r2
 800c492:	18d5      	adds	r5, r2, r3
 800c494:	42ac      	cmp	r4, r5
 800c496:	d101      	bne.n	800c49c <__sfputs_r+0x12>
 800c498:	2000      	movs	r0, #0
 800c49a:	e007      	b.n	800c4ac <__sfputs_r+0x22>
 800c49c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4a0:	463a      	mov	r2, r7
 800c4a2:	4630      	mov	r0, r6
 800c4a4:	f7ff ffda 	bl	800c45c <__sfputc_r>
 800c4a8:	1c43      	adds	r3, r0, #1
 800c4aa:	d1f3      	bne.n	800c494 <__sfputs_r+0xa>
 800c4ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c4b0 <_vfiprintf_r>:
 800c4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4b4:	460d      	mov	r5, r1
 800c4b6:	b09d      	sub	sp, #116	; 0x74
 800c4b8:	4614      	mov	r4, r2
 800c4ba:	4698      	mov	r8, r3
 800c4bc:	4606      	mov	r6, r0
 800c4be:	b118      	cbz	r0, 800c4c8 <_vfiprintf_r+0x18>
 800c4c0:	6983      	ldr	r3, [r0, #24]
 800c4c2:	b90b      	cbnz	r3, 800c4c8 <_vfiprintf_r+0x18>
 800c4c4:	f7fe fc24 	bl	800ad10 <__sinit>
 800c4c8:	4b89      	ldr	r3, [pc, #548]	; (800c6f0 <_vfiprintf_r+0x240>)
 800c4ca:	429d      	cmp	r5, r3
 800c4cc:	d11b      	bne.n	800c506 <_vfiprintf_r+0x56>
 800c4ce:	6875      	ldr	r5, [r6, #4]
 800c4d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c4d2:	07d9      	lsls	r1, r3, #31
 800c4d4:	d405      	bmi.n	800c4e2 <_vfiprintf_r+0x32>
 800c4d6:	89ab      	ldrh	r3, [r5, #12]
 800c4d8:	059a      	lsls	r2, r3, #22
 800c4da:	d402      	bmi.n	800c4e2 <_vfiprintf_r+0x32>
 800c4dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c4de:	f7ff f828 	bl	800b532 <__retarget_lock_acquire_recursive>
 800c4e2:	89ab      	ldrh	r3, [r5, #12]
 800c4e4:	071b      	lsls	r3, r3, #28
 800c4e6:	d501      	bpl.n	800c4ec <_vfiprintf_r+0x3c>
 800c4e8:	692b      	ldr	r3, [r5, #16]
 800c4ea:	b9eb      	cbnz	r3, 800c528 <_vfiprintf_r+0x78>
 800c4ec:	4629      	mov	r1, r5
 800c4ee:	4630      	mov	r0, r6
 800c4f0:	f7fd fc0c 	bl	8009d0c <__swsetup_r>
 800c4f4:	b1c0      	cbz	r0, 800c528 <_vfiprintf_r+0x78>
 800c4f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c4f8:	07dc      	lsls	r4, r3, #31
 800c4fa:	d50e      	bpl.n	800c51a <_vfiprintf_r+0x6a>
 800c4fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c500:	b01d      	add	sp, #116	; 0x74
 800c502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c506:	4b7b      	ldr	r3, [pc, #492]	; (800c6f4 <_vfiprintf_r+0x244>)
 800c508:	429d      	cmp	r5, r3
 800c50a:	d101      	bne.n	800c510 <_vfiprintf_r+0x60>
 800c50c:	68b5      	ldr	r5, [r6, #8]
 800c50e:	e7df      	b.n	800c4d0 <_vfiprintf_r+0x20>
 800c510:	4b79      	ldr	r3, [pc, #484]	; (800c6f8 <_vfiprintf_r+0x248>)
 800c512:	429d      	cmp	r5, r3
 800c514:	bf08      	it	eq
 800c516:	68f5      	ldreq	r5, [r6, #12]
 800c518:	e7da      	b.n	800c4d0 <_vfiprintf_r+0x20>
 800c51a:	89ab      	ldrh	r3, [r5, #12]
 800c51c:	0598      	lsls	r0, r3, #22
 800c51e:	d4ed      	bmi.n	800c4fc <_vfiprintf_r+0x4c>
 800c520:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c522:	f7ff f807 	bl	800b534 <__retarget_lock_release_recursive>
 800c526:	e7e9      	b.n	800c4fc <_vfiprintf_r+0x4c>
 800c528:	2300      	movs	r3, #0
 800c52a:	9309      	str	r3, [sp, #36]	; 0x24
 800c52c:	2320      	movs	r3, #32
 800c52e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c532:	f8cd 800c 	str.w	r8, [sp, #12]
 800c536:	2330      	movs	r3, #48	; 0x30
 800c538:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c6fc <_vfiprintf_r+0x24c>
 800c53c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c540:	f04f 0901 	mov.w	r9, #1
 800c544:	4623      	mov	r3, r4
 800c546:	469a      	mov	sl, r3
 800c548:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c54c:	b10a      	cbz	r2, 800c552 <_vfiprintf_r+0xa2>
 800c54e:	2a25      	cmp	r2, #37	; 0x25
 800c550:	d1f9      	bne.n	800c546 <_vfiprintf_r+0x96>
 800c552:	ebba 0b04 	subs.w	fp, sl, r4
 800c556:	d00b      	beq.n	800c570 <_vfiprintf_r+0xc0>
 800c558:	465b      	mov	r3, fp
 800c55a:	4622      	mov	r2, r4
 800c55c:	4629      	mov	r1, r5
 800c55e:	4630      	mov	r0, r6
 800c560:	f7ff ff93 	bl	800c48a <__sfputs_r>
 800c564:	3001      	adds	r0, #1
 800c566:	f000 80aa 	beq.w	800c6be <_vfiprintf_r+0x20e>
 800c56a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c56c:	445a      	add	r2, fp
 800c56e:	9209      	str	r2, [sp, #36]	; 0x24
 800c570:	f89a 3000 	ldrb.w	r3, [sl]
 800c574:	2b00      	cmp	r3, #0
 800c576:	f000 80a2 	beq.w	800c6be <_vfiprintf_r+0x20e>
 800c57a:	2300      	movs	r3, #0
 800c57c:	f04f 32ff 	mov.w	r2, #4294967295
 800c580:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c584:	f10a 0a01 	add.w	sl, sl, #1
 800c588:	9304      	str	r3, [sp, #16]
 800c58a:	9307      	str	r3, [sp, #28]
 800c58c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c590:	931a      	str	r3, [sp, #104]	; 0x68
 800c592:	4654      	mov	r4, sl
 800c594:	2205      	movs	r2, #5
 800c596:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c59a:	4858      	ldr	r0, [pc, #352]	; (800c6fc <_vfiprintf_r+0x24c>)
 800c59c:	f7f3 fe20 	bl	80001e0 <memchr>
 800c5a0:	9a04      	ldr	r2, [sp, #16]
 800c5a2:	b9d8      	cbnz	r0, 800c5dc <_vfiprintf_r+0x12c>
 800c5a4:	06d1      	lsls	r1, r2, #27
 800c5a6:	bf44      	itt	mi
 800c5a8:	2320      	movmi	r3, #32
 800c5aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5ae:	0713      	lsls	r3, r2, #28
 800c5b0:	bf44      	itt	mi
 800c5b2:	232b      	movmi	r3, #43	; 0x2b
 800c5b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5b8:	f89a 3000 	ldrb.w	r3, [sl]
 800c5bc:	2b2a      	cmp	r3, #42	; 0x2a
 800c5be:	d015      	beq.n	800c5ec <_vfiprintf_r+0x13c>
 800c5c0:	9a07      	ldr	r2, [sp, #28]
 800c5c2:	4654      	mov	r4, sl
 800c5c4:	2000      	movs	r0, #0
 800c5c6:	f04f 0c0a 	mov.w	ip, #10
 800c5ca:	4621      	mov	r1, r4
 800c5cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c5d0:	3b30      	subs	r3, #48	; 0x30
 800c5d2:	2b09      	cmp	r3, #9
 800c5d4:	d94e      	bls.n	800c674 <_vfiprintf_r+0x1c4>
 800c5d6:	b1b0      	cbz	r0, 800c606 <_vfiprintf_r+0x156>
 800c5d8:	9207      	str	r2, [sp, #28]
 800c5da:	e014      	b.n	800c606 <_vfiprintf_r+0x156>
 800c5dc:	eba0 0308 	sub.w	r3, r0, r8
 800c5e0:	fa09 f303 	lsl.w	r3, r9, r3
 800c5e4:	4313      	orrs	r3, r2
 800c5e6:	9304      	str	r3, [sp, #16]
 800c5e8:	46a2      	mov	sl, r4
 800c5ea:	e7d2      	b.n	800c592 <_vfiprintf_r+0xe2>
 800c5ec:	9b03      	ldr	r3, [sp, #12]
 800c5ee:	1d19      	adds	r1, r3, #4
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	9103      	str	r1, [sp, #12]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	bfbb      	ittet	lt
 800c5f8:	425b      	neglt	r3, r3
 800c5fa:	f042 0202 	orrlt.w	r2, r2, #2
 800c5fe:	9307      	strge	r3, [sp, #28]
 800c600:	9307      	strlt	r3, [sp, #28]
 800c602:	bfb8      	it	lt
 800c604:	9204      	strlt	r2, [sp, #16]
 800c606:	7823      	ldrb	r3, [r4, #0]
 800c608:	2b2e      	cmp	r3, #46	; 0x2e
 800c60a:	d10c      	bne.n	800c626 <_vfiprintf_r+0x176>
 800c60c:	7863      	ldrb	r3, [r4, #1]
 800c60e:	2b2a      	cmp	r3, #42	; 0x2a
 800c610:	d135      	bne.n	800c67e <_vfiprintf_r+0x1ce>
 800c612:	9b03      	ldr	r3, [sp, #12]
 800c614:	1d1a      	adds	r2, r3, #4
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	9203      	str	r2, [sp, #12]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	bfb8      	it	lt
 800c61e:	f04f 33ff 	movlt.w	r3, #4294967295
 800c622:	3402      	adds	r4, #2
 800c624:	9305      	str	r3, [sp, #20]
 800c626:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c70c <_vfiprintf_r+0x25c>
 800c62a:	7821      	ldrb	r1, [r4, #0]
 800c62c:	2203      	movs	r2, #3
 800c62e:	4650      	mov	r0, sl
 800c630:	f7f3 fdd6 	bl	80001e0 <memchr>
 800c634:	b140      	cbz	r0, 800c648 <_vfiprintf_r+0x198>
 800c636:	2340      	movs	r3, #64	; 0x40
 800c638:	eba0 000a 	sub.w	r0, r0, sl
 800c63c:	fa03 f000 	lsl.w	r0, r3, r0
 800c640:	9b04      	ldr	r3, [sp, #16]
 800c642:	4303      	orrs	r3, r0
 800c644:	3401      	adds	r4, #1
 800c646:	9304      	str	r3, [sp, #16]
 800c648:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c64c:	482c      	ldr	r0, [pc, #176]	; (800c700 <_vfiprintf_r+0x250>)
 800c64e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c652:	2206      	movs	r2, #6
 800c654:	f7f3 fdc4 	bl	80001e0 <memchr>
 800c658:	2800      	cmp	r0, #0
 800c65a:	d03f      	beq.n	800c6dc <_vfiprintf_r+0x22c>
 800c65c:	4b29      	ldr	r3, [pc, #164]	; (800c704 <_vfiprintf_r+0x254>)
 800c65e:	bb1b      	cbnz	r3, 800c6a8 <_vfiprintf_r+0x1f8>
 800c660:	9b03      	ldr	r3, [sp, #12]
 800c662:	3307      	adds	r3, #7
 800c664:	f023 0307 	bic.w	r3, r3, #7
 800c668:	3308      	adds	r3, #8
 800c66a:	9303      	str	r3, [sp, #12]
 800c66c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c66e:	443b      	add	r3, r7
 800c670:	9309      	str	r3, [sp, #36]	; 0x24
 800c672:	e767      	b.n	800c544 <_vfiprintf_r+0x94>
 800c674:	fb0c 3202 	mla	r2, ip, r2, r3
 800c678:	460c      	mov	r4, r1
 800c67a:	2001      	movs	r0, #1
 800c67c:	e7a5      	b.n	800c5ca <_vfiprintf_r+0x11a>
 800c67e:	2300      	movs	r3, #0
 800c680:	3401      	adds	r4, #1
 800c682:	9305      	str	r3, [sp, #20]
 800c684:	4619      	mov	r1, r3
 800c686:	f04f 0c0a 	mov.w	ip, #10
 800c68a:	4620      	mov	r0, r4
 800c68c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c690:	3a30      	subs	r2, #48	; 0x30
 800c692:	2a09      	cmp	r2, #9
 800c694:	d903      	bls.n	800c69e <_vfiprintf_r+0x1ee>
 800c696:	2b00      	cmp	r3, #0
 800c698:	d0c5      	beq.n	800c626 <_vfiprintf_r+0x176>
 800c69a:	9105      	str	r1, [sp, #20]
 800c69c:	e7c3      	b.n	800c626 <_vfiprintf_r+0x176>
 800c69e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c6a2:	4604      	mov	r4, r0
 800c6a4:	2301      	movs	r3, #1
 800c6a6:	e7f0      	b.n	800c68a <_vfiprintf_r+0x1da>
 800c6a8:	ab03      	add	r3, sp, #12
 800c6aa:	9300      	str	r3, [sp, #0]
 800c6ac:	462a      	mov	r2, r5
 800c6ae:	4b16      	ldr	r3, [pc, #88]	; (800c708 <_vfiprintf_r+0x258>)
 800c6b0:	a904      	add	r1, sp, #16
 800c6b2:	4630      	mov	r0, r6
 800c6b4:	f7fb fd9e 	bl	80081f4 <_printf_float>
 800c6b8:	4607      	mov	r7, r0
 800c6ba:	1c78      	adds	r0, r7, #1
 800c6bc:	d1d6      	bne.n	800c66c <_vfiprintf_r+0x1bc>
 800c6be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c6c0:	07d9      	lsls	r1, r3, #31
 800c6c2:	d405      	bmi.n	800c6d0 <_vfiprintf_r+0x220>
 800c6c4:	89ab      	ldrh	r3, [r5, #12]
 800c6c6:	059a      	lsls	r2, r3, #22
 800c6c8:	d402      	bmi.n	800c6d0 <_vfiprintf_r+0x220>
 800c6ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6cc:	f7fe ff32 	bl	800b534 <__retarget_lock_release_recursive>
 800c6d0:	89ab      	ldrh	r3, [r5, #12]
 800c6d2:	065b      	lsls	r3, r3, #25
 800c6d4:	f53f af12 	bmi.w	800c4fc <_vfiprintf_r+0x4c>
 800c6d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c6da:	e711      	b.n	800c500 <_vfiprintf_r+0x50>
 800c6dc:	ab03      	add	r3, sp, #12
 800c6de:	9300      	str	r3, [sp, #0]
 800c6e0:	462a      	mov	r2, r5
 800c6e2:	4b09      	ldr	r3, [pc, #36]	; (800c708 <_vfiprintf_r+0x258>)
 800c6e4:	a904      	add	r1, sp, #16
 800c6e6:	4630      	mov	r0, r6
 800c6e8:	f7fc f828 	bl	800873c <_printf_i>
 800c6ec:	e7e4      	b.n	800c6b8 <_vfiprintf_r+0x208>
 800c6ee:	bf00      	nop
 800c6f0:	0800ce24 	.word	0x0800ce24
 800c6f4:	0800ce44 	.word	0x0800ce44
 800c6f8:	0800ce04 	.word	0x0800ce04
 800c6fc:	0800d03c 	.word	0x0800d03c
 800c700:	0800d046 	.word	0x0800d046
 800c704:	080081f5 	.word	0x080081f5
 800c708:	0800c48b 	.word	0x0800c48b
 800c70c:	0800d042 	.word	0x0800d042

0800c710 <nan>:
 800c710:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c718 <nan+0x8>
 800c714:	4770      	bx	lr
 800c716:	bf00      	nop
 800c718:	00000000 	.word	0x00000000
 800c71c:	7ff80000 	.word	0x7ff80000

0800c720 <_sbrk_r>:
 800c720:	b538      	push	{r3, r4, r5, lr}
 800c722:	4d06      	ldr	r5, [pc, #24]	; (800c73c <_sbrk_r+0x1c>)
 800c724:	2300      	movs	r3, #0
 800c726:	4604      	mov	r4, r0
 800c728:	4608      	mov	r0, r1
 800c72a:	602b      	str	r3, [r5, #0]
 800c72c:	f7f5 fb38 	bl	8001da0 <_sbrk>
 800c730:	1c43      	adds	r3, r0, #1
 800c732:	d102      	bne.n	800c73a <_sbrk_r+0x1a>
 800c734:	682b      	ldr	r3, [r5, #0]
 800c736:	b103      	cbz	r3, 800c73a <_sbrk_r+0x1a>
 800c738:	6023      	str	r3, [r4, #0]
 800c73a:	bd38      	pop	{r3, r4, r5, pc}
 800c73c:	20000430 	.word	0x20000430

0800c740 <__sread>:
 800c740:	b510      	push	{r4, lr}
 800c742:	460c      	mov	r4, r1
 800c744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c748:	f000 f93a 	bl	800c9c0 <_read_r>
 800c74c:	2800      	cmp	r0, #0
 800c74e:	bfab      	itete	ge
 800c750:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c752:	89a3      	ldrhlt	r3, [r4, #12]
 800c754:	181b      	addge	r3, r3, r0
 800c756:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c75a:	bfac      	ite	ge
 800c75c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c75e:	81a3      	strhlt	r3, [r4, #12]
 800c760:	bd10      	pop	{r4, pc}

0800c762 <__swrite>:
 800c762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c766:	461f      	mov	r7, r3
 800c768:	898b      	ldrh	r3, [r1, #12]
 800c76a:	05db      	lsls	r3, r3, #23
 800c76c:	4605      	mov	r5, r0
 800c76e:	460c      	mov	r4, r1
 800c770:	4616      	mov	r6, r2
 800c772:	d505      	bpl.n	800c780 <__swrite+0x1e>
 800c774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c778:	2302      	movs	r3, #2
 800c77a:	2200      	movs	r2, #0
 800c77c:	f000 f8b8 	bl	800c8f0 <_lseek_r>
 800c780:	89a3      	ldrh	r3, [r4, #12]
 800c782:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c786:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c78a:	81a3      	strh	r3, [r4, #12]
 800c78c:	4632      	mov	r2, r6
 800c78e:	463b      	mov	r3, r7
 800c790:	4628      	mov	r0, r5
 800c792:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c796:	f000 b837 	b.w	800c808 <_write_r>

0800c79a <__sseek>:
 800c79a:	b510      	push	{r4, lr}
 800c79c:	460c      	mov	r4, r1
 800c79e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7a2:	f000 f8a5 	bl	800c8f0 <_lseek_r>
 800c7a6:	1c43      	adds	r3, r0, #1
 800c7a8:	89a3      	ldrh	r3, [r4, #12]
 800c7aa:	bf15      	itete	ne
 800c7ac:	6560      	strne	r0, [r4, #84]	; 0x54
 800c7ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c7b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c7b6:	81a3      	strheq	r3, [r4, #12]
 800c7b8:	bf18      	it	ne
 800c7ba:	81a3      	strhne	r3, [r4, #12]
 800c7bc:	bd10      	pop	{r4, pc}

0800c7be <__sclose>:
 800c7be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7c2:	f000 b851 	b.w	800c868 <_close_r>

0800c7c6 <strncmp>:
 800c7c6:	b510      	push	{r4, lr}
 800c7c8:	b17a      	cbz	r2, 800c7ea <strncmp+0x24>
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	3901      	subs	r1, #1
 800c7ce:	1884      	adds	r4, r0, r2
 800c7d0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c7d4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c7d8:	4290      	cmp	r0, r2
 800c7da:	d101      	bne.n	800c7e0 <strncmp+0x1a>
 800c7dc:	42a3      	cmp	r3, r4
 800c7de:	d101      	bne.n	800c7e4 <strncmp+0x1e>
 800c7e0:	1a80      	subs	r0, r0, r2
 800c7e2:	bd10      	pop	{r4, pc}
 800c7e4:	2800      	cmp	r0, #0
 800c7e6:	d1f3      	bne.n	800c7d0 <strncmp+0xa>
 800c7e8:	e7fa      	b.n	800c7e0 <strncmp+0x1a>
 800c7ea:	4610      	mov	r0, r2
 800c7ec:	e7f9      	b.n	800c7e2 <strncmp+0x1c>

0800c7ee <__ascii_wctomb>:
 800c7ee:	b149      	cbz	r1, 800c804 <__ascii_wctomb+0x16>
 800c7f0:	2aff      	cmp	r2, #255	; 0xff
 800c7f2:	bf85      	ittet	hi
 800c7f4:	238a      	movhi	r3, #138	; 0x8a
 800c7f6:	6003      	strhi	r3, [r0, #0]
 800c7f8:	700a      	strbls	r2, [r1, #0]
 800c7fa:	f04f 30ff 	movhi.w	r0, #4294967295
 800c7fe:	bf98      	it	ls
 800c800:	2001      	movls	r0, #1
 800c802:	4770      	bx	lr
 800c804:	4608      	mov	r0, r1
 800c806:	4770      	bx	lr

0800c808 <_write_r>:
 800c808:	b538      	push	{r3, r4, r5, lr}
 800c80a:	4d07      	ldr	r5, [pc, #28]	; (800c828 <_write_r+0x20>)
 800c80c:	4604      	mov	r4, r0
 800c80e:	4608      	mov	r0, r1
 800c810:	4611      	mov	r1, r2
 800c812:	2200      	movs	r2, #0
 800c814:	602a      	str	r2, [r5, #0]
 800c816:	461a      	mov	r2, r3
 800c818:	f7f5 fa71 	bl	8001cfe <_write>
 800c81c:	1c43      	adds	r3, r0, #1
 800c81e:	d102      	bne.n	800c826 <_write_r+0x1e>
 800c820:	682b      	ldr	r3, [r5, #0]
 800c822:	b103      	cbz	r3, 800c826 <_write_r+0x1e>
 800c824:	6023      	str	r3, [r4, #0]
 800c826:	bd38      	pop	{r3, r4, r5, pc}
 800c828:	20000430 	.word	0x20000430

0800c82c <__assert_func>:
 800c82c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c82e:	4614      	mov	r4, r2
 800c830:	461a      	mov	r2, r3
 800c832:	4b09      	ldr	r3, [pc, #36]	; (800c858 <__assert_func+0x2c>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	4605      	mov	r5, r0
 800c838:	68d8      	ldr	r0, [r3, #12]
 800c83a:	b14c      	cbz	r4, 800c850 <__assert_func+0x24>
 800c83c:	4b07      	ldr	r3, [pc, #28]	; (800c85c <__assert_func+0x30>)
 800c83e:	9100      	str	r1, [sp, #0]
 800c840:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c844:	4906      	ldr	r1, [pc, #24]	; (800c860 <__assert_func+0x34>)
 800c846:	462b      	mov	r3, r5
 800c848:	f000 f81e 	bl	800c888 <fiprintf>
 800c84c:	f000 f8ca 	bl	800c9e4 <abort>
 800c850:	4b04      	ldr	r3, [pc, #16]	; (800c864 <__assert_func+0x38>)
 800c852:	461c      	mov	r4, r3
 800c854:	e7f3      	b.n	800c83e <__assert_func+0x12>
 800c856:	bf00      	nop
 800c858:	20000018 	.word	0x20000018
 800c85c:	0800d04d 	.word	0x0800d04d
 800c860:	0800d05a 	.word	0x0800d05a
 800c864:	0800d088 	.word	0x0800d088

0800c868 <_close_r>:
 800c868:	b538      	push	{r3, r4, r5, lr}
 800c86a:	4d06      	ldr	r5, [pc, #24]	; (800c884 <_close_r+0x1c>)
 800c86c:	2300      	movs	r3, #0
 800c86e:	4604      	mov	r4, r0
 800c870:	4608      	mov	r0, r1
 800c872:	602b      	str	r3, [r5, #0]
 800c874:	f7f5 fa5f 	bl	8001d36 <_close>
 800c878:	1c43      	adds	r3, r0, #1
 800c87a:	d102      	bne.n	800c882 <_close_r+0x1a>
 800c87c:	682b      	ldr	r3, [r5, #0]
 800c87e:	b103      	cbz	r3, 800c882 <_close_r+0x1a>
 800c880:	6023      	str	r3, [r4, #0]
 800c882:	bd38      	pop	{r3, r4, r5, pc}
 800c884:	20000430 	.word	0x20000430

0800c888 <fiprintf>:
 800c888:	b40e      	push	{r1, r2, r3}
 800c88a:	b503      	push	{r0, r1, lr}
 800c88c:	4601      	mov	r1, r0
 800c88e:	ab03      	add	r3, sp, #12
 800c890:	4805      	ldr	r0, [pc, #20]	; (800c8a8 <fiprintf+0x20>)
 800c892:	f853 2b04 	ldr.w	r2, [r3], #4
 800c896:	6800      	ldr	r0, [r0, #0]
 800c898:	9301      	str	r3, [sp, #4]
 800c89a:	f7ff fe09 	bl	800c4b0 <_vfiprintf_r>
 800c89e:	b002      	add	sp, #8
 800c8a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c8a4:	b003      	add	sp, #12
 800c8a6:	4770      	bx	lr
 800c8a8:	20000018 	.word	0x20000018

0800c8ac <_fstat_r>:
 800c8ac:	b538      	push	{r3, r4, r5, lr}
 800c8ae:	4d07      	ldr	r5, [pc, #28]	; (800c8cc <_fstat_r+0x20>)
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	4604      	mov	r4, r0
 800c8b4:	4608      	mov	r0, r1
 800c8b6:	4611      	mov	r1, r2
 800c8b8:	602b      	str	r3, [r5, #0]
 800c8ba:	f7f5 fa48 	bl	8001d4e <_fstat>
 800c8be:	1c43      	adds	r3, r0, #1
 800c8c0:	d102      	bne.n	800c8c8 <_fstat_r+0x1c>
 800c8c2:	682b      	ldr	r3, [r5, #0]
 800c8c4:	b103      	cbz	r3, 800c8c8 <_fstat_r+0x1c>
 800c8c6:	6023      	str	r3, [r4, #0]
 800c8c8:	bd38      	pop	{r3, r4, r5, pc}
 800c8ca:	bf00      	nop
 800c8cc:	20000430 	.word	0x20000430

0800c8d0 <_isatty_r>:
 800c8d0:	b538      	push	{r3, r4, r5, lr}
 800c8d2:	4d06      	ldr	r5, [pc, #24]	; (800c8ec <_isatty_r+0x1c>)
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	4604      	mov	r4, r0
 800c8d8:	4608      	mov	r0, r1
 800c8da:	602b      	str	r3, [r5, #0]
 800c8dc:	f7f5 fa47 	bl	8001d6e <_isatty>
 800c8e0:	1c43      	adds	r3, r0, #1
 800c8e2:	d102      	bne.n	800c8ea <_isatty_r+0x1a>
 800c8e4:	682b      	ldr	r3, [r5, #0]
 800c8e6:	b103      	cbz	r3, 800c8ea <_isatty_r+0x1a>
 800c8e8:	6023      	str	r3, [r4, #0]
 800c8ea:	bd38      	pop	{r3, r4, r5, pc}
 800c8ec:	20000430 	.word	0x20000430

0800c8f0 <_lseek_r>:
 800c8f0:	b538      	push	{r3, r4, r5, lr}
 800c8f2:	4d07      	ldr	r5, [pc, #28]	; (800c910 <_lseek_r+0x20>)
 800c8f4:	4604      	mov	r4, r0
 800c8f6:	4608      	mov	r0, r1
 800c8f8:	4611      	mov	r1, r2
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	602a      	str	r2, [r5, #0]
 800c8fe:	461a      	mov	r2, r3
 800c900:	f7f5 fa40 	bl	8001d84 <_lseek>
 800c904:	1c43      	adds	r3, r0, #1
 800c906:	d102      	bne.n	800c90e <_lseek_r+0x1e>
 800c908:	682b      	ldr	r3, [r5, #0]
 800c90a:	b103      	cbz	r3, 800c90e <_lseek_r+0x1e>
 800c90c:	6023      	str	r3, [r4, #0]
 800c90e:	bd38      	pop	{r3, r4, r5, pc}
 800c910:	20000430 	.word	0x20000430

0800c914 <memmove>:
 800c914:	4288      	cmp	r0, r1
 800c916:	b510      	push	{r4, lr}
 800c918:	eb01 0402 	add.w	r4, r1, r2
 800c91c:	d902      	bls.n	800c924 <memmove+0x10>
 800c91e:	4284      	cmp	r4, r0
 800c920:	4623      	mov	r3, r4
 800c922:	d807      	bhi.n	800c934 <memmove+0x20>
 800c924:	1e43      	subs	r3, r0, #1
 800c926:	42a1      	cmp	r1, r4
 800c928:	d008      	beq.n	800c93c <memmove+0x28>
 800c92a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c92e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c932:	e7f8      	b.n	800c926 <memmove+0x12>
 800c934:	4402      	add	r2, r0
 800c936:	4601      	mov	r1, r0
 800c938:	428a      	cmp	r2, r1
 800c93a:	d100      	bne.n	800c93e <memmove+0x2a>
 800c93c:	bd10      	pop	{r4, pc}
 800c93e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c942:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c946:	e7f7      	b.n	800c938 <memmove+0x24>

0800c948 <__malloc_lock>:
 800c948:	4801      	ldr	r0, [pc, #4]	; (800c950 <__malloc_lock+0x8>)
 800c94a:	f7fe bdf2 	b.w	800b532 <__retarget_lock_acquire_recursive>
 800c94e:	bf00      	nop
 800c950:	20000424 	.word	0x20000424

0800c954 <__malloc_unlock>:
 800c954:	4801      	ldr	r0, [pc, #4]	; (800c95c <__malloc_unlock+0x8>)
 800c956:	f7fe bded 	b.w	800b534 <__retarget_lock_release_recursive>
 800c95a:	bf00      	nop
 800c95c:	20000424 	.word	0x20000424

0800c960 <_realloc_r>:
 800c960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c964:	4680      	mov	r8, r0
 800c966:	4614      	mov	r4, r2
 800c968:	460e      	mov	r6, r1
 800c96a:	b921      	cbnz	r1, 800c976 <_realloc_r+0x16>
 800c96c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c970:	4611      	mov	r1, r2
 800c972:	f7ff bba3 	b.w	800c0bc <_malloc_r>
 800c976:	b92a      	cbnz	r2, 800c984 <_realloc_r+0x24>
 800c978:	f7ff fb34 	bl	800bfe4 <_free_r>
 800c97c:	4625      	mov	r5, r4
 800c97e:	4628      	mov	r0, r5
 800c980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c984:	f000 f835 	bl	800c9f2 <_malloc_usable_size_r>
 800c988:	4284      	cmp	r4, r0
 800c98a:	4607      	mov	r7, r0
 800c98c:	d802      	bhi.n	800c994 <_realloc_r+0x34>
 800c98e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c992:	d812      	bhi.n	800c9ba <_realloc_r+0x5a>
 800c994:	4621      	mov	r1, r4
 800c996:	4640      	mov	r0, r8
 800c998:	f7ff fb90 	bl	800c0bc <_malloc_r>
 800c99c:	4605      	mov	r5, r0
 800c99e:	2800      	cmp	r0, #0
 800c9a0:	d0ed      	beq.n	800c97e <_realloc_r+0x1e>
 800c9a2:	42bc      	cmp	r4, r7
 800c9a4:	4622      	mov	r2, r4
 800c9a6:	4631      	mov	r1, r6
 800c9a8:	bf28      	it	cs
 800c9aa:	463a      	movcs	r2, r7
 800c9ac:	f7fb fb6c 	bl	8008088 <memcpy>
 800c9b0:	4631      	mov	r1, r6
 800c9b2:	4640      	mov	r0, r8
 800c9b4:	f7ff fb16 	bl	800bfe4 <_free_r>
 800c9b8:	e7e1      	b.n	800c97e <_realloc_r+0x1e>
 800c9ba:	4635      	mov	r5, r6
 800c9bc:	e7df      	b.n	800c97e <_realloc_r+0x1e>
	...

0800c9c0 <_read_r>:
 800c9c0:	b538      	push	{r3, r4, r5, lr}
 800c9c2:	4d07      	ldr	r5, [pc, #28]	; (800c9e0 <_read_r+0x20>)
 800c9c4:	4604      	mov	r4, r0
 800c9c6:	4608      	mov	r0, r1
 800c9c8:	4611      	mov	r1, r2
 800c9ca:	2200      	movs	r2, #0
 800c9cc:	602a      	str	r2, [r5, #0]
 800c9ce:	461a      	mov	r2, r3
 800c9d0:	f7f5 f978 	bl	8001cc4 <_read>
 800c9d4:	1c43      	adds	r3, r0, #1
 800c9d6:	d102      	bne.n	800c9de <_read_r+0x1e>
 800c9d8:	682b      	ldr	r3, [r5, #0]
 800c9da:	b103      	cbz	r3, 800c9de <_read_r+0x1e>
 800c9dc:	6023      	str	r3, [r4, #0]
 800c9de:	bd38      	pop	{r3, r4, r5, pc}
 800c9e0:	20000430 	.word	0x20000430

0800c9e4 <abort>:
 800c9e4:	b508      	push	{r3, lr}
 800c9e6:	2006      	movs	r0, #6
 800c9e8:	f000 f834 	bl	800ca54 <raise>
 800c9ec:	2001      	movs	r0, #1
 800c9ee:	f7f5 f95f 	bl	8001cb0 <_exit>

0800c9f2 <_malloc_usable_size_r>:
 800c9f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9f6:	1f18      	subs	r0, r3, #4
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	bfbc      	itt	lt
 800c9fc:	580b      	ldrlt	r3, [r1, r0]
 800c9fe:	18c0      	addlt	r0, r0, r3
 800ca00:	4770      	bx	lr

0800ca02 <_raise_r>:
 800ca02:	291f      	cmp	r1, #31
 800ca04:	b538      	push	{r3, r4, r5, lr}
 800ca06:	4604      	mov	r4, r0
 800ca08:	460d      	mov	r5, r1
 800ca0a:	d904      	bls.n	800ca16 <_raise_r+0x14>
 800ca0c:	2316      	movs	r3, #22
 800ca0e:	6003      	str	r3, [r0, #0]
 800ca10:	f04f 30ff 	mov.w	r0, #4294967295
 800ca14:	bd38      	pop	{r3, r4, r5, pc}
 800ca16:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ca18:	b112      	cbz	r2, 800ca20 <_raise_r+0x1e>
 800ca1a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ca1e:	b94b      	cbnz	r3, 800ca34 <_raise_r+0x32>
 800ca20:	4620      	mov	r0, r4
 800ca22:	f000 f831 	bl	800ca88 <_getpid_r>
 800ca26:	462a      	mov	r2, r5
 800ca28:	4601      	mov	r1, r0
 800ca2a:	4620      	mov	r0, r4
 800ca2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca30:	f000 b818 	b.w	800ca64 <_kill_r>
 800ca34:	2b01      	cmp	r3, #1
 800ca36:	d00a      	beq.n	800ca4e <_raise_r+0x4c>
 800ca38:	1c59      	adds	r1, r3, #1
 800ca3a:	d103      	bne.n	800ca44 <_raise_r+0x42>
 800ca3c:	2316      	movs	r3, #22
 800ca3e:	6003      	str	r3, [r0, #0]
 800ca40:	2001      	movs	r0, #1
 800ca42:	e7e7      	b.n	800ca14 <_raise_r+0x12>
 800ca44:	2400      	movs	r4, #0
 800ca46:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ca4a:	4628      	mov	r0, r5
 800ca4c:	4798      	blx	r3
 800ca4e:	2000      	movs	r0, #0
 800ca50:	e7e0      	b.n	800ca14 <_raise_r+0x12>
	...

0800ca54 <raise>:
 800ca54:	4b02      	ldr	r3, [pc, #8]	; (800ca60 <raise+0xc>)
 800ca56:	4601      	mov	r1, r0
 800ca58:	6818      	ldr	r0, [r3, #0]
 800ca5a:	f7ff bfd2 	b.w	800ca02 <_raise_r>
 800ca5e:	bf00      	nop
 800ca60:	20000018 	.word	0x20000018

0800ca64 <_kill_r>:
 800ca64:	b538      	push	{r3, r4, r5, lr}
 800ca66:	4d07      	ldr	r5, [pc, #28]	; (800ca84 <_kill_r+0x20>)
 800ca68:	2300      	movs	r3, #0
 800ca6a:	4604      	mov	r4, r0
 800ca6c:	4608      	mov	r0, r1
 800ca6e:	4611      	mov	r1, r2
 800ca70:	602b      	str	r3, [r5, #0]
 800ca72:	f7f5 f90d 	bl	8001c90 <_kill>
 800ca76:	1c43      	adds	r3, r0, #1
 800ca78:	d102      	bne.n	800ca80 <_kill_r+0x1c>
 800ca7a:	682b      	ldr	r3, [r5, #0]
 800ca7c:	b103      	cbz	r3, 800ca80 <_kill_r+0x1c>
 800ca7e:	6023      	str	r3, [r4, #0]
 800ca80:	bd38      	pop	{r3, r4, r5, pc}
 800ca82:	bf00      	nop
 800ca84:	20000430 	.word	0x20000430

0800ca88 <_getpid_r>:
 800ca88:	f7f5 b8fa 	b.w	8001c80 <_getpid>

0800ca8c <_init>:
 800ca8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca8e:	bf00      	nop
 800ca90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca92:	bc08      	pop	{r3}
 800ca94:	469e      	mov	lr, r3
 800ca96:	4770      	bx	lr

0800ca98 <_fini>:
 800ca98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca9a:	bf00      	nop
 800ca9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca9e:	bc08      	pop	{r3}
 800caa0:	469e      	mov	lr, r3
 800caa2:	4770      	bx	lr
