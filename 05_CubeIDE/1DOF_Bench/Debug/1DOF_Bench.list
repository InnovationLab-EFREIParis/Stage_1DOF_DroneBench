
1DOF_Bench.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e194  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006fc  0800e328  0800e328  0001e328  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ea24  0800ea24  00020278  2**0
                  CONTENTS
  4 .ARM          00000008  0800ea24  0800ea24  0001ea24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ea2c  0800ea2c  00020278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ea2c  0800ea2c  0001ea2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ea30  0800ea30  0001ea30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000278  20000000  0800ea34  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f0  20000278  0800ecac  00020278  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000568  0800ecac  00020568  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c001  00000000  00000000  000202a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003315  00000000  00000000  0003c2a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001770  00000000  00000000  0003f5c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001628  00000000  00000000  00040d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a6a2  00000000  00000000  00042358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b925  00000000  00000000  0006c9fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010bb10  00000000  00000000  0008831f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00193e2f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c4c  00000000  00000000  00193e80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000278 	.word	0x20000278
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e30c 	.word	0x0800e30c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000027c 	.word	0x2000027c
 80001cc:	0800e30c 	.word	0x0800e30c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t gaz_buffer[4];

int _write(int file, char *data, int len) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
	if ((file != STDOUT_FILENO) && (file != STDERR_FILENO)) {
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	2b01      	cmp	r3, #1
 8001008:	d00a      	beq.n	8001020 <_write+0x28>
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	2b02      	cmp	r3, #2
 800100e:	d007      	beq.n	8001020 <_write+0x28>
		errno = EBADF;
 8001010:	f008 fc4e 	bl	80098b0 <__errno>
 8001014:	4603      	mov	r3, r0
 8001016:	2209      	movs	r2, #9
 8001018:	601a      	str	r2, [r3, #0]
		return -1;
 800101a:	f04f 33ff 	mov.w	r3, #4294967295
 800101e:	e00f      	b.n	8001040 <_write+0x48>
	}

	// arbitrary timeout 1000
	HAL_StatusTypeDef status = HAL_UART_Transmit(&huart2, (uint8_t*) data, len,
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	b29a      	uxth	r2, r3
 8001024:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001028:	68b9      	ldr	r1, [r7, #8]
 800102a:	4807      	ldr	r0, [pc, #28]	; (8001048 <_write+0x50>)
 800102c:	f006 ff70 	bl	8007f10 <HAL_UART_Transmit>
 8001030:	4603      	mov	r3, r0
 8001032:	75fb      	strb	r3, [r7, #23]
			1000);

	// return # of bytes written - as best we can tell
	return (status == HAL_OK ? len : 0);
 8001034:	7dfb      	ldrb	r3, [r7, #23]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d101      	bne.n	800103e <_write+0x46>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	e000      	b.n	8001040 <_write+0x48>
 800103e:	2300      	movs	r3, #0
}
 8001040:	4618      	mov	r0, r3
 8001042:	3718      	adds	r7, #24
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	200003d8 	.word	0x200003d8

0800104c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800104c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800104e:	b09f      	sub	sp, #124	; 0x7c
 8001050:	af16      	add	r7, sp, #88	; 0x58
	/* USER CODE BEGIN 1 */

	enum states etat;
	etat = init_uc;
 8001052:	2300      	movs	r3, #0
 8001054:	77fb      	strb	r3, [r7, #31]
	// char gaz_data[4];
	//	int counter=4;
	double true_angle;
	//char buffer [size];

	int k = 1700;	//var used to increement speed in auto state
 8001056:	f240 63a4 	movw	r3, #1700	; 0x6a4
 800105a:	60fb      	str	r3, [r7, #12]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800105c:	f001 fbcc 	bl	80027f8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001060:	f000 fa5a 	bl	8001518 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001064:	f000 fc36 	bl	80018d4 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8001068:	f000 fbd6 	bl	8001818 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 800106c:	f000 faa6 	bl	80015bc <MX_ADC1_Init>
	MX_DMA_Init();
 8001070:	f000 fc02 	bl	8001878 <MX_DMA_Init>
	MX_TIM3_Init();
 8001074:	f000 fb58 	bl	8001728 <MX_TIM3_Init>
	MX_I2C1_Init();
 8001078:	f000 fb16 	bl	80016a8 <MX_I2C1_Init>
	//HAL_UART_Receive_IT(&huart2, (uint8_t*)gaz_buffer, 4);
	//blinkGreenLed(10, 100);
	// Welcome message on UART
	//sendWelcomeMsgRS232(&huart2);
	//la fonction au dessus pose des soucis
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800107c:	2104      	movs	r1, #4
 800107e:	48ae      	ldr	r0, [pc, #696]	; (8001338 <main+0x2ec>)
 8001080:	f005 fdec 	bl	8006c5c <HAL_TIM_PWM_Start>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		__HAL_UART_CLEAR_OREFLAG(&huart2);
 8001084:	4bad      	ldr	r3, [pc, #692]	; (800133c <main+0x2f0>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2208      	movs	r2, #8
 800108a:	621a      	str	r2, [r3, #32]

		//differents etats qu'on peut avoir

		//---------changement d'etat-------

		switch (etat) {
 800108c:	7ffb      	ldrb	r3, [r7, #31]
 800108e:	2b06      	cmp	r3, #6
 8001090:	f200 8226 	bhi.w	80014e0 <main+0x494>
 8001094:	a201      	add	r2, pc, #4	; (adr r2, 800109c <main+0x50>)
 8001096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800109a:	bf00      	nop
 800109c:	080010b9 	.word	0x080010b9
 80010a0:	08001163 	.word	0x08001163
 80010a4:	080011a5 	.word	0x080011a5
 80010a8:	08001409 	.word	0x08001409
 80010ac:	0800122f 	.word	0x0800122f
 80010b0:	08001121 	.word	0x08001121
 80010b4:	0800148b 	.word	0x0800148b
		case init_uc:
			//traitement des sorties
			/*if (HAL_UART_Transmit(&huart2, (uint8_t*) "UC Initialization \n\r", 22,
			 100) != HAL_OK)
			 Error_Handler();*/
			printf("State: Init uc\r\n");
 80010b8:	48a1      	ldr	r0, [pc, #644]	; (8001340 <main+0x2f4>)
 80010ba:	f009 fb39 	bl	800a730 <puts>
			printf("> Press 2 for info mode\r\n");
 80010be:	48a1      	ldr	r0, [pc, #644]	; (8001344 <main+0x2f8>)
 80010c0:	f009 fb36 	bl	800a730 <puts>
			//printf("nucleo ready\r\n");
			//gyro init
			MPU6050_Read_All(&hi2c1, &mpu);
 80010c4:	49a0      	ldr	r1, [pc, #640]	; (8001348 <main+0x2fc>)
 80010c6:	48a1      	ldr	r0, [pc, #644]	; (800134c <main+0x300>)
 80010c8:	f000 fc72 	bl	80019b0 <MPU6050_Read_All>
			HAL_Delay(1000);
 80010cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010d0:	f001 fc0e 	bl	80028f0 <HAL_Delay>
			//traitement des entrées (transitions)
			do {

				if (HAL_UART_Receive(&huart2, (uint8_t*) r_buffer, 2, 10)
 80010d4:	4639      	mov	r1, r7
 80010d6:	230a      	movs	r3, #10
 80010d8:	2202      	movs	r2, #2
 80010da:	4898      	ldr	r0, [pc, #608]	; (800133c <main+0x2f0>)
 80010dc:	f006 ffac 	bl	8008038 <HAL_UART_Receive>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d10b      	bne.n	80010fe <main+0xb2>
						== HAL_OK) {
					HAL_Delay(50);
 80010e6:	2032      	movs	r0, #50	; 0x32
 80010e8:	f001 fc02 	bl	80028f0 <HAL_Delay>
					HAL_UART_Transmit(&huart2, (uint8_t*) r_buffer, 2, 10);
 80010ec:	4639      	mov	r1, r7
 80010ee:	230a      	movs	r3, #10
 80010f0:	2202      	movs	r2, #2
 80010f2:	4892      	ldr	r0, [pc, #584]	; (800133c <main+0x2f0>)
 80010f4:	f006 ff0c 	bl	8007f10 <HAL_UART_Transmit>
					HAL_Delay(50);
 80010f8:	2032      	movs	r0, #50	; 0x32
 80010fa:	f001 fbf9 	bl	80028f0 <HAL_Delay>
				}

			} while ((r_buffer[0] != '1') && (r_buffer[0] != '2')); //|| (r_buffer[0] != '2')
 80010fe:	783b      	ldrb	r3, [r7, #0]
 8001100:	2b31      	cmp	r3, #49	; 0x31
 8001102:	d002      	beq.n	800110a <main+0xbe>
 8001104:	783b      	ldrb	r3, [r7, #0]
 8001106:	2b32      	cmp	r3, #50	; 0x32
 8001108:	d1e4      	bne.n	80010d4 <main+0x88>
			if (r_buffer[0] == '2')
 800110a:	783b      	ldrb	r3, [r7, #0]
 800110c:	2b32      	cmp	r3, #50	; 0x32
 800110e:	d102      	bne.n	8001116 <main+0xca>
				etat = info_mode;
 8001110:	2305      	movs	r3, #5
 8001112:	77fb      	strb	r3, [r7, #31]
 8001114:	e001      	b.n	800111a <main+0xce>
			else
				etat = init_motor;
 8001116:	2301      	movs	r3, #1
 8001118:	77fb      	strb	r3, [r7, #31]
			r_buffer[0] = ' ';
 800111a:	2320      	movs	r3, #32
 800111c:	703b      	strb	r3, [r7, #0]
			break;
 800111e:	e1e0      	b.n	80014e2 <main+0x496>

		case info_mode:
			//if (HAL_UART_Transmit(&huart2, (uint8_t*) "Info mode\n\r", 12, 100)
			//	!= HAL_OK)
			//Error_Handler();
			printf("State: Info mode\r\n");
 8001120:	488b      	ldr	r0, [pc, #556]	; (8001350 <main+0x304>)
 8001122:	f009 fb05 	bl	800a730 <puts>
			printf(">Firmware version %.2f \n\r", firmware_version);
 8001126:	4b8b      	ldr	r3, [pc, #556]	; (8001354 <main+0x308>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff fa0c 	bl	8000548 <__aeabi_f2d>
 8001130:	4602      	mov	r2, r0
 8001132:	460b      	mov	r3, r1
 8001134:	4888      	ldr	r0, [pc, #544]	; (8001358 <main+0x30c>)
 8001136:	f009 fa75 	bl	800a624 <iprintf>
			//HAL_Delay(3000);
			printf(">1 Init Motor \n\r");
 800113a:	4888      	ldr	r0, [pc, #544]	; (800135c <main+0x310>)
 800113c:	f009 fa72 	bl	800a624 <iprintf>
			printf(">2 Info Mode \n\r");
 8001140:	4887      	ldr	r0, [pc, #540]	; (8001360 <main+0x314>)
 8001142:	f009 fa6f 	bl	800a624 <iprintf>
			printf(">3 Init Pot \n\r");
 8001146:	4887      	ldr	r0, [pc, #540]	; (8001364 <main+0x318>)
 8001148:	f009 fa6c 	bl	800a624 <iprintf>
			printf(">4 Auto Mode \n\r");
 800114c:	4886      	ldr	r0, [pc, #536]	; (8001368 <main+0x31c>)
 800114e:	f009 fa69 	bl	800a624 <iprintf>
			printf(">5 Manual Mode \n\r");
 8001152:	4886      	ldr	r0, [pc, #536]	; (800136c <main+0x320>)
 8001154:	f009 fa66 	bl	800a624 <iprintf>
			 HAL_Delay(50);
			 }

			 } while (r_buffer[0] != '0');*/

			etat = init_uc;
 8001158:	2300      	movs	r3, #0
 800115a:	77fb      	strb	r3, [r7, #31]
			// Reinitialisation du buffer
			r_buffer[0] = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	703b      	strb	r3, [r7, #0]
			//printf("%f");
			//le programme freeze dans l'etat info
			break;
 8001160:	e1bf      	b.n	80014e2 <main+0x496>

		case init_motor:
			/*if (HAL_UART_Transmit(&huart2,
			 (uint8_t*) "Motor Initialization \r\n", 24, 100) != HAL_OK)
			 Error_Handler();*/
			printf("State: Motor Initialization \n\r");
 8001162:	4883      	ldr	r0, [pc, #524]	; (8001370 <main+0x324>)
 8001164:	f009 fa5e 	bl	800a624 <iprintf>
			HAL_Delay(1000);
 8001168:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800116c:	f001 fbc0 	bl	80028f0 <HAL_Delay>
			//Chargement de la pwm
			//HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
			load_pwm(htim3, valeur_min_moteur);
 8001170:	4b80      	ldr	r3, [pc, #512]	; (8001374 <main+0x328>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4e70      	ldr	r6, [pc, #448]	; (8001338 <main+0x2ec>)
 8001176:	930f      	str	r3, [sp, #60]	; 0x3c
 8001178:	466d      	mov	r5, sp
 800117a:	f106 0410 	add.w	r4, r6, #16
 800117e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001180:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001182:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001184:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001186:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001188:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800118a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800118e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001192:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001196:	f001 faf5 	bl	8002784 <load_pwm>
			r_buffer[0] = ' ';
 800119a:	2320      	movs	r3, #32
 800119c:	703b      	strb	r3, [r7, #0]
			etat = motor_ready;
 800119e:	2302      	movs	r3, #2
 80011a0:	77fb      	strb	r3, [r7, #31]

			break;
 80011a2:	e19e      	b.n	80014e2 <main+0x496>
		case motor_ready:
			/*	if (HAL_UART_Transmit(&huart2, (uint8_t*) "Motor ready \n\r", 15,
			 100) != HAL_OK)
			 Error_Handler();
			 HAL_Delay(3000);*/
			k = 1700;
 80011a4:	f240 63a4 	movw	r3, #1700	; 0x6a4
 80011a8:	60fb      	str	r3, [r7, #12]
			load_pwm(htim3, valeur_min_moteur);
 80011aa:	4b72      	ldr	r3, [pc, #456]	; (8001374 <main+0x328>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4e62      	ldr	r6, [pc, #392]	; (8001338 <main+0x2ec>)
 80011b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80011b2:	466d      	mov	r5, sp
 80011b4:	f106 0410 	add.w	r4, r6, #16
 80011b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011c4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80011c8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80011cc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80011d0:	f001 fad8 	bl	8002784 <load_pwm>
			printf("State: Motor ready \n\r");
 80011d4:	4868      	ldr	r0, [pc, #416]	; (8001378 <main+0x32c>)
 80011d6:	f009 fa25 	bl	800a624 <iprintf>
			HAL_Delay(1000);
 80011da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011de:	f001 fb87 	bl	80028f0 <HAL_Delay>

			do {

				if (HAL_UART_Receive(&huart2, (uint8_t*) r_buffer, 2, 10)
 80011e2:	4639      	mov	r1, r7
 80011e4:	230a      	movs	r3, #10
 80011e6:	2202      	movs	r2, #2
 80011e8:	4854      	ldr	r0, [pc, #336]	; (800133c <main+0x2f0>)
 80011ea:	f006 ff25 	bl	8008038 <HAL_UART_Receive>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d10b      	bne.n	800120c <main+0x1c0>
						== HAL_OK) {
					HAL_Delay(50);
 80011f4:	2032      	movs	r0, #50	; 0x32
 80011f6:	f001 fb7b 	bl	80028f0 <HAL_Delay>
					HAL_UART_Transmit(&huart2, (uint8_t*) r_buffer, 2, 10);
 80011fa:	4639      	mov	r1, r7
 80011fc:	230a      	movs	r3, #10
 80011fe:	2202      	movs	r2, #2
 8001200:	484e      	ldr	r0, [pc, #312]	; (800133c <main+0x2f0>)
 8001202:	f006 fe85 	bl	8007f10 <HAL_UART_Transmit>
					HAL_Delay(50);
 8001206:	2032      	movs	r0, #50	; 0x32
 8001208:	f001 fb72 	bl	80028f0 <HAL_Delay>
				}

			} while ((r_buffer[0] != '3') && (r_buffer[0] != '4')); //|| (r_buffer[0] != '2')
 800120c:	783b      	ldrb	r3, [r7, #0]
 800120e:	2b33      	cmp	r3, #51	; 0x33
 8001210:	d002      	beq.n	8001218 <main+0x1cc>
 8001212:	783b      	ldrb	r3, [r7, #0]
 8001214:	2b34      	cmp	r3, #52	; 0x34
 8001216:	d1e4      	bne.n	80011e2 <main+0x196>
			if (r_buffer[0] == '3')
 8001218:	783b      	ldrb	r3, [r7, #0]
 800121a:	2b33      	cmp	r3, #51	; 0x33
 800121c:	d102      	bne.n	8001224 <main+0x1d8>
				etat = init_pot;
 800121e:	2306      	movs	r3, #6
 8001220:	77fb      	strb	r3, [r7, #31]
 8001222:	e001      	b.n	8001228 <main+0x1dc>
			else
				etat = auto_mode;
 8001224:	2304      	movs	r3, #4
 8001226:	77fb      	strb	r3, [r7, #31]
			r_buffer[0] = ' ';
 8001228:	2320      	movs	r3, #32
 800122a:	703b      	strb	r3, [r7, #0]

			break;
 800122c:	e159      	b.n	80014e2 <main+0x496>
			//if (HAL_UART_Transmit(&huart2, (uint8_t*) "Auto mode \n\r", 15, 100)
			//	!= HAL_OK)
			//Error_Handler();
			//HAL_Delay(3000);

			printf("State: Auto mode \n\r");
 800122e:	4853      	ldr	r0, [pc, #332]	; (800137c <main+0x330>)
 8001230:	f009 f9f8 	bl	800a624 <iprintf>

			do {

				if (HAL_UART_Receive(&huart2, (uint8_t*) r_buffer, 2, 10)
 8001234:	4639      	mov	r1, r7
 8001236:	230a      	movs	r3, #10
 8001238:	2202      	movs	r2, #2
 800123a:	4840      	ldr	r0, [pc, #256]	; (800133c <main+0x2f0>)
 800123c:	f006 fefc 	bl	8008038 <HAL_UART_Receive>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d102      	bne.n	800124c <main+0x200>
						== HAL_OK)
					HAL_Delay(10);
 8001246:	200a      	movs	r0, #10
 8001248:	f001 fb52 	bl	80028f0 <HAL_Delay>
				//HAL_UART_Transmit(&huart2, (uint8_t*) r_buffer, 2, 10);
				//HAL_Delay(50);

			} while (r_buffer[0] != '6' && r_buffer[0] != 'g');
 800124c:	783b      	ldrb	r3, [r7, #0]
 800124e:	2b36      	cmp	r3, #54	; 0x36
 8001250:	d002      	beq.n	8001258 <main+0x20c>
 8001252:	783b      	ldrb	r3, [r7, #0]
 8001254:	2b67      	cmp	r3, #103	; 0x67
 8001256:	d1ed      	bne.n	8001234 <main+0x1e8>

			//quand on envoie le caratère g on se retrouve dans la phase de gaz sur le clavier
			//si 6 on retourne au mode ready

			if (r_buffer[0] == '6') {
 8001258:	783b      	ldrb	r3, [r7, #0]
 800125a:	2b36      	cmp	r3, #54	; 0x36
 800125c:	d104      	bne.n	8001268 <main+0x21c>
				etat = motor_ready;
 800125e:	2302      	movs	r3, #2
 8001260:	77fb      	strb	r3, [r7, #31]
				r_buffer[0] = ' ';
 8001262:	2320      	movs	r3, #32
 8001264:	703b      	strb	r3, [r7, #0]
				break;
 8001266:	e13c      	b.n	80014e2 <main+0x496>

				//Soucis avec la recuperation deplusieurs caracteres sur la console, rien ne s'affiche
				//printf("vroum sur le clavier \n\r");

				//pseudo asservisssement à 45deg
				MPU6050_Read_All(&hi2c1, &mpu);
 8001268:	4937      	ldr	r1, [pc, #220]	; (8001348 <main+0x2fc>)
 800126a:	4838      	ldr	r0, [pc, #224]	; (800134c <main+0x300>)
 800126c:	f000 fba0 	bl	80019b0 <MPU6050_Read_All>
				load_pwm(htim3, k);
 8001270:	4e31      	ldr	r6, [pc, #196]	; (8001338 <main+0x2ec>)
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	930f      	str	r3, [sp, #60]	; 0x3c
 8001276:	466d      	mov	r5, sp
 8001278:	f106 0410 	add.w	r4, r6, #16
 800127c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800127e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001280:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001282:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001284:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001286:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001288:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800128c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001290:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001294:	f001 fa76 	bl	8002784 <load_pwm>
				true_angle = 90 - mpu.KalmanAngleX;
 8001298:	4b2b      	ldr	r3, [pc, #172]	; (8001348 <main+0x2fc>)
 800129a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800129e:	f04f 0000 	mov.w	r0, #0
 80012a2:	4937      	ldr	r1, [pc, #220]	; (8001380 <main+0x334>)
 80012a4:	f7fe fff0 	bl	8000288 <__aeabi_dsub>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	e9c7 2304 	strd	r2, r3, [r7, #16]
				printf("beforeangle %.2f \n\r", true_angle);
 80012b0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80012b4:	4833      	ldr	r0, [pc, #204]	; (8001384 <main+0x338>)
 80012b6:	f009 f9b5 	bl	800a624 <iprintf>
				HAL_Delay(50);
 80012ba:	2032      	movs	r0, #50	; 0x32
 80012bc:	f001 fb18 	bl	80028f0 <HAL_Delay>

				while (true_angle < 45.00) {
 80012c0:	e02e      	b.n	8001320 <main+0x2d4>
					HAL_Delay(40);
 80012c2:	2028      	movs	r0, #40	; 0x28
 80012c4:	f001 fb14 	bl	80028f0 <HAL_Delay>
					MPU6050_Read_All(&hi2c1, &mpu);
 80012c8:	491f      	ldr	r1, [pc, #124]	; (8001348 <main+0x2fc>)
 80012ca:	4820      	ldr	r0, [pc, #128]	; (800134c <main+0x300>)
 80012cc:	f000 fb70 	bl	80019b0 <MPU6050_Read_All>
					true_angle = 90 - mpu.KalmanAngleX;
 80012d0:	4b1d      	ldr	r3, [pc, #116]	; (8001348 <main+0x2fc>)
 80012d2:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80012d6:	f04f 0000 	mov.w	r0, #0
 80012da:	4929      	ldr	r1, [pc, #164]	; (8001380 <main+0x334>)
 80012dc:	f7fe ffd4 	bl	8000288 <__aeabi_dsub>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
					printf("angle %.2f \n\r", true_angle);
 80012e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80012ec:	4826      	ldr	r0, [pc, #152]	; (8001388 <main+0x33c>)
 80012ee:	f009 f999 	bl	800a624 <iprintf>
					load_pwm(htim3, k);
 80012f2:	4e11      	ldr	r6, [pc, #68]	; (8001338 <main+0x2ec>)
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80012f8:	466d      	mov	r5, sp
 80012fa:	f106 0410 	add.w	r4, r6, #16
 80012fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001300:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001302:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001304:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001306:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001308:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800130a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800130e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001312:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001316:	f001 fa35 	bl	8002784 <load_pwm>
					k++;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	3301      	adds	r3, #1
 800131e:	60fb      	str	r3, [r7, #12]
				while (true_angle < 45.00) {
 8001320:	f04f 0200 	mov.w	r2, #0
 8001324:	4b19      	ldr	r3, [pc, #100]	; (800138c <main+0x340>)
 8001326:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800132a:	f7ff fbd7 	bl	8000adc <__aeabi_dcmplt>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d1c6      	bne.n	80012c2 <main+0x276>
				};
				while (true_angle > 48.00) {
 8001334:	e05b      	b.n	80013ee <main+0x3a2>
 8001336:	bf00      	nop
 8001338:	2000038c 	.word	0x2000038c
 800133c:	200003d8 	.word	0x200003d8
 8001340:	0800e328 	.word	0x0800e328
 8001344:	0800e338 	.word	0x0800e338
 8001348:	200004f0 	.word	0x200004f0
 800134c:	20000340 	.word	0x20000340
 8001350:	0800e354 	.word	0x0800e354
 8001354:	20000094 	.word	0x20000094
 8001358:	0800e368 	.word	0x0800e368
 800135c:	0800e384 	.word	0x0800e384
 8001360:	0800e398 	.word	0x0800e398
 8001364:	0800e3a8 	.word	0x0800e3a8
 8001368:	0800e3b8 	.word	0x0800e3b8
 800136c:	0800e3c8 	.word	0x0800e3c8
 8001370:	0800e3dc 	.word	0x0800e3dc
 8001374:	20000098 	.word	0x20000098
 8001378:	0800e3fc 	.word	0x0800e3fc
 800137c:	0800e414 	.word	0x0800e414
 8001380:	40568000 	.word	0x40568000
 8001384:	0800e428 	.word	0x0800e428
 8001388:	0800e43c 	.word	0x0800e43c
 800138c:	40468000 	.word	0x40468000
					HAL_Delay(40);
 8001390:	2028      	movs	r0, #40	; 0x28
 8001392:	f001 faad 	bl	80028f0 <HAL_Delay>
					true_angle = 90 - mpu.KalmanAngleX;
 8001396:	4b53      	ldr	r3, [pc, #332]	; (80014e4 <main+0x498>)
 8001398:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800139c:	f04f 0000 	mov.w	r0, #0
 80013a0:	4951      	ldr	r1, [pc, #324]	; (80014e8 <main+0x49c>)
 80013a2:	f7fe ff71 	bl	8000288 <__aeabi_dsub>
 80013a6:	4602      	mov	r2, r0
 80013a8:	460b      	mov	r3, r1
 80013aa:	e9c7 2304 	strd	r2, r3, [r7, #16]
					MPU6050_Read_All(&hi2c1, &mpu);
 80013ae:	494d      	ldr	r1, [pc, #308]	; (80014e4 <main+0x498>)
 80013b0:	484e      	ldr	r0, [pc, #312]	; (80014ec <main+0x4a0>)
 80013b2:	f000 fafd 	bl	80019b0 <MPU6050_Read_All>
					printf("angle %.2f \n\r", true_angle);
 80013b6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80013ba:	484d      	ldr	r0, [pc, #308]	; (80014f0 <main+0x4a4>)
 80013bc:	f009 f932 	bl	800a624 <iprintf>
					load_pwm(htim3, k);
 80013c0:	4e4c      	ldr	r6, [pc, #304]	; (80014f4 <main+0x4a8>)
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80013c6:	466d      	mov	r5, sp
 80013c8:	f106 0410 	add.w	r4, r6, #16
 80013cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013d8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80013dc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80013e0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80013e4:	f001 f9ce 	bl	8002784 <load_pwm>
					k--;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	3b01      	subs	r3, #1
 80013ec:	60fb      	str	r3, [r7, #12]
				while (true_angle > 48.00) {
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	4b41      	ldr	r3, [pc, #260]	; (80014f8 <main+0x4ac>)
 80013f4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013f8:	f7ff fb8e 	bl	8000b18 <__aeabi_dcmpgt>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d1c6      	bne.n	8001390 <main+0x344>
				};

				//r_buffer[0] = ' ';
				etat = auto_mode;
 8001402:	2304      	movs	r3, #4
 8001404:	77fb      	strb	r3, [r7, #31]

				break;
 8001406:	e06c      	b.n	80014e2 <main+0x496>
			}

		case manual_mode:

			printf("State: Manual mode \n\r");
 8001408:	483c      	ldr	r0, [pc, #240]	; (80014fc <main+0x4b0>)
 800140a:	f009 f90b 	bl	800a624 <iprintf>
			//
			//recuperation de la pwm

			do {

				if (HAL_UART_Receive(&huart2, (uint8_t*) r_buffer, 2, 1)
 800140e:	4639      	mov	r1, r7
 8001410:	2301      	movs	r3, #1
 8001412:	2202      	movs	r2, #2
 8001414:	483a      	ldr	r0, [pc, #232]	; (8001500 <main+0x4b4>)
 8001416:	f006 fe0f 	bl	8008038 <HAL_UART_Receive>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d102      	bne.n	8001426 <main+0x3da>
						== HAL_OK)
					HAL_Delay(10);
 8001420:	200a      	movs	r0, #10
 8001422:	f001 fa65 	bl	80028f0 <HAL_Delay>
				//HAL_UART_Transmit(&huart2, (uint8_t*) r_buffer, 2, 10);
				//HAL_Delay(50);
				valeur_can = load_adc(hadc1, 5);
 8001426:	4c37      	ldr	r4, [pc, #220]	; (8001504 <main+0x4b8>)
 8001428:	2305      	movs	r3, #5
 800142a:	9315      	str	r3, [sp, #84]	; 0x54
 800142c:	4668      	mov	r0, sp
 800142e:	f104 0310 	add.w	r3, r4, #16
 8001432:	2254      	movs	r2, #84	; 0x54
 8001434:	4619      	mov	r1, r3
 8001436:	f008 fa65 	bl	8009904 <memcpy>
 800143a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800143e:	f001 f959 	bl	80026f4 <load_adc>
 8001442:	61b8      	str	r0, [r7, #24]
				mapped_value = mapping_adc_value(valeur_can);
 8001444:	69b8      	ldr	r0, [r7, #24]
 8001446:	f001 f971 	bl	800272c <mapping_adc_value>
 800144a:	6078      	str	r0, [r7, #4]
				HAL_Delay(100);
 800144c:	2064      	movs	r0, #100	; 0x64
 800144e:	f001 fa4f 	bl	80028f0 <HAL_Delay>
				load_pwm(htim3, mapped_value);
 8001452:	4e28      	ldr	r6, [pc, #160]	; (80014f4 <main+0x4a8>)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	930f      	str	r3, [sp, #60]	; 0x3c
 8001458:	466d      	mov	r5, sp
 800145a:	f106 0410 	add.w	r4, r6, #16
 800145e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001460:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001462:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001464:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001466:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001468:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800146a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800146e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001472:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001476:	f001 f985 	bl	8002784 <load_pwm>

			} while (r_buffer[0] != '6');
 800147a:	783b      	ldrb	r3, [r7, #0]
 800147c:	2b36      	cmp	r3, #54	; 0x36
 800147e:	d1c6      	bne.n	800140e <main+0x3c2>

			etat = motor_ready;
 8001480:	2302      	movs	r3, #2
 8001482:	77fb      	strb	r3, [r7, #31]
			r_buffer[0] = ' ';
 8001484:	2320      	movs	r3, #32
 8001486:	703b      	strb	r3, [r7, #0]
			break;
 8001488:	e02b      	b.n	80014e2 <main+0x496>

		case init_pot:
			printf("State: Init pot \n\r");
 800148a:	481f      	ldr	r0, [pc, #124]	; (8001508 <main+0x4bc>)
 800148c:	f009 f8ca 	bl	800a624 <iprintf>
			HAL_ADC_Start(&hadc1);
 8001490:	481c      	ldr	r0, [pc, #112]	; (8001504 <main+0x4b8>)
 8001492:	f001 fd9d 	bl	8002fd0 <HAL_ADC_Start>
			//if (HAL_UART_Transmit(&huart2, (uint8_t*) "Auto mode \n\r", 15, 100)
			//	!= HAL_OK)
			//Error_Handler();
			okay = 1;
 8001496:	2301      	movs	r3, #1
 8001498:	60bb      	str	r3, [r7, #8]
			//val = load_adc(hadc1, 5);
			//load_pwm(htim3, val);
			printf(">mettez le potentiometre à zero \n\r");
 800149a:	481c      	ldr	r0, [pc, #112]	; (800150c <main+0x4c0>)
 800149c:	f009 f8c2 	bl	800a624 <iprintf>
			//HAL_Delay(3000);

			while (okay == 1) {
 80014a0:	e013      	b.n	80014ca <main+0x47e>

				if (HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK) {
 80014a2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80014a6:	4817      	ldr	r0, [pc, #92]	; (8001504 <main+0x4b8>)
 80014a8:	f001 fe4c 	bl	8003144 <HAL_ADC_PollForConversion>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d104      	bne.n	80014bc <main+0x470>
					valeur_can = HAL_ADC_GetValue(&hadc1);
 80014b2:	4814      	ldr	r0, [pc, #80]	; (8001504 <main+0x4b8>)
 80014b4:	f001 ff1e 	bl	80032f4 <HAL_ADC_GetValue>
 80014b8:	4603      	mov	r3, r0
 80014ba:	61bb      	str	r3, [r7, #24]
				}
				//valeur_can = load_adc(hadc1, 5);
				printf("Valeur can %d \n\r", valeur_can);
 80014bc:	69b9      	ldr	r1, [r7, #24]
 80014be:	4814      	ldr	r0, [pc, #80]	; (8001510 <main+0x4c4>)
 80014c0:	f009 f8b0 	bl	800a624 <iprintf>
				if (mapped_value <= 1513) {
					//okay = 0;
					//printf("o %d \n \r", okay);

				}
				HAL_Delay(50);
 80014c4:	2032      	movs	r0, #50	; 0x32
 80014c6:	f001 fa13 	bl	80028f0 <HAL_Delay>
			while (okay == 1) {
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d0e8      	beq.n	80014a2 <main+0x456>
			}
			printf("succes \n\r");
 80014d0:	4810      	ldr	r0, [pc, #64]	; (8001514 <main+0x4c8>)
 80014d2:	f009 f8a7 	bl	800a624 <iprintf>
			etat = manual_mode;
 80014d6:	2303      	movs	r3, #3
 80014d8:	77fb      	strb	r3, [r7, #31]
			r_buffer[0] = ' ';
 80014da:	2320      	movs	r3, #32
 80014dc:	703b      	strb	r3, [r7, #0]

			break;
 80014de:	e000      	b.n	80014e2 <main+0x496>

		default:
			break;
 80014e0:	bf00      	nop
		__HAL_UART_CLEAR_OREFLAG(&huart2);
 80014e2:	e5cf      	b.n	8001084 <main+0x38>
 80014e4:	200004f0 	.word	0x200004f0
 80014e8:	40568000 	.word	0x40568000
 80014ec:	20000340 	.word	0x20000340
 80014f0:	0800e43c 	.word	0x0800e43c
 80014f4:	2000038c 	.word	0x2000038c
 80014f8:	40480000 	.word	0x40480000
 80014fc:	0800e44c 	.word	0x0800e44c
 8001500:	200003d8 	.word	0x200003d8
 8001504:	20000294 	.word	0x20000294
 8001508:	0800e464 	.word	0x0800e464
 800150c:	0800e478 	.word	0x0800e478
 8001510:	0800e49c 	.word	0x0800e49c
 8001514:	0800e4b0 	.word	0x0800e4b0

08001518 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001518:	b580      	push	{r7, lr}
 800151a:	b096      	sub	sp, #88	; 0x58
 800151c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800151e:	f107 0314 	add.w	r3, r7, #20
 8001522:	2244      	movs	r2, #68	; 0x44
 8001524:	2100      	movs	r1, #0
 8001526:	4618      	mov	r0, r3
 8001528:	f008 f9fa 	bl	8009920 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800152c:	463b      	mov	r3, r7
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	605a      	str	r2, [r3, #4]
 8001534:	609a      	str	r2, [r3, #8]
 8001536:	60da      	str	r2, [r3, #12]
 8001538:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 800153a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800153e:	f003 ffd5 	bl	80054ec <HAL_PWREx_ControlVoltageScaling>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 8001548:	f000 fa2a 	bl	80019a0 <Error_Handler>
	}
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800154c:	2302      	movs	r3, #2
 800154e:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001550:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001554:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001556:	2310      	movs	r3, #16
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800155a:	2302      	movs	r3, #2
 800155c:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800155e:	2302      	movs	r3, #2
 8001560:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8001562:	2301      	movs	r3, #1
 8001564:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 8001566:	230a      	movs	r3, #10
 8001568:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800156a:	2307      	movs	r3, #7
 800156c:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800156e:	2302      	movs	r3, #2
 8001570:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001572:	2302      	movs	r3, #2
 8001574:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001576:	f107 0314 	add.w	r3, r7, #20
 800157a:	4618      	mov	r0, r3
 800157c:	f004 f80c 	bl	8005598 <HAL_RCC_OscConfig>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <SystemClock_Config+0x72>
		Error_Handler();
 8001586:	f000 fa0b 	bl	80019a0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800158a:	230f      	movs	r3, #15
 800158c:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800158e:	2303      	movs	r3, #3
 8001590:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001592:	2300      	movs	r3, #0
 8001594:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001596:	2300      	movs	r3, #0
 8001598:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800159a:	2300      	movs	r3, #0
 800159c:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 800159e:	463b      	mov	r3, r7
 80015a0:	2104      	movs	r1, #4
 80015a2:	4618      	mov	r0, r3
 80015a4:	f004 fbe0 	bl	8005d68 <HAL_RCC_ClockConfig>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <SystemClock_Config+0x9a>
		Error_Handler();
 80015ae:	f000 f9f7 	bl	80019a0 <Error_Handler>
	}
}
 80015b2:	bf00      	nop
 80015b4:	3758      	adds	r7, #88	; 0x58
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
	...

080015bc <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08a      	sub	sp, #40	; 0x28
 80015c0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 80015c2:	f107 031c 	add.w	r3, r7, #28
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	605a      	str	r2, [r3, #4]
 80015cc:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 80015ce:	1d3b      	adds	r3, r7, #4
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	611a      	str	r2, [r3, #16]
 80015dc:	615a      	str	r2, [r3, #20]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 80015de:	4b2f      	ldr	r3, [pc, #188]	; (800169c <MX_ADC1_Init+0xe0>)
 80015e0:	4a2f      	ldr	r2, [pc, #188]	; (80016a0 <MX_ADC1_Init+0xe4>)
 80015e2:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80015e4:	4b2d      	ldr	r3, [pc, #180]	; (800169c <MX_ADC1_Init+0xe0>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015ea:	4b2c      	ldr	r3, [pc, #176]	; (800169c <MX_ADC1_Init+0xe0>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015f0:	4b2a      	ldr	r3, [pc, #168]	; (800169c <MX_ADC1_Init+0xe0>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80015f6:	4b29      	ldr	r3, [pc, #164]	; (800169c <MX_ADC1_Init+0xe0>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015fc:	4b27      	ldr	r3, [pc, #156]	; (800169c <MX_ADC1_Init+0xe0>)
 80015fe:	2204      	movs	r2, #4
 8001600:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8001602:	4b26      	ldr	r3, [pc, #152]	; (800169c <MX_ADC1_Init+0xe0>)
 8001604:	2200      	movs	r2, #0
 8001606:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001608:	4b24      	ldr	r3, [pc, #144]	; (800169c <MX_ADC1_Init+0xe0>)
 800160a:	2200      	movs	r2, #0
 800160c:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 800160e:	4b23      	ldr	r3, [pc, #140]	; (800169c <MX_ADC1_Init+0xe0>)
 8001610:	2201      	movs	r2, #1
 8001612:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001614:	4b21      	ldr	r3, [pc, #132]	; (800169c <MX_ADC1_Init+0xe0>)
 8001616:	2200      	movs	r2, #0
 8001618:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800161c:	4b1f      	ldr	r3, [pc, #124]	; (800169c <MX_ADC1_Init+0xe0>)
 800161e:	2200      	movs	r2, #0
 8001620:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001622:	4b1e      	ldr	r3, [pc, #120]	; (800169c <MX_ADC1_Init+0xe0>)
 8001624:	2200      	movs	r2, #0
 8001626:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001628:	4b1c      	ldr	r3, [pc, #112]	; (800169c <MX_ADC1_Init+0xe0>)
 800162a:	2200      	movs	r2, #0
 800162c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001630:	4b1a      	ldr	r3, [pc, #104]	; (800169c <MX_ADC1_Init+0xe0>)
 8001632:	2200      	movs	r2, #0
 8001634:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 8001636:	4b19      	ldr	r3, [pc, #100]	; (800169c <MX_ADC1_Init+0xe0>)
 8001638:	2200      	movs	r2, #0
 800163a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800163e:	4817      	ldr	r0, [pc, #92]	; (800169c <MX_ADC1_Init+0xe0>)
 8001640:	f001 fb70 	bl	8002d24 <HAL_ADC_Init>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_ADC1_Init+0x92>
		Error_Handler();
 800164a:	f000 f9a9 	bl	80019a0 <Error_Handler>
	}
	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 800164e:	2300      	movs	r3, #0
 8001650:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8001652:	f107 031c 	add.w	r3, r7, #28
 8001656:	4619      	mov	r1, r3
 8001658:	4810      	ldr	r0, [pc, #64]	; (800169c <MX_ADC1_Init+0xe0>)
 800165a:	f002 fd3b 	bl	80040d4 <HAL_ADCEx_MultiModeConfigChannel>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_ADC1_Init+0xac>
		Error_Handler();
 8001664:	f000 f99c 	bl	80019a0 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 8001668:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <MX_ADC1_Init+0xe8>)
 800166a:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800166c:	2306      	movs	r3, #6
 800166e:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001670:	2300      	movs	r3, #0
 8001672:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001674:	237f      	movs	r3, #127	; 0x7f
 8001676:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001678:	2304      	movs	r3, #4
 800167a:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 800167c:	2300      	movs	r3, #0
 800167e:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001680:	1d3b      	adds	r3, r7, #4
 8001682:	4619      	mov	r1, r3
 8001684:	4805      	ldr	r0, [pc, #20]	; (800169c <MX_ADC1_Init+0xe0>)
 8001686:	f002 f87b 	bl	8003780 <HAL_ADC_ConfigChannel>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_ADC1_Init+0xd8>
		Error_Handler();
 8001690:	f000 f986 	bl	80019a0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001694:	bf00      	nop
 8001696:	3728      	adds	r7, #40	; 0x28
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20000294 	.word	0x20000294
 80016a0:	50040000 	.word	0x50040000
 80016a4:	14f00020 	.word	0x14f00020

080016a8 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80016ac:	4b1b      	ldr	r3, [pc, #108]	; (800171c <MX_I2C1_Init+0x74>)
 80016ae:	4a1c      	ldr	r2, [pc, #112]	; (8001720 <MX_I2C1_Init+0x78>)
 80016b0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x10909CEC;
 80016b2:	4b1a      	ldr	r3, [pc, #104]	; (800171c <MX_I2C1_Init+0x74>)
 80016b4:	4a1b      	ldr	r2, [pc, #108]	; (8001724 <MX_I2C1_Init+0x7c>)
 80016b6:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 80016b8:	4b18      	ldr	r3, [pc, #96]	; (800171c <MX_I2C1_Init+0x74>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016be:	4b17      	ldr	r3, [pc, #92]	; (800171c <MX_I2C1_Init+0x74>)
 80016c0:	2201      	movs	r2, #1
 80016c2:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016c4:	4b15      	ldr	r3, [pc, #84]	; (800171c <MX_I2C1_Init+0x74>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80016ca:	4b14      	ldr	r3, [pc, #80]	; (800171c <MX_I2C1_Init+0x74>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016d0:	4b12      	ldr	r3, [pc, #72]	; (800171c <MX_I2C1_Init+0x74>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016d6:	4b11      	ldr	r3, [pc, #68]	; (800171c <MX_I2C1_Init+0x74>)
 80016d8:	2200      	movs	r2, #0
 80016da:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016dc:	4b0f      	ldr	r3, [pc, #60]	; (800171c <MX_I2C1_Init+0x74>)
 80016de:	2200      	movs	r2, #0
 80016e0:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80016e2:	480e      	ldr	r0, [pc, #56]	; (800171c <MX_I2C1_Init+0x74>)
 80016e4:	f003 fa60 	bl	8004ba8 <HAL_I2C_Init>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_I2C1_Init+0x4a>
		Error_Handler();
 80016ee:	f000 f957 	bl	80019a0 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 80016f2:	2100      	movs	r1, #0
 80016f4:	4809      	ldr	r0, [pc, #36]	; (800171c <MX_I2C1_Init+0x74>)
 80016f6:	f003 fe53 	bl	80053a0 <HAL_I2CEx_ConfigAnalogFilter>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8001700:	f000 f94e 	bl	80019a0 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8001704:	2100      	movs	r1, #0
 8001706:	4805      	ldr	r0, [pc, #20]	; (800171c <MX_I2C1_Init+0x74>)
 8001708:	f003 fe95 	bl	8005436 <HAL_I2CEx_ConfigDigitalFilter>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_I2C1_Init+0x6e>
		Error_Handler();
 8001712:	f000 f945 	bl	80019a0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	20000340 	.word	0x20000340
 8001720:	40005400 	.word	0x40005400
 8001724:	10909cec 	.word	0x10909cec

08001728 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001728:	b580      	push	{r7, lr}
 800172a:	b08e      	sub	sp, #56	; 0x38
 800172c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800172e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	605a      	str	r2, [r3, #4]
 8001738:	609a      	str	r2, [r3, #8]
 800173a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800173c:	f107 031c 	add.w	r3, r7, #28
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001748:	463b      	mov	r3, r7
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	605a      	str	r2, [r3, #4]
 8001750:	609a      	str	r2, [r3, #8]
 8001752:	60da      	str	r2, [r3, #12]
 8001754:	611a      	str	r2, [r3, #16]
 8001756:	615a      	str	r2, [r3, #20]
 8001758:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 800175a:	4b2d      	ldr	r3, [pc, #180]	; (8001810 <MX_TIM3_Init+0xe8>)
 800175c:	4a2d      	ldr	r2, [pc, #180]	; (8001814 <MX_TIM3_Init+0xec>)
 800175e:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 38;
 8001760:	4b2b      	ldr	r3, [pc, #172]	; (8001810 <MX_TIM3_Init+0xe8>)
 8001762:	2226      	movs	r2, #38	; 0x26
 8001764:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001766:	4b2a      	ldr	r3, [pc, #168]	; (8001810 <MX_TIM3_Init+0xe8>)
 8001768:	2200      	movs	r2, #0
 800176a:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 4096;
 800176c:	4b28      	ldr	r3, [pc, #160]	; (8001810 <MX_TIM3_Init+0xe8>)
 800176e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001772:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001774:	4b26      	ldr	r3, [pc, #152]	; (8001810 <MX_TIM3_Init+0xe8>)
 8001776:	2200      	movs	r2, #0
 8001778:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800177a:	4b25      	ldr	r3, [pc, #148]	; (8001810 <MX_TIM3_Init+0xe8>)
 800177c:	2280      	movs	r2, #128	; 0x80
 800177e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001780:	4823      	ldr	r0, [pc, #140]	; (8001810 <MX_TIM3_Init+0xe8>)
 8001782:	f005 f9b3 	bl	8006aec <HAL_TIM_Base_Init>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_TIM3_Init+0x68>
		Error_Handler();
 800178c:	f000 f908 	bl	80019a0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001790:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001794:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001796:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800179a:	4619      	mov	r1, r3
 800179c:	481c      	ldr	r0, [pc, #112]	; (8001810 <MX_TIM3_Init+0xe8>)
 800179e:	f005 fd97 	bl	80072d0 <HAL_TIM_ConfigClockSource>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_TIM3_Init+0x84>
		Error_Handler();
 80017a8:	f000 f8fa 	bl	80019a0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 80017ac:	4818      	ldr	r0, [pc, #96]	; (8001810 <MX_TIM3_Init+0xe8>)
 80017ae:	f005 f9f4 	bl	8006b9a <HAL_TIM_PWM_Init>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_TIM3_Init+0x94>
		Error_Handler();
 80017b8:	f000 f8f2 	bl	80019a0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017bc:	2300      	movs	r3, #0
 80017be:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017c0:	2300      	movs	r3, #0
 80017c2:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80017c4:	f107 031c 	add.w	r3, r7, #28
 80017c8:	4619      	mov	r1, r3
 80017ca:	4811      	ldr	r0, [pc, #68]	; (8001810 <MX_TIM3_Init+0xe8>)
 80017cc:	f006 faac 	bl	8007d28 <HAL_TIMEx_MasterConfigSynchronization>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_TIM3_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 80017d6:	f000 f8e3 	bl	80019a0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017da:	2360      	movs	r3, #96	; 0x60
 80017dc:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 25;
 80017de:	2319      	movs	r3, #25
 80017e0:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017e2:	2300      	movs	r3, #0
 80017e4:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017e6:	2300      	movs	r3, #0
 80017e8:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 80017ea:	463b      	mov	r3, r7
 80017ec:	2204      	movs	r2, #4
 80017ee:	4619      	mov	r1, r3
 80017f0:	4807      	ldr	r0, [pc, #28]	; (8001810 <MX_TIM3_Init+0xe8>)
 80017f2:	f005 fc59 	bl	80070a8 <HAL_TIM_PWM_ConfigChannel>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_TIM3_Init+0xd8>
			!= HAL_OK) {
		Error_Handler();
 80017fc:	f000 f8d0 	bl	80019a0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8001800:	4803      	ldr	r0, [pc, #12]	; (8001810 <MX_TIM3_Init+0xe8>)
 8001802:	f000 fd5f 	bl	80022c4 <HAL_TIM_MspPostInit>

}
 8001806:	bf00      	nop
 8001808:	3738      	adds	r7, #56	; 0x38
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	2000038c 	.word	0x2000038c
 8001814:	40000400 	.word	0x40000400

08001818 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800181c:	4b14      	ldr	r3, [pc, #80]	; (8001870 <MX_USART2_UART_Init+0x58>)
 800181e:	4a15      	ldr	r2, [pc, #84]	; (8001874 <MX_USART2_UART_Init+0x5c>)
 8001820:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001822:	4b13      	ldr	r3, [pc, #76]	; (8001870 <MX_USART2_UART_Init+0x58>)
 8001824:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001828:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800182a:	4b11      	ldr	r3, [pc, #68]	; (8001870 <MX_USART2_UART_Init+0x58>)
 800182c:	2200      	movs	r2, #0
 800182e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001830:	4b0f      	ldr	r3, [pc, #60]	; (8001870 <MX_USART2_UART_Init+0x58>)
 8001832:	2200      	movs	r2, #0
 8001834:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001836:	4b0e      	ldr	r3, [pc, #56]	; (8001870 <MX_USART2_UART_Init+0x58>)
 8001838:	2200      	movs	r2, #0
 800183a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800183c:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <MX_USART2_UART_Init+0x58>)
 800183e:	220c      	movs	r2, #12
 8001840:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001842:	4b0b      	ldr	r3, [pc, #44]	; (8001870 <MX_USART2_UART_Init+0x58>)
 8001844:	2200      	movs	r2, #0
 8001846:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001848:	4b09      	ldr	r3, [pc, #36]	; (8001870 <MX_USART2_UART_Init+0x58>)
 800184a:	2200      	movs	r2, #0
 800184c:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800184e:	4b08      	ldr	r3, [pc, #32]	; (8001870 <MX_USART2_UART_Init+0x58>)
 8001850:	2200      	movs	r2, #0
 8001852:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001854:	4b06      	ldr	r3, [pc, #24]	; (8001870 <MX_USART2_UART_Init+0x58>)
 8001856:	2200      	movs	r2, #0
 8001858:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800185a:	4805      	ldr	r0, [pc, #20]	; (8001870 <MX_USART2_UART_Init+0x58>)
 800185c:	f006 fb0a 	bl	8007e74 <HAL_UART_Init>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_USART2_UART_Init+0x52>
		Error_Handler();
 8001866:	f000 f89b 	bl	80019a0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	200003d8 	.word	0x200003d8
 8001874:	40004400 	.word	0x40004400

08001878 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800187e:	4b14      	ldr	r3, [pc, #80]	; (80018d0 <MX_DMA_Init+0x58>)
 8001880:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001882:	4a13      	ldr	r2, [pc, #76]	; (80018d0 <MX_DMA_Init+0x58>)
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	6493      	str	r3, [r2, #72]	; 0x48
 800188a:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <MX_DMA_Init+0x58>)
 800188c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	607b      	str	r3, [r7, #4]
 8001894:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001896:	2200      	movs	r2, #0
 8001898:	2100      	movs	r1, #0
 800189a:	200b      	movs	r0, #11
 800189c:	f002 fda5 	bl	80043ea <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80018a0:	200b      	movs	r0, #11
 80018a2:	f002 fdbe 	bl	8004422 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80018a6:	2200      	movs	r2, #0
 80018a8:	2100      	movs	r1, #0
 80018aa:	2010      	movs	r0, #16
 80018ac:	f002 fd9d 	bl	80043ea <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80018b0:	2010      	movs	r0, #16
 80018b2:	f002 fdb6 	bl	8004422 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80018b6:	2200      	movs	r2, #0
 80018b8:	2100      	movs	r1, #0
 80018ba:	2011      	movs	r0, #17
 80018bc:	f002 fd95 	bl	80043ea <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80018c0:	2011      	movs	r0, #17
 80018c2:	f002 fdae 	bl	8004422 <HAL_NVIC_EnableIRQ>

}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40021000 	.word	0x40021000

080018d4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b08a      	sub	sp, #40	; 0x28
 80018d8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80018da:	f107 0314 	add.w	r3, r7, #20
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	605a      	str	r2, [r3, #4]
 80018e4:	609a      	str	r2, [r3, #8]
 80018e6:	60da      	str	r2, [r3, #12]
 80018e8:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80018ea:	4b2b      	ldr	r3, [pc, #172]	; (8001998 <MX_GPIO_Init+0xc4>)
 80018ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ee:	4a2a      	ldr	r2, [pc, #168]	; (8001998 <MX_GPIO_Init+0xc4>)
 80018f0:	f043 0304 	orr.w	r3, r3, #4
 80018f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018f6:	4b28      	ldr	r3, [pc, #160]	; (8001998 <MX_GPIO_Init+0xc4>)
 80018f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018fa:	f003 0304 	and.w	r3, r3, #4
 80018fe:	613b      	str	r3, [r7, #16]
 8001900:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001902:	4b25      	ldr	r3, [pc, #148]	; (8001998 <MX_GPIO_Init+0xc4>)
 8001904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001906:	4a24      	ldr	r2, [pc, #144]	; (8001998 <MX_GPIO_Init+0xc4>)
 8001908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800190c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800190e:	4b22      	ldr	r3, [pc, #136]	; (8001998 <MX_GPIO_Init+0xc4>)
 8001910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800191a:	4b1f      	ldr	r3, [pc, #124]	; (8001998 <MX_GPIO_Init+0xc4>)
 800191c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800191e:	4a1e      	ldr	r2, [pc, #120]	; (8001998 <MX_GPIO_Init+0xc4>)
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001926:	4b1c      	ldr	r3, [pc, #112]	; (8001998 <MX_GPIO_Init+0xc4>)
 8001928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	60bb      	str	r3, [r7, #8]
 8001930:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001932:	4b19      	ldr	r3, [pc, #100]	; (8001998 <MX_GPIO_Init+0xc4>)
 8001934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001936:	4a18      	ldr	r2, [pc, #96]	; (8001998 <MX_GPIO_Init+0xc4>)
 8001938:	f043 0302 	orr.w	r3, r3, #2
 800193c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800193e:	4b16      	ldr	r3, [pc, #88]	; (8001998 <MX_GPIO_Init+0xc4>)
 8001940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	607b      	str	r3, [r7, #4]
 8001948:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800194a:	2200      	movs	r2, #0
 800194c:	2120      	movs	r1, #32
 800194e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001952:	f003 f911 	bl	8004b78 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001956:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800195a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800195c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001960:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001966:	f107 0314 	add.w	r3, r7, #20
 800196a:	4619      	mov	r1, r3
 800196c:	480b      	ldr	r0, [pc, #44]	; (800199c <MX_GPIO_Init+0xc8>)
 800196e:	f002 ff59 	bl	8004824 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8001972:	2320      	movs	r3, #32
 8001974:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001976:	2301      	movs	r3, #1
 8001978:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197a:	2300      	movs	r3, #0
 800197c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197e:	2300      	movs	r3, #0
 8001980:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001982:	f107 0314 	add.w	r3, r7, #20
 8001986:	4619      	mov	r1, r3
 8001988:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800198c:	f002 ff4a 	bl	8004824 <HAL_GPIO_Init>

}
 8001990:	bf00      	nop
 8001992:	3728      	adds	r7, #40	; 0x28
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40021000 	.word	0x40021000
 800199c:	48000800 	.word	0x48000800

080019a0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019a4:	b672      	cpsid	i
}
 80019a6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80019a8:	e7fe      	b.n	80019a8 <Error_Handler+0x8>
 80019aa:	0000      	movs	r0, r0
 80019ac:	0000      	movs	r0, r0
	...

080019b0 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 80019b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019b4:	b094      	sub	sp, #80	; 0x50
 80019b6:	af04      	add	r7, sp, #16
 80019b8:	6078      	str	r0, [r7, #4]
 80019ba:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 80019bc:	2364      	movs	r3, #100	; 0x64
 80019be:	9302      	str	r3, [sp, #8]
 80019c0:	230e      	movs	r3, #14
 80019c2:	9301      	str	r3, [sp, #4]
 80019c4:	f107 0308 	add.w	r3, r7, #8
 80019c8:	9300      	str	r3, [sp, #0]
 80019ca:	2301      	movs	r3, #1
 80019cc:	223b      	movs	r2, #59	; 0x3b
 80019ce:	21d0      	movs	r1, #208	; 0xd0
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f003 f979 	bl	8004cc8 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 80019d6:	7a3b      	ldrb	r3, [r7, #8]
 80019d8:	021b      	lsls	r3, r3, #8
 80019da:	b21a      	sxth	r2, r3
 80019dc:	7a7b      	ldrb	r3, [r7, #9]
 80019de:	b21b      	sxth	r3, r3
 80019e0:	4313      	orrs	r3, r2
 80019e2:	b21a      	sxth	r2, r3
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 80019e8:	7abb      	ldrb	r3, [r7, #10]
 80019ea:	021b      	lsls	r3, r3, #8
 80019ec:	b21a      	sxth	r2, r3
 80019ee:	7afb      	ldrb	r3, [r7, #11]
 80019f0:	b21b      	sxth	r3, r3
 80019f2:	4313      	orrs	r3, r2
 80019f4:	b21a      	sxth	r2, r3
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 80019fa:	7b3b      	ldrb	r3, [r7, #12]
 80019fc:	021b      	lsls	r3, r3, #8
 80019fe:	b21a      	sxth	r2, r3
 8001a00:	7b7b      	ldrb	r3, [r7, #13]
 8001a02:	b21b      	sxth	r3, r3
 8001a04:	4313      	orrs	r3, r2
 8001a06:	b21a      	sxth	r2, r3
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8001a0c:	7bbb      	ldrb	r3, [r7, #14]
 8001a0e:	021b      	lsls	r3, r3, #8
 8001a10:	b21a      	sxth	r2, r3
 8001a12:	7bfb      	ldrb	r3, [r7, #15]
 8001a14:	b21b      	sxth	r3, r3
 8001a16:	4313      	orrs	r3, r2
 8001a18:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8001a1a:	7c3b      	ldrb	r3, [r7, #16]
 8001a1c:	021b      	lsls	r3, r3, #8
 8001a1e:	b21a      	sxth	r2, r3
 8001a20:	7c7b      	ldrb	r3, [r7, #17]
 8001a22:	b21b      	sxth	r3, r3
 8001a24:	4313      	orrs	r3, r2
 8001a26:	b21a      	sxth	r2, r3
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8001a2c:	7cbb      	ldrb	r3, [r7, #18]
 8001a2e:	021b      	lsls	r3, r3, #8
 8001a30:	b21a      	sxth	r2, r3
 8001a32:	7cfb      	ldrb	r3, [r7, #19]
 8001a34:	b21b      	sxth	r3, r3
 8001a36:	4313      	orrs	r3, r2
 8001a38:	b21a      	sxth	r2, r3
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8001a3e:	7d3b      	ldrb	r3, [r7, #20]
 8001a40:	021b      	lsls	r3, r3, #8
 8001a42:	b21a      	sxth	r2, r3
 8001a44:	7d7b      	ldrb	r3, [r7, #21]
 8001a46:	b21b      	sxth	r3, r3
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	b21a      	sxth	r2, r3
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7fe fd64 	bl	8000524 <__aeabi_i2d>
 8001a5c:	f04f 0200 	mov.w	r2, #0
 8001a60:	4bbd      	ldr	r3, [pc, #756]	; (8001d58 <MPU6050_Read_All+0x3a8>)
 8001a62:	f7fe fef3 	bl	800084c <__aeabi_ddiv>
 8001a66:	4602      	mov	r2, r0
 8001a68:	460b      	mov	r3, r1
 8001a6a:	6839      	ldr	r1, [r7, #0]
 8001a6c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7fe fd54 	bl	8000524 <__aeabi_i2d>
 8001a7c:	f04f 0200 	mov.w	r2, #0
 8001a80:	4bb5      	ldr	r3, [pc, #724]	; (8001d58 <MPU6050_Read_All+0x3a8>)
 8001a82:	f7fe fee3 	bl	800084c <__aeabi_ddiv>
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	6839      	ldr	r1, [r7, #0]
 8001a8c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7fe fd44 	bl	8000524 <__aeabi_i2d>
 8001a9c:	a3a8      	add	r3, pc, #672	; (adr r3, 8001d40 <MPU6050_Read_All+0x390>)
 8001a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa2:	f7fe fed3 	bl	800084c <__aeabi_ddiv>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	6839      	ldr	r1, [r7, #0]
 8001aac:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8001ab0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001ab4:	ee07 3a90 	vmov	s15, r3
 8001ab8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001abc:	eddf 6aa7 	vldr	s13, [pc, #668]	; 8001d5c <MPU6050_Read_All+0x3ac>
 8001ac0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ac4:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8001d60 <MPU6050_Read_All+0x3b0>
 8001ac8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7fe fd23 	bl	8000524 <__aeabi_i2d>
 8001ade:	a39a      	add	r3, pc, #616	; (adr r3, 8001d48 <MPU6050_Read_All+0x398>)
 8001ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae4:	f7fe feb2 	bl	800084c <__aeabi_ddiv>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	6839      	ldr	r1, [r7, #0]
 8001aee:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7fe fd13 	bl	8000524 <__aeabi_i2d>
 8001afe:	a392      	add	r3, pc, #584	; (adr r3, 8001d48 <MPU6050_Read_All+0x398>)
 8001b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b04:	f7fe fea2 	bl	800084c <__aeabi_ddiv>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	6839      	ldr	r1, [r7, #0]
 8001b0e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7fe fd03 	bl	8000524 <__aeabi_i2d>
 8001b1e:	a38a      	add	r3, pc, #552	; (adr r3, 8001d48 <MPU6050_Read_All+0x398>)
 8001b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b24:	f7fe fe92 	bl	800084c <__aeabi_ddiv>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	6839      	ldr	r1, [r7, #0]
 8001b2e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 8001b32:	f000 fed1 	bl	80028d8 <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	4b8a      	ldr	r3, [pc, #552]	; (8001d64 <MPU6050_Read_All+0x3b4>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7fe fce0 	bl	8000504 <__aeabi_ui2d>
 8001b44:	f04f 0200 	mov.w	r2, #0
 8001b48:	4b87      	ldr	r3, [pc, #540]	; (8001d68 <MPU6050_Read_All+0x3b8>)
 8001b4a:	f7fe fe7f 	bl	800084c <__aeabi_ddiv>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8001b56:	f000 febf 	bl	80028d8 <HAL_GetTick>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	4a81      	ldr	r2, [pc, #516]	; (8001d64 <MPU6050_Read_All+0x3b4>)
 8001b5e:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b66:	461a      	mov	r2, r3
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b6e:	fb03 f202 	mul.w	r2, r3, r2
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001b78:	4619      	mov	r1, r3
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001b80:	fb01 f303 	mul.w	r3, r1, r3
 8001b84:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7fe fccc 	bl	8000524 <__aeabi_i2d>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	ec43 2b10 	vmov	d0, r2, r3
 8001b94:	f007 fce3 	bl	800955e <sqrt>
 8001b98:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 8001b9c:	f04f 0200 	mov.w	r2, #0
 8001ba0:	f04f 0300 	mov.w	r3, #0
 8001ba4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001ba8:	f7fe ff8e 	bl	8000ac8 <__aeabi_dcmpeq>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d11f      	bne.n	8001bf2 <MPU6050_Read_All+0x242>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7fe fcb3 	bl	8000524 <__aeabi_i2d>
 8001bbe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001bc2:	f7fe fe43 	bl	800084c <__aeabi_ddiv>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	460b      	mov	r3, r1
 8001bca:	ec43 2b17 	vmov	d7, r2, r3
 8001bce:	eeb0 0a47 	vmov.f32	s0, s14
 8001bd2:	eef0 0a67 	vmov.f32	s1, s15
 8001bd6:	f007 fb17 	bl	8009208 <atan>
 8001bda:	ec51 0b10 	vmov	r0, r1, d0
 8001bde:	a35c      	add	r3, pc, #368	; (adr r3, 8001d50 <MPU6050_Read_All+0x3a0>)
 8001be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be4:	f7fe fd08 	bl	80005f8 <__aeabi_dmul>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001bf0:	e005      	b.n	8001bfe <MPU6050_Read_All+0x24e>
    }
    else
    {
        roll = 0.0;
 8001bf2:	f04f 0200 	mov.w	r2, #0
 8001bf6:	f04f 0300 	mov.w	r3, #0
 8001bfa:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c04:	425b      	negs	r3, r3
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7fe fc8c 	bl	8000524 <__aeabi_i2d>
 8001c0c:	4682      	mov	sl, r0
 8001c0e:	468b      	mov	fp, r1
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7fe fc84 	bl	8000524 <__aeabi_i2d>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	460b      	mov	r3, r1
 8001c20:	ec43 2b11 	vmov	d1, r2, r3
 8001c24:	ec4b ab10 	vmov	d0, sl, fp
 8001c28:	f007 fc97 	bl	800955a <atan2>
 8001c2c:	ec51 0b10 	vmov	r0, r1, d0
 8001c30:	a347      	add	r3, pc, #284	; (adr r3, 8001d50 <MPU6050_Read_All+0x3a0>)
 8001c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c36:	f7fe fcdf 	bl	80005f8 <__aeabi_dmul>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8001c42:	f04f 0200 	mov.w	r2, #0
 8001c46:	4b49      	ldr	r3, [pc, #292]	; (8001d6c <MPU6050_Read_All+0x3bc>)
 8001c48:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c4c:	f7fe ff46 	bl	8000adc <__aeabi_dcmplt>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d00a      	beq.n	8001c6c <MPU6050_Read_All+0x2bc>
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001c5c:	f04f 0200 	mov.w	r2, #0
 8001c60:	4b43      	ldr	r3, [pc, #268]	; (8001d70 <MPU6050_Read_All+0x3c0>)
 8001c62:	f7fe ff59 	bl	8000b18 <__aeabi_dcmpgt>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d114      	bne.n	8001c96 <MPU6050_Read_All+0x2e6>
 8001c6c:	f04f 0200 	mov.w	r2, #0
 8001c70:	4b3f      	ldr	r3, [pc, #252]	; (8001d70 <MPU6050_Read_All+0x3c0>)
 8001c72:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c76:	f7fe ff4f 	bl	8000b18 <__aeabi_dcmpgt>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d015      	beq.n	8001cac <MPU6050_Read_All+0x2fc>
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001c86:	f04f 0200 	mov.w	r2, #0
 8001c8a:	4b38      	ldr	r3, [pc, #224]	; (8001d6c <MPU6050_Read_All+0x3bc>)
 8001c8c:	f7fe ff26 	bl	8000adc <__aeabi_dcmplt>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d00a      	beq.n	8001cac <MPU6050_Read_All+0x2fc>
    {
        KalmanY.angle = pitch;
 8001c96:	4937      	ldr	r1, [pc, #220]	; (8001d74 <MPU6050_Read_All+0x3c4>)
 8001c98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c9c:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8001ca0:	6839      	ldr	r1, [r7, #0]
 8001ca2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ca6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001caa:	e014      	b.n	8001cd6 <MPU6050_Read_All+0x326>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8001cb2:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8001cb6:	eeb0 1a47 	vmov.f32	s2, s14
 8001cba:	eef0 1a67 	vmov.f32	s3, s15
 8001cbe:	ed97 0b06 	vldr	d0, [r7, #24]
 8001cc2:	482c      	ldr	r0, [pc, #176]	; (8001d74 <MPU6050_Read_All+0x3c4>)
 8001cc4:	f000 f85a 	bl	8001d7c <Kalman_getAngle>
 8001cc8:	eeb0 7a40 	vmov.f32	s14, s0
 8001ccc:	eef0 7a60 	vmov.f32	s15, s1
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001cdc:	4690      	mov	r8, r2
 8001cde:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001ce2:	f04f 0200 	mov.w	r2, #0
 8001ce6:	4b22      	ldr	r3, [pc, #136]	; (8001d70 <MPU6050_Read_All+0x3c0>)
 8001ce8:	4640      	mov	r0, r8
 8001cea:	4649      	mov	r1, r9
 8001cec:	f7fe ff14 	bl	8000b18 <__aeabi_dcmpgt>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d008      	beq.n	8001d08 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001cfc:	4614      	mov	r4, r2
 8001cfe:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8001d0e:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8001d12:	eeb0 1a47 	vmov.f32	s2, s14
 8001d16:	eef0 1a67 	vmov.f32	s3, s15
 8001d1a:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8001d1e:	4816      	ldr	r0, [pc, #88]	; (8001d78 <MPU6050_Read_All+0x3c8>)
 8001d20:	f000 f82c 	bl	8001d7c <Kalman_getAngle>
 8001d24:	eeb0 7a40 	vmov.f32	s14, s0
 8001d28:	eef0 7a60 	vmov.f32	s15, s1
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
}
 8001d32:	bf00      	nop
 8001d34:	3740      	adds	r7, #64	; 0x40
 8001d36:	46bd      	mov	sp, r7
 8001d38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d3c:	f3af 8000 	nop.w
 8001d40:	00000000 	.word	0x00000000
 8001d44:	40cc2900 	.word	0x40cc2900
 8001d48:	00000000 	.word	0x00000000
 8001d4c:	40606000 	.word	0x40606000
 8001d50:	1a63c1f8 	.word	0x1a63c1f8
 8001d54:	404ca5dc 	.word	0x404ca5dc
 8001d58:	40d00000 	.word	0x40d00000
 8001d5c:	43aa0000 	.word	0x43aa0000
 8001d60:	42121eb8 	.word	0x42121eb8
 8001d64:	20000548 	.word	0x20000548
 8001d68:	408f4000 	.word	0x408f4000
 8001d6c:	c0568000 	.word	0xc0568000
 8001d70:	40568000 	.word	0x40568000
 8001d74:	20000048 	.word	0x20000048
 8001d78:	20000000 	.word	0x20000000

08001d7c <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8001d7c:	b5b0      	push	{r4, r5, r7, lr}
 8001d7e:	b096      	sub	sp, #88	; 0x58
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	61f8      	str	r0, [r7, #28]
 8001d84:	ed87 0b04 	vstr	d0, [r7, #16]
 8001d88:	ed87 1b02 	vstr	d1, [r7, #8]
 8001d8c:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001d96:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d9a:	f7fe fa75 	bl	8000288 <__aeabi_dsub>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	460b      	mov	r3, r1
 8001da2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001dac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001db0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001db4:	f7fe fc20 	bl	80005f8 <__aeabi_dmul>
 8001db8:	4602      	mov	r2, r0
 8001dba:	460b      	mov	r3, r1
 8001dbc:	4620      	mov	r0, r4
 8001dbe:	4629      	mov	r1, r5
 8001dc0:	f7fe fa64 	bl	800028c <__adddf3>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	69f9      	ldr	r1, [r7, #28]
 8001dca:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001dda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001dde:	f7fe fc0b 	bl	80005f8 <__aeabi_dmul>
 8001de2:	4602      	mov	r2, r0
 8001de4:	460b      	mov	r3, r1
 8001de6:	4610      	mov	r0, r2
 8001de8:	4619      	mov	r1, r3
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001df0:	f7fe fa4a 	bl	8000288 <__aeabi_dsub>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	4610      	mov	r0, r2
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001e02:	f7fe fa41 	bl	8000288 <__aeabi_dsub>
 8001e06:	4602      	mov	r2, r0
 8001e08:	460b      	mov	r3, r1
 8001e0a:	4610      	mov	r0, r2
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e14:	f7fe fa3a 	bl	800028c <__adddf3>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	4610      	mov	r0, r2
 8001e1e:	4619      	mov	r1, r3
 8001e20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e24:	f7fe fbe8 	bl	80005f8 <__aeabi_dmul>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	4620      	mov	r0, r4
 8001e2e:	4629      	mov	r1, r5
 8001e30:	f7fe fa2c 	bl	800028c <__adddf3>
 8001e34:	4602      	mov	r2, r0
 8001e36:	460b      	mov	r3, r1
 8001e38:	69f9      	ldr	r1, [r7, #28]
 8001e3a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001e4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e4e:	f7fe fbd3 	bl	80005f8 <__aeabi_dmul>
 8001e52:	4602      	mov	r2, r0
 8001e54:	460b      	mov	r3, r1
 8001e56:	4620      	mov	r0, r4
 8001e58:	4629      	mov	r1, r5
 8001e5a:	f7fe fa15 	bl	8000288 <__aeabi_dsub>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	69f9      	ldr	r1, [r7, #28]
 8001e64:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001e74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e78:	f7fe fbbe 	bl	80005f8 <__aeabi_dmul>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	460b      	mov	r3, r1
 8001e80:	4620      	mov	r0, r4
 8001e82:	4629      	mov	r1, r5
 8001e84:	f7fe fa00 	bl	8000288 <__aeabi_dsub>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	69f9      	ldr	r1, [r7, #28]
 8001e8e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001e9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ea2:	f7fe fba9 	bl	80005f8 <__aeabi_dmul>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	4620      	mov	r0, r4
 8001eac:	4629      	mov	r1, r5
 8001eae:	f7fe f9ed 	bl	800028c <__adddf3>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	69f9      	ldr	r1, [r7, #28]
 8001eb8:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001ec8:	f7fe f9e0 	bl	800028c <__adddf3>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	460b      	mov	r3, r1
 8001ed0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001eda:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001ede:	f7fe fcb5 	bl	800084c <__aeabi_ddiv>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001ef0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001ef4:	f7fe fcaa 	bl	800084c <__aeabi_ddiv>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	460b      	mov	r3, r1
 8001efc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001f06:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f0a:	f7fe f9bd 	bl	8000288 <__aeabi_dsub>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001f1c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001f20:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001f24:	f7fe fb68 	bl	80005f8 <__aeabi_dmul>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	4620      	mov	r0, r4
 8001f2e:	4629      	mov	r1, r5
 8001f30:	f7fe f9ac 	bl	800028c <__adddf3>
 8001f34:	4602      	mov	r2, r0
 8001f36:	460b      	mov	r3, r1
 8001f38:	69f9      	ldr	r1, [r7, #28]
 8001f3a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001f44:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001f48:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001f4c:	f7fe fb54 	bl	80005f8 <__aeabi_dmul>
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	4620      	mov	r0, r4
 8001f56:	4629      	mov	r1, r5
 8001f58:	f7fe f998 	bl	800028c <__adddf3>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	460b      	mov	r3, r1
 8001f60:	69f9      	ldr	r1, [r7, #28]
 8001f62:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001f6c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001f76:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001f80:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001f84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001f88:	f7fe fb36 	bl	80005f8 <__aeabi_dmul>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	460b      	mov	r3, r1
 8001f90:	4620      	mov	r0, r4
 8001f92:	4629      	mov	r1, r5
 8001f94:	f7fe f978 	bl	8000288 <__aeabi_dsub>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	69f9      	ldr	r1, [r7, #28]
 8001f9e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001fa8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001fac:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001fb0:	f7fe fb22 	bl	80005f8 <__aeabi_dmul>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	4620      	mov	r0, r4
 8001fba:	4629      	mov	r1, r5
 8001fbc:	f7fe f964 	bl	8000288 <__aeabi_dsub>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	69f9      	ldr	r1, [r7, #28]
 8001fc6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001fd0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001fd4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001fd8:	f7fe fb0e 	bl	80005f8 <__aeabi_dmul>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	460b      	mov	r3, r1
 8001fe0:	4620      	mov	r0, r4
 8001fe2:	4629      	mov	r1, r5
 8001fe4:	f7fe f950 	bl	8000288 <__aeabi_dsub>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	460b      	mov	r3, r1
 8001fec:	69f9      	ldr	r1, [r7, #28]
 8001fee:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001ff8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001ffc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002000:	f7fe fafa 	bl	80005f8 <__aeabi_dmul>
 8002004:	4602      	mov	r2, r0
 8002006:	460b      	mov	r3, r1
 8002008:	4620      	mov	r0, r4
 800200a:	4629      	mov	r1, r5
 800200c:	f7fe f93c 	bl	8000288 <__aeabi_dsub>
 8002010:	4602      	mov	r2, r0
 8002012:	460b      	mov	r3, r1
 8002014:	69f9      	ldr	r1, [r7, #28]
 8002016:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002020:	ec43 2b17 	vmov	d7, r2, r3
};
 8002024:	eeb0 0a47 	vmov.f32	s0, s14
 8002028:	eef0 0a67 	vmov.f32	s1, s15
 800202c:	3758      	adds	r7, #88	; 0x58
 800202e:	46bd      	mov	sp, r7
 8002030:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002034 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800203a:	4b0f      	ldr	r3, [pc, #60]	; (8002078 <HAL_MspInit+0x44>)
 800203c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800203e:	4a0e      	ldr	r2, [pc, #56]	; (8002078 <HAL_MspInit+0x44>)
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	6613      	str	r3, [r2, #96]	; 0x60
 8002046:	4b0c      	ldr	r3, [pc, #48]	; (8002078 <HAL_MspInit+0x44>)
 8002048:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	607b      	str	r3, [r7, #4]
 8002050:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002052:	4b09      	ldr	r3, [pc, #36]	; (8002078 <HAL_MspInit+0x44>)
 8002054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002056:	4a08      	ldr	r2, [pc, #32]	; (8002078 <HAL_MspInit+0x44>)
 8002058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800205c:	6593      	str	r3, [r2, #88]	; 0x58
 800205e:	4b06      	ldr	r3, [pc, #24]	; (8002078 <HAL_MspInit+0x44>)
 8002060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002066:	603b      	str	r3, [r7, #0]
 8002068:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	40021000 	.word	0x40021000

0800207c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b0ac      	sub	sp, #176	; 0xb0
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002084:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	605a      	str	r2, [r3, #4]
 800208e:	609a      	str	r2, [r3, #8]
 8002090:	60da      	str	r2, [r3, #12]
 8002092:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002094:	f107 0314 	add.w	r3, r7, #20
 8002098:	2288      	movs	r2, #136	; 0x88
 800209a:	2100      	movs	r1, #0
 800209c:	4618      	mov	r0, r3
 800209e:	f007 fc3f 	bl	8009920 <memset>
  if(hadc->Instance==ADC1)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a41      	ldr	r2, [pc, #260]	; (80021ac <HAL_ADC_MspInit+0x130>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d17a      	bne.n	80021a2 <HAL_ADC_MspInit+0x126>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80020ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80020b0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80020b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80020b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80020ba:	2302      	movs	r3, #2
 80020bc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80020be:	2301      	movs	r3, #1
 80020c0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80020c2:	2308      	movs	r3, #8
 80020c4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80020c6:	2307      	movs	r3, #7
 80020c8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80020ca:	2302      	movs	r3, #2
 80020cc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80020ce:	2302      	movs	r3, #2
 80020d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80020d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020d6:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020d8:	f107 0314 	add.w	r3, r7, #20
 80020dc:	4618      	mov	r0, r3
 80020de:	f004 f849 	bl	8006174 <HAL_RCCEx_PeriphCLKConfig>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80020e8:	f7ff fc5a 	bl	80019a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80020ec:	4b30      	ldr	r3, [pc, #192]	; (80021b0 <HAL_ADC_MspInit+0x134>)
 80020ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f0:	4a2f      	ldr	r2, [pc, #188]	; (80021b0 <HAL_ADC_MspInit+0x134>)
 80020f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80020f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020f8:	4b2d      	ldr	r3, [pc, #180]	; (80021b0 <HAL_ADC_MspInit+0x134>)
 80020fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002100:	613b      	str	r3, [r7, #16]
 8002102:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002104:	4b2a      	ldr	r3, [pc, #168]	; (80021b0 <HAL_ADC_MspInit+0x134>)
 8002106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002108:	4a29      	ldr	r2, [pc, #164]	; (80021b0 <HAL_ADC_MspInit+0x134>)
 800210a:	f043 0301 	orr.w	r3, r3, #1
 800210e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002110:	4b27      	ldr	r3, [pc, #156]	; (80021b0 <HAL_ADC_MspInit+0x134>)
 8002112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002114:	f003 0301 	and.w	r3, r3, #1
 8002118:	60fb      	str	r3, [r7, #12]
 800211a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800211c:	2301      	movs	r3, #1
 800211e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002122:	230b      	movs	r3, #11
 8002124:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002128:	2300      	movs	r3, #0
 800212a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800212e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002132:	4619      	mov	r1, r3
 8002134:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002138:	f002 fb74 	bl	8004824 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800213c:	4b1d      	ldr	r3, [pc, #116]	; (80021b4 <HAL_ADC_MspInit+0x138>)
 800213e:	4a1e      	ldr	r2, [pc, #120]	; (80021b8 <HAL_ADC_MspInit+0x13c>)
 8002140:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8002142:	4b1c      	ldr	r3, [pc, #112]	; (80021b4 <HAL_ADC_MspInit+0x138>)
 8002144:	2200      	movs	r2, #0
 8002146:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002148:	4b1a      	ldr	r3, [pc, #104]	; (80021b4 <HAL_ADC_MspInit+0x138>)
 800214a:	2200      	movs	r2, #0
 800214c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800214e:	4b19      	ldr	r3, [pc, #100]	; (80021b4 <HAL_ADC_MspInit+0x138>)
 8002150:	2200      	movs	r2, #0
 8002152:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002154:	4b17      	ldr	r3, [pc, #92]	; (80021b4 <HAL_ADC_MspInit+0x138>)
 8002156:	2280      	movs	r2, #128	; 0x80
 8002158:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800215a:	4b16      	ldr	r3, [pc, #88]	; (80021b4 <HAL_ADC_MspInit+0x138>)
 800215c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002160:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002162:	4b14      	ldr	r3, [pc, #80]	; (80021b4 <HAL_ADC_MspInit+0x138>)
 8002164:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002168:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800216a:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <HAL_ADC_MspInit+0x138>)
 800216c:	2200      	movs	r2, #0
 800216e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002170:	4b10      	ldr	r3, [pc, #64]	; (80021b4 <HAL_ADC_MspInit+0x138>)
 8002172:	2200      	movs	r2, #0
 8002174:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002176:	480f      	ldr	r0, [pc, #60]	; (80021b4 <HAL_ADC_MspInit+0x138>)
 8002178:	f002 f96e 	bl	8004458 <HAL_DMA_Init>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 8002182:	f7ff fc0d 	bl	80019a0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a0a      	ldr	r2, [pc, #40]	; (80021b4 <HAL_ADC_MspInit+0x138>)
 800218a:	64da      	str	r2, [r3, #76]	; 0x4c
 800218c:	4a09      	ldr	r2, [pc, #36]	; (80021b4 <HAL_ADC_MspInit+0x138>)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002192:	2200      	movs	r2, #0
 8002194:	2100      	movs	r1, #0
 8002196:	2012      	movs	r0, #18
 8002198:	f002 f927 	bl	80043ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800219c:	2012      	movs	r0, #18
 800219e:	f002 f940 	bl	8004422 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80021a2:	bf00      	nop
 80021a4:	37b0      	adds	r7, #176	; 0xb0
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	50040000 	.word	0x50040000
 80021b0:	40021000 	.word	0x40021000
 80021b4:	200002f8 	.word	0x200002f8
 80021b8:	40020008 	.word	0x40020008

080021bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b0ac      	sub	sp, #176	; 0xb0
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	605a      	str	r2, [r3, #4]
 80021ce:	609a      	str	r2, [r3, #8]
 80021d0:	60da      	str	r2, [r3, #12]
 80021d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021d4:	f107 0314 	add.w	r3, r7, #20
 80021d8:	2288      	movs	r2, #136	; 0x88
 80021da:	2100      	movs	r1, #0
 80021dc:	4618      	mov	r0, r3
 80021de:	f007 fb9f 	bl	8009920 <memset>
  if(hi2c->Instance==I2C1)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a21      	ldr	r2, [pc, #132]	; (800226c <HAL_I2C_MspInit+0xb0>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d13b      	bne.n	8002264 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80021ec:	2340      	movs	r3, #64	; 0x40
 80021ee:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80021f0:	2300      	movs	r3, #0
 80021f2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021f4:	f107 0314 	add.w	r3, r7, #20
 80021f8:	4618      	mov	r0, r3
 80021fa:	f003 ffbb 	bl	8006174 <HAL_RCCEx_PeriphCLKConfig>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002204:	f7ff fbcc 	bl	80019a0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002208:	4b19      	ldr	r3, [pc, #100]	; (8002270 <HAL_I2C_MspInit+0xb4>)
 800220a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800220c:	4a18      	ldr	r2, [pc, #96]	; (8002270 <HAL_I2C_MspInit+0xb4>)
 800220e:	f043 0302 	orr.w	r3, r3, #2
 8002212:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002214:	4b16      	ldr	r3, [pc, #88]	; (8002270 <HAL_I2C_MspInit+0xb4>)
 8002216:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	613b      	str	r3, [r7, #16]
 800221e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002220:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002224:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002228:	2312      	movs	r3, #18
 800222a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222e:	2300      	movs	r3, #0
 8002230:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002234:	2303      	movs	r3, #3
 8002236:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800223a:	2304      	movs	r3, #4
 800223c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002240:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002244:	4619      	mov	r1, r3
 8002246:	480b      	ldr	r0, [pc, #44]	; (8002274 <HAL_I2C_MspInit+0xb8>)
 8002248:	f002 faec 	bl	8004824 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800224c:	4b08      	ldr	r3, [pc, #32]	; (8002270 <HAL_I2C_MspInit+0xb4>)
 800224e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002250:	4a07      	ldr	r2, [pc, #28]	; (8002270 <HAL_I2C_MspInit+0xb4>)
 8002252:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002256:	6593      	str	r3, [r2, #88]	; 0x58
 8002258:	4b05      	ldr	r3, [pc, #20]	; (8002270 <HAL_I2C_MspInit+0xb4>)
 800225a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002264:	bf00      	nop
 8002266:	37b0      	adds	r7, #176	; 0xb0
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40005400 	.word	0x40005400
 8002270:	40021000 	.word	0x40021000
 8002274:	48000400 	.word	0x48000400

08002278 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a0d      	ldr	r2, [pc, #52]	; (80022bc <HAL_TIM_Base_MspInit+0x44>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d113      	bne.n	80022b2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800228a:	4b0d      	ldr	r3, [pc, #52]	; (80022c0 <HAL_TIM_Base_MspInit+0x48>)
 800228c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800228e:	4a0c      	ldr	r2, [pc, #48]	; (80022c0 <HAL_TIM_Base_MspInit+0x48>)
 8002290:	f043 0302 	orr.w	r3, r3, #2
 8002294:	6593      	str	r3, [r2, #88]	; 0x58
 8002296:	4b0a      	ldr	r3, [pc, #40]	; (80022c0 <HAL_TIM_Base_MspInit+0x48>)
 8002298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	60fb      	str	r3, [r7, #12]
 80022a0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80022a2:	2200      	movs	r2, #0
 80022a4:	2100      	movs	r1, #0
 80022a6:	201d      	movs	r0, #29
 80022a8:	f002 f89f 	bl	80043ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80022ac:	201d      	movs	r0, #29
 80022ae:	f002 f8b8 	bl	8004422 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80022b2:	bf00      	nop
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40000400 	.word	0x40000400
 80022c0:	40021000 	.word	0x40021000

080022c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b088      	sub	sp, #32
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022cc:	f107 030c 	add.w	r3, r7, #12
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	605a      	str	r2, [r3, #4]
 80022d6:	609a      	str	r2, [r3, #8]
 80022d8:	60da      	str	r2, [r3, #12]
 80022da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a11      	ldr	r2, [pc, #68]	; (8002328 <HAL_TIM_MspPostInit+0x64>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d11c      	bne.n	8002320 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e6:	4b11      	ldr	r3, [pc, #68]	; (800232c <HAL_TIM_MspPostInit+0x68>)
 80022e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ea:	4a10      	ldr	r2, [pc, #64]	; (800232c <HAL_TIM_MspPostInit+0x68>)
 80022ec:	f043 0301 	orr.w	r3, r3, #1
 80022f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022f2:	4b0e      	ldr	r3, [pc, #56]	; (800232c <HAL_TIM_MspPostInit+0x68>)
 80022f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	60bb      	str	r3, [r7, #8]
 80022fc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80022fe:	2380      	movs	r3, #128	; 0x80
 8002300:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002302:	2302      	movs	r3, #2
 8002304:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002306:	2300      	movs	r3, #0
 8002308:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230a:	2300      	movs	r3, #0
 800230c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800230e:	2302      	movs	r3, #2
 8002310:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002312:	f107 030c 	add.w	r3, r7, #12
 8002316:	4619      	mov	r1, r3
 8002318:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800231c:	f002 fa82 	bl	8004824 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002320:	bf00      	nop
 8002322:	3720      	adds	r7, #32
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40000400 	.word	0x40000400
 800232c:	40021000 	.word	0x40021000

08002330 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b0ac      	sub	sp, #176	; 0xb0
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002338:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	605a      	str	r2, [r3, #4]
 8002342:	609a      	str	r2, [r3, #8]
 8002344:	60da      	str	r2, [r3, #12]
 8002346:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002348:	f107 0314 	add.w	r3, r7, #20
 800234c:	2288      	movs	r2, #136	; 0x88
 800234e:	2100      	movs	r1, #0
 8002350:	4618      	mov	r0, r3
 8002352:	f007 fae5 	bl	8009920 <memset>
  if(huart->Instance==USART2)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a4f      	ldr	r2, [pc, #316]	; (8002498 <HAL_UART_MspInit+0x168>)
 800235c:	4293      	cmp	r3, r2
 800235e:	f040 8096 	bne.w	800248e <HAL_UART_MspInit+0x15e>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002362:	2302      	movs	r3, #2
 8002364:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002366:	2300      	movs	r3, #0
 8002368:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800236a:	f107 0314 	add.w	r3, r7, #20
 800236e:	4618      	mov	r0, r3
 8002370:	f003 ff00 	bl	8006174 <HAL_RCCEx_PeriphCLKConfig>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800237a:	f7ff fb11 	bl	80019a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800237e:	4b47      	ldr	r3, [pc, #284]	; (800249c <HAL_UART_MspInit+0x16c>)
 8002380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002382:	4a46      	ldr	r2, [pc, #280]	; (800249c <HAL_UART_MspInit+0x16c>)
 8002384:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002388:	6593      	str	r3, [r2, #88]	; 0x58
 800238a:	4b44      	ldr	r3, [pc, #272]	; (800249c <HAL_UART_MspInit+0x16c>)
 800238c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002392:	613b      	str	r3, [r7, #16]
 8002394:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002396:	4b41      	ldr	r3, [pc, #260]	; (800249c <HAL_UART_MspInit+0x16c>)
 8002398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800239a:	4a40      	ldr	r2, [pc, #256]	; (800249c <HAL_UART_MspInit+0x16c>)
 800239c:	f043 0301 	orr.w	r3, r3, #1
 80023a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023a2:	4b3e      	ldr	r3, [pc, #248]	; (800249c <HAL_UART_MspInit+0x16c>)
 80023a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80023ae:	230c      	movs	r3, #12
 80023b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b4:	2302      	movs	r3, #2
 80023b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ba:	2300      	movs	r3, #0
 80023bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023c0:	2303      	movs	r3, #3
 80023c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023c6:	2307      	movs	r3, #7
 80023c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80023d0:	4619      	mov	r1, r3
 80023d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023d6:	f002 fa25 	bl	8004824 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80023da:	4b31      	ldr	r3, [pc, #196]	; (80024a0 <HAL_UART_MspInit+0x170>)
 80023dc:	4a31      	ldr	r2, [pc, #196]	; (80024a4 <HAL_UART_MspInit+0x174>)
 80023de:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 80023e0:	4b2f      	ldr	r3, [pc, #188]	; (80024a0 <HAL_UART_MspInit+0x170>)
 80023e2:	2202      	movs	r2, #2
 80023e4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023e6:	4b2e      	ldr	r3, [pc, #184]	; (80024a0 <HAL_UART_MspInit+0x170>)
 80023e8:	2210      	movs	r2, #16
 80023ea:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023ec:	4b2c      	ldr	r3, [pc, #176]	; (80024a0 <HAL_UART_MspInit+0x170>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80023f2:	4b2b      	ldr	r3, [pc, #172]	; (80024a0 <HAL_UART_MspInit+0x170>)
 80023f4:	2280      	movs	r2, #128	; 0x80
 80023f6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023f8:	4b29      	ldr	r3, [pc, #164]	; (80024a0 <HAL_UART_MspInit+0x170>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023fe:	4b28      	ldr	r3, [pc, #160]	; (80024a0 <HAL_UART_MspInit+0x170>)
 8002400:	2200      	movs	r2, #0
 8002402:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002404:	4b26      	ldr	r3, [pc, #152]	; (80024a0 <HAL_UART_MspInit+0x170>)
 8002406:	2200      	movs	r2, #0
 8002408:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800240a:	4b25      	ldr	r3, [pc, #148]	; (80024a0 <HAL_UART_MspInit+0x170>)
 800240c:	2200      	movs	r2, #0
 800240e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002410:	4823      	ldr	r0, [pc, #140]	; (80024a0 <HAL_UART_MspInit+0x170>)
 8002412:	f002 f821 	bl	8004458 <HAL_DMA_Init>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 800241c:	f7ff fac0 	bl	80019a0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	4a1f      	ldr	r2, [pc, #124]	; (80024a0 <HAL_UART_MspInit+0x170>)
 8002424:	66da      	str	r2, [r3, #108]	; 0x6c
 8002426:	4a1e      	ldr	r2, [pc, #120]	; (80024a0 <HAL_UART_MspInit+0x170>)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800242c:	4b1e      	ldr	r3, [pc, #120]	; (80024a8 <HAL_UART_MspInit+0x178>)
 800242e:	4a1f      	ldr	r2, [pc, #124]	; (80024ac <HAL_UART_MspInit+0x17c>)
 8002430:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8002432:	4b1d      	ldr	r3, [pc, #116]	; (80024a8 <HAL_UART_MspInit+0x178>)
 8002434:	2202      	movs	r2, #2
 8002436:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002438:	4b1b      	ldr	r3, [pc, #108]	; (80024a8 <HAL_UART_MspInit+0x178>)
 800243a:	2200      	movs	r2, #0
 800243c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800243e:	4b1a      	ldr	r3, [pc, #104]	; (80024a8 <HAL_UART_MspInit+0x178>)
 8002440:	2200      	movs	r2, #0
 8002442:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002444:	4b18      	ldr	r3, [pc, #96]	; (80024a8 <HAL_UART_MspInit+0x178>)
 8002446:	2280      	movs	r2, #128	; 0x80
 8002448:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800244a:	4b17      	ldr	r3, [pc, #92]	; (80024a8 <HAL_UART_MspInit+0x178>)
 800244c:	2200      	movs	r2, #0
 800244e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002450:	4b15      	ldr	r3, [pc, #84]	; (80024a8 <HAL_UART_MspInit+0x178>)
 8002452:	2200      	movs	r2, #0
 8002454:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002456:	4b14      	ldr	r3, [pc, #80]	; (80024a8 <HAL_UART_MspInit+0x178>)
 8002458:	2200      	movs	r2, #0
 800245a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800245c:	4b12      	ldr	r3, [pc, #72]	; (80024a8 <HAL_UART_MspInit+0x178>)
 800245e:	2200      	movs	r2, #0
 8002460:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002462:	4811      	ldr	r0, [pc, #68]	; (80024a8 <HAL_UART_MspInit+0x178>)
 8002464:	f001 fff8 	bl	8004458 <HAL_DMA_Init>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 800246e:	f7ff fa97 	bl	80019a0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a0c      	ldr	r2, [pc, #48]	; (80024a8 <HAL_UART_MspInit+0x178>)
 8002476:	671a      	str	r2, [r3, #112]	; 0x70
 8002478:	4a0b      	ldr	r2, [pc, #44]	; (80024a8 <HAL_UART_MspInit+0x178>)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800247e:	2200      	movs	r2, #0
 8002480:	2100      	movs	r1, #0
 8002482:	2026      	movs	r0, #38	; 0x26
 8002484:	f001 ffb1 	bl	80043ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002488:	2026      	movs	r0, #38	; 0x26
 800248a:	f001 ffca 	bl	8004422 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800248e:	bf00      	nop
 8002490:	37b0      	adds	r7, #176	; 0xb0
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	40004400 	.word	0x40004400
 800249c:	40021000 	.word	0x40021000
 80024a0:	2000045c 	.word	0x2000045c
 80024a4:	40020080 	.word	0x40020080
 80024a8:	200004a4 	.word	0x200004a4
 80024ac:	4002006c 	.word	0x4002006c

080024b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024b4:	e7fe      	b.n	80024b4 <NMI_Handler+0x4>

080024b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024b6:	b480      	push	{r7}
 80024b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024ba:	e7fe      	b.n	80024ba <HardFault_Handler+0x4>

080024bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024c0:	e7fe      	b.n	80024c0 <MemManage_Handler+0x4>

080024c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024c2:	b480      	push	{r7}
 80024c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024c6:	e7fe      	b.n	80024c6 <BusFault_Handler+0x4>

080024c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024cc:	e7fe      	b.n	80024cc <UsageFault_Handler+0x4>

080024ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024ce:	b480      	push	{r7}
 80024d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024d2:	bf00      	nop
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024e0:	bf00      	nop
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr

080024ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024ea:	b480      	push	{r7}
 80024ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024ee:	bf00      	nop
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024fc:	f000 f9d8 	bl	80028b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002500:	bf00      	nop
 8002502:	bd80      	pop	{r7, pc}

08002504 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002508:	4802      	ldr	r0, [pc, #8]	; (8002514 <DMA1_Channel1_IRQHandler+0x10>)
 800250a:	f002 f8dc 	bl	80046c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800250e:	bf00      	nop
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	200002f8 	.word	0x200002f8

08002518 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800251c:	4802      	ldr	r0, [pc, #8]	; (8002528 <DMA1_Channel6_IRQHandler+0x10>)
 800251e:	f002 f8d2 	bl	80046c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002522:	bf00      	nop
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	200004a4 	.word	0x200004a4

0800252c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002530:	4802      	ldr	r0, [pc, #8]	; (800253c <DMA1_Channel7_IRQHandler+0x10>)
 8002532:	f002 f8c8 	bl	80046c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002536:	bf00      	nop
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	2000045c 	.word	0x2000045c

08002540 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002544:	4802      	ldr	r0, [pc, #8]	; (8002550 <ADC1_2_IRQHandler+0x10>)
 8002546:	f000 fee3 	bl	8003310 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800254a:	bf00      	nop
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	20000294 	.word	0x20000294

08002554 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002558:	4802      	ldr	r0, [pc, #8]	; (8002564 <TIM3_IRQHandler+0x10>)
 800255a:	f004 fc85 	bl	8006e68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800255e:	bf00      	nop
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	2000038c 	.word	0x2000038c

08002568 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800256c:	4802      	ldr	r0, [pc, #8]	; (8002578 <USART2_IRQHandler+0x10>)
 800256e:	f005 fe35 	bl	80081dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002572:	bf00      	nop
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	200003d8 	.word	0x200003d8

0800257c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
	return 1;
 8002580:	2301      	movs	r3, #1
}
 8002582:	4618      	mov	r0, r3
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <_kill>:

int _kill(int pid, int sig)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002596:	f007 f98b 	bl	80098b0 <__errno>
 800259a:	4603      	mov	r3, r0
 800259c:	2216      	movs	r2, #22
 800259e:	601a      	str	r2, [r3, #0]
	return -1;
 80025a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3708      	adds	r7, #8
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <_exit>:

void _exit (int status)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80025b4:	f04f 31ff 	mov.w	r1, #4294967295
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f7ff ffe7 	bl	800258c <_kill>
	while (1) {}		/* Make sure we hang here */
 80025be:	e7fe      	b.n	80025be <_exit+0x12>

080025c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025cc:	2300      	movs	r3, #0
 80025ce:	617b      	str	r3, [r7, #20]
 80025d0:	e00a      	b.n	80025e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80025d2:	f3af 8000 	nop.w
 80025d6:	4601      	mov	r1, r0
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	1c5a      	adds	r2, r3, #1
 80025dc:	60ba      	str	r2, [r7, #8]
 80025de:	b2ca      	uxtb	r2, r1
 80025e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	3301      	adds	r3, #1
 80025e6:	617b      	str	r3, [r7, #20]
 80025e8:	697a      	ldr	r2, [r7, #20]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	dbf0      	blt.n	80025d2 <_read+0x12>
	}

return len;
 80025f0:	687b      	ldr	r3, [r7, #4]
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3718      	adds	r7, #24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <_close>:
	}
	return len;
}

int _close(int file)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b083      	sub	sp, #12
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
	return -1;
 8002602:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002606:	4618      	mov	r0, r3
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002612:	b480      	push	{r7}
 8002614:	b083      	sub	sp, #12
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
 800261a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002622:	605a      	str	r2, [r3, #4]
	return 0;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr

08002632 <_isatty>:

int _isatty(int file)
{
 8002632:	b480      	push	{r7}
 8002634:	b083      	sub	sp, #12
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
	return 1;
 800263a:	2301      	movs	r3, #1
}
 800263c:	4618      	mov	r0, r3
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
	return 0;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3714      	adds	r7, #20
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
	...

08002664 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800266c:	4a14      	ldr	r2, [pc, #80]	; (80026c0 <_sbrk+0x5c>)
 800266e:	4b15      	ldr	r3, [pc, #84]	; (80026c4 <_sbrk+0x60>)
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002678:	4b13      	ldr	r3, [pc, #76]	; (80026c8 <_sbrk+0x64>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d102      	bne.n	8002686 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002680:	4b11      	ldr	r3, [pc, #68]	; (80026c8 <_sbrk+0x64>)
 8002682:	4a12      	ldr	r2, [pc, #72]	; (80026cc <_sbrk+0x68>)
 8002684:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002686:	4b10      	ldr	r3, [pc, #64]	; (80026c8 <_sbrk+0x64>)
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4413      	add	r3, r2
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	429a      	cmp	r2, r3
 8002692:	d207      	bcs.n	80026a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002694:	f007 f90c 	bl	80098b0 <__errno>
 8002698:	4603      	mov	r3, r0
 800269a:	220c      	movs	r2, #12
 800269c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800269e:	f04f 33ff 	mov.w	r3, #4294967295
 80026a2:	e009      	b.n	80026b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026a4:	4b08      	ldr	r3, [pc, #32]	; (80026c8 <_sbrk+0x64>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026aa:	4b07      	ldr	r3, [pc, #28]	; (80026c8 <_sbrk+0x64>)
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4413      	add	r3, r2
 80026b2:	4a05      	ldr	r2, [pc, #20]	; (80026c8 <_sbrk+0x64>)
 80026b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026b6:	68fb      	ldr	r3, [r7, #12]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3718      	adds	r7, #24
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	20018000 	.word	0x20018000
 80026c4:	00000400 	.word	0x00000400
 80026c8:	2000054c 	.word	0x2000054c
 80026cc:	20000568 	.word	0x20000568

080026d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80026d4:	4b06      	ldr	r3, [pc, #24]	; (80026f0 <SystemInit+0x20>)
 80026d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026da:	4a05      	ldr	r2, [pc, #20]	; (80026f0 <SystemInit+0x20>)
 80026dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80026e4:	bf00      	nop
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	e000ed00 	.word	0xe000ed00

080026f4 <load_adc>:
	 return concat_value;
}*/



int load_adc(ADC_HandleTypeDef hadc, int polTime) {
 80026f4:	b084      	sub	sp, #16
 80026f6:	b580      	push	{r7, lr}
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	f107 0c08 	add.w	ip, r7, #8
 80026fe:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	HAL_ADC_Start(&hadc);
 8002702:	f107 0008 	add.w	r0, r7, #8
 8002706:	f000 fc63 	bl	8002fd0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, polTime);
 800270a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800270c:	4619      	mov	r1, r3
 800270e:	f107 0008 	add.w	r0, r7, #8
 8002712:	f000 fd17 	bl	8003144 <HAL_ADC_PollForConversion>
	return HAL_ADC_GetValue(&hadc);
 8002716:	f107 0008 	add.w	r0, r7, #8
 800271a:	f000 fdeb 	bl	80032f4 <HAL_ADC_GetValue>
 800271e:	4603      	mov	r3, r0



}
 8002720:	4618      	mov	r0, r3
 8002722:	46bd      	mov	sp, r7
 8002724:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002728:	b004      	add	sp, #16
 800272a:	4770      	bx	lr

0800272c <mapping_adc_value>:

int mapping_adc_value(int val){
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
	remap = 1512 +  (val * 2583/4095);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f640 2217 	movw	r2, #2583	; 0xa17
 800273a:	fb02 f303 	mul.w	r3, r2, r3
 800273e:	4a0f      	ldr	r2, [pc, #60]	; (800277c <mapping_adc_value+0x50>)
 8002740:	fb82 1203 	smull	r1, r2, r2, r3
 8002744:	441a      	add	r2, r3
 8002746:	12d2      	asrs	r2, r2, #11
 8002748:	17db      	asrs	r3, r3, #31
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	f503 63bd 	add.w	r3, r3, #1512	; 0x5e8
 8002750:	ee07 3a90 	vmov	s15, r3
 8002754:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002758:	4b09      	ldr	r3, [pc, #36]	; (8002780 <mapping_adc_value+0x54>)
 800275a:	edc3 7a00 	vstr	s15, [r3]
	int map =  remap;
 800275e:	4b08      	ldr	r3, [pc, #32]	; (8002780 <mapping_adc_value+0x54>)
 8002760:	edd3 7a00 	vldr	s15, [r3]
 8002764:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002768:	ee17 3a90 	vmov	r3, s15
 800276c:	60fb      	str	r3, [r7, #12]
	return map;
 800276e:	68fb      	ldr	r3, [r7, #12]
}
 8002770:	4618      	mov	r0, r3
 8002772:	3714      	adds	r7, #20
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr
 800277c:	80080081 	.word	0x80080081
 8002780:	20000550 	.word	0x20000550

08002784 <load_pwm>:

void load_pwm(TIM_HandleTypeDef htimX, int val) {
 8002784:	b084      	sub	sp, #16
 8002786:	b490      	push	{r4, r7}
 8002788:	af00      	add	r7, sp, #0
 800278a:	f107 0408 	add.w	r4, r7, #8
 800278e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	htimX.Instance->CCR2 = val;
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002796:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002798:	bf00      	nop
 800279a:	46bd      	mov	sp, r7
 800279c:	bc90      	pop	{r4, r7}
 800279e:	b004      	add	sp, #16
 80027a0:	4770      	bx	lr
	...

080027a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80027a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027dc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80027a8:	f7ff ff92 	bl	80026d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027ac:	480c      	ldr	r0, [pc, #48]	; (80027e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80027ae:	490d      	ldr	r1, [pc, #52]	; (80027e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80027b0:	4a0d      	ldr	r2, [pc, #52]	; (80027e8 <LoopForever+0xe>)
  movs r3, #0
 80027b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027b4:	e002      	b.n	80027bc <LoopCopyDataInit>

080027b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027ba:	3304      	adds	r3, #4

080027bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027c0:	d3f9      	bcc.n	80027b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027c2:	4a0a      	ldr	r2, [pc, #40]	; (80027ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80027c4:	4c0a      	ldr	r4, [pc, #40]	; (80027f0 <LoopForever+0x16>)
  movs r3, #0
 80027c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027c8:	e001      	b.n	80027ce <LoopFillZerobss>

080027ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027cc:	3204      	adds	r2, #4

080027ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027d0:	d3fb      	bcc.n	80027ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027d2:	f007 f873 	bl	80098bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80027d6:	f7fe fc39 	bl	800104c <main>

080027da <LoopForever>:

LoopForever:
    b LoopForever
 80027da:	e7fe      	b.n	80027da <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80027dc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80027e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027e4:	20000278 	.word	0x20000278
  ldr r2, =_sidata
 80027e8:	0800ea34 	.word	0x0800ea34
  ldr r2, =_sbss
 80027ec:	20000278 	.word	0x20000278
  ldr r4, =_ebss
 80027f0:	20000568 	.word	0x20000568

080027f4 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80027f4:	e7fe      	b.n	80027f4 <ADC3_IRQHandler>
	...

080027f8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80027fe:	2300      	movs	r3, #0
 8002800:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002802:	4b0c      	ldr	r3, [pc, #48]	; (8002834 <HAL_Init+0x3c>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a0b      	ldr	r2, [pc, #44]	; (8002834 <HAL_Init+0x3c>)
 8002808:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800280c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800280e:	2003      	movs	r0, #3
 8002810:	f001 fde0 	bl	80043d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002814:	2000      	movs	r0, #0
 8002816:	f000 f80f 	bl	8002838 <HAL_InitTick>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d002      	beq.n	8002826 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	71fb      	strb	r3, [r7, #7]
 8002824:	e001      	b.n	800282a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002826:	f7ff fc05 	bl	8002034 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800282a:	79fb      	ldrb	r3, [r7, #7]
}
 800282c:	4618      	mov	r0, r3
 800282e:	3708      	adds	r7, #8
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40022000 	.word	0x40022000

08002838 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002840:	2300      	movs	r3, #0
 8002842:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002844:	4b17      	ldr	r3, [pc, #92]	; (80028a4 <HAL_InitTick+0x6c>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d023      	beq.n	8002894 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800284c:	4b16      	ldr	r3, [pc, #88]	; (80028a8 <HAL_InitTick+0x70>)
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	4b14      	ldr	r3, [pc, #80]	; (80028a4 <HAL_InitTick+0x6c>)
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	4619      	mov	r1, r3
 8002856:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800285a:	fbb3 f3f1 	udiv	r3, r3, r1
 800285e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002862:	4618      	mov	r0, r3
 8002864:	f001 fdeb 	bl	800443e <HAL_SYSTICK_Config>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d10f      	bne.n	800288e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2b0f      	cmp	r3, #15
 8002872:	d809      	bhi.n	8002888 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002874:	2200      	movs	r2, #0
 8002876:	6879      	ldr	r1, [r7, #4]
 8002878:	f04f 30ff 	mov.w	r0, #4294967295
 800287c:	f001 fdb5 	bl	80043ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002880:	4a0a      	ldr	r2, [pc, #40]	; (80028ac <HAL_InitTick+0x74>)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6013      	str	r3, [r2, #0]
 8002886:	e007      	b.n	8002898 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	73fb      	strb	r3, [r7, #15]
 800288c:	e004      	b.n	8002898 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	73fb      	strb	r3, [r7, #15]
 8002892:	e001      	b.n	8002898 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002898:	7bfb      	ldrb	r3, [r7, #15]
}
 800289a:	4618      	mov	r0, r3
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	200000a0 	.word	0x200000a0
 80028a8:	20000090 	.word	0x20000090
 80028ac:	2000009c 	.word	0x2000009c

080028b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80028b4:	4b06      	ldr	r3, [pc, #24]	; (80028d0 <HAL_IncTick+0x20>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	461a      	mov	r2, r3
 80028ba:	4b06      	ldr	r3, [pc, #24]	; (80028d4 <HAL_IncTick+0x24>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4413      	add	r3, r2
 80028c0:	4a04      	ldr	r2, [pc, #16]	; (80028d4 <HAL_IncTick+0x24>)
 80028c2:	6013      	str	r3, [r2, #0]
}
 80028c4:	bf00      	nop
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	200000a0 	.word	0x200000a0
 80028d4:	20000554 	.word	0x20000554

080028d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  return uwTick;
 80028dc:	4b03      	ldr	r3, [pc, #12]	; (80028ec <HAL_GetTick+0x14>)
 80028de:	681b      	ldr	r3, [r3, #0]
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	20000554 	.word	0x20000554

080028f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028f8:	f7ff ffee 	bl	80028d8 <HAL_GetTick>
 80028fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002908:	d005      	beq.n	8002916 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800290a:	4b0a      	ldr	r3, [pc, #40]	; (8002934 <HAL_Delay+0x44>)
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	461a      	mov	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	4413      	add	r3, r2
 8002914:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002916:	bf00      	nop
 8002918:	f7ff ffde 	bl	80028d8 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	429a      	cmp	r2, r3
 8002926:	d8f7      	bhi.n	8002918 <HAL_Delay+0x28>
  {
  }
}
 8002928:	bf00      	nop
 800292a:	bf00      	nop
 800292c:	3710      	adds	r7, #16
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	200000a0 	.word	0x200000a0

08002938 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	431a      	orrs	r2, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	609a      	str	r2, [r3, #8]
}
 8002952:	bf00      	nop
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr

0800295e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800295e:	b480      	push	{r7}
 8002960:	b083      	sub	sp, #12
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
 8002966:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	431a      	orrs	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	609a      	str	r2, [r3, #8]
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002994:	4618      	mov	r0, r3
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b087      	sub	sp, #28
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
 80029ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	3360      	adds	r3, #96	; 0x60
 80029b2:	461a      	mov	r2, r3
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	4413      	add	r3, r2
 80029ba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	4b08      	ldr	r3, [pc, #32]	; (80029e4 <LL_ADC_SetOffset+0x44>)
 80029c2:	4013      	ands	r3, r2
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80029ca:	683a      	ldr	r2, [r7, #0]
 80029cc:	430a      	orrs	r2, r1
 80029ce:	4313      	orrs	r3, r2
 80029d0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80029d8:	bf00      	nop
 80029da:	371c      	adds	r7, #28
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr
 80029e4:	03fff000 	.word	0x03fff000

080029e8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	3360      	adds	r3, #96	; 0x60
 80029f6:	461a      	mov	r2, r3
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4413      	add	r3, r2
 80029fe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3714      	adds	r7, #20
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b087      	sub	sp, #28
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	3360      	adds	r3, #96	; 0x60
 8002a24:	461a      	mov	r2, r3
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	4413      	add	r3, r2
 8002a2c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002a3e:	bf00      	nop
 8002a40:	371c      	adds	r7, #28
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr

08002a4a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	b083      	sub	sp, #12
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e000      	b.n	8002a64 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b087      	sub	sp, #28
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	3330      	adds	r3, #48	; 0x30
 8002a80:	461a      	mov	r2, r3
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	0a1b      	lsrs	r3, r3, #8
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	f003 030c 	and.w	r3, r3, #12
 8002a8c:	4413      	add	r3, r2
 8002a8e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	f003 031f 	and.w	r3, r3, #31
 8002a9a:	211f      	movs	r1, #31
 8002a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa0:	43db      	mvns	r3, r3
 8002aa2:	401a      	ands	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	0e9b      	lsrs	r3, r3, #26
 8002aa8:	f003 011f 	and.w	r1, r3, #31
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	f003 031f 	and.w	r3, r3, #31
 8002ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002abc:	bf00      	nop
 8002abe:	371c      	adds	r7, #28
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ad4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d101      	bne.n	8002ae0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002adc:	2301      	movs	r3, #1
 8002ade:	e000      	b.n	8002ae2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr

08002aee <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002aee:	b480      	push	{r7}
 8002af0:	b087      	sub	sp, #28
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	60f8      	str	r0, [r7, #12]
 8002af6:	60b9      	str	r1, [r7, #8]
 8002af8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	3314      	adds	r3, #20
 8002afe:	461a      	mov	r2, r3
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	0e5b      	lsrs	r3, r3, #25
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	f003 0304 	and.w	r3, r3, #4
 8002b0a:	4413      	add	r3, r2
 8002b0c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	0d1b      	lsrs	r3, r3, #20
 8002b16:	f003 031f 	and.w	r3, r3, #31
 8002b1a:	2107      	movs	r1, #7
 8002b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b20:	43db      	mvns	r3, r3
 8002b22:	401a      	ands	r2, r3
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	0d1b      	lsrs	r3, r3, #20
 8002b28:	f003 031f 	and.w	r3, r3, #31
 8002b2c:	6879      	ldr	r1, [r7, #4]
 8002b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b32:	431a      	orrs	r2, r3
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002b38:	bf00      	nop
 8002b3a:	371c      	adds	r7, #28
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b5c:	43db      	mvns	r3, r3
 8002b5e:	401a      	ands	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f003 0318 	and.w	r3, r3, #24
 8002b66:	4908      	ldr	r1, [pc, #32]	; (8002b88 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002b68:	40d9      	lsrs	r1, r3
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	400b      	ands	r3, r1
 8002b6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b72:	431a      	orrs	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002b7a:	bf00      	nop
 8002b7c:	3714      	adds	r7, #20
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	0007ffff 	.word	0x0007ffff

08002b8c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f003 031f 	and.w	r3, r3, #31
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002bd4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	6093      	str	r3, [r2, #8]
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bfc:	d101      	bne.n	8002c02 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e000      	b.n	8002c04 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002c20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c24:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c4c:	d101      	bne.n	8002c52 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e000      	b.n	8002c54 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c74:	f043 0201 	orr.w	r2, r3, #1
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f003 0301 	and.w	r3, r3, #1
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d101      	bne.n	8002ca0 <LL_ADC_IsEnabled+0x18>
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e000      	b.n	8002ca2 <LL_ADC_IsEnabled+0x1a>
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr

08002cae <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b083      	sub	sp, #12
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002cbe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002cc2:	f043 0204 	orr.w	r2, r3, #4
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002cca:	bf00      	nop
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr

08002cd6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	b083      	sub	sp, #12
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f003 0304 	and.w	r3, r3, #4
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d101      	bne.n	8002cee <LL_ADC_REG_IsConversionOngoing+0x18>
 8002cea:	2301      	movs	r3, #1
 8002cec:	e000      	b.n	8002cf0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	f003 0308 	and.w	r3, r3, #8
 8002d0c:	2b08      	cmp	r3, #8
 8002d0e:	d101      	bne.n	8002d14 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002d10:	2301      	movs	r3, #1
 8002d12:	e000      	b.n	8002d16 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
	...

08002d24 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d24:	b590      	push	{r4, r7, lr}
 8002d26:	b089      	sub	sp, #36	; 0x24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002d30:	2300      	movs	r3, #0
 8002d32:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e136      	b.n	8002fac <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d109      	bne.n	8002d60 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f7ff f995 	bl	800207c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7ff ff3f 	bl	8002be8 <LL_ADC_IsDeepPowerDownEnabled>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d004      	beq.n	8002d7a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff ff25 	bl	8002bc4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7ff ff5a 	bl	8002c38 <LL_ADC_IsInternalRegulatorEnabled>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d115      	bne.n	8002db6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7ff ff3e 	bl	8002c10 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d94:	4b87      	ldr	r3, [pc, #540]	; (8002fb4 <HAL_ADC_Init+0x290>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	099b      	lsrs	r3, r3, #6
 8002d9a:	4a87      	ldr	r2, [pc, #540]	; (8002fb8 <HAL_ADC_Init+0x294>)
 8002d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002da0:	099b      	lsrs	r3, r3, #6
 8002da2:	3301      	adds	r3, #1
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002da8:	e002      	b.n	8002db0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	3b01      	subs	r3, #1
 8002dae:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1f9      	bne.n	8002daa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7ff ff3c 	bl	8002c38 <LL_ADC_IsInternalRegulatorEnabled>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10d      	bne.n	8002de2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dca:	f043 0210 	orr.w	r2, r3, #16
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd6:	f043 0201 	orr.w	r2, r3, #1
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7ff ff75 	bl	8002cd6 <LL_ADC_REG_IsConversionOngoing>
 8002dec:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df2:	f003 0310 	and.w	r3, r3, #16
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f040 80cf 	bne.w	8002f9a <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	f040 80cb 	bne.w	8002f9a <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e08:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002e0c:	f043 0202 	orr.w	r2, r3, #2
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7ff ff35 	bl	8002c88 <LL_ADC_IsEnabled>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d115      	bne.n	8002e50 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e24:	4865      	ldr	r0, [pc, #404]	; (8002fbc <HAL_ADC_Init+0x298>)
 8002e26:	f7ff ff2f 	bl	8002c88 <LL_ADC_IsEnabled>
 8002e2a:	4604      	mov	r4, r0
 8002e2c:	4864      	ldr	r0, [pc, #400]	; (8002fc0 <HAL_ADC_Init+0x29c>)
 8002e2e:	f7ff ff2b 	bl	8002c88 <LL_ADC_IsEnabled>
 8002e32:	4603      	mov	r3, r0
 8002e34:	431c      	orrs	r4, r3
 8002e36:	4863      	ldr	r0, [pc, #396]	; (8002fc4 <HAL_ADC_Init+0x2a0>)
 8002e38:	f7ff ff26 	bl	8002c88 <LL_ADC_IsEnabled>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	4323      	orrs	r3, r4
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d105      	bne.n	8002e50 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	4619      	mov	r1, r3
 8002e4a:	485f      	ldr	r0, [pc, #380]	; (8002fc8 <HAL_ADC_Init+0x2a4>)
 8002e4c:	f7ff fd74 	bl	8002938 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	7e5b      	ldrb	r3, [r3, #25]
 8002e54:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e5a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002e60:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002e66:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e6e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e70:	4313      	orrs	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d106      	bne.n	8002e8c <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e82:	3b01      	subs	r3, #1
 8002e84:	045b      	lsls	r3, r3, #17
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d009      	beq.n	8002ea8 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e98:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68da      	ldr	r2, [r3, #12]
 8002eae:	4b47      	ldr	r3, [pc, #284]	; (8002fcc <HAL_ADC_Init+0x2a8>)
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	6812      	ldr	r2, [r2, #0]
 8002eb6:	69b9      	ldr	r1, [r7, #24]
 8002eb8:	430b      	orrs	r3, r1
 8002eba:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7ff ff08 	bl	8002cd6 <LL_ADC_REG_IsConversionOngoing>
 8002ec6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7ff ff15 	bl	8002cfc <LL_ADC_INJ_IsConversionOngoing>
 8002ed2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d13d      	bne.n	8002f56 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d13a      	bne.n	8002f56 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ee4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002eec:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002efc:	f023 0302 	bic.w	r3, r3, #2
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	6812      	ldr	r2, [r2, #0]
 8002f04:	69b9      	ldr	r1, [r7, #24]
 8002f06:	430b      	orrs	r3, r1
 8002f08:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d118      	bne.n	8002f46 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002f1e:	f023 0304 	bic.w	r3, r3, #4
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002f2a:	4311      	orrs	r1, r2
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002f30:	4311      	orrs	r1, r2
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002f36:	430a      	orrs	r2, r1
 8002f38:	431a      	orrs	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f042 0201 	orr.w	r2, r2, #1
 8002f42:	611a      	str	r2, [r3, #16]
 8002f44:	e007      	b.n	8002f56 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	691a      	ldr	r2, [r3, #16]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f022 0201 	bic.w	r2, r2, #1
 8002f54:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d10c      	bne.n	8002f78 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f64:	f023 010f 	bic.w	r1, r3, #15
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	69db      	ldr	r3, [r3, #28]
 8002f6c:	1e5a      	subs	r2, r3, #1
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	430a      	orrs	r2, r1
 8002f74:	631a      	str	r2, [r3, #48]	; 0x30
 8002f76:	e007      	b.n	8002f88 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f022 020f 	bic.w	r2, r2, #15
 8002f86:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f8c:	f023 0303 	bic.w	r3, r3, #3
 8002f90:	f043 0201 	orr.w	r2, r3, #1
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	655a      	str	r2, [r3, #84]	; 0x54
 8002f98:	e007      	b.n	8002faa <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f9e:	f043 0210 	orr.w	r2, r3, #16
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002faa:	7ffb      	ldrb	r3, [r7, #31]
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3724      	adds	r7, #36	; 0x24
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd90      	pop	{r4, r7, pc}
 8002fb4:	20000090 	.word	0x20000090
 8002fb8:	053e2d63 	.word	0x053e2d63
 8002fbc:	50040000 	.word	0x50040000
 8002fc0:	50040100 	.word	0x50040100
 8002fc4:	50040200 	.word	0x50040200
 8002fc8:	50040300 	.word	0x50040300
 8002fcc:	fff0c007 	.word	0xfff0c007

08002fd0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002fd8:	4857      	ldr	r0, [pc, #348]	; (8003138 <HAL_ADC_Start+0x168>)
 8002fda:	f7ff fdd7 	bl	8002b8c <LL_ADC_GetMultimode>
 8002fde:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff fe76 	bl	8002cd6 <LL_ADC_REG_IsConversionOngoing>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f040 809c 	bne.w	800312a <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d101      	bne.n	8003000 <HAL_ADC_Start+0x30>
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	e097      	b.n	8003130 <HAL_ADC_Start+0x160>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f000 ffa9 	bl	8003f60 <ADC_Enable>
 800300e:	4603      	mov	r3, r0
 8003010:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003012:	7dfb      	ldrb	r3, [r7, #23]
 8003014:	2b00      	cmp	r3, #0
 8003016:	f040 8083 	bne.w	8003120 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800301e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003022:	f023 0301 	bic.w	r3, r3, #1
 8003026:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a42      	ldr	r2, [pc, #264]	; (800313c <HAL_ADC_Start+0x16c>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d002      	beq.n	800303e <HAL_ADC_Start+0x6e>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	e000      	b.n	8003040 <HAL_ADC_Start+0x70>
 800303e:	4b40      	ldr	r3, [pc, #256]	; (8003140 <HAL_ADC_Start+0x170>)
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	6812      	ldr	r2, [r2, #0]
 8003044:	4293      	cmp	r3, r2
 8003046:	d002      	beq.n	800304e <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d105      	bne.n	800305a <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003052:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800305e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003062:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003066:	d106      	bne.n	8003076 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800306c:	f023 0206 	bic.w	r2, r3, #6
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	659a      	str	r2, [r3, #88]	; 0x58
 8003074:	e002      	b.n	800307c <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	221c      	movs	r2, #28
 8003082:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a2a      	ldr	r2, [pc, #168]	; (800313c <HAL_ADC_Start+0x16c>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d002      	beq.n	800309c <HAL_ADC_Start+0xcc>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	e000      	b.n	800309e <HAL_ADC_Start+0xce>
 800309c:	4b28      	ldr	r3, [pc, #160]	; (8003140 <HAL_ADC_Start+0x170>)
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	6812      	ldr	r2, [r2, #0]
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d008      	beq.n	80030b8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d005      	beq.n	80030b8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	2b05      	cmp	r3, #5
 80030b0:	d002      	beq.n	80030b8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	2b09      	cmp	r3, #9
 80030b6:	d114      	bne.n	80030e2 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d007      	beq.n	80030d6 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80030ce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4618      	mov	r0, r3
 80030dc:	f7ff fde7 	bl	8002cae <LL_ADC_REG_StartConversion>
 80030e0:	e025      	b.n	800312e <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a12      	ldr	r2, [pc, #72]	; (800313c <HAL_ADC_Start+0x16c>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d002      	beq.n	80030fe <HAL_ADC_Start+0x12e>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	e000      	b.n	8003100 <HAL_ADC_Start+0x130>
 80030fe:	4b10      	ldr	r3, [pc, #64]	; (8003140 <HAL_ADC_Start+0x170>)
 8003100:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00f      	beq.n	800312e <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003112:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003116:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	655a      	str	r2, [r3, #84]	; 0x54
 800311e:	e006      	b.n	800312e <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003128:	e001      	b.n	800312e <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800312a:	2302      	movs	r3, #2
 800312c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800312e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003130:	4618      	mov	r0, r3
 8003132:	3718      	adds	r7, #24
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	50040300 	.word	0x50040300
 800313c:	50040100 	.word	0x50040100
 8003140:	50040000 	.word	0x50040000

08003144 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b088      	sub	sp, #32
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800314e:	4866      	ldr	r0, [pc, #408]	; (80032e8 <HAL_ADC_PollForConversion+0x1a4>)
 8003150:	f7ff fd1c 	bl	8002b8c <LL_ADC_GetMultimode>
 8003154:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	2b08      	cmp	r3, #8
 800315c:	d102      	bne.n	8003164 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800315e:	2308      	movs	r3, #8
 8003160:	61fb      	str	r3, [r7, #28]
 8003162:	e02a      	b.n	80031ba <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d005      	beq.n	8003176 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	2b05      	cmp	r3, #5
 800316e:	d002      	beq.n	8003176 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	2b09      	cmp	r3, #9
 8003174:	d111      	bne.n	800319a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	f003 0301 	and.w	r3, r3, #1
 8003180:	2b00      	cmp	r3, #0
 8003182:	d007      	beq.n	8003194 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003188:	f043 0220 	orr.w	r2, r3, #32
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e0a4      	b.n	80032de <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003194:	2304      	movs	r3, #4
 8003196:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003198:	e00f      	b.n	80031ba <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800319a:	4853      	ldr	r0, [pc, #332]	; (80032e8 <HAL_ADC_PollForConversion+0x1a4>)
 800319c:	f7ff fd04 	bl	8002ba8 <LL_ADC_GetMultiDMATransfer>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d007      	beq.n	80031b6 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031aa:	f043 0220 	orr.w	r2, r3, #32
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e093      	b.n	80032de <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80031b6:	2304      	movs	r3, #4
 80031b8:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80031ba:	f7ff fb8d 	bl	80028d8 <HAL_GetTick>
 80031be:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80031c0:	e021      	b.n	8003206 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c8:	d01d      	beq.n	8003206 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80031ca:	f7ff fb85 	bl	80028d8 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	683a      	ldr	r2, [r7, #0]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d302      	bcc.n	80031e0 <HAL_ADC_PollForConversion+0x9c>
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d112      	bne.n	8003206 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	4013      	ands	r3, r2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d10b      	bne.n	8003206 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f2:	f043 0204 	orr.w	r2, r3, #4
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e06b      	b.n	80032de <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	4013      	ands	r3, r2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d0d6      	beq.n	80031c2 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003218:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4618      	mov	r0, r3
 8003226:	f7ff fc10 	bl	8002a4a <LL_ADC_REG_IsTriggerSourceSWStart>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d01c      	beq.n	800326a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	7e5b      	ldrb	r3, [r3, #25]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d118      	bne.n	800326a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0308 	and.w	r3, r3, #8
 8003242:	2b08      	cmp	r3, #8
 8003244:	d111      	bne.n	800326a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800324a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003256:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d105      	bne.n	800326a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003262:	f043 0201 	orr.w	r2, r3, #1
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a1f      	ldr	r2, [pc, #124]	; (80032ec <HAL_ADC_PollForConversion+0x1a8>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d002      	beq.n	800327a <HAL_ADC_PollForConversion+0x136>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	e000      	b.n	800327c <HAL_ADC_PollForConversion+0x138>
 800327a:	4b1d      	ldr	r3, [pc, #116]	; (80032f0 <HAL_ADC_PollForConversion+0x1ac>)
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	6812      	ldr	r2, [r2, #0]
 8003280:	4293      	cmp	r3, r2
 8003282:	d008      	beq.n	8003296 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d005      	beq.n	8003296 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	2b05      	cmp	r3, #5
 800328e:	d002      	beq.n	8003296 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	2b09      	cmp	r3, #9
 8003294:	d104      	bne.n	80032a0 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	61bb      	str	r3, [r7, #24]
 800329e:	e00c      	b.n	80032ba <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a11      	ldr	r2, [pc, #68]	; (80032ec <HAL_ADC_PollForConversion+0x1a8>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d002      	beq.n	80032b0 <HAL_ADC_PollForConversion+0x16c>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	e000      	b.n	80032b2 <HAL_ADC_PollForConversion+0x16e>
 80032b0:	4b0f      	ldr	r3, [pc, #60]	; (80032f0 <HAL_ADC_PollForConversion+0x1ac>)
 80032b2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	2b08      	cmp	r3, #8
 80032be:	d104      	bne.n	80032ca <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2208      	movs	r2, #8
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	e008      	b.n	80032dc <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d103      	bne.n	80032dc <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	220c      	movs	r2, #12
 80032da:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3720      	adds	r7, #32
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	50040300 	.word	0x50040300
 80032ec:	50040100 	.word	0x50040100
 80032f0:	50040000 	.word	0x50040000

080032f4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003302:	4618      	mov	r0, r3
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
	...

08003310 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b08a      	sub	sp, #40	; 0x28
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003318:	2300      	movs	r3, #0
 800331a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800332c:	4882      	ldr	r0, [pc, #520]	; (8003538 <HAL_ADC_IRQHandler+0x228>)
 800332e:	f7ff fc2d 	bl	8002b8c <LL_ADC_GetMultimode>
 8003332:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d017      	beq.n	800336e <HAL_ADC_IRQHandler+0x5e>
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d012      	beq.n	800336e <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800334c:	f003 0310 	and.w	r3, r3, #16
 8003350:	2b00      	cmp	r3, #0
 8003352:	d105      	bne.n	8003360 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003358:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f000 fead 	bl	80040c0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2202      	movs	r2, #2
 800336c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	f003 0304 	and.w	r3, r3, #4
 8003374:	2b00      	cmp	r3, #0
 8003376:	d004      	beq.n	8003382 <HAL_ADC_IRQHandler+0x72>
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	f003 0304 	and.w	r3, r3, #4
 800337e:	2b00      	cmp	r3, #0
 8003380:	d10a      	bne.n	8003398 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 8083 	beq.w	8003494 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	f003 0308 	and.w	r3, r3, #8
 8003394:	2b00      	cmp	r3, #0
 8003396:	d07d      	beq.n	8003494 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800339c:	f003 0310 	and.w	r3, r3, #16
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d105      	bne.n	80033b0 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7ff fb48 	bl	8002a4a <LL_ADC_REG_IsTriggerSourceSWStart>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d062      	beq.n	8003486 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a5d      	ldr	r2, [pc, #372]	; (800353c <HAL_ADC_IRQHandler+0x22c>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d002      	beq.n	80033d0 <HAL_ADC_IRQHandler+0xc0>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	e000      	b.n	80033d2 <HAL_ADC_IRQHandler+0xc2>
 80033d0:	4b5b      	ldr	r3, [pc, #364]	; (8003540 <HAL_ADC_IRQHandler+0x230>)
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	6812      	ldr	r2, [r2, #0]
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d008      	beq.n	80033ec <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d005      	beq.n	80033ec <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	2b05      	cmp	r3, #5
 80033e4:	d002      	beq.n	80033ec <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	2b09      	cmp	r3, #9
 80033ea:	d104      	bne.n	80033f6 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	623b      	str	r3, [r7, #32]
 80033f4:	e00c      	b.n	8003410 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a50      	ldr	r2, [pc, #320]	; (800353c <HAL_ADC_IRQHandler+0x22c>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d002      	beq.n	8003406 <HAL_ADC_IRQHandler+0xf6>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	e000      	b.n	8003408 <HAL_ADC_IRQHandler+0xf8>
 8003406:	4b4e      	ldr	r3, [pc, #312]	; (8003540 <HAL_ADC_IRQHandler+0x230>)
 8003408:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003410:	6a3b      	ldr	r3, [r7, #32]
 8003412:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d135      	bne.n	8003486 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0308 	and.w	r3, r3, #8
 8003424:	2b08      	cmp	r3, #8
 8003426:	d12e      	bne.n	8003486 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4618      	mov	r0, r3
 800342e:	f7ff fc52 	bl	8002cd6 <LL_ADC_REG_IsConversionOngoing>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d11a      	bne.n	800346e <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	685a      	ldr	r2, [r3, #4]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f022 020c 	bic.w	r2, r2, #12
 8003446:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800344c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003458:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d112      	bne.n	8003486 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003464:	f043 0201 	orr.w	r2, r3, #1
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	655a      	str	r2, [r3, #84]	; 0x54
 800346c:	e00b      	b.n	8003486 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003472:	f043 0210 	orr.w	r2, r3, #16
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800347e:	f043 0201 	orr.w	r2, r3, #1
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 f95c 	bl	8003744 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	220c      	movs	r2, #12
 8003492:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	f003 0320 	and.w	r3, r3, #32
 800349a:	2b00      	cmp	r3, #0
 800349c:	d004      	beq.n	80034a8 <HAL_ADC_IRQHandler+0x198>
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	f003 0320 	and.w	r3, r3, #32
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d10b      	bne.n	80034c0 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f000 809f 	beq.w	80035f2 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f000 8099 	beq.w	80035f2 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c4:	f003 0310 	and.w	r3, r3, #16
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d105      	bne.n	80034d8 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034d0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4618      	mov	r0, r3
 80034de:	f7ff faf3 	bl	8002ac8 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80034e2:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7ff faae 	bl	8002a4a <LL_ADC_REG_IsTriggerSourceSWStart>
 80034ee:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a11      	ldr	r2, [pc, #68]	; (800353c <HAL_ADC_IRQHandler+0x22c>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d002      	beq.n	8003500 <HAL_ADC_IRQHandler+0x1f0>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	e000      	b.n	8003502 <HAL_ADC_IRQHandler+0x1f2>
 8003500:	4b0f      	ldr	r3, [pc, #60]	; (8003540 <HAL_ADC_IRQHandler+0x230>)
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	6812      	ldr	r2, [r2, #0]
 8003506:	4293      	cmp	r3, r2
 8003508:	d008      	beq.n	800351c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d005      	beq.n	800351c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	2b06      	cmp	r3, #6
 8003514:	d002      	beq.n	800351c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	2b07      	cmp	r3, #7
 800351a:	d104      	bne.n	8003526 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	623b      	str	r3, [r7, #32]
 8003524:	e013      	b.n	800354e <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a04      	ldr	r2, [pc, #16]	; (800353c <HAL_ADC_IRQHandler+0x22c>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d009      	beq.n	8003544 <HAL_ADC_IRQHandler+0x234>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	e007      	b.n	8003546 <HAL_ADC_IRQHandler+0x236>
 8003536:	bf00      	nop
 8003538:	50040300 	.word	0x50040300
 800353c:	50040100 	.word	0x50040100
 8003540:	50040000 	.word	0x50040000
 8003544:	4b7d      	ldr	r3, [pc, #500]	; (800373c <HAL_ADC_IRQHandler+0x42c>)
 8003546:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d047      	beq.n	80035e4 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003554:	6a3b      	ldr	r3, [r7, #32]
 8003556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d007      	beq.n	800356e <HAL_ADC_IRQHandler+0x25e>
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d03f      	beq.n	80035e4 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003564:	6a3b      	ldr	r3, [r7, #32]
 8003566:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800356a:	2b00      	cmp	r3, #0
 800356c:	d13a      	bne.n	80035e4 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003578:	2b40      	cmp	r3, #64	; 0x40
 800357a:	d133      	bne.n	80035e4 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800357c:	6a3b      	ldr	r3, [r7, #32]
 800357e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d12e      	bne.n	80035e4 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4618      	mov	r0, r3
 800358c:	f7ff fbb6 	bl	8002cfc <LL_ADC_INJ_IsConversionOngoing>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d11a      	bne.n	80035cc <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	685a      	ldr	r2, [r3, #4]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035a4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d112      	bne.n	80035e4 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c2:	f043 0201 	orr.w	r2, r3, #1
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	655a      	str	r2, [r3, #84]	; 0x54
 80035ca:	e00b      	b.n	80035e4 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d0:	f043 0210 	orr.w	r2, r3, #16
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035dc:	f043 0201 	orr.w	r2, r3, #1
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 fd43 	bl	8004070 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2260      	movs	r2, #96	; 0x60
 80035f0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d011      	beq.n	8003620 <HAL_ADC_IRQHandler+0x310>
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00c      	beq.n	8003620 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800360a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 f8a0 	bl	8003758 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2280      	movs	r2, #128	; 0x80
 800361e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003626:	2b00      	cmp	r3, #0
 8003628:	d012      	beq.n	8003650 <HAL_ADC_IRQHandler+0x340>
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00d      	beq.n	8003650 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003638:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 fd29 	bl	8004098 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800364e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003656:	2b00      	cmp	r3, #0
 8003658:	d012      	beq.n	8003680 <HAL_ADC_IRQHandler+0x370>
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00d      	beq.n	8003680 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003668:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 fd1b 	bl	80040ac <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800367e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	f003 0310 	and.w	r3, r3, #16
 8003686:	2b00      	cmp	r3, #0
 8003688:	d036      	beq.n	80036f8 <HAL_ADC_IRQHandler+0x3e8>
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	f003 0310 	and.w	r3, r3, #16
 8003690:	2b00      	cmp	r3, #0
 8003692:	d031      	beq.n	80036f8 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003698:	2b00      	cmp	r3, #0
 800369a:	d102      	bne.n	80036a2 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 800369c:	2301      	movs	r3, #1
 800369e:	627b      	str	r3, [r7, #36]	; 0x24
 80036a0:	e014      	b.n	80036cc <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d008      	beq.n	80036ba <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80036a8:	4825      	ldr	r0, [pc, #148]	; (8003740 <HAL_ADC_IRQHandler+0x430>)
 80036aa:	f7ff fa7d 	bl	8002ba8 <LL_ADC_GetMultiDMATransfer>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00b      	beq.n	80036cc <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 80036b4:	2301      	movs	r3, #1
 80036b6:	627b      	str	r3, [r7, #36]	; 0x24
 80036b8:	e008      	b.n	80036cc <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	f003 0301 	and.w	r3, r3, #1
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d001      	beq.n	80036cc <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 80036c8:	2301      	movs	r3, #1
 80036ca:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80036cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d10e      	bne.n	80036f0 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e2:	f043 0202 	orr.w	r2, r3, #2
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 f83e 	bl	800376c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2210      	movs	r2, #16
 80036f6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d018      	beq.n	8003734 <HAL_ADC_IRQHandler+0x424>
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003708:	2b00      	cmp	r3, #0
 800370a:	d013      	beq.n	8003734 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003710:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800371c:	f043 0208 	orr.w	r2, r3, #8
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800372c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 fca8 	bl	8004084 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003734:	bf00      	nop
 8003736:	3728      	adds	r7, #40	; 0x28
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	50040000 	.word	0x50040000
 8003740:	50040300 	.word	0x50040300

08003744 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b0b6      	sub	sp, #216	; 0xd8
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800378a:	2300      	movs	r3, #0
 800378c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003790:	2300      	movs	r3, #0
 8003792:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800379a:	2b01      	cmp	r3, #1
 800379c:	d101      	bne.n	80037a2 <HAL_ADC_ConfigChannel+0x22>
 800379e:	2302      	movs	r3, #2
 80037a0:	e3c7      	b.n	8003f32 <HAL_ADC_ConfigChannel+0x7b2>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7ff fa91 	bl	8002cd6 <LL_ADC_REG_IsConversionOngoing>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f040 83a8 	bne.w	8003f0c <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	2b05      	cmp	r3, #5
 80037c2:	d824      	bhi.n	800380e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	3b02      	subs	r3, #2
 80037ca:	2b03      	cmp	r3, #3
 80037cc:	d81b      	bhi.n	8003806 <HAL_ADC_ConfigChannel+0x86>
 80037ce:	a201      	add	r2, pc, #4	; (adr r2, 80037d4 <HAL_ADC_ConfigChannel+0x54>)
 80037d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d4:	080037e5 	.word	0x080037e5
 80037d8:	080037ed 	.word	0x080037ed
 80037dc:	080037f5 	.word	0x080037f5
 80037e0:	080037fd 	.word	0x080037fd
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	220c      	movs	r2, #12
 80037e8:	605a      	str	r2, [r3, #4]
          break;
 80037ea:	e011      	b.n	8003810 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	2212      	movs	r2, #18
 80037f0:	605a      	str	r2, [r3, #4]
          break;
 80037f2:	e00d      	b.n	8003810 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	2218      	movs	r2, #24
 80037f8:	605a      	str	r2, [r3, #4]
          break;
 80037fa:	e009      	b.n	8003810 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003802:	605a      	str	r2, [r3, #4]
          break;
 8003804:	e004      	b.n	8003810 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	2206      	movs	r2, #6
 800380a:	605a      	str	r2, [r3, #4]
          break;
 800380c:	e000      	b.n	8003810 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800380e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6818      	ldr	r0, [r3, #0]
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	6859      	ldr	r1, [r3, #4]
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	461a      	mov	r2, r3
 800381e:	f7ff f927 	bl	8002a70 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4618      	mov	r0, r3
 8003828:	f7ff fa55 	bl	8002cd6 <LL_ADC_REG_IsConversionOngoing>
 800382c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4618      	mov	r0, r3
 8003836:	f7ff fa61 	bl	8002cfc <LL_ADC_INJ_IsConversionOngoing>
 800383a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800383e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003842:	2b00      	cmp	r3, #0
 8003844:	f040 81a6 	bne.w	8003b94 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003848:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800384c:	2b00      	cmp	r3, #0
 800384e:	f040 81a1 	bne.w	8003b94 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6818      	ldr	r0, [r3, #0]
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	6819      	ldr	r1, [r3, #0]
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	461a      	mov	r2, r3
 8003860:	f7ff f945 	bl	8002aee <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	695a      	ldr	r2, [r3, #20]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	08db      	lsrs	r3, r3, #3
 8003870:	f003 0303 	and.w	r3, r3, #3
 8003874:	005b      	lsls	r3, r3, #1
 8003876:	fa02 f303 	lsl.w	r3, r2, r3
 800387a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	2b04      	cmp	r3, #4
 8003884:	d00a      	beq.n	800389c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6818      	ldr	r0, [r3, #0]
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	6919      	ldr	r1, [r3, #16]
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003896:	f7ff f883 	bl	80029a0 <LL_ADC_SetOffset>
 800389a:	e17b      	b.n	8003b94 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2100      	movs	r1, #0
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7ff f8a0 	bl	80029e8 <LL_ADC_GetOffsetChannel>
 80038a8:	4603      	mov	r3, r0
 80038aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d10a      	bne.n	80038c8 <HAL_ADC_ConfigChannel+0x148>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2100      	movs	r1, #0
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7ff f895 	bl	80029e8 <LL_ADC_GetOffsetChannel>
 80038be:	4603      	mov	r3, r0
 80038c0:	0e9b      	lsrs	r3, r3, #26
 80038c2:	f003 021f 	and.w	r2, r3, #31
 80038c6:	e01e      	b.n	8003906 <HAL_ADC_ConfigChannel+0x186>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2100      	movs	r1, #0
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7ff f88a 	bl	80029e8 <LL_ADC_GetOffsetChannel>
 80038d4:	4603      	mov	r3, r0
 80038d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038da:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80038de:	fa93 f3a3 	rbit	r3, r3
 80038e2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80038e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80038ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80038ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80038f6:	2320      	movs	r3, #32
 80038f8:	e004      	b.n	8003904 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80038fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80038fe:	fab3 f383 	clz	r3, r3
 8003902:	b2db      	uxtb	r3, r3
 8003904:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800390e:	2b00      	cmp	r3, #0
 8003910:	d105      	bne.n	800391e <HAL_ADC_ConfigChannel+0x19e>
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	0e9b      	lsrs	r3, r3, #26
 8003918:	f003 031f 	and.w	r3, r3, #31
 800391c:	e018      	b.n	8003950 <HAL_ADC_ConfigChannel+0x1d0>
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003926:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800392a:	fa93 f3a3 	rbit	r3, r3
 800392e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003932:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003936:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800393a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8003942:	2320      	movs	r3, #32
 8003944:	e004      	b.n	8003950 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8003946:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800394a:	fab3 f383 	clz	r3, r3
 800394e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003950:	429a      	cmp	r2, r3
 8003952:	d106      	bne.n	8003962 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2200      	movs	r2, #0
 800395a:	2100      	movs	r1, #0
 800395c:	4618      	mov	r0, r3
 800395e:	f7ff f859 	bl	8002a14 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2101      	movs	r1, #1
 8003968:	4618      	mov	r0, r3
 800396a:	f7ff f83d 	bl	80029e8 <LL_ADC_GetOffsetChannel>
 800396e:	4603      	mov	r3, r0
 8003970:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003974:	2b00      	cmp	r3, #0
 8003976:	d10a      	bne.n	800398e <HAL_ADC_ConfigChannel+0x20e>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2101      	movs	r1, #1
 800397e:	4618      	mov	r0, r3
 8003980:	f7ff f832 	bl	80029e8 <LL_ADC_GetOffsetChannel>
 8003984:	4603      	mov	r3, r0
 8003986:	0e9b      	lsrs	r3, r3, #26
 8003988:	f003 021f 	and.w	r2, r3, #31
 800398c:	e01e      	b.n	80039cc <HAL_ADC_ConfigChannel+0x24c>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2101      	movs	r1, #1
 8003994:	4618      	mov	r0, r3
 8003996:	f7ff f827 	bl	80029e8 <LL_ADC_GetOffsetChannel>
 800399a:	4603      	mov	r3, r0
 800399c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80039a4:	fa93 f3a3 	rbit	r3, r3
 80039a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80039ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80039b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80039b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d101      	bne.n	80039c0 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80039bc:	2320      	movs	r3, #32
 80039be:	e004      	b.n	80039ca <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80039c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80039c4:	fab3 f383 	clz	r3, r3
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d105      	bne.n	80039e4 <HAL_ADC_ConfigChannel+0x264>
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	0e9b      	lsrs	r3, r3, #26
 80039de:	f003 031f 	and.w	r3, r3, #31
 80039e2:	e018      	b.n	8003a16 <HAL_ADC_ConfigChannel+0x296>
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80039f0:	fa93 f3a3 	rbit	r3, r3
 80039f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80039f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80039fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003a00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d101      	bne.n	8003a0c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8003a08:	2320      	movs	r3, #32
 8003a0a:	e004      	b.n	8003a16 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8003a0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a10:	fab3 f383 	clz	r3, r3
 8003a14:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d106      	bne.n	8003a28 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	2101      	movs	r1, #1
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7fe fff6 	bl	8002a14 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2102      	movs	r1, #2
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7fe ffda 	bl	80029e8 <LL_ADC_GetOffsetChannel>
 8003a34:	4603      	mov	r3, r0
 8003a36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10a      	bne.n	8003a54 <HAL_ADC_ConfigChannel+0x2d4>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2102      	movs	r1, #2
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7fe ffcf 	bl	80029e8 <LL_ADC_GetOffsetChannel>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	0e9b      	lsrs	r3, r3, #26
 8003a4e:	f003 021f 	and.w	r2, r3, #31
 8003a52:	e01e      	b.n	8003a92 <HAL_ADC_ConfigChannel+0x312>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2102      	movs	r1, #2
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7fe ffc4 	bl	80029e8 <LL_ADC_GetOffsetChannel>
 8003a60:	4603      	mov	r3, r0
 8003a62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a6a:	fa93 f3a3 	rbit	r3, r3
 8003a6e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003a72:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003a7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d101      	bne.n	8003a86 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8003a82:	2320      	movs	r3, #32
 8003a84:	e004      	b.n	8003a90 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003a86:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003a8a:	fab3 f383 	clz	r3, r3
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d105      	bne.n	8003aaa <HAL_ADC_ConfigChannel+0x32a>
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	0e9b      	lsrs	r3, r3, #26
 8003aa4:	f003 031f 	and.w	r3, r3, #31
 8003aa8:	e016      	b.n	8003ad8 <HAL_ADC_ConfigChannel+0x358>
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ab6:	fa93 f3a3 	rbit	r3, r3
 8003aba:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003abc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003abe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003ac2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d101      	bne.n	8003ace <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8003aca:	2320      	movs	r3, #32
 8003acc:	e004      	b.n	8003ad8 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8003ace:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ad2:	fab3 f383 	clz	r3, r3
 8003ad6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d106      	bne.n	8003aea <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	2102      	movs	r1, #2
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7fe ff95 	bl	8002a14 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2103      	movs	r1, #3
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7fe ff79 	bl	80029e8 <LL_ADC_GetOffsetChannel>
 8003af6:	4603      	mov	r3, r0
 8003af8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d10a      	bne.n	8003b16 <HAL_ADC_ConfigChannel+0x396>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2103      	movs	r1, #3
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7fe ff6e 	bl	80029e8 <LL_ADC_GetOffsetChannel>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	0e9b      	lsrs	r3, r3, #26
 8003b10:	f003 021f 	and.w	r2, r3, #31
 8003b14:	e017      	b.n	8003b46 <HAL_ADC_ConfigChannel+0x3c6>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2103      	movs	r1, #3
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7fe ff63 	bl	80029e8 <LL_ADC_GetOffsetChannel>
 8003b22:	4603      	mov	r3, r0
 8003b24:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b28:	fa93 f3a3 	rbit	r3, r3
 8003b2c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003b2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b30:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003b32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d101      	bne.n	8003b3c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8003b38:	2320      	movs	r3, #32
 8003b3a:	e003      	b.n	8003b44 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003b3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b3e:	fab3 f383 	clz	r3, r3
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d105      	bne.n	8003b5e <HAL_ADC_ConfigChannel+0x3de>
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	0e9b      	lsrs	r3, r3, #26
 8003b58:	f003 031f 	and.w	r3, r3, #31
 8003b5c:	e011      	b.n	8003b82 <HAL_ADC_ConfigChannel+0x402>
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b66:	fa93 f3a3 	rbit	r3, r3
 8003b6a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003b6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b6e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003b70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8003b76:	2320      	movs	r3, #32
 8003b78:	e003      	b.n	8003b82 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8003b7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b7c:	fab3 f383 	clz	r3, r3
 8003b80:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d106      	bne.n	8003b94 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	2103      	movs	r1, #3
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7fe ff40 	bl	8002a14 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f7ff f875 	bl	8002c88 <LL_ADC_IsEnabled>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f040 813f 	bne.w	8003e24 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6818      	ldr	r0, [r3, #0]
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	6819      	ldr	r1, [r3, #0]
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	f7fe ffc6 	bl	8002b44 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	4a8e      	ldr	r2, [pc, #568]	; (8003df8 <HAL_ADC_ConfigChannel+0x678>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	f040 8130 	bne.w	8003e24 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d10b      	bne.n	8003bec <HAL_ADC_ConfigChannel+0x46c>
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	0e9b      	lsrs	r3, r3, #26
 8003bda:	3301      	adds	r3, #1
 8003bdc:	f003 031f 	and.w	r3, r3, #31
 8003be0:	2b09      	cmp	r3, #9
 8003be2:	bf94      	ite	ls
 8003be4:	2301      	movls	r3, #1
 8003be6:	2300      	movhi	r3, #0
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	e019      	b.n	8003c20 <HAL_ADC_ConfigChannel+0x4a0>
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bf4:	fa93 f3a3 	rbit	r3, r3
 8003bf8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003bfa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bfc:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003bfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d101      	bne.n	8003c08 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003c04:	2320      	movs	r3, #32
 8003c06:	e003      	b.n	8003c10 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003c08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c0a:	fab3 f383 	clz	r3, r3
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	3301      	adds	r3, #1
 8003c12:	f003 031f 	and.w	r3, r3, #31
 8003c16:	2b09      	cmp	r3, #9
 8003c18:	bf94      	ite	ls
 8003c1a:	2301      	movls	r3, #1
 8003c1c:	2300      	movhi	r3, #0
 8003c1e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d079      	beq.n	8003d18 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d107      	bne.n	8003c40 <HAL_ADC_ConfigChannel+0x4c0>
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	0e9b      	lsrs	r3, r3, #26
 8003c36:	3301      	adds	r3, #1
 8003c38:	069b      	lsls	r3, r3, #26
 8003c3a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c3e:	e015      	b.n	8003c6c <HAL_ADC_ConfigChannel+0x4ec>
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c48:	fa93 f3a3 	rbit	r3, r3
 8003c4c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003c4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c50:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003c52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d101      	bne.n	8003c5c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8003c58:	2320      	movs	r3, #32
 8003c5a:	e003      	b.n	8003c64 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8003c5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c5e:	fab3 f383 	clz	r3, r3
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	3301      	adds	r3, #1
 8003c66:	069b      	lsls	r3, r3, #26
 8003c68:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d109      	bne.n	8003c8c <HAL_ADC_ConfigChannel+0x50c>
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	0e9b      	lsrs	r3, r3, #26
 8003c7e:	3301      	adds	r3, #1
 8003c80:	f003 031f 	and.w	r3, r3, #31
 8003c84:	2101      	movs	r1, #1
 8003c86:	fa01 f303 	lsl.w	r3, r1, r3
 8003c8a:	e017      	b.n	8003cbc <HAL_ADC_ConfigChannel+0x53c>
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c94:	fa93 f3a3 	rbit	r3, r3
 8003c98:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003c9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c9c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003c9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d101      	bne.n	8003ca8 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8003ca4:	2320      	movs	r3, #32
 8003ca6:	e003      	b.n	8003cb0 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8003ca8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003caa:	fab3 f383 	clz	r3, r3
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	f003 031f 	and.w	r3, r3, #31
 8003cb6:	2101      	movs	r1, #1
 8003cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cbc:	ea42 0103 	orr.w	r1, r2, r3
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d10a      	bne.n	8003ce2 <HAL_ADC_ConfigChannel+0x562>
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	0e9b      	lsrs	r3, r3, #26
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	f003 021f 	and.w	r2, r3, #31
 8003cd8:	4613      	mov	r3, r2
 8003cda:	005b      	lsls	r3, r3, #1
 8003cdc:	4413      	add	r3, r2
 8003cde:	051b      	lsls	r3, r3, #20
 8003ce0:	e018      	b.n	8003d14 <HAL_ADC_ConfigChannel+0x594>
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cea:	fa93 f3a3 	rbit	r3, r3
 8003cee:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d101      	bne.n	8003cfe <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8003cfa:	2320      	movs	r3, #32
 8003cfc:	e003      	b.n	8003d06 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8003cfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d00:	fab3 f383 	clz	r3, r3
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	3301      	adds	r3, #1
 8003d08:	f003 021f 	and.w	r2, r3, #31
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	005b      	lsls	r3, r3, #1
 8003d10:	4413      	add	r3, r2
 8003d12:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d14:	430b      	orrs	r3, r1
 8003d16:	e080      	b.n	8003e1a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d107      	bne.n	8003d34 <HAL_ADC_ConfigChannel+0x5b4>
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	0e9b      	lsrs	r3, r3, #26
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	069b      	lsls	r3, r3, #26
 8003d2e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d32:	e015      	b.n	8003d60 <HAL_ADC_ConfigChannel+0x5e0>
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d3c:	fa93 f3a3 	rbit	r3, r3
 8003d40:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d44:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d101      	bne.n	8003d50 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003d4c:	2320      	movs	r3, #32
 8003d4e:	e003      	b.n	8003d58 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8003d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d52:	fab3 f383 	clz	r3, r3
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	3301      	adds	r3, #1
 8003d5a:	069b      	lsls	r3, r3, #26
 8003d5c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d109      	bne.n	8003d80 <HAL_ADC_ConfigChannel+0x600>
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	0e9b      	lsrs	r3, r3, #26
 8003d72:	3301      	adds	r3, #1
 8003d74:	f003 031f 	and.w	r3, r3, #31
 8003d78:	2101      	movs	r1, #1
 8003d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d7e:	e017      	b.n	8003db0 <HAL_ADC_ConfigChannel+0x630>
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d86:	6a3b      	ldr	r3, [r7, #32]
 8003d88:	fa93 f3a3 	rbit	r3, r3
 8003d8c:	61fb      	str	r3, [r7, #28]
  return result;
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d101      	bne.n	8003d9c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8003d98:	2320      	movs	r3, #32
 8003d9a:	e003      	b.n	8003da4 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9e:	fab3 f383 	clz	r3, r3
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	3301      	adds	r3, #1
 8003da6:	f003 031f 	and.w	r3, r3, #31
 8003daa:	2101      	movs	r1, #1
 8003dac:	fa01 f303 	lsl.w	r3, r1, r3
 8003db0:	ea42 0103 	orr.w	r1, r2, r3
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d10d      	bne.n	8003ddc <HAL_ADC_ConfigChannel+0x65c>
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	0e9b      	lsrs	r3, r3, #26
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	f003 021f 	and.w	r2, r3, #31
 8003dcc:	4613      	mov	r3, r2
 8003dce:	005b      	lsls	r3, r3, #1
 8003dd0:	4413      	add	r3, r2
 8003dd2:	3b1e      	subs	r3, #30
 8003dd4:	051b      	lsls	r3, r3, #20
 8003dd6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003dda:	e01d      	b.n	8003e18 <HAL_ADC_ConfigChannel+0x698>
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	fa93 f3a3 	rbit	r3, r3
 8003de8:	613b      	str	r3, [r7, #16]
  return result;
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d103      	bne.n	8003dfc <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003df4:	2320      	movs	r3, #32
 8003df6:	e005      	b.n	8003e04 <HAL_ADC_ConfigChannel+0x684>
 8003df8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	fab3 f383 	clz	r3, r3
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	3301      	adds	r3, #1
 8003e06:	f003 021f 	and.w	r2, r3, #31
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	005b      	lsls	r3, r3, #1
 8003e0e:	4413      	add	r3, r2
 8003e10:	3b1e      	subs	r3, #30
 8003e12:	051b      	lsls	r3, r3, #20
 8003e14:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e18:	430b      	orrs	r3, r1
 8003e1a:	683a      	ldr	r2, [r7, #0]
 8003e1c:	6892      	ldr	r2, [r2, #8]
 8003e1e:	4619      	mov	r1, r3
 8003e20:	f7fe fe65 	bl	8002aee <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	4b44      	ldr	r3, [pc, #272]	; (8003f3c <HAL_ADC_ConfigChannel+0x7bc>)
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d07a      	beq.n	8003f26 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e30:	4843      	ldr	r0, [pc, #268]	; (8003f40 <HAL_ADC_ConfigChannel+0x7c0>)
 8003e32:	f7fe fda7 	bl	8002984 <LL_ADC_GetCommonPathInternalCh>
 8003e36:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a41      	ldr	r2, [pc, #260]	; (8003f44 <HAL_ADC_ConfigChannel+0x7c4>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d12c      	bne.n	8003e9e <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003e44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d126      	bne.n	8003e9e <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a3c      	ldr	r2, [pc, #240]	; (8003f48 <HAL_ADC_ConfigChannel+0x7c8>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d004      	beq.n	8003e64 <HAL_ADC_ConfigChannel+0x6e4>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a3b      	ldr	r2, [pc, #236]	; (8003f4c <HAL_ADC_ConfigChannel+0x7cc>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d15d      	bne.n	8003f20 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	4834      	ldr	r0, [pc, #208]	; (8003f40 <HAL_ADC_ConfigChannel+0x7c0>)
 8003e70:	f7fe fd75 	bl	800295e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e74:	4b36      	ldr	r3, [pc, #216]	; (8003f50 <HAL_ADC_ConfigChannel+0x7d0>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	099b      	lsrs	r3, r3, #6
 8003e7a:	4a36      	ldr	r2, [pc, #216]	; (8003f54 <HAL_ADC_ConfigChannel+0x7d4>)
 8003e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e80:	099b      	lsrs	r3, r3, #6
 8003e82:	1c5a      	adds	r2, r3, #1
 8003e84:	4613      	mov	r3, r2
 8003e86:	005b      	lsls	r3, r3, #1
 8003e88:	4413      	add	r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003e8e:	e002      	b.n	8003e96 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	3b01      	subs	r3, #1
 8003e94:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d1f9      	bne.n	8003e90 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e9c:	e040      	b.n	8003f20 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a2d      	ldr	r2, [pc, #180]	; (8003f58 <HAL_ADC_ConfigChannel+0x7d8>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d118      	bne.n	8003eda <HAL_ADC_ConfigChannel+0x75a>
 8003ea8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003eac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d112      	bne.n	8003eda <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a23      	ldr	r2, [pc, #140]	; (8003f48 <HAL_ADC_ConfigChannel+0x7c8>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d004      	beq.n	8003ec8 <HAL_ADC_ConfigChannel+0x748>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a22      	ldr	r2, [pc, #136]	; (8003f4c <HAL_ADC_ConfigChannel+0x7cc>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d12d      	bne.n	8003f24 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ec8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ecc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	481b      	ldr	r0, [pc, #108]	; (8003f40 <HAL_ADC_ConfigChannel+0x7c0>)
 8003ed4:	f7fe fd43 	bl	800295e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ed8:	e024      	b.n	8003f24 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a1f      	ldr	r2, [pc, #124]	; (8003f5c <HAL_ADC_ConfigChannel+0x7dc>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d120      	bne.n	8003f26 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003ee4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ee8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d11a      	bne.n	8003f26 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a14      	ldr	r2, [pc, #80]	; (8003f48 <HAL_ADC_ConfigChannel+0x7c8>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d115      	bne.n	8003f26 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003efa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003efe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003f02:	4619      	mov	r1, r3
 8003f04:	480e      	ldr	r0, [pc, #56]	; (8003f40 <HAL_ADC_ConfigChannel+0x7c0>)
 8003f06:	f7fe fd2a 	bl	800295e <LL_ADC_SetCommonPathInternalCh>
 8003f0a:	e00c      	b.n	8003f26 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f10:	f043 0220 	orr.w	r2, r3, #32
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003f1e:	e002      	b.n	8003f26 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f20:	bf00      	nop
 8003f22:	e000      	b.n	8003f26 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f24:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003f2e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	37d8      	adds	r7, #216	; 0xd8
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	80080000 	.word	0x80080000
 8003f40:	50040300 	.word	0x50040300
 8003f44:	c7520000 	.word	0xc7520000
 8003f48:	50040000 	.word	0x50040000
 8003f4c:	50040200 	.word	0x50040200
 8003f50:	20000090 	.word	0x20000090
 8003f54:	053e2d63 	.word	0x053e2d63
 8003f58:	cb840000 	.word	0xcb840000
 8003f5c:	80000001 	.word	0x80000001

08003f60 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7fe fe8b 	bl	8002c88 <LL_ADC_IsEnabled>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d14d      	bne.n	8004014 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	689a      	ldr	r2, [r3, #8]
 8003f7e:	4b28      	ldr	r3, [pc, #160]	; (8004020 <ADC_Enable+0xc0>)
 8003f80:	4013      	ands	r3, r2
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00d      	beq.n	8003fa2 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f8a:	f043 0210 	orr.w	r2, r3, #16
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f96:	f043 0201 	orr.w	r2, r3, #1
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e039      	b.n	8004016 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f7fe fe5a 	bl	8002c60 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003fac:	f7fe fc94 	bl	80028d8 <HAL_GetTick>
 8003fb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003fb2:	e028      	b.n	8004006 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7fe fe65 	bl	8002c88 <LL_ADC_IsEnabled>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d104      	bne.n	8003fce <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7fe fe49 	bl	8002c60 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003fce:	f7fe fc83 	bl	80028d8 <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d914      	bls.n	8004006 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d00d      	beq.n	8004006 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fee:	f043 0210 	orr.w	r2, r3, #16
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ffa:	f043 0201 	orr.w	r2, r3, #1
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e007      	b.n	8004016 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0301 	and.w	r3, r3, #1
 8004010:	2b01      	cmp	r3, #1
 8004012:	d1cf      	bne.n	8003fb4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3710      	adds	r7, #16
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	8000003f 	.word	0x8000003f

08004024 <LL_ADC_IsEnabled>:
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f003 0301 	and.w	r3, r3, #1
 8004034:	2b01      	cmp	r3, #1
 8004036:	d101      	bne.n	800403c <LL_ADC_IsEnabled+0x18>
 8004038:	2301      	movs	r3, #1
 800403a:	e000      	b.n	800403e <LL_ADC_IsEnabled+0x1a>
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	370c      	adds	r7, #12
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr

0800404a <LL_ADC_REG_IsConversionOngoing>:
{
 800404a:	b480      	push	{r7}
 800404c:	b083      	sub	sp, #12
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f003 0304 	and.w	r3, r3, #4
 800405a:	2b04      	cmp	r3, #4
 800405c:	d101      	bne.n	8004062 <LL_ADC_REG_IsConversionOngoing+0x18>
 800405e:	2301      	movs	r3, #1
 8004060:	e000      	b.n	8004064 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004078:	bf00      	nop
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800408c:	bf00      	nop
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80040a0:	bf00      	nop
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80040b4:	bf00      	nop
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80040c8:	bf00      	nop
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80040d4:	b590      	push	{r4, r7, lr}
 80040d6:	b09f      	sub	sp, #124	; 0x7c
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040de:	2300      	movs	r3, #0
 80040e0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d101      	bne.n	80040f2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80040ee:	2302      	movs	r3, #2
 80040f0:	e093      	b.n	800421a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2201      	movs	r2, #1
 80040f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80040fa:	2300      	movs	r3, #0
 80040fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80040fe:	2300      	movs	r3, #0
 8004100:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a47      	ldr	r2, [pc, #284]	; (8004224 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d102      	bne.n	8004112 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800410c:	4b46      	ldr	r3, [pc, #280]	; (8004228 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800410e:	60bb      	str	r3, [r7, #8]
 8004110:	e001      	b.n	8004116 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004112:	2300      	movs	r3, #0
 8004114:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d10b      	bne.n	8004134 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004120:	f043 0220 	orr.w	r2, r3, #32
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e072      	b.n	800421a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	4618      	mov	r0, r3
 8004138:	f7ff ff87 	bl	800404a <LL_ADC_REG_IsConversionOngoing>
 800413c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4618      	mov	r0, r3
 8004144:	f7ff ff81 	bl	800404a <LL_ADC_REG_IsConversionOngoing>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d154      	bne.n	80041f8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800414e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004150:	2b00      	cmp	r3, #0
 8004152:	d151      	bne.n	80041f8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004154:	4b35      	ldr	r3, [pc, #212]	; (800422c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8004156:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d02c      	beq.n	80041ba <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004160:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	6859      	ldr	r1, [r3, #4]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004172:	035b      	lsls	r3, r3, #13
 8004174:	430b      	orrs	r3, r1
 8004176:	431a      	orrs	r2, r3
 8004178:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800417a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800417c:	4829      	ldr	r0, [pc, #164]	; (8004224 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800417e:	f7ff ff51 	bl	8004024 <LL_ADC_IsEnabled>
 8004182:	4604      	mov	r4, r0
 8004184:	4828      	ldr	r0, [pc, #160]	; (8004228 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004186:	f7ff ff4d 	bl	8004024 <LL_ADC_IsEnabled>
 800418a:	4603      	mov	r3, r0
 800418c:	431c      	orrs	r4, r3
 800418e:	4828      	ldr	r0, [pc, #160]	; (8004230 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004190:	f7ff ff48 	bl	8004024 <LL_ADC_IsEnabled>
 8004194:	4603      	mov	r3, r0
 8004196:	4323      	orrs	r3, r4
 8004198:	2b00      	cmp	r3, #0
 800419a:	d137      	bne.n	800420c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800419c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80041a4:	f023 030f 	bic.w	r3, r3, #15
 80041a8:	683a      	ldr	r2, [r7, #0]
 80041aa:	6811      	ldr	r1, [r2, #0]
 80041ac:	683a      	ldr	r2, [r7, #0]
 80041ae:	6892      	ldr	r2, [r2, #8]
 80041b0:	430a      	orrs	r2, r1
 80041b2:	431a      	orrs	r2, r3
 80041b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041b6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80041b8:	e028      	b.n	800420c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80041ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041c4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80041c6:	4817      	ldr	r0, [pc, #92]	; (8004224 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80041c8:	f7ff ff2c 	bl	8004024 <LL_ADC_IsEnabled>
 80041cc:	4604      	mov	r4, r0
 80041ce:	4816      	ldr	r0, [pc, #88]	; (8004228 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80041d0:	f7ff ff28 	bl	8004024 <LL_ADC_IsEnabled>
 80041d4:	4603      	mov	r3, r0
 80041d6:	431c      	orrs	r4, r3
 80041d8:	4815      	ldr	r0, [pc, #84]	; (8004230 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80041da:	f7ff ff23 	bl	8004024 <LL_ADC_IsEnabled>
 80041de:	4603      	mov	r3, r0
 80041e0:	4323      	orrs	r3, r4
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d112      	bne.n	800420c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80041e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80041ee:	f023 030f 	bic.w	r3, r3, #15
 80041f2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80041f4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80041f6:	e009      	b.n	800420c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041fc:	f043 0220 	orr.w	r2, r3, #32
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800420a:	e000      	b.n	800420e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800420c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004216:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800421a:	4618      	mov	r0, r3
 800421c:	377c      	adds	r7, #124	; 0x7c
 800421e:	46bd      	mov	sp, r7
 8004220:	bd90      	pop	{r4, r7, pc}
 8004222:	bf00      	nop
 8004224:	50040000 	.word	0x50040000
 8004228:	50040100 	.word	0x50040100
 800422c:	50040300 	.word	0x50040300
 8004230:	50040200 	.word	0x50040200

08004234 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004234:	b480      	push	{r7}
 8004236:	b085      	sub	sp, #20
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f003 0307 	and.w	r3, r3, #7
 8004242:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004244:	4b0c      	ldr	r3, [pc, #48]	; (8004278 <__NVIC_SetPriorityGrouping+0x44>)
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800424a:	68ba      	ldr	r2, [r7, #8]
 800424c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004250:	4013      	ands	r3, r2
 8004252:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800425c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004260:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004264:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004266:	4a04      	ldr	r2, [pc, #16]	; (8004278 <__NVIC_SetPriorityGrouping+0x44>)
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	60d3      	str	r3, [r2, #12]
}
 800426c:	bf00      	nop
 800426e:	3714      	adds	r7, #20
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr
 8004278:	e000ed00 	.word	0xe000ed00

0800427c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800427c:	b480      	push	{r7}
 800427e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004280:	4b04      	ldr	r3, [pc, #16]	; (8004294 <__NVIC_GetPriorityGrouping+0x18>)
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	0a1b      	lsrs	r3, r3, #8
 8004286:	f003 0307 	and.w	r3, r3, #7
}
 800428a:	4618      	mov	r0, r3
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr
 8004294:	e000ed00 	.word	0xe000ed00

08004298 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	4603      	mov	r3, r0
 80042a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	db0b      	blt.n	80042c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042aa:	79fb      	ldrb	r3, [r7, #7]
 80042ac:	f003 021f 	and.w	r2, r3, #31
 80042b0:	4907      	ldr	r1, [pc, #28]	; (80042d0 <__NVIC_EnableIRQ+0x38>)
 80042b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042b6:	095b      	lsrs	r3, r3, #5
 80042b8:	2001      	movs	r0, #1
 80042ba:	fa00 f202 	lsl.w	r2, r0, r2
 80042be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80042c2:	bf00      	nop
 80042c4:	370c      	adds	r7, #12
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	e000e100 	.word	0xe000e100

080042d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	4603      	mov	r3, r0
 80042dc:	6039      	str	r1, [r7, #0]
 80042de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	db0a      	blt.n	80042fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	b2da      	uxtb	r2, r3
 80042ec:	490c      	ldr	r1, [pc, #48]	; (8004320 <__NVIC_SetPriority+0x4c>)
 80042ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042f2:	0112      	lsls	r2, r2, #4
 80042f4:	b2d2      	uxtb	r2, r2
 80042f6:	440b      	add	r3, r1
 80042f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042fc:	e00a      	b.n	8004314 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	b2da      	uxtb	r2, r3
 8004302:	4908      	ldr	r1, [pc, #32]	; (8004324 <__NVIC_SetPriority+0x50>)
 8004304:	79fb      	ldrb	r3, [r7, #7]
 8004306:	f003 030f 	and.w	r3, r3, #15
 800430a:	3b04      	subs	r3, #4
 800430c:	0112      	lsls	r2, r2, #4
 800430e:	b2d2      	uxtb	r2, r2
 8004310:	440b      	add	r3, r1
 8004312:	761a      	strb	r2, [r3, #24]
}
 8004314:	bf00      	nop
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr
 8004320:	e000e100 	.word	0xe000e100
 8004324:	e000ed00 	.word	0xe000ed00

08004328 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004328:	b480      	push	{r7}
 800432a:	b089      	sub	sp, #36	; 0x24
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f003 0307 	and.w	r3, r3, #7
 800433a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	f1c3 0307 	rsb	r3, r3, #7
 8004342:	2b04      	cmp	r3, #4
 8004344:	bf28      	it	cs
 8004346:	2304      	movcs	r3, #4
 8004348:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	3304      	adds	r3, #4
 800434e:	2b06      	cmp	r3, #6
 8004350:	d902      	bls.n	8004358 <NVIC_EncodePriority+0x30>
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	3b03      	subs	r3, #3
 8004356:	e000      	b.n	800435a <NVIC_EncodePriority+0x32>
 8004358:	2300      	movs	r3, #0
 800435a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800435c:	f04f 32ff 	mov.w	r2, #4294967295
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	fa02 f303 	lsl.w	r3, r2, r3
 8004366:	43da      	mvns	r2, r3
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	401a      	ands	r2, r3
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004370:	f04f 31ff 	mov.w	r1, #4294967295
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	fa01 f303 	lsl.w	r3, r1, r3
 800437a:	43d9      	mvns	r1, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004380:	4313      	orrs	r3, r2
         );
}
 8004382:	4618      	mov	r0, r3
 8004384:	3724      	adds	r7, #36	; 0x24
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
	...

08004390 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	3b01      	subs	r3, #1
 800439c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043a0:	d301      	bcc.n	80043a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043a2:	2301      	movs	r3, #1
 80043a4:	e00f      	b.n	80043c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043a6:	4a0a      	ldr	r2, [pc, #40]	; (80043d0 <SysTick_Config+0x40>)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	3b01      	subs	r3, #1
 80043ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043ae:	210f      	movs	r1, #15
 80043b0:	f04f 30ff 	mov.w	r0, #4294967295
 80043b4:	f7ff ff8e 	bl	80042d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043b8:	4b05      	ldr	r3, [pc, #20]	; (80043d0 <SysTick_Config+0x40>)
 80043ba:	2200      	movs	r2, #0
 80043bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043be:	4b04      	ldr	r3, [pc, #16]	; (80043d0 <SysTick_Config+0x40>)
 80043c0:	2207      	movs	r2, #7
 80043c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3708      	adds	r7, #8
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	e000e010 	.word	0xe000e010

080043d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f7ff ff29 	bl	8004234 <__NVIC_SetPriorityGrouping>
}
 80043e2:	bf00      	nop
 80043e4:	3708      	adds	r7, #8
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b086      	sub	sp, #24
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	4603      	mov	r3, r0
 80043f2:	60b9      	str	r1, [r7, #8]
 80043f4:	607a      	str	r2, [r7, #4]
 80043f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80043f8:	2300      	movs	r3, #0
 80043fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80043fc:	f7ff ff3e 	bl	800427c <__NVIC_GetPriorityGrouping>
 8004400:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	68b9      	ldr	r1, [r7, #8]
 8004406:	6978      	ldr	r0, [r7, #20]
 8004408:	f7ff ff8e 	bl	8004328 <NVIC_EncodePriority>
 800440c:	4602      	mov	r2, r0
 800440e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004412:	4611      	mov	r1, r2
 8004414:	4618      	mov	r0, r3
 8004416:	f7ff ff5d 	bl	80042d4 <__NVIC_SetPriority>
}
 800441a:	bf00      	nop
 800441c:	3718      	adds	r7, #24
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b082      	sub	sp, #8
 8004426:	af00      	add	r7, sp, #0
 8004428:	4603      	mov	r3, r0
 800442a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800442c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004430:	4618      	mov	r0, r3
 8004432:	f7ff ff31 	bl	8004298 <__NVIC_EnableIRQ>
}
 8004436:	bf00      	nop
 8004438:	3708      	adds	r7, #8
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}

0800443e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800443e:	b580      	push	{r7, lr}
 8004440:	b082      	sub	sp, #8
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f7ff ffa2 	bl	8004390 <SysTick_Config>
 800444c:	4603      	mov	r3, r0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3708      	adds	r7, #8
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
	...

08004458 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d101      	bne.n	800446a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e098      	b.n	800459c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	461a      	mov	r2, r3
 8004470:	4b4d      	ldr	r3, [pc, #308]	; (80045a8 <HAL_DMA_Init+0x150>)
 8004472:	429a      	cmp	r2, r3
 8004474:	d80f      	bhi.n	8004496 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	461a      	mov	r2, r3
 800447c:	4b4b      	ldr	r3, [pc, #300]	; (80045ac <HAL_DMA_Init+0x154>)
 800447e:	4413      	add	r3, r2
 8004480:	4a4b      	ldr	r2, [pc, #300]	; (80045b0 <HAL_DMA_Init+0x158>)
 8004482:	fba2 2303 	umull	r2, r3, r2, r3
 8004486:	091b      	lsrs	r3, r3, #4
 8004488:	009a      	lsls	r2, r3, #2
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a48      	ldr	r2, [pc, #288]	; (80045b4 <HAL_DMA_Init+0x15c>)
 8004492:	641a      	str	r2, [r3, #64]	; 0x40
 8004494:	e00e      	b.n	80044b4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	461a      	mov	r2, r3
 800449c:	4b46      	ldr	r3, [pc, #280]	; (80045b8 <HAL_DMA_Init+0x160>)
 800449e:	4413      	add	r3, r2
 80044a0:	4a43      	ldr	r2, [pc, #268]	; (80045b0 <HAL_DMA_Init+0x158>)
 80044a2:	fba2 2303 	umull	r2, r3, r2, r3
 80044a6:	091b      	lsrs	r3, r3, #4
 80044a8:	009a      	lsls	r2, r3, #2
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a42      	ldr	r2, [pc, #264]	; (80045bc <HAL_DMA_Init+0x164>)
 80044b2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2202      	movs	r2, #2
 80044b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80044ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80044d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a1b      	ldr	r3, [r3, #32]
 80044f6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800450e:	d039      	beq.n	8004584 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004514:	4a27      	ldr	r2, [pc, #156]	; (80045b4 <HAL_DMA_Init+0x15c>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d11a      	bne.n	8004550 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800451a:	4b29      	ldr	r3, [pc, #164]	; (80045c0 <HAL_DMA_Init+0x168>)
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004522:	f003 031c 	and.w	r3, r3, #28
 8004526:	210f      	movs	r1, #15
 8004528:	fa01 f303 	lsl.w	r3, r1, r3
 800452c:	43db      	mvns	r3, r3
 800452e:	4924      	ldr	r1, [pc, #144]	; (80045c0 <HAL_DMA_Init+0x168>)
 8004530:	4013      	ands	r3, r2
 8004532:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004534:	4b22      	ldr	r3, [pc, #136]	; (80045c0 <HAL_DMA_Init+0x168>)
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6859      	ldr	r1, [r3, #4]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004540:	f003 031c 	and.w	r3, r3, #28
 8004544:	fa01 f303 	lsl.w	r3, r1, r3
 8004548:	491d      	ldr	r1, [pc, #116]	; (80045c0 <HAL_DMA_Init+0x168>)
 800454a:	4313      	orrs	r3, r2
 800454c:	600b      	str	r3, [r1, #0]
 800454e:	e019      	b.n	8004584 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004550:	4b1c      	ldr	r3, [pc, #112]	; (80045c4 <HAL_DMA_Init+0x16c>)
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004558:	f003 031c 	and.w	r3, r3, #28
 800455c:	210f      	movs	r1, #15
 800455e:	fa01 f303 	lsl.w	r3, r1, r3
 8004562:	43db      	mvns	r3, r3
 8004564:	4917      	ldr	r1, [pc, #92]	; (80045c4 <HAL_DMA_Init+0x16c>)
 8004566:	4013      	ands	r3, r2
 8004568:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800456a:	4b16      	ldr	r3, [pc, #88]	; (80045c4 <HAL_DMA_Init+0x16c>)
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6859      	ldr	r1, [r3, #4]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004576:	f003 031c 	and.w	r3, r3, #28
 800457a:	fa01 f303 	lsl.w	r3, r1, r3
 800457e:	4911      	ldr	r1, [pc, #68]	; (80045c4 <HAL_DMA_Init+0x16c>)
 8004580:	4313      	orrs	r3, r2
 8004582:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2201      	movs	r2, #1
 800458e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800459a:	2300      	movs	r3, #0
}
 800459c:	4618      	mov	r0, r3
 800459e:	3714      	adds	r7, #20
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr
 80045a8:	40020407 	.word	0x40020407
 80045ac:	bffdfff8 	.word	0xbffdfff8
 80045b0:	cccccccd 	.word	0xcccccccd
 80045b4:	40020000 	.word	0x40020000
 80045b8:	bffdfbf8 	.word	0xbffdfbf8
 80045bc:	40020400 	.word	0x40020400
 80045c0:	400200a8 	.word	0x400200a8
 80045c4:	400204a8 	.word	0x400204a8

080045c8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b085      	sub	sp, #20
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045d0:	2300      	movs	r3, #0
 80045d2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d008      	beq.n	80045f2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2204      	movs	r2, #4
 80045e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e022      	b.n	8004638 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f022 020e 	bic.w	r2, r2, #14
 8004600:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f022 0201 	bic.w	r2, r2, #1
 8004610:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004616:	f003 021c 	and.w	r2, r3, #28
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461e:	2101      	movs	r1, #1
 8004620:	fa01 f202 	lsl.w	r2, r1, r2
 8004624:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2201      	movs	r2, #1
 800462a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8004636:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004638:	4618      	mov	r0, r3
 800463a:	3714      	adds	r7, #20
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800464c:	2300      	movs	r3, #0
 800464e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004656:	b2db      	uxtb	r3, r3
 8004658:	2b02      	cmp	r3, #2
 800465a:	d005      	beq.n	8004668 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2204      	movs	r2, #4
 8004660:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	73fb      	strb	r3, [r7, #15]
 8004666:	e029      	b.n	80046bc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f022 020e 	bic.w	r2, r2, #14
 8004676:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f022 0201 	bic.w	r2, r2, #1
 8004686:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800468c:	f003 021c 	and.w	r2, r3, #28
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004694:	2101      	movs	r1, #1
 8004696:	fa01 f202 	lsl.w	r2, r1, r2
 800469a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d003      	beq.n	80046bc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	4798      	blx	r3
    }
  }
  return status;
 80046bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3710      	adds	r7, #16
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80046c6:	b580      	push	{r7, lr}
 80046c8:	b084      	sub	sp, #16
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046e2:	f003 031c 	and.w	r3, r3, #28
 80046e6:	2204      	movs	r2, #4
 80046e8:	409a      	lsls	r2, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	4013      	ands	r3, r2
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d026      	beq.n	8004740 <HAL_DMA_IRQHandler+0x7a>
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	f003 0304 	and.w	r3, r3, #4
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d021      	beq.n	8004740 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0320 	and.w	r3, r3, #32
 8004706:	2b00      	cmp	r3, #0
 8004708:	d107      	bne.n	800471a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f022 0204 	bic.w	r2, r2, #4
 8004718:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800471e:	f003 021c 	and.w	r2, r3, #28
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004726:	2104      	movs	r1, #4
 8004728:	fa01 f202 	lsl.w	r2, r1, r2
 800472c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004732:	2b00      	cmp	r3, #0
 8004734:	d071      	beq.n	800481a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800473e:	e06c      	b.n	800481a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004744:	f003 031c 	and.w	r3, r3, #28
 8004748:	2202      	movs	r2, #2
 800474a:	409a      	lsls	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	4013      	ands	r3, r2
 8004750:	2b00      	cmp	r3, #0
 8004752:	d02e      	beq.n	80047b2 <HAL_DMA_IRQHandler+0xec>
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	f003 0302 	and.w	r3, r3, #2
 800475a:	2b00      	cmp	r3, #0
 800475c:	d029      	beq.n	80047b2 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0320 	and.w	r3, r3, #32
 8004768:	2b00      	cmp	r3, #0
 800476a:	d10b      	bne.n	8004784 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f022 020a 	bic.w	r2, r2, #10
 800477a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004788:	f003 021c 	and.w	r2, r3, #28
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004790:	2102      	movs	r1, #2
 8004792:	fa01 f202 	lsl.w	r2, r1, r2
 8004796:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d038      	beq.n	800481a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80047b0:	e033      	b.n	800481a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b6:	f003 031c 	and.w	r3, r3, #28
 80047ba:	2208      	movs	r2, #8
 80047bc:	409a      	lsls	r2, r3
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	4013      	ands	r3, r2
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d02a      	beq.n	800481c <HAL_DMA_IRQHandler+0x156>
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	f003 0308 	and.w	r3, r3, #8
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d025      	beq.n	800481c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f022 020e 	bic.w	r2, r2, #14
 80047de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e4:	f003 021c 	and.w	r2, r3, #28
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ec:	2101      	movs	r1, #1
 80047ee:	fa01 f202 	lsl.w	r2, r1, r2
 80047f2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2201      	movs	r2, #1
 80047fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800480e:	2b00      	cmp	r3, #0
 8004810:	d004      	beq.n	800481c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800481a:	bf00      	nop
 800481c:	bf00      	nop
}
 800481e:	3710      	adds	r7, #16
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004824:	b480      	push	{r7}
 8004826:	b087      	sub	sp, #28
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800482e:	2300      	movs	r3, #0
 8004830:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004832:	e17f      	b.n	8004b34 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	2101      	movs	r1, #1
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	fa01 f303 	lsl.w	r3, r1, r3
 8004840:	4013      	ands	r3, r2
 8004842:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2b00      	cmp	r3, #0
 8004848:	f000 8171 	beq.w	8004b2e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f003 0303 	and.w	r3, r3, #3
 8004854:	2b01      	cmp	r3, #1
 8004856:	d005      	beq.n	8004864 <HAL_GPIO_Init+0x40>
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f003 0303 	and.w	r3, r3, #3
 8004860:	2b02      	cmp	r3, #2
 8004862:	d130      	bne.n	80048c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	005b      	lsls	r3, r3, #1
 800486e:	2203      	movs	r2, #3
 8004870:	fa02 f303 	lsl.w	r3, r2, r3
 8004874:	43db      	mvns	r3, r3
 8004876:	693a      	ldr	r2, [r7, #16]
 8004878:	4013      	ands	r3, r2
 800487a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	68da      	ldr	r2, [r3, #12]
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	005b      	lsls	r3, r3, #1
 8004884:	fa02 f303 	lsl.w	r3, r2, r3
 8004888:	693a      	ldr	r2, [r7, #16]
 800488a:	4313      	orrs	r3, r2
 800488c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	693a      	ldr	r2, [r7, #16]
 8004892:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800489a:	2201      	movs	r2, #1
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	fa02 f303 	lsl.w	r3, r2, r3
 80048a2:	43db      	mvns	r3, r3
 80048a4:	693a      	ldr	r2, [r7, #16]
 80048a6:	4013      	ands	r3, r2
 80048a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	091b      	lsrs	r3, r3, #4
 80048b0:	f003 0201 	and.w	r2, r3, #1
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ba:	693a      	ldr	r2, [r7, #16]
 80048bc:	4313      	orrs	r3, r2
 80048be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	693a      	ldr	r2, [r7, #16]
 80048c4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	f003 0303 	and.w	r3, r3, #3
 80048ce:	2b03      	cmp	r3, #3
 80048d0:	d118      	bne.n	8004904 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80048d8:	2201      	movs	r2, #1
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	fa02 f303 	lsl.w	r3, r2, r3
 80048e0:	43db      	mvns	r3, r3
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	4013      	ands	r3, r2
 80048e6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	08db      	lsrs	r3, r3, #3
 80048ee:	f003 0201 	and.w	r2, r3, #1
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	fa02 f303 	lsl.w	r3, r2, r3
 80048f8:	693a      	ldr	r2, [r7, #16]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	693a      	ldr	r2, [r7, #16]
 8004902:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f003 0303 	and.w	r3, r3, #3
 800490c:	2b03      	cmp	r3, #3
 800490e:	d017      	beq.n	8004940 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	005b      	lsls	r3, r3, #1
 800491a:	2203      	movs	r2, #3
 800491c:	fa02 f303 	lsl.w	r3, r2, r3
 8004920:	43db      	mvns	r3, r3
 8004922:	693a      	ldr	r2, [r7, #16]
 8004924:	4013      	ands	r3, r2
 8004926:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	689a      	ldr	r2, [r3, #8]
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	005b      	lsls	r3, r3, #1
 8004930:	fa02 f303 	lsl.w	r3, r2, r3
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	4313      	orrs	r3, r2
 8004938:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	693a      	ldr	r2, [r7, #16]
 800493e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	f003 0303 	and.w	r3, r3, #3
 8004948:	2b02      	cmp	r3, #2
 800494a:	d123      	bne.n	8004994 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	08da      	lsrs	r2, r3, #3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	3208      	adds	r2, #8
 8004954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004958:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	f003 0307 	and.w	r3, r3, #7
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	220f      	movs	r2, #15
 8004964:	fa02 f303 	lsl.w	r3, r2, r3
 8004968:	43db      	mvns	r3, r3
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	4013      	ands	r3, r2
 800496e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	691a      	ldr	r2, [r3, #16]
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	f003 0307 	and.w	r3, r3, #7
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	fa02 f303 	lsl.w	r3, r2, r3
 8004980:	693a      	ldr	r2, [r7, #16]
 8004982:	4313      	orrs	r3, r2
 8004984:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	08da      	lsrs	r2, r3, #3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	3208      	adds	r2, #8
 800498e:	6939      	ldr	r1, [r7, #16]
 8004990:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	005b      	lsls	r3, r3, #1
 800499e:	2203      	movs	r2, #3
 80049a0:	fa02 f303 	lsl.w	r3, r2, r3
 80049a4:	43db      	mvns	r3, r3
 80049a6:	693a      	ldr	r2, [r7, #16]
 80049a8:	4013      	ands	r3, r2
 80049aa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	f003 0203 	and.w	r2, r3, #3
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	005b      	lsls	r3, r3, #1
 80049b8:	fa02 f303 	lsl.w	r3, r2, r3
 80049bc:	693a      	ldr	r2, [r7, #16]
 80049be:	4313      	orrs	r3, r2
 80049c0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	693a      	ldr	r2, [r7, #16]
 80049c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	f000 80ac 	beq.w	8004b2e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049d6:	4b5f      	ldr	r3, [pc, #380]	; (8004b54 <HAL_GPIO_Init+0x330>)
 80049d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049da:	4a5e      	ldr	r2, [pc, #376]	; (8004b54 <HAL_GPIO_Init+0x330>)
 80049dc:	f043 0301 	orr.w	r3, r3, #1
 80049e0:	6613      	str	r3, [r2, #96]	; 0x60
 80049e2:	4b5c      	ldr	r3, [pc, #368]	; (8004b54 <HAL_GPIO_Init+0x330>)
 80049e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049e6:	f003 0301 	and.w	r3, r3, #1
 80049ea:	60bb      	str	r3, [r7, #8]
 80049ec:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80049ee:	4a5a      	ldr	r2, [pc, #360]	; (8004b58 <HAL_GPIO_Init+0x334>)
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	089b      	lsrs	r3, r3, #2
 80049f4:	3302      	adds	r3, #2
 80049f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	f003 0303 	and.w	r3, r3, #3
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	220f      	movs	r2, #15
 8004a06:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0a:	43db      	mvns	r3, r3
 8004a0c:	693a      	ldr	r2, [r7, #16]
 8004a0e:	4013      	ands	r3, r2
 8004a10:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004a18:	d025      	beq.n	8004a66 <HAL_GPIO_Init+0x242>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a4f      	ldr	r2, [pc, #316]	; (8004b5c <HAL_GPIO_Init+0x338>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d01f      	beq.n	8004a62 <HAL_GPIO_Init+0x23e>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a4e      	ldr	r2, [pc, #312]	; (8004b60 <HAL_GPIO_Init+0x33c>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d019      	beq.n	8004a5e <HAL_GPIO_Init+0x23a>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a4d      	ldr	r2, [pc, #308]	; (8004b64 <HAL_GPIO_Init+0x340>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d013      	beq.n	8004a5a <HAL_GPIO_Init+0x236>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a4c      	ldr	r2, [pc, #304]	; (8004b68 <HAL_GPIO_Init+0x344>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d00d      	beq.n	8004a56 <HAL_GPIO_Init+0x232>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a4b      	ldr	r2, [pc, #300]	; (8004b6c <HAL_GPIO_Init+0x348>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d007      	beq.n	8004a52 <HAL_GPIO_Init+0x22e>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a4a      	ldr	r2, [pc, #296]	; (8004b70 <HAL_GPIO_Init+0x34c>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d101      	bne.n	8004a4e <HAL_GPIO_Init+0x22a>
 8004a4a:	2306      	movs	r3, #6
 8004a4c:	e00c      	b.n	8004a68 <HAL_GPIO_Init+0x244>
 8004a4e:	2307      	movs	r3, #7
 8004a50:	e00a      	b.n	8004a68 <HAL_GPIO_Init+0x244>
 8004a52:	2305      	movs	r3, #5
 8004a54:	e008      	b.n	8004a68 <HAL_GPIO_Init+0x244>
 8004a56:	2304      	movs	r3, #4
 8004a58:	e006      	b.n	8004a68 <HAL_GPIO_Init+0x244>
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e004      	b.n	8004a68 <HAL_GPIO_Init+0x244>
 8004a5e:	2302      	movs	r3, #2
 8004a60:	e002      	b.n	8004a68 <HAL_GPIO_Init+0x244>
 8004a62:	2301      	movs	r3, #1
 8004a64:	e000      	b.n	8004a68 <HAL_GPIO_Init+0x244>
 8004a66:	2300      	movs	r3, #0
 8004a68:	697a      	ldr	r2, [r7, #20]
 8004a6a:	f002 0203 	and.w	r2, r2, #3
 8004a6e:	0092      	lsls	r2, r2, #2
 8004a70:	4093      	lsls	r3, r2
 8004a72:	693a      	ldr	r2, [r7, #16]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004a78:	4937      	ldr	r1, [pc, #220]	; (8004b58 <HAL_GPIO_Init+0x334>)
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	089b      	lsrs	r3, r3, #2
 8004a7e:	3302      	adds	r3, #2
 8004a80:	693a      	ldr	r2, [r7, #16]
 8004a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a86:	4b3b      	ldr	r3, [pc, #236]	; (8004b74 <HAL_GPIO_Init+0x350>)
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	43db      	mvns	r3, r3
 8004a90:	693a      	ldr	r2, [r7, #16]
 8004a92:	4013      	ands	r3, r2
 8004a94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d003      	beq.n	8004aaa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004aa2:	693a      	ldr	r2, [r7, #16]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004aaa:	4a32      	ldr	r2, [pc, #200]	; (8004b74 <HAL_GPIO_Init+0x350>)
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004ab0:	4b30      	ldr	r3, [pc, #192]	; (8004b74 <HAL_GPIO_Init+0x350>)
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	43db      	mvns	r3, r3
 8004aba:	693a      	ldr	r2, [r7, #16]
 8004abc:	4013      	ands	r3, r2
 8004abe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d003      	beq.n	8004ad4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004ad4:	4a27      	ldr	r2, [pc, #156]	; (8004b74 <HAL_GPIO_Init+0x350>)
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004ada:	4b26      	ldr	r3, [pc, #152]	; (8004b74 <HAL_GPIO_Init+0x350>)
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	43db      	mvns	r3, r3
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d003      	beq.n	8004afe <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004af6:	693a      	ldr	r2, [r7, #16]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004afe:	4a1d      	ldr	r2, [pc, #116]	; (8004b74 <HAL_GPIO_Init+0x350>)
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004b04:	4b1b      	ldr	r3, [pc, #108]	; (8004b74 <HAL_GPIO_Init+0x350>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	43db      	mvns	r3, r3
 8004b0e:	693a      	ldr	r2, [r7, #16]
 8004b10:	4013      	ands	r3, r2
 8004b12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d003      	beq.n	8004b28 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004b20:	693a      	ldr	r2, [r7, #16]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004b28:	4a12      	ldr	r2, [pc, #72]	; (8004b74 <HAL_GPIO_Init+0x350>)
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	3301      	adds	r3, #1
 8004b32:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	f47f ae78 	bne.w	8004834 <HAL_GPIO_Init+0x10>
  }
}
 8004b44:	bf00      	nop
 8004b46:	bf00      	nop
 8004b48:	371c      	adds	r7, #28
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop
 8004b54:	40021000 	.word	0x40021000
 8004b58:	40010000 	.word	0x40010000
 8004b5c:	48000400 	.word	0x48000400
 8004b60:	48000800 	.word	0x48000800
 8004b64:	48000c00 	.word	0x48000c00
 8004b68:	48001000 	.word	0x48001000
 8004b6c:	48001400 	.word	0x48001400
 8004b70:	48001800 	.word	0x48001800
 8004b74:	40010400 	.word	0x40010400

08004b78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	460b      	mov	r3, r1
 8004b82:	807b      	strh	r3, [r7, #2]
 8004b84:	4613      	mov	r3, r2
 8004b86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b88:	787b      	ldrb	r3, [r7, #1]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d003      	beq.n	8004b96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004b8e:	887a      	ldrh	r2, [r7, #2]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004b94:	e002      	b.n	8004b9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b96:	887a      	ldrh	r2, [r7, #2]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004b9c:	bf00      	nop
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d101      	bne.n	8004bba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e081      	b.n	8004cbe <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d106      	bne.n	8004bd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f7fd faf4 	bl	80021bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2224      	movs	r2, #36	; 0x24
 8004bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f022 0201 	bic.w	r2, r2, #1
 8004bea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685a      	ldr	r2, [r3, #4]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004bf8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	689a      	ldr	r2, [r3, #8]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c08:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d107      	bne.n	8004c22 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	689a      	ldr	r2, [r3, #8]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c1e:	609a      	str	r2, [r3, #8]
 8004c20:	e006      	b.n	8004c30 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	689a      	ldr	r2, [r3, #8]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004c2e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d104      	bne.n	8004c42 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c40:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	6812      	ldr	r2, [r2, #0]
 8004c4c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004c50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c54:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	68da      	ldr	r2, [r3, #12]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c64:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	691a      	ldr	r2, [r3, #16]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	695b      	ldr	r3, [r3, #20]
 8004c6e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	430a      	orrs	r2, r1
 8004c7e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	69d9      	ldr	r1, [r3, #28]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a1a      	ldr	r2, [r3, #32]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	430a      	orrs	r2, r1
 8004c8e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f042 0201 	orr.w	r2, r2, #1
 8004c9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2220      	movs	r2, #32
 8004caa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3708      	adds	r7, #8
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
	...

08004cc8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b088      	sub	sp, #32
 8004ccc:	af02      	add	r7, sp, #8
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	4608      	mov	r0, r1
 8004cd2:	4611      	mov	r1, r2
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	817b      	strh	r3, [r7, #10]
 8004cda:	460b      	mov	r3, r1
 8004cdc:	813b      	strh	r3, [r7, #8]
 8004cde:	4613      	mov	r3, r2
 8004ce0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	2b20      	cmp	r3, #32
 8004cec:	f040 80fd 	bne.w	8004eea <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cf0:	6a3b      	ldr	r3, [r7, #32]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d002      	beq.n	8004cfc <HAL_I2C_Mem_Read+0x34>
 8004cf6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d105      	bne.n	8004d08 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d02:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e0f1      	b.n	8004eec <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d101      	bne.n	8004d16 <HAL_I2C_Mem_Read+0x4e>
 8004d12:	2302      	movs	r3, #2
 8004d14:	e0ea      	b.n	8004eec <HAL_I2C_Mem_Read+0x224>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004d1e:	f7fd fddb 	bl	80028d8 <HAL_GetTick>
 8004d22:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	9300      	str	r3, [sp, #0]
 8004d28:	2319      	movs	r3, #25
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d30:	68f8      	ldr	r0, [r7, #12]
 8004d32:	f000 f95b 	bl	8004fec <I2C_WaitOnFlagUntilTimeout>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d001      	beq.n	8004d40 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e0d5      	b.n	8004eec <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2222      	movs	r2, #34	; 0x22
 8004d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2240      	movs	r2, #64	; 0x40
 8004d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2200      	movs	r2, #0
 8004d54:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6a3a      	ldr	r2, [r7, #32]
 8004d5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004d60:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2200      	movs	r2, #0
 8004d66:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d68:	88f8      	ldrh	r0, [r7, #6]
 8004d6a:	893a      	ldrh	r2, [r7, #8]
 8004d6c:	8979      	ldrh	r1, [r7, #10]
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	9301      	str	r3, [sp, #4]
 8004d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d74:	9300      	str	r3, [sp, #0]
 8004d76:	4603      	mov	r3, r0
 8004d78:	68f8      	ldr	r0, [r7, #12]
 8004d7a:	f000 f8bf 	bl	8004efc <I2C_RequestMemoryRead>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d005      	beq.n	8004d90 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e0ad      	b.n	8004eec <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	2bff      	cmp	r3, #255	; 0xff
 8004d98:	d90e      	bls.n	8004db8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	22ff      	movs	r2, #255	; 0xff
 8004d9e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004da4:	b2da      	uxtb	r2, r3
 8004da6:	8979      	ldrh	r1, [r7, #10]
 8004da8:	4b52      	ldr	r3, [pc, #328]	; (8004ef4 <HAL_I2C_Mem_Read+0x22c>)
 8004daa:	9300      	str	r3, [sp, #0]
 8004dac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004db0:	68f8      	ldr	r0, [r7, #12]
 8004db2:	f000 fac3 	bl	800533c <I2C_TransferConfig>
 8004db6:	e00f      	b.n	8004dd8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dbc:	b29a      	uxth	r2, r3
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dc6:	b2da      	uxtb	r2, r3
 8004dc8:	8979      	ldrh	r1, [r7, #10]
 8004dca:	4b4a      	ldr	r3, [pc, #296]	; (8004ef4 <HAL_I2C_Mem_Read+0x22c>)
 8004dcc:	9300      	str	r3, [sp, #0]
 8004dce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004dd2:	68f8      	ldr	r0, [r7, #12]
 8004dd4:	f000 fab2 	bl	800533c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	9300      	str	r3, [sp, #0]
 8004ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dde:	2200      	movs	r2, #0
 8004de0:	2104      	movs	r1, #4
 8004de2:	68f8      	ldr	r0, [r7, #12]
 8004de4:	f000 f902 	bl	8004fec <I2C_WaitOnFlagUntilTimeout>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d001      	beq.n	8004df2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e07c      	b.n	8004eec <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfc:	b2d2      	uxtb	r2, r2
 8004dfe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e04:	1c5a      	adds	r2, r3, #1
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	b29a      	uxth	r2, r3
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d034      	beq.n	8004e98 <HAL_I2C_Mem_Read+0x1d0>
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d130      	bne.n	8004e98 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	9300      	str	r3, [sp, #0]
 8004e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	2180      	movs	r1, #128	; 0x80
 8004e40:	68f8      	ldr	r0, [r7, #12]
 8004e42:	f000 f8d3 	bl	8004fec <I2C_WaitOnFlagUntilTimeout>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d001      	beq.n	8004e50 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e04d      	b.n	8004eec <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	2bff      	cmp	r3, #255	; 0xff
 8004e58:	d90e      	bls.n	8004e78 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	22ff      	movs	r2, #255	; 0xff
 8004e5e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e64:	b2da      	uxtb	r2, r3
 8004e66:	8979      	ldrh	r1, [r7, #10]
 8004e68:	2300      	movs	r3, #0
 8004e6a:	9300      	str	r3, [sp, #0]
 8004e6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e70:	68f8      	ldr	r0, [r7, #12]
 8004e72:	f000 fa63 	bl	800533c <I2C_TransferConfig>
 8004e76:	e00f      	b.n	8004e98 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e7c:	b29a      	uxth	r2, r3
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e86:	b2da      	uxtb	r2, r3
 8004e88:	8979      	ldrh	r1, [r7, #10]
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	9300      	str	r3, [sp, #0]
 8004e8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	f000 fa52 	bl	800533c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d19a      	bne.n	8004dd8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ea2:	697a      	ldr	r2, [r7, #20]
 8004ea4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ea6:	68f8      	ldr	r0, [r7, #12]
 8004ea8:	f000 f920 	bl	80050ec <I2C_WaitOnSTOPFlagUntilTimeout>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d001      	beq.n	8004eb6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e01a      	b.n	8004eec <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2220      	movs	r2, #32
 8004ebc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	6859      	ldr	r1, [r3, #4]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	4b0b      	ldr	r3, [pc, #44]	; (8004ef8 <HAL_I2C_Mem_Read+0x230>)
 8004eca:	400b      	ands	r3, r1
 8004ecc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2220      	movs	r2, #32
 8004ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	e000      	b.n	8004eec <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004eea:	2302      	movs	r3, #2
  }
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3718      	adds	r7, #24
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	80002400 	.word	0x80002400
 8004ef8:	fe00e800 	.word	0xfe00e800

08004efc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b086      	sub	sp, #24
 8004f00:	af02      	add	r7, sp, #8
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	4608      	mov	r0, r1
 8004f06:	4611      	mov	r1, r2
 8004f08:	461a      	mov	r2, r3
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	817b      	strh	r3, [r7, #10]
 8004f0e:	460b      	mov	r3, r1
 8004f10:	813b      	strh	r3, [r7, #8]
 8004f12:	4613      	mov	r3, r2
 8004f14:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004f16:	88fb      	ldrh	r3, [r7, #6]
 8004f18:	b2da      	uxtb	r2, r3
 8004f1a:	8979      	ldrh	r1, [r7, #10]
 8004f1c:	4b20      	ldr	r3, [pc, #128]	; (8004fa0 <I2C_RequestMemoryRead+0xa4>)
 8004f1e:	9300      	str	r3, [sp, #0]
 8004f20:	2300      	movs	r3, #0
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	f000 fa0a 	bl	800533c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f28:	69fa      	ldr	r2, [r7, #28]
 8004f2a:	69b9      	ldr	r1, [r7, #24]
 8004f2c:	68f8      	ldr	r0, [r7, #12]
 8004f2e:	f000 f89d 	bl	800506c <I2C_WaitOnTXISFlagUntilTimeout>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d001      	beq.n	8004f3c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e02c      	b.n	8004f96 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f3c:	88fb      	ldrh	r3, [r7, #6]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d105      	bne.n	8004f4e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004f42:	893b      	ldrh	r3, [r7, #8]
 8004f44:	b2da      	uxtb	r2, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	629a      	str	r2, [r3, #40]	; 0x28
 8004f4c:	e015      	b.n	8004f7a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004f4e:	893b      	ldrh	r3, [r7, #8]
 8004f50:	0a1b      	lsrs	r3, r3, #8
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	b2da      	uxtb	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f5c:	69fa      	ldr	r2, [r7, #28]
 8004f5e:	69b9      	ldr	r1, [r7, #24]
 8004f60:	68f8      	ldr	r0, [r7, #12]
 8004f62:	f000 f883 	bl	800506c <I2C_WaitOnTXISFlagUntilTimeout>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d001      	beq.n	8004f70 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e012      	b.n	8004f96 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004f70:	893b      	ldrh	r3, [r7, #8]
 8004f72:	b2da      	uxtb	r2, r3
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	9300      	str	r3, [sp, #0]
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	2200      	movs	r2, #0
 8004f82:	2140      	movs	r1, #64	; 0x40
 8004f84:	68f8      	ldr	r0, [r7, #12]
 8004f86:	f000 f831 	bl	8004fec <I2C_WaitOnFlagUntilTimeout>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d001      	beq.n	8004f94 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e000      	b.n	8004f96 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3710      	adds	r7, #16
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	80002000 	.word	0x80002000

08004fa4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	f003 0302 	and.w	r3, r3, #2
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d103      	bne.n	8004fc2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	f003 0301 	and.w	r3, r3, #1
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d007      	beq.n	8004fe0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	699a      	ldr	r2, [r3, #24]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f042 0201 	orr.w	r2, r2, #1
 8004fde:	619a      	str	r2, [r3, #24]
  }
}
 8004fe0:	bf00      	nop
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	603b      	str	r3, [r7, #0]
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ffc:	e022      	b.n	8005044 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005004:	d01e      	beq.n	8005044 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005006:	f7fd fc67 	bl	80028d8 <HAL_GetTick>
 800500a:	4602      	mov	r2, r0
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	683a      	ldr	r2, [r7, #0]
 8005012:	429a      	cmp	r2, r3
 8005014:	d302      	bcc.n	800501c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d113      	bne.n	8005044 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005020:	f043 0220 	orr.w	r2, r3, #32
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2220      	movs	r2, #32
 800502c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e00f      	b.n	8005064 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	699a      	ldr	r2, [r3, #24]
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	4013      	ands	r3, r2
 800504e:	68ba      	ldr	r2, [r7, #8]
 8005050:	429a      	cmp	r2, r3
 8005052:	bf0c      	ite	eq
 8005054:	2301      	moveq	r3, #1
 8005056:	2300      	movne	r3, #0
 8005058:	b2db      	uxtb	r3, r3
 800505a:	461a      	mov	r2, r3
 800505c:	79fb      	ldrb	r3, [r7, #7]
 800505e:	429a      	cmp	r2, r3
 8005060:	d0cd      	beq.n	8004ffe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	3710      	adds	r7, #16
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005078:	e02c      	b.n	80050d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	68b9      	ldr	r1, [r7, #8]
 800507e:	68f8      	ldr	r0, [r7, #12]
 8005080:	f000 f870 	bl	8005164 <I2C_IsErrorOccurred>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d001      	beq.n	800508e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e02a      	b.n	80050e4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005094:	d01e      	beq.n	80050d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005096:	f7fd fc1f 	bl	80028d8 <HAL_GetTick>
 800509a:	4602      	mov	r2, r0
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	68ba      	ldr	r2, [r7, #8]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d302      	bcc.n	80050ac <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d113      	bne.n	80050d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050b0:	f043 0220 	orr.w	r2, r3, #32
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2220      	movs	r2, #32
 80050bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e007      	b.n	80050e4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	f003 0302 	and.w	r3, r3, #2
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d1cb      	bne.n	800507a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80050e2:	2300      	movs	r3, #0
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3710      	adds	r7, #16
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80050f8:	e028      	b.n	800514c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	68b9      	ldr	r1, [r7, #8]
 80050fe:	68f8      	ldr	r0, [r7, #12]
 8005100:	f000 f830 	bl	8005164 <I2C_IsErrorOccurred>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d001      	beq.n	800510e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e026      	b.n	800515c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800510e:	f7fd fbe3 	bl	80028d8 <HAL_GetTick>
 8005112:	4602      	mov	r2, r0
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	68ba      	ldr	r2, [r7, #8]
 800511a:	429a      	cmp	r2, r3
 800511c:	d302      	bcc.n	8005124 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d113      	bne.n	800514c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005128:	f043 0220 	orr.w	r2, r3, #32
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2220      	movs	r2, #32
 8005134:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2200      	movs	r2, #0
 800513c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2200      	movs	r2, #0
 8005144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e007      	b.n	800515c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	f003 0320 	and.w	r3, r3, #32
 8005156:	2b20      	cmp	r3, #32
 8005158:	d1cf      	bne.n	80050fa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800515a:	2300      	movs	r3, #0
}
 800515c:	4618      	mov	r0, r3
 800515e:	3710      	adds	r7, #16
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b08a      	sub	sp, #40	; 0x28
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005170:	2300      	movs	r3, #0
 8005172:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	699b      	ldr	r3, [r3, #24]
 800517c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800517e:	2300      	movs	r3, #0
 8005180:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	f003 0310 	and.w	r3, r3, #16
 800518c:	2b00      	cmp	r3, #0
 800518e:	d075      	beq.n	800527c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2210      	movs	r2, #16
 8005196:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005198:	e056      	b.n	8005248 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051a0:	d052      	beq.n	8005248 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80051a2:	f7fd fb99 	bl	80028d8 <HAL_GetTick>
 80051a6:	4602      	mov	r2, r0
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	68ba      	ldr	r2, [r7, #8]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d302      	bcc.n	80051b8 <I2C_IsErrorOccurred+0x54>
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d147      	bne.n	8005248 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051c2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80051ca:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051da:	d12e      	bne.n	800523a <I2C_IsErrorOccurred+0xd6>
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051e2:	d02a      	beq.n	800523a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80051e4:	7cfb      	ldrb	r3, [r7, #19]
 80051e6:	2b20      	cmp	r3, #32
 80051e8:	d027      	beq.n	800523a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	685a      	ldr	r2, [r3, #4]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051f8:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80051fa:	f7fd fb6d 	bl	80028d8 <HAL_GetTick>
 80051fe:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005200:	e01b      	b.n	800523a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005202:	f7fd fb69 	bl	80028d8 <HAL_GetTick>
 8005206:	4602      	mov	r2, r0
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	2b19      	cmp	r3, #25
 800520e:	d914      	bls.n	800523a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005214:	f043 0220 	orr.w	r2, r3, #32
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2220      	movs	r2, #32
 8005220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2200      	movs	r2, #0
 8005228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2200      	movs	r2, #0
 8005230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	f003 0320 	and.w	r3, r3, #32
 8005244:	2b20      	cmp	r3, #32
 8005246:	d1dc      	bne.n	8005202 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	699b      	ldr	r3, [r3, #24]
 800524e:	f003 0320 	and.w	r3, r3, #32
 8005252:	2b20      	cmp	r3, #32
 8005254:	d003      	beq.n	800525e <I2C_IsErrorOccurred+0xfa>
 8005256:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800525a:	2b00      	cmp	r3, #0
 800525c:	d09d      	beq.n	800519a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800525e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005262:	2b00      	cmp	r3, #0
 8005264:	d103      	bne.n	800526e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2220      	movs	r2, #32
 800526c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800526e:	6a3b      	ldr	r3, [r7, #32]
 8005270:	f043 0304 	orr.w	r3, r3, #4
 8005274:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	699b      	ldr	r3, [r3, #24]
 8005282:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00b      	beq.n	80052a6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800528e:	6a3b      	ldr	r3, [r7, #32]
 8005290:	f043 0301 	orr.w	r3, r3, #1
 8005294:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800529e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d00b      	beq.n	80052c8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80052b0:	6a3b      	ldr	r3, [r7, #32]
 80052b2:	f043 0308 	orr.w	r3, r3, #8
 80052b6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80052c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00b      	beq.n	80052ea <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80052d2:	6a3b      	ldr	r3, [r7, #32]
 80052d4:	f043 0302 	orr.w	r3, r3, #2
 80052d8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80052ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d01c      	beq.n	800532c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80052f2:	68f8      	ldr	r0, [r7, #12]
 80052f4:	f7ff fe56 	bl	8004fa4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	6859      	ldr	r1, [r3, #4]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	4b0d      	ldr	r3, [pc, #52]	; (8005338 <I2C_IsErrorOccurred+0x1d4>)
 8005304:	400b      	ands	r3, r1
 8005306:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800530c:	6a3b      	ldr	r3, [r7, #32]
 800530e:	431a      	orrs	r2, r3
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2220      	movs	r2, #32
 8005318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800532c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005330:	4618      	mov	r0, r3
 8005332:	3728      	adds	r7, #40	; 0x28
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	fe00e800 	.word	0xfe00e800

0800533c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800533c:	b480      	push	{r7}
 800533e:	b087      	sub	sp, #28
 8005340:	af00      	add	r7, sp, #0
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	607b      	str	r3, [r7, #4]
 8005346:	460b      	mov	r3, r1
 8005348:	817b      	strh	r3, [r7, #10]
 800534a:	4613      	mov	r3, r2
 800534c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800534e:	897b      	ldrh	r3, [r7, #10]
 8005350:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005354:	7a7b      	ldrb	r3, [r7, #9]
 8005356:	041b      	lsls	r3, r3, #16
 8005358:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800535c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005362:	6a3b      	ldr	r3, [r7, #32]
 8005364:	4313      	orrs	r3, r2
 8005366:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800536a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	685a      	ldr	r2, [r3, #4]
 8005372:	6a3b      	ldr	r3, [r7, #32]
 8005374:	0d5b      	lsrs	r3, r3, #21
 8005376:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800537a:	4b08      	ldr	r3, [pc, #32]	; (800539c <I2C_TransferConfig+0x60>)
 800537c:	430b      	orrs	r3, r1
 800537e:	43db      	mvns	r3, r3
 8005380:	ea02 0103 	and.w	r1, r2, r3
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	697a      	ldr	r2, [r7, #20]
 800538a:	430a      	orrs	r2, r1
 800538c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800538e:	bf00      	nop
 8005390:	371c      	adds	r7, #28
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	03ff63ff 	.word	0x03ff63ff

080053a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	2b20      	cmp	r3, #32
 80053b4:	d138      	bne.n	8005428 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d101      	bne.n	80053c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80053c0:	2302      	movs	r3, #2
 80053c2:	e032      	b.n	800542a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2224      	movs	r2, #36	; 0x24
 80053d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f022 0201 	bic.w	r2, r2, #1
 80053e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80053f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	6819      	ldr	r1, [r3, #0]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	683a      	ldr	r2, [r7, #0]
 8005400:	430a      	orrs	r2, r1
 8005402:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f042 0201 	orr.w	r2, r2, #1
 8005412:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2220      	movs	r2, #32
 8005418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005424:	2300      	movs	r3, #0
 8005426:	e000      	b.n	800542a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005428:	2302      	movs	r3, #2
  }
}
 800542a:	4618      	mov	r0, r3
 800542c:	370c      	adds	r7, #12
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr

08005436 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005436:	b480      	push	{r7}
 8005438:	b085      	sub	sp, #20
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
 800543e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005446:	b2db      	uxtb	r3, r3
 8005448:	2b20      	cmp	r3, #32
 800544a:	d139      	bne.n	80054c0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005452:	2b01      	cmp	r3, #1
 8005454:	d101      	bne.n	800545a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005456:	2302      	movs	r3, #2
 8005458:	e033      	b.n	80054c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2201      	movs	r2, #1
 800545e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2224      	movs	r2, #36	; 0x24
 8005466:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f022 0201 	bic.w	r2, r2, #1
 8005478:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005488:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	021b      	lsls	r3, r3, #8
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	4313      	orrs	r3, r2
 8005492:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f042 0201 	orr.w	r2, r2, #1
 80054aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2220      	movs	r2, #32
 80054b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80054bc:	2300      	movs	r3, #0
 80054be:	e000      	b.n	80054c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80054c0:	2302      	movs	r3, #2
  }
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3714      	adds	r7, #20
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
	...

080054d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80054d0:	b480      	push	{r7}
 80054d2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80054d4:	4b04      	ldr	r3, [pc, #16]	; (80054e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80054dc:	4618      	mov	r0, r3
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	40007000 	.word	0x40007000

080054ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b085      	sub	sp, #20
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054fa:	d130      	bne.n	800555e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80054fc:	4b23      	ldr	r3, [pc, #140]	; (800558c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005504:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005508:	d038      	beq.n	800557c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800550a:	4b20      	ldr	r3, [pc, #128]	; (800558c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005512:	4a1e      	ldr	r2, [pc, #120]	; (800558c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005514:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005518:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800551a:	4b1d      	ldr	r3, [pc, #116]	; (8005590 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2232      	movs	r2, #50	; 0x32
 8005520:	fb02 f303 	mul.w	r3, r2, r3
 8005524:	4a1b      	ldr	r2, [pc, #108]	; (8005594 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005526:	fba2 2303 	umull	r2, r3, r2, r3
 800552a:	0c9b      	lsrs	r3, r3, #18
 800552c:	3301      	adds	r3, #1
 800552e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005530:	e002      	b.n	8005538 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	3b01      	subs	r3, #1
 8005536:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005538:	4b14      	ldr	r3, [pc, #80]	; (800558c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800553a:	695b      	ldr	r3, [r3, #20]
 800553c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005540:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005544:	d102      	bne.n	800554c <HAL_PWREx_ControlVoltageScaling+0x60>
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d1f2      	bne.n	8005532 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800554c:	4b0f      	ldr	r3, [pc, #60]	; (800558c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800554e:	695b      	ldr	r3, [r3, #20]
 8005550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005554:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005558:	d110      	bne.n	800557c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	e00f      	b.n	800557e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800555e:	4b0b      	ldr	r3, [pc, #44]	; (800558c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005566:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800556a:	d007      	beq.n	800557c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800556c:	4b07      	ldr	r3, [pc, #28]	; (800558c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005574:	4a05      	ldr	r2, [pc, #20]	; (800558c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005576:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800557a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	3714      	adds	r7, #20
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr
 800558a:	bf00      	nop
 800558c:	40007000 	.word	0x40007000
 8005590:	20000090 	.word	0x20000090
 8005594:	431bde83 	.word	0x431bde83

08005598 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b088      	sub	sp, #32
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d101      	bne.n	80055aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e3d8      	b.n	8005d5c <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055aa:	4b97      	ldr	r3, [pc, #604]	; (8005808 <HAL_RCC_OscConfig+0x270>)
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	f003 030c 	and.w	r3, r3, #12
 80055b2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80055b4:	4b94      	ldr	r3, [pc, #592]	; (8005808 <HAL_RCC_OscConfig+0x270>)
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	f003 0303 	and.w	r3, r3, #3
 80055bc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0310 	and.w	r3, r3, #16
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	f000 80e4 	beq.w	8005794 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d007      	beq.n	80055e2 <HAL_RCC_OscConfig+0x4a>
 80055d2:	69bb      	ldr	r3, [r7, #24]
 80055d4:	2b0c      	cmp	r3, #12
 80055d6:	f040 808b 	bne.w	80056f0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	2b01      	cmp	r3, #1
 80055de:	f040 8087 	bne.w	80056f0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80055e2:	4b89      	ldr	r3, [pc, #548]	; (8005808 <HAL_RCC_OscConfig+0x270>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0302 	and.w	r3, r3, #2
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d005      	beq.n	80055fa <HAL_RCC_OscConfig+0x62>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	699b      	ldr	r3, [r3, #24]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d101      	bne.n	80055fa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e3b0      	b.n	8005d5c <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a1a      	ldr	r2, [r3, #32]
 80055fe:	4b82      	ldr	r3, [pc, #520]	; (8005808 <HAL_RCC_OscConfig+0x270>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0308 	and.w	r3, r3, #8
 8005606:	2b00      	cmp	r3, #0
 8005608:	d004      	beq.n	8005614 <HAL_RCC_OscConfig+0x7c>
 800560a:	4b7f      	ldr	r3, [pc, #508]	; (8005808 <HAL_RCC_OscConfig+0x270>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005612:	e005      	b.n	8005620 <HAL_RCC_OscConfig+0x88>
 8005614:	4b7c      	ldr	r3, [pc, #496]	; (8005808 <HAL_RCC_OscConfig+0x270>)
 8005616:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800561a:	091b      	lsrs	r3, r3, #4
 800561c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005620:	4293      	cmp	r3, r2
 8005622:	d223      	bcs.n	800566c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a1b      	ldr	r3, [r3, #32]
 8005628:	4618      	mov	r0, r3
 800562a:	f000 fd43 	bl	80060b4 <RCC_SetFlashLatencyFromMSIRange>
 800562e:	4603      	mov	r3, r0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d001      	beq.n	8005638 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	e391      	b.n	8005d5c <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005638:	4b73      	ldr	r3, [pc, #460]	; (8005808 <HAL_RCC_OscConfig+0x270>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a72      	ldr	r2, [pc, #456]	; (8005808 <HAL_RCC_OscConfig+0x270>)
 800563e:	f043 0308 	orr.w	r3, r3, #8
 8005642:	6013      	str	r3, [r2, #0]
 8005644:	4b70      	ldr	r3, [pc, #448]	; (8005808 <HAL_RCC_OscConfig+0x270>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a1b      	ldr	r3, [r3, #32]
 8005650:	496d      	ldr	r1, [pc, #436]	; (8005808 <HAL_RCC_OscConfig+0x270>)
 8005652:	4313      	orrs	r3, r2
 8005654:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005656:	4b6c      	ldr	r3, [pc, #432]	; (8005808 <HAL_RCC_OscConfig+0x270>)
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	69db      	ldr	r3, [r3, #28]
 8005662:	021b      	lsls	r3, r3, #8
 8005664:	4968      	ldr	r1, [pc, #416]	; (8005808 <HAL_RCC_OscConfig+0x270>)
 8005666:	4313      	orrs	r3, r2
 8005668:	604b      	str	r3, [r1, #4]
 800566a:	e025      	b.n	80056b8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800566c:	4b66      	ldr	r3, [pc, #408]	; (8005808 <HAL_RCC_OscConfig+0x270>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a65      	ldr	r2, [pc, #404]	; (8005808 <HAL_RCC_OscConfig+0x270>)
 8005672:	f043 0308 	orr.w	r3, r3, #8
 8005676:	6013      	str	r3, [r2, #0]
 8005678:	4b63      	ldr	r3, [pc, #396]	; (8005808 <HAL_RCC_OscConfig+0x270>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6a1b      	ldr	r3, [r3, #32]
 8005684:	4960      	ldr	r1, [pc, #384]	; (8005808 <HAL_RCC_OscConfig+0x270>)
 8005686:	4313      	orrs	r3, r2
 8005688:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800568a:	4b5f      	ldr	r3, [pc, #380]	; (8005808 <HAL_RCC_OscConfig+0x270>)
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	69db      	ldr	r3, [r3, #28]
 8005696:	021b      	lsls	r3, r3, #8
 8005698:	495b      	ldr	r1, [pc, #364]	; (8005808 <HAL_RCC_OscConfig+0x270>)
 800569a:	4313      	orrs	r3, r2
 800569c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d109      	bne.n	80056b8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a1b      	ldr	r3, [r3, #32]
 80056a8:	4618      	mov	r0, r3
 80056aa:	f000 fd03 	bl	80060b4 <RCC_SetFlashLatencyFromMSIRange>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d001      	beq.n	80056b8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e351      	b.n	8005d5c <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80056b8:	f000 fc38 	bl	8005f2c <HAL_RCC_GetSysClockFreq>
 80056bc:	4602      	mov	r2, r0
 80056be:	4b52      	ldr	r3, [pc, #328]	; (8005808 <HAL_RCC_OscConfig+0x270>)
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	091b      	lsrs	r3, r3, #4
 80056c4:	f003 030f 	and.w	r3, r3, #15
 80056c8:	4950      	ldr	r1, [pc, #320]	; (800580c <HAL_RCC_OscConfig+0x274>)
 80056ca:	5ccb      	ldrb	r3, [r1, r3]
 80056cc:	f003 031f 	and.w	r3, r3, #31
 80056d0:	fa22 f303 	lsr.w	r3, r2, r3
 80056d4:	4a4e      	ldr	r2, [pc, #312]	; (8005810 <HAL_RCC_OscConfig+0x278>)
 80056d6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80056d8:	4b4e      	ldr	r3, [pc, #312]	; (8005814 <HAL_RCC_OscConfig+0x27c>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4618      	mov	r0, r3
 80056de:	f7fd f8ab 	bl	8002838 <HAL_InitTick>
 80056e2:	4603      	mov	r3, r0
 80056e4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80056e6:	7bfb      	ldrb	r3, [r7, #15]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d052      	beq.n	8005792 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80056ec:	7bfb      	ldrb	r3, [r7, #15]
 80056ee:	e335      	b.n	8005d5c <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	699b      	ldr	r3, [r3, #24]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d032      	beq.n	800575e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80056f8:	4b43      	ldr	r3, [pc, #268]	; (8005808 <HAL_RCC_OscConfig+0x270>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a42      	ldr	r2, [pc, #264]	; (8005808 <HAL_RCC_OscConfig+0x270>)
 80056fe:	f043 0301 	orr.w	r3, r3, #1
 8005702:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005704:	f7fd f8e8 	bl	80028d8 <HAL_GetTick>
 8005708:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800570a:	e008      	b.n	800571e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800570c:	f7fd f8e4 	bl	80028d8 <HAL_GetTick>
 8005710:	4602      	mov	r2, r0
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	2b02      	cmp	r3, #2
 8005718:	d901      	bls.n	800571e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	e31e      	b.n	8005d5c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800571e:	4b3a      	ldr	r3, [pc, #232]	; (8005808 <HAL_RCC_OscConfig+0x270>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0302 	and.w	r3, r3, #2
 8005726:	2b00      	cmp	r3, #0
 8005728:	d0f0      	beq.n	800570c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800572a:	4b37      	ldr	r3, [pc, #220]	; (8005808 <HAL_RCC_OscConfig+0x270>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a36      	ldr	r2, [pc, #216]	; (8005808 <HAL_RCC_OscConfig+0x270>)
 8005730:	f043 0308 	orr.w	r3, r3, #8
 8005734:	6013      	str	r3, [r2, #0]
 8005736:	4b34      	ldr	r3, [pc, #208]	; (8005808 <HAL_RCC_OscConfig+0x270>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a1b      	ldr	r3, [r3, #32]
 8005742:	4931      	ldr	r1, [pc, #196]	; (8005808 <HAL_RCC_OscConfig+0x270>)
 8005744:	4313      	orrs	r3, r2
 8005746:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005748:	4b2f      	ldr	r3, [pc, #188]	; (8005808 <HAL_RCC_OscConfig+0x270>)
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	69db      	ldr	r3, [r3, #28]
 8005754:	021b      	lsls	r3, r3, #8
 8005756:	492c      	ldr	r1, [pc, #176]	; (8005808 <HAL_RCC_OscConfig+0x270>)
 8005758:	4313      	orrs	r3, r2
 800575a:	604b      	str	r3, [r1, #4]
 800575c:	e01a      	b.n	8005794 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800575e:	4b2a      	ldr	r3, [pc, #168]	; (8005808 <HAL_RCC_OscConfig+0x270>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a29      	ldr	r2, [pc, #164]	; (8005808 <HAL_RCC_OscConfig+0x270>)
 8005764:	f023 0301 	bic.w	r3, r3, #1
 8005768:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800576a:	f7fd f8b5 	bl	80028d8 <HAL_GetTick>
 800576e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005770:	e008      	b.n	8005784 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005772:	f7fd f8b1 	bl	80028d8 <HAL_GetTick>
 8005776:	4602      	mov	r2, r0
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	2b02      	cmp	r3, #2
 800577e:	d901      	bls.n	8005784 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005780:	2303      	movs	r3, #3
 8005782:	e2eb      	b.n	8005d5c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005784:	4b20      	ldr	r3, [pc, #128]	; (8005808 <HAL_RCC_OscConfig+0x270>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 0302 	and.w	r3, r3, #2
 800578c:	2b00      	cmp	r3, #0
 800578e:	d1f0      	bne.n	8005772 <HAL_RCC_OscConfig+0x1da>
 8005790:	e000      	b.n	8005794 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005792:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0301 	and.w	r3, r3, #1
 800579c:	2b00      	cmp	r3, #0
 800579e:	d074      	beq.n	800588a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	2b08      	cmp	r3, #8
 80057a4:	d005      	beq.n	80057b2 <HAL_RCC_OscConfig+0x21a>
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	2b0c      	cmp	r3, #12
 80057aa:	d10e      	bne.n	80057ca <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	2b03      	cmp	r3, #3
 80057b0:	d10b      	bne.n	80057ca <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057b2:	4b15      	ldr	r3, [pc, #84]	; (8005808 <HAL_RCC_OscConfig+0x270>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d064      	beq.n	8005888 <HAL_RCC_OscConfig+0x2f0>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d160      	bne.n	8005888 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e2c8      	b.n	8005d5c <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057d2:	d106      	bne.n	80057e2 <HAL_RCC_OscConfig+0x24a>
 80057d4:	4b0c      	ldr	r3, [pc, #48]	; (8005808 <HAL_RCC_OscConfig+0x270>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a0b      	ldr	r2, [pc, #44]	; (8005808 <HAL_RCC_OscConfig+0x270>)
 80057da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057de:	6013      	str	r3, [r2, #0]
 80057e0:	e026      	b.n	8005830 <HAL_RCC_OscConfig+0x298>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057ea:	d115      	bne.n	8005818 <HAL_RCC_OscConfig+0x280>
 80057ec:	4b06      	ldr	r3, [pc, #24]	; (8005808 <HAL_RCC_OscConfig+0x270>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a05      	ldr	r2, [pc, #20]	; (8005808 <HAL_RCC_OscConfig+0x270>)
 80057f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057f6:	6013      	str	r3, [r2, #0]
 80057f8:	4b03      	ldr	r3, [pc, #12]	; (8005808 <HAL_RCC_OscConfig+0x270>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a02      	ldr	r2, [pc, #8]	; (8005808 <HAL_RCC_OscConfig+0x270>)
 80057fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005802:	6013      	str	r3, [r2, #0]
 8005804:	e014      	b.n	8005830 <HAL_RCC_OscConfig+0x298>
 8005806:	bf00      	nop
 8005808:	40021000 	.word	0x40021000
 800580c:	0800e4bc 	.word	0x0800e4bc
 8005810:	20000090 	.word	0x20000090
 8005814:	2000009c 	.word	0x2000009c
 8005818:	4ba0      	ldr	r3, [pc, #640]	; (8005a9c <HAL_RCC_OscConfig+0x504>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a9f      	ldr	r2, [pc, #636]	; (8005a9c <HAL_RCC_OscConfig+0x504>)
 800581e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005822:	6013      	str	r3, [r2, #0]
 8005824:	4b9d      	ldr	r3, [pc, #628]	; (8005a9c <HAL_RCC_OscConfig+0x504>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a9c      	ldr	r2, [pc, #624]	; (8005a9c <HAL_RCC_OscConfig+0x504>)
 800582a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800582e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d013      	beq.n	8005860 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005838:	f7fd f84e 	bl	80028d8 <HAL_GetTick>
 800583c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800583e:	e008      	b.n	8005852 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005840:	f7fd f84a 	bl	80028d8 <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	2b64      	cmp	r3, #100	; 0x64
 800584c:	d901      	bls.n	8005852 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e284      	b.n	8005d5c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005852:	4b92      	ldr	r3, [pc, #584]	; (8005a9c <HAL_RCC_OscConfig+0x504>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d0f0      	beq.n	8005840 <HAL_RCC_OscConfig+0x2a8>
 800585e:	e014      	b.n	800588a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005860:	f7fd f83a 	bl	80028d8 <HAL_GetTick>
 8005864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005866:	e008      	b.n	800587a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005868:	f7fd f836 	bl	80028d8 <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	2b64      	cmp	r3, #100	; 0x64
 8005874:	d901      	bls.n	800587a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e270      	b.n	8005d5c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800587a:	4b88      	ldr	r3, [pc, #544]	; (8005a9c <HAL_RCC_OscConfig+0x504>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005882:	2b00      	cmp	r3, #0
 8005884:	d1f0      	bne.n	8005868 <HAL_RCC_OscConfig+0x2d0>
 8005886:	e000      	b.n	800588a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005888:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0302 	and.w	r3, r3, #2
 8005892:	2b00      	cmp	r3, #0
 8005894:	d060      	beq.n	8005958 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	2b04      	cmp	r3, #4
 800589a:	d005      	beq.n	80058a8 <HAL_RCC_OscConfig+0x310>
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	2b0c      	cmp	r3, #12
 80058a0:	d119      	bne.n	80058d6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	d116      	bne.n	80058d6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80058a8:	4b7c      	ldr	r3, [pc, #496]	; (8005a9c <HAL_RCC_OscConfig+0x504>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d005      	beq.n	80058c0 <HAL_RCC_OscConfig+0x328>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d101      	bne.n	80058c0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	e24d      	b.n	8005d5c <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058c0:	4b76      	ldr	r3, [pc, #472]	; (8005a9c <HAL_RCC_OscConfig+0x504>)
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	691b      	ldr	r3, [r3, #16]
 80058cc:	061b      	lsls	r3, r3, #24
 80058ce:	4973      	ldr	r1, [pc, #460]	; (8005a9c <HAL_RCC_OscConfig+0x504>)
 80058d0:	4313      	orrs	r3, r2
 80058d2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80058d4:	e040      	b.n	8005958 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d023      	beq.n	8005926 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058de:	4b6f      	ldr	r3, [pc, #444]	; (8005a9c <HAL_RCC_OscConfig+0x504>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a6e      	ldr	r2, [pc, #440]	; (8005a9c <HAL_RCC_OscConfig+0x504>)
 80058e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ea:	f7fc fff5 	bl	80028d8 <HAL_GetTick>
 80058ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058f0:	e008      	b.n	8005904 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058f2:	f7fc fff1 	bl	80028d8 <HAL_GetTick>
 80058f6:	4602      	mov	r2, r0
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	1ad3      	subs	r3, r2, r3
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	d901      	bls.n	8005904 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005900:	2303      	movs	r3, #3
 8005902:	e22b      	b.n	8005d5c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005904:	4b65      	ldr	r3, [pc, #404]	; (8005a9c <HAL_RCC_OscConfig+0x504>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800590c:	2b00      	cmp	r3, #0
 800590e:	d0f0      	beq.n	80058f2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005910:	4b62      	ldr	r3, [pc, #392]	; (8005a9c <HAL_RCC_OscConfig+0x504>)
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	061b      	lsls	r3, r3, #24
 800591e:	495f      	ldr	r1, [pc, #380]	; (8005a9c <HAL_RCC_OscConfig+0x504>)
 8005920:	4313      	orrs	r3, r2
 8005922:	604b      	str	r3, [r1, #4]
 8005924:	e018      	b.n	8005958 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005926:	4b5d      	ldr	r3, [pc, #372]	; (8005a9c <HAL_RCC_OscConfig+0x504>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a5c      	ldr	r2, [pc, #368]	; (8005a9c <HAL_RCC_OscConfig+0x504>)
 800592c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005930:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005932:	f7fc ffd1 	bl	80028d8 <HAL_GetTick>
 8005936:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005938:	e008      	b.n	800594c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800593a:	f7fc ffcd 	bl	80028d8 <HAL_GetTick>
 800593e:	4602      	mov	r2, r0
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	2b02      	cmp	r3, #2
 8005946:	d901      	bls.n	800594c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005948:	2303      	movs	r3, #3
 800594a:	e207      	b.n	8005d5c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800594c:	4b53      	ldr	r3, [pc, #332]	; (8005a9c <HAL_RCC_OscConfig+0x504>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005954:	2b00      	cmp	r3, #0
 8005956:	d1f0      	bne.n	800593a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 0308 	and.w	r3, r3, #8
 8005960:	2b00      	cmp	r3, #0
 8005962:	d03c      	beq.n	80059de <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	695b      	ldr	r3, [r3, #20]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d01c      	beq.n	80059a6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800596c:	4b4b      	ldr	r3, [pc, #300]	; (8005a9c <HAL_RCC_OscConfig+0x504>)
 800596e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005972:	4a4a      	ldr	r2, [pc, #296]	; (8005a9c <HAL_RCC_OscConfig+0x504>)
 8005974:	f043 0301 	orr.w	r3, r3, #1
 8005978:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800597c:	f7fc ffac 	bl	80028d8 <HAL_GetTick>
 8005980:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005982:	e008      	b.n	8005996 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005984:	f7fc ffa8 	bl	80028d8 <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	2b02      	cmp	r3, #2
 8005990:	d901      	bls.n	8005996 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e1e2      	b.n	8005d5c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005996:	4b41      	ldr	r3, [pc, #260]	; (8005a9c <HAL_RCC_OscConfig+0x504>)
 8005998:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800599c:	f003 0302 	and.w	r3, r3, #2
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d0ef      	beq.n	8005984 <HAL_RCC_OscConfig+0x3ec>
 80059a4:	e01b      	b.n	80059de <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059a6:	4b3d      	ldr	r3, [pc, #244]	; (8005a9c <HAL_RCC_OscConfig+0x504>)
 80059a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059ac:	4a3b      	ldr	r2, [pc, #236]	; (8005a9c <HAL_RCC_OscConfig+0x504>)
 80059ae:	f023 0301 	bic.w	r3, r3, #1
 80059b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059b6:	f7fc ff8f 	bl	80028d8 <HAL_GetTick>
 80059ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80059bc:	e008      	b.n	80059d0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059be:	f7fc ff8b 	bl	80028d8 <HAL_GetTick>
 80059c2:	4602      	mov	r2, r0
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	1ad3      	subs	r3, r2, r3
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d901      	bls.n	80059d0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80059cc:	2303      	movs	r3, #3
 80059ce:	e1c5      	b.n	8005d5c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80059d0:	4b32      	ldr	r3, [pc, #200]	; (8005a9c <HAL_RCC_OscConfig+0x504>)
 80059d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059d6:	f003 0302 	and.w	r3, r3, #2
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d1ef      	bne.n	80059be <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 0304 	and.w	r3, r3, #4
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	f000 80a6 	beq.w	8005b38 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059ec:	2300      	movs	r3, #0
 80059ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80059f0:	4b2a      	ldr	r3, [pc, #168]	; (8005a9c <HAL_RCC_OscConfig+0x504>)
 80059f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d10d      	bne.n	8005a18 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059fc:	4b27      	ldr	r3, [pc, #156]	; (8005a9c <HAL_RCC_OscConfig+0x504>)
 80059fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a00:	4a26      	ldr	r2, [pc, #152]	; (8005a9c <HAL_RCC_OscConfig+0x504>)
 8005a02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a06:	6593      	str	r3, [r2, #88]	; 0x58
 8005a08:	4b24      	ldr	r3, [pc, #144]	; (8005a9c <HAL_RCC_OscConfig+0x504>)
 8005a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a10:	60bb      	str	r3, [r7, #8]
 8005a12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a14:	2301      	movs	r3, #1
 8005a16:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a18:	4b21      	ldr	r3, [pc, #132]	; (8005aa0 <HAL_RCC_OscConfig+0x508>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d118      	bne.n	8005a56 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a24:	4b1e      	ldr	r3, [pc, #120]	; (8005aa0 <HAL_RCC_OscConfig+0x508>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a1d      	ldr	r2, [pc, #116]	; (8005aa0 <HAL_RCC_OscConfig+0x508>)
 8005a2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a30:	f7fc ff52 	bl	80028d8 <HAL_GetTick>
 8005a34:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a36:	e008      	b.n	8005a4a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a38:	f7fc ff4e 	bl	80028d8 <HAL_GetTick>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	2b02      	cmp	r3, #2
 8005a44:	d901      	bls.n	8005a4a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005a46:	2303      	movs	r3, #3
 8005a48:	e188      	b.n	8005d5c <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a4a:	4b15      	ldr	r3, [pc, #84]	; (8005aa0 <HAL_RCC_OscConfig+0x508>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d0f0      	beq.n	8005a38 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d108      	bne.n	8005a70 <HAL_RCC_OscConfig+0x4d8>
 8005a5e:	4b0f      	ldr	r3, [pc, #60]	; (8005a9c <HAL_RCC_OscConfig+0x504>)
 8005a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a64:	4a0d      	ldr	r2, [pc, #52]	; (8005a9c <HAL_RCC_OscConfig+0x504>)
 8005a66:	f043 0301 	orr.w	r3, r3, #1
 8005a6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005a6e:	e029      	b.n	8005ac4 <HAL_RCC_OscConfig+0x52c>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	2b05      	cmp	r3, #5
 8005a76:	d115      	bne.n	8005aa4 <HAL_RCC_OscConfig+0x50c>
 8005a78:	4b08      	ldr	r3, [pc, #32]	; (8005a9c <HAL_RCC_OscConfig+0x504>)
 8005a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a7e:	4a07      	ldr	r2, [pc, #28]	; (8005a9c <HAL_RCC_OscConfig+0x504>)
 8005a80:	f043 0304 	orr.w	r3, r3, #4
 8005a84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005a88:	4b04      	ldr	r3, [pc, #16]	; (8005a9c <HAL_RCC_OscConfig+0x504>)
 8005a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a8e:	4a03      	ldr	r2, [pc, #12]	; (8005a9c <HAL_RCC_OscConfig+0x504>)
 8005a90:	f043 0301 	orr.w	r3, r3, #1
 8005a94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005a98:	e014      	b.n	8005ac4 <HAL_RCC_OscConfig+0x52c>
 8005a9a:	bf00      	nop
 8005a9c:	40021000 	.word	0x40021000
 8005aa0:	40007000 	.word	0x40007000
 8005aa4:	4b91      	ldr	r3, [pc, #580]	; (8005cec <HAL_RCC_OscConfig+0x754>)
 8005aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aaa:	4a90      	ldr	r2, [pc, #576]	; (8005cec <HAL_RCC_OscConfig+0x754>)
 8005aac:	f023 0301 	bic.w	r3, r3, #1
 8005ab0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ab4:	4b8d      	ldr	r3, [pc, #564]	; (8005cec <HAL_RCC_OscConfig+0x754>)
 8005ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aba:	4a8c      	ldr	r2, [pc, #560]	; (8005cec <HAL_RCC_OscConfig+0x754>)
 8005abc:	f023 0304 	bic.w	r3, r3, #4
 8005ac0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d016      	beq.n	8005afa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005acc:	f7fc ff04 	bl	80028d8 <HAL_GetTick>
 8005ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ad2:	e00a      	b.n	8005aea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ad4:	f7fc ff00 	bl	80028d8 <HAL_GetTick>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d901      	bls.n	8005aea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	e138      	b.n	8005d5c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005aea:	4b80      	ldr	r3, [pc, #512]	; (8005cec <HAL_RCC_OscConfig+0x754>)
 8005aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005af0:	f003 0302 	and.w	r3, r3, #2
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d0ed      	beq.n	8005ad4 <HAL_RCC_OscConfig+0x53c>
 8005af8:	e015      	b.n	8005b26 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005afa:	f7fc feed 	bl	80028d8 <HAL_GetTick>
 8005afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b00:	e00a      	b.n	8005b18 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b02:	f7fc fee9 	bl	80028d8 <HAL_GetTick>
 8005b06:	4602      	mov	r2, r0
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	1ad3      	subs	r3, r2, r3
 8005b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d901      	bls.n	8005b18 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005b14:	2303      	movs	r3, #3
 8005b16:	e121      	b.n	8005d5c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b18:	4b74      	ldr	r3, [pc, #464]	; (8005cec <HAL_RCC_OscConfig+0x754>)
 8005b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b1e:	f003 0302 	and.w	r3, r3, #2
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d1ed      	bne.n	8005b02 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b26:	7ffb      	ldrb	r3, [r7, #31]
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d105      	bne.n	8005b38 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b2c:	4b6f      	ldr	r3, [pc, #444]	; (8005cec <HAL_RCC_OscConfig+0x754>)
 8005b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b30:	4a6e      	ldr	r2, [pc, #440]	; (8005cec <HAL_RCC_OscConfig+0x754>)
 8005b32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b36:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	f000 810c 	beq.w	8005d5a <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b46:	2b02      	cmp	r3, #2
 8005b48:	f040 80d4 	bne.w	8005cf4 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005b4c:	4b67      	ldr	r3, [pc, #412]	; (8005cec <HAL_RCC_OscConfig+0x754>)
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	f003 0203 	and.w	r2, r3, #3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d130      	bne.n	8005bc2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d127      	bne.n	8005bc2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b7c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d11f      	bne.n	8005bc2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b8c:	2a07      	cmp	r2, #7
 8005b8e:	bf14      	ite	ne
 8005b90:	2201      	movne	r2, #1
 8005b92:	2200      	moveq	r2, #0
 8005b94:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d113      	bne.n	8005bc2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ba4:	085b      	lsrs	r3, r3, #1
 8005ba6:	3b01      	subs	r3, #1
 8005ba8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d109      	bne.n	8005bc2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb8:	085b      	lsrs	r3, r3, #1
 8005bba:	3b01      	subs	r3, #1
 8005bbc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d06e      	beq.n	8005ca0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	2b0c      	cmp	r3, #12
 8005bc6:	d069      	beq.n	8005c9c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005bc8:	4b48      	ldr	r3, [pc, #288]	; (8005cec <HAL_RCC_OscConfig+0x754>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d105      	bne.n	8005be0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005bd4:	4b45      	ldr	r3, [pc, #276]	; (8005cec <HAL_RCC_OscConfig+0x754>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d001      	beq.n	8005be4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	e0bb      	b.n	8005d5c <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005be4:	4b41      	ldr	r3, [pc, #260]	; (8005cec <HAL_RCC_OscConfig+0x754>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a40      	ldr	r2, [pc, #256]	; (8005cec <HAL_RCC_OscConfig+0x754>)
 8005bea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bee:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005bf0:	f7fc fe72 	bl	80028d8 <HAL_GetTick>
 8005bf4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bf6:	e008      	b.n	8005c0a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bf8:	f7fc fe6e 	bl	80028d8 <HAL_GetTick>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	2b02      	cmp	r3, #2
 8005c04:	d901      	bls.n	8005c0a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005c06:	2303      	movs	r3, #3
 8005c08:	e0a8      	b.n	8005d5c <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c0a:	4b38      	ldr	r3, [pc, #224]	; (8005cec <HAL_RCC_OscConfig+0x754>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d1f0      	bne.n	8005bf8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c16:	4b35      	ldr	r3, [pc, #212]	; (8005cec <HAL_RCC_OscConfig+0x754>)
 8005c18:	68da      	ldr	r2, [r3, #12]
 8005c1a:	4b35      	ldr	r3, [pc, #212]	; (8005cf0 <HAL_RCC_OscConfig+0x758>)
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005c26:	3a01      	subs	r2, #1
 8005c28:	0112      	lsls	r2, r2, #4
 8005c2a:	4311      	orrs	r1, r2
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005c30:	0212      	lsls	r2, r2, #8
 8005c32:	4311      	orrs	r1, r2
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005c38:	0852      	lsrs	r2, r2, #1
 8005c3a:	3a01      	subs	r2, #1
 8005c3c:	0552      	lsls	r2, r2, #21
 8005c3e:	4311      	orrs	r1, r2
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005c44:	0852      	lsrs	r2, r2, #1
 8005c46:	3a01      	subs	r2, #1
 8005c48:	0652      	lsls	r2, r2, #25
 8005c4a:	4311      	orrs	r1, r2
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005c50:	0912      	lsrs	r2, r2, #4
 8005c52:	0452      	lsls	r2, r2, #17
 8005c54:	430a      	orrs	r2, r1
 8005c56:	4925      	ldr	r1, [pc, #148]	; (8005cec <HAL_RCC_OscConfig+0x754>)
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005c5c:	4b23      	ldr	r3, [pc, #140]	; (8005cec <HAL_RCC_OscConfig+0x754>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a22      	ldr	r2, [pc, #136]	; (8005cec <HAL_RCC_OscConfig+0x754>)
 8005c62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c66:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005c68:	4b20      	ldr	r3, [pc, #128]	; (8005cec <HAL_RCC_OscConfig+0x754>)
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	4a1f      	ldr	r2, [pc, #124]	; (8005cec <HAL_RCC_OscConfig+0x754>)
 8005c6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c72:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005c74:	f7fc fe30 	bl	80028d8 <HAL_GetTick>
 8005c78:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c7a:	e008      	b.n	8005c8e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c7c:	f7fc fe2c 	bl	80028d8 <HAL_GetTick>
 8005c80:	4602      	mov	r2, r0
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	2b02      	cmp	r3, #2
 8005c88:	d901      	bls.n	8005c8e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	e066      	b.n	8005d5c <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c8e:	4b17      	ldr	r3, [pc, #92]	; (8005cec <HAL_RCC_OscConfig+0x754>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d0f0      	beq.n	8005c7c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005c9a:	e05e      	b.n	8005d5a <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e05d      	b.n	8005d5c <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ca0:	4b12      	ldr	r3, [pc, #72]	; (8005cec <HAL_RCC_OscConfig+0x754>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d156      	bne.n	8005d5a <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005cac:	4b0f      	ldr	r3, [pc, #60]	; (8005cec <HAL_RCC_OscConfig+0x754>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a0e      	ldr	r2, [pc, #56]	; (8005cec <HAL_RCC_OscConfig+0x754>)
 8005cb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005cb6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005cb8:	4b0c      	ldr	r3, [pc, #48]	; (8005cec <HAL_RCC_OscConfig+0x754>)
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	4a0b      	ldr	r2, [pc, #44]	; (8005cec <HAL_RCC_OscConfig+0x754>)
 8005cbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005cc2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005cc4:	f7fc fe08 	bl	80028d8 <HAL_GetTick>
 8005cc8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cca:	e008      	b.n	8005cde <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ccc:	f7fc fe04 	bl	80028d8 <HAL_GetTick>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	2b02      	cmp	r3, #2
 8005cd8:	d901      	bls.n	8005cde <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005cda:	2303      	movs	r3, #3
 8005cdc:	e03e      	b.n	8005d5c <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cde:	4b03      	ldr	r3, [pc, #12]	; (8005cec <HAL_RCC_OscConfig+0x754>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d0f0      	beq.n	8005ccc <HAL_RCC_OscConfig+0x734>
 8005cea:	e036      	b.n	8005d5a <HAL_RCC_OscConfig+0x7c2>
 8005cec:	40021000 	.word	0x40021000
 8005cf0:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	2b0c      	cmp	r3, #12
 8005cf8:	d02d      	beq.n	8005d56 <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cfa:	4b1a      	ldr	r3, [pc, #104]	; (8005d64 <HAL_RCC_OscConfig+0x7cc>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a19      	ldr	r2, [pc, #100]	; (8005d64 <HAL_RCC_OscConfig+0x7cc>)
 8005d00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d04:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8005d06:	4b17      	ldr	r3, [pc, #92]	; (8005d64 <HAL_RCC_OscConfig+0x7cc>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d105      	bne.n	8005d1e <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005d12:	4b14      	ldr	r3, [pc, #80]	; (8005d64 <HAL_RCC_OscConfig+0x7cc>)
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	4a13      	ldr	r2, [pc, #76]	; (8005d64 <HAL_RCC_OscConfig+0x7cc>)
 8005d18:	f023 0303 	bic.w	r3, r3, #3
 8005d1c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005d1e:	4b11      	ldr	r3, [pc, #68]	; (8005d64 <HAL_RCC_OscConfig+0x7cc>)
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	4a10      	ldr	r2, [pc, #64]	; (8005d64 <HAL_RCC_OscConfig+0x7cc>)
 8005d24:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005d28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d2c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d2e:	f7fc fdd3 	bl	80028d8 <HAL_GetTick>
 8005d32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d34:	e008      	b.n	8005d48 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d36:	f7fc fdcf 	bl	80028d8 <HAL_GetTick>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	1ad3      	subs	r3, r2, r3
 8005d40:	2b02      	cmp	r3, #2
 8005d42:	d901      	bls.n	8005d48 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8005d44:	2303      	movs	r3, #3
 8005d46:	e009      	b.n	8005d5c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d48:	4b06      	ldr	r3, [pc, #24]	; (8005d64 <HAL_RCC_OscConfig+0x7cc>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d1f0      	bne.n	8005d36 <HAL_RCC_OscConfig+0x79e>
 8005d54:	e001      	b.n	8005d5a <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	e000      	b.n	8005d5c <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 8005d5a:	2300      	movs	r3, #0
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3720      	adds	r7, #32
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	40021000 	.word	0x40021000

08005d68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d101      	bne.n	8005d7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e0c8      	b.n	8005f0e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d7c:	4b66      	ldr	r3, [pc, #408]	; (8005f18 <HAL_RCC_ClockConfig+0x1b0>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 0307 	and.w	r3, r3, #7
 8005d84:	683a      	ldr	r2, [r7, #0]
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d910      	bls.n	8005dac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d8a:	4b63      	ldr	r3, [pc, #396]	; (8005f18 <HAL_RCC_ClockConfig+0x1b0>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f023 0207 	bic.w	r2, r3, #7
 8005d92:	4961      	ldr	r1, [pc, #388]	; (8005f18 <HAL_RCC_ClockConfig+0x1b0>)
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d9a:	4b5f      	ldr	r3, [pc, #380]	; (8005f18 <HAL_RCC_ClockConfig+0x1b0>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 0307 	and.w	r3, r3, #7
 8005da2:	683a      	ldr	r2, [r7, #0]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d001      	beq.n	8005dac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	e0b0      	b.n	8005f0e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f003 0301 	and.w	r3, r3, #1
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d04c      	beq.n	8005e52 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	2b03      	cmp	r3, #3
 8005dbe:	d107      	bne.n	8005dd0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005dc0:	4b56      	ldr	r3, [pc, #344]	; (8005f1c <HAL_RCC_ClockConfig+0x1b4>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d121      	bne.n	8005e10 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e09e      	b.n	8005f0e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	2b02      	cmp	r3, #2
 8005dd6:	d107      	bne.n	8005de8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005dd8:	4b50      	ldr	r3, [pc, #320]	; (8005f1c <HAL_RCC_ClockConfig+0x1b4>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d115      	bne.n	8005e10 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e092      	b.n	8005f0e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d107      	bne.n	8005e00 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005df0:	4b4a      	ldr	r3, [pc, #296]	; (8005f1c <HAL_RCC_ClockConfig+0x1b4>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 0302 	and.w	r3, r3, #2
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d109      	bne.n	8005e10 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e086      	b.n	8005f0e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e00:	4b46      	ldr	r3, [pc, #280]	; (8005f1c <HAL_RCC_ClockConfig+0x1b4>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d101      	bne.n	8005e10 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e07e      	b.n	8005f0e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005e10:	4b42      	ldr	r3, [pc, #264]	; (8005f1c <HAL_RCC_ClockConfig+0x1b4>)
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	f023 0203 	bic.w	r2, r3, #3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	493f      	ldr	r1, [pc, #252]	; (8005f1c <HAL_RCC_ClockConfig+0x1b4>)
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e22:	f7fc fd59 	bl	80028d8 <HAL_GetTick>
 8005e26:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e28:	e00a      	b.n	8005e40 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e2a:	f7fc fd55 	bl	80028d8 <HAL_GetTick>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	1ad3      	subs	r3, r2, r3
 8005e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d901      	bls.n	8005e40 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005e3c:	2303      	movs	r3, #3
 8005e3e:	e066      	b.n	8005f0e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e40:	4b36      	ldr	r3, [pc, #216]	; (8005f1c <HAL_RCC_ClockConfig+0x1b4>)
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	f003 020c 	and.w	r2, r3, #12
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d1eb      	bne.n	8005e2a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f003 0302 	and.w	r3, r3, #2
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d008      	beq.n	8005e70 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e5e:	4b2f      	ldr	r3, [pc, #188]	; (8005f1c <HAL_RCC_ClockConfig+0x1b4>)
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	492c      	ldr	r1, [pc, #176]	; (8005f1c <HAL_RCC_ClockConfig+0x1b4>)
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e70:	4b29      	ldr	r3, [pc, #164]	; (8005f18 <HAL_RCC_ClockConfig+0x1b0>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 0307 	and.w	r3, r3, #7
 8005e78:	683a      	ldr	r2, [r7, #0]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d210      	bcs.n	8005ea0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e7e:	4b26      	ldr	r3, [pc, #152]	; (8005f18 <HAL_RCC_ClockConfig+0x1b0>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f023 0207 	bic.w	r2, r3, #7
 8005e86:	4924      	ldr	r1, [pc, #144]	; (8005f18 <HAL_RCC_ClockConfig+0x1b0>)
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e8e:	4b22      	ldr	r3, [pc, #136]	; (8005f18 <HAL_RCC_ClockConfig+0x1b0>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 0307 	and.w	r3, r3, #7
 8005e96:	683a      	ldr	r2, [r7, #0]
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d001      	beq.n	8005ea0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e036      	b.n	8005f0e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0304 	and.w	r3, r3, #4
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d008      	beq.n	8005ebe <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005eac:	4b1b      	ldr	r3, [pc, #108]	; (8005f1c <HAL_RCC_ClockConfig+0x1b4>)
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	4918      	ldr	r1, [pc, #96]	; (8005f1c <HAL_RCC_ClockConfig+0x1b4>)
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 0308 	and.w	r3, r3, #8
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d009      	beq.n	8005ede <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005eca:	4b14      	ldr	r3, [pc, #80]	; (8005f1c <HAL_RCC_ClockConfig+0x1b4>)
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	00db      	lsls	r3, r3, #3
 8005ed8:	4910      	ldr	r1, [pc, #64]	; (8005f1c <HAL_RCC_ClockConfig+0x1b4>)
 8005eda:	4313      	orrs	r3, r2
 8005edc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005ede:	f000 f825 	bl	8005f2c <HAL_RCC_GetSysClockFreq>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	4b0d      	ldr	r3, [pc, #52]	; (8005f1c <HAL_RCC_ClockConfig+0x1b4>)
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	091b      	lsrs	r3, r3, #4
 8005eea:	f003 030f 	and.w	r3, r3, #15
 8005eee:	490c      	ldr	r1, [pc, #48]	; (8005f20 <HAL_RCC_ClockConfig+0x1b8>)
 8005ef0:	5ccb      	ldrb	r3, [r1, r3]
 8005ef2:	f003 031f 	and.w	r3, r3, #31
 8005ef6:	fa22 f303 	lsr.w	r3, r2, r3
 8005efa:	4a0a      	ldr	r2, [pc, #40]	; (8005f24 <HAL_RCC_ClockConfig+0x1bc>)
 8005efc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005efe:	4b0a      	ldr	r3, [pc, #40]	; (8005f28 <HAL_RCC_ClockConfig+0x1c0>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4618      	mov	r0, r3
 8005f04:	f7fc fc98 	bl	8002838 <HAL_InitTick>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	72fb      	strb	r3, [r7, #11]

  return status;
 8005f0c:	7afb      	ldrb	r3, [r7, #11]
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3710      	adds	r7, #16
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	40022000 	.word	0x40022000
 8005f1c:	40021000 	.word	0x40021000
 8005f20:	0800e4bc 	.word	0x0800e4bc
 8005f24:	20000090 	.word	0x20000090
 8005f28:	2000009c 	.word	0x2000009c

08005f2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b089      	sub	sp, #36	; 0x24
 8005f30:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005f32:	2300      	movs	r3, #0
 8005f34:	61fb      	str	r3, [r7, #28]
 8005f36:	2300      	movs	r3, #0
 8005f38:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f3a:	4b3e      	ldr	r3, [pc, #248]	; (8006034 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	f003 030c 	and.w	r3, r3, #12
 8005f42:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f44:	4b3b      	ldr	r3, [pc, #236]	; (8006034 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	f003 0303 	and.w	r3, r3, #3
 8005f4c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d005      	beq.n	8005f60 <HAL_RCC_GetSysClockFreq+0x34>
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	2b0c      	cmp	r3, #12
 8005f58:	d121      	bne.n	8005f9e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d11e      	bne.n	8005f9e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005f60:	4b34      	ldr	r3, [pc, #208]	; (8006034 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 0308 	and.w	r3, r3, #8
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d107      	bne.n	8005f7c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005f6c:	4b31      	ldr	r3, [pc, #196]	; (8006034 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f72:	0a1b      	lsrs	r3, r3, #8
 8005f74:	f003 030f 	and.w	r3, r3, #15
 8005f78:	61fb      	str	r3, [r7, #28]
 8005f7a:	e005      	b.n	8005f88 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005f7c:	4b2d      	ldr	r3, [pc, #180]	; (8006034 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	091b      	lsrs	r3, r3, #4
 8005f82:	f003 030f 	and.w	r3, r3, #15
 8005f86:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005f88:	4a2b      	ldr	r2, [pc, #172]	; (8006038 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f90:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d10d      	bne.n	8005fb4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005f9c:	e00a      	b.n	8005fb4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	2b04      	cmp	r3, #4
 8005fa2:	d102      	bne.n	8005faa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005fa4:	4b25      	ldr	r3, [pc, #148]	; (800603c <HAL_RCC_GetSysClockFreq+0x110>)
 8005fa6:	61bb      	str	r3, [r7, #24]
 8005fa8:	e004      	b.n	8005fb4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	2b08      	cmp	r3, #8
 8005fae:	d101      	bne.n	8005fb4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005fb0:	4b23      	ldr	r3, [pc, #140]	; (8006040 <HAL_RCC_GetSysClockFreq+0x114>)
 8005fb2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	2b0c      	cmp	r3, #12
 8005fb8:	d134      	bne.n	8006024 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005fba:	4b1e      	ldr	r3, [pc, #120]	; (8006034 <HAL_RCC_GetSysClockFreq+0x108>)
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	f003 0303 	and.w	r3, r3, #3
 8005fc2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	2b02      	cmp	r3, #2
 8005fc8:	d003      	beq.n	8005fd2 <HAL_RCC_GetSysClockFreq+0xa6>
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	2b03      	cmp	r3, #3
 8005fce:	d003      	beq.n	8005fd8 <HAL_RCC_GetSysClockFreq+0xac>
 8005fd0:	e005      	b.n	8005fde <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005fd2:	4b1a      	ldr	r3, [pc, #104]	; (800603c <HAL_RCC_GetSysClockFreq+0x110>)
 8005fd4:	617b      	str	r3, [r7, #20]
      break;
 8005fd6:	e005      	b.n	8005fe4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005fd8:	4b19      	ldr	r3, [pc, #100]	; (8006040 <HAL_RCC_GetSysClockFreq+0x114>)
 8005fda:	617b      	str	r3, [r7, #20]
      break;
 8005fdc:	e002      	b.n	8005fe4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	617b      	str	r3, [r7, #20]
      break;
 8005fe2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005fe4:	4b13      	ldr	r3, [pc, #76]	; (8006034 <HAL_RCC_GetSysClockFreq+0x108>)
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	091b      	lsrs	r3, r3, #4
 8005fea:	f003 0307 	and.w	r3, r3, #7
 8005fee:	3301      	adds	r3, #1
 8005ff0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005ff2:	4b10      	ldr	r3, [pc, #64]	; (8006034 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	0a1b      	lsrs	r3, r3, #8
 8005ff8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ffc:	697a      	ldr	r2, [r7, #20]
 8005ffe:	fb03 f202 	mul.w	r2, r3, r2
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	fbb2 f3f3 	udiv	r3, r2, r3
 8006008:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800600a:	4b0a      	ldr	r3, [pc, #40]	; (8006034 <HAL_RCC_GetSysClockFreq+0x108>)
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	0e5b      	lsrs	r3, r3, #25
 8006010:	f003 0303 	and.w	r3, r3, #3
 8006014:	3301      	adds	r3, #1
 8006016:	005b      	lsls	r3, r3, #1
 8006018:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800601a:	697a      	ldr	r2, [r7, #20]
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006022:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006024:	69bb      	ldr	r3, [r7, #24]
}
 8006026:	4618      	mov	r0, r3
 8006028:	3724      	adds	r7, #36	; 0x24
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	40021000 	.word	0x40021000
 8006038:	0800e4d4 	.word	0x0800e4d4
 800603c:	00f42400 	.word	0x00f42400
 8006040:	007a1200 	.word	0x007a1200

08006044 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006044:	b480      	push	{r7}
 8006046:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006048:	4b03      	ldr	r3, [pc, #12]	; (8006058 <HAL_RCC_GetHCLKFreq+0x14>)
 800604a:	681b      	ldr	r3, [r3, #0]
}
 800604c:	4618      	mov	r0, r3
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr
 8006056:	bf00      	nop
 8006058:	20000090 	.word	0x20000090

0800605c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006060:	f7ff fff0 	bl	8006044 <HAL_RCC_GetHCLKFreq>
 8006064:	4602      	mov	r2, r0
 8006066:	4b06      	ldr	r3, [pc, #24]	; (8006080 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	0a1b      	lsrs	r3, r3, #8
 800606c:	f003 0307 	and.w	r3, r3, #7
 8006070:	4904      	ldr	r1, [pc, #16]	; (8006084 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006072:	5ccb      	ldrb	r3, [r1, r3]
 8006074:	f003 031f 	and.w	r3, r3, #31
 8006078:	fa22 f303 	lsr.w	r3, r2, r3
}
 800607c:	4618      	mov	r0, r3
 800607e:	bd80      	pop	{r7, pc}
 8006080:	40021000 	.word	0x40021000
 8006084:	0800e4cc 	.word	0x0800e4cc

08006088 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800608c:	f7ff ffda 	bl	8006044 <HAL_RCC_GetHCLKFreq>
 8006090:	4602      	mov	r2, r0
 8006092:	4b06      	ldr	r3, [pc, #24]	; (80060ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	0adb      	lsrs	r3, r3, #11
 8006098:	f003 0307 	and.w	r3, r3, #7
 800609c:	4904      	ldr	r1, [pc, #16]	; (80060b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800609e:	5ccb      	ldrb	r3, [r1, r3]
 80060a0:	f003 031f 	and.w	r3, r3, #31
 80060a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	bd80      	pop	{r7, pc}
 80060ac:	40021000 	.word	0x40021000
 80060b0:	0800e4cc 	.word	0x0800e4cc

080060b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b086      	sub	sp, #24
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80060bc:	2300      	movs	r3, #0
 80060be:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80060c0:	4b2a      	ldr	r3, [pc, #168]	; (800616c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d003      	beq.n	80060d4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80060cc:	f7ff fa00 	bl	80054d0 <HAL_PWREx_GetVoltageRange>
 80060d0:	6178      	str	r0, [r7, #20]
 80060d2:	e014      	b.n	80060fe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80060d4:	4b25      	ldr	r3, [pc, #148]	; (800616c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060d8:	4a24      	ldr	r2, [pc, #144]	; (800616c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060de:	6593      	str	r3, [r2, #88]	; 0x58
 80060e0:	4b22      	ldr	r3, [pc, #136]	; (800616c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060e8:	60fb      	str	r3, [r7, #12]
 80060ea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80060ec:	f7ff f9f0 	bl	80054d0 <HAL_PWREx_GetVoltageRange>
 80060f0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80060f2:	4b1e      	ldr	r3, [pc, #120]	; (800616c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060f6:	4a1d      	ldr	r2, [pc, #116]	; (800616c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060fc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006104:	d10b      	bne.n	800611e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2b80      	cmp	r3, #128	; 0x80
 800610a:	d919      	bls.n	8006140 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2ba0      	cmp	r3, #160	; 0xa0
 8006110:	d902      	bls.n	8006118 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006112:	2302      	movs	r3, #2
 8006114:	613b      	str	r3, [r7, #16]
 8006116:	e013      	b.n	8006140 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006118:	2301      	movs	r3, #1
 800611a:	613b      	str	r3, [r7, #16]
 800611c:	e010      	b.n	8006140 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2b80      	cmp	r3, #128	; 0x80
 8006122:	d902      	bls.n	800612a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006124:	2303      	movs	r3, #3
 8006126:	613b      	str	r3, [r7, #16]
 8006128:	e00a      	b.n	8006140 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2b80      	cmp	r3, #128	; 0x80
 800612e:	d102      	bne.n	8006136 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006130:	2302      	movs	r3, #2
 8006132:	613b      	str	r3, [r7, #16]
 8006134:	e004      	b.n	8006140 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2b70      	cmp	r3, #112	; 0x70
 800613a:	d101      	bne.n	8006140 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800613c:	2301      	movs	r3, #1
 800613e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006140:	4b0b      	ldr	r3, [pc, #44]	; (8006170 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f023 0207 	bic.w	r2, r3, #7
 8006148:	4909      	ldr	r1, [pc, #36]	; (8006170 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	4313      	orrs	r3, r2
 800614e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006150:	4b07      	ldr	r3, [pc, #28]	; (8006170 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 0307 	and.w	r3, r3, #7
 8006158:	693a      	ldr	r2, [r7, #16]
 800615a:	429a      	cmp	r2, r3
 800615c:	d001      	beq.n	8006162 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	e000      	b.n	8006164 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006162:	2300      	movs	r3, #0
}
 8006164:	4618      	mov	r0, r3
 8006166:	3718      	adds	r7, #24
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}
 800616c:	40021000 	.word	0x40021000
 8006170:	40022000 	.word	0x40022000

08006174 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b086      	sub	sp, #24
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800617c:	2300      	movs	r3, #0
 800617e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006180:	2300      	movs	r3, #0
 8006182:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800618c:	2b00      	cmp	r3, #0
 800618e:	d041      	beq.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006194:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006198:	d02a      	beq.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800619a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800619e:	d824      	bhi.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80061a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80061a4:	d008      	beq.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80061a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80061aa:	d81e      	bhi.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d00a      	beq.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80061b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061b4:	d010      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80061b6:	e018      	b.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80061b8:	4b86      	ldr	r3, [pc, #536]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	4a85      	ldr	r2, [pc, #532]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061c2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80061c4:	e015      	b.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	3304      	adds	r3, #4
 80061ca:	2100      	movs	r1, #0
 80061cc:	4618      	mov	r0, r3
 80061ce:	f000 fabb 	bl	8006748 <RCCEx_PLLSAI1_Config>
 80061d2:	4603      	mov	r3, r0
 80061d4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80061d6:	e00c      	b.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	3320      	adds	r3, #32
 80061dc:	2100      	movs	r1, #0
 80061de:	4618      	mov	r0, r3
 80061e0:	f000 fba6 	bl	8006930 <RCCEx_PLLSAI2_Config>
 80061e4:	4603      	mov	r3, r0
 80061e6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80061e8:	e003      	b.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	74fb      	strb	r3, [r7, #19]
      break;
 80061ee:	e000      	b.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80061f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061f2:	7cfb      	ldrb	r3, [r7, #19]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d10b      	bne.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80061f8:	4b76      	ldr	r3, [pc, #472]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006206:	4973      	ldr	r1, [pc, #460]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006208:	4313      	orrs	r3, r2
 800620a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800620e:	e001      	b.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006210:	7cfb      	ldrb	r3, [r7, #19]
 8006212:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800621c:	2b00      	cmp	r3, #0
 800621e:	d041      	beq.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006224:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006228:	d02a      	beq.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800622a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800622e:	d824      	bhi.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006230:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006234:	d008      	beq.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006236:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800623a:	d81e      	bhi.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800623c:	2b00      	cmp	r3, #0
 800623e:	d00a      	beq.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006240:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006244:	d010      	beq.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006246:	e018      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006248:	4b62      	ldr	r3, [pc, #392]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	4a61      	ldr	r2, [pc, #388]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800624e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006252:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006254:	e015      	b.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	3304      	adds	r3, #4
 800625a:	2100      	movs	r1, #0
 800625c:	4618      	mov	r0, r3
 800625e:	f000 fa73 	bl	8006748 <RCCEx_PLLSAI1_Config>
 8006262:	4603      	mov	r3, r0
 8006264:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006266:	e00c      	b.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	3320      	adds	r3, #32
 800626c:	2100      	movs	r1, #0
 800626e:	4618      	mov	r0, r3
 8006270:	f000 fb5e 	bl	8006930 <RCCEx_PLLSAI2_Config>
 8006274:	4603      	mov	r3, r0
 8006276:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006278:	e003      	b.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	74fb      	strb	r3, [r7, #19]
      break;
 800627e:	e000      	b.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8006280:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006282:	7cfb      	ldrb	r3, [r7, #19]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d10b      	bne.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006288:	4b52      	ldr	r3, [pc, #328]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800628a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800628e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006296:	494f      	ldr	r1, [pc, #316]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006298:	4313      	orrs	r3, r2
 800629a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800629e:	e001      	b.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062a0:	7cfb      	ldrb	r3, [r7, #19]
 80062a2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	f000 80a0 	beq.w	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80062b2:	2300      	movs	r3, #0
 80062b4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80062b6:	4b47      	ldr	r3, [pc, #284]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d101      	bne.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80062c2:	2301      	movs	r3, #1
 80062c4:	e000      	b.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80062c6:	2300      	movs	r3, #0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d00d      	beq.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062cc:	4b41      	ldr	r3, [pc, #260]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062d0:	4a40      	ldr	r2, [pc, #256]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062d6:	6593      	str	r3, [r2, #88]	; 0x58
 80062d8:	4b3e      	ldr	r3, [pc, #248]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062e0:	60bb      	str	r3, [r7, #8]
 80062e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80062e4:	2301      	movs	r3, #1
 80062e6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80062e8:	4b3b      	ldr	r3, [pc, #236]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a3a      	ldr	r2, [pc, #232]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80062ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80062f4:	f7fc faf0 	bl	80028d8 <HAL_GetTick>
 80062f8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80062fa:	e009      	b.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062fc:	f7fc faec 	bl	80028d8 <HAL_GetTick>
 8006300:	4602      	mov	r2, r0
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	1ad3      	subs	r3, r2, r3
 8006306:	2b02      	cmp	r3, #2
 8006308:	d902      	bls.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800630a:	2303      	movs	r3, #3
 800630c:	74fb      	strb	r3, [r7, #19]
        break;
 800630e:	e005      	b.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006310:	4b31      	ldr	r3, [pc, #196]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006318:	2b00      	cmp	r3, #0
 800631a:	d0ef      	beq.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800631c:	7cfb      	ldrb	r3, [r7, #19]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d15c      	bne.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006322:	4b2c      	ldr	r3, [pc, #176]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006328:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800632c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d01f      	beq.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800633a:	697a      	ldr	r2, [r7, #20]
 800633c:	429a      	cmp	r2, r3
 800633e:	d019      	beq.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006340:	4b24      	ldr	r3, [pc, #144]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006346:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800634a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800634c:	4b21      	ldr	r3, [pc, #132]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800634e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006352:	4a20      	ldr	r2, [pc, #128]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006358:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800635c:	4b1d      	ldr	r3, [pc, #116]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800635e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006362:	4a1c      	ldr	r2, [pc, #112]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006364:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006368:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800636c:	4a19      	ldr	r2, [pc, #100]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	f003 0301 	and.w	r3, r3, #1
 800637a:	2b00      	cmp	r3, #0
 800637c:	d016      	beq.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800637e:	f7fc faab 	bl	80028d8 <HAL_GetTick>
 8006382:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006384:	e00b      	b.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006386:	f7fc faa7 	bl	80028d8 <HAL_GetTick>
 800638a:	4602      	mov	r2, r0
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	1ad3      	subs	r3, r2, r3
 8006390:	f241 3288 	movw	r2, #5000	; 0x1388
 8006394:	4293      	cmp	r3, r2
 8006396:	d902      	bls.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006398:	2303      	movs	r3, #3
 800639a:	74fb      	strb	r3, [r7, #19]
            break;
 800639c:	e006      	b.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800639e:	4b0d      	ldr	r3, [pc, #52]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063a4:	f003 0302 	and.w	r3, r3, #2
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d0ec      	beq.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80063ac:	7cfb      	ldrb	r3, [r7, #19]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d10c      	bne.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80063b2:	4b08      	ldr	r3, [pc, #32]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063c2:	4904      	ldr	r1, [pc, #16]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063c4:	4313      	orrs	r3, r2
 80063c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80063ca:	e009      	b.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80063cc:	7cfb      	ldrb	r3, [r7, #19]
 80063ce:	74bb      	strb	r3, [r7, #18]
 80063d0:	e006      	b.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80063d2:	bf00      	nop
 80063d4:	40021000 	.word	0x40021000
 80063d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063dc:	7cfb      	ldrb	r3, [r7, #19]
 80063de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80063e0:	7c7b      	ldrb	r3, [r7, #17]
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d105      	bne.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063e6:	4b9e      	ldr	r3, [pc, #632]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063ea:	4a9d      	ldr	r2, [pc, #628]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063f0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 0301 	and.w	r3, r3, #1
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00a      	beq.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80063fe:	4b98      	ldr	r3, [pc, #608]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006404:	f023 0203 	bic.w	r2, r3, #3
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800640c:	4994      	ldr	r1, [pc, #592]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800640e:	4313      	orrs	r3, r2
 8006410:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 0302 	and.w	r3, r3, #2
 800641c:	2b00      	cmp	r3, #0
 800641e:	d00a      	beq.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006420:	4b8f      	ldr	r3, [pc, #572]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006426:	f023 020c 	bic.w	r2, r3, #12
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800642e:	498c      	ldr	r1, [pc, #560]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006430:	4313      	orrs	r3, r2
 8006432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f003 0304 	and.w	r3, r3, #4
 800643e:	2b00      	cmp	r3, #0
 8006440:	d00a      	beq.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006442:	4b87      	ldr	r3, [pc, #540]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006448:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006450:	4983      	ldr	r1, [pc, #524]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006452:	4313      	orrs	r3, r2
 8006454:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f003 0308 	and.w	r3, r3, #8
 8006460:	2b00      	cmp	r3, #0
 8006462:	d00a      	beq.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006464:	4b7e      	ldr	r3, [pc, #504]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800646a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006472:	497b      	ldr	r1, [pc, #492]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006474:	4313      	orrs	r3, r2
 8006476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f003 0310 	and.w	r3, r3, #16
 8006482:	2b00      	cmp	r3, #0
 8006484:	d00a      	beq.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006486:	4b76      	ldr	r3, [pc, #472]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800648c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006494:	4972      	ldr	r1, [pc, #456]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006496:	4313      	orrs	r3, r2
 8006498:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f003 0320 	and.w	r3, r3, #32
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d00a      	beq.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80064a8:	4b6d      	ldr	r3, [pc, #436]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064b6:	496a      	ldr	r1, [pc, #424]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064b8:	4313      	orrs	r3, r2
 80064ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d00a      	beq.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80064ca:	4b65      	ldr	r3, [pc, #404]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064d8:	4961      	ldr	r1, [pc, #388]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064da:	4313      	orrs	r3, r2
 80064dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d00a      	beq.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80064ec:	4b5c      	ldr	r3, [pc, #368]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064fa:	4959      	ldr	r1, [pc, #356]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064fc:	4313      	orrs	r3, r2
 80064fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800650a:	2b00      	cmp	r3, #0
 800650c:	d00a      	beq.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800650e:	4b54      	ldr	r3, [pc, #336]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006514:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800651c:	4950      	ldr	r1, [pc, #320]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800651e:	4313      	orrs	r3, r2
 8006520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800652c:	2b00      	cmp	r3, #0
 800652e:	d00a      	beq.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006530:	4b4b      	ldr	r3, [pc, #300]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006536:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800653e:	4948      	ldr	r1, [pc, #288]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006540:	4313      	orrs	r3, r2
 8006542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800654e:	2b00      	cmp	r3, #0
 8006550:	d00a      	beq.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006552:	4b43      	ldr	r3, [pc, #268]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006558:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006560:	493f      	ldr	r1, [pc, #252]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006562:	4313      	orrs	r3, r2
 8006564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006570:	2b00      	cmp	r3, #0
 8006572:	d028      	beq.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006574:	4b3a      	ldr	r3, [pc, #232]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800657a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006582:	4937      	ldr	r1, [pc, #220]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006584:	4313      	orrs	r3, r2
 8006586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800658e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006592:	d106      	bne.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006594:	4b32      	ldr	r3, [pc, #200]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	4a31      	ldr	r2, [pc, #196]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800659a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800659e:	60d3      	str	r3, [r2, #12]
 80065a0:	e011      	b.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80065aa:	d10c      	bne.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	3304      	adds	r3, #4
 80065b0:	2101      	movs	r1, #1
 80065b2:	4618      	mov	r0, r3
 80065b4:	f000 f8c8 	bl	8006748 <RCCEx_PLLSAI1_Config>
 80065b8:	4603      	mov	r3, r0
 80065ba:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80065bc:	7cfb      	ldrb	r3, [r7, #19]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d001      	beq.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80065c2:	7cfb      	ldrb	r3, [r7, #19]
 80065c4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d028      	beq.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80065d2:	4b23      	ldr	r3, [pc, #140]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065d8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065e0:	491f      	ldr	r1, [pc, #124]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065e2:	4313      	orrs	r3, r2
 80065e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065f0:	d106      	bne.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065f2:	4b1b      	ldr	r3, [pc, #108]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	4a1a      	ldr	r2, [pc, #104]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065fc:	60d3      	str	r3, [r2, #12]
 80065fe:	e011      	b.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006604:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006608:	d10c      	bne.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	3304      	adds	r3, #4
 800660e:	2101      	movs	r1, #1
 8006610:	4618      	mov	r0, r3
 8006612:	f000 f899 	bl	8006748 <RCCEx_PLLSAI1_Config>
 8006616:	4603      	mov	r3, r0
 8006618:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800661a:	7cfb      	ldrb	r3, [r7, #19]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d001      	beq.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006620:	7cfb      	ldrb	r3, [r7, #19]
 8006622:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800662c:	2b00      	cmp	r3, #0
 800662e:	d02b      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006630:	4b0b      	ldr	r3, [pc, #44]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006636:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800663e:	4908      	ldr	r1, [pc, #32]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006640:	4313      	orrs	r3, r2
 8006642:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800664a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800664e:	d109      	bne.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006650:	4b03      	ldr	r3, [pc, #12]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	4a02      	ldr	r2, [pc, #8]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006656:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800665a:	60d3      	str	r3, [r2, #12]
 800665c:	e014      	b.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800665e:	bf00      	nop
 8006660:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006668:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800666c:	d10c      	bne.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	3304      	adds	r3, #4
 8006672:	2101      	movs	r1, #1
 8006674:	4618      	mov	r0, r3
 8006676:	f000 f867 	bl	8006748 <RCCEx_PLLSAI1_Config>
 800667a:	4603      	mov	r3, r0
 800667c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800667e:	7cfb      	ldrb	r3, [r7, #19]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d001      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006684:	7cfb      	ldrb	r3, [r7, #19]
 8006686:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006690:	2b00      	cmp	r3, #0
 8006692:	d02f      	beq.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006694:	4b2b      	ldr	r3, [pc, #172]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800669a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066a2:	4928      	ldr	r1, [pc, #160]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80066a4:	4313      	orrs	r3, r2
 80066a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066b2:	d10d      	bne.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	3304      	adds	r3, #4
 80066b8:	2102      	movs	r1, #2
 80066ba:	4618      	mov	r0, r3
 80066bc:	f000 f844 	bl	8006748 <RCCEx_PLLSAI1_Config>
 80066c0:	4603      	mov	r3, r0
 80066c2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80066c4:	7cfb      	ldrb	r3, [r7, #19]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d014      	beq.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80066ca:	7cfb      	ldrb	r3, [r7, #19]
 80066cc:	74bb      	strb	r3, [r7, #18]
 80066ce:	e011      	b.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066d8:	d10c      	bne.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	3320      	adds	r3, #32
 80066de:	2102      	movs	r1, #2
 80066e0:	4618      	mov	r0, r3
 80066e2:	f000 f925 	bl	8006930 <RCCEx_PLLSAI2_Config>
 80066e6:	4603      	mov	r3, r0
 80066e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80066ea:	7cfb      	ldrb	r3, [r7, #19]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d001      	beq.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80066f0:	7cfb      	ldrb	r3, [r7, #19]
 80066f2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d00a      	beq.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006700:	4b10      	ldr	r3, [pc, #64]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006706:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800670e:	490d      	ldr	r1, [pc, #52]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006710:	4313      	orrs	r3, r2
 8006712:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800671e:	2b00      	cmp	r3, #0
 8006720:	d00b      	beq.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006722:	4b08      	ldr	r3, [pc, #32]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006728:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006732:	4904      	ldr	r1, [pc, #16]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006734:	4313      	orrs	r3, r2
 8006736:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800673a:	7cbb      	ldrb	r3, [r7, #18]
}
 800673c:	4618      	mov	r0, r3
 800673e:	3718      	adds	r7, #24
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}
 8006744:	40021000 	.word	0x40021000

08006748 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b084      	sub	sp, #16
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006752:	2300      	movs	r3, #0
 8006754:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006756:	4b75      	ldr	r3, [pc, #468]	; (800692c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	f003 0303 	and.w	r3, r3, #3
 800675e:	2b00      	cmp	r3, #0
 8006760:	d018      	beq.n	8006794 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006762:	4b72      	ldr	r3, [pc, #456]	; (800692c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006764:	68db      	ldr	r3, [r3, #12]
 8006766:	f003 0203 	and.w	r2, r3, #3
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	429a      	cmp	r2, r3
 8006770:	d10d      	bne.n	800678e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
       ||
 8006776:	2b00      	cmp	r3, #0
 8006778:	d009      	beq.n	800678e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800677a:	4b6c      	ldr	r3, [pc, #432]	; (800692c <RCCEx_PLLSAI1_Config+0x1e4>)
 800677c:	68db      	ldr	r3, [r3, #12]
 800677e:	091b      	lsrs	r3, r3, #4
 8006780:	f003 0307 	and.w	r3, r3, #7
 8006784:	1c5a      	adds	r2, r3, #1
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	685b      	ldr	r3, [r3, #4]
       ||
 800678a:	429a      	cmp	r2, r3
 800678c:	d047      	beq.n	800681e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	73fb      	strb	r3, [r7, #15]
 8006792:	e044      	b.n	800681e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2b03      	cmp	r3, #3
 800679a:	d018      	beq.n	80067ce <RCCEx_PLLSAI1_Config+0x86>
 800679c:	2b03      	cmp	r3, #3
 800679e:	d825      	bhi.n	80067ec <RCCEx_PLLSAI1_Config+0xa4>
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d002      	beq.n	80067aa <RCCEx_PLLSAI1_Config+0x62>
 80067a4:	2b02      	cmp	r3, #2
 80067a6:	d009      	beq.n	80067bc <RCCEx_PLLSAI1_Config+0x74>
 80067a8:	e020      	b.n	80067ec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80067aa:	4b60      	ldr	r3, [pc, #384]	; (800692c <RCCEx_PLLSAI1_Config+0x1e4>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f003 0302 	and.w	r3, r3, #2
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d11d      	bne.n	80067f2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80067ba:	e01a      	b.n	80067f2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80067bc:	4b5b      	ldr	r3, [pc, #364]	; (800692c <RCCEx_PLLSAI1_Config+0x1e4>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d116      	bne.n	80067f6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80067cc:	e013      	b.n	80067f6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80067ce:	4b57      	ldr	r3, [pc, #348]	; (800692c <RCCEx_PLLSAI1_Config+0x1e4>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d10f      	bne.n	80067fa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80067da:	4b54      	ldr	r3, [pc, #336]	; (800692c <RCCEx_PLLSAI1_Config+0x1e4>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d109      	bne.n	80067fa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80067ea:	e006      	b.n	80067fa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	73fb      	strb	r3, [r7, #15]
      break;
 80067f0:	e004      	b.n	80067fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80067f2:	bf00      	nop
 80067f4:	e002      	b.n	80067fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80067f6:	bf00      	nop
 80067f8:	e000      	b.n	80067fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80067fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80067fc:	7bfb      	ldrb	r3, [r7, #15]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d10d      	bne.n	800681e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006802:	4b4a      	ldr	r3, [pc, #296]	; (800692c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006804:	68db      	ldr	r3, [r3, #12]
 8006806:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6819      	ldr	r1, [r3, #0]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	3b01      	subs	r3, #1
 8006814:	011b      	lsls	r3, r3, #4
 8006816:	430b      	orrs	r3, r1
 8006818:	4944      	ldr	r1, [pc, #272]	; (800692c <RCCEx_PLLSAI1_Config+0x1e4>)
 800681a:	4313      	orrs	r3, r2
 800681c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800681e:	7bfb      	ldrb	r3, [r7, #15]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d17d      	bne.n	8006920 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006824:	4b41      	ldr	r3, [pc, #260]	; (800692c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a40      	ldr	r2, [pc, #256]	; (800692c <RCCEx_PLLSAI1_Config+0x1e4>)
 800682a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800682e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006830:	f7fc f852 	bl	80028d8 <HAL_GetTick>
 8006834:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006836:	e009      	b.n	800684c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006838:	f7fc f84e 	bl	80028d8 <HAL_GetTick>
 800683c:	4602      	mov	r2, r0
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	1ad3      	subs	r3, r2, r3
 8006842:	2b02      	cmp	r3, #2
 8006844:	d902      	bls.n	800684c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006846:	2303      	movs	r3, #3
 8006848:	73fb      	strb	r3, [r7, #15]
        break;
 800684a:	e005      	b.n	8006858 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800684c:	4b37      	ldr	r3, [pc, #220]	; (800692c <RCCEx_PLLSAI1_Config+0x1e4>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006854:	2b00      	cmp	r3, #0
 8006856:	d1ef      	bne.n	8006838 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006858:	7bfb      	ldrb	r3, [r7, #15]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d160      	bne.n	8006920 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d111      	bne.n	8006888 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006864:	4b31      	ldr	r3, [pc, #196]	; (800692c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006866:	691b      	ldr	r3, [r3, #16]
 8006868:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800686c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	6892      	ldr	r2, [r2, #8]
 8006874:	0211      	lsls	r1, r2, #8
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	68d2      	ldr	r2, [r2, #12]
 800687a:	0912      	lsrs	r2, r2, #4
 800687c:	0452      	lsls	r2, r2, #17
 800687e:	430a      	orrs	r2, r1
 8006880:	492a      	ldr	r1, [pc, #168]	; (800692c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006882:	4313      	orrs	r3, r2
 8006884:	610b      	str	r3, [r1, #16]
 8006886:	e027      	b.n	80068d8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	2b01      	cmp	r3, #1
 800688c:	d112      	bne.n	80068b4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800688e:	4b27      	ldr	r3, [pc, #156]	; (800692c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006896:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	6892      	ldr	r2, [r2, #8]
 800689e:	0211      	lsls	r1, r2, #8
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	6912      	ldr	r2, [r2, #16]
 80068a4:	0852      	lsrs	r2, r2, #1
 80068a6:	3a01      	subs	r2, #1
 80068a8:	0552      	lsls	r2, r2, #21
 80068aa:	430a      	orrs	r2, r1
 80068ac:	491f      	ldr	r1, [pc, #124]	; (800692c <RCCEx_PLLSAI1_Config+0x1e4>)
 80068ae:	4313      	orrs	r3, r2
 80068b0:	610b      	str	r3, [r1, #16]
 80068b2:	e011      	b.n	80068d8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80068b4:	4b1d      	ldr	r3, [pc, #116]	; (800692c <RCCEx_PLLSAI1_Config+0x1e4>)
 80068b6:	691b      	ldr	r3, [r3, #16]
 80068b8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80068bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	6892      	ldr	r2, [r2, #8]
 80068c4:	0211      	lsls	r1, r2, #8
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	6952      	ldr	r2, [r2, #20]
 80068ca:	0852      	lsrs	r2, r2, #1
 80068cc:	3a01      	subs	r2, #1
 80068ce:	0652      	lsls	r2, r2, #25
 80068d0:	430a      	orrs	r2, r1
 80068d2:	4916      	ldr	r1, [pc, #88]	; (800692c <RCCEx_PLLSAI1_Config+0x1e4>)
 80068d4:	4313      	orrs	r3, r2
 80068d6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80068d8:	4b14      	ldr	r3, [pc, #80]	; (800692c <RCCEx_PLLSAI1_Config+0x1e4>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a13      	ldr	r2, [pc, #76]	; (800692c <RCCEx_PLLSAI1_Config+0x1e4>)
 80068de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80068e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068e4:	f7fb fff8 	bl	80028d8 <HAL_GetTick>
 80068e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80068ea:	e009      	b.n	8006900 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80068ec:	f7fb fff4 	bl	80028d8 <HAL_GetTick>
 80068f0:	4602      	mov	r2, r0
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	1ad3      	subs	r3, r2, r3
 80068f6:	2b02      	cmp	r3, #2
 80068f8:	d902      	bls.n	8006900 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80068fa:	2303      	movs	r3, #3
 80068fc:	73fb      	strb	r3, [r7, #15]
          break;
 80068fe:	e005      	b.n	800690c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006900:	4b0a      	ldr	r3, [pc, #40]	; (800692c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006908:	2b00      	cmp	r3, #0
 800690a:	d0ef      	beq.n	80068ec <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800690c:	7bfb      	ldrb	r3, [r7, #15]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d106      	bne.n	8006920 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006912:	4b06      	ldr	r3, [pc, #24]	; (800692c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006914:	691a      	ldr	r2, [r3, #16]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	699b      	ldr	r3, [r3, #24]
 800691a:	4904      	ldr	r1, [pc, #16]	; (800692c <RCCEx_PLLSAI1_Config+0x1e4>)
 800691c:	4313      	orrs	r3, r2
 800691e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006920:	7bfb      	ldrb	r3, [r7, #15]
}
 8006922:	4618      	mov	r0, r3
 8006924:	3710      	adds	r7, #16
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
 800692a:	bf00      	nop
 800692c:	40021000 	.word	0x40021000

08006930 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800693a:	2300      	movs	r3, #0
 800693c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800693e:	4b6a      	ldr	r3, [pc, #424]	; (8006ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006940:	68db      	ldr	r3, [r3, #12]
 8006942:	f003 0303 	and.w	r3, r3, #3
 8006946:	2b00      	cmp	r3, #0
 8006948:	d018      	beq.n	800697c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800694a:	4b67      	ldr	r3, [pc, #412]	; (8006ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800694c:	68db      	ldr	r3, [r3, #12]
 800694e:	f003 0203 	and.w	r2, r3, #3
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	429a      	cmp	r2, r3
 8006958:	d10d      	bne.n	8006976 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
       ||
 800695e:	2b00      	cmp	r3, #0
 8006960:	d009      	beq.n	8006976 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006962:	4b61      	ldr	r3, [pc, #388]	; (8006ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006964:	68db      	ldr	r3, [r3, #12]
 8006966:	091b      	lsrs	r3, r3, #4
 8006968:	f003 0307 	and.w	r3, r3, #7
 800696c:	1c5a      	adds	r2, r3, #1
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	685b      	ldr	r3, [r3, #4]
       ||
 8006972:	429a      	cmp	r2, r3
 8006974:	d047      	beq.n	8006a06 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	73fb      	strb	r3, [r7, #15]
 800697a:	e044      	b.n	8006a06 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	2b03      	cmp	r3, #3
 8006982:	d018      	beq.n	80069b6 <RCCEx_PLLSAI2_Config+0x86>
 8006984:	2b03      	cmp	r3, #3
 8006986:	d825      	bhi.n	80069d4 <RCCEx_PLLSAI2_Config+0xa4>
 8006988:	2b01      	cmp	r3, #1
 800698a:	d002      	beq.n	8006992 <RCCEx_PLLSAI2_Config+0x62>
 800698c:	2b02      	cmp	r3, #2
 800698e:	d009      	beq.n	80069a4 <RCCEx_PLLSAI2_Config+0x74>
 8006990:	e020      	b.n	80069d4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006992:	4b55      	ldr	r3, [pc, #340]	; (8006ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f003 0302 	and.w	r3, r3, #2
 800699a:	2b00      	cmp	r3, #0
 800699c:	d11d      	bne.n	80069da <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80069a2:	e01a      	b.n	80069da <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80069a4:	4b50      	ldr	r3, [pc, #320]	; (8006ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d116      	bne.n	80069de <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80069b4:	e013      	b.n	80069de <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80069b6:	4b4c      	ldr	r3, [pc, #304]	; (8006ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d10f      	bne.n	80069e2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80069c2:	4b49      	ldr	r3, [pc, #292]	; (8006ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d109      	bne.n	80069e2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80069d2:	e006      	b.n	80069e2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	73fb      	strb	r3, [r7, #15]
      break;
 80069d8:	e004      	b.n	80069e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80069da:	bf00      	nop
 80069dc:	e002      	b.n	80069e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80069de:	bf00      	nop
 80069e0:	e000      	b.n	80069e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80069e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80069e4:	7bfb      	ldrb	r3, [r7, #15]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d10d      	bne.n	8006a06 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80069ea:	4b3f      	ldr	r3, [pc, #252]	; (8006ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80069ec:	68db      	ldr	r3, [r3, #12]
 80069ee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6819      	ldr	r1, [r3, #0]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	3b01      	subs	r3, #1
 80069fc:	011b      	lsls	r3, r3, #4
 80069fe:	430b      	orrs	r3, r1
 8006a00:	4939      	ldr	r1, [pc, #228]	; (8006ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a02:	4313      	orrs	r3, r2
 8006a04:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006a06:	7bfb      	ldrb	r3, [r7, #15]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d167      	bne.n	8006adc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006a0c:	4b36      	ldr	r3, [pc, #216]	; (8006ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a35      	ldr	r2, [pc, #212]	; (8006ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a18:	f7fb ff5e 	bl	80028d8 <HAL_GetTick>
 8006a1c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006a1e:	e009      	b.n	8006a34 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006a20:	f7fb ff5a 	bl	80028d8 <HAL_GetTick>
 8006a24:	4602      	mov	r2, r0
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	1ad3      	subs	r3, r2, r3
 8006a2a:	2b02      	cmp	r3, #2
 8006a2c:	d902      	bls.n	8006a34 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006a2e:	2303      	movs	r3, #3
 8006a30:	73fb      	strb	r3, [r7, #15]
        break;
 8006a32:	e005      	b.n	8006a40 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006a34:	4b2c      	ldr	r3, [pc, #176]	; (8006ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d1ef      	bne.n	8006a20 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006a40:	7bfb      	ldrb	r3, [r7, #15]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d14a      	bne.n	8006adc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d111      	bne.n	8006a70 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006a4c:	4b26      	ldr	r3, [pc, #152]	; (8006ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a4e:	695b      	ldr	r3, [r3, #20]
 8006a50:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006a54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	6892      	ldr	r2, [r2, #8]
 8006a5c:	0211      	lsls	r1, r2, #8
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	68d2      	ldr	r2, [r2, #12]
 8006a62:	0912      	lsrs	r2, r2, #4
 8006a64:	0452      	lsls	r2, r2, #17
 8006a66:	430a      	orrs	r2, r1
 8006a68:	491f      	ldr	r1, [pc, #124]	; (8006ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	614b      	str	r3, [r1, #20]
 8006a6e:	e011      	b.n	8006a94 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006a70:	4b1d      	ldr	r3, [pc, #116]	; (8006ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a72:	695b      	ldr	r3, [r3, #20]
 8006a74:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006a78:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	6892      	ldr	r2, [r2, #8]
 8006a80:	0211      	lsls	r1, r2, #8
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	6912      	ldr	r2, [r2, #16]
 8006a86:	0852      	lsrs	r2, r2, #1
 8006a88:	3a01      	subs	r2, #1
 8006a8a:	0652      	lsls	r2, r2, #25
 8006a8c:	430a      	orrs	r2, r1
 8006a8e:	4916      	ldr	r1, [pc, #88]	; (8006ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a90:	4313      	orrs	r3, r2
 8006a92:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006a94:	4b14      	ldr	r3, [pc, #80]	; (8006ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a13      	ldr	r2, [pc, #76]	; (8006ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a9e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006aa0:	f7fb ff1a 	bl	80028d8 <HAL_GetTick>
 8006aa4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006aa6:	e009      	b.n	8006abc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006aa8:	f7fb ff16 	bl	80028d8 <HAL_GetTick>
 8006aac:	4602      	mov	r2, r0
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	1ad3      	subs	r3, r2, r3
 8006ab2:	2b02      	cmp	r3, #2
 8006ab4:	d902      	bls.n	8006abc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006ab6:	2303      	movs	r3, #3
 8006ab8:	73fb      	strb	r3, [r7, #15]
          break;
 8006aba:	e005      	b.n	8006ac8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006abc:	4b0a      	ldr	r3, [pc, #40]	; (8006ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d0ef      	beq.n	8006aa8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006ac8:	7bfb      	ldrb	r3, [r7, #15]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d106      	bne.n	8006adc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006ace:	4b06      	ldr	r3, [pc, #24]	; (8006ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ad0:	695a      	ldr	r2, [r3, #20]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	695b      	ldr	r3, [r3, #20]
 8006ad6:	4904      	ldr	r1, [pc, #16]	; (8006ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3710      	adds	r7, #16
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	bf00      	nop
 8006ae8:	40021000 	.word	0x40021000

08006aec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b082      	sub	sp, #8
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d101      	bne.n	8006afe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	e049      	b.n	8006b92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d106      	bne.n	8006b18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f7fb fbb0 	bl	8002278 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2202      	movs	r2, #2
 8006b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	3304      	adds	r3, #4
 8006b28:	4619      	mov	r1, r3
 8006b2a:	4610      	mov	r0, r2
 8006b2c:	f000 fccc 	bl	80074c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2201      	movs	r2, #1
 8006b34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2201      	movs	r2, #1
 8006b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2201      	movs	r2, #1
 8006b84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b90:	2300      	movs	r3, #0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3708      	adds	r7, #8
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}

08006b9a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006b9a:	b580      	push	{r7, lr}
 8006b9c:	b082      	sub	sp, #8
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d101      	bne.n	8006bac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e049      	b.n	8006c40 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d106      	bne.n	8006bc6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f000 f841 	bl	8006c48 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2202      	movs	r2, #2
 8006bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	3304      	adds	r3, #4
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	4610      	mov	r0, r2
 8006bda:	f000 fc75 	bl	80074c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2201      	movs	r2, #1
 8006be2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2201      	movs	r2, #1
 8006bea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2201      	movs	r2, #1
 8006c02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2201      	movs	r2, #1
 8006c0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2201      	movs	r2, #1
 8006c12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2201      	movs	r2, #1
 8006c1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2201      	movs	r2, #1
 8006c22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2201      	movs	r2, #1
 8006c2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2201      	movs	r2, #1
 8006c32:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2201      	movs	r2, #1
 8006c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3708      	adds	r7, #8
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006c50:	bf00      	nop
 8006c52:	370c      	adds	r7, #12
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d109      	bne.n	8006c80 <HAL_TIM_PWM_Start+0x24>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	bf14      	ite	ne
 8006c78:	2301      	movne	r3, #1
 8006c7a:	2300      	moveq	r3, #0
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	e03c      	b.n	8006cfa <HAL_TIM_PWM_Start+0x9e>
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	2b04      	cmp	r3, #4
 8006c84:	d109      	bne.n	8006c9a <HAL_TIM_PWM_Start+0x3e>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	bf14      	ite	ne
 8006c92:	2301      	movne	r3, #1
 8006c94:	2300      	moveq	r3, #0
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	e02f      	b.n	8006cfa <HAL_TIM_PWM_Start+0x9e>
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	2b08      	cmp	r3, #8
 8006c9e:	d109      	bne.n	8006cb4 <HAL_TIM_PWM_Start+0x58>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	bf14      	ite	ne
 8006cac:	2301      	movne	r3, #1
 8006cae:	2300      	moveq	r3, #0
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	e022      	b.n	8006cfa <HAL_TIM_PWM_Start+0x9e>
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	2b0c      	cmp	r3, #12
 8006cb8:	d109      	bne.n	8006cce <HAL_TIM_PWM_Start+0x72>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	bf14      	ite	ne
 8006cc6:	2301      	movne	r3, #1
 8006cc8:	2300      	moveq	r3, #0
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	e015      	b.n	8006cfa <HAL_TIM_PWM_Start+0x9e>
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	2b10      	cmp	r3, #16
 8006cd2:	d109      	bne.n	8006ce8 <HAL_TIM_PWM_Start+0x8c>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	bf14      	ite	ne
 8006ce0:	2301      	movne	r3, #1
 8006ce2:	2300      	moveq	r3, #0
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	e008      	b.n	8006cfa <HAL_TIM_PWM_Start+0x9e>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	bf14      	ite	ne
 8006cf4:	2301      	movne	r3, #1
 8006cf6:	2300      	moveq	r3, #0
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d001      	beq.n	8006d02 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	e09c      	b.n	8006e3c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d104      	bne.n	8006d12 <HAL_TIM_PWM_Start+0xb6>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2202      	movs	r2, #2
 8006d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d10:	e023      	b.n	8006d5a <HAL_TIM_PWM_Start+0xfe>
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	2b04      	cmp	r3, #4
 8006d16:	d104      	bne.n	8006d22 <HAL_TIM_PWM_Start+0xc6>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2202      	movs	r2, #2
 8006d1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d20:	e01b      	b.n	8006d5a <HAL_TIM_PWM_Start+0xfe>
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	2b08      	cmp	r3, #8
 8006d26:	d104      	bne.n	8006d32 <HAL_TIM_PWM_Start+0xd6>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2202      	movs	r2, #2
 8006d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d30:	e013      	b.n	8006d5a <HAL_TIM_PWM_Start+0xfe>
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	2b0c      	cmp	r3, #12
 8006d36:	d104      	bne.n	8006d42 <HAL_TIM_PWM_Start+0xe6>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2202      	movs	r2, #2
 8006d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d40:	e00b      	b.n	8006d5a <HAL_TIM_PWM_Start+0xfe>
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	2b10      	cmp	r3, #16
 8006d46:	d104      	bne.n	8006d52 <HAL_TIM_PWM_Start+0xf6>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2202      	movs	r2, #2
 8006d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d50:	e003      	b.n	8006d5a <HAL_TIM_PWM_Start+0xfe>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2202      	movs	r2, #2
 8006d56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	6839      	ldr	r1, [r7, #0]
 8006d62:	4618      	mov	r0, r3
 8006d64:	f000 ffba 	bl	8007cdc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a35      	ldr	r2, [pc, #212]	; (8006e44 <HAL_TIM_PWM_Start+0x1e8>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d013      	beq.n	8006d9a <HAL_TIM_PWM_Start+0x13e>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a34      	ldr	r2, [pc, #208]	; (8006e48 <HAL_TIM_PWM_Start+0x1ec>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d00e      	beq.n	8006d9a <HAL_TIM_PWM_Start+0x13e>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a32      	ldr	r2, [pc, #200]	; (8006e4c <HAL_TIM_PWM_Start+0x1f0>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d009      	beq.n	8006d9a <HAL_TIM_PWM_Start+0x13e>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a31      	ldr	r2, [pc, #196]	; (8006e50 <HAL_TIM_PWM_Start+0x1f4>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d004      	beq.n	8006d9a <HAL_TIM_PWM_Start+0x13e>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a2f      	ldr	r2, [pc, #188]	; (8006e54 <HAL_TIM_PWM_Start+0x1f8>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d101      	bne.n	8006d9e <HAL_TIM_PWM_Start+0x142>
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e000      	b.n	8006da0 <HAL_TIM_PWM_Start+0x144>
 8006d9e:	2300      	movs	r3, #0
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d007      	beq.n	8006db4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006db2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a22      	ldr	r2, [pc, #136]	; (8006e44 <HAL_TIM_PWM_Start+0x1e8>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d01d      	beq.n	8006dfa <HAL_TIM_PWM_Start+0x19e>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dc6:	d018      	beq.n	8006dfa <HAL_TIM_PWM_Start+0x19e>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a22      	ldr	r2, [pc, #136]	; (8006e58 <HAL_TIM_PWM_Start+0x1fc>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d013      	beq.n	8006dfa <HAL_TIM_PWM_Start+0x19e>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a21      	ldr	r2, [pc, #132]	; (8006e5c <HAL_TIM_PWM_Start+0x200>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d00e      	beq.n	8006dfa <HAL_TIM_PWM_Start+0x19e>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a1f      	ldr	r2, [pc, #124]	; (8006e60 <HAL_TIM_PWM_Start+0x204>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d009      	beq.n	8006dfa <HAL_TIM_PWM_Start+0x19e>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a17      	ldr	r2, [pc, #92]	; (8006e48 <HAL_TIM_PWM_Start+0x1ec>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d004      	beq.n	8006dfa <HAL_TIM_PWM_Start+0x19e>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a15      	ldr	r2, [pc, #84]	; (8006e4c <HAL_TIM_PWM_Start+0x1f0>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d115      	bne.n	8006e26 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	689a      	ldr	r2, [r3, #8]
 8006e00:	4b18      	ldr	r3, [pc, #96]	; (8006e64 <HAL_TIM_PWM_Start+0x208>)
 8006e02:	4013      	ands	r3, r2
 8006e04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2b06      	cmp	r3, #6
 8006e0a:	d015      	beq.n	8006e38 <HAL_TIM_PWM_Start+0x1dc>
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e12:	d011      	beq.n	8006e38 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f042 0201 	orr.w	r2, r2, #1
 8006e22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e24:	e008      	b.n	8006e38 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f042 0201 	orr.w	r2, r2, #1
 8006e34:	601a      	str	r2, [r3, #0]
 8006e36:	e000      	b.n	8006e3a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e38:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006e3a:	2300      	movs	r3, #0
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3710      	adds	r7, #16
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}
 8006e44:	40012c00 	.word	0x40012c00
 8006e48:	40013400 	.word	0x40013400
 8006e4c:	40014000 	.word	0x40014000
 8006e50:	40014400 	.word	0x40014400
 8006e54:	40014800 	.word	0x40014800
 8006e58:	40000400 	.word	0x40000400
 8006e5c:	40000800 	.word	0x40000800
 8006e60:	40000c00 	.word	0x40000c00
 8006e64:	00010007 	.word	0x00010007

08006e68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b082      	sub	sp, #8
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	691b      	ldr	r3, [r3, #16]
 8006e76:	f003 0302 	and.w	r3, r3, #2
 8006e7a:	2b02      	cmp	r3, #2
 8006e7c:	d122      	bne.n	8006ec4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	f003 0302 	and.w	r3, r3, #2
 8006e88:	2b02      	cmp	r3, #2
 8006e8a:	d11b      	bne.n	8006ec4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f06f 0202 	mvn.w	r2, #2
 8006e94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2201      	movs	r2, #1
 8006e9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	699b      	ldr	r3, [r3, #24]
 8006ea2:	f003 0303 	and.w	r3, r3, #3
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d003      	beq.n	8006eb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 faed 	bl	800748a <HAL_TIM_IC_CaptureCallback>
 8006eb0:	e005      	b.n	8006ebe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 fadf 	bl	8007476 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f000 faf0 	bl	800749e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	691b      	ldr	r3, [r3, #16]
 8006eca:	f003 0304 	and.w	r3, r3, #4
 8006ece:	2b04      	cmp	r3, #4
 8006ed0:	d122      	bne.n	8006f18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	f003 0304 	and.w	r3, r3, #4
 8006edc:	2b04      	cmp	r3, #4
 8006ede:	d11b      	bne.n	8006f18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f06f 0204 	mvn.w	r2, #4
 8006ee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2202      	movs	r2, #2
 8006eee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	699b      	ldr	r3, [r3, #24]
 8006ef6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d003      	beq.n	8006f06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 fac3 	bl	800748a <HAL_TIM_IC_CaptureCallback>
 8006f04:	e005      	b.n	8006f12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 fab5 	bl	8007476 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 fac6 	bl	800749e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	691b      	ldr	r3, [r3, #16]
 8006f1e:	f003 0308 	and.w	r3, r3, #8
 8006f22:	2b08      	cmp	r3, #8
 8006f24:	d122      	bne.n	8006f6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	f003 0308 	and.w	r3, r3, #8
 8006f30:	2b08      	cmp	r3, #8
 8006f32:	d11b      	bne.n	8006f6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f06f 0208 	mvn.w	r2, #8
 8006f3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2204      	movs	r2, #4
 8006f42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	69db      	ldr	r3, [r3, #28]
 8006f4a:	f003 0303 	and.w	r3, r3, #3
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d003      	beq.n	8006f5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 fa99 	bl	800748a <HAL_TIM_IC_CaptureCallback>
 8006f58:	e005      	b.n	8006f66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 fa8b 	bl	8007476 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 fa9c 	bl	800749e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	f003 0310 	and.w	r3, r3, #16
 8006f76:	2b10      	cmp	r3, #16
 8006f78:	d122      	bne.n	8006fc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	f003 0310 	and.w	r3, r3, #16
 8006f84:	2b10      	cmp	r3, #16
 8006f86:	d11b      	bne.n	8006fc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f06f 0210 	mvn.w	r2, #16
 8006f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2208      	movs	r2, #8
 8006f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	69db      	ldr	r3, [r3, #28]
 8006f9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d003      	beq.n	8006fae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 fa6f 	bl	800748a <HAL_TIM_IC_CaptureCallback>
 8006fac:	e005      	b.n	8006fba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 fa61 	bl	8007476 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 fa72 	bl	800749e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	691b      	ldr	r3, [r3, #16]
 8006fc6:	f003 0301 	and.w	r3, r3, #1
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	d10e      	bne.n	8006fec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	f003 0301 	and.w	r3, r3, #1
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d107      	bne.n	8006fec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f06f 0201 	mvn.w	r2, #1
 8006fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 fa3b 	bl	8007462 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	691b      	ldr	r3, [r3, #16]
 8006ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ff6:	2b80      	cmp	r3, #128	; 0x80
 8006ff8:	d10e      	bne.n	8007018 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007004:	2b80      	cmp	r3, #128	; 0x80
 8007006:	d107      	bne.n	8007018 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 ff1a 	bl	8007e4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	691b      	ldr	r3, [r3, #16]
 800701e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007022:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007026:	d10e      	bne.n	8007046 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	68db      	ldr	r3, [r3, #12]
 800702e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007032:	2b80      	cmp	r3, #128	; 0x80
 8007034:	d107      	bne.n	8007046 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800703e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 ff0d 	bl	8007e60 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	691b      	ldr	r3, [r3, #16]
 800704c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007050:	2b40      	cmp	r3, #64	; 0x40
 8007052:	d10e      	bne.n	8007072 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	68db      	ldr	r3, [r3, #12]
 800705a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800705e:	2b40      	cmp	r3, #64	; 0x40
 8007060:	d107      	bne.n	8007072 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800706a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f000 fa20 	bl	80074b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	691b      	ldr	r3, [r3, #16]
 8007078:	f003 0320 	and.w	r3, r3, #32
 800707c:	2b20      	cmp	r3, #32
 800707e:	d10e      	bne.n	800709e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	68db      	ldr	r3, [r3, #12]
 8007086:	f003 0320 	and.w	r3, r3, #32
 800708a:	2b20      	cmp	r3, #32
 800708c:	d107      	bne.n	800709e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f06f 0220 	mvn.w	r2, #32
 8007096:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 fecd 	bl	8007e38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800709e:	bf00      	nop
 80070a0:	3708      	adds	r7, #8
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
	...

080070a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b086      	sub	sp, #24
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	60b9      	str	r1, [r7, #8]
 80070b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070b4:	2300      	movs	r3, #0
 80070b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d101      	bne.n	80070c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80070c2:	2302      	movs	r3, #2
 80070c4:	e0ff      	b.n	80072c6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2201      	movs	r2, #1
 80070ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2b14      	cmp	r3, #20
 80070d2:	f200 80f0 	bhi.w	80072b6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80070d6:	a201      	add	r2, pc, #4	; (adr r2, 80070dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80070d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070dc:	08007131 	.word	0x08007131
 80070e0:	080072b7 	.word	0x080072b7
 80070e4:	080072b7 	.word	0x080072b7
 80070e8:	080072b7 	.word	0x080072b7
 80070ec:	08007171 	.word	0x08007171
 80070f0:	080072b7 	.word	0x080072b7
 80070f4:	080072b7 	.word	0x080072b7
 80070f8:	080072b7 	.word	0x080072b7
 80070fc:	080071b3 	.word	0x080071b3
 8007100:	080072b7 	.word	0x080072b7
 8007104:	080072b7 	.word	0x080072b7
 8007108:	080072b7 	.word	0x080072b7
 800710c:	080071f3 	.word	0x080071f3
 8007110:	080072b7 	.word	0x080072b7
 8007114:	080072b7 	.word	0x080072b7
 8007118:	080072b7 	.word	0x080072b7
 800711c:	08007235 	.word	0x08007235
 8007120:	080072b7 	.word	0x080072b7
 8007124:	080072b7 	.word	0x080072b7
 8007128:	080072b7 	.word	0x080072b7
 800712c:	08007275 	.word	0x08007275
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	68b9      	ldr	r1, [r7, #8]
 8007136:	4618      	mov	r0, r3
 8007138:	f000 fa60 	bl	80075fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	699a      	ldr	r2, [r3, #24]
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f042 0208 	orr.w	r2, r2, #8
 800714a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	699a      	ldr	r2, [r3, #24]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f022 0204 	bic.w	r2, r2, #4
 800715a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	6999      	ldr	r1, [r3, #24]
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	691a      	ldr	r2, [r3, #16]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	430a      	orrs	r2, r1
 800716c:	619a      	str	r2, [r3, #24]
      break;
 800716e:	e0a5      	b.n	80072bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	68b9      	ldr	r1, [r7, #8]
 8007176:	4618      	mov	r0, r3
 8007178:	f000 fad0 	bl	800771c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	699a      	ldr	r2, [r3, #24]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800718a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	699a      	ldr	r2, [r3, #24]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800719a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	6999      	ldr	r1, [r3, #24]
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	691b      	ldr	r3, [r3, #16]
 80071a6:	021a      	lsls	r2, r3, #8
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	430a      	orrs	r2, r1
 80071ae:	619a      	str	r2, [r3, #24]
      break;
 80071b0:	e084      	b.n	80072bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	68b9      	ldr	r1, [r7, #8]
 80071b8:	4618      	mov	r0, r3
 80071ba:	f000 fb39 	bl	8007830 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	69da      	ldr	r2, [r3, #28]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f042 0208 	orr.w	r2, r2, #8
 80071cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	69da      	ldr	r2, [r3, #28]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f022 0204 	bic.w	r2, r2, #4
 80071dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	69d9      	ldr	r1, [r3, #28]
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	691a      	ldr	r2, [r3, #16]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	430a      	orrs	r2, r1
 80071ee:	61da      	str	r2, [r3, #28]
      break;
 80071f0:	e064      	b.n	80072bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	68b9      	ldr	r1, [r7, #8]
 80071f8:	4618      	mov	r0, r3
 80071fa:	f000 fba1 	bl	8007940 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	69da      	ldr	r2, [r3, #28]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800720c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	69da      	ldr	r2, [r3, #28]
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800721c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	69d9      	ldr	r1, [r3, #28]
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	691b      	ldr	r3, [r3, #16]
 8007228:	021a      	lsls	r2, r3, #8
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	430a      	orrs	r2, r1
 8007230:	61da      	str	r2, [r3, #28]
      break;
 8007232:	e043      	b.n	80072bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	68b9      	ldr	r1, [r7, #8]
 800723a:	4618      	mov	r0, r3
 800723c:	f000 fbea 	bl	8007a14 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f042 0208 	orr.w	r2, r2, #8
 800724e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f022 0204 	bic.w	r2, r2, #4
 800725e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	691a      	ldr	r2, [r3, #16]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	430a      	orrs	r2, r1
 8007270:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007272:	e023      	b.n	80072bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	68b9      	ldr	r1, [r7, #8]
 800727a:	4618      	mov	r0, r3
 800727c:	f000 fc2e 	bl	8007adc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800728e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800729e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	021a      	lsls	r2, r3, #8
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	430a      	orrs	r2, r1
 80072b2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80072b4:	e002      	b.n	80072bc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80072b6:	2301      	movs	r3, #1
 80072b8:	75fb      	strb	r3, [r7, #23]
      break;
 80072ba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2200      	movs	r2, #0
 80072c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80072c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3718      	adds	r7, #24
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	bf00      	nop

080072d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b084      	sub	sp, #16
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80072da:	2300      	movs	r3, #0
 80072dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d101      	bne.n	80072ec <HAL_TIM_ConfigClockSource+0x1c>
 80072e8:	2302      	movs	r3, #2
 80072ea:	e0b6      	b.n	800745a <HAL_TIM_ConfigClockSource+0x18a>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2201      	movs	r2, #1
 80072f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2202      	movs	r2, #2
 80072f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800730a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800730e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007316:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	68ba      	ldr	r2, [r7, #8]
 800731e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007328:	d03e      	beq.n	80073a8 <HAL_TIM_ConfigClockSource+0xd8>
 800732a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800732e:	f200 8087 	bhi.w	8007440 <HAL_TIM_ConfigClockSource+0x170>
 8007332:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007336:	f000 8086 	beq.w	8007446 <HAL_TIM_ConfigClockSource+0x176>
 800733a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800733e:	d87f      	bhi.n	8007440 <HAL_TIM_ConfigClockSource+0x170>
 8007340:	2b70      	cmp	r3, #112	; 0x70
 8007342:	d01a      	beq.n	800737a <HAL_TIM_ConfigClockSource+0xaa>
 8007344:	2b70      	cmp	r3, #112	; 0x70
 8007346:	d87b      	bhi.n	8007440 <HAL_TIM_ConfigClockSource+0x170>
 8007348:	2b60      	cmp	r3, #96	; 0x60
 800734a:	d050      	beq.n	80073ee <HAL_TIM_ConfigClockSource+0x11e>
 800734c:	2b60      	cmp	r3, #96	; 0x60
 800734e:	d877      	bhi.n	8007440 <HAL_TIM_ConfigClockSource+0x170>
 8007350:	2b50      	cmp	r3, #80	; 0x50
 8007352:	d03c      	beq.n	80073ce <HAL_TIM_ConfigClockSource+0xfe>
 8007354:	2b50      	cmp	r3, #80	; 0x50
 8007356:	d873      	bhi.n	8007440 <HAL_TIM_ConfigClockSource+0x170>
 8007358:	2b40      	cmp	r3, #64	; 0x40
 800735a:	d058      	beq.n	800740e <HAL_TIM_ConfigClockSource+0x13e>
 800735c:	2b40      	cmp	r3, #64	; 0x40
 800735e:	d86f      	bhi.n	8007440 <HAL_TIM_ConfigClockSource+0x170>
 8007360:	2b30      	cmp	r3, #48	; 0x30
 8007362:	d064      	beq.n	800742e <HAL_TIM_ConfigClockSource+0x15e>
 8007364:	2b30      	cmp	r3, #48	; 0x30
 8007366:	d86b      	bhi.n	8007440 <HAL_TIM_ConfigClockSource+0x170>
 8007368:	2b20      	cmp	r3, #32
 800736a:	d060      	beq.n	800742e <HAL_TIM_ConfigClockSource+0x15e>
 800736c:	2b20      	cmp	r3, #32
 800736e:	d867      	bhi.n	8007440 <HAL_TIM_ConfigClockSource+0x170>
 8007370:	2b00      	cmp	r3, #0
 8007372:	d05c      	beq.n	800742e <HAL_TIM_ConfigClockSource+0x15e>
 8007374:	2b10      	cmp	r3, #16
 8007376:	d05a      	beq.n	800742e <HAL_TIM_ConfigClockSource+0x15e>
 8007378:	e062      	b.n	8007440 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6818      	ldr	r0, [r3, #0]
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	6899      	ldr	r1, [r3, #8]
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	685a      	ldr	r2, [r3, #4]
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	68db      	ldr	r3, [r3, #12]
 800738a:	f000 fc87 	bl	8007c9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	689b      	ldr	r3, [r3, #8]
 8007394:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800739c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	68ba      	ldr	r2, [r7, #8]
 80073a4:	609a      	str	r2, [r3, #8]
      break;
 80073a6:	e04f      	b.n	8007448 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6818      	ldr	r0, [r3, #0]
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	6899      	ldr	r1, [r3, #8]
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	685a      	ldr	r2, [r3, #4]
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	68db      	ldr	r3, [r3, #12]
 80073b8:	f000 fc70 	bl	8007c9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	689a      	ldr	r2, [r3, #8]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80073ca:	609a      	str	r2, [r3, #8]
      break;
 80073cc:	e03c      	b.n	8007448 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6818      	ldr	r0, [r3, #0]
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	6859      	ldr	r1, [r3, #4]
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	68db      	ldr	r3, [r3, #12]
 80073da:	461a      	mov	r2, r3
 80073dc:	f000 fbe4 	bl	8007ba8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	2150      	movs	r1, #80	; 0x50
 80073e6:	4618      	mov	r0, r3
 80073e8:	f000 fc3d 	bl	8007c66 <TIM_ITRx_SetConfig>
      break;
 80073ec:	e02c      	b.n	8007448 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6818      	ldr	r0, [r3, #0]
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	6859      	ldr	r1, [r3, #4]
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	461a      	mov	r2, r3
 80073fc:	f000 fc03 	bl	8007c06 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	2160      	movs	r1, #96	; 0x60
 8007406:	4618      	mov	r0, r3
 8007408:	f000 fc2d 	bl	8007c66 <TIM_ITRx_SetConfig>
      break;
 800740c:	e01c      	b.n	8007448 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6818      	ldr	r0, [r3, #0]
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	6859      	ldr	r1, [r3, #4]
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	68db      	ldr	r3, [r3, #12]
 800741a:	461a      	mov	r2, r3
 800741c:	f000 fbc4 	bl	8007ba8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	2140      	movs	r1, #64	; 0x40
 8007426:	4618      	mov	r0, r3
 8007428:	f000 fc1d 	bl	8007c66 <TIM_ITRx_SetConfig>
      break;
 800742c:	e00c      	b.n	8007448 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681a      	ldr	r2, [r3, #0]
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4619      	mov	r1, r3
 8007438:	4610      	mov	r0, r2
 800743a:	f000 fc14 	bl	8007c66 <TIM_ITRx_SetConfig>
      break;
 800743e:	e003      	b.n	8007448 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007440:	2301      	movs	r3, #1
 8007442:	73fb      	strb	r3, [r7, #15]
      break;
 8007444:	e000      	b.n	8007448 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007446:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2201      	movs	r2, #1
 800744c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2200      	movs	r2, #0
 8007454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007458:	7bfb      	ldrb	r3, [r7, #15]
}
 800745a:	4618      	mov	r0, r3
 800745c:	3710      	adds	r7, #16
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}

08007462 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007462:	b480      	push	{r7}
 8007464:	b083      	sub	sp, #12
 8007466:	af00      	add	r7, sp, #0
 8007468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800746a:	bf00      	nop
 800746c:	370c      	adds	r7, #12
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr

08007476 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007476:	b480      	push	{r7}
 8007478:	b083      	sub	sp, #12
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800747e:	bf00      	nop
 8007480:	370c      	adds	r7, #12
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr

0800748a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800748a:	b480      	push	{r7}
 800748c:	b083      	sub	sp, #12
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007492:	bf00      	nop
 8007494:	370c      	adds	r7, #12
 8007496:	46bd      	mov	sp, r7
 8007498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749c:	4770      	bx	lr

0800749e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800749e:	b480      	push	{r7}
 80074a0:	b083      	sub	sp, #12
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80074a6:	bf00      	nop
 80074a8:	370c      	adds	r7, #12
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr

080074b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80074b2:	b480      	push	{r7}
 80074b4:	b083      	sub	sp, #12
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80074ba:	bf00      	nop
 80074bc:	370c      	adds	r7, #12
 80074be:	46bd      	mov	sp, r7
 80074c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c4:	4770      	bx	lr
	...

080074c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b085      	sub	sp, #20
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	4a40      	ldr	r2, [pc, #256]	; (80075dc <TIM_Base_SetConfig+0x114>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d013      	beq.n	8007508 <TIM_Base_SetConfig+0x40>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074e6:	d00f      	beq.n	8007508 <TIM_Base_SetConfig+0x40>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	4a3d      	ldr	r2, [pc, #244]	; (80075e0 <TIM_Base_SetConfig+0x118>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d00b      	beq.n	8007508 <TIM_Base_SetConfig+0x40>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	4a3c      	ldr	r2, [pc, #240]	; (80075e4 <TIM_Base_SetConfig+0x11c>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d007      	beq.n	8007508 <TIM_Base_SetConfig+0x40>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	4a3b      	ldr	r2, [pc, #236]	; (80075e8 <TIM_Base_SetConfig+0x120>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d003      	beq.n	8007508 <TIM_Base_SetConfig+0x40>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	4a3a      	ldr	r2, [pc, #232]	; (80075ec <TIM_Base_SetConfig+0x124>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d108      	bne.n	800751a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800750e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	68fa      	ldr	r2, [r7, #12]
 8007516:	4313      	orrs	r3, r2
 8007518:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	4a2f      	ldr	r2, [pc, #188]	; (80075dc <TIM_Base_SetConfig+0x114>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d01f      	beq.n	8007562 <TIM_Base_SetConfig+0x9a>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007528:	d01b      	beq.n	8007562 <TIM_Base_SetConfig+0x9a>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	4a2c      	ldr	r2, [pc, #176]	; (80075e0 <TIM_Base_SetConfig+0x118>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d017      	beq.n	8007562 <TIM_Base_SetConfig+0x9a>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	4a2b      	ldr	r2, [pc, #172]	; (80075e4 <TIM_Base_SetConfig+0x11c>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d013      	beq.n	8007562 <TIM_Base_SetConfig+0x9a>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	4a2a      	ldr	r2, [pc, #168]	; (80075e8 <TIM_Base_SetConfig+0x120>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d00f      	beq.n	8007562 <TIM_Base_SetConfig+0x9a>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	4a29      	ldr	r2, [pc, #164]	; (80075ec <TIM_Base_SetConfig+0x124>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d00b      	beq.n	8007562 <TIM_Base_SetConfig+0x9a>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	4a28      	ldr	r2, [pc, #160]	; (80075f0 <TIM_Base_SetConfig+0x128>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d007      	beq.n	8007562 <TIM_Base_SetConfig+0x9a>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	4a27      	ldr	r2, [pc, #156]	; (80075f4 <TIM_Base_SetConfig+0x12c>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d003      	beq.n	8007562 <TIM_Base_SetConfig+0x9a>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	4a26      	ldr	r2, [pc, #152]	; (80075f8 <TIM_Base_SetConfig+0x130>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d108      	bne.n	8007574 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007568:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	68db      	ldr	r3, [r3, #12]
 800756e:	68fa      	ldr	r2, [r7, #12]
 8007570:	4313      	orrs	r3, r2
 8007572:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	695b      	ldr	r3, [r3, #20]
 800757e:	4313      	orrs	r3, r2
 8007580:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	68fa      	ldr	r2, [r7, #12]
 8007586:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	689a      	ldr	r2, [r3, #8]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	4a10      	ldr	r2, [pc, #64]	; (80075dc <TIM_Base_SetConfig+0x114>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d00f      	beq.n	80075c0 <TIM_Base_SetConfig+0xf8>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	4a12      	ldr	r2, [pc, #72]	; (80075ec <TIM_Base_SetConfig+0x124>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d00b      	beq.n	80075c0 <TIM_Base_SetConfig+0xf8>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	4a11      	ldr	r2, [pc, #68]	; (80075f0 <TIM_Base_SetConfig+0x128>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d007      	beq.n	80075c0 <TIM_Base_SetConfig+0xf8>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	4a10      	ldr	r2, [pc, #64]	; (80075f4 <TIM_Base_SetConfig+0x12c>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d003      	beq.n	80075c0 <TIM_Base_SetConfig+0xf8>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	4a0f      	ldr	r2, [pc, #60]	; (80075f8 <TIM_Base_SetConfig+0x130>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d103      	bne.n	80075c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	691a      	ldr	r2, [r3, #16]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2201      	movs	r2, #1
 80075cc:	615a      	str	r2, [r3, #20]
}
 80075ce:	bf00      	nop
 80075d0:	3714      	adds	r7, #20
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr
 80075da:	bf00      	nop
 80075dc:	40012c00 	.word	0x40012c00
 80075e0:	40000400 	.word	0x40000400
 80075e4:	40000800 	.word	0x40000800
 80075e8:	40000c00 	.word	0x40000c00
 80075ec:	40013400 	.word	0x40013400
 80075f0:	40014000 	.word	0x40014000
 80075f4:	40014400 	.word	0x40014400
 80075f8:	40014800 	.word	0x40014800

080075fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b087      	sub	sp, #28
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6a1b      	ldr	r3, [r3, #32]
 800760a:	f023 0201 	bic.w	r2, r3, #1
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6a1b      	ldr	r3, [r3, #32]
 8007616:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	699b      	ldr	r3, [r3, #24]
 8007622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800762a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800762e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f023 0303 	bic.w	r3, r3, #3
 8007636:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	68fa      	ldr	r2, [r7, #12]
 800763e:	4313      	orrs	r3, r2
 8007640:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	f023 0302 	bic.w	r3, r3, #2
 8007648:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	697a      	ldr	r2, [r7, #20]
 8007650:	4313      	orrs	r3, r2
 8007652:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	4a2c      	ldr	r2, [pc, #176]	; (8007708 <TIM_OC1_SetConfig+0x10c>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d00f      	beq.n	800767c <TIM_OC1_SetConfig+0x80>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	4a2b      	ldr	r2, [pc, #172]	; (800770c <TIM_OC1_SetConfig+0x110>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d00b      	beq.n	800767c <TIM_OC1_SetConfig+0x80>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	4a2a      	ldr	r2, [pc, #168]	; (8007710 <TIM_OC1_SetConfig+0x114>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d007      	beq.n	800767c <TIM_OC1_SetConfig+0x80>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	4a29      	ldr	r2, [pc, #164]	; (8007714 <TIM_OC1_SetConfig+0x118>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d003      	beq.n	800767c <TIM_OC1_SetConfig+0x80>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	4a28      	ldr	r2, [pc, #160]	; (8007718 <TIM_OC1_SetConfig+0x11c>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d10c      	bne.n	8007696 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	f023 0308 	bic.w	r3, r3, #8
 8007682:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	68db      	ldr	r3, [r3, #12]
 8007688:	697a      	ldr	r2, [r7, #20]
 800768a:	4313      	orrs	r3, r2
 800768c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	f023 0304 	bic.w	r3, r3, #4
 8007694:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	4a1b      	ldr	r2, [pc, #108]	; (8007708 <TIM_OC1_SetConfig+0x10c>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d00f      	beq.n	80076be <TIM_OC1_SetConfig+0xc2>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	4a1a      	ldr	r2, [pc, #104]	; (800770c <TIM_OC1_SetConfig+0x110>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d00b      	beq.n	80076be <TIM_OC1_SetConfig+0xc2>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	4a19      	ldr	r2, [pc, #100]	; (8007710 <TIM_OC1_SetConfig+0x114>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d007      	beq.n	80076be <TIM_OC1_SetConfig+0xc2>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	4a18      	ldr	r2, [pc, #96]	; (8007714 <TIM_OC1_SetConfig+0x118>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d003      	beq.n	80076be <TIM_OC1_SetConfig+0xc2>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	4a17      	ldr	r2, [pc, #92]	; (8007718 <TIM_OC1_SetConfig+0x11c>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d111      	bne.n	80076e2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80076cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	695b      	ldr	r3, [r3, #20]
 80076d2:	693a      	ldr	r2, [r7, #16]
 80076d4:	4313      	orrs	r3, r2
 80076d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	699b      	ldr	r3, [r3, #24]
 80076dc:	693a      	ldr	r2, [r7, #16]
 80076de:	4313      	orrs	r3, r2
 80076e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	693a      	ldr	r2, [r7, #16]
 80076e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	68fa      	ldr	r2, [r7, #12]
 80076ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	685a      	ldr	r2, [r3, #4]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	697a      	ldr	r2, [r7, #20]
 80076fa:	621a      	str	r2, [r3, #32]
}
 80076fc:	bf00      	nop
 80076fe:	371c      	adds	r7, #28
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr
 8007708:	40012c00 	.word	0x40012c00
 800770c:	40013400 	.word	0x40013400
 8007710:	40014000 	.word	0x40014000
 8007714:	40014400 	.word	0x40014400
 8007718:	40014800 	.word	0x40014800

0800771c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800771c:	b480      	push	{r7}
 800771e:	b087      	sub	sp, #28
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6a1b      	ldr	r3, [r3, #32]
 800772a:	f023 0210 	bic.w	r2, r3, #16
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6a1b      	ldr	r3, [r3, #32]
 8007736:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	699b      	ldr	r3, [r3, #24]
 8007742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800774a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800774e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007756:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	021b      	lsls	r3, r3, #8
 800775e:	68fa      	ldr	r2, [r7, #12]
 8007760:	4313      	orrs	r3, r2
 8007762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	f023 0320 	bic.w	r3, r3, #32
 800776a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	011b      	lsls	r3, r3, #4
 8007772:	697a      	ldr	r2, [r7, #20]
 8007774:	4313      	orrs	r3, r2
 8007776:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	4a28      	ldr	r2, [pc, #160]	; (800781c <TIM_OC2_SetConfig+0x100>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d003      	beq.n	8007788 <TIM_OC2_SetConfig+0x6c>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	4a27      	ldr	r2, [pc, #156]	; (8007820 <TIM_OC2_SetConfig+0x104>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d10d      	bne.n	80077a4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800778e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	68db      	ldr	r3, [r3, #12]
 8007794:	011b      	lsls	r3, r3, #4
 8007796:	697a      	ldr	r2, [r7, #20]
 8007798:	4313      	orrs	r3, r2
 800779a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	4a1d      	ldr	r2, [pc, #116]	; (800781c <TIM_OC2_SetConfig+0x100>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d00f      	beq.n	80077cc <TIM_OC2_SetConfig+0xb0>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	4a1c      	ldr	r2, [pc, #112]	; (8007820 <TIM_OC2_SetConfig+0x104>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d00b      	beq.n	80077cc <TIM_OC2_SetConfig+0xb0>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	4a1b      	ldr	r2, [pc, #108]	; (8007824 <TIM_OC2_SetConfig+0x108>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d007      	beq.n	80077cc <TIM_OC2_SetConfig+0xb0>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	4a1a      	ldr	r2, [pc, #104]	; (8007828 <TIM_OC2_SetConfig+0x10c>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d003      	beq.n	80077cc <TIM_OC2_SetConfig+0xb0>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	4a19      	ldr	r2, [pc, #100]	; (800782c <TIM_OC2_SetConfig+0x110>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d113      	bne.n	80077f4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80077d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80077da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	695b      	ldr	r3, [r3, #20]
 80077e0:	009b      	lsls	r3, r3, #2
 80077e2:	693a      	ldr	r2, [r7, #16]
 80077e4:	4313      	orrs	r3, r2
 80077e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	699b      	ldr	r3, [r3, #24]
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	693a      	ldr	r2, [r7, #16]
 80077f0:	4313      	orrs	r3, r2
 80077f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	693a      	ldr	r2, [r7, #16]
 80077f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	68fa      	ldr	r2, [r7, #12]
 80077fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	685a      	ldr	r2, [r3, #4]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	697a      	ldr	r2, [r7, #20]
 800780c:	621a      	str	r2, [r3, #32]
}
 800780e:	bf00      	nop
 8007810:	371c      	adds	r7, #28
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr
 800781a:	bf00      	nop
 800781c:	40012c00 	.word	0x40012c00
 8007820:	40013400 	.word	0x40013400
 8007824:	40014000 	.word	0x40014000
 8007828:	40014400 	.word	0x40014400
 800782c:	40014800 	.word	0x40014800

08007830 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007830:	b480      	push	{r7}
 8007832:	b087      	sub	sp, #28
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6a1b      	ldr	r3, [r3, #32]
 800783e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6a1b      	ldr	r3, [r3, #32]
 800784a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	69db      	ldr	r3, [r3, #28]
 8007856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800785e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f023 0303 	bic.w	r3, r3, #3
 800786a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	68fa      	ldr	r2, [r7, #12]
 8007872:	4313      	orrs	r3, r2
 8007874:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800787c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	021b      	lsls	r3, r3, #8
 8007884:	697a      	ldr	r2, [r7, #20]
 8007886:	4313      	orrs	r3, r2
 8007888:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	4a27      	ldr	r2, [pc, #156]	; (800792c <TIM_OC3_SetConfig+0xfc>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d003      	beq.n	800789a <TIM_OC3_SetConfig+0x6a>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	4a26      	ldr	r2, [pc, #152]	; (8007930 <TIM_OC3_SetConfig+0x100>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d10d      	bne.n	80078b6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80078a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	021b      	lsls	r3, r3, #8
 80078a8:	697a      	ldr	r2, [r7, #20]
 80078aa:	4313      	orrs	r3, r2
 80078ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80078b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	4a1c      	ldr	r2, [pc, #112]	; (800792c <TIM_OC3_SetConfig+0xfc>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d00f      	beq.n	80078de <TIM_OC3_SetConfig+0xae>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	4a1b      	ldr	r2, [pc, #108]	; (8007930 <TIM_OC3_SetConfig+0x100>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d00b      	beq.n	80078de <TIM_OC3_SetConfig+0xae>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	4a1a      	ldr	r2, [pc, #104]	; (8007934 <TIM_OC3_SetConfig+0x104>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d007      	beq.n	80078de <TIM_OC3_SetConfig+0xae>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	4a19      	ldr	r2, [pc, #100]	; (8007938 <TIM_OC3_SetConfig+0x108>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d003      	beq.n	80078de <TIM_OC3_SetConfig+0xae>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	4a18      	ldr	r2, [pc, #96]	; (800793c <TIM_OC3_SetConfig+0x10c>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d113      	bne.n	8007906 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80078ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	695b      	ldr	r3, [r3, #20]
 80078f2:	011b      	lsls	r3, r3, #4
 80078f4:	693a      	ldr	r2, [r7, #16]
 80078f6:	4313      	orrs	r3, r2
 80078f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	699b      	ldr	r3, [r3, #24]
 80078fe:	011b      	lsls	r3, r3, #4
 8007900:	693a      	ldr	r2, [r7, #16]
 8007902:	4313      	orrs	r3, r2
 8007904:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	693a      	ldr	r2, [r7, #16]
 800790a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	68fa      	ldr	r2, [r7, #12]
 8007910:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	685a      	ldr	r2, [r3, #4]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	697a      	ldr	r2, [r7, #20]
 800791e:	621a      	str	r2, [r3, #32]
}
 8007920:	bf00      	nop
 8007922:	371c      	adds	r7, #28
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr
 800792c:	40012c00 	.word	0x40012c00
 8007930:	40013400 	.word	0x40013400
 8007934:	40014000 	.word	0x40014000
 8007938:	40014400 	.word	0x40014400
 800793c:	40014800 	.word	0x40014800

08007940 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007940:	b480      	push	{r7}
 8007942:	b087      	sub	sp, #28
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6a1b      	ldr	r3, [r3, #32]
 800794e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6a1b      	ldr	r3, [r3, #32]
 800795a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	69db      	ldr	r3, [r3, #28]
 8007966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800796e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007972:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800797a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	021b      	lsls	r3, r3, #8
 8007982:	68fa      	ldr	r2, [r7, #12]
 8007984:	4313      	orrs	r3, r2
 8007986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800798e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	031b      	lsls	r3, r3, #12
 8007996:	693a      	ldr	r2, [r7, #16]
 8007998:	4313      	orrs	r3, r2
 800799a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	4a18      	ldr	r2, [pc, #96]	; (8007a00 <TIM_OC4_SetConfig+0xc0>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d00f      	beq.n	80079c4 <TIM_OC4_SetConfig+0x84>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	4a17      	ldr	r2, [pc, #92]	; (8007a04 <TIM_OC4_SetConfig+0xc4>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d00b      	beq.n	80079c4 <TIM_OC4_SetConfig+0x84>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	4a16      	ldr	r2, [pc, #88]	; (8007a08 <TIM_OC4_SetConfig+0xc8>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d007      	beq.n	80079c4 <TIM_OC4_SetConfig+0x84>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	4a15      	ldr	r2, [pc, #84]	; (8007a0c <TIM_OC4_SetConfig+0xcc>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d003      	beq.n	80079c4 <TIM_OC4_SetConfig+0x84>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	4a14      	ldr	r2, [pc, #80]	; (8007a10 <TIM_OC4_SetConfig+0xd0>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d109      	bne.n	80079d8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	695b      	ldr	r3, [r3, #20]
 80079d0:	019b      	lsls	r3, r3, #6
 80079d2:	697a      	ldr	r2, [r7, #20]
 80079d4:	4313      	orrs	r3, r2
 80079d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	697a      	ldr	r2, [r7, #20]
 80079dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	68fa      	ldr	r2, [r7, #12]
 80079e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	685a      	ldr	r2, [r3, #4]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	693a      	ldr	r2, [r7, #16]
 80079f0:	621a      	str	r2, [r3, #32]
}
 80079f2:	bf00      	nop
 80079f4:	371c      	adds	r7, #28
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr
 80079fe:	bf00      	nop
 8007a00:	40012c00 	.word	0x40012c00
 8007a04:	40013400 	.word	0x40013400
 8007a08:	40014000 	.word	0x40014000
 8007a0c:	40014400 	.word	0x40014400
 8007a10:	40014800 	.word	0x40014800

08007a14 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007a14:	b480      	push	{r7}
 8007a16:	b087      	sub	sp, #28
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6a1b      	ldr	r3, [r3, #32]
 8007a22:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6a1b      	ldr	r3, [r3, #32]
 8007a2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	68fa      	ldr	r2, [r7, #12]
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007a58:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	041b      	lsls	r3, r3, #16
 8007a60:	693a      	ldr	r2, [r7, #16]
 8007a62:	4313      	orrs	r3, r2
 8007a64:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4a17      	ldr	r2, [pc, #92]	; (8007ac8 <TIM_OC5_SetConfig+0xb4>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d00f      	beq.n	8007a8e <TIM_OC5_SetConfig+0x7a>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	4a16      	ldr	r2, [pc, #88]	; (8007acc <TIM_OC5_SetConfig+0xb8>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d00b      	beq.n	8007a8e <TIM_OC5_SetConfig+0x7a>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	4a15      	ldr	r2, [pc, #84]	; (8007ad0 <TIM_OC5_SetConfig+0xbc>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d007      	beq.n	8007a8e <TIM_OC5_SetConfig+0x7a>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	4a14      	ldr	r2, [pc, #80]	; (8007ad4 <TIM_OC5_SetConfig+0xc0>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d003      	beq.n	8007a8e <TIM_OC5_SetConfig+0x7a>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4a13      	ldr	r2, [pc, #76]	; (8007ad8 <TIM_OC5_SetConfig+0xc4>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d109      	bne.n	8007aa2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a94:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	695b      	ldr	r3, [r3, #20]
 8007a9a:	021b      	lsls	r3, r3, #8
 8007a9c:	697a      	ldr	r2, [r7, #20]
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	697a      	ldr	r2, [r7, #20]
 8007aa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	68fa      	ldr	r2, [r7, #12]
 8007aac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	685a      	ldr	r2, [r3, #4]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	693a      	ldr	r2, [r7, #16]
 8007aba:	621a      	str	r2, [r3, #32]
}
 8007abc:	bf00      	nop
 8007abe:	371c      	adds	r7, #28
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr
 8007ac8:	40012c00 	.word	0x40012c00
 8007acc:	40013400 	.word	0x40013400
 8007ad0:	40014000 	.word	0x40014000
 8007ad4:	40014400 	.word	0x40014400
 8007ad8:	40014800 	.word	0x40014800

08007adc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b087      	sub	sp, #28
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6a1b      	ldr	r3, [r3, #32]
 8007aea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6a1b      	ldr	r3, [r3, #32]
 8007af6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	021b      	lsls	r3, r3, #8
 8007b16:	68fa      	ldr	r2, [r7, #12]
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007b22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	689b      	ldr	r3, [r3, #8]
 8007b28:	051b      	lsls	r3, r3, #20
 8007b2a:	693a      	ldr	r2, [r7, #16]
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	4a18      	ldr	r2, [pc, #96]	; (8007b94 <TIM_OC6_SetConfig+0xb8>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d00f      	beq.n	8007b58 <TIM_OC6_SetConfig+0x7c>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	4a17      	ldr	r2, [pc, #92]	; (8007b98 <TIM_OC6_SetConfig+0xbc>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d00b      	beq.n	8007b58 <TIM_OC6_SetConfig+0x7c>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	4a16      	ldr	r2, [pc, #88]	; (8007b9c <TIM_OC6_SetConfig+0xc0>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d007      	beq.n	8007b58 <TIM_OC6_SetConfig+0x7c>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	4a15      	ldr	r2, [pc, #84]	; (8007ba0 <TIM_OC6_SetConfig+0xc4>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d003      	beq.n	8007b58 <TIM_OC6_SetConfig+0x7c>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	4a14      	ldr	r2, [pc, #80]	; (8007ba4 <TIM_OC6_SetConfig+0xc8>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d109      	bne.n	8007b6c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b5e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	695b      	ldr	r3, [r3, #20]
 8007b64:	029b      	lsls	r3, r3, #10
 8007b66:	697a      	ldr	r2, [r7, #20]
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	697a      	ldr	r2, [r7, #20]
 8007b70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	68fa      	ldr	r2, [r7, #12]
 8007b76:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	685a      	ldr	r2, [r3, #4]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	693a      	ldr	r2, [r7, #16]
 8007b84:	621a      	str	r2, [r3, #32]
}
 8007b86:	bf00      	nop
 8007b88:	371c      	adds	r7, #28
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b90:	4770      	bx	lr
 8007b92:	bf00      	nop
 8007b94:	40012c00 	.word	0x40012c00
 8007b98:	40013400 	.word	0x40013400
 8007b9c:	40014000 	.word	0x40014000
 8007ba0:	40014400 	.word	0x40014400
 8007ba4:	40014800 	.word	0x40014800

08007ba8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b087      	sub	sp, #28
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	60b9      	str	r1, [r7, #8]
 8007bb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	6a1b      	ldr	r3, [r3, #32]
 8007bb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	6a1b      	ldr	r3, [r3, #32]
 8007bbe:	f023 0201 	bic.w	r2, r3, #1
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	699b      	ldr	r3, [r3, #24]
 8007bca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007bd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	011b      	lsls	r3, r3, #4
 8007bd8:	693a      	ldr	r2, [r7, #16]
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	f023 030a 	bic.w	r3, r3, #10
 8007be4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007be6:	697a      	ldr	r2, [r7, #20]
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	4313      	orrs	r3, r2
 8007bec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	693a      	ldr	r2, [r7, #16]
 8007bf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	697a      	ldr	r2, [r7, #20]
 8007bf8:	621a      	str	r2, [r3, #32]
}
 8007bfa:	bf00      	nop
 8007bfc:	371c      	adds	r7, #28
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c04:	4770      	bx	lr

08007c06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c06:	b480      	push	{r7}
 8007c08:	b087      	sub	sp, #28
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	60f8      	str	r0, [r7, #12]
 8007c0e:	60b9      	str	r1, [r7, #8]
 8007c10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	6a1b      	ldr	r3, [r3, #32]
 8007c16:	f023 0210 	bic.w	r2, r3, #16
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	699b      	ldr	r3, [r3, #24]
 8007c22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	6a1b      	ldr	r3, [r3, #32]
 8007c28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	031b      	lsls	r3, r3, #12
 8007c36:	697a      	ldr	r2, [r7, #20]
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007c42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	011b      	lsls	r3, r3, #4
 8007c48:	693a      	ldr	r2, [r7, #16]
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	697a      	ldr	r2, [r7, #20]
 8007c52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	693a      	ldr	r2, [r7, #16]
 8007c58:	621a      	str	r2, [r3, #32]
}
 8007c5a:	bf00      	nop
 8007c5c:	371c      	adds	r7, #28
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr

08007c66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007c66:	b480      	push	{r7}
 8007c68:	b085      	sub	sp, #20
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
 8007c6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c7e:	683a      	ldr	r2, [r7, #0]
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	4313      	orrs	r3, r2
 8007c84:	f043 0307 	orr.w	r3, r3, #7
 8007c88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	68fa      	ldr	r2, [r7, #12]
 8007c8e:	609a      	str	r2, [r3, #8]
}
 8007c90:	bf00      	nop
 8007c92:	3714      	adds	r7, #20
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr

08007c9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b087      	sub	sp, #28
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	60f8      	str	r0, [r7, #12]
 8007ca4:	60b9      	str	r1, [r7, #8]
 8007ca6:	607a      	str	r2, [r7, #4]
 8007ca8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007cb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	021a      	lsls	r2, r3, #8
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	431a      	orrs	r2, r3
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	697a      	ldr	r2, [r7, #20]
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	697a      	ldr	r2, [r7, #20]
 8007cce:	609a      	str	r2, [r3, #8]
}
 8007cd0:	bf00      	nop
 8007cd2:	371c      	adds	r7, #28
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr

08007cdc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b087      	sub	sp, #28
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	60f8      	str	r0, [r7, #12]
 8007ce4:	60b9      	str	r1, [r7, #8]
 8007ce6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	f003 031f 	and.w	r3, r3, #31
 8007cee:	2201      	movs	r2, #1
 8007cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8007cf4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	6a1a      	ldr	r2, [r3, #32]
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	43db      	mvns	r3, r3
 8007cfe:	401a      	ands	r2, r3
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	6a1a      	ldr	r2, [r3, #32]
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	f003 031f 	and.w	r3, r3, #31
 8007d0e:	6879      	ldr	r1, [r7, #4]
 8007d10:	fa01 f303 	lsl.w	r3, r1, r3
 8007d14:	431a      	orrs	r2, r3
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	621a      	str	r2, [r3, #32]
}
 8007d1a:	bf00      	nop
 8007d1c:	371c      	adds	r7, #28
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr
	...

08007d28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b085      	sub	sp, #20
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d101      	bne.n	8007d40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d3c:	2302      	movs	r3, #2
 8007d3e:	e068      	b.n	8007e12 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2201      	movs	r2, #1
 8007d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2202      	movs	r2, #2
 8007d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a2e      	ldr	r2, [pc, #184]	; (8007e20 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d004      	beq.n	8007d74 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a2d      	ldr	r2, [pc, #180]	; (8007e24 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d108      	bne.n	8007d86 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007d7a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	68fa      	ldr	r2, [r7, #12]
 8007d82:	4313      	orrs	r3, r2
 8007d84:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d8c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	68fa      	ldr	r2, [r7, #12]
 8007d94:	4313      	orrs	r3, r2
 8007d96:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	68fa      	ldr	r2, [r7, #12]
 8007d9e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a1e      	ldr	r2, [pc, #120]	; (8007e20 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d01d      	beq.n	8007de6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007db2:	d018      	beq.n	8007de6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a1b      	ldr	r2, [pc, #108]	; (8007e28 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d013      	beq.n	8007de6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4a1a      	ldr	r2, [pc, #104]	; (8007e2c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d00e      	beq.n	8007de6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a18      	ldr	r2, [pc, #96]	; (8007e30 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d009      	beq.n	8007de6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a13      	ldr	r2, [pc, #76]	; (8007e24 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d004      	beq.n	8007de6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a14      	ldr	r2, [pc, #80]	; (8007e34 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d10c      	bne.n	8007e00 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007dec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	689b      	ldr	r3, [r3, #8]
 8007df2:	68ba      	ldr	r2, [r7, #8]
 8007df4:	4313      	orrs	r3, r2
 8007df6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	68ba      	ldr	r2, [r7, #8]
 8007dfe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2201      	movs	r2, #1
 8007e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e10:	2300      	movs	r3, #0
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3714      	adds	r7, #20
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr
 8007e1e:	bf00      	nop
 8007e20:	40012c00 	.word	0x40012c00
 8007e24:	40013400 	.word	0x40013400
 8007e28:	40000400 	.word	0x40000400
 8007e2c:	40000800 	.word	0x40000800
 8007e30:	40000c00 	.word	0x40000c00
 8007e34:	40014000 	.word	0x40014000

08007e38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b083      	sub	sp, #12
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007e40:	bf00      	nop
 8007e42:	370c      	adds	r7, #12
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr

08007e4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b083      	sub	sp, #12
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e54:	bf00      	nop
 8007e56:	370c      	adds	r7, #12
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr

08007e60 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007e68:	bf00      	nop
 8007e6a:	370c      	adds	r7, #12
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr

08007e74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b082      	sub	sp, #8
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d101      	bne.n	8007e86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e82:	2301      	movs	r3, #1
 8007e84:	e040      	b.n	8007f08 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d106      	bne.n	8007e9c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2200      	movs	r2, #0
 8007e92:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f7fa fa4a 	bl	8002330 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2224      	movs	r2, #36	; 0x24
 8007ea0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	681a      	ldr	r2, [r3, #0]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f022 0201 	bic.w	r2, r2, #1
 8007eb0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 fc94 	bl	80087e0 <UART_SetConfig>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	2b01      	cmp	r3, #1
 8007ebc:	d101      	bne.n	8007ec2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	e022      	b.n	8007f08 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d002      	beq.n	8007ed0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 ff40 	bl	8008d50 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	685a      	ldr	r2, [r3, #4]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007ede:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	689a      	ldr	r2, [r3, #8]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007eee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	681a      	ldr	r2, [r3, #0]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f042 0201 	orr.w	r2, r2, #1
 8007efe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f000 ffc7 	bl	8008e94 <UART_CheckIdleState>
 8007f06:	4603      	mov	r3, r0
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3708      	adds	r7, #8
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}

08007f10 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b08a      	sub	sp, #40	; 0x28
 8007f14:	af02      	add	r7, sp, #8
 8007f16:	60f8      	str	r0, [r7, #12]
 8007f18:	60b9      	str	r1, [r7, #8]
 8007f1a:	603b      	str	r3, [r7, #0]
 8007f1c:	4613      	mov	r3, r2
 8007f1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f24:	2b20      	cmp	r3, #32
 8007f26:	f040 8082 	bne.w	800802e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d002      	beq.n	8007f36 <HAL_UART_Transmit+0x26>
 8007f30:	88fb      	ldrh	r3, [r7, #6]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d101      	bne.n	8007f3a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007f36:	2301      	movs	r3, #1
 8007f38:	e07a      	b.n	8008030 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d101      	bne.n	8007f48 <HAL_UART_Transmit+0x38>
 8007f44:	2302      	movs	r3, #2
 8007f46:	e073      	b.n	8008030 <HAL_UART_Transmit+0x120>
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2200      	movs	r2, #0
 8007f54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2221      	movs	r2, #33	; 0x21
 8007f5c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007f5e:	f7fa fcbb 	bl	80028d8 <HAL_GetTick>
 8007f62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	88fa      	ldrh	r2, [r7, #6]
 8007f68:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	88fa      	ldrh	r2, [r7, #6]
 8007f70:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f7c:	d108      	bne.n	8007f90 <HAL_UART_Transmit+0x80>
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	691b      	ldr	r3, [r3, #16]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d104      	bne.n	8007f90 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007f86:	2300      	movs	r3, #0
 8007f88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	61bb      	str	r3, [r7, #24]
 8007f8e:	e003      	b.n	8007f98 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f94:	2300      	movs	r3, #0
 8007f96:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007fa0:	e02d      	b.n	8007ffe <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	9300      	str	r3, [sp, #0]
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	2180      	movs	r1, #128	; 0x80
 8007fac:	68f8      	ldr	r0, [r7, #12]
 8007fae:	f000 ffba 	bl	8008f26 <UART_WaitOnFlagUntilTimeout>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d001      	beq.n	8007fbc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007fb8:	2303      	movs	r3, #3
 8007fba:	e039      	b.n	8008030 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8007fbc:	69fb      	ldr	r3, [r7, #28]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d10b      	bne.n	8007fda <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007fc2:	69bb      	ldr	r3, [r7, #24]
 8007fc4:	881a      	ldrh	r2, [r3, #0]
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007fce:	b292      	uxth	r2, r2
 8007fd0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007fd2:	69bb      	ldr	r3, [r7, #24]
 8007fd4:	3302      	adds	r3, #2
 8007fd6:	61bb      	str	r3, [r7, #24]
 8007fd8:	e008      	b.n	8007fec <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007fda:	69fb      	ldr	r3, [r7, #28]
 8007fdc:	781a      	ldrb	r2, [r3, #0]
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	b292      	uxth	r2, r2
 8007fe4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007fe6:	69fb      	ldr	r3, [r7, #28]
 8007fe8:	3301      	adds	r3, #1
 8007fea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	3b01      	subs	r3, #1
 8007ff6:	b29a      	uxth	r2, r3
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008004:	b29b      	uxth	r3, r3
 8008006:	2b00      	cmp	r3, #0
 8008008:	d1cb      	bne.n	8007fa2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	9300      	str	r3, [sp, #0]
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	2200      	movs	r2, #0
 8008012:	2140      	movs	r1, #64	; 0x40
 8008014:	68f8      	ldr	r0, [r7, #12]
 8008016:	f000 ff86 	bl	8008f26 <UART_WaitOnFlagUntilTimeout>
 800801a:	4603      	mov	r3, r0
 800801c:	2b00      	cmp	r3, #0
 800801e:	d001      	beq.n	8008024 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8008020:	2303      	movs	r3, #3
 8008022:	e005      	b.n	8008030 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2220      	movs	r2, #32
 8008028:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800802a:	2300      	movs	r3, #0
 800802c:	e000      	b.n	8008030 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800802e:	2302      	movs	r3, #2
  }
}
 8008030:	4618      	mov	r0, r3
 8008032:	3720      	adds	r7, #32
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}

08008038 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b08a      	sub	sp, #40	; 0x28
 800803c:	af02      	add	r7, sp, #8
 800803e:	60f8      	str	r0, [r7, #12]
 8008040:	60b9      	str	r1, [r7, #8]
 8008042:	603b      	str	r3, [r7, #0]
 8008044:	4613      	mov	r3, r2
 8008046:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800804c:	2b20      	cmp	r3, #32
 800804e:	f040 80bf 	bne.w	80081d0 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d002      	beq.n	800805e <HAL_UART_Receive+0x26>
 8008058:	88fb      	ldrh	r3, [r7, #6]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d101      	bne.n	8008062 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800805e:	2301      	movs	r3, #1
 8008060:	e0b7      	b.n	80081d2 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008068:	2b01      	cmp	r3, #1
 800806a:	d101      	bne.n	8008070 <HAL_UART_Receive+0x38>
 800806c:	2302      	movs	r3, #2
 800806e:	e0b0      	b.n	80081d2 <HAL_UART_Receive+0x19a>
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2201      	movs	r2, #1
 8008074:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2200      	movs	r2, #0
 800807c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2222      	movs	r2, #34	; 0x22
 8008084:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2200      	movs	r2, #0
 800808a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800808c:	f7fa fc24 	bl	80028d8 <HAL_GetTick>
 8008090:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	88fa      	ldrh	r2, [r7, #6]
 8008096:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	88fa      	ldrh	r2, [r7, #6]
 800809e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	689b      	ldr	r3, [r3, #8]
 80080a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080aa:	d10e      	bne.n	80080ca <HAL_UART_Receive+0x92>
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	691b      	ldr	r3, [r3, #16]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d105      	bne.n	80080c0 <HAL_UART_Receive+0x88>
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80080ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80080be:	e02d      	b.n	800811c <HAL_UART_Receive+0xe4>
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	22ff      	movs	r2, #255	; 0xff
 80080c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80080c8:	e028      	b.n	800811c <HAL_UART_Receive+0xe4>
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	689b      	ldr	r3, [r3, #8]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d10d      	bne.n	80080ee <HAL_UART_Receive+0xb6>
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	691b      	ldr	r3, [r3, #16]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d104      	bne.n	80080e4 <HAL_UART_Receive+0xac>
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	22ff      	movs	r2, #255	; 0xff
 80080de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80080e2:	e01b      	b.n	800811c <HAL_UART_Receive+0xe4>
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	227f      	movs	r2, #127	; 0x7f
 80080e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80080ec:	e016      	b.n	800811c <HAL_UART_Receive+0xe4>
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	689b      	ldr	r3, [r3, #8]
 80080f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80080f6:	d10d      	bne.n	8008114 <HAL_UART_Receive+0xdc>
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	691b      	ldr	r3, [r3, #16]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d104      	bne.n	800810a <HAL_UART_Receive+0xd2>
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	227f      	movs	r2, #127	; 0x7f
 8008104:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008108:	e008      	b.n	800811c <HAL_UART_Receive+0xe4>
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	223f      	movs	r2, #63	; 0x3f
 800810e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008112:	e003      	b.n	800811c <HAL_UART_Receive+0xe4>
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	2200      	movs	r2, #0
 8008118:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008122:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	689b      	ldr	r3, [r3, #8]
 8008128:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800812c:	d108      	bne.n	8008140 <HAL_UART_Receive+0x108>
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	691b      	ldr	r3, [r3, #16]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d104      	bne.n	8008140 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8008136:	2300      	movs	r3, #0
 8008138:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	61bb      	str	r3, [r7, #24]
 800813e:	e003      	b.n	8008148 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008144:	2300      	movs	r3, #0
 8008146:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2200      	movs	r2, #0
 800814c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008150:	e033      	b.n	80081ba <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	9300      	str	r3, [sp, #0]
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	2200      	movs	r2, #0
 800815a:	2120      	movs	r1, #32
 800815c:	68f8      	ldr	r0, [r7, #12]
 800815e:	f000 fee2 	bl	8008f26 <UART_WaitOnFlagUntilTimeout>
 8008162:	4603      	mov	r3, r0
 8008164:	2b00      	cmp	r3, #0
 8008166:	d001      	beq.n	800816c <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8008168:	2303      	movs	r3, #3
 800816a:	e032      	b.n	80081d2 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 800816c:	69fb      	ldr	r3, [r7, #28]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d10c      	bne.n	800818c <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008178:	b29a      	uxth	r2, r3
 800817a:	8a7b      	ldrh	r3, [r7, #18]
 800817c:	4013      	ands	r3, r2
 800817e:	b29a      	uxth	r2, r3
 8008180:	69bb      	ldr	r3, [r7, #24]
 8008182:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008184:	69bb      	ldr	r3, [r7, #24]
 8008186:	3302      	adds	r3, #2
 8008188:	61bb      	str	r3, [r7, #24]
 800818a:	e00d      	b.n	80081a8 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008192:	b29b      	uxth	r3, r3
 8008194:	b2da      	uxtb	r2, r3
 8008196:	8a7b      	ldrh	r3, [r7, #18]
 8008198:	b2db      	uxtb	r3, r3
 800819a:	4013      	ands	r3, r2
 800819c:	b2da      	uxtb	r2, r3
 800819e:	69fb      	ldr	r3, [r7, #28]
 80081a0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80081a2:	69fb      	ldr	r3, [r7, #28]
 80081a4:	3301      	adds	r3, #1
 80081a6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	3b01      	subs	r3, #1
 80081b2:	b29a      	uxth	r2, r3
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d1c5      	bne.n	8008152 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2220      	movs	r2, #32
 80081ca:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80081cc:	2300      	movs	r3, #0
 80081ce:	e000      	b.n	80081d2 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80081d0:	2302      	movs	r3, #2
  }
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3720      	adds	r7, #32
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
	...

080081dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b0ba      	sub	sp, #232	; 0xe8
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	69db      	ldr	r3, [r3, #28]
 80081ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008202:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008206:	f640 030f 	movw	r3, #2063	; 0x80f
 800820a:	4013      	ands	r3, r2
 800820c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008210:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008214:	2b00      	cmp	r3, #0
 8008216:	d115      	bne.n	8008244 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008218:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800821c:	f003 0320 	and.w	r3, r3, #32
 8008220:	2b00      	cmp	r3, #0
 8008222:	d00f      	beq.n	8008244 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008228:	f003 0320 	and.w	r3, r3, #32
 800822c:	2b00      	cmp	r3, #0
 800822e:	d009      	beq.n	8008244 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008234:	2b00      	cmp	r3, #0
 8008236:	f000 82a6 	beq.w	8008786 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	4798      	blx	r3
      }
      return;
 8008242:	e2a0      	b.n	8008786 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8008244:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008248:	2b00      	cmp	r3, #0
 800824a:	f000 8117 	beq.w	800847c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800824e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008252:	f003 0301 	and.w	r3, r3, #1
 8008256:	2b00      	cmp	r3, #0
 8008258:	d106      	bne.n	8008268 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800825a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800825e:	4b85      	ldr	r3, [pc, #532]	; (8008474 <HAL_UART_IRQHandler+0x298>)
 8008260:	4013      	ands	r3, r2
 8008262:	2b00      	cmp	r3, #0
 8008264:	f000 810a 	beq.w	800847c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800826c:	f003 0301 	and.w	r3, r3, #1
 8008270:	2b00      	cmp	r3, #0
 8008272:	d011      	beq.n	8008298 <HAL_UART_IRQHandler+0xbc>
 8008274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800827c:	2b00      	cmp	r3, #0
 800827e:	d00b      	beq.n	8008298 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	2201      	movs	r2, #1
 8008286:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800828e:	f043 0201 	orr.w	r2, r3, #1
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800829c:	f003 0302 	and.w	r3, r3, #2
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d011      	beq.n	80082c8 <HAL_UART_IRQHandler+0xec>
 80082a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082a8:	f003 0301 	and.w	r3, r3, #1
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d00b      	beq.n	80082c8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	2202      	movs	r2, #2
 80082b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082be:	f043 0204 	orr.w	r2, r3, #4
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80082c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082cc:	f003 0304 	and.w	r3, r3, #4
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d011      	beq.n	80082f8 <HAL_UART_IRQHandler+0x11c>
 80082d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082d8:	f003 0301 	and.w	r3, r3, #1
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d00b      	beq.n	80082f8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	2204      	movs	r2, #4
 80082e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082ee:	f043 0202 	orr.w	r2, r3, #2
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80082f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082fc:	f003 0308 	and.w	r3, r3, #8
 8008300:	2b00      	cmp	r3, #0
 8008302:	d017      	beq.n	8008334 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008304:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008308:	f003 0320 	and.w	r3, r3, #32
 800830c:	2b00      	cmp	r3, #0
 800830e:	d105      	bne.n	800831c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008310:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008314:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008318:	2b00      	cmp	r3, #0
 800831a:	d00b      	beq.n	8008334 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	2208      	movs	r2, #8
 8008322:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800832a:	f043 0208 	orr.w	r2, r3, #8
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008338:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800833c:	2b00      	cmp	r3, #0
 800833e:	d012      	beq.n	8008366 <HAL_UART_IRQHandler+0x18a>
 8008340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008344:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008348:	2b00      	cmp	r3, #0
 800834a:	d00c      	beq.n	8008366 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008354:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800835c:	f043 0220 	orr.w	r2, r3, #32
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800836c:	2b00      	cmp	r3, #0
 800836e:	f000 820c 	beq.w	800878a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008376:	f003 0320 	and.w	r3, r3, #32
 800837a:	2b00      	cmp	r3, #0
 800837c:	d00d      	beq.n	800839a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800837e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008382:	f003 0320 	and.w	r3, r3, #32
 8008386:	2b00      	cmp	r3, #0
 8008388:	d007      	beq.n	800839a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800838e:	2b00      	cmp	r3, #0
 8008390:	d003      	beq.n	800839a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	689b      	ldr	r3, [r3, #8]
 80083aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083ae:	2b40      	cmp	r3, #64	; 0x40
 80083b0:	d005      	beq.n	80083be <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80083b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80083b6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d04f      	beq.n	800845e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 fe75 	bl	80090ae <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	689b      	ldr	r3, [r3, #8]
 80083ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083ce:	2b40      	cmp	r3, #64	; 0x40
 80083d0:	d141      	bne.n	8008456 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	3308      	adds	r3, #8
 80083d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80083e0:	e853 3f00 	ldrex	r3, [r3]
 80083e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80083e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80083ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	3308      	adds	r3, #8
 80083fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80083fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008402:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008406:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800840a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800840e:	e841 2300 	strex	r3, r2, [r1]
 8008412:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008416:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800841a:	2b00      	cmp	r3, #0
 800841c:	d1d9      	bne.n	80083d2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008422:	2b00      	cmp	r3, #0
 8008424:	d013      	beq.n	800844e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800842a:	4a13      	ldr	r2, [pc, #76]	; (8008478 <HAL_UART_IRQHandler+0x29c>)
 800842c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008432:	4618      	mov	r0, r3
 8008434:	f7fc f906 	bl	8004644 <HAL_DMA_Abort_IT>
 8008438:	4603      	mov	r3, r0
 800843a:	2b00      	cmp	r3, #0
 800843c:	d017      	beq.n	800846e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008444:	687a      	ldr	r2, [r7, #4]
 8008446:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8008448:	4610      	mov	r0, r2
 800844a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800844c:	e00f      	b.n	800846e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 f9b0 	bl	80087b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008454:	e00b      	b.n	800846e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 f9ac 	bl	80087b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800845c:	e007      	b.n	800846e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f000 f9a8 	bl	80087b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2200      	movs	r2, #0
 8008468:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800846c:	e18d      	b.n	800878a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800846e:	bf00      	nop
    return;
 8008470:	e18b      	b.n	800878a <HAL_UART_IRQHandler+0x5ae>
 8008472:	bf00      	nop
 8008474:	04000120 	.word	0x04000120
 8008478:	08009175 	.word	0x08009175

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008480:	2b01      	cmp	r3, #1
 8008482:	f040 8146 	bne.w	8008712 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800848a:	f003 0310 	and.w	r3, r3, #16
 800848e:	2b00      	cmp	r3, #0
 8008490:	f000 813f 	beq.w	8008712 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008498:	f003 0310 	and.w	r3, r3, #16
 800849c:	2b00      	cmp	r3, #0
 800849e:	f000 8138 	beq.w	8008712 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	2210      	movs	r2, #16
 80084a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084b4:	2b40      	cmp	r3, #64	; 0x40
 80084b6:	f040 80b4 	bne.w	8008622 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80084c6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	f000 815f 	beq.w	800878e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80084d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80084da:	429a      	cmp	r2, r3
 80084dc:	f080 8157 	bcs.w	800878e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80084e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f003 0320 	and.w	r3, r3, #32
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	f040 8085 	bne.w	8008606 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008504:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008508:	e853 3f00 	ldrex	r3, [r3]
 800850c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008510:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008514:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008518:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	461a      	mov	r2, r3
 8008522:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008526:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800852a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800852e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008532:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008536:	e841 2300 	strex	r3, r2, [r1]
 800853a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800853e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008542:	2b00      	cmp	r3, #0
 8008544:	d1da      	bne.n	80084fc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	3308      	adds	r3, #8
 800854c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800854e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008550:	e853 3f00 	ldrex	r3, [r3]
 8008554:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008556:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008558:	f023 0301 	bic.w	r3, r3, #1
 800855c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	3308      	adds	r3, #8
 8008566:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800856a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800856e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008570:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008572:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008576:	e841 2300 	strex	r3, r2, [r1]
 800857a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800857c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800857e:	2b00      	cmp	r3, #0
 8008580:	d1e1      	bne.n	8008546 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	3308      	adds	r3, #8
 8008588:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800858a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800858c:	e853 3f00 	ldrex	r3, [r3]
 8008590:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008592:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008594:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008598:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	3308      	adds	r3, #8
 80085a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80085a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80085a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80085ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80085ae:	e841 2300 	strex	r3, r2, [r1]
 80085b2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80085b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d1e3      	bne.n	8008582 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2220      	movs	r2, #32
 80085be:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2200      	movs	r2, #0
 80085c4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085ce:	e853 3f00 	ldrex	r3, [r3]
 80085d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80085d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085d6:	f023 0310 	bic.w	r3, r3, #16
 80085da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	461a      	mov	r2, r3
 80085e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80085e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80085ea:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80085ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80085f0:	e841 2300 	strex	r3, r2, [r1]
 80085f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80085f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d1e4      	bne.n	80085c6 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008600:	4618      	mov	r0, r3
 8008602:	f7fb ffe1 	bl	80045c8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008612:	b29b      	uxth	r3, r3
 8008614:	1ad3      	subs	r3, r2, r3
 8008616:	b29b      	uxth	r3, r3
 8008618:	4619      	mov	r1, r3
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f000 f8d4 	bl	80087c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008620:	e0b5      	b.n	800878e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800862e:	b29b      	uxth	r3, r3
 8008630:	1ad3      	subs	r3, r2, r3
 8008632:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800863c:	b29b      	uxth	r3, r3
 800863e:	2b00      	cmp	r3, #0
 8008640:	f000 80a7 	beq.w	8008792 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8008644:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008648:	2b00      	cmp	r3, #0
 800864a:	f000 80a2 	beq.w	8008792 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008656:	e853 3f00 	ldrex	r3, [r3]
 800865a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800865c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800865e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008662:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	461a      	mov	r2, r3
 800866c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008670:	647b      	str	r3, [r7, #68]	; 0x44
 8008672:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008674:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008676:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008678:	e841 2300 	strex	r3, r2, [r1]
 800867c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800867e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008680:	2b00      	cmp	r3, #0
 8008682:	d1e4      	bne.n	800864e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	3308      	adds	r3, #8
 800868a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800868c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868e:	e853 3f00 	ldrex	r3, [r3]
 8008692:	623b      	str	r3, [r7, #32]
   return(result);
 8008694:	6a3b      	ldr	r3, [r7, #32]
 8008696:	f023 0301 	bic.w	r3, r3, #1
 800869a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	3308      	adds	r3, #8
 80086a4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80086a8:	633a      	str	r2, [r7, #48]	; 0x30
 80086aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80086ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086b0:	e841 2300 	strex	r3, r2, [r1]
 80086b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80086b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d1e3      	bne.n	8008684 <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2220      	movs	r2, #32
 80086c0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2200      	movs	r2, #0
 80086c6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2200      	movs	r2, #0
 80086cc:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	e853 3f00 	ldrex	r3, [r3]
 80086da:	60fb      	str	r3, [r7, #12]
   return(result);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f023 0310 	bic.w	r3, r3, #16
 80086e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	461a      	mov	r2, r3
 80086ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80086f0:	61fb      	str	r3, [r7, #28]
 80086f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f4:	69b9      	ldr	r1, [r7, #24]
 80086f6:	69fa      	ldr	r2, [r7, #28]
 80086f8:	e841 2300 	strex	r3, r2, [r1]
 80086fc:	617b      	str	r3, [r7, #20]
   return(result);
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d1e4      	bne.n	80086ce <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008704:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008708:	4619      	mov	r1, r3
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 f85c 	bl	80087c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008710:	e03f      	b.n	8008792 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008716:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800871a:	2b00      	cmp	r3, #0
 800871c:	d00e      	beq.n	800873c <HAL_UART_IRQHandler+0x560>
 800871e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008726:	2b00      	cmp	r3, #0
 8008728:	d008      	beq.n	800873c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008732:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 fd5d 	bl	80091f4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800873a:	e02d      	b.n	8008798 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800873c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008744:	2b00      	cmp	r3, #0
 8008746:	d00e      	beq.n	8008766 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800874c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008750:	2b00      	cmp	r3, #0
 8008752:	d008      	beq.n	8008766 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008758:	2b00      	cmp	r3, #0
 800875a:	d01c      	beq.n	8008796 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	4798      	blx	r3
    }
    return;
 8008764:	e017      	b.n	8008796 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800876a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800876e:	2b00      	cmp	r3, #0
 8008770:	d012      	beq.n	8008798 <HAL_UART_IRQHandler+0x5bc>
 8008772:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800877a:	2b00      	cmp	r3, #0
 800877c:	d00c      	beq.n	8008798 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f000 fd0e 	bl	80091a0 <UART_EndTransmit_IT>
    return;
 8008784:	e008      	b.n	8008798 <HAL_UART_IRQHandler+0x5bc>
      return;
 8008786:	bf00      	nop
 8008788:	e006      	b.n	8008798 <HAL_UART_IRQHandler+0x5bc>
    return;
 800878a:	bf00      	nop
 800878c:	e004      	b.n	8008798 <HAL_UART_IRQHandler+0x5bc>
      return;
 800878e:	bf00      	nop
 8008790:	e002      	b.n	8008798 <HAL_UART_IRQHandler+0x5bc>
      return;
 8008792:	bf00      	nop
 8008794:	e000      	b.n	8008798 <HAL_UART_IRQHandler+0x5bc>
    return;
 8008796:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8008798:	37e8      	adds	r7, #232	; 0xe8
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
 800879e:	bf00      	nop

080087a0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b083      	sub	sp, #12
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80087a8:	bf00      	nop
 80087aa:	370c      	adds	r7, #12
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr

080087b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b083      	sub	sp, #12
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80087bc:	bf00      	nop
 80087be:	370c      	adds	r7, #12
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr

080087c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b083      	sub	sp, #12
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	460b      	mov	r3, r1
 80087d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80087d4:	bf00      	nop
 80087d6:	370c      	adds	r7, #12
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80087e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80087e4:	b08a      	sub	sp, #40	; 0x28
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80087ea:	2300      	movs	r3, #0
 80087ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	689a      	ldr	r2, [r3, #8]
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	691b      	ldr	r3, [r3, #16]
 80087f8:	431a      	orrs	r2, r3
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	695b      	ldr	r3, [r3, #20]
 80087fe:	431a      	orrs	r2, r3
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	69db      	ldr	r3, [r3, #28]
 8008804:	4313      	orrs	r3, r2
 8008806:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	681a      	ldr	r2, [r3, #0]
 800880e:	4ba4      	ldr	r3, [pc, #656]	; (8008aa0 <UART_SetConfig+0x2c0>)
 8008810:	4013      	ands	r3, r2
 8008812:	68fa      	ldr	r2, [r7, #12]
 8008814:	6812      	ldr	r2, [r2, #0]
 8008816:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008818:	430b      	orrs	r3, r1
 800881a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	685b      	ldr	r3, [r3, #4]
 8008822:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	68da      	ldr	r2, [r3, #12]
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	430a      	orrs	r2, r1
 8008830:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	699b      	ldr	r3, [r3, #24]
 8008836:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4a99      	ldr	r2, [pc, #612]	; (8008aa4 <UART_SetConfig+0x2c4>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d004      	beq.n	800884c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	6a1b      	ldr	r3, [r3, #32]
 8008846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008848:	4313      	orrs	r3, r2
 800884a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	689b      	ldr	r3, [r3, #8]
 8008852:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800885c:	430a      	orrs	r2, r1
 800885e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4a90      	ldr	r2, [pc, #576]	; (8008aa8 <UART_SetConfig+0x2c8>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d126      	bne.n	80088b8 <UART_SetConfig+0xd8>
 800886a:	4b90      	ldr	r3, [pc, #576]	; (8008aac <UART_SetConfig+0x2cc>)
 800886c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008870:	f003 0303 	and.w	r3, r3, #3
 8008874:	2b03      	cmp	r3, #3
 8008876:	d81b      	bhi.n	80088b0 <UART_SetConfig+0xd0>
 8008878:	a201      	add	r2, pc, #4	; (adr r2, 8008880 <UART_SetConfig+0xa0>)
 800887a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800887e:	bf00      	nop
 8008880:	08008891 	.word	0x08008891
 8008884:	080088a1 	.word	0x080088a1
 8008888:	08008899 	.word	0x08008899
 800888c:	080088a9 	.word	0x080088a9
 8008890:	2301      	movs	r3, #1
 8008892:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008896:	e116      	b.n	8008ac6 <UART_SetConfig+0x2e6>
 8008898:	2302      	movs	r3, #2
 800889a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800889e:	e112      	b.n	8008ac6 <UART_SetConfig+0x2e6>
 80088a0:	2304      	movs	r3, #4
 80088a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088a6:	e10e      	b.n	8008ac6 <UART_SetConfig+0x2e6>
 80088a8:	2308      	movs	r3, #8
 80088aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088ae:	e10a      	b.n	8008ac6 <UART_SetConfig+0x2e6>
 80088b0:	2310      	movs	r3, #16
 80088b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088b6:	e106      	b.n	8008ac6 <UART_SetConfig+0x2e6>
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a7c      	ldr	r2, [pc, #496]	; (8008ab0 <UART_SetConfig+0x2d0>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d138      	bne.n	8008934 <UART_SetConfig+0x154>
 80088c2:	4b7a      	ldr	r3, [pc, #488]	; (8008aac <UART_SetConfig+0x2cc>)
 80088c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088c8:	f003 030c 	and.w	r3, r3, #12
 80088cc:	2b0c      	cmp	r3, #12
 80088ce:	d82d      	bhi.n	800892c <UART_SetConfig+0x14c>
 80088d0:	a201      	add	r2, pc, #4	; (adr r2, 80088d8 <UART_SetConfig+0xf8>)
 80088d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088d6:	bf00      	nop
 80088d8:	0800890d 	.word	0x0800890d
 80088dc:	0800892d 	.word	0x0800892d
 80088e0:	0800892d 	.word	0x0800892d
 80088e4:	0800892d 	.word	0x0800892d
 80088e8:	0800891d 	.word	0x0800891d
 80088ec:	0800892d 	.word	0x0800892d
 80088f0:	0800892d 	.word	0x0800892d
 80088f4:	0800892d 	.word	0x0800892d
 80088f8:	08008915 	.word	0x08008915
 80088fc:	0800892d 	.word	0x0800892d
 8008900:	0800892d 	.word	0x0800892d
 8008904:	0800892d 	.word	0x0800892d
 8008908:	08008925 	.word	0x08008925
 800890c:	2300      	movs	r3, #0
 800890e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008912:	e0d8      	b.n	8008ac6 <UART_SetConfig+0x2e6>
 8008914:	2302      	movs	r3, #2
 8008916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800891a:	e0d4      	b.n	8008ac6 <UART_SetConfig+0x2e6>
 800891c:	2304      	movs	r3, #4
 800891e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008922:	e0d0      	b.n	8008ac6 <UART_SetConfig+0x2e6>
 8008924:	2308      	movs	r3, #8
 8008926:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800892a:	e0cc      	b.n	8008ac6 <UART_SetConfig+0x2e6>
 800892c:	2310      	movs	r3, #16
 800892e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008932:	e0c8      	b.n	8008ac6 <UART_SetConfig+0x2e6>
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4a5e      	ldr	r2, [pc, #376]	; (8008ab4 <UART_SetConfig+0x2d4>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d125      	bne.n	800898a <UART_SetConfig+0x1aa>
 800893e:	4b5b      	ldr	r3, [pc, #364]	; (8008aac <UART_SetConfig+0x2cc>)
 8008940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008944:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008948:	2b30      	cmp	r3, #48	; 0x30
 800894a:	d016      	beq.n	800897a <UART_SetConfig+0x19a>
 800894c:	2b30      	cmp	r3, #48	; 0x30
 800894e:	d818      	bhi.n	8008982 <UART_SetConfig+0x1a2>
 8008950:	2b20      	cmp	r3, #32
 8008952:	d00a      	beq.n	800896a <UART_SetConfig+0x18a>
 8008954:	2b20      	cmp	r3, #32
 8008956:	d814      	bhi.n	8008982 <UART_SetConfig+0x1a2>
 8008958:	2b00      	cmp	r3, #0
 800895a:	d002      	beq.n	8008962 <UART_SetConfig+0x182>
 800895c:	2b10      	cmp	r3, #16
 800895e:	d008      	beq.n	8008972 <UART_SetConfig+0x192>
 8008960:	e00f      	b.n	8008982 <UART_SetConfig+0x1a2>
 8008962:	2300      	movs	r3, #0
 8008964:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008968:	e0ad      	b.n	8008ac6 <UART_SetConfig+0x2e6>
 800896a:	2302      	movs	r3, #2
 800896c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008970:	e0a9      	b.n	8008ac6 <UART_SetConfig+0x2e6>
 8008972:	2304      	movs	r3, #4
 8008974:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008978:	e0a5      	b.n	8008ac6 <UART_SetConfig+0x2e6>
 800897a:	2308      	movs	r3, #8
 800897c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008980:	e0a1      	b.n	8008ac6 <UART_SetConfig+0x2e6>
 8008982:	2310      	movs	r3, #16
 8008984:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008988:	e09d      	b.n	8008ac6 <UART_SetConfig+0x2e6>
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	4a4a      	ldr	r2, [pc, #296]	; (8008ab8 <UART_SetConfig+0x2d8>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d125      	bne.n	80089e0 <UART_SetConfig+0x200>
 8008994:	4b45      	ldr	r3, [pc, #276]	; (8008aac <UART_SetConfig+0x2cc>)
 8008996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800899a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800899e:	2bc0      	cmp	r3, #192	; 0xc0
 80089a0:	d016      	beq.n	80089d0 <UART_SetConfig+0x1f0>
 80089a2:	2bc0      	cmp	r3, #192	; 0xc0
 80089a4:	d818      	bhi.n	80089d8 <UART_SetConfig+0x1f8>
 80089a6:	2b80      	cmp	r3, #128	; 0x80
 80089a8:	d00a      	beq.n	80089c0 <UART_SetConfig+0x1e0>
 80089aa:	2b80      	cmp	r3, #128	; 0x80
 80089ac:	d814      	bhi.n	80089d8 <UART_SetConfig+0x1f8>
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d002      	beq.n	80089b8 <UART_SetConfig+0x1d8>
 80089b2:	2b40      	cmp	r3, #64	; 0x40
 80089b4:	d008      	beq.n	80089c8 <UART_SetConfig+0x1e8>
 80089b6:	e00f      	b.n	80089d8 <UART_SetConfig+0x1f8>
 80089b8:	2300      	movs	r3, #0
 80089ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089be:	e082      	b.n	8008ac6 <UART_SetConfig+0x2e6>
 80089c0:	2302      	movs	r3, #2
 80089c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089c6:	e07e      	b.n	8008ac6 <UART_SetConfig+0x2e6>
 80089c8:	2304      	movs	r3, #4
 80089ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089ce:	e07a      	b.n	8008ac6 <UART_SetConfig+0x2e6>
 80089d0:	2308      	movs	r3, #8
 80089d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089d6:	e076      	b.n	8008ac6 <UART_SetConfig+0x2e6>
 80089d8:	2310      	movs	r3, #16
 80089da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089de:	e072      	b.n	8008ac6 <UART_SetConfig+0x2e6>
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a35      	ldr	r2, [pc, #212]	; (8008abc <UART_SetConfig+0x2dc>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d12a      	bne.n	8008a40 <UART_SetConfig+0x260>
 80089ea:	4b30      	ldr	r3, [pc, #192]	; (8008aac <UART_SetConfig+0x2cc>)
 80089ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089f8:	d01a      	beq.n	8008a30 <UART_SetConfig+0x250>
 80089fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089fe:	d81b      	bhi.n	8008a38 <UART_SetConfig+0x258>
 8008a00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a04:	d00c      	beq.n	8008a20 <UART_SetConfig+0x240>
 8008a06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a0a:	d815      	bhi.n	8008a38 <UART_SetConfig+0x258>
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d003      	beq.n	8008a18 <UART_SetConfig+0x238>
 8008a10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a14:	d008      	beq.n	8008a28 <UART_SetConfig+0x248>
 8008a16:	e00f      	b.n	8008a38 <UART_SetConfig+0x258>
 8008a18:	2300      	movs	r3, #0
 8008a1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a1e:	e052      	b.n	8008ac6 <UART_SetConfig+0x2e6>
 8008a20:	2302      	movs	r3, #2
 8008a22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a26:	e04e      	b.n	8008ac6 <UART_SetConfig+0x2e6>
 8008a28:	2304      	movs	r3, #4
 8008a2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a2e:	e04a      	b.n	8008ac6 <UART_SetConfig+0x2e6>
 8008a30:	2308      	movs	r3, #8
 8008a32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a36:	e046      	b.n	8008ac6 <UART_SetConfig+0x2e6>
 8008a38:	2310      	movs	r3, #16
 8008a3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a3e:	e042      	b.n	8008ac6 <UART_SetConfig+0x2e6>
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a17      	ldr	r2, [pc, #92]	; (8008aa4 <UART_SetConfig+0x2c4>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d13a      	bne.n	8008ac0 <UART_SetConfig+0x2e0>
 8008a4a:	4b18      	ldr	r3, [pc, #96]	; (8008aac <UART_SetConfig+0x2cc>)
 8008a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a50:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008a54:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008a58:	d01a      	beq.n	8008a90 <UART_SetConfig+0x2b0>
 8008a5a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008a5e:	d81b      	bhi.n	8008a98 <UART_SetConfig+0x2b8>
 8008a60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a64:	d00c      	beq.n	8008a80 <UART_SetConfig+0x2a0>
 8008a66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a6a:	d815      	bhi.n	8008a98 <UART_SetConfig+0x2b8>
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d003      	beq.n	8008a78 <UART_SetConfig+0x298>
 8008a70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a74:	d008      	beq.n	8008a88 <UART_SetConfig+0x2a8>
 8008a76:	e00f      	b.n	8008a98 <UART_SetConfig+0x2b8>
 8008a78:	2300      	movs	r3, #0
 8008a7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a7e:	e022      	b.n	8008ac6 <UART_SetConfig+0x2e6>
 8008a80:	2302      	movs	r3, #2
 8008a82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a86:	e01e      	b.n	8008ac6 <UART_SetConfig+0x2e6>
 8008a88:	2304      	movs	r3, #4
 8008a8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a8e:	e01a      	b.n	8008ac6 <UART_SetConfig+0x2e6>
 8008a90:	2308      	movs	r3, #8
 8008a92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a96:	e016      	b.n	8008ac6 <UART_SetConfig+0x2e6>
 8008a98:	2310      	movs	r3, #16
 8008a9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a9e:	e012      	b.n	8008ac6 <UART_SetConfig+0x2e6>
 8008aa0:	efff69f3 	.word	0xefff69f3
 8008aa4:	40008000 	.word	0x40008000
 8008aa8:	40013800 	.word	0x40013800
 8008aac:	40021000 	.word	0x40021000
 8008ab0:	40004400 	.word	0x40004400
 8008ab4:	40004800 	.word	0x40004800
 8008ab8:	40004c00 	.word	0x40004c00
 8008abc:	40005000 	.word	0x40005000
 8008ac0:	2310      	movs	r3, #16
 8008ac2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a9f      	ldr	r2, [pc, #636]	; (8008d48 <UART_SetConfig+0x568>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d17a      	bne.n	8008bc6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008ad0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008ad4:	2b08      	cmp	r3, #8
 8008ad6:	d824      	bhi.n	8008b22 <UART_SetConfig+0x342>
 8008ad8:	a201      	add	r2, pc, #4	; (adr r2, 8008ae0 <UART_SetConfig+0x300>)
 8008ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ade:	bf00      	nop
 8008ae0:	08008b05 	.word	0x08008b05
 8008ae4:	08008b23 	.word	0x08008b23
 8008ae8:	08008b0d 	.word	0x08008b0d
 8008aec:	08008b23 	.word	0x08008b23
 8008af0:	08008b13 	.word	0x08008b13
 8008af4:	08008b23 	.word	0x08008b23
 8008af8:	08008b23 	.word	0x08008b23
 8008afc:	08008b23 	.word	0x08008b23
 8008b00:	08008b1b 	.word	0x08008b1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b04:	f7fd faaa 	bl	800605c <HAL_RCC_GetPCLK1Freq>
 8008b08:	61f8      	str	r0, [r7, #28]
        break;
 8008b0a:	e010      	b.n	8008b2e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b0c:	4b8f      	ldr	r3, [pc, #572]	; (8008d4c <UART_SetConfig+0x56c>)
 8008b0e:	61fb      	str	r3, [r7, #28]
        break;
 8008b10:	e00d      	b.n	8008b2e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b12:	f7fd fa0b 	bl	8005f2c <HAL_RCC_GetSysClockFreq>
 8008b16:	61f8      	str	r0, [r7, #28]
        break;
 8008b18:	e009      	b.n	8008b2e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b1e:	61fb      	str	r3, [r7, #28]
        break;
 8008b20:	e005      	b.n	8008b2e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8008b22:	2300      	movs	r3, #0
 8008b24:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008b26:	2301      	movs	r3, #1
 8008b28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008b2c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008b2e:	69fb      	ldr	r3, [r7, #28]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	f000 80fb 	beq.w	8008d2c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	685a      	ldr	r2, [r3, #4]
 8008b3a:	4613      	mov	r3, r2
 8008b3c:	005b      	lsls	r3, r3, #1
 8008b3e:	4413      	add	r3, r2
 8008b40:	69fa      	ldr	r2, [r7, #28]
 8008b42:	429a      	cmp	r2, r3
 8008b44:	d305      	bcc.n	8008b52 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008b4c:	69fa      	ldr	r2, [r7, #28]
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	d903      	bls.n	8008b5a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8008b52:	2301      	movs	r3, #1
 8008b54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008b58:	e0e8      	b.n	8008d2c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008b5a:	69fb      	ldr	r3, [r7, #28]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	461c      	mov	r4, r3
 8008b60:	4615      	mov	r5, r2
 8008b62:	f04f 0200 	mov.w	r2, #0
 8008b66:	f04f 0300 	mov.w	r3, #0
 8008b6a:	022b      	lsls	r3, r5, #8
 8008b6c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008b70:	0222      	lsls	r2, r4, #8
 8008b72:	68f9      	ldr	r1, [r7, #12]
 8008b74:	6849      	ldr	r1, [r1, #4]
 8008b76:	0849      	lsrs	r1, r1, #1
 8008b78:	2000      	movs	r0, #0
 8008b7a:	4688      	mov	r8, r1
 8008b7c:	4681      	mov	r9, r0
 8008b7e:	eb12 0a08 	adds.w	sl, r2, r8
 8008b82:	eb43 0b09 	adc.w	fp, r3, r9
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	603b      	str	r3, [r7, #0]
 8008b8e:	607a      	str	r2, [r7, #4]
 8008b90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b94:	4650      	mov	r0, sl
 8008b96:	4659      	mov	r1, fp
 8008b98:	f7f8 f876 	bl	8000c88 <__aeabi_uldivmod>
 8008b9c:	4602      	mov	r2, r0
 8008b9e:	460b      	mov	r3, r1
 8008ba0:	4613      	mov	r3, r2
 8008ba2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008ba4:	69bb      	ldr	r3, [r7, #24]
 8008ba6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008baa:	d308      	bcc.n	8008bbe <UART_SetConfig+0x3de>
 8008bac:	69bb      	ldr	r3, [r7, #24]
 8008bae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bb2:	d204      	bcs.n	8008bbe <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	69ba      	ldr	r2, [r7, #24]
 8008bba:	60da      	str	r2, [r3, #12]
 8008bbc:	e0b6      	b.n	8008d2c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008bc4:	e0b2      	b.n	8008d2c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	69db      	ldr	r3, [r3, #28]
 8008bca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bce:	d15e      	bne.n	8008c8e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8008bd0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008bd4:	2b08      	cmp	r3, #8
 8008bd6:	d828      	bhi.n	8008c2a <UART_SetConfig+0x44a>
 8008bd8:	a201      	add	r2, pc, #4	; (adr r2, 8008be0 <UART_SetConfig+0x400>)
 8008bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bde:	bf00      	nop
 8008be0:	08008c05 	.word	0x08008c05
 8008be4:	08008c0d 	.word	0x08008c0d
 8008be8:	08008c15 	.word	0x08008c15
 8008bec:	08008c2b 	.word	0x08008c2b
 8008bf0:	08008c1b 	.word	0x08008c1b
 8008bf4:	08008c2b 	.word	0x08008c2b
 8008bf8:	08008c2b 	.word	0x08008c2b
 8008bfc:	08008c2b 	.word	0x08008c2b
 8008c00:	08008c23 	.word	0x08008c23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c04:	f7fd fa2a 	bl	800605c <HAL_RCC_GetPCLK1Freq>
 8008c08:	61f8      	str	r0, [r7, #28]
        break;
 8008c0a:	e014      	b.n	8008c36 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c0c:	f7fd fa3c 	bl	8006088 <HAL_RCC_GetPCLK2Freq>
 8008c10:	61f8      	str	r0, [r7, #28]
        break;
 8008c12:	e010      	b.n	8008c36 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c14:	4b4d      	ldr	r3, [pc, #308]	; (8008d4c <UART_SetConfig+0x56c>)
 8008c16:	61fb      	str	r3, [r7, #28]
        break;
 8008c18:	e00d      	b.n	8008c36 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c1a:	f7fd f987 	bl	8005f2c <HAL_RCC_GetSysClockFreq>
 8008c1e:	61f8      	str	r0, [r7, #28]
        break;
 8008c20:	e009      	b.n	8008c36 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c26:	61fb      	str	r3, [r7, #28]
        break;
 8008c28:	e005      	b.n	8008c36 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008c34:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008c36:	69fb      	ldr	r3, [r7, #28]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d077      	beq.n	8008d2c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008c3c:	69fb      	ldr	r3, [r7, #28]
 8008c3e:	005a      	lsls	r2, r3, #1
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	085b      	lsrs	r3, r3, #1
 8008c46:	441a      	add	r2, r3
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	685b      	ldr	r3, [r3, #4]
 8008c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c50:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c52:	69bb      	ldr	r3, [r7, #24]
 8008c54:	2b0f      	cmp	r3, #15
 8008c56:	d916      	bls.n	8008c86 <UART_SetConfig+0x4a6>
 8008c58:	69bb      	ldr	r3, [r7, #24]
 8008c5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c5e:	d212      	bcs.n	8008c86 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008c60:	69bb      	ldr	r3, [r7, #24]
 8008c62:	b29b      	uxth	r3, r3
 8008c64:	f023 030f 	bic.w	r3, r3, #15
 8008c68:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008c6a:	69bb      	ldr	r3, [r7, #24]
 8008c6c:	085b      	lsrs	r3, r3, #1
 8008c6e:	b29b      	uxth	r3, r3
 8008c70:	f003 0307 	and.w	r3, r3, #7
 8008c74:	b29a      	uxth	r2, r3
 8008c76:	8afb      	ldrh	r3, [r7, #22]
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	8afa      	ldrh	r2, [r7, #22]
 8008c82:	60da      	str	r2, [r3, #12]
 8008c84:	e052      	b.n	8008d2c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008c86:	2301      	movs	r3, #1
 8008c88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008c8c:	e04e      	b.n	8008d2c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008c8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008c92:	2b08      	cmp	r3, #8
 8008c94:	d827      	bhi.n	8008ce6 <UART_SetConfig+0x506>
 8008c96:	a201      	add	r2, pc, #4	; (adr r2, 8008c9c <UART_SetConfig+0x4bc>)
 8008c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c9c:	08008cc1 	.word	0x08008cc1
 8008ca0:	08008cc9 	.word	0x08008cc9
 8008ca4:	08008cd1 	.word	0x08008cd1
 8008ca8:	08008ce7 	.word	0x08008ce7
 8008cac:	08008cd7 	.word	0x08008cd7
 8008cb0:	08008ce7 	.word	0x08008ce7
 8008cb4:	08008ce7 	.word	0x08008ce7
 8008cb8:	08008ce7 	.word	0x08008ce7
 8008cbc:	08008cdf 	.word	0x08008cdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008cc0:	f7fd f9cc 	bl	800605c <HAL_RCC_GetPCLK1Freq>
 8008cc4:	61f8      	str	r0, [r7, #28]
        break;
 8008cc6:	e014      	b.n	8008cf2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008cc8:	f7fd f9de 	bl	8006088 <HAL_RCC_GetPCLK2Freq>
 8008ccc:	61f8      	str	r0, [r7, #28]
        break;
 8008cce:	e010      	b.n	8008cf2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008cd0:	4b1e      	ldr	r3, [pc, #120]	; (8008d4c <UART_SetConfig+0x56c>)
 8008cd2:	61fb      	str	r3, [r7, #28]
        break;
 8008cd4:	e00d      	b.n	8008cf2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008cd6:	f7fd f929 	bl	8005f2c <HAL_RCC_GetSysClockFreq>
 8008cda:	61f8      	str	r0, [r7, #28]
        break;
 8008cdc:	e009      	b.n	8008cf2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008cde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ce2:	61fb      	str	r3, [r7, #28]
        break;
 8008ce4:	e005      	b.n	8008cf2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008cea:	2301      	movs	r3, #1
 8008cec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008cf0:	bf00      	nop
    }

    if (pclk != 0U)
 8008cf2:	69fb      	ldr	r3, [r7, #28]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d019      	beq.n	8008d2c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	085a      	lsrs	r2, r3, #1
 8008cfe:	69fb      	ldr	r3, [r7, #28]
 8008d00:	441a      	add	r2, r3
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	685b      	ldr	r3, [r3, #4]
 8008d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d0a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d0c:	69bb      	ldr	r3, [r7, #24]
 8008d0e:	2b0f      	cmp	r3, #15
 8008d10:	d909      	bls.n	8008d26 <UART_SetConfig+0x546>
 8008d12:	69bb      	ldr	r3, [r7, #24]
 8008d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d18:	d205      	bcs.n	8008d26 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008d1a:	69bb      	ldr	r3, [r7, #24]
 8008d1c:	b29a      	uxth	r2, r3
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	60da      	str	r2, [r3, #12]
 8008d24:	e002      	b.n	8008d2c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008d26:	2301      	movs	r3, #1
 8008d28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	2200      	movs	r2, #0
 8008d36:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008d38:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3728      	adds	r7, #40	; 0x28
 8008d40:	46bd      	mov	sp, r7
 8008d42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d46:	bf00      	nop
 8008d48:	40008000 	.word	0x40008000
 8008d4c:	00f42400 	.word	0x00f42400

08008d50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b083      	sub	sp, #12
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d5c:	f003 0301 	and.w	r3, r3, #1
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d00a      	beq.n	8008d7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	430a      	orrs	r2, r1
 8008d78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d7e:	f003 0302 	and.w	r3, r3, #2
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d00a      	beq.n	8008d9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	685b      	ldr	r3, [r3, #4]
 8008d8c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	430a      	orrs	r2, r1
 8008d9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da0:	f003 0304 	and.w	r3, r3, #4
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d00a      	beq.n	8008dbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	430a      	orrs	r2, r1
 8008dbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dc2:	f003 0308 	and.w	r3, r3, #8
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d00a      	beq.n	8008de0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	685b      	ldr	r3, [r3, #4]
 8008dd0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	430a      	orrs	r2, r1
 8008dde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de4:	f003 0310 	and.w	r3, r3, #16
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d00a      	beq.n	8008e02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	689b      	ldr	r3, [r3, #8]
 8008df2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	430a      	orrs	r2, r1
 8008e00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e06:	f003 0320 	and.w	r3, r3, #32
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d00a      	beq.n	8008e24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	689b      	ldr	r3, [r3, #8]
 8008e14:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	430a      	orrs	r2, r1
 8008e22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d01a      	beq.n	8008e66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	430a      	orrs	r2, r1
 8008e44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e4e:	d10a      	bne.n	8008e66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	685b      	ldr	r3, [r3, #4]
 8008e56:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	430a      	orrs	r2, r1
 8008e64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d00a      	beq.n	8008e88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	685b      	ldr	r3, [r3, #4]
 8008e78:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	430a      	orrs	r2, r1
 8008e86:	605a      	str	r2, [r3, #4]
  }
}
 8008e88:	bf00      	nop
 8008e8a:	370c      	adds	r7, #12
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr

08008e94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b086      	sub	sp, #24
 8008e98:	af02      	add	r7, sp, #8
 8008e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008ea4:	f7f9 fd18 	bl	80028d8 <HAL_GetTick>
 8008ea8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f003 0308 	and.w	r3, r3, #8
 8008eb4:	2b08      	cmp	r3, #8
 8008eb6:	d10e      	bne.n	8008ed6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008eb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ebc:	9300      	str	r3, [sp, #0]
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f000 f82d 	bl	8008f26 <UART_WaitOnFlagUntilTimeout>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d001      	beq.n	8008ed6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ed2:	2303      	movs	r3, #3
 8008ed4:	e023      	b.n	8008f1e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f003 0304 	and.w	r3, r3, #4
 8008ee0:	2b04      	cmp	r3, #4
 8008ee2:	d10e      	bne.n	8008f02 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ee4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ee8:	9300      	str	r3, [sp, #0]
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2200      	movs	r2, #0
 8008eee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f000 f817 	bl	8008f26 <UART_WaitOnFlagUntilTimeout>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d001      	beq.n	8008f02 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008efe:	2303      	movs	r3, #3
 8008f00:	e00d      	b.n	8008f1e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2220      	movs	r2, #32
 8008f06:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2220      	movs	r2, #32
 8008f0c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2200      	movs	r2, #0
 8008f12:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2200      	movs	r2, #0
 8008f18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008f1c:	2300      	movs	r3, #0
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3710      	adds	r7, #16
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}

08008f26 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008f26:	b580      	push	{r7, lr}
 8008f28:	b09c      	sub	sp, #112	; 0x70
 8008f2a:	af00      	add	r7, sp, #0
 8008f2c:	60f8      	str	r0, [r7, #12]
 8008f2e:	60b9      	str	r1, [r7, #8]
 8008f30:	603b      	str	r3, [r7, #0]
 8008f32:	4613      	mov	r3, r2
 8008f34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f36:	e0a5      	b.n	8009084 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f3e:	f000 80a1 	beq.w	8009084 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f42:	f7f9 fcc9 	bl	80028d8 <HAL_GetTick>
 8008f46:	4602      	mov	r2, r0
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	1ad3      	subs	r3, r2, r3
 8008f4c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008f4e:	429a      	cmp	r2, r3
 8008f50:	d302      	bcc.n	8008f58 <UART_WaitOnFlagUntilTimeout+0x32>
 8008f52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d13e      	bne.n	8008fd6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f60:	e853 3f00 	ldrex	r3, [r3]
 8008f64:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008f66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f68:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008f6c:	667b      	str	r3, [r7, #100]	; 0x64
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	461a      	mov	r2, r3
 8008f74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f78:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f7a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008f7c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008f7e:	e841 2300 	strex	r3, r2, [r1]
 8008f82:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008f84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d1e6      	bne.n	8008f58 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	3308      	adds	r3, #8
 8008f90:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f94:	e853 3f00 	ldrex	r3, [r3]
 8008f98:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f9c:	f023 0301 	bic.w	r3, r3, #1
 8008fa0:	663b      	str	r3, [r7, #96]	; 0x60
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	3308      	adds	r3, #8
 8008fa8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008faa:	64ba      	str	r2, [r7, #72]	; 0x48
 8008fac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008fb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008fb2:	e841 2300 	strex	r3, r2, [r1]
 8008fb6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008fb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d1e5      	bne.n	8008f8a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2220      	movs	r2, #32
 8008fc2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2220      	movs	r2, #32
 8008fc8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008fd2:	2303      	movs	r3, #3
 8008fd4:	e067      	b.n	80090a6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f003 0304 	and.w	r3, r3, #4
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d04f      	beq.n	8009084 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	69db      	ldr	r3, [r3, #28]
 8008fea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008fee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ff2:	d147      	bne.n	8009084 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008ffc:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009006:	e853 3f00 	ldrex	r3, [r3]
 800900a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800900c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800900e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009012:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	461a      	mov	r2, r3
 800901a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800901c:	637b      	str	r3, [r7, #52]	; 0x34
 800901e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009020:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009022:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009024:	e841 2300 	strex	r3, r2, [r1]
 8009028:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800902a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800902c:	2b00      	cmp	r3, #0
 800902e:	d1e6      	bne.n	8008ffe <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	3308      	adds	r3, #8
 8009036:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	e853 3f00 	ldrex	r3, [r3]
 800903e:	613b      	str	r3, [r7, #16]
   return(result);
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	f023 0301 	bic.w	r3, r3, #1
 8009046:	66bb      	str	r3, [r7, #104]	; 0x68
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	3308      	adds	r3, #8
 800904e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009050:	623a      	str	r2, [r7, #32]
 8009052:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009054:	69f9      	ldr	r1, [r7, #28]
 8009056:	6a3a      	ldr	r2, [r7, #32]
 8009058:	e841 2300 	strex	r3, r2, [r1]
 800905c:	61bb      	str	r3, [r7, #24]
   return(result);
 800905e:	69bb      	ldr	r3, [r7, #24]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d1e5      	bne.n	8009030 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	2220      	movs	r2, #32
 8009068:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	2220      	movs	r2, #32
 800906e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	2220      	movs	r2, #32
 8009074:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	2200      	movs	r2, #0
 800907c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009080:	2303      	movs	r3, #3
 8009082:	e010      	b.n	80090a6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	69da      	ldr	r2, [r3, #28]
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	4013      	ands	r3, r2
 800908e:	68ba      	ldr	r2, [r7, #8]
 8009090:	429a      	cmp	r2, r3
 8009092:	bf0c      	ite	eq
 8009094:	2301      	moveq	r3, #1
 8009096:	2300      	movne	r3, #0
 8009098:	b2db      	uxtb	r3, r3
 800909a:	461a      	mov	r2, r3
 800909c:	79fb      	ldrb	r3, [r7, #7]
 800909e:	429a      	cmp	r2, r3
 80090a0:	f43f af4a 	beq.w	8008f38 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80090a4:	2300      	movs	r3, #0
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3770      	adds	r7, #112	; 0x70
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}

080090ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80090ae:	b480      	push	{r7}
 80090b0:	b095      	sub	sp, #84	; 0x54
 80090b2:	af00      	add	r7, sp, #0
 80090b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090be:	e853 3f00 	ldrex	r3, [r3]
 80090c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80090c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80090ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	461a      	mov	r2, r3
 80090d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090d4:	643b      	str	r3, [r7, #64]	; 0x40
 80090d6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80090da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80090dc:	e841 2300 	strex	r3, r2, [r1]
 80090e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80090e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d1e6      	bne.n	80090b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	3308      	adds	r3, #8
 80090ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f0:	6a3b      	ldr	r3, [r7, #32]
 80090f2:	e853 3f00 	ldrex	r3, [r3]
 80090f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80090f8:	69fb      	ldr	r3, [r7, #28]
 80090fa:	f023 0301 	bic.w	r3, r3, #1
 80090fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	3308      	adds	r3, #8
 8009106:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009108:	62fa      	str	r2, [r7, #44]	; 0x2c
 800910a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800910c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800910e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009110:	e841 2300 	strex	r3, r2, [r1]
 8009114:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009118:	2b00      	cmp	r3, #0
 800911a:	d1e5      	bne.n	80090e8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009120:	2b01      	cmp	r3, #1
 8009122:	d118      	bne.n	8009156 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	e853 3f00 	ldrex	r3, [r3]
 8009130:	60bb      	str	r3, [r7, #8]
   return(result);
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	f023 0310 	bic.w	r3, r3, #16
 8009138:	647b      	str	r3, [r7, #68]	; 0x44
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	461a      	mov	r2, r3
 8009140:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009142:	61bb      	str	r3, [r7, #24]
 8009144:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009146:	6979      	ldr	r1, [r7, #20]
 8009148:	69ba      	ldr	r2, [r7, #24]
 800914a:	e841 2300 	strex	r3, r2, [r1]
 800914e:	613b      	str	r3, [r7, #16]
   return(result);
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d1e6      	bne.n	8009124 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2220      	movs	r2, #32
 800915a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2200      	movs	r2, #0
 8009160:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2200      	movs	r2, #0
 8009166:	665a      	str	r2, [r3, #100]	; 0x64
}
 8009168:	bf00      	nop
 800916a:	3754      	adds	r7, #84	; 0x54
 800916c:	46bd      	mov	sp, r7
 800916e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009172:	4770      	bx	lr

08009174 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b084      	sub	sp, #16
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009180:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	2200      	movs	r2, #0
 8009186:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2200      	movs	r2, #0
 800918e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009192:	68f8      	ldr	r0, [r7, #12]
 8009194:	f7ff fb0e 	bl	80087b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009198:	bf00      	nop
 800919a:	3710      	adds	r7, #16
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}

080091a0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b088      	sub	sp, #32
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	e853 3f00 	ldrex	r3, [r3]
 80091b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091bc:	61fb      	str	r3, [r7, #28]
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	461a      	mov	r2, r3
 80091c4:	69fb      	ldr	r3, [r7, #28]
 80091c6:	61bb      	str	r3, [r7, #24]
 80091c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ca:	6979      	ldr	r1, [r7, #20]
 80091cc:	69ba      	ldr	r2, [r7, #24]
 80091ce:	e841 2300 	strex	r3, r2, [r1]
 80091d2:	613b      	str	r3, [r7, #16]
   return(result);
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d1e6      	bne.n	80091a8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2220      	movs	r2, #32
 80091de:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2200      	movs	r2, #0
 80091e4:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f7ff fada 	bl	80087a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091ec:	bf00      	nop
 80091ee:	3720      	adds	r7, #32
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}

080091f4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b083      	sub	sp, #12
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80091fc:	bf00      	nop
 80091fe:	370c      	adds	r7, #12
 8009200:	46bd      	mov	sp, r7
 8009202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009206:	4770      	bx	lr

08009208 <atan>:
 8009208:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800920c:	ec55 4b10 	vmov	r4, r5, d0
 8009210:	4bc3      	ldr	r3, [pc, #780]	; (8009520 <atan+0x318>)
 8009212:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009216:	429e      	cmp	r6, r3
 8009218:	46ab      	mov	fp, r5
 800921a:	dd18      	ble.n	800924e <atan+0x46>
 800921c:	4bc1      	ldr	r3, [pc, #772]	; (8009524 <atan+0x31c>)
 800921e:	429e      	cmp	r6, r3
 8009220:	dc01      	bgt.n	8009226 <atan+0x1e>
 8009222:	d109      	bne.n	8009238 <atan+0x30>
 8009224:	b144      	cbz	r4, 8009238 <atan+0x30>
 8009226:	4622      	mov	r2, r4
 8009228:	462b      	mov	r3, r5
 800922a:	4620      	mov	r0, r4
 800922c:	4629      	mov	r1, r5
 800922e:	f7f7 f82d 	bl	800028c <__adddf3>
 8009232:	4604      	mov	r4, r0
 8009234:	460d      	mov	r5, r1
 8009236:	e006      	b.n	8009246 <atan+0x3e>
 8009238:	f1bb 0f00 	cmp.w	fp, #0
 800923c:	f300 8131 	bgt.w	80094a2 <atan+0x29a>
 8009240:	a59b      	add	r5, pc, #620	; (adr r5, 80094b0 <atan+0x2a8>)
 8009242:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009246:	ec45 4b10 	vmov	d0, r4, r5
 800924a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800924e:	4bb6      	ldr	r3, [pc, #728]	; (8009528 <atan+0x320>)
 8009250:	429e      	cmp	r6, r3
 8009252:	dc14      	bgt.n	800927e <atan+0x76>
 8009254:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009258:	429e      	cmp	r6, r3
 800925a:	dc0d      	bgt.n	8009278 <atan+0x70>
 800925c:	a396      	add	r3, pc, #600	; (adr r3, 80094b8 <atan+0x2b0>)
 800925e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009262:	ee10 0a10 	vmov	r0, s0
 8009266:	4629      	mov	r1, r5
 8009268:	f7f7 f810 	bl	800028c <__adddf3>
 800926c:	4baf      	ldr	r3, [pc, #700]	; (800952c <atan+0x324>)
 800926e:	2200      	movs	r2, #0
 8009270:	f7f7 fc52 	bl	8000b18 <__aeabi_dcmpgt>
 8009274:	2800      	cmp	r0, #0
 8009276:	d1e6      	bne.n	8009246 <atan+0x3e>
 8009278:	f04f 3aff 	mov.w	sl, #4294967295
 800927c:	e02b      	b.n	80092d6 <atan+0xce>
 800927e:	f000 f963 	bl	8009548 <fabs>
 8009282:	4bab      	ldr	r3, [pc, #684]	; (8009530 <atan+0x328>)
 8009284:	429e      	cmp	r6, r3
 8009286:	ec55 4b10 	vmov	r4, r5, d0
 800928a:	f300 80bf 	bgt.w	800940c <atan+0x204>
 800928e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8009292:	429e      	cmp	r6, r3
 8009294:	f300 80a0 	bgt.w	80093d8 <atan+0x1d0>
 8009298:	ee10 2a10 	vmov	r2, s0
 800929c:	ee10 0a10 	vmov	r0, s0
 80092a0:	462b      	mov	r3, r5
 80092a2:	4629      	mov	r1, r5
 80092a4:	f7f6 fff2 	bl	800028c <__adddf3>
 80092a8:	4ba0      	ldr	r3, [pc, #640]	; (800952c <atan+0x324>)
 80092aa:	2200      	movs	r2, #0
 80092ac:	f7f6 ffec 	bl	8000288 <__aeabi_dsub>
 80092b0:	2200      	movs	r2, #0
 80092b2:	4606      	mov	r6, r0
 80092b4:	460f      	mov	r7, r1
 80092b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80092ba:	4620      	mov	r0, r4
 80092bc:	4629      	mov	r1, r5
 80092be:	f7f6 ffe5 	bl	800028c <__adddf3>
 80092c2:	4602      	mov	r2, r0
 80092c4:	460b      	mov	r3, r1
 80092c6:	4630      	mov	r0, r6
 80092c8:	4639      	mov	r1, r7
 80092ca:	f7f7 fabf 	bl	800084c <__aeabi_ddiv>
 80092ce:	f04f 0a00 	mov.w	sl, #0
 80092d2:	4604      	mov	r4, r0
 80092d4:	460d      	mov	r5, r1
 80092d6:	4622      	mov	r2, r4
 80092d8:	462b      	mov	r3, r5
 80092da:	4620      	mov	r0, r4
 80092dc:	4629      	mov	r1, r5
 80092de:	f7f7 f98b 	bl	80005f8 <__aeabi_dmul>
 80092e2:	4602      	mov	r2, r0
 80092e4:	460b      	mov	r3, r1
 80092e6:	4680      	mov	r8, r0
 80092e8:	4689      	mov	r9, r1
 80092ea:	f7f7 f985 	bl	80005f8 <__aeabi_dmul>
 80092ee:	a374      	add	r3, pc, #464	; (adr r3, 80094c0 <atan+0x2b8>)
 80092f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f4:	4606      	mov	r6, r0
 80092f6:	460f      	mov	r7, r1
 80092f8:	f7f7 f97e 	bl	80005f8 <__aeabi_dmul>
 80092fc:	a372      	add	r3, pc, #456	; (adr r3, 80094c8 <atan+0x2c0>)
 80092fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009302:	f7f6 ffc3 	bl	800028c <__adddf3>
 8009306:	4632      	mov	r2, r6
 8009308:	463b      	mov	r3, r7
 800930a:	f7f7 f975 	bl	80005f8 <__aeabi_dmul>
 800930e:	a370      	add	r3, pc, #448	; (adr r3, 80094d0 <atan+0x2c8>)
 8009310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009314:	f7f6 ffba 	bl	800028c <__adddf3>
 8009318:	4632      	mov	r2, r6
 800931a:	463b      	mov	r3, r7
 800931c:	f7f7 f96c 	bl	80005f8 <__aeabi_dmul>
 8009320:	a36d      	add	r3, pc, #436	; (adr r3, 80094d8 <atan+0x2d0>)
 8009322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009326:	f7f6 ffb1 	bl	800028c <__adddf3>
 800932a:	4632      	mov	r2, r6
 800932c:	463b      	mov	r3, r7
 800932e:	f7f7 f963 	bl	80005f8 <__aeabi_dmul>
 8009332:	a36b      	add	r3, pc, #428	; (adr r3, 80094e0 <atan+0x2d8>)
 8009334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009338:	f7f6 ffa8 	bl	800028c <__adddf3>
 800933c:	4632      	mov	r2, r6
 800933e:	463b      	mov	r3, r7
 8009340:	f7f7 f95a 	bl	80005f8 <__aeabi_dmul>
 8009344:	a368      	add	r3, pc, #416	; (adr r3, 80094e8 <atan+0x2e0>)
 8009346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800934a:	f7f6 ff9f 	bl	800028c <__adddf3>
 800934e:	4642      	mov	r2, r8
 8009350:	464b      	mov	r3, r9
 8009352:	f7f7 f951 	bl	80005f8 <__aeabi_dmul>
 8009356:	a366      	add	r3, pc, #408	; (adr r3, 80094f0 <atan+0x2e8>)
 8009358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800935c:	4680      	mov	r8, r0
 800935e:	4689      	mov	r9, r1
 8009360:	4630      	mov	r0, r6
 8009362:	4639      	mov	r1, r7
 8009364:	f7f7 f948 	bl	80005f8 <__aeabi_dmul>
 8009368:	a363      	add	r3, pc, #396	; (adr r3, 80094f8 <atan+0x2f0>)
 800936a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800936e:	f7f6 ff8b 	bl	8000288 <__aeabi_dsub>
 8009372:	4632      	mov	r2, r6
 8009374:	463b      	mov	r3, r7
 8009376:	f7f7 f93f 	bl	80005f8 <__aeabi_dmul>
 800937a:	a361      	add	r3, pc, #388	; (adr r3, 8009500 <atan+0x2f8>)
 800937c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009380:	f7f6 ff82 	bl	8000288 <__aeabi_dsub>
 8009384:	4632      	mov	r2, r6
 8009386:	463b      	mov	r3, r7
 8009388:	f7f7 f936 	bl	80005f8 <__aeabi_dmul>
 800938c:	a35e      	add	r3, pc, #376	; (adr r3, 8009508 <atan+0x300>)
 800938e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009392:	f7f6 ff79 	bl	8000288 <__aeabi_dsub>
 8009396:	4632      	mov	r2, r6
 8009398:	463b      	mov	r3, r7
 800939a:	f7f7 f92d 	bl	80005f8 <__aeabi_dmul>
 800939e:	a35c      	add	r3, pc, #368	; (adr r3, 8009510 <atan+0x308>)
 80093a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093a4:	f7f6 ff70 	bl	8000288 <__aeabi_dsub>
 80093a8:	4632      	mov	r2, r6
 80093aa:	463b      	mov	r3, r7
 80093ac:	f7f7 f924 	bl	80005f8 <__aeabi_dmul>
 80093b0:	4602      	mov	r2, r0
 80093b2:	460b      	mov	r3, r1
 80093b4:	4640      	mov	r0, r8
 80093b6:	4649      	mov	r1, r9
 80093b8:	f7f6 ff68 	bl	800028c <__adddf3>
 80093bc:	4622      	mov	r2, r4
 80093be:	462b      	mov	r3, r5
 80093c0:	f7f7 f91a 	bl	80005f8 <__aeabi_dmul>
 80093c4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80093c8:	4602      	mov	r2, r0
 80093ca:	460b      	mov	r3, r1
 80093cc:	d14b      	bne.n	8009466 <atan+0x25e>
 80093ce:	4620      	mov	r0, r4
 80093d0:	4629      	mov	r1, r5
 80093d2:	f7f6 ff59 	bl	8000288 <__aeabi_dsub>
 80093d6:	e72c      	b.n	8009232 <atan+0x2a>
 80093d8:	ee10 0a10 	vmov	r0, s0
 80093dc:	4b53      	ldr	r3, [pc, #332]	; (800952c <atan+0x324>)
 80093de:	2200      	movs	r2, #0
 80093e0:	4629      	mov	r1, r5
 80093e2:	f7f6 ff51 	bl	8000288 <__aeabi_dsub>
 80093e6:	4b51      	ldr	r3, [pc, #324]	; (800952c <atan+0x324>)
 80093e8:	4606      	mov	r6, r0
 80093ea:	460f      	mov	r7, r1
 80093ec:	2200      	movs	r2, #0
 80093ee:	4620      	mov	r0, r4
 80093f0:	4629      	mov	r1, r5
 80093f2:	f7f6 ff4b 	bl	800028c <__adddf3>
 80093f6:	4602      	mov	r2, r0
 80093f8:	460b      	mov	r3, r1
 80093fa:	4630      	mov	r0, r6
 80093fc:	4639      	mov	r1, r7
 80093fe:	f7f7 fa25 	bl	800084c <__aeabi_ddiv>
 8009402:	f04f 0a01 	mov.w	sl, #1
 8009406:	4604      	mov	r4, r0
 8009408:	460d      	mov	r5, r1
 800940a:	e764      	b.n	80092d6 <atan+0xce>
 800940c:	4b49      	ldr	r3, [pc, #292]	; (8009534 <atan+0x32c>)
 800940e:	429e      	cmp	r6, r3
 8009410:	da1d      	bge.n	800944e <atan+0x246>
 8009412:	ee10 0a10 	vmov	r0, s0
 8009416:	4b48      	ldr	r3, [pc, #288]	; (8009538 <atan+0x330>)
 8009418:	2200      	movs	r2, #0
 800941a:	4629      	mov	r1, r5
 800941c:	f7f6 ff34 	bl	8000288 <__aeabi_dsub>
 8009420:	4b45      	ldr	r3, [pc, #276]	; (8009538 <atan+0x330>)
 8009422:	4606      	mov	r6, r0
 8009424:	460f      	mov	r7, r1
 8009426:	2200      	movs	r2, #0
 8009428:	4620      	mov	r0, r4
 800942a:	4629      	mov	r1, r5
 800942c:	f7f7 f8e4 	bl	80005f8 <__aeabi_dmul>
 8009430:	4b3e      	ldr	r3, [pc, #248]	; (800952c <atan+0x324>)
 8009432:	2200      	movs	r2, #0
 8009434:	f7f6 ff2a 	bl	800028c <__adddf3>
 8009438:	4602      	mov	r2, r0
 800943a:	460b      	mov	r3, r1
 800943c:	4630      	mov	r0, r6
 800943e:	4639      	mov	r1, r7
 8009440:	f7f7 fa04 	bl	800084c <__aeabi_ddiv>
 8009444:	f04f 0a02 	mov.w	sl, #2
 8009448:	4604      	mov	r4, r0
 800944a:	460d      	mov	r5, r1
 800944c:	e743      	b.n	80092d6 <atan+0xce>
 800944e:	462b      	mov	r3, r5
 8009450:	ee10 2a10 	vmov	r2, s0
 8009454:	4939      	ldr	r1, [pc, #228]	; (800953c <atan+0x334>)
 8009456:	2000      	movs	r0, #0
 8009458:	f7f7 f9f8 	bl	800084c <__aeabi_ddiv>
 800945c:	f04f 0a03 	mov.w	sl, #3
 8009460:	4604      	mov	r4, r0
 8009462:	460d      	mov	r5, r1
 8009464:	e737      	b.n	80092d6 <atan+0xce>
 8009466:	4b36      	ldr	r3, [pc, #216]	; (8009540 <atan+0x338>)
 8009468:	4e36      	ldr	r6, [pc, #216]	; (8009544 <atan+0x33c>)
 800946a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800946e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8009472:	e9da 2300 	ldrd	r2, r3, [sl]
 8009476:	f7f6 ff07 	bl	8000288 <__aeabi_dsub>
 800947a:	4622      	mov	r2, r4
 800947c:	462b      	mov	r3, r5
 800947e:	f7f6 ff03 	bl	8000288 <__aeabi_dsub>
 8009482:	4602      	mov	r2, r0
 8009484:	460b      	mov	r3, r1
 8009486:	e9d6 0100 	ldrd	r0, r1, [r6]
 800948a:	f7f6 fefd 	bl	8000288 <__aeabi_dsub>
 800948e:	f1bb 0f00 	cmp.w	fp, #0
 8009492:	4604      	mov	r4, r0
 8009494:	460d      	mov	r5, r1
 8009496:	f6bf aed6 	bge.w	8009246 <atan+0x3e>
 800949a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800949e:	461d      	mov	r5, r3
 80094a0:	e6d1      	b.n	8009246 <atan+0x3e>
 80094a2:	a51d      	add	r5, pc, #116	; (adr r5, 8009518 <atan+0x310>)
 80094a4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80094a8:	e6cd      	b.n	8009246 <atan+0x3e>
 80094aa:	bf00      	nop
 80094ac:	f3af 8000 	nop.w
 80094b0:	54442d18 	.word	0x54442d18
 80094b4:	bff921fb 	.word	0xbff921fb
 80094b8:	8800759c 	.word	0x8800759c
 80094bc:	7e37e43c 	.word	0x7e37e43c
 80094c0:	e322da11 	.word	0xe322da11
 80094c4:	3f90ad3a 	.word	0x3f90ad3a
 80094c8:	24760deb 	.word	0x24760deb
 80094cc:	3fa97b4b 	.word	0x3fa97b4b
 80094d0:	a0d03d51 	.word	0xa0d03d51
 80094d4:	3fb10d66 	.word	0x3fb10d66
 80094d8:	c54c206e 	.word	0xc54c206e
 80094dc:	3fb745cd 	.word	0x3fb745cd
 80094e0:	920083ff 	.word	0x920083ff
 80094e4:	3fc24924 	.word	0x3fc24924
 80094e8:	5555550d 	.word	0x5555550d
 80094ec:	3fd55555 	.word	0x3fd55555
 80094f0:	2c6a6c2f 	.word	0x2c6a6c2f
 80094f4:	bfa2b444 	.word	0xbfa2b444
 80094f8:	52defd9a 	.word	0x52defd9a
 80094fc:	3fadde2d 	.word	0x3fadde2d
 8009500:	af749a6d 	.word	0xaf749a6d
 8009504:	3fb3b0f2 	.word	0x3fb3b0f2
 8009508:	fe231671 	.word	0xfe231671
 800950c:	3fbc71c6 	.word	0x3fbc71c6
 8009510:	9998ebc4 	.word	0x9998ebc4
 8009514:	3fc99999 	.word	0x3fc99999
 8009518:	54442d18 	.word	0x54442d18
 800951c:	3ff921fb 	.word	0x3ff921fb
 8009520:	440fffff 	.word	0x440fffff
 8009524:	7ff00000 	.word	0x7ff00000
 8009528:	3fdbffff 	.word	0x3fdbffff
 800952c:	3ff00000 	.word	0x3ff00000
 8009530:	3ff2ffff 	.word	0x3ff2ffff
 8009534:	40038000 	.word	0x40038000
 8009538:	3ff80000 	.word	0x3ff80000
 800953c:	bff00000 	.word	0xbff00000
 8009540:	0800e528 	.word	0x0800e528
 8009544:	0800e508 	.word	0x0800e508

08009548 <fabs>:
 8009548:	ec51 0b10 	vmov	r0, r1, d0
 800954c:	ee10 2a10 	vmov	r2, s0
 8009550:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009554:	ec43 2b10 	vmov	d0, r2, r3
 8009558:	4770      	bx	lr

0800955a <atan2>:
 800955a:	f000 b82d 	b.w	80095b8 <__ieee754_atan2>

0800955e <sqrt>:
 800955e:	b538      	push	{r3, r4, r5, lr}
 8009560:	ed2d 8b02 	vpush	{d8}
 8009564:	ec55 4b10 	vmov	r4, r5, d0
 8009568:	f000 f8f0 	bl	800974c <__ieee754_sqrt>
 800956c:	4622      	mov	r2, r4
 800956e:	462b      	mov	r3, r5
 8009570:	4620      	mov	r0, r4
 8009572:	4629      	mov	r1, r5
 8009574:	eeb0 8a40 	vmov.f32	s16, s0
 8009578:	eef0 8a60 	vmov.f32	s17, s1
 800957c:	f7f7 fad6 	bl	8000b2c <__aeabi_dcmpun>
 8009580:	b990      	cbnz	r0, 80095a8 <sqrt+0x4a>
 8009582:	2200      	movs	r2, #0
 8009584:	2300      	movs	r3, #0
 8009586:	4620      	mov	r0, r4
 8009588:	4629      	mov	r1, r5
 800958a:	f7f7 faa7 	bl	8000adc <__aeabi_dcmplt>
 800958e:	b158      	cbz	r0, 80095a8 <sqrt+0x4a>
 8009590:	f000 f98e 	bl	80098b0 <__errno>
 8009594:	2321      	movs	r3, #33	; 0x21
 8009596:	6003      	str	r3, [r0, #0]
 8009598:	2200      	movs	r2, #0
 800959a:	2300      	movs	r3, #0
 800959c:	4610      	mov	r0, r2
 800959e:	4619      	mov	r1, r3
 80095a0:	f7f7 f954 	bl	800084c <__aeabi_ddiv>
 80095a4:	ec41 0b18 	vmov	d8, r0, r1
 80095a8:	eeb0 0a48 	vmov.f32	s0, s16
 80095ac:	eef0 0a68 	vmov.f32	s1, s17
 80095b0:	ecbd 8b02 	vpop	{d8}
 80095b4:	bd38      	pop	{r3, r4, r5, pc}
	...

080095b8 <__ieee754_atan2>:
 80095b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095bc:	ec57 6b11 	vmov	r6, r7, d1
 80095c0:	4273      	negs	r3, r6
 80095c2:	f8df e184 	ldr.w	lr, [pc, #388]	; 8009748 <__ieee754_atan2+0x190>
 80095c6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80095ca:	4333      	orrs	r3, r6
 80095cc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80095d0:	4573      	cmp	r3, lr
 80095d2:	ec51 0b10 	vmov	r0, r1, d0
 80095d6:	ee11 8a10 	vmov	r8, s2
 80095da:	d80a      	bhi.n	80095f2 <__ieee754_atan2+0x3a>
 80095dc:	4244      	negs	r4, r0
 80095de:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80095e2:	4304      	orrs	r4, r0
 80095e4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80095e8:	4574      	cmp	r4, lr
 80095ea:	ee10 9a10 	vmov	r9, s0
 80095ee:	468c      	mov	ip, r1
 80095f0:	d907      	bls.n	8009602 <__ieee754_atan2+0x4a>
 80095f2:	4632      	mov	r2, r6
 80095f4:	463b      	mov	r3, r7
 80095f6:	f7f6 fe49 	bl	800028c <__adddf3>
 80095fa:	ec41 0b10 	vmov	d0, r0, r1
 80095fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009602:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8009606:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800960a:	4334      	orrs	r4, r6
 800960c:	d103      	bne.n	8009616 <__ieee754_atan2+0x5e>
 800960e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009612:	f7ff bdf9 	b.w	8009208 <atan>
 8009616:	17bc      	asrs	r4, r7, #30
 8009618:	f004 0402 	and.w	r4, r4, #2
 800961c:	ea53 0909 	orrs.w	r9, r3, r9
 8009620:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8009624:	d107      	bne.n	8009636 <__ieee754_atan2+0x7e>
 8009626:	2c02      	cmp	r4, #2
 8009628:	d060      	beq.n	80096ec <__ieee754_atan2+0x134>
 800962a:	2c03      	cmp	r4, #3
 800962c:	d1e5      	bne.n	80095fa <__ieee754_atan2+0x42>
 800962e:	a142      	add	r1, pc, #264	; (adr r1, 8009738 <__ieee754_atan2+0x180>)
 8009630:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009634:	e7e1      	b.n	80095fa <__ieee754_atan2+0x42>
 8009636:	ea52 0808 	orrs.w	r8, r2, r8
 800963a:	d106      	bne.n	800964a <__ieee754_atan2+0x92>
 800963c:	f1bc 0f00 	cmp.w	ip, #0
 8009640:	da5f      	bge.n	8009702 <__ieee754_atan2+0x14a>
 8009642:	a13f      	add	r1, pc, #252	; (adr r1, 8009740 <__ieee754_atan2+0x188>)
 8009644:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009648:	e7d7      	b.n	80095fa <__ieee754_atan2+0x42>
 800964a:	4572      	cmp	r2, lr
 800964c:	d10f      	bne.n	800966e <__ieee754_atan2+0xb6>
 800964e:	4293      	cmp	r3, r2
 8009650:	f104 34ff 	add.w	r4, r4, #4294967295
 8009654:	d107      	bne.n	8009666 <__ieee754_atan2+0xae>
 8009656:	2c02      	cmp	r4, #2
 8009658:	d84c      	bhi.n	80096f4 <__ieee754_atan2+0x13c>
 800965a:	4b35      	ldr	r3, [pc, #212]	; (8009730 <__ieee754_atan2+0x178>)
 800965c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8009660:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009664:	e7c9      	b.n	80095fa <__ieee754_atan2+0x42>
 8009666:	2c02      	cmp	r4, #2
 8009668:	d848      	bhi.n	80096fc <__ieee754_atan2+0x144>
 800966a:	4b32      	ldr	r3, [pc, #200]	; (8009734 <__ieee754_atan2+0x17c>)
 800966c:	e7f6      	b.n	800965c <__ieee754_atan2+0xa4>
 800966e:	4573      	cmp	r3, lr
 8009670:	d0e4      	beq.n	800963c <__ieee754_atan2+0x84>
 8009672:	1a9b      	subs	r3, r3, r2
 8009674:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8009678:	ea4f 5223 	mov.w	r2, r3, asr #20
 800967c:	da1e      	bge.n	80096bc <__ieee754_atan2+0x104>
 800967e:	2f00      	cmp	r7, #0
 8009680:	da01      	bge.n	8009686 <__ieee754_atan2+0xce>
 8009682:	323c      	adds	r2, #60	; 0x3c
 8009684:	db1e      	blt.n	80096c4 <__ieee754_atan2+0x10c>
 8009686:	4632      	mov	r2, r6
 8009688:	463b      	mov	r3, r7
 800968a:	f7f7 f8df 	bl	800084c <__aeabi_ddiv>
 800968e:	ec41 0b10 	vmov	d0, r0, r1
 8009692:	f7ff ff59 	bl	8009548 <fabs>
 8009696:	f7ff fdb7 	bl	8009208 <atan>
 800969a:	ec51 0b10 	vmov	r0, r1, d0
 800969e:	2c01      	cmp	r4, #1
 80096a0:	d013      	beq.n	80096ca <__ieee754_atan2+0x112>
 80096a2:	2c02      	cmp	r4, #2
 80096a4:	d015      	beq.n	80096d2 <__ieee754_atan2+0x11a>
 80096a6:	2c00      	cmp	r4, #0
 80096a8:	d0a7      	beq.n	80095fa <__ieee754_atan2+0x42>
 80096aa:	a319      	add	r3, pc, #100	; (adr r3, 8009710 <__ieee754_atan2+0x158>)
 80096ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b0:	f7f6 fdea 	bl	8000288 <__aeabi_dsub>
 80096b4:	a318      	add	r3, pc, #96	; (adr r3, 8009718 <__ieee754_atan2+0x160>)
 80096b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ba:	e014      	b.n	80096e6 <__ieee754_atan2+0x12e>
 80096bc:	a118      	add	r1, pc, #96	; (adr r1, 8009720 <__ieee754_atan2+0x168>)
 80096be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096c2:	e7ec      	b.n	800969e <__ieee754_atan2+0xe6>
 80096c4:	2000      	movs	r0, #0
 80096c6:	2100      	movs	r1, #0
 80096c8:	e7e9      	b.n	800969e <__ieee754_atan2+0xe6>
 80096ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80096ce:	4619      	mov	r1, r3
 80096d0:	e793      	b.n	80095fa <__ieee754_atan2+0x42>
 80096d2:	a30f      	add	r3, pc, #60	; (adr r3, 8009710 <__ieee754_atan2+0x158>)
 80096d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d8:	f7f6 fdd6 	bl	8000288 <__aeabi_dsub>
 80096dc:	4602      	mov	r2, r0
 80096de:	460b      	mov	r3, r1
 80096e0:	a10d      	add	r1, pc, #52	; (adr r1, 8009718 <__ieee754_atan2+0x160>)
 80096e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096e6:	f7f6 fdcf 	bl	8000288 <__aeabi_dsub>
 80096ea:	e786      	b.n	80095fa <__ieee754_atan2+0x42>
 80096ec:	a10a      	add	r1, pc, #40	; (adr r1, 8009718 <__ieee754_atan2+0x160>)
 80096ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096f2:	e782      	b.n	80095fa <__ieee754_atan2+0x42>
 80096f4:	a10c      	add	r1, pc, #48	; (adr r1, 8009728 <__ieee754_atan2+0x170>)
 80096f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096fa:	e77e      	b.n	80095fa <__ieee754_atan2+0x42>
 80096fc:	2000      	movs	r0, #0
 80096fe:	2100      	movs	r1, #0
 8009700:	e77b      	b.n	80095fa <__ieee754_atan2+0x42>
 8009702:	a107      	add	r1, pc, #28	; (adr r1, 8009720 <__ieee754_atan2+0x168>)
 8009704:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009708:	e777      	b.n	80095fa <__ieee754_atan2+0x42>
 800970a:	bf00      	nop
 800970c:	f3af 8000 	nop.w
 8009710:	33145c07 	.word	0x33145c07
 8009714:	3ca1a626 	.word	0x3ca1a626
 8009718:	54442d18 	.word	0x54442d18
 800971c:	400921fb 	.word	0x400921fb
 8009720:	54442d18 	.word	0x54442d18
 8009724:	3ff921fb 	.word	0x3ff921fb
 8009728:	54442d18 	.word	0x54442d18
 800972c:	3fe921fb 	.word	0x3fe921fb
 8009730:	0800e548 	.word	0x0800e548
 8009734:	0800e560 	.word	0x0800e560
 8009738:	54442d18 	.word	0x54442d18
 800973c:	c00921fb 	.word	0xc00921fb
 8009740:	54442d18 	.word	0x54442d18
 8009744:	bff921fb 	.word	0xbff921fb
 8009748:	7ff00000 	.word	0x7ff00000

0800974c <__ieee754_sqrt>:
 800974c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009750:	ec55 4b10 	vmov	r4, r5, d0
 8009754:	4e55      	ldr	r6, [pc, #340]	; (80098ac <__ieee754_sqrt+0x160>)
 8009756:	43ae      	bics	r6, r5
 8009758:	ee10 0a10 	vmov	r0, s0
 800975c:	ee10 3a10 	vmov	r3, s0
 8009760:	462a      	mov	r2, r5
 8009762:	4629      	mov	r1, r5
 8009764:	d110      	bne.n	8009788 <__ieee754_sqrt+0x3c>
 8009766:	ee10 2a10 	vmov	r2, s0
 800976a:	462b      	mov	r3, r5
 800976c:	f7f6 ff44 	bl	80005f8 <__aeabi_dmul>
 8009770:	4602      	mov	r2, r0
 8009772:	460b      	mov	r3, r1
 8009774:	4620      	mov	r0, r4
 8009776:	4629      	mov	r1, r5
 8009778:	f7f6 fd88 	bl	800028c <__adddf3>
 800977c:	4604      	mov	r4, r0
 800977e:	460d      	mov	r5, r1
 8009780:	ec45 4b10 	vmov	d0, r4, r5
 8009784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009788:	2d00      	cmp	r5, #0
 800978a:	dc10      	bgt.n	80097ae <__ieee754_sqrt+0x62>
 800978c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009790:	4330      	orrs	r0, r6
 8009792:	d0f5      	beq.n	8009780 <__ieee754_sqrt+0x34>
 8009794:	b15d      	cbz	r5, 80097ae <__ieee754_sqrt+0x62>
 8009796:	ee10 2a10 	vmov	r2, s0
 800979a:	462b      	mov	r3, r5
 800979c:	ee10 0a10 	vmov	r0, s0
 80097a0:	f7f6 fd72 	bl	8000288 <__aeabi_dsub>
 80097a4:	4602      	mov	r2, r0
 80097a6:	460b      	mov	r3, r1
 80097a8:	f7f7 f850 	bl	800084c <__aeabi_ddiv>
 80097ac:	e7e6      	b.n	800977c <__ieee754_sqrt+0x30>
 80097ae:	1512      	asrs	r2, r2, #20
 80097b0:	d074      	beq.n	800989c <__ieee754_sqrt+0x150>
 80097b2:	07d4      	lsls	r4, r2, #31
 80097b4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80097b8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80097bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80097c0:	bf5e      	ittt	pl
 80097c2:	0fda      	lsrpl	r2, r3, #31
 80097c4:	005b      	lslpl	r3, r3, #1
 80097c6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80097ca:	2400      	movs	r4, #0
 80097cc:	0fda      	lsrs	r2, r3, #31
 80097ce:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80097d2:	107f      	asrs	r7, r7, #1
 80097d4:	005b      	lsls	r3, r3, #1
 80097d6:	2516      	movs	r5, #22
 80097d8:	4620      	mov	r0, r4
 80097da:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80097de:	1886      	adds	r6, r0, r2
 80097e0:	428e      	cmp	r6, r1
 80097e2:	bfde      	ittt	le
 80097e4:	1b89      	suble	r1, r1, r6
 80097e6:	18b0      	addle	r0, r6, r2
 80097e8:	18a4      	addle	r4, r4, r2
 80097ea:	0049      	lsls	r1, r1, #1
 80097ec:	3d01      	subs	r5, #1
 80097ee:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80097f2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80097f6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80097fa:	d1f0      	bne.n	80097de <__ieee754_sqrt+0x92>
 80097fc:	462a      	mov	r2, r5
 80097fe:	f04f 0e20 	mov.w	lr, #32
 8009802:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009806:	4281      	cmp	r1, r0
 8009808:	eb06 0c05 	add.w	ip, r6, r5
 800980c:	dc02      	bgt.n	8009814 <__ieee754_sqrt+0xc8>
 800980e:	d113      	bne.n	8009838 <__ieee754_sqrt+0xec>
 8009810:	459c      	cmp	ip, r3
 8009812:	d811      	bhi.n	8009838 <__ieee754_sqrt+0xec>
 8009814:	f1bc 0f00 	cmp.w	ip, #0
 8009818:	eb0c 0506 	add.w	r5, ip, r6
 800981c:	da43      	bge.n	80098a6 <__ieee754_sqrt+0x15a>
 800981e:	2d00      	cmp	r5, #0
 8009820:	db41      	blt.n	80098a6 <__ieee754_sqrt+0x15a>
 8009822:	f100 0801 	add.w	r8, r0, #1
 8009826:	1a09      	subs	r1, r1, r0
 8009828:	459c      	cmp	ip, r3
 800982a:	bf88      	it	hi
 800982c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8009830:	eba3 030c 	sub.w	r3, r3, ip
 8009834:	4432      	add	r2, r6
 8009836:	4640      	mov	r0, r8
 8009838:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800983c:	f1be 0e01 	subs.w	lr, lr, #1
 8009840:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8009844:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009848:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800984c:	d1db      	bne.n	8009806 <__ieee754_sqrt+0xba>
 800984e:	430b      	orrs	r3, r1
 8009850:	d006      	beq.n	8009860 <__ieee754_sqrt+0x114>
 8009852:	1c50      	adds	r0, r2, #1
 8009854:	bf13      	iteet	ne
 8009856:	3201      	addne	r2, #1
 8009858:	3401      	addeq	r4, #1
 800985a:	4672      	moveq	r2, lr
 800985c:	f022 0201 	bicne.w	r2, r2, #1
 8009860:	1063      	asrs	r3, r4, #1
 8009862:	0852      	lsrs	r2, r2, #1
 8009864:	07e1      	lsls	r1, r4, #31
 8009866:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800986a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800986e:	bf48      	it	mi
 8009870:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8009874:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8009878:	4614      	mov	r4, r2
 800987a:	e781      	b.n	8009780 <__ieee754_sqrt+0x34>
 800987c:	0ad9      	lsrs	r1, r3, #11
 800987e:	3815      	subs	r0, #21
 8009880:	055b      	lsls	r3, r3, #21
 8009882:	2900      	cmp	r1, #0
 8009884:	d0fa      	beq.n	800987c <__ieee754_sqrt+0x130>
 8009886:	02cd      	lsls	r5, r1, #11
 8009888:	d50a      	bpl.n	80098a0 <__ieee754_sqrt+0x154>
 800988a:	f1c2 0420 	rsb	r4, r2, #32
 800988e:	fa23 f404 	lsr.w	r4, r3, r4
 8009892:	1e55      	subs	r5, r2, #1
 8009894:	4093      	lsls	r3, r2
 8009896:	4321      	orrs	r1, r4
 8009898:	1b42      	subs	r2, r0, r5
 800989a:	e78a      	b.n	80097b2 <__ieee754_sqrt+0x66>
 800989c:	4610      	mov	r0, r2
 800989e:	e7f0      	b.n	8009882 <__ieee754_sqrt+0x136>
 80098a0:	0049      	lsls	r1, r1, #1
 80098a2:	3201      	adds	r2, #1
 80098a4:	e7ef      	b.n	8009886 <__ieee754_sqrt+0x13a>
 80098a6:	4680      	mov	r8, r0
 80098a8:	e7bd      	b.n	8009826 <__ieee754_sqrt+0xda>
 80098aa:	bf00      	nop
 80098ac:	7ff00000 	.word	0x7ff00000

080098b0 <__errno>:
 80098b0:	4b01      	ldr	r3, [pc, #4]	; (80098b8 <__errno+0x8>)
 80098b2:	6818      	ldr	r0, [r3, #0]
 80098b4:	4770      	bx	lr
 80098b6:	bf00      	nop
 80098b8:	200000a4 	.word	0x200000a4

080098bc <__libc_init_array>:
 80098bc:	b570      	push	{r4, r5, r6, lr}
 80098be:	4d0d      	ldr	r5, [pc, #52]	; (80098f4 <__libc_init_array+0x38>)
 80098c0:	4c0d      	ldr	r4, [pc, #52]	; (80098f8 <__libc_init_array+0x3c>)
 80098c2:	1b64      	subs	r4, r4, r5
 80098c4:	10a4      	asrs	r4, r4, #2
 80098c6:	2600      	movs	r6, #0
 80098c8:	42a6      	cmp	r6, r4
 80098ca:	d109      	bne.n	80098e0 <__libc_init_array+0x24>
 80098cc:	4d0b      	ldr	r5, [pc, #44]	; (80098fc <__libc_init_array+0x40>)
 80098ce:	4c0c      	ldr	r4, [pc, #48]	; (8009900 <__libc_init_array+0x44>)
 80098d0:	f004 fd1c 	bl	800e30c <_init>
 80098d4:	1b64      	subs	r4, r4, r5
 80098d6:	10a4      	asrs	r4, r4, #2
 80098d8:	2600      	movs	r6, #0
 80098da:	42a6      	cmp	r6, r4
 80098dc:	d105      	bne.n	80098ea <__libc_init_array+0x2e>
 80098de:	bd70      	pop	{r4, r5, r6, pc}
 80098e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80098e4:	4798      	blx	r3
 80098e6:	3601      	adds	r6, #1
 80098e8:	e7ee      	b.n	80098c8 <__libc_init_array+0xc>
 80098ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80098ee:	4798      	blx	r3
 80098f0:	3601      	adds	r6, #1
 80098f2:	e7f2      	b.n	80098da <__libc_init_array+0x1e>
 80098f4:	0800ea2c 	.word	0x0800ea2c
 80098f8:	0800ea2c 	.word	0x0800ea2c
 80098fc:	0800ea2c 	.word	0x0800ea2c
 8009900:	0800ea30 	.word	0x0800ea30

08009904 <memcpy>:
 8009904:	440a      	add	r2, r1
 8009906:	4291      	cmp	r1, r2
 8009908:	f100 33ff 	add.w	r3, r0, #4294967295
 800990c:	d100      	bne.n	8009910 <memcpy+0xc>
 800990e:	4770      	bx	lr
 8009910:	b510      	push	{r4, lr}
 8009912:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009916:	f803 4f01 	strb.w	r4, [r3, #1]!
 800991a:	4291      	cmp	r1, r2
 800991c:	d1f9      	bne.n	8009912 <memcpy+0xe>
 800991e:	bd10      	pop	{r4, pc}

08009920 <memset>:
 8009920:	4402      	add	r2, r0
 8009922:	4603      	mov	r3, r0
 8009924:	4293      	cmp	r3, r2
 8009926:	d100      	bne.n	800992a <memset+0xa>
 8009928:	4770      	bx	lr
 800992a:	f803 1b01 	strb.w	r1, [r3], #1
 800992e:	e7f9      	b.n	8009924 <memset+0x4>

08009930 <__cvt>:
 8009930:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009934:	ec55 4b10 	vmov	r4, r5, d0
 8009938:	2d00      	cmp	r5, #0
 800993a:	460e      	mov	r6, r1
 800993c:	4619      	mov	r1, r3
 800993e:	462b      	mov	r3, r5
 8009940:	bfbb      	ittet	lt
 8009942:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009946:	461d      	movlt	r5, r3
 8009948:	2300      	movge	r3, #0
 800994a:	232d      	movlt	r3, #45	; 0x2d
 800994c:	700b      	strb	r3, [r1, #0]
 800994e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009950:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009954:	4691      	mov	r9, r2
 8009956:	f023 0820 	bic.w	r8, r3, #32
 800995a:	bfbc      	itt	lt
 800995c:	4622      	movlt	r2, r4
 800995e:	4614      	movlt	r4, r2
 8009960:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009964:	d005      	beq.n	8009972 <__cvt+0x42>
 8009966:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800996a:	d100      	bne.n	800996e <__cvt+0x3e>
 800996c:	3601      	adds	r6, #1
 800996e:	2102      	movs	r1, #2
 8009970:	e000      	b.n	8009974 <__cvt+0x44>
 8009972:	2103      	movs	r1, #3
 8009974:	ab03      	add	r3, sp, #12
 8009976:	9301      	str	r3, [sp, #4]
 8009978:	ab02      	add	r3, sp, #8
 800997a:	9300      	str	r3, [sp, #0]
 800997c:	ec45 4b10 	vmov	d0, r4, r5
 8009980:	4653      	mov	r3, sl
 8009982:	4632      	mov	r2, r6
 8009984:	f001 fefc 	bl	800b780 <_dtoa_r>
 8009988:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800998c:	4607      	mov	r7, r0
 800998e:	d102      	bne.n	8009996 <__cvt+0x66>
 8009990:	f019 0f01 	tst.w	r9, #1
 8009994:	d022      	beq.n	80099dc <__cvt+0xac>
 8009996:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800999a:	eb07 0906 	add.w	r9, r7, r6
 800999e:	d110      	bne.n	80099c2 <__cvt+0x92>
 80099a0:	783b      	ldrb	r3, [r7, #0]
 80099a2:	2b30      	cmp	r3, #48	; 0x30
 80099a4:	d10a      	bne.n	80099bc <__cvt+0x8c>
 80099a6:	2200      	movs	r2, #0
 80099a8:	2300      	movs	r3, #0
 80099aa:	4620      	mov	r0, r4
 80099ac:	4629      	mov	r1, r5
 80099ae:	f7f7 f88b 	bl	8000ac8 <__aeabi_dcmpeq>
 80099b2:	b918      	cbnz	r0, 80099bc <__cvt+0x8c>
 80099b4:	f1c6 0601 	rsb	r6, r6, #1
 80099b8:	f8ca 6000 	str.w	r6, [sl]
 80099bc:	f8da 3000 	ldr.w	r3, [sl]
 80099c0:	4499      	add	r9, r3
 80099c2:	2200      	movs	r2, #0
 80099c4:	2300      	movs	r3, #0
 80099c6:	4620      	mov	r0, r4
 80099c8:	4629      	mov	r1, r5
 80099ca:	f7f7 f87d 	bl	8000ac8 <__aeabi_dcmpeq>
 80099ce:	b108      	cbz	r0, 80099d4 <__cvt+0xa4>
 80099d0:	f8cd 900c 	str.w	r9, [sp, #12]
 80099d4:	2230      	movs	r2, #48	; 0x30
 80099d6:	9b03      	ldr	r3, [sp, #12]
 80099d8:	454b      	cmp	r3, r9
 80099da:	d307      	bcc.n	80099ec <__cvt+0xbc>
 80099dc:	9b03      	ldr	r3, [sp, #12]
 80099de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80099e0:	1bdb      	subs	r3, r3, r7
 80099e2:	4638      	mov	r0, r7
 80099e4:	6013      	str	r3, [r2, #0]
 80099e6:	b004      	add	sp, #16
 80099e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099ec:	1c59      	adds	r1, r3, #1
 80099ee:	9103      	str	r1, [sp, #12]
 80099f0:	701a      	strb	r2, [r3, #0]
 80099f2:	e7f0      	b.n	80099d6 <__cvt+0xa6>

080099f4 <__exponent>:
 80099f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80099f6:	4603      	mov	r3, r0
 80099f8:	2900      	cmp	r1, #0
 80099fa:	bfb8      	it	lt
 80099fc:	4249      	neglt	r1, r1
 80099fe:	f803 2b02 	strb.w	r2, [r3], #2
 8009a02:	bfb4      	ite	lt
 8009a04:	222d      	movlt	r2, #45	; 0x2d
 8009a06:	222b      	movge	r2, #43	; 0x2b
 8009a08:	2909      	cmp	r1, #9
 8009a0a:	7042      	strb	r2, [r0, #1]
 8009a0c:	dd2a      	ble.n	8009a64 <__exponent+0x70>
 8009a0e:	f10d 0407 	add.w	r4, sp, #7
 8009a12:	46a4      	mov	ip, r4
 8009a14:	270a      	movs	r7, #10
 8009a16:	46a6      	mov	lr, r4
 8009a18:	460a      	mov	r2, r1
 8009a1a:	fb91 f6f7 	sdiv	r6, r1, r7
 8009a1e:	fb07 1516 	mls	r5, r7, r6, r1
 8009a22:	3530      	adds	r5, #48	; 0x30
 8009a24:	2a63      	cmp	r2, #99	; 0x63
 8009a26:	f104 34ff 	add.w	r4, r4, #4294967295
 8009a2a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009a2e:	4631      	mov	r1, r6
 8009a30:	dcf1      	bgt.n	8009a16 <__exponent+0x22>
 8009a32:	3130      	adds	r1, #48	; 0x30
 8009a34:	f1ae 0502 	sub.w	r5, lr, #2
 8009a38:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009a3c:	1c44      	adds	r4, r0, #1
 8009a3e:	4629      	mov	r1, r5
 8009a40:	4561      	cmp	r1, ip
 8009a42:	d30a      	bcc.n	8009a5a <__exponent+0x66>
 8009a44:	f10d 0209 	add.w	r2, sp, #9
 8009a48:	eba2 020e 	sub.w	r2, r2, lr
 8009a4c:	4565      	cmp	r5, ip
 8009a4e:	bf88      	it	hi
 8009a50:	2200      	movhi	r2, #0
 8009a52:	4413      	add	r3, r2
 8009a54:	1a18      	subs	r0, r3, r0
 8009a56:	b003      	add	sp, #12
 8009a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a5e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009a62:	e7ed      	b.n	8009a40 <__exponent+0x4c>
 8009a64:	2330      	movs	r3, #48	; 0x30
 8009a66:	3130      	adds	r1, #48	; 0x30
 8009a68:	7083      	strb	r3, [r0, #2]
 8009a6a:	70c1      	strb	r1, [r0, #3]
 8009a6c:	1d03      	adds	r3, r0, #4
 8009a6e:	e7f1      	b.n	8009a54 <__exponent+0x60>

08009a70 <_printf_float>:
 8009a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a74:	ed2d 8b02 	vpush	{d8}
 8009a78:	b08d      	sub	sp, #52	; 0x34
 8009a7a:	460c      	mov	r4, r1
 8009a7c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009a80:	4616      	mov	r6, r2
 8009a82:	461f      	mov	r7, r3
 8009a84:	4605      	mov	r5, r0
 8009a86:	f003 f98f 	bl	800cda8 <_localeconv_r>
 8009a8a:	f8d0 a000 	ldr.w	sl, [r0]
 8009a8e:	4650      	mov	r0, sl
 8009a90:	f7f6 fb9e 	bl	80001d0 <strlen>
 8009a94:	2300      	movs	r3, #0
 8009a96:	930a      	str	r3, [sp, #40]	; 0x28
 8009a98:	6823      	ldr	r3, [r4, #0]
 8009a9a:	9305      	str	r3, [sp, #20]
 8009a9c:	f8d8 3000 	ldr.w	r3, [r8]
 8009aa0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009aa4:	3307      	adds	r3, #7
 8009aa6:	f023 0307 	bic.w	r3, r3, #7
 8009aaa:	f103 0208 	add.w	r2, r3, #8
 8009aae:	f8c8 2000 	str.w	r2, [r8]
 8009ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009aba:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009abe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009ac2:	9307      	str	r3, [sp, #28]
 8009ac4:	f8cd 8018 	str.w	r8, [sp, #24]
 8009ac8:	ee08 0a10 	vmov	s16, r0
 8009acc:	4b9f      	ldr	r3, [pc, #636]	; (8009d4c <_printf_float+0x2dc>)
 8009ace:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009ad2:	f04f 32ff 	mov.w	r2, #4294967295
 8009ad6:	f7f7 f829 	bl	8000b2c <__aeabi_dcmpun>
 8009ada:	bb88      	cbnz	r0, 8009b40 <_printf_float+0xd0>
 8009adc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009ae0:	4b9a      	ldr	r3, [pc, #616]	; (8009d4c <_printf_float+0x2dc>)
 8009ae2:	f04f 32ff 	mov.w	r2, #4294967295
 8009ae6:	f7f7 f803 	bl	8000af0 <__aeabi_dcmple>
 8009aea:	bb48      	cbnz	r0, 8009b40 <_printf_float+0xd0>
 8009aec:	2200      	movs	r2, #0
 8009aee:	2300      	movs	r3, #0
 8009af0:	4640      	mov	r0, r8
 8009af2:	4649      	mov	r1, r9
 8009af4:	f7f6 fff2 	bl	8000adc <__aeabi_dcmplt>
 8009af8:	b110      	cbz	r0, 8009b00 <_printf_float+0x90>
 8009afa:	232d      	movs	r3, #45	; 0x2d
 8009afc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b00:	4b93      	ldr	r3, [pc, #588]	; (8009d50 <_printf_float+0x2e0>)
 8009b02:	4894      	ldr	r0, [pc, #592]	; (8009d54 <_printf_float+0x2e4>)
 8009b04:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009b08:	bf94      	ite	ls
 8009b0a:	4698      	movls	r8, r3
 8009b0c:	4680      	movhi	r8, r0
 8009b0e:	2303      	movs	r3, #3
 8009b10:	6123      	str	r3, [r4, #16]
 8009b12:	9b05      	ldr	r3, [sp, #20]
 8009b14:	f023 0204 	bic.w	r2, r3, #4
 8009b18:	6022      	str	r2, [r4, #0]
 8009b1a:	f04f 0900 	mov.w	r9, #0
 8009b1e:	9700      	str	r7, [sp, #0]
 8009b20:	4633      	mov	r3, r6
 8009b22:	aa0b      	add	r2, sp, #44	; 0x2c
 8009b24:	4621      	mov	r1, r4
 8009b26:	4628      	mov	r0, r5
 8009b28:	f000 f9d8 	bl	8009edc <_printf_common>
 8009b2c:	3001      	adds	r0, #1
 8009b2e:	f040 8090 	bne.w	8009c52 <_printf_float+0x1e2>
 8009b32:	f04f 30ff 	mov.w	r0, #4294967295
 8009b36:	b00d      	add	sp, #52	; 0x34
 8009b38:	ecbd 8b02 	vpop	{d8}
 8009b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b40:	4642      	mov	r2, r8
 8009b42:	464b      	mov	r3, r9
 8009b44:	4640      	mov	r0, r8
 8009b46:	4649      	mov	r1, r9
 8009b48:	f7f6 fff0 	bl	8000b2c <__aeabi_dcmpun>
 8009b4c:	b140      	cbz	r0, 8009b60 <_printf_float+0xf0>
 8009b4e:	464b      	mov	r3, r9
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	bfbc      	itt	lt
 8009b54:	232d      	movlt	r3, #45	; 0x2d
 8009b56:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009b5a:	487f      	ldr	r0, [pc, #508]	; (8009d58 <_printf_float+0x2e8>)
 8009b5c:	4b7f      	ldr	r3, [pc, #508]	; (8009d5c <_printf_float+0x2ec>)
 8009b5e:	e7d1      	b.n	8009b04 <_printf_float+0x94>
 8009b60:	6863      	ldr	r3, [r4, #4]
 8009b62:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009b66:	9206      	str	r2, [sp, #24]
 8009b68:	1c5a      	adds	r2, r3, #1
 8009b6a:	d13f      	bne.n	8009bec <_printf_float+0x17c>
 8009b6c:	2306      	movs	r3, #6
 8009b6e:	6063      	str	r3, [r4, #4]
 8009b70:	9b05      	ldr	r3, [sp, #20]
 8009b72:	6861      	ldr	r1, [r4, #4]
 8009b74:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009b78:	2300      	movs	r3, #0
 8009b7a:	9303      	str	r3, [sp, #12]
 8009b7c:	ab0a      	add	r3, sp, #40	; 0x28
 8009b7e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009b82:	ab09      	add	r3, sp, #36	; 0x24
 8009b84:	ec49 8b10 	vmov	d0, r8, r9
 8009b88:	9300      	str	r3, [sp, #0]
 8009b8a:	6022      	str	r2, [r4, #0]
 8009b8c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009b90:	4628      	mov	r0, r5
 8009b92:	f7ff fecd 	bl	8009930 <__cvt>
 8009b96:	9b06      	ldr	r3, [sp, #24]
 8009b98:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009b9a:	2b47      	cmp	r3, #71	; 0x47
 8009b9c:	4680      	mov	r8, r0
 8009b9e:	d108      	bne.n	8009bb2 <_printf_float+0x142>
 8009ba0:	1cc8      	adds	r0, r1, #3
 8009ba2:	db02      	blt.n	8009baa <_printf_float+0x13a>
 8009ba4:	6863      	ldr	r3, [r4, #4]
 8009ba6:	4299      	cmp	r1, r3
 8009ba8:	dd41      	ble.n	8009c2e <_printf_float+0x1be>
 8009baa:	f1ab 0b02 	sub.w	fp, fp, #2
 8009bae:	fa5f fb8b 	uxtb.w	fp, fp
 8009bb2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009bb6:	d820      	bhi.n	8009bfa <_printf_float+0x18a>
 8009bb8:	3901      	subs	r1, #1
 8009bba:	465a      	mov	r2, fp
 8009bbc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009bc0:	9109      	str	r1, [sp, #36]	; 0x24
 8009bc2:	f7ff ff17 	bl	80099f4 <__exponent>
 8009bc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009bc8:	1813      	adds	r3, r2, r0
 8009bca:	2a01      	cmp	r2, #1
 8009bcc:	4681      	mov	r9, r0
 8009bce:	6123      	str	r3, [r4, #16]
 8009bd0:	dc02      	bgt.n	8009bd8 <_printf_float+0x168>
 8009bd2:	6822      	ldr	r2, [r4, #0]
 8009bd4:	07d2      	lsls	r2, r2, #31
 8009bd6:	d501      	bpl.n	8009bdc <_printf_float+0x16c>
 8009bd8:	3301      	adds	r3, #1
 8009bda:	6123      	str	r3, [r4, #16]
 8009bdc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d09c      	beq.n	8009b1e <_printf_float+0xae>
 8009be4:	232d      	movs	r3, #45	; 0x2d
 8009be6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bea:	e798      	b.n	8009b1e <_printf_float+0xae>
 8009bec:	9a06      	ldr	r2, [sp, #24]
 8009bee:	2a47      	cmp	r2, #71	; 0x47
 8009bf0:	d1be      	bne.n	8009b70 <_printf_float+0x100>
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d1bc      	bne.n	8009b70 <_printf_float+0x100>
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	e7b9      	b.n	8009b6e <_printf_float+0xfe>
 8009bfa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009bfe:	d118      	bne.n	8009c32 <_printf_float+0x1c2>
 8009c00:	2900      	cmp	r1, #0
 8009c02:	6863      	ldr	r3, [r4, #4]
 8009c04:	dd0b      	ble.n	8009c1e <_printf_float+0x1ae>
 8009c06:	6121      	str	r1, [r4, #16]
 8009c08:	b913      	cbnz	r3, 8009c10 <_printf_float+0x1a0>
 8009c0a:	6822      	ldr	r2, [r4, #0]
 8009c0c:	07d0      	lsls	r0, r2, #31
 8009c0e:	d502      	bpl.n	8009c16 <_printf_float+0x1a6>
 8009c10:	3301      	adds	r3, #1
 8009c12:	440b      	add	r3, r1
 8009c14:	6123      	str	r3, [r4, #16]
 8009c16:	65a1      	str	r1, [r4, #88]	; 0x58
 8009c18:	f04f 0900 	mov.w	r9, #0
 8009c1c:	e7de      	b.n	8009bdc <_printf_float+0x16c>
 8009c1e:	b913      	cbnz	r3, 8009c26 <_printf_float+0x1b6>
 8009c20:	6822      	ldr	r2, [r4, #0]
 8009c22:	07d2      	lsls	r2, r2, #31
 8009c24:	d501      	bpl.n	8009c2a <_printf_float+0x1ba>
 8009c26:	3302      	adds	r3, #2
 8009c28:	e7f4      	b.n	8009c14 <_printf_float+0x1a4>
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	e7f2      	b.n	8009c14 <_printf_float+0x1a4>
 8009c2e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009c32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c34:	4299      	cmp	r1, r3
 8009c36:	db05      	blt.n	8009c44 <_printf_float+0x1d4>
 8009c38:	6823      	ldr	r3, [r4, #0]
 8009c3a:	6121      	str	r1, [r4, #16]
 8009c3c:	07d8      	lsls	r0, r3, #31
 8009c3e:	d5ea      	bpl.n	8009c16 <_printf_float+0x1a6>
 8009c40:	1c4b      	adds	r3, r1, #1
 8009c42:	e7e7      	b.n	8009c14 <_printf_float+0x1a4>
 8009c44:	2900      	cmp	r1, #0
 8009c46:	bfd4      	ite	le
 8009c48:	f1c1 0202 	rsble	r2, r1, #2
 8009c4c:	2201      	movgt	r2, #1
 8009c4e:	4413      	add	r3, r2
 8009c50:	e7e0      	b.n	8009c14 <_printf_float+0x1a4>
 8009c52:	6823      	ldr	r3, [r4, #0]
 8009c54:	055a      	lsls	r2, r3, #21
 8009c56:	d407      	bmi.n	8009c68 <_printf_float+0x1f8>
 8009c58:	6923      	ldr	r3, [r4, #16]
 8009c5a:	4642      	mov	r2, r8
 8009c5c:	4631      	mov	r1, r6
 8009c5e:	4628      	mov	r0, r5
 8009c60:	47b8      	blx	r7
 8009c62:	3001      	adds	r0, #1
 8009c64:	d12c      	bne.n	8009cc0 <_printf_float+0x250>
 8009c66:	e764      	b.n	8009b32 <_printf_float+0xc2>
 8009c68:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009c6c:	f240 80e0 	bls.w	8009e30 <_printf_float+0x3c0>
 8009c70:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009c74:	2200      	movs	r2, #0
 8009c76:	2300      	movs	r3, #0
 8009c78:	f7f6 ff26 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c7c:	2800      	cmp	r0, #0
 8009c7e:	d034      	beq.n	8009cea <_printf_float+0x27a>
 8009c80:	4a37      	ldr	r2, [pc, #220]	; (8009d60 <_printf_float+0x2f0>)
 8009c82:	2301      	movs	r3, #1
 8009c84:	4631      	mov	r1, r6
 8009c86:	4628      	mov	r0, r5
 8009c88:	47b8      	blx	r7
 8009c8a:	3001      	adds	r0, #1
 8009c8c:	f43f af51 	beq.w	8009b32 <_printf_float+0xc2>
 8009c90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c94:	429a      	cmp	r2, r3
 8009c96:	db02      	blt.n	8009c9e <_printf_float+0x22e>
 8009c98:	6823      	ldr	r3, [r4, #0]
 8009c9a:	07d8      	lsls	r0, r3, #31
 8009c9c:	d510      	bpl.n	8009cc0 <_printf_float+0x250>
 8009c9e:	ee18 3a10 	vmov	r3, s16
 8009ca2:	4652      	mov	r2, sl
 8009ca4:	4631      	mov	r1, r6
 8009ca6:	4628      	mov	r0, r5
 8009ca8:	47b8      	blx	r7
 8009caa:	3001      	adds	r0, #1
 8009cac:	f43f af41 	beq.w	8009b32 <_printf_float+0xc2>
 8009cb0:	f04f 0800 	mov.w	r8, #0
 8009cb4:	f104 091a 	add.w	r9, r4, #26
 8009cb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cba:	3b01      	subs	r3, #1
 8009cbc:	4543      	cmp	r3, r8
 8009cbe:	dc09      	bgt.n	8009cd4 <_printf_float+0x264>
 8009cc0:	6823      	ldr	r3, [r4, #0]
 8009cc2:	079b      	lsls	r3, r3, #30
 8009cc4:	f100 8105 	bmi.w	8009ed2 <_printf_float+0x462>
 8009cc8:	68e0      	ldr	r0, [r4, #12]
 8009cca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ccc:	4298      	cmp	r0, r3
 8009cce:	bfb8      	it	lt
 8009cd0:	4618      	movlt	r0, r3
 8009cd2:	e730      	b.n	8009b36 <_printf_float+0xc6>
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	464a      	mov	r2, r9
 8009cd8:	4631      	mov	r1, r6
 8009cda:	4628      	mov	r0, r5
 8009cdc:	47b8      	blx	r7
 8009cde:	3001      	adds	r0, #1
 8009ce0:	f43f af27 	beq.w	8009b32 <_printf_float+0xc2>
 8009ce4:	f108 0801 	add.w	r8, r8, #1
 8009ce8:	e7e6      	b.n	8009cb8 <_printf_float+0x248>
 8009cea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	dc39      	bgt.n	8009d64 <_printf_float+0x2f4>
 8009cf0:	4a1b      	ldr	r2, [pc, #108]	; (8009d60 <_printf_float+0x2f0>)
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	4631      	mov	r1, r6
 8009cf6:	4628      	mov	r0, r5
 8009cf8:	47b8      	blx	r7
 8009cfa:	3001      	adds	r0, #1
 8009cfc:	f43f af19 	beq.w	8009b32 <_printf_float+0xc2>
 8009d00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d04:	4313      	orrs	r3, r2
 8009d06:	d102      	bne.n	8009d0e <_printf_float+0x29e>
 8009d08:	6823      	ldr	r3, [r4, #0]
 8009d0a:	07d9      	lsls	r1, r3, #31
 8009d0c:	d5d8      	bpl.n	8009cc0 <_printf_float+0x250>
 8009d0e:	ee18 3a10 	vmov	r3, s16
 8009d12:	4652      	mov	r2, sl
 8009d14:	4631      	mov	r1, r6
 8009d16:	4628      	mov	r0, r5
 8009d18:	47b8      	blx	r7
 8009d1a:	3001      	adds	r0, #1
 8009d1c:	f43f af09 	beq.w	8009b32 <_printf_float+0xc2>
 8009d20:	f04f 0900 	mov.w	r9, #0
 8009d24:	f104 0a1a 	add.w	sl, r4, #26
 8009d28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d2a:	425b      	negs	r3, r3
 8009d2c:	454b      	cmp	r3, r9
 8009d2e:	dc01      	bgt.n	8009d34 <_printf_float+0x2c4>
 8009d30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d32:	e792      	b.n	8009c5a <_printf_float+0x1ea>
 8009d34:	2301      	movs	r3, #1
 8009d36:	4652      	mov	r2, sl
 8009d38:	4631      	mov	r1, r6
 8009d3a:	4628      	mov	r0, r5
 8009d3c:	47b8      	blx	r7
 8009d3e:	3001      	adds	r0, #1
 8009d40:	f43f aef7 	beq.w	8009b32 <_printf_float+0xc2>
 8009d44:	f109 0901 	add.w	r9, r9, #1
 8009d48:	e7ee      	b.n	8009d28 <_printf_float+0x2b8>
 8009d4a:	bf00      	nop
 8009d4c:	7fefffff 	.word	0x7fefffff
 8009d50:	0800e57c 	.word	0x0800e57c
 8009d54:	0800e580 	.word	0x0800e580
 8009d58:	0800e588 	.word	0x0800e588
 8009d5c:	0800e584 	.word	0x0800e584
 8009d60:	0800e58c 	.word	0x0800e58c
 8009d64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d66:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009d68:	429a      	cmp	r2, r3
 8009d6a:	bfa8      	it	ge
 8009d6c:	461a      	movge	r2, r3
 8009d6e:	2a00      	cmp	r2, #0
 8009d70:	4691      	mov	r9, r2
 8009d72:	dc37      	bgt.n	8009de4 <_printf_float+0x374>
 8009d74:	f04f 0b00 	mov.w	fp, #0
 8009d78:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009d7c:	f104 021a 	add.w	r2, r4, #26
 8009d80:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009d82:	9305      	str	r3, [sp, #20]
 8009d84:	eba3 0309 	sub.w	r3, r3, r9
 8009d88:	455b      	cmp	r3, fp
 8009d8a:	dc33      	bgt.n	8009df4 <_printf_float+0x384>
 8009d8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d90:	429a      	cmp	r2, r3
 8009d92:	db3b      	blt.n	8009e0c <_printf_float+0x39c>
 8009d94:	6823      	ldr	r3, [r4, #0]
 8009d96:	07da      	lsls	r2, r3, #31
 8009d98:	d438      	bmi.n	8009e0c <_printf_float+0x39c>
 8009d9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d9c:	9a05      	ldr	r2, [sp, #20]
 8009d9e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009da0:	1a9a      	subs	r2, r3, r2
 8009da2:	eba3 0901 	sub.w	r9, r3, r1
 8009da6:	4591      	cmp	r9, r2
 8009da8:	bfa8      	it	ge
 8009daa:	4691      	movge	r9, r2
 8009dac:	f1b9 0f00 	cmp.w	r9, #0
 8009db0:	dc35      	bgt.n	8009e1e <_printf_float+0x3ae>
 8009db2:	f04f 0800 	mov.w	r8, #0
 8009db6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009dba:	f104 0a1a 	add.w	sl, r4, #26
 8009dbe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009dc2:	1a9b      	subs	r3, r3, r2
 8009dc4:	eba3 0309 	sub.w	r3, r3, r9
 8009dc8:	4543      	cmp	r3, r8
 8009dca:	f77f af79 	ble.w	8009cc0 <_printf_float+0x250>
 8009dce:	2301      	movs	r3, #1
 8009dd0:	4652      	mov	r2, sl
 8009dd2:	4631      	mov	r1, r6
 8009dd4:	4628      	mov	r0, r5
 8009dd6:	47b8      	blx	r7
 8009dd8:	3001      	adds	r0, #1
 8009dda:	f43f aeaa 	beq.w	8009b32 <_printf_float+0xc2>
 8009dde:	f108 0801 	add.w	r8, r8, #1
 8009de2:	e7ec      	b.n	8009dbe <_printf_float+0x34e>
 8009de4:	4613      	mov	r3, r2
 8009de6:	4631      	mov	r1, r6
 8009de8:	4642      	mov	r2, r8
 8009dea:	4628      	mov	r0, r5
 8009dec:	47b8      	blx	r7
 8009dee:	3001      	adds	r0, #1
 8009df0:	d1c0      	bne.n	8009d74 <_printf_float+0x304>
 8009df2:	e69e      	b.n	8009b32 <_printf_float+0xc2>
 8009df4:	2301      	movs	r3, #1
 8009df6:	4631      	mov	r1, r6
 8009df8:	4628      	mov	r0, r5
 8009dfa:	9205      	str	r2, [sp, #20]
 8009dfc:	47b8      	blx	r7
 8009dfe:	3001      	adds	r0, #1
 8009e00:	f43f ae97 	beq.w	8009b32 <_printf_float+0xc2>
 8009e04:	9a05      	ldr	r2, [sp, #20]
 8009e06:	f10b 0b01 	add.w	fp, fp, #1
 8009e0a:	e7b9      	b.n	8009d80 <_printf_float+0x310>
 8009e0c:	ee18 3a10 	vmov	r3, s16
 8009e10:	4652      	mov	r2, sl
 8009e12:	4631      	mov	r1, r6
 8009e14:	4628      	mov	r0, r5
 8009e16:	47b8      	blx	r7
 8009e18:	3001      	adds	r0, #1
 8009e1a:	d1be      	bne.n	8009d9a <_printf_float+0x32a>
 8009e1c:	e689      	b.n	8009b32 <_printf_float+0xc2>
 8009e1e:	9a05      	ldr	r2, [sp, #20]
 8009e20:	464b      	mov	r3, r9
 8009e22:	4442      	add	r2, r8
 8009e24:	4631      	mov	r1, r6
 8009e26:	4628      	mov	r0, r5
 8009e28:	47b8      	blx	r7
 8009e2a:	3001      	adds	r0, #1
 8009e2c:	d1c1      	bne.n	8009db2 <_printf_float+0x342>
 8009e2e:	e680      	b.n	8009b32 <_printf_float+0xc2>
 8009e30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e32:	2a01      	cmp	r2, #1
 8009e34:	dc01      	bgt.n	8009e3a <_printf_float+0x3ca>
 8009e36:	07db      	lsls	r3, r3, #31
 8009e38:	d538      	bpl.n	8009eac <_printf_float+0x43c>
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	4642      	mov	r2, r8
 8009e3e:	4631      	mov	r1, r6
 8009e40:	4628      	mov	r0, r5
 8009e42:	47b8      	blx	r7
 8009e44:	3001      	adds	r0, #1
 8009e46:	f43f ae74 	beq.w	8009b32 <_printf_float+0xc2>
 8009e4a:	ee18 3a10 	vmov	r3, s16
 8009e4e:	4652      	mov	r2, sl
 8009e50:	4631      	mov	r1, r6
 8009e52:	4628      	mov	r0, r5
 8009e54:	47b8      	blx	r7
 8009e56:	3001      	adds	r0, #1
 8009e58:	f43f ae6b 	beq.w	8009b32 <_printf_float+0xc2>
 8009e5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009e60:	2200      	movs	r2, #0
 8009e62:	2300      	movs	r3, #0
 8009e64:	f7f6 fe30 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e68:	b9d8      	cbnz	r0, 8009ea2 <_printf_float+0x432>
 8009e6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e6c:	f108 0201 	add.w	r2, r8, #1
 8009e70:	3b01      	subs	r3, #1
 8009e72:	4631      	mov	r1, r6
 8009e74:	4628      	mov	r0, r5
 8009e76:	47b8      	blx	r7
 8009e78:	3001      	adds	r0, #1
 8009e7a:	d10e      	bne.n	8009e9a <_printf_float+0x42a>
 8009e7c:	e659      	b.n	8009b32 <_printf_float+0xc2>
 8009e7e:	2301      	movs	r3, #1
 8009e80:	4652      	mov	r2, sl
 8009e82:	4631      	mov	r1, r6
 8009e84:	4628      	mov	r0, r5
 8009e86:	47b8      	blx	r7
 8009e88:	3001      	adds	r0, #1
 8009e8a:	f43f ae52 	beq.w	8009b32 <_printf_float+0xc2>
 8009e8e:	f108 0801 	add.w	r8, r8, #1
 8009e92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e94:	3b01      	subs	r3, #1
 8009e96:	4543      	cmp	r3, r8
 8009e98:	dcf1      	bgt.n	8009e7e <_printf_float+0x40e>
 8009e9a:	464b      	mov	r3, r9
 8009e9c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009ea0:	e6dc      	b.n	8009c5c <_printf_float+0x1ec>
 8009ea2:	f04f 0800 	mov.w	r8, #0
 8009ea6:	f104 0a1a 	add.w	sl, r4, #26
 8009eaa:	e7f2      	b.n	8009e92 <_printf_float+0x422>
 8009eac:	2301      	movs	r3, #1
 8009eae:	4642      	mov	r2, r8
 8009eb0:	e7df      	b.n	8009e72 <_printf_float+0x402>
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	464a      	mov	r2, r9
 8009eb6:	4631      	mov	r1, r6
 8009eb8:	4628      	mov	r0, r5
 8009eba:	47b8      	blx	r7
 8009ebc:	3001      	adds	r0, #1
 8009ebe:	f43f ae38 	beq.w	8009b32 <_printf_float+0xc2>
 8009ec2:	f108 0801 	add.w	r8, r8, #1
 8009ec6:	68e3      	ldr	r3, [r4, #12]
 8009ec8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009eca:	1a5b      	subs	r3, r3, r1
 8009ecc:	4543      	cmp	r3, r8
 8009ece:	dcf0      	bgt.n	8009eb2 <_printf_float+0x442>
 8009ed0:	e6fa      	b.n	8009cc8 <_printf_float+0x258>
 8009ed2:	f04f 0800 	mov.w	r8, #0
 8009ed6:	f104 0919 	add.w	r9, r4, #25
 8009eda:	e7f4      	b.n	8009ec6 <_printf_float+0x456>

08009edc <_printf_common>:
 8009edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ee0:	4616      	mov	r6, r2
 8009ee2:	4699      	mov	r9, r3
 8009ee4:	688a      	ldr	r2, [r1, #8]
 8009ee6:	690b      	ldr	r3, [r1, #16]
 8009ee8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009eec:	4293      	cmp	r3, r2
 8009eee:	bfb8      	it	lt
 8009ef0:	4613      	movlt	r3, r2
 8009ef2:	6033      	str	r3, [r6, #0]
 8009ef4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ef8:	4607      	mov	r7, r0
 8009efa:	460c      	mov	r4, r1
 8009efc:	b10a      	cbz	r2, 8009f02 <_printf_common+0x26>
 8009efe:	3301      	adds	r3, #1
 8009f00:	6033      	str	r3, [r6, #0]
 8009f02:	6823      	ldr	r3, [r4, #0]
 8009f04:	0699      	lsls	r1, r3, #26
 8009f06:	bf42      	ittt	mi
 8009f08:	6833      	ldrmi	r3, [r6, #0]
 8009f0a:	3302      	addmi	r3, #2
 8009f0c:	6033      	strmi	r3, [r6, #0]
 8009f0e:	6825      	ldr	r5, [r4, #0]
 8009f10:	f015 0506 	ands.w	r5, r5, #6
 8009f14:	d106      	bne.n	8009f24 <_printf_common+0x48>
 8009f16:	f104 0a19 	add.w	sl, r4, #25
 8009f1a:	68e3      	ldr	r3, [r4, #12]
 8009f1c:	6832      	ldr	r2, [r6, #0]
 8009f1e:	1a9b      	subs	r3, r3, r2
 8009f20:	42ab      	cmp	r3, r5
 8009f22:	dc26      	bgt.n	8009f72 <_printf_common+0x96>
 8009f24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009f28:	1e13      	subs	r3, r2, #0
 8009f2a:	6822      	ldr	r2, [r4, #0]
 8009f2c:	bf18      	it	ne
 8009f2e:	2301      	movne	r3, #1
 8009f30:	0692      	lsls	r2, r2, #26
 8009f32:	d42b      	bmi.n	8009f8c <_printf_common+0xb0>
 8009f34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009f38:	4649      	mov	r1, r9
 8009f3a:	4638      	mov	r0, r7
 8009f3c:	47c0      	blx	r8
 8009f3e:	3001      	adds	r0, #1
 8009f40:	d01e      	beq.n	8009f80 <_printf_common+0xa4>
 8009f42:	6823      	ldr	r3, [r4, #0]
 8009f44:	68e5      	ldr	r5, [r4, #12]
 8009f46:	6832      	ldr	r2, [r6, #0]
 8009f48:	f003 0306 	and.w	r3, r3, #6
 8009f4c:	2b04      	cmp	r3, #4
 8009f4e:	bf08      	it	eq
 8009f50:	1aad      	subeq	r5, r5, r2
 8009f52:	68a3      	ldr	r3, [r4, #8]
 8009f54:	6922      	ldr	r2, [r4, #16]
 8009f56:	bf0c      	ite	eq
 8009f58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f5c:	2500      	movne	r5, #0
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	bfc4      	itt	gt
 8009f62:	1a9b      	subgt	r3, r3, r2
 8009f64:	18ed      	addgt	r5, r5, r3
 8009f66:	2600      	movs	r6, #0
 8009f68:	341a      	adds	r4, #26
 8009f6a:	42b5      	cmp	r5, r6
 8009f6c:	d11a      	bne.n	8009fa4 <_printf_common+0xc8>
 8009f6e:	2000      	movs	r0, #0
 8009f70:	e008      	b.n	8009f84 <_printf_common+0xa8>
 8009f72:	2301      	movs	r3, #1
 8009f74:	4652      	mov	r2, sl
 8009f76:	4649      	mov	r1, r9
 8009f78:	4638      	mov	r0, r7
 8009f7a:	47c0      	blx	r8
 8009f7c:	3001      	adds	r0, #1
 8009f7e:	d103      	bne.n	8009f88 <_printf_common+0xac>
 8009f80:	f04f 30ff 	mov.w	r0, #4294967295
 8009f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f88:	3501      	adds	r5, #1
 8009f8a:	e7c6      	b.n	8009f1a <_printf_common+0x3e>
 8009f8c:	18e1      	adds	r1, r4, r3
 8009f8e:	1c5a      	adds	r2, r3, #1
 8009f90:	2030      	movs	r0, #48	; 0x30
 8009f92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009f96:	4422      	add	r2, r4
 8009f98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009f9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009fa0:	3302      	adds	r3, #2
 8009fa2:	e7c7      	b.n	8009f34 <_printf_common+0x58>
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	4622      	mov	r2, r4
 8009fa8:	4649      	mov	r1, r9
 8009faa:	4638      	mov	r0, r7
 8009fac:	47c0      	blx	r8
 8009fae:	3001      	adds	r0, #1
 8009fb0:	d0e6      	beq.n	8009f80 <_printf_common+0xa4>
 8009fb2:	3601      	adds	r6, #1
 8009fb4:	e7d9      	b.n	8009f6a <_printf_common+0x8e>
	...

08009fb8 <_printf_i>:
 8009fb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009fbc:	7e0f      	ldrb	r7, [r1, #24]
 8009fbe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009fc0:	2f78      	cmp	r7, #120	; 0x78
 8009fc2:	4691      	mov	r9, r2
 8009fc4:	4680      	mov	r8, r0
 8009fc6:	460c      	mov	r4, r1
 8009fc8:	469a      	mov	sl, r3
 8009fca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009fce:	d807      	bhi.n	8009fe0 <_printf_i+0x28>
 8009fd0:	2f62      	cmp	r7, #98	; 0x62
 8009fd2:	d80a      	bhi.n	8009fea <_printf_i+0x32>
 8009fd4:	2f00      	cmp	r7, #0
 8009fd6:	f000 80d8 	beq.w	800a18a <_printf_i+0x1d2>
 8009fda:	2f58      	cmp	r7, #88	; 0x58
 8009fdc:	f000 80a3 	beq.w	800a126 <_printf_i+0x16e>
 8009fe0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009fe4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009fe8:	e03a      	b.n	800a060 <_printf_i+0xa8>
 8009fea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009fee:	2b15      	cmp	r3, #21
 8009ff0:	d8f6      	bhi.n	8009fe0 <_printf_i+0x28>
 8009ff2:	a101      	add	r1, pc, #4	; (adr r1, 8009ff8 <_printf_i+0x40>)
 8009ff4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009ff8:	0800a051 	.word	0x0800a051
 8009ffc:	0800a065 	.word	0x0800a065
 800a000:	08009fe1 	.word	0x08009fe1
 800a004:	08009fe1 	.word	0x08009fe1
 800a008:	08009fe1 	.word	0x08009fe1
 800a00c:	08009fe1 	.word	0x08009fe1
 800a010:	0800a065 	.word	0x0800a065
 800a014:	08009fe1 	.word	0x08009fe1
 800a018:	08009fe1 	.word	0x08009fe1
 800a01c:	08009fe1 	.word	0x08009fe1
 800a020:	08009fe1 	.word	0x08009fe1
 800a024:	0800a171 	.word	0x0800a171
 800a028:	0800a095 	.word	0x0800a095
 800a02c:	0800a153 	.word	0x0800a153
 800a030:	08009fe1 	.word	0x08009fe1
 800a034:	08009fe1 	.word	0x08009fe1
 800a038:	0800a193 	.word	0x0800a193
 800a03c:	08009fe1 	.word	0x08009fe1
 800a040:	0800a095 	.word	0x0800a095
 800a044:	08009fe1 	.word	0x08009fe1
 800a048:	08009fe1 	.word	0x08009fe1
 800a04c:	0800a15b 	.word	0x0800a15b
 800a050:	682b      	ldr	r3, [r5, #0]
 800a052:	1d1a      	adds	r2, r3, #4
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	602a      	str	r2, [r5, #0]
 800a058:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a05c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a060:	2301      	movs	r3, #1
 800a062:	e0a3      	b.n	800a1ac <_printf_i+0x1f4>
 800a064:	6820      	ldr	r0, [r4, #0]
 800a066:	6829      	ldr	r1, [r5, #0]
 800a068:	0606      	lsls	r6, r0, #24
 800a06a:	f101 0304 	add.w	r3, r1, #4
 800a06e:	d50a      	bpl.n	800a086 <_printf_i+0xce>
 800a070:	680e      	ldr	r6, [r1, #0]
 800a072:	602b      	str	r3, [r5, #0]
 800a074:	2e00      	cmp	r6, #0
 800a076:	da03      	bge.n	800a080 <_printf_i+0xc8>
 800a078:	232d      	movs	r3, #45	; 0x2d
 800a07a:	4276      	negs	r6, r6
 800a07c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a080:	485e      	ldr	r0, [pc, #376]	; (800a1fc <_printf_i+0x244>)
 800a082:	230a      	movs	r3, #10
 800a084:	e019      	b.n	800a0ba <_printf_i+0x102>
 800a086:	680e      	ldr	r6, [r1, #0]
 800a088:	602b      	str	r3, [r5, #0]
 800a08a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a08e:	bf18      	it	ne
 800a090:	b236      	sxthne	r6, r6
 800a092:	e7ef      	b.n	800a074 <_printf_i+0xbc>
 800a094:	682b      	ldr	r3, [r5, #0]
 800a096:	6820      	ldr	r0, [r4, #0]
 800a098:	1d19      	adds	r1, r3, #4
 800a09a:	6029      	str	r1, [r5, #0]
 800a09c:	0601      	lsls	r1, r0, #24
 800a09e:	d501      	bpl.n	800a0a4 <_printf_i+0xec>
 800a0a0:	681e      	ldr	r6, [r3, #0]
 800a0a2:	e002      	b.n	800a0aa <_printf_i+0xf2>
 800a0a4:	0646      	lsls	r6, r0, #25
 800a0a6:	d5fb      	bpl.n	800a0a0 <_printf_i+0xe8>
 800a0a8:	881e      	ldrh	r6, [r3, #0]
 800a0aa:	4854      	ldr	r0, [pc, #336]	; (800a1fc <_printf_i+0x244>)
 800a0ac:	2f6f      	cmp	r7, #111	; 0x6f
 800a0ae:	bf0c      	ite	eq
 800a0b0:	2308      	moveq	r3, #8
 800a0b2:	230a      	movne	r3, #10
 800a0b4:	2100      	movs	r1, #0
 800a0b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a0ba:	6865      	ldr	r5, [r4, #4]
 800a0bc:	60a5      	str	r5, [r4, #8]
 800a0be:	2d00      	cmp	r5, #0
 800a0c0:	bfa2      	ittt	ge
 800a0c2:	6821      	ldrge	r1, [r4, #0]
 800a0c4:	f021 0104 	bicge.w	r1, r1, #4
 800a0c8:	6021      	strge	r1, [r4, #0]
 800a0ca:	b90e      	cbnz	r6, 800a0d0 <_printf_i+0x118>
 800a0cc:	2d00      	cmp	r5, #0
 800a0ce:	d04d      	beq.n	800a16c <_printf_i+0x1b4>
 800a0d0:	4615      	mov	r5, r2
 800a0d2:	fbb6 f1f3 	udiv	r1, r6, r3
 800a0d6:	fb03 6711 	mls	r7, r3, r1, r6
 800a0da:	5dc7      	ldrb	r7, [r0, r7]
 800a0dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a0e0:	4637      	mov	r7, r6
 800a0e2:	42bb      	cmp	r3, r7
 800a0e4:	460e      	mov	r6, r1
 800a0e6:	d9f4      	bls.n	800a0d2 <_printf_i+0x11a>
 800a0e8:	2b08      	cmp	r3, #8
 800a0ea:	d10b      	bne.n	800a104 <_printf_i+0x14c>
 800a0ec:	6823      	ldr	r3, [r4, #0]
 800a0ee:	07de      	lsls	r6, r3, #31
 800a0f0:	d508      	bpl.n	800a104 <_printf_i+0x14c>
 800a0f2:	6923      	ldr	r3, [r4, #16]
 800a0f4:	6861      	ldr	r1, [r4, #4]
 800a0f6:	4299      	cmp	r1, r3
 800a0f8:	bfde      	ittt	le
 800a0fa:	2330      	movle	r3, #48	; 0x30
 800a0fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a100:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a104:	1b52      	subs	r2, r2, r5
 800a106:	6122      	str	r2, [r4, #16]
 800a108:	f8cd a000 	str.w	sl, [sp]
 800a10c:	464b      	mov	r3, r9
 800a10e:	aa03      	add	r2, sp, #12
 800a110:	4621      	mov	r1, r4
 800a112:	4640      	mov	r0, r8
 800a114:	f7ff fee2 	bl	8009edc <_printf_common>
 800a118:	3001      	adds	r0, #1
 800a11a:	d14c      	bne.n	800a1b6 <_printf_i+0x1fe>
 800a11c:	f04f 30ff 	mov.w	r0, #4294967295
 800a120:	b004      	add	sp, #16
 800a122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a126:	4835      	ldr	r0, [pc, #212]	; (800a1fc <_printf_i+0x244>)
 800a128:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a12c:	6829      	ldr	r1, [r5, #0]
 800a12e:	6823      	ldr	r3, [r4, #0]
 800a130:	f851 6b04 	ldr.w	r6, [r1], #4
 800a134:	6029      	str	r1, [r5, #0]
 800a136:	061d      	lsls	r5, r3, #24
 800a138:	d514      	bpl.n	800a164 <_printf_i+0x1ac>
 800a13a:	07df      	lsls	r7, r3, #31
 800a13c:	bf44      	itt	mi
 800a13e:	f043 0320 	orrmi.w	r3, r3, #32
 800a142:	6023      	strmi	r3, [r4, #0]
 800a144:	b91e      	cbnz	r6, 800a14e <_printf_i+0x196>
 800a146:	6823      	ldr	r3, [r4, #0]
 800a148:	f023 0320 	bic.w	r3, r3, #32
 800a14c:	6023      	str	r3, [r4, #0]
 800a14e:	2310      	movs	r3, #16
 800a150:	e7b0      	b.n	800a0b4 <_printf_i+0xfc>
 800a152:	6823      	ldr	r3, [r4, #0]
 800a154:	f043 0320 	orr.w	r3, r3, #32
 800a158:	6023      	str	r3, [r4, #0]
 800a15a:	2378      	movs	r3, #120	; 0x78
 800a15c:	4828      	ldr	r0, [pc, #160]	; (800a200 <_printf_i+0x248>)
 800a15e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a162:	e7e3      	b.n	800a12c <_printf_i+0x174>
 800a164:	0659      	lsls	r1, r3, #25
 800a166:	bf48      	it	mi
 800a168:	b2b6      	uxthmi	r6, r6
 800a16a:	e7e6      	b.n	800a13a <_printf_i+0x182>
 800a16c:	4615      	mov	r5, r2
 800a16e:	e7bb      	b.n	800a0e8 <_printf_i+0x130>
 800a170:	682b      	ldr	r3, [r5, #0]
 800a172:	6826      	ldr	r6, [r4, #0]
 800a174:	6961      	ldr	r1, [r4, #20]
 800a176:	1d18      	adds	r0, r3, #4
 800a178:	6028      	str	r0, [r5, #0]
 800a17a:	0635      	lsls	r5, r6, #24
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	d501      	bpl.n	800a184 <_printf_i+0x1cc>
 800a180:	6019      	str	r1, [r3, #0]
 800a182:	e002      	b.n	800a18a <_printf_i+0x1d2>
 800a184:	0670      	lsls	r0, r6, #25
 800a186:	d5fb      	bpl.n	800a180 <_printf_i+0x1c8>
 800a188:	8019      	strh	r1, [r3, #0]
 800a18a:	2300      	movs	r3, #0
 800a18c:	6123      	str	r3, [r4, #16]
 800a18e:	4615      	mov	r5, r2
 800a190:	e7ba      	b.n	800a108 <_printf_i+0x150>
 800a192:	682b      	ldr	r3, [r5, #0]
 800a194:	1d1a      	adds	r2, r3, #4
 800a196:	602a      	str	r2, [r5, #0]
 800a198:	681d      	ldr	r5, [r3, #0]
 800a19a:	6862      	ldr	r2, [r4, #4]
 800a19c:	2100      	movs	r1, #0
 800a19e:	4628      	mov	r0, r5
 800a1a0:	f7f6 f81e 	bl	80001e0 <memchr>
 800a1a4:	b108      	cbz	r0, 800a1aa <_printf_i+0x1f2>
 800a1a6:	1b40      	subs	r0, r0, r5
 800a1a8:	6060      	str	r0, [r4, #4]
 800a1aa:	6863      	ldr	r3, [r4, #4]
 800a1ac:	6123      	str	r3, [r4, #16]
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1b4:	e7a8      	b.n	800a108 <_printf_i+0x150>
 800a1b6:	6923      	ldr	r3, [r4, #16]
 800a1b8:	462a      	mov	r2, r5
 800a1ba:	4649      	mov	r1, r9
 800a1bc:	4640      	mov	r0, r8
 800a1be:	47d0      	blx	sl
 800a1c0:	3001      	adds	r0, #1
 800a1c2:	d0ab      	beq.n	800a11c <_printf_i+0x164>
 800a1c4:	6823      	ldr	r3, [r4, #0]
 800a1c6:	079b      	lsls	r3, r3, #30
 800a1c8:	d413      	bmi.n	800a1f2 <_printf_i+0x23a>
 800a1ca:	68e0      	ldr	r0, [r4, #12]
 800a1cc:	9b03      	ldr	r3, [sp, #12]
 800a1ce:	4298      	cmp	r0, r3
 800a1d0:	bfb8      	it	lt
 800a1d2:	4618      	movlt	r0, r3
 800a1d4:	e7a4      	b.n	800a120 <_printf_i+0x168>
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	4632      	mov	r2, r6
 800a1da:	4649      	mov	r1, r9
 800a1dc:	4640      	mov	r0, r8
 800a1de:	47d0      	blx	sl
 800a1e0:	3001      	adds	r0, #1
 800a1e2:	d09b      	beq.n	800a11c <_printf_i+0x164>
 800a1e4:	3501      	adds	r5, #1
 800a1e6:	68e3      	ldr	r3, [r4, #12]
 800a1e8:	9903      	ldr	r1, [sp, #12]
 800a1ea:	1a5b      	subs	r3, r3, r1
 800a1ec:	42ab      	cmp	r3, r5
 800a1ee:	dcf2      	bgt.n	800a1d6 <_printf_i+0x21e>
 800a1f0:	e7eb      	b.n	800a1ca <_printf_i+0x212>
 800a1f2:	2500      	movs	r5, #0
 800a1f4:	f104 0619 	add.w	r6, r4, #25
 800a1f8:	e7f5      	b.n	800a1e6 <_printf_i+0x22e>
 800a1fa:	bf00      	nop
 800a1fc:	0800e58e 	.word	0x0800e58e
 800a200:	0800e59f 	.word	0x0800e59f

0800a204 <_scanf_float>:
 800a204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a208:	b087      	sub	sp, #28
 800a20a:	4617      	mov	r7, r2
 800a20c:	9303      	str	r3, [sp, #12]
 800a20e:	688b      	ldr	r3, [r1, #8]
 800a210:	1e5a      	subs	r2, r3, #1
 800a212:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a216:	bf83      	ittte	hi
 800a218:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a21c:	195b      	addhi	r3, r3, r5
 800a21e:	9302      	strhi	r3, [sp, #8]
 800a220:	2300      	movls	r3, #0
 800a222:	bf86      	itte	hi
 800a224:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a228:	608b      	strhi	r3, [r1, #8]
 800a22a:	9302      	strls	r3, [sp, #8]
 800a22c:	680b      	ldr	r3, [r1, #0]
 800a22e:	468b      	mov	fp, r1
 800a230:	2500      	movs	r5, #0
 800a232:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a236:	f84b 3b1c 	str.w	r3, [fp], #28
 800a23a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a23e:	4680      	mov	r8, r0
 800a240:	460c      	mov	r4, r1
 800a242:	465e      	mov	r6, fp
 800a244:	46aa      	mov	sl, r5
 800a246:	46a9      	mov	r9, r5
 800a248:	9501      	str	r5, [sp, #4]
 800a24a:	68a2      	ldr	r2, [r4, #8]
 800a24c:	b152      	cbz	r2, 800a264 <_scanf_float+0x60>
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	781b      	ldrb	r3, [r3, #0]
 800a252:	2b4e      	cmp	r3, #78	; 0x4e
 800a254:	d864      	bhi.n	800a320 <_scanf_float+0x11c>
 800a256:	2b40      	cmp	r3, #64	; 0x40
 800a258:	d83c      	bhi.n	800a2d4 <_scanf_float+0xd0>
 800a25a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a25e:	b2c8      	uxtb	r0, r1
 800a260:	280e      	cmp	r0, #14
 800a262:	d93a      	bls.n	800a2da <_scanf_float+0xd6>
 800a264:	f1b9 0f00 	cmp.w	r9, #0
 800a268:	d003      	beq.n	800a272 <_scanf_float+0x6e>
 800a26a:	6823      	ldr	r3, [r4, #0]
 800a26c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a270:	6023      	str	r3, [r4, #0]
 800a272:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a276:	f1ba 0f01 	cmp.w	sl, #1
 800a27a:	f200 8113 	bhi.w	800a4a4 <_scanf_float+0x2a0>
 800a27e:	455e      	cmp	r6, fp
 800a280:	f200 8105 	bhi.w	800a48e <_scanf_float+0x28a>
 800a284:	2501      	movs	r5, #1
 800a286:	4628      	mov	r0, r5
 800a288:	b007      	add	sp, #28
 800a28a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a28e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a292:	2a0d      	cmp	r2, #13
 800a294:	d8e6      	bhi.n	800a264 <_scanf_float+0x60>
 800a296:	a101      	add	r1, pc, #4	; (adr r1, 800a29c <_scanf_float+0x98>)
 800a298:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a29c:	0800a3db 	.word	0x0800a3db
 800a2a0:	0800a265 	.word	0x0800a265
 800a2a4:	0800a265 	.word	0x0800a265
 800a2a8:	0800a265 	.word	0x0800a265
 800a2ac:	0800a43b 	.word	0x0800a43b
 800a2b0:	0800a413 	.word	0x0800a413
 800a2b4:	0800a265 	.word	0x0800a265
 800a2b8:	0800a265 	.word	0x0800a265
 800a2bc:	0800a3e9 	.word	0x0800a3e9
 800a2c0:	0800a265 	.word	0x0800a265
 800a2c4:	0800a265 	.word	0x0800a265
 800a2c8:	0800a265 	.word	0x0800a265
 800a2cc:	0800a265 	.word	0x0800a265
 800a2d0:	0800a3a1 	.word	0x0800a3a1
 800a2d4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a2d8:	e7db      	b.n	800a292 <_scanf_float+0x8e>
 800a2da:	290e      	cmp	r1, #14
 800a2dc:	d8c2      	bhi.n	800a264 <_scanf_float+0x60>
 800a2de:	a001      	add	r0, pc, #4	; (adr r0, 800a2e4 <_scanf_float+0xe0>)
 800a2e0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a2e4:	0800a393 	.word	0x0800a393
 800a2e8:	0800a265 	.word	0x0800a265
 800a2ec:	0800a393 	.word	0x0800a393
 800a2f0:	0800a427 	.word	0x0800a427
 800a2f4:	0800a265 	.word	0x0800a265
 800a2f8:	0800a341 	.word	0x0800a341
 800a2fc:	0800a37d 	.word	0x0800a37d
 800a300:	0800a37d 	.word	0x0800a37d
 800a304:	0800a37d 	.word	0x0800a37d
 800a308:	0800a37d 	.word	0x0800a37d
 800a30c:	0800a37d 	.word	0x0800a37d
 800a310:	0800a37d 	.word	0x0800a37d
 800a314:	0800a37d 	.word	0x0800a37d
 800a318:	0800a37d 	.word	0x0800a37d
 800a31c:	0800a37d 	.word	0x0800a37d
 800a320:	2b6e      	cmp	r3, #110	; 0x6e
 800a322:	d809      	bhi.n	800a338 <_scanf_float+0x134>
 800a324:	2b60      	cmp	r3, #96	; 0x60
 800a326:	d8b2      	bhi.n	800a28e <_scanf_float+0x8a>
 800a328:	2b54      	cmp	r3, #84	; 0x54
 800a32a:	d077      	beq.n	800a41c <_scanf_float+0x218>
 800a32c:	2b59      	cmp	r3, #89	; 0x59
 800a32e:	d199      	bne.n	800a264 <_scanf_float+0x60>
 800a330:	2d07      	cmp	r5, #7
 800a332:	d197      	bne.n	800a264 <_scanf_float+0x60>
 800a334:	2508      	movs	r5, #8
 800a336:	e029      	b.n	800a38c <_scanf_float+0x188>
 800a338:	2b74      	cmp	r3, #116	; 0x74
 800a33a:	d06f      	beq.n	800a41c <_scanf_float+0x218>
 800a33c:	2b79      	cmp	r3, #121	; 0x79
 800a33e:	e7f6      	b.n	800a32e <_scanf_float+0x12a>
 800a340:	6821      	ldr	r1, [r4, #0]
 800a342:	05c8      	lsls	r0, r1, #23
 800a344:	d51a      	bpl.n	800a37c <_scanf_float+0x178>
 800a346:	9b02      	ldr	r3, [sp, #8]
 800a348:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a34c:	6021      	str	r1, [r4, #0]
 800a34e:	f109 0901 	add.w	r9, r9, #1
 800a352:	b11b      	cbz	r3, 800a35c <_scanf_float+0x158>
 800a354:	3b01      	subs	r3, #1
 800a356:	3201      	adds	r2, #1
 800a358:	9302      	str	r3, [sp, #8]
 800a35a:	60a2      	str	r2, [r4, #8]
 800a35c:	68a3      	ldr	r3, [r4, #8]
 800a35e:	3b01      	subs	r3, #1
 800a360:	60a3      	str	r3, [r4, #8]
 800a362:	6923      	ldr	r3, [r4, #16]
 800a364:	3301      	adds	r3, #1
 800a366:	6123      	str	r3, [r4, #16]
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	3b01      	subs	r3, #1
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	607b      	str	r3, [r7, #4]
 800a370:	f340 8084 	ble.w	800a47c <_scanf_float+0x278>
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	3301      	adds	r3, #1
 800a378:	603b      	str	r3, [r7, #0]
 800a37a:	e766      	b.n	800a24a <_scanf_float+0x46>
 800a37c:	eb1a 0f05 	cmn.w	sl, r5
 800a380:	f47f af70 	bne.w	800a264 <_scanf_float+0x60>
 800a384:	6822      	ldr	r2, [r4, #0]
 800a386:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a38a:	6022      	str	r2, [r4, #0]
 800a38c:	f806 3b01 	strb.w	r3, [r6], #1
 800a390:	e7e4      	b.n	800a35c <_scanf_float+0x158>
 800a392:	6822      	ldr	r2, [r4, #0]
 800a394:	0610      	lsls	r0, r2, #24
 800a396:	f57f af65 	bpl.w	800a264 <_scanf_float+0x60>
 800a39a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a39e:	e7f4      	b.n	800a38a <_scanf_float+0x186>
 800a3a0:	f1ba 0f00 	cmp.w	sl, #0
 800a3a4:	d10e      	bne.n	800a3c4 <_scanf_float+0x1c0>
 800a3a6:	f1b9 0f00 	cmp.w	r9, #0
 800a3aa:	d10e      	bne.n	800a3ca <_scanf_float+0x1c6>
 800a3ac:	6822      	ldr	r2, [r4, #0]
 800a3ae:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a3b2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a3b6:	d108      	bne.n	800a3ca <_scanf_float+0x1c6>
 800a3b8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a3bc:	6022      	str	r2, [r4, #0]
 800a3be:	f04f 0a01 	mov.w	sl, #1
 800a3c2:	e7e3      	b.n	800a38c <_scanf_float+0x188>
 800a3c4:	f1ba 0f02 	cmp.w	sl, #2
 800a3c8:	d055      	beq.n	800a476 <_scanf_float+0x272>
 800a3ca:	2d01      	cmp	r5, #1
 800a3cc:	d002      	beq.n	800a3d4 <_scanf_float+0x1d0>
 800a3ce:	2d04      	cmp	r5, #4
 800a3d0:	f47f af48 	bne.w	800a264 <_scanf_float+0x60>
 800a3d4:	3501      	adds	r5, #1
 800a3d6:	b2ed      	uxtb	r5, r5
 800a3d8:	e7d8      	b.n	800a38c <_scanf_float+0x188>
 800a3da:	f1ba 0f01 	cmp.w	sl, #1
 800a3de:	f47f af41 	bne.w	800a264 <_scanf_float+0x60>
 800a3e2:	f04f 0a02 	mov.w	sl, #2
 800a3e6:	e7d1      	b.n	800a38c <_scanf_float+0x188>
 800a3e8:	b97d      	cbnz	r5, 800a40a <_scanf_float+0x206>
 800a3ea:	f1b9 0f00 	cmp.w	r9, #0
 800a3ee:	f47f af3c 	bne.w	800a26a <_scanf_float+0x66>
 800a3f2:	6822      	ldr	r2, [r4, #0]
 800a3f4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a3f8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a3fc:	f47f af39 	bne.w	800a272 <_scanf_float+0x6e>
 800a400:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a404:	6022      	str	r2, [r4, #0]
 800a406:	2501      	movs	r5, #1
 800a408:	e7c0      	b.n	800a38c <_scanf_float+0x188>
 800a40a:	2d03      	cmp	r5, #3
 800a40c:	d0e2      	beq.n	800a3d4 <_scanf_float+0x1d0>
 800a40e:	2d05      	cmp	r5, #5
 800a410:	e7de      	b.n	800a3d0 <_scanf_float+0x1cc>
 800a412:	2d02      	cmp	r5, #2
 800a414:	f47f af26 	bne.w	800a264 <_scanf_float+0x60>
 800a418:	2503      	movs	r5, #3
 800a41a:	e7b7      	b.n	800a38c <_scanf_float+0x188>
 800a41c:	2d06      	cmp	r5, #6
 800a41e:	f47f af21 	bne.w	800a264 <_scanf_float+0x60>
 800a422:	2507      	movs	r5, #7
 800a424:	e7b2      	b.n	800a38c <_scanf_float+0x188>
 800a426:	6822      	ldr	r2, [r4, #0]
 800a428:	0591      	lsls	r1, r2, #22
 800a42a:	f57f af1b 	bpl.w	800a264 <_scanf_float+0x60>
 800a42e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a432:	6022      	str	r2, [r4, #0]
 800a434:	f8cd 9004 	str.w	r9, [sp, #4]
 800a438:	e7a8      	b.n	800a38c <_scanf_float+0x188>
 800a43a:	6822      	ldr	r2, [r4, #0]
 800a43c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a440:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a444:	d006      	beq.n	800a454 <_scanf_float+0x250>
 800a446:	0550      	lsls	r0, r2, #21
 800a448:	f57f af0c 	bpl.w	800a264 <_scanf_float+0x60>
 800a44c:	f1b9 0f00 	cmp.w	r9, #0
 800a450:	f43f af0f 	beq.w	800a272 <_scanf_float+0x6e>
 800a454:	0591      	lsls	r1, r2, #22
 800a456:	bf58      	it	pl
 800a458:	9901      	ldrpl	r1, [sp, #4]
 800a45a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a45e:	bf58      	it	pl
 800a460:	eba9 0101 	subpl.w	r1, r9, r1
 800a464:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a468:	bf58      	it	pl
 800a46a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a46e:	6022      	str	r2, [r4, #0]
 800a470:	f04f 0900 	mov.w	r9, #0
 800a474:	e78a      	b.n	800a38c <_scanf_float+0x188>
 800a476:	f04f 0a03 	mov.w	sl, #3
 800a47a:	e787      	b.n	800a38c <_scanf_float+0x188>
 800a47c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a480:	4639      	mov	r1, r7
 800a482:	4640      	mov	r0, r8
 800a484:	4798      	blx	r3
 800a486:	2800      	cmp	r0, #0
 800a488:	f43f aedf 	beq.w	800a24a <_scanf_float+0x46>
 800a48c:	e6ea      	b.n	800a264 <_scanf_float+0x60>
 800a48e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a492:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a496:	463a      	mov	r2, r7
 800a498:	4640      	mov	r0, r8
 800a49a:	4798      	blx	r3
 800a49c:	6923      	ldr	r3, [r4, #16]
 800a49e:	3b01      	subs	r3, #1
 800a4a0:	6123      	str	r3, [r4, #16]
 800a4a2:	e6ec      	b.n	800a27e <_scanf_float+0x7a>
 800a4a4:	1e6b      	subs	r3, r5, #1
 800a4a6:	2b06      	cmp	r3, #6
 800a4a8:	d825      	bhi.n	800a4f6 <_scanf_float+0x2f2>
 800a4aa:	2d02      	cmp	r5, #2
 800a4ac:	d836      	bhi.n	800a51c <_scanf_float+0x318>
 800a4ae:	455e      	cmp	r6, fp
 800a4b0:	f67f aee8 	bls.w	800a284 <_scanf_float+0x80>
 800a4b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a4b8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a4bc:	463a      	mov	r2, r7
 800a4be:	4640      	mov	r0, r8
 800a4c0:	4798      	blx	r3
 800a4c2:	6923      	ldr	r3, [r4, #16]
 800a4c4:	3b01      	subs	r3, #1
 800a4c6:	6123      	str	r3, [r4, #16]
 800a4c8:	e7f1      	b.n	800a4ae <_scanf_float+0x2aa>
 800a4ca:	9802      	ldr	r0, [sp, #8]
 800a4cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a4d0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a4d4:	9002      	str	r0, [sp, #8]
 800a4d6:	463a      	mov	r2, r7
 800a4d8:	4640      	mov	r0, r8
 800a4da:	4798      	blx	r3
 800a4dc:	6923      	ldr	r3, [r4, #16]
 800a4de:	3b01      	subs	r3, #1
 800a4e0:	6123      	str	r3, [r4, #16]
 800a4e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a4e6:	fa5f fa8a 	uxtb.w	sl, sl
 800a4ea:	f1ba 0f02 	cmp.w	sl, #2
 800a4ee:	d1ec      	bne.n	800a4ca <_scanf_float+0x2c6>
 800a4f0:	3d03      	subs	r5, #3
 800a4f2:	b2ed      	uxtb	r5, r5
 800a4f4:	1b76      	subs	r6, r6, r5
 800a4f6:	6823      	ldr	r3, [r4, #0]
 800a4f8:	05da      	lsls	r2, r3, #23
 800a4fa:	d52f      	bpl.n	800a55c <_scanf_float+0x358>
 800a4fc:	055b      	lsls	r3, r3, #21
 800a4fe:	d510      	bpl.n	800a522 <_scanf_float+0x31e>
 800a500:	455e      	cmp	r6, fp
 800a502:	f67f aebf 	bls.w	800a284 <_scanf_float+0x80>
 800a506:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a50a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a50e:	463a      	mov	r2, r7
 800a510:	4640      	mov	r0, r8
 800a512:	4798      	blx	r3
 800a514:	6923      	ldr	r3, [r4, #16]
 800a516:	3b01      	subs	r3, #1
 800a518:	6123      	str	r3, [r4, #16]
 800a51a:	e7f1      	b.n	800a500 <_scanf_float+0x2fc>
 800a51c:	46aa      	mov	sl, r5
 800a51e:	9602      	str	r6, [sp, #8]
 800a520:	e7df      	b.n	800a4e2 <_scanf_float+0x2de>
 800a522:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a526:	6923      	ldr	r3, [r4, #16]
 800a528:	2965      	cmp	r1, #101	; 0x65
 800a52a:	f103 33ff 	add.w	r3, r3, #4294967295
 800a52e:	f106 35ff 	add.w	r5, r6, #4294967295
 800a532:	6123      	str	r3, [r4, #16]
 800a534:	d00c      	beq.n	800a550 <_scanf_float+0x34c>
 800a536:	2945      	cmp	r1, #69	; 0x45
 800a538:	d00a      	beq.n	800a550 <_scanf_float+0x34c>
 800a53a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a53e:	463a      	mov	r2, r7
 800a540:	4640      	mov	r0, r8
 800a542:	4798      	blx	r3
 800a544:	6923      	ldr	r3, [r4, #16]
 800a546:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a54a:	3b01      	subs	r3, #1
 800a54c:	1eb5      	subs	r5, r6, #2
 800a54e:	6123      	str	r3, [r4, #16]
 800a550:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a554:	463a      	mov	r2, r7
 800a556:	4640      	mov	r0, r8
 800a558:	4798      	blx	r3
 800a55a:	462e      	mov	r6, r5
 800a55c:	6825      	ldr	r5, [r4, #0]
 800a55e:	f015 0510 	ands.w	r5, r5, #16
 800a562:	d159      	bne.n	800a618 <_scanf_float+0x414>
 800a564:	7035      	strb	r5, [r6, #0]
 800a566:	6823      	ldr	r3, [r4, #0]
 800a568:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a56c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a570:	d11b      	bne.n	800a5aa <_scanf_float+0x3a6>
 800a572:	9b01      	ldr	r3, [sp, #4]
 800a574:	454b      	cmp	r3, r9
 800a576:	eba3 0209 	sub.w	r2, r3, r9
 800a57a:	d123      	bne.n	800a5c4 <_scanf_float+0x3c0>
 800a57c:	2200      	movs	r2, #0
 800a57e:	4659      	mov	r1, fp
 800a580:	4640      	mov	r0, r8
 800a582:	f000 ff27 	bl	800b3d4 <_strtod_r>
 800a586:	6822      	ldr	r2, [r4, #0]
 800a588:	9b03      	ldr	r3, [sp, #12]
 800a58a:	f012 0f02 	tst.w	r2, #2
 800a58e:	ec57 6b10 	vmov	r6, r7, d0
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	d021      	beq.n	800a5da <_scanf_float+0x3d6>
 800a596:	9903      	ldr	r1, [sp, #12]
 800a598:	1d1a      	adds	r2, r3, #4
 800a59a:	600a      	str	r2, [r1, #0]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	e9c3 6700 	strd	r6, r7, [r3]
 800a5a2:	68e3      	ldr	r3, [r4, #12]
 800a5a4:	3301      	adds	r3, #1
 800a5a6:	60e3      	str	r3, [r4, #12]
 800a5a8:	e66d      	b.n	800a286 <_scanf_float+0x82>
 800a5aa:	9b04      	ldr	r3, [sp, #16]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d0e5      	beq.n	800a57c <_scanf_float+0x378>
 800a5b0:	9905      	ldr	r1, [sp, #20]
 800a5b2:	230a      	movs	r3, #10
 800a5b4:	462a      	mov	r2, r5
 800a5b6:	3101      	adds	r1, #1
 800a5b8:	4640      	mov	r0, r8
 800a5ba:	f000 ff93 	bl	800b4e4 <_strtol_r>
 800a5be:	9b04      	ldr	r3, [sp, #16]
 800a5c0:	9e05      	ldr	r6, [sp, #20]
 800a5c2:	1ac2      	subs	r2, r0, r3
 800a5c4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a5c8:	429e      	cmp	r6, r3
 800a5ca:	bf28      	it	cs
 800a5cc:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a5d0:	4912      	ldr	r1, [pc, #72]	; (800a61c <_scanf_float+0x418>)
 800a5d2:	4630      	mov	r0, r6
 800a5d4:	f000 f8ba 	bl	800a74c <siprintf>
 800a5d8:	e7d0      	b.n	800a57c <_scanf_float+0x378>
 800a5da:	9903      	ldr	r1, [sp, #12]
 800a5dc:	f012 0f04 	tst.w	r2, #4
 800a5e0:	f103 0204 	add.w	r2, r3, #4
 800a5e4:	600a      	str	r2, [r1, #0]
 800a5e6:	d1d9      	bne.n	800a59c <_scanf_float+0x398>
 800a5e8:	f8d3 8000 	ldr.w	r8, [r3]
 800a5ec:	ee10 2a10 	vmov	r2, s0
 800a5f0:	ee10 0a10 	vmov	r0, s0
 800a5f4:	463b      	mov	r3, r7
 800a5f6:	4639      	mov	r1, r7
 800a5f8:	f7f6 fa98 	bl	8000b2c <__aeabi_dcmpun>
 800a5fc:	b128      	cbz	r0, 800a60a <_scanf_float+0x406>
 800a5fe:	4808      	ldr	r0, [pc, #32]	; (800a620 <_scanf_float+0x41c>)
 800a600:	f000 f89e 	bl	800a740 <nanf>
 800a604:	ed88 0a00 	vstr	s0, [r8]
 800a608:	e7cb      	b.n	800a5a2 <_scanf_float+0x39e>
 800a60a:	4630      	mov	r0, r6
 800a60c:	4639      	mov	r1, r7
 800a60e:	f7f6 faeb 	bl	8000be8 <__aeabi_d2f>
 800a612:	f8c8 0000 	str.w	r0, [r8]
 800a616:	e7c4      	b.n	800a5a2 <_scanf_float+0x39e>
 800a618:	2500      	movs	r5, #0
 800a61a:	e634      	b.n	800a286 <_scanf_float+0x82>
 800a61c:	0800e5b0 	.word	0x0800e5b0
 800a620:	0800ea20 	.word	0x0800ea20

0800a624 <iprintf>:
 800a624:	b40f      	push	{r0, r1, r2, r3}
 800a626:	4b0a      	ldr	r3, [pc, #40]	; (800a650 <iprintf+0x2c>)
 800a628:	b513      	push	{r0, r1, r4, lr}
 800a62a:	681c      	ldr	r4, [r3, #0]
 800a62c:	b124      	cbz	r4, 800a638 <iprintf+0x14>
 800a62e:	69a3      	ldr	r3, [r4, #24]
 800a630:	b913      	cbnz	r3, 800a638 <iprintf+0x14>
 800a632:	4620      	mov	r0, r4
 800a634:	f001 ffac 	bl	800c590 <__sinit>
 800a638:	ab05      	add	r3, sp, #20
 800a63a:	9a04      	ldr	r2, [sp, #16]
 800a63c:	68a1      	ldr	r1, [r4, #8]
 800a63e:	9301      	str	r3, [sp, #4]
 800a640:	4620      	mov	r0, r4
 800a642:	f003 fb75 	bl	800dd30 <_vfiprintf_r>
 800a646:	b002      	add	sp, #8
 800a648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a64c:	b004      	add	sp, #16
 800a64e:	4770      	bx	lr
 800a650:	200000a4 	.word	0x200000a4

0800a654 <_puts_r>:
 800a654:	b570      	push	{r4, r5, r6, lr}
 800a656:	460e      	mov	r6, r1
 800a658:	4605      	mov	r5, r0
 800a65a:	b118      	cbz	r0, 800a664 <_puts_r+0x10>
 800a65c:	6983      	ldr	r3, [r0, #24]
 800a65e:	b90b      	cbnz	r3, 800a664 <_puts_r+0x10>
 800a660:	f001 ff96 	bl	800c590 <__sinit>
 800a664:	69ab      	ldr	r3, [r5, #24]
 800a666:	68ac      	ldr	r4, [r5, #8]
 800a668:	b913      	cbnz	r3, 800a670 <_puts_r+0x1c>
 800a66a:	4628      	mov	r0, r5
 800a66c:	f001 ff90 	bl	800c590 <__sinit>
 800a670:	4b2c      	ldr	r3, [pc, #176]	; (800a724 <_puts_r+0xd0>)
 800a672:	429c      	cmp	r4, r3
 800a674:	d120      	bne.n	800a6b8 <_puts_r+0x64>
 800a676:	686c      	ldr	r4, [r5, #4]
 800a678:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a67a:	07db      	lsls	r3, r3, #31
 800a67c:	d405      	bmi.n	800a68a <_puts_r+0x36>
 800a67e:	89a3      	ldrh	r3, [r4, #12]
 800a680:	0598      	lsls	r0, r3, #22
 800a682:	d402      	bmi.n	800a68a <_puts_r+0x36>
 800a684:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a686:	f002 fb94 	bl	800cdb2 <__retarget_lock_acquire_recursive>
 800a68a:	89a3      	ldrh	r3, [r4, #12]
 800a68c:	0719      	lsls	r1, r3, #28
 800a68e:	d51d      	bpl.n	800a6cc <_puts_r+0x78>
 800a690:	6923      	ldr	r3, [r4, #16]
 800a692:	b1db      	cbz	r3, 800a6cc <_puts_r+0x78>
 800a694:	3e01      	subs	r6, #1
 800a696:	68a3      	ldr	r3, [r4, #8]
 800a698:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a69c:	3b01      	subs	r3, #1
 800a69e:	60a3      	str	r3, [r4, #8]
 800a6a0:	bb39      	cbnz	r1, 800a6f2 <_puts_r+0x9e>
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	da38      	bge.n	800a718 <_puts_r+0xc4>
 800a6a6:	4622      	mov	r2, r4
 800a6a8:	210a      	movs	r1, #10
 800a6aa:	4628      	mov	r0, r5
 800a6ac:	f000 ff1c 	bl	800b4e8 <__swbuf_r>
 800a6b0:	3001      	adds	r0, #1
 800a6b2:	d011      	beq.n	800a6d8 <_puts_r+0x84>
 800a6b4:	250a      	movs	r5, #10
 800a6b6:	e011      	b.n	800a6dc <_puts_r+0x88>
 800a6b8:	4b1b      	ldr	r3, [pc, #108]	; (800a728 <_puts_r+0xd4>)
 800a6ba:	429c      	cmp	r4, r3
 800a6bc:	d101      	bne.n	800a6c2 <_puts_r+0x6e>
 800a6be:	68ac      	ldr	r4, [r5, #8]
 800a6c0:	e7da      	b.n	800a678 <_puts_r+0x24>
 800a6c2:	4b1a      	ldr	r3, [pc, #104]	; (800a72c <_puts_r+0xd8>)
 800a6c4:	429c      	cmp	r4, r3
 800a6c6:	bf08      	it	eq
 800a6c8:	68ec      	ldreq	r4, [r5, #12]
 800a6ca:	e7d5      	b.n	800a678 <_puts_r+0x24>
 800a6cc:	4621      	mov	r1, r4
 800a6ce:	4628      	mov	r0, r5
 800a6d0:	f000 ff5c 	bl	800b58c <__swsetup_r>
 800a6d4:	2800      	cmp	r0, #0
 800a6d6:	d0dd      	beq.n	800a694 <_puts_r+0x40>
 800a6d8:	f04f 35ff 	mov.w	r5, #4294967295
 800a6dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a6de:	07da      	lsls	r2, r3, #31
 800a6e0:	d405      	bmi.n	800a6ee <_puts_r+0x9a>
 800a6e2:	89a3      	ldrh	r3, [r4, #12]
 800a6e4:	059b      	lsls	r3, r3, #22
 800a6e6:	d402      	bmi.n	800a6ee <_puts_r+0x9a>
 800a6e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6ea:	f002 fb63 	bl	800cdb4 <__retarget_lock_release_recursive>
 800a6ee:	4628      	mov	r0, r5
 800a6f0:	bd70      	pop	{r4, r5, r6, pc}
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	da04      	bge.n	800a700 <_puts_r+0xac>
 800a6f6:	69a2      	ldr	r2, [r4, #24]
 800a6f8:	429a      	cmp	r2, r3
 800a6fa:	dc06      	bgt.n	800a70a <_puts_r+0xb6>
 800a6fc:	290a      	cmp	r1, #10
 800a6fe:	d004      	beq.n	800a70a <_puts_r+0xb6>
 800a700:	6823      	ldr	r3, [r4, #0]
 800a702:	1c5a      	adds	r2, r3, #1
 800a704:	6022      	str	r2, [r4, #0]
 800a706:	7019      	strb	r1, [r3, #0]
 800a708:	e7c5      	b.n	800a696 <_puts_r+0x42>
 800a70a:	4622      	mov	r2, r4
 800a70c:	4628      	mov	r0, r5
 800a70e:	f000 feeb 	bl	800b4e8 <__swbuf_r>
 800a712:	3001      	adds	r0, #1
 800a714:	d1bf      	bne.n	800a696 <_puts_r+0x42>
 800a716:	e7df      	b.n	800a6d8 <_puts_r+0x84>
 800a718:	6823      	ldr	r3, [r4, #0]
 800a71a:	250a      	movs	r5, #10
 800a71c:	1c5a      	adds	r2, r3, #1
 800a71e:	6022      	str	r2, [r4, #0]
 800a720:	701d      	strb	r5, [r3, #0]
 800a722:	e7db      	b.n	800a6dc <_puts_r+0x88>
 800a724:	0800e7bc 	.word	0x0800e7bc
 800a728:	0800e7dc 	.word	0x0800e7dc
 800a72c:	0800e79c 	.word	0x0800e79c

0800a730 <puts>:
 800a730:	4b02      	ldr	r3, [pc, #8]	; (800a73c <puts+0xc>)
 800a732:	4601      	mov	r1, r0
 800a734:	6818      	ldr	r0, [r3, #0]
 800a736:	f7ff bf8d 	b.w	800a654 <_puts_r>
 800a73a:	bf00      	nop
 800a73c:	200000a4 	.word	0x200000a4

0800a740 <nanf>:
 800a740:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a748 <nanf+0x8>
 800a744:	4770      	bx	lr
 800a746:	bf00      	nop
 800a748:	7fc00000 	.word	0x7fc00000

0800a74c <siprintf>:
 800a74c:	b40e      	push	{r1, r2, r3}
 800a74e:	b500      	push	{lr}
 800a750:	b09c      	sub	sp, #112	; 0x70
 800a752:	ab1d      	add	r3, sp, #116	; 0x74
 800a754:	9002      	str	r0, [sp, #8]
 800a756:	9006      	str	r0, [sp, #24]
 800a758:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a75c:	4809      	ldr	r0, [pc, #36]	; (800a784 <siprintf+0x38>)
 800a75e:	9107      	str	r1, [sp, #28]
 800a760:	9104      	str	r1, [sp, #16]
 800a762:	4909      	ldr	r1, [pc, #36]	; (800a788 <siprintf+0x3c>)
 800a764:	f853 2b04 	ldr.w	r2, [r3], #4
 800a768:	9105      	str	r1, [sp, #20]
 800a76a:	6800      	ldr	r0, [r0, #0]
 800a76c:	9301      	str	r3, [sp, #4]
 800a76e:	a902      	add	r1, sp, #8
 800a770:	f003 f9b4 	bl	800dadc <_svfiprintf_r>
 800a774:	9b02      	ldr	r3, [sp, #8]
 800a776:	2200      	movs	r2, #0
 800a778:	701a      	strb	r2, [r3, #0]
 800a77a:	b01c      	add	sp, #112	; 0x70
 800a77c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a780:	b003      	add	sp, #12
 800a782:	4770      	bx	lr
 800a784:	200000a4 	.word	0x200000a4
 800a788:	ffff0208 	.word	0xffff0208

0800a78c <sulp>:
 800a78c:	b570      	push	{r4, r5, r6, lr}
 800a78e:	4604      	mov	r4, r0
 800a790:	460d      	mov	r5, r1
 800a792:	ec45 4b10 	vmov	d0, r4, r5
 800a796:	4616      	mov	r6, r2
 800a798:	f002 fefe 	bl	800d598 <__ulp>
 800a79c:	ec51 0b10 	vmov	r0, r1, d0
 800a7a0:	b17e      	cbz	r6, 800a7c2 <sulp+0x36>
 800a7a2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a7a6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	dd09      	ble.n	800a7c2 <sulp+0x36>
 800a7ae:	051b      	lsls	r3, r3, #20
 800a7b0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a7b4:	2400      	movs	r4, #0
 800a7b6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a7ba:	4622      	mov	r2, r4
 800a7bc:	462b      	mov	r3, r5
 800a7be:	f7f5 ff1b 	bl	80005f8 <__aeabi_dmul>
 800a7c2:	bd70      	pop	{r4, r5, r6, pc}
 800a7c4:	0000      	movs	r0, r0
	...

0800a7c8 <_strtod_l>:
 800a7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7cc:	ed2d 8b02 	vpush	{d8}
 800a7d0:	b09d      	sub	sp, #116	; 0x74
 800a7d2:	461f      	mov	r7, r3
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	9318      	str	r3, [sp, #96]	; 0x60
 800a7d8:	4ba2      	ldr	r3, [pc, #648]	; (800aa64 <_strtod_l+0x29c>)
 800a7da:	9213      	str	r2, [sp, #76]	; 0x4c
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	9305      	str	r3, [sp, #20]
 800a7e0:	4604      	mov	r4, r0
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	4688      	mov	r8, r1
 800a7e6:	f7f5 fcf3 	bl	80001d0 <strlen>
 800a7ea:	f04f 0a00 	mov.w	sl, #0
 800a7ee:	4605      	mov	r5, r0
 800a7f0:	f04f 0b00 	mov.w	fp, #0
 800a7f4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a7f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a7fa:	781a      	ldrb	r2, [r3, #0]
 800a7fc:	2a2b      	cmp	r2, #43	; 0x2b
 800a7fe:	d04e      	beq.n	800a89e <_strtod_l+0xd6>
 800a800:	d83b      	bhi.n	800a87a <_strtod_l+0xb2>
 800a802:	2a0d      	cmp	r2, #13
 800a804:	d834      	bhi.n	800a870 <_strtod_l+0xa8>
 800a806:	2a08      	cmp	r2, #8
 800a808:	d834      	bhi.n	800a874 <_strtod_l+0xac>
 800a80a:	2a00      	cmp	r2, #0
 800a80c:	d03e      	beq.n	800a88c <_strtod_l+0xc4>
 800a80e:	2300      	movs	r3, #0
 800a810:	930a      	str	r3, [sp, #40]	; 0x28
 800a812:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a814:	7833      	ldrb	r3, [r6, #0]
 800a816:	2b30      	cmp	r3, #48	; 0x30
 800a818:	f040 80b0 	bne.w	800a97c <_strtod_l+0x1b4>
 800a81c:	7873      	ldrb	r3, [r6, #1]
 800a81e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a822:	2b58      	cmp	r3, #88	; 0x58
 800a824:	d168      	bne.n	800a8f8 <_strtod_l+0x130>
 800a826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a828:	9301      	str	r3, [sp, #4]
 800a82a:	ab18      	add	r3, sp, #96	; 0x60
 800a82c:	9702      	str	r7, [sp, #8]
 800a82e:	9300      	str	r3, [sp, #0]
 800a830:	4a8d      	ldr	r2, [pc, #564]	; (800aa68 <_strtod_l+0x2a0>)
 800a832:	ab19      	add	r3, sp, #100	; 0x64
 800a834:	a917      	add	r1, sp, #92	; 0x5c
 800a836:	4620      	mov	r0, r4
 800a838:	f001 ffae 	bl	800c798 <__gethex>
 800a83c:	f010 0707 	ands.w	r7, r0, #7
 800a840:	4605      	mov	r5, r0
 800a842:	d005      	beq.n	800a850 <_strtod_l+0x88>
 800a844:	2f06      	cmp	r7, #6
 800a846:	d12c      	bne.n	800a8a2 <_strtod_l+0xda>
 800a848:	3601      	adds	r6, #1
 800a84a:	2300      	movs	r3, #0
 800a84c:	9617      	str	r6, [sp, #92]	; 0x5c
 800a84e:	930a      	str	r3, [sp, #40]	; 0x28
 800a850:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a852:	2b00      	cmp	r3, #0
 800a854:	f040 8590 	bne.w	800b378 <_strtod_l+0xbb0>
 800a858:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a85a:	b1eb      	cbz	r3, 800a898 <_strtod_l+0xd0>
 800a85c:	4652      	mov	r2, sl
 800a85e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a862:	ec43 2b10 	vmov	d0, r2, r3
 800a866:	b01d      	add	sp, #116	; 0x74
 800a868:	ecbd 8b02 	vpop	{d8}
 800a86c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a870:	2a20      	cmp	r2, #32
 800a872:	d1cc      	bne.n	800a80e <_strtod_l+0x46>
 800a874:	3301      	adds	r3, #1
 800a876:	9317      	str	r3, [sp, #92]	; 0x5c
 800a878:	e7be      	b.n	800a7f8 <_strtod_l+0x30>
 800a87a:	2a2d      	cmp	r2, #45	; 0x2d
 800a87c:	d1c7      	bne.n	800a80e <_strtod_l+0x46>
 800a87e:	2201      	movs	r2, #1
 800a880:	920a      	str	r2, [sp, #40]	; 0x28
 800a882:	1c5a      	adds	r2, r3, #1
 800a884:	9217      	str	r2, [sp, #92]	; 0x5c
 800a886:	785b      	ldrb	r3, [r3, #1]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d1c2      	bne.n	800a812 <_strtod_l+0x4a>
 800a88c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a88e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a892:	2b00      	cmp	r3, #0
 800a894:	f040 856e 	bne.w	800b374 <_strtod_l+0xbac>
 800a898:	4652      	mov	r2, sl
 800a89a:	465b      	mov	r3, fp
 800a89c:	e7e1      	b.n	800a862 <_strtod_l+0x9a>
 800a89e:	2200      	movs	r2, #0
 800a8a0:	e7ee      	b.n	800a880 <_strtod_l+0xb8>
 800a8a2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a8a4:	b13a      	cbz	r2, 800a8b6 <_strtod_l+0xee>
 800a8a6:	2135      	movs	r1, #53	; 0x35
 800a8a8:	a81a      	add	r0, sp, #104	; 0x68
 800a8aa:	f002 ff80 	bl	800d7ae <__copybits>
 800a8ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a8b0:	4620      	mov	r0, r4
 800a8b2:	f002 fb3f 	bl	800cf34 <_Bfree>
 800a8b6:	3f01      	subs	r7, #1
 800a8b8:	2f04      	cmp	r7, #4
 800a8ba:	d806      	bhi.n	800a8ca <_strtod_l+0x102>
 800a8bc:	e8df f007 	tbb	[pc, r7]
 800a8c0:	1714030a 	.word	0x1714030a
 800a8c4:	0a          	.byte	0x0a
 800a8c5:	00          	.byte	0x00
 800a8c6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800a8ca:	0728      	lsls	r0, r5, #28
 800a8cc:	d5c0      	bpl.n	800a850 <_strtod_l+0x88>
 800a8ce:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a8d2:	e7bd      	b.n	800a850 <_strtod_l+0x88>
 800a8d4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800a8d8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a8da:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a8de:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a8e2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a8e6:	e7f0      	b.n	800a8ca <_strtod_l+0x102>
 800a8e8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800aa6c <_strtod_l+0x2a4>
 800a8ec:	e7ed      	b.n	800a8ca <_strtod_l+0x102>
 800a8ee:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a8f2:	f04f 3aff 	mov.w	sl, #4294967295
 800a8f6:	e7e8      	b.n	800a8ca <_strtod_l+0x102>
 800a8f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a8fa:	1c5a      	adds	r2, r3, #1
 800a8fc:	9217      	str	r2, [sp, #92]	; 0x5c
 800a8fe:	785b      	ldrb	r3, [r3, #1]
 800a900:	2b30      	cmp	r3, #48	; 0x30
 800a902:	d0f9      	beq.n	800a8f8 <_strtod_l+0x130>
 800a904:	2b00      	cmp	r3, #0
 800a906:	d0a3      	beq.n	800a850 <_strtod_l+0x88>
 800a908:	2301      	movs	r3, #1
 800a90a:	f04f 0900 	mov.w	r9, #0
 800a90e:	9304      	str	r3, [sp, #16]
 800a910:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a912:	9308      	str	r3, [sp, #32]
 800a914:	f8cd 901c 	str.w	r9, [sp, #28]
 800a918:	464f      	mov	r7, r9
 800a91a:	220a      	movs	r2, #10
 800a91c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a91e:	7806      	ldrb	r6, [r0, #0]
 800a920:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a924:	b2d9      	uxtb	r1, r3
 800a926:	2909      	cmp	r1, #9
 800a928:	d92a      	bls.n	800a980 <_strtod_l+0x1b8>
 800a92a:	9905      	ldr	r1, [sp, #20]
 800a92c:	462a      	mov	r2, r5
 800a92e:	f003 fb8a 	bl	800e046 <strncmp>
 800a932:	b398      	cbz	r0, 800a99c <_strtod_l+0x1d4>
 800a934:	2000      	movs	r0, #0
 800a936:	4632      	mov	r2, r6
 800a938:	463d      	mov	r5, r7
 800a93a:	9005      	str	r0, [sp, #20]
 800a93c:	4603      	mov	r3, r0
 800a93e:	2a65      	cmp	r2, #101	; 0x65
 800a940:	d001      	beq.n	800a946 <_strtod_l+0x17e>
 800a942:	2a45      	cmp	r2, #69	; 0x45
 800a944:	d118      	bne.n	800a978 <_strtod_l+0x1b0>
 800a946:	b91d      	cbnz	r5, 800a950 <_strtod_l+0x188>
 800a948:	9a04      	ldr	r2, [sp, #16]
 800a94a:	4302      	orrs	r2, r0
 800a94c:	d09e      	beq.n	800a88c <_strtod_l+0xc4>
 800a94e:	2500      	movs	r5, #0
 800a950:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800a954:	f108 0201 	add.w	r2, r8, #1
 800a958:	9217      	str	r2, [sp, #92]	; 0x5c
 800a95a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800a95e:	2a2b      	cmp	r2, #43	; 0x2b
 800a960:	d075      	beq.n	800aa4e <_strtod_l+0x286>
 800a962:	2a2d      	cmp	r2, #45	; 0x2d
 800a964:	d07b      	beq.n	800aa5e <_strtod_l+0x296>
 800a966:	f04f 0c00 	mov.w	ip, #0
 800a96a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a96e:	2909      	cmp	r1, #9
 800a970:	f240 8082 	bls.w	800aa78 <_strtod_l+0x2b0>
 800a974:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a978:	2600      	movs	r6, #0
 800a97a:	e09d      	b.n	800aab8 <_strtod_l+0x2f0>
 800a97c:	2300      	movs	r3, #0
 800a97e:	e7c4      	b.n	800a90a <_strtod_l+0x142>
 800a980:	2f08      	cmp	r7, #8
 800a982:	bfd8      	it	le
 800a984:	9907      	ldrle	r1, [sp, #28]
 800a986:	f100 0001 	add.w	r0, r0, #1
 800a98a:	bfda      	itte	le
 800a98c:	fb02 3301 	mlale	r3, r2, r1, r3
 800a990:	9307      	strle	r3, [sp, #28]
 800a992:	fb02 3909 	mlagt	r9, r2, r9, r3
 800a996:	3701      	adds	r7, #1
 800a998:	9017      	str	r0, [sp, #92]	; 0x5c
 800a99a:	e7bf      	b.n	800a91c <_strtod_l+0x154>
 800a99c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a99e:	195a      	adds	r2, r3, r5
 800a9a0:	9217      	str	r2, [sp, #92]	; 0x5c
 800a9a2:	5d5a      	ldrb	r2, [r3, r5]
 800a9a4:	2f00      	cmp	r7, #0
 800a9a6:	d037      	beq.n	800aa18 <_strtod_l+0x250>
 800a9a8:	9005      	str	r0, [sp, #20]
 800a9aa:	463d      	mov	r5, r7
 800a9ac:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a9b0:	2b09      	cmp	r3, #9
 800a9b2:	d912      	bls.n	800a9da <_strtod_l+0x212>
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	e7c2      	b.n	800a93e <_strtod_l+0x176>
 800a9b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a9ba:	1c5a      	adds	r2, r3, #1
 800a9bc:	9217      	str	r2, [sp, #92]	; 0x5c
 800a9be:	785a      	ldrb	r2, [r3, #1]
 800a9c0:	3001      	adds	r0, #1
 800a9c2:	2a30      	cmp	r2, #48	; 0x30
 800a9c4:	d0f8      	beq.n	800a9b8 <_strtod_l+0x1f0>
 800a9c6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a9ca:	2b08      	cmp	r3, #8
 800a9cc:	f200 84d9 	bhi.w	800b382 <_strtod_l+0xbba>
 800a9d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a9d2:	9005      	str	r0, [sp, #20]
 800a9d4:	2000      	movs	r0, #0
 800a9d6:	9308      	str	r3, [sp, #32]
 800a9d8:	4605      	mov	r5, r0
 800a9da:	3a30      	subs	r2, #48	; 0x30
 800a9dc:	f100 0301 	add.w	r3, r0, #1
 800a9e0:	d014      	beq.n	800aa0c <_strtod_l+0x244>
 800a9e2:	9905      	ldr	r1, [sp, #20]
 800a9e4:	4419      	add	r1, r3
 800a9e6:	9105      	str	r1, [sp, #20]
 800a9e8:	462b      	mov	r3, r5
 800a9ea:	eb00 0e05 	add.w	lr, r0, r5
 800a9ee:	210a      	movs	r1, #10
 800a9f0:	4573      	cmp	r3, lr
 800a9f2:	d113      	bne.n	800aa1c <_strtod_l+0x254>
 800a9f4:	182b      	adds	r3, r5, r0
 800a9f6:	2b08      	cmp	r3, #8
 800a9f8:	f105 0501 	add.w	r5, r5, #1
 800a9fc:	4405      	add	r5, r0
 800a9fe:	dc1c      	bgt.n	800aa3a <_strtod_l+0x272>
 800aa00:	9907      	ldr	r1, [sp, #28]
 800aa02:	230a      	movs	r3, #10
 800aa04:	fb03 2301 	mla	r3, r3, r1, r2
 800aa08:	9307      	str	r3, [sp, #28]
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800aa0e:	1c51      	adds	r1, r2, #1
 800aa10:	9117      	str	r1, [sp, #92]	; 0x5c
 800aa12:	7852      	ldrb	r2, [r2, #1]
 800aa14:	4618      	mov	r0, r3
 800aa16:	e7c9      	b.n	800a9ac <_strtod_l+0x1e4>
 800aa18:	4638      	mov	r0, r7
 800aa1a:	e7d2      	b.n	800a9c2 <_strtod_l+0x1fa>
 800aa1c:	2b08      	cmp	r3, #8
 800aa1e:	dc04      	bgt.n	800aa2a <_strtod_l+0x262>
 800aa20:	9e07      	ldr	r6, [sp, #28]
 800aa22:	434e      	muls	r6, r1
 800aa24:	9607      	str	r6, [sp, #28]
 800aa26:	3301      	adds	r3, #1
 800aa28:	e7e2      	b.n	800a9f0 <_strtod_l+0x228>
 800aa2a:	f103 0c01 	add.w	ip, r3, #1
 800aa2e:	f1bc 0f10 	cmp.w	ip, #16
 800aa32:	bfd8      	it	le
 800aa34:	fb01 f909 	mulle.w	r9, r1, r9
 800aa38:	e7f5      	b.n	800aa26 <_strtod_l+0x25e>
 800aa3a:	2d10      	cmp	r5, #16
 800aa3c:	bfdc      	itt	le
 800aa3e:	230a      	movle	r3, #10
 800aa40:	fb03 2909 	mlale	r9, r3, r9, r2
 800aa44:	e7e1      	b.n	800aa0a <_strtod_l+0x242>
 800aa46:	2300      	movs	r3, #0
 800aa48:	9305      	str	r3, [sp, #20]
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	e77c      	b.n	800a948 <_strtod_l+0x180>
 800aa4e:	f04f 0c00 	mov.w	ip, #0
 800aa52:	f108 0202 	add.w	r2, r8, #2
 800aa56:	9217      	str	r2, [sp, #92]	; 0x5c
 800aa58:	f898 2002 	ldrb.w	r2, [r8, #2]
 800aa5c:	e785      	b.n	800a96a <_strtod_l+0x1a2>
 800aa5e:	f04f 0c01 	mov.w	ip, #1
 800aa62:	e7f6      	b.n	800aa52 <_strtod_l+0x28a>
 800aa64:	0800e864 	.word	0x0800e864
 800aa68:	0800e5b8 	.word	0x0800e5b8
 800aa6c:	7ff00000 	.word	0x7ff00000
 800aa70:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800aa72:	1c51      	adds	r1, r2, #1
 800aa74:	9117      	str	r1, [sp, #92]	; 0x5c
 800aa76:	7852      	ldrb	r2, [r2, #1]
 800aa78:	2a30      	cmp	r2, #48	; 0x30
 800aa7a:	d0f9      	beq.n	800aa70 <_strtod_l+0x2a8>
 800aa7c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800aa80:	2908      	cmp	r1, #8
 800aa82:	f63f af79 	bhi.w	800a978 <_strtod_l+0x1b0>
 800aa86:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800aa8a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800aa8c:	9206      	str	r2, [sp, #24]
 800aa8e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800aa90:	1c51      	adds	r1, r2, #1
 800aa92:	9117      	str	r1, [sp, #92]	; 0x5c
 800aa94:	7852      	ldrb	r2, [r2, #1]
 800aa96:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800aa9a:	2e09      	cmp	r6, #9
 800aa9c:	d937      	bls.n	800ab0e <_strtod_l+0x346>
 800aa9e:	9e06      	ldr	r6, [sp, #24]
 800aaa0:	1b89      	subs	r1, r1, r6
 800aaa2:	2908      	cmp	r1, #8
 800aaa4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800aaa8:	dc02      	bgt.n	800aab0 <_strtod_l+0x2e8>
 800aaaa:	4576      	cmp	r6, lr
 800aaac:	bfa8      	it	ge
 800aaae:	4676      	movge	r6, lr
 800aab0:	f1bc 0f00 	cmp.w	ip, #0
 800aab4:	d000      	beq.n	800aab8 <_strtod_l+0x2f0>
 800aab6:	4276      	negs	r6, r6
 800aab8:	2d00      	cmp	r5, #0
 800aaba:	d14d      	bne.n	800ab58 <_strtod_l+0x390>
 800aabc:	9904      	ldr	r1, [sp, #16]
 800aabe:	4301      	orrs	r1, r0
 800aac0:	f47f aec6 	bne.w	800a850 <_strtod_l+0x88>
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	f47f aee1 	bne.w	800a88c <_strtod_l+0xc4>
 800aaca:	2a69      	cmp	r2, #105	; 0x69
 800aacc:	d027      	beq.n	800ab1e <_strtod_l+0x356>
 800aace:	dc24      	bgt.n	800ab1a <_strtod_l+0x352>
 800aad0:	2a49      	cmp	r2, #73	; 0x49
 800aad2:	d024      	beq.n	800ab1e <_strtod_l+0x356>
 800aad4:	2a4e      	cmp	r2, #78	; 0x4e
 800aad6:	f47f aed9 	bne.w	800a88c <_strtod_l+0xc4>
 800aada:	499f      	ldr	r1, [pc, #636]	; (800ad58 <_strtod_l+0x590>)
 800aadc:	a817      	add	r0, sp, #92	; 0x5c
 800aade:	f002 f8b3 	bl	800cc48 <__match>
 800aae2:	2800      	cmp	r0, #0
 800aae4:	f43f aed2 	beq.w	800a88c <_strtod_l+0xc4>
 800aae8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aaea:	781b      	ldrb	r3, [r3, #0]
 800aaec:	2b28      	cmp	r3, #40	; 0x28
 800aaee:	d12d      	bne.n	800ab4c <_strtod_l+0x384>
 800aaf0:	499a      	ldr	r1, [pc, #616]	; (800ad5c <_strtod_l+0x594>)
 800aaf2:	aa1a      	add	r2, sp, #104	; 0x68
 800aaf4:	a817      	add	r0, sp, #92	; 0x5c
 800aaf6:	f002 f8bb 	bl	800cc70 <__hexnan>
 800aafa:	2805      	cmp	r0, #5
 800aafc:	d126      	bne.n	800ab4c <_strtod_l+0x384>
 800aafe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ab00:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800ab04:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800ab08:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800ab0c:	e6a0      	b.n	800a850 <_strtod_l+0x88>
 800ab0e:	210a      	movs	r1, #10
 800ab10:	fb01 2e0e 	mla	lr, r1, lr, r2
 800ab14:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800ab18:	e7b9      	b.n	800aa8e <_strtod_l+0x2c6>
 800ab1a:	2a6e      	cmp	r2, #110	; 0x6e
 800ab1c:	e7db      	b.n	800aad6 <_strtod_l+0x30e>
 800ab1e:	4990      	ldr	r1, [pc, #576]	; (800ad60 <_strtod_l+0x598>)
 800ab20:	a817      	add	r0, sp, #92	; 0x5c
 800ab22:	f002 f891 	bl	800cc48 <__match>
 800ab26:	2800      	cmp	r0, #0
 800ab28:	f43f aeb0 	beq.w	800a88c <_strtod_l+0xc4>
 800ab2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ab2e:	498d      	ldr	r1, [pc, #564]	; (800ad64 <_strtod_l+0x59c>)
 800ab30:	3b01      	subs	r3, #1
 800ab32:	a817      	add	r0, sp, #92	; 0x5c
 800ab34:	9317      	str	r3, [sp, #92]	; 0x5c
 800ab36:	f002 f887 	bl	800cc48 <__match>
 800ab3a:	b910      	cbnz	r0, 800ab42 <_strtod_l+0x37a>
 800ab3c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ab3e:	3301      	adds	r3, #1
 800ab40:	9317      	str	r3, [sp, #92]	; 0x5c
 800ab42:	f8df b230 	ldr.w	fp, [pc, #560]	; 800ad74 <_strtod_l+0x5ac>
 800ab46:	f04f 0a00 	mov.w	sl, #0
 800ab4a:	e681      	b.n	800a850 <_strtod_l+0x88>
 800ab4c:	4886      	ldr	r0, [pc, #536]	; (800ad68 <_strtod_l+0x5a0>)
 800ab4e:	f003 fa1f 	bl	800df90 <nan>
 800ab52:	ec5b ab10 	vmov	sl, fp, d0
 800ab56:	e67b      	b.n	800a850 <_strtod_l+0x88>
 800ab58:	9b05      	ldr	r3, [sp, #20]
 800ab5a:	9807      	ldr	r0, [sp, #28]
 800ab5c:	1af3      	subs	r3, r6, r3
 800ab5e:	2f00      	cmp	r7, #0
 800ab60:	bf08      	it	eq
 800ab62:	462f      	moveq	r7, r5
 800ab64:	2d10      	cmp	r5, #16
 800ab66:	9306      	str	r3, [sp, #24]
 800ab68:	46a8      	mov	r8, r5
 800ab6a:	bfa8      	it	ge
 800ab6c:	f04f 0810 	movge.w	r8, #16
 800ab70:	f7f5 fcc8 	bl	8000504 <__aeabi_ui2d>
 800ab74:	2d09      	cmp	r5, #9
 800ab76:	4682      	mov	sl, r0
 800ab78:	468b      	mov	fp, r1
 800ab7a:	dd13      	ble.n	800aba4 <_strtod_l+0x3dc>
 800ab7c:	4b7b      	ldr	r3, [pc, #492]	; (800ad6c <_strtod_l+0x5a4>)
 800ab7e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ab82:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ab86:	f7f5 fd37 	bl	80005f8 <__aeabi_dmul>
 800ab8a:	4682      	mov	sl, r0
 800ab8c:	4648      	mov	r0, r9
 800ab8e:	468b      	mov	fp, r1
 800ab90:	f7f5 fcb8 	bl	8000504 <__aeabi_ui2d>
 800ab94:	4602      	mov	r2, r0
 800ab96:	460b      	mov	r3, r1
 800ab98:	4650      	mov	r0, sl
 800ab9a:	4659      	mov	r1, fp
 800ab9c:	f7f5 fb76 	bl	800028c <__adddf3>
 800aba0:	4682      	mov	sl, r0
 800aba2:	468b      	mov	fp, r1
 800aba4:	2d0f      	cmp	r5, #15
 800aba6:	dc38      	bgt.n	800ac1a <_strtod_l+0x452>
 800aba8:	9b06      	ldr	r3, [sp, #24]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	f43f ae50 	beq.w	800a850 <_strtod_l+0x88>
 800abb0:	dd24      	ble.n	800abfc <_strtod_l+0x434>
 800abb2:	2b16      	cmp	r3, #22
 800abb4:	dc0b      	bgt.n	800abce <_strtod_l+0x406>
 800abb6:	496d      	ldr	r1, [pc, #436]	; (800ad6c <_strtod_l+0x5a4>)
 800abb8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800abbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800abc0:	4652      	mov	r2, sl
 800abc2:	465b      	mov	r3, fp
 800abc4:	f7f5 fd18 	bl	80005f8 <__aeabi_dmul>
 800abc8:	4682      	mov	sl, r0
 800abca:	468b      	mov	fp, r1
 800abcc:	e640      	b.n	800a850 <_strtod_l+0x88>
 800abce:	9a06      	ldr	r2, [sp, #24]
 800abd0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800abd4:	4293      	cmp	r3, r2
 800abd6:	db20      	blt.n	800ac1a <_strtod_l+0x452>
 800abd8:	4c64      	ldr	r4, [pc, #400]	; (800ad6c <_strtod_l+0x5a4>)
 800abda:	f1c5 050f 	rsb	r5, r5, #15
 800abde:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800abe2:	4652      	mov	r2, sl
 800abe4:	465b      	mov	r3, fp
 800abe6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800abea:	f7f5 fd05 	bl	80005f8 <__aeabi_dmul>
 800abee:	9b06      	ldr	r3, [sp, #24]
 800abf0:	1b5d      	subs	r5, r3, r5
 800abf2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800abf6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800abfa:	e7e3      	b.n	800abc4 <_strtod_l+0x3fc>
 800abfc:	9b06      	ldr	r3, [sp, #24]
 800abfe:	3316      	adds	r3, #22
 800ac00:	db0b      	blt.n	800ac1a <_strtod_l+0x452>
 800ac02:	9b05      	ldr	r3, [sp, #20]
 800ac04:	1b9e      	subs	r6, r3, r6
 800ac06:	4b59      	ldr	r3, [pc, #356]	; (800ad6c <_strtod_l+0x5a4>)
 800ac08:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800ac0c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ac10:	4650      	mov	r0, sl
 800ac12:	4659      	mov	r1, fp
 800ac14:	f7f5 fe1a 	bl	800084c <__aeabi_ddiv>
 800ac18:	e7d6      	b.n	800abc8 <_strtod_l+0x400>
 800ac1a:	9b06      	ldr	r3, [sp, #24]
 800ac1c:	eba5 0808 	sub.w	r8, r5, r8
 800ac20:	4498      	add	r8, r3
 800ac22:	f1b8 0f00 	cmp.w	r8, #0
 800ac26:	dd74      	ble.n	800ad12 <_strtod_l+0x54a>
 800ac28:	f018 030f 	ands.w	r3, r8, #15
 800ac2c:	d00a      	beq.n	800ac44 <_strtod_l+0x47c>
 800ac2e:	494f      	ldr	r1, [pc, #316]	; (800ad6c <_strtod_l+0x5a4>)
 800ac30:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ac34:	4652      	mov	r2, sl
 800ac36:	465b      	mov	r3, fp
 800ac38:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac3c:	f7f5 fcdc 	bl	80005f8 <__aeabi_dmul>
 800ac40:	4682      	mov	sl, r0
 800ac42:	468b      	mov	fp, r1
 800ac44:	f038 080f 	bics.w	r8, r8, #15
 800ac48:	d04f      	beq.n	800acea <_strtod_l+0x522>
 800ac4a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800ac4e:	dd22      	ble.n	800ac96 <_strtod_l+0x4ce>
 800ac50:	2500      	movs	r5, #0
 800ac52:	462e      	mov	r6, r5
 800ac54:	9507      	str	r5, [sp, #28]
 800ac56:	9505      	str	r5, [sp, #20]
 800ac58:	2322      	movs	r3, #34	; 0x22
 800ac5a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800ad74 <_strtod_l+0x5ac>
 800ac5e:	6023      	str	r3, [r4, #0]
 800ac60:	f04f 0a00 	mov.w	sl, #0
 800ac64:	9b07      	ldr	r3, [sp, #28]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	f43f adf2 	beq.w	800a850 <_strtod_l+0x88>
 800ac6c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ac6e:	4620      	mov	r0, r4
 800ac70:	f002 f960 	bl	800cf34 <_Bfree>
 800ac74:	9905      	ldr	r1, [sp, #20]
 800ac76:	4620      	mov	r0, r4
 800ac78:	f002 f95c 	bl	800cf34 <_Bfree>
 800ac7c:	4631      	mov	r1, r6
 800ac7e:	4620      	mov	r0, r4
 800ac80:	f002 f958 	bl	800cf34 <_Bfree>
 800ac84:	9907      	ldr	r1, [sp, #28]
 800ac86:	4620      	mov	r0, r4
 800ac88:	f002 f954 	bl	800cf34 <_Bfree>
 800ac8c:	4629      	mov	r1, r5
 800ac8e:	4620      	mov	r0, r4
 800ac90:	f002 f950 	bl	800cf34 <_Bfree>
 800ac94:	e5dc      	b.n	800a850 <_strtod_l+0x88>
 800ac96:	4b36      	ldr	r3, [pc, #216]	; (800ad70 <_strtod_l+0x5a8>)
 800ac98:	9304      	str	r3, [sp, #16]
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800aca0:	4650      	mov	r0, sl
 800aca2:	4659      	mov	r1, fp
 800aca4:	4699      	mov	r9, r3
 800aca6:	f1b8 0f01 	cmp.w	r8, #1
 800acaa:	dc21      	bgt.n	800acf0 <_strtod_l+0x528>
 800acac:	b10b      	cbz	r3, 800acb2 <_strtod_l+0x4ea>
 800acae:	4682      	mov	sl, r0
 800acb0:	468b      	mov	fp, r1
 800acb2:	4b2f      	ldr	r3, [pc, #188]	; (800ad70 <_strtod_l+0x5a8>)
 800acb4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800acb8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800acbc:	4652      	mov	r2, sl
 800acbe:	465b      	mov	r3, fp
 800acc0:	e9d9 0100 	ldrd	r0, r1, [r9]
 800acc4:	f7f5 fc98 	bl	80005f8 <__aeabi_dmul>
 800acc8:	4b2a      	ldr	r3, [pc, #168]	; (800ad74 <_strtod_l+0x5ac>)
 800acca:	460a      	mov	r2, r1
 800accc:	400b      	ands	r3, r1
 800acce:	492a      	ldr	r1, [pc, #168]	; (800ad78 <_strtod_l+0x5b0>)
 800acd0:	428b      	cmp	r3, r1
 800acd2:	4682      	mov	sl, r0
 800acd4:	d8bc      	bhi.n	800ac50 <_strtod_l+0x488>
 800acd6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800acda:	428b      	cmp	r3, r1
 800acdc:	bf86      	itte	hi
 800acde:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800ad7c <_strtod_l+0x5b4>
 800ace2:	f04f 3aff 	movhi.w	sl, #4294967295
 800ace6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800acea:	2300      	movs	r3, #0
 800acec:	9304      	str	r3, [sp, #16]
 800acee:	e084      	b.n	800adfa <_strtod_l+0x632>
 800acf0:	f018 0f01 	tst.w	r8, #1
 800acf4:	d005      	beq.n	800ad02 <_strtod_l+0x53a>
 800acf6:	9b04      	ldr	r3, [sp, #16]
 800acf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acfc:	f7f5 fc7c 	bl	80005f8 <__aeabi_dmul>
 800ad00:	2301      	movs	r3, #1
 800ad02:	9a04      	ldr	r2, [sp, #16]
 800ad04:	3208      	adds	r2, #8
 800ad06:	f109 0901 	add.w	r9, r9, #1
 800ad0a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ad0e:	9204      	str	r2, [sp, #16]
 800ad10:	e7c9      	b.n	800aca6 <_strtod_l+0x4de>
 800ad12:	d0ea      	beq.n	800acea <_strtod_l+0x522>
 800ad14:	f1c8 0800 	rsb	r8, r8, #0
 800ad18:	f018 020f 	ands.w	r2, r8, #15
 800ad1c:	d00a      	beq.n	800ad34 <_strtod_l+0x56c>
 800ad1e:	4b13      	ldr	r3, [pc, #76]	; (800ad6c <_strtod_l+0x5a4>)
 800ad20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad24:	4650      	mov	r0, sl
 800ad26:	4659      	mov	r1, fp
 800ad28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad2c:	f7f5 fd8e 	bl	800084c <__aeabi_ddiv>
 800ad30:	4682      	mov	sl, r0
 800ad32:	468b      	mov	fp, r1
 800ad34:	ea5f 1828 	movs.w	r8, r8, asr #4
 800ad38:	d0d7      	beq.n	800acea <_strtod_l+0x522>
 800ad3a:	f1b8 0f1f 	cmp.w	r8, #31
 800ad3e:	dd1f      	ble.n	800ad80 <_strtod_l+0x5b8>
 800ad40:	2500      	movs	r5, #0
 800ad42:	462e      	mov	r6, r5
 800ad44:	9507      	str	r5, [sp, #28]
 800ad46:	9505      	str	r5, [sp, #20]
 800ad48:	2322      	movs	r3, #34	; 0x22
 800ad4a:	f04f 0a00 	mov.w	sl, #0
 800ad4e:	f04f 0b00 	mov.w	fp, #0
 800ad52:	6023      	str	r3, [r4, #0]
 800ad54:	e786      	b.n	800ac64 <_strtod_l+0x49c>
 800ad56:	bf00      	nop
 800ad58:	0800e589 	.word	0x0800e589
 800ad5c:	0800e5cc 	.word	0x0800e5cc
 800ad60:	0800e581 	.word	0x0800e581
 800ad64:	0800e70c 	.word	0x0800e70c
 800ad68:	0800ea20 	.word	0x0800ea20
 800ad6c:	0800e900 	.word	0x0800e900
 800ad70:	0800e8d8 	.word	0x0800e8d8
 800ad74:	7ff00000 	.word	0x7ff00000
 800ad78:	7ca00000 	.word	0x7ca00000
 800ad7c:	7fefffff 	.word	0x7fefffff
 800ad80:	f018 0310 	ands.w	r3, r8, #16
 800ad84:	bf18      	it	ne
 800ad86:	236a      	movne	r3, #106	; 0x6a
 800ad88:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800b138 <_strtod_l+0x970>
 800ad8c:	9304      	str	r3, [sp, #16]
 800ad8e:	4650      	mov	r0, sl
 800ad90:	4659      	mov	r1, fp
 800ad92:	2300      	movs	r3, #0
 800ad94:	f018 0f01 	tst.w	r8, #1
 800ad98:	d004      	beq.n	800ada4 <_strtod_l+0x5dc>
 800ad9a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ad9e:	f7f5 fc2b 	bl	80005f8 <__aeabi_dmul>
 800ada2:	2301      	movs	r3, #1
 800ada4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800ada8:	f109 0908 	add.w	r9, r9, #8
 800adac:	d1f2      	bne.n	800ad94 <_strtod_l+0x5cc>
 800adae:	b10b      	cbz	r3, 800adb4 <_strtod_l+0x5ec>
 800adb0:	4682      	mov	sl, r0
 800adb2:	468b      	mov	fp, r1
 800adb4:	9b04      	ldr	r3, [sp, #16]
 800adb6:	b1c3      	cbz	r3, 800adea <_strtod_l+0x622>
 800adb8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800adbc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	4659      	mov	r1, fp
 800adc4:	dd11      	ble.n	800adea <_strtod_l+0x622>
 800adc6:	2b1f      	cmp	r3, #31
 800adc8:	f340 8124 	ble.w	800b014 <_strtod_l+0x84c>
 800adcc:	2b34      	cmp	r3, #52	; 0x34
 800adce:	bfde      	ittt	le
 800add0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800add4:	f04f 33ff 	movle.w	r3, #4294967295
 800add8:	fa03 f202 	lslle.w	r2, r3, r2
 800addc:	f04f 0a00 	mov.w	sl, #0
 800ade0:	bfcc      	ite	gt
 800ade2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800ade6:	ea02 0b01 	andle.w	fp, r2, r1
 800adea:	2200      	movs	r2, #0
 800adec:	2300      	movs	r3, #0
 800adee:	4650      	mov	r0, sl
 800adf0:	4659      	mov	r1, fp
 800adf2:	f7f5 fe69 	bl	8000ac8 <__aeabi_dcmpeq>
 800adf6:	2800      	cmp	r0, #0
 800adf8:	d1a2      	bne.n	800ad40 <_strtod_l+0x578>
 800adfa:	9b07      	ldr	r3, [sp, #28]
 800adfc:	9300      	str	r3, [sp, #0]
 800adfe:	9908      	ldr	r1, [sp, #32]
 800ae00:	462b      	mov	r3, r5
 800ae02:	463a      	mov	r2, r7
 800ae04:	4620      	mov	r0, r4
 800ae06:	f002 f8fd 	bl	800d004 <__s2b>
 800ae0a:	9007      	str	r0, [sp, #28]
 800ae0c:	2800      	cmp	r0, #0
 800ae0e:	f43f af1f 	beq.w	800ac50 <_strtod_l+0x488>
 800ae12:	9b05      	ldr	r3, [sp, #20]
 800ae14:	1b9e      	subs	r6, r3, r6
 800ae16:	9b06      	ldr	r3, [sp, #24]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	bfb4      	ite	lt
 800ae1c:	4633      	movlt	r3, r6
 800ae1e:	2300      	movge	r3, #0
 800ae20:	930c      	str	r3, [sp, #48]	; 0x30
 800ae22:	9b06      	ldr	r3, [sp, #24]
 800ae24:	2500      	movs	r5, #0
 800ae26:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ae2a:	9312      	str	r3, [sp, #72]	; 0x48
 800ae2c:	462e      	mov	r6, r5
 800ae2e:	9b07      	ldr	r3, [sp, #28]
 800ae30:	4620      	mov	r0, r4
 800ae32:	6859      	ldr	r1, [r3, #4]
 800ae34:	f002 f83e 	bl	800ceb4 <_Balloc>
 800ae38:	9005      	str	r0, [sp, #20]
 800ae3a:	2800      	cmp	r0, #0
 800ae3c:	f43f af0c 	beq.w	800ac58 <_strtod_l+0x490>
 800ae40:	9b07      	ldr	r3, [sp, #28]
 800ae42:	691a      	ldr	r2, [r3, #16]
 800ae44:	3202      	adds	r2, #2
 800ae46:	f103 010c 	add.w	r1, r3, #12
 800ae4a:	0092      	lsls	r2, r2, #2
 800ae4c:	300c      	adds	r0, #12
 800ae4e:	f7fe fd59 	bl	8009904 <memcpy>
 800ae52:	ec4b ab10 	vmov	d0, sl, fp
 800ae56:	aa1a      	add	r2, sp, #104	; 0x68
 800ae58:	a919      	add	r1, sp, #100	; 0x64
 800ae5a:	4620      	mov	r0, r4
 800ae5c:	f002 fc18 	bl	800d690 <__d2b>
 800ae60:	ec4b ab18 	vmov	d8, sl, fp
 800ae64:	9018      	str	r0, [sp, #96]	; 0x60
 800ae66:	2800      	cmp	r0, #0
 800ae68:	f43f aef6 	beq.w	800ac58 <_strtod_l+0x490>
 800ae6c:	2101      	movs	r1, #1
 800ae6e:	4620      	mov	r0, r4
 800ae70:	f002 f962 	bl	800d138 <__i2b>
 800ae74:	4606      	mov	r6, r0
 800ae76:	2800      	cmp	r0, #0
 800ae78:	f43f aeee 	beq.w	800ac58 <_strtod_l+0x490>
 800ae7c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ae7e:	9904      	ldr	r1, [sp, #16]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	bfab      	itete	ge
 800ae84:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800ae86:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800ae88:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800ae8a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800ae8e:	bfac      	ite	ge
 800ae90:	eb03 0902 	addge.w	r9, r3, r2
 800ae94:	1ad7      	sublt	r7, r2, r3
 800ae96:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ae98:	eba3 0801 	sub.w	r8, r3, r1
 800ae9c:	4490      	add	r8, r2
 800ae9e:	4ba1      	ldr	r3, [pc, #644]	; (800b124 <_strtod_l+0x95c>)
 800aea0:	f108 38ff 	add.w	r8, r8, #4294967295
 800aea4:	4598      	cmp	r8, r3
 800aea6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800aeaa:	f280 80c7 	bge.w	800b03c <_strtod_l+0x874>
 800aeae:	eba3 0308 	sub.w	r3, r3, r8
 800aeb2:	2b1f      	cmp	r3, #31
 800aeb4:	eba2 0203 	sub.w	r2, r2, r3
 800aeb8:	f04f 0101 	mov.w	r1, #1
 800aebc:	f300 80b1 	bgt.w	800b022 <_strtod_l+0x85a>
 800aec0:	fa01 f303 	lsl.w	r3, r1, r3
 800aec4:	930d      	str	r3, [sp, #52]	; 0x34
 800aec6:	2300      	movs	r3, #0
 800aec8:	9308      	str	r3, [sp, #32]
 800aeca:	eb09 0802 	add.w	r8, r9, r2
 800aece:	9b04      	ldr	r3, [sp, #16]
 800aed0:	45c1      	cmp	r9, r8
 800aed2:	4417      	add	r7, r2
 800aed4:	441f      	add	r7, r3
 800aed6:	464b      	mov	r3, r9
 800aed8:	bfa8      	it	ge
 800aeda:	4643      	movge	r3, r8
 800aedc:	42bb      	cmp	r3, r7
 800aede:	bfa8      	it	ge
 800aee0:	463b      	movge	r3, r7
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	bfc2      	ittt	gt
 800aee6:	eba8 0803 	subgt.w	r8, r8, r3
 800aeea:	1aff      	subgt	r7, r7, r3
 800aeec:	eba9 0903 	subgt.w	r9, r9, r3
 800aef0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	dd17      	ble.n	800af26 <_strtod_l+0x75e>
 800aef6:	4631      	mov	r1, r6
 800aef8:	461a      	mov	r2, r3
 800aefa:	4620      	mov	r0, r4
 800aefc:	f002 f9dc 	bl	800d2b8 <__pow5mult>
 800af00:	4606      	mov	r6, r0
 800af02:	2800      	cmp	r0, #0
 800af04:	f43f aea8 	beq.w	800ac58 <_strtod_l+0x490>
 800af08:	4601      	mov	r1, r0
 800af0a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800af0c:	4620      	mov	r0, r4
 800af0e:	f002 f929 	bl	800d164 <__multiply>
 800af12:	900b      	str	r0, [sp, #44]	; 0x2c
 800af14:	2800      	cmp	r0, #0
 800af16:	f43f ae9f 	beq.w	800ac58 <_strtod_l+0x490>
 800af1a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800af1c:	4620      	mov	r0, r4
 800af1e:	f002 f809 	bl	800cf34 <_Bfree>
 800af22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af24:	9318      	str	r3, [sp, #96]	; 0x60
 800af26:	f1b8 0f00 	cmp.w	r8, #0
 800af2a:	f300 808c 	bgt.w	800b046 <_strtod_l+0x87e>
 800af2e:	9b06      	ldr	r3, [sp, #24]
 800af30:	2b00      	cmp	r3, #0
 800af32:	dd08      	ble.n	800af46 <_strtod_l+0x77e>
 800af34:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800af36:	9905      	ldr	r1, [sp, #20]
 800af38:	4620      	mov	r0, r4
 800af3a:	f002 f9bd 	bl	800d2b8 <__pow5mult>
 800af3e:	9005      	str	r0, [sp, #20]
 800af40:	2800      	cmp	r0, #0
 800af42:	f43f ae89 	beq.w	800ac58 <_strtod_l+0x490>
 800af46:	2f00      	cmp	r7, #0
 800af48:	dd08      	ble.n	800af5c <_strtod_l+0x794>
 800af4a:	9905      	ldr	r1, [sp, #20]
 800af4c:	463a      	mov	r2, r7
 800af4e:	4620      	mov	r0, r4
 800af50:	f002 fa0c 	bl	800d36c <__lshift>
 800af54:	9005      	str	r0, [sp, #20]
 800af56:	2800      	cmp	r0, #0
 800af58:	f43f ae7e 	beq.w	800ac58 <_strtod_l+0x490>
 800af5c:	f1b9 0f00 	cmp.w	r9, #0
 800af60:	dd08      	ble.n	800af74 <_strtod_l+0x7ac>
 800af62:	4631      	mov	r1, r6
 800af64:	464a      	mov	r2, r9
 800af66:	4620      	mov	r0, r4
 800af68:	f002 fa00 	bl	800d36c <__lshift>
 800af6c:	4606      	mov	r6, r0
 800af6e:	2800      	cmp	r0, #0
 800af70:	f43f ae72 	beq.w	800ac58 <_strtod_l+0x490>
 800af74:	9a05      	ldr	r2, [sp, #20]
 800af76:	9918      	ldr	r1, [sp, #96]	; 0x60
 800af78:	4620      	mov	r0, r4
 800af7a:	f002 fa83 	bl	800d484 <__mdiff>
 800af7e:	4605      	mov	r5, r0
 800af80:	2800      	cmp	r0, #0
 800af82:	f43f ae69 	beq.w	800ac58 <_strtod_l+0x490>
 800af86:	68c3      	ldr	r3, [r0, #12]
 800af88:	930b      	str	r3, [sp, #44]	; 0x2c
 800af8a:	2300      	movs	r3, #0
 800af8c:	60c3      	str	r3, [r0, #12]
 800af8e:	4631      	mov	r1, r6
 800af90:	f002 fa5c 	bl	800d44c <__mcmp>
 800af94:	2800      	cmp	r0, #0
 800af96:	da60      	bge.n	800b05a <_strtod_l+0x892>
 800af98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af9a:	ea53 030a 	orrs.w	r3, r3, sl
 800af9e:	f040 8082 	bne.w	800b0a6 <_strtod_l+0x8de>
 800afa2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d17d      	bne.n	800b0a6 <_strtod_l+0x8de>
 800afaa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800afae:	0d1b      	lsrs	r3, r3, #20
 800afb0:	051b      	lsls	r3, r3, #20
 800afb2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800afb6:	d976      	bls.n	800b0a6 <_strtod_l+0x8de>
 800afb8:	696b      	ldr	r3, [r5, #20]
 800afba:	b913      	cbnz	r3, 800afc2 <_strtod_l+0x7fa>
 800afbc:	692b      	ldr	r3, [r5, #16]
 800afbe:	2b01      	cmp	r3, #1
 800afc0:	dd71      	ble.n	800b0a6 <_strtod_l+0x8de>
 800afc2:	4629      	mov	r1, r5
 800afc4:	2201      	movs	r2, #1
 800afc6:	4620      	mov	r0, r4
 800afc8:	f002 f9d0 	bl	800d36c <__lshift>
 800afcc:	4631      	mov	r1, r6
 800afce:	4605      	mov	r5, r0
 800afd0:	f002 fa3c 	bl	800d44c <__mcmp>
 800afd4:	2800      	cmp	r0, #0
 800afd6:	dd66      	ble.n	800b0a6 <_strtod_l+0x8de>
 800afd8:	9904      	ldr	r1, [sp, #16]
 800afda:	4a53      	ldr	r2, [pc, #332]	; (800b128 <_strtod_l+0x960>)
 800afdc:	465b      	mov	r3, fp
 800afde:	2900      	cmp	r1, #0
 800afe0:	f000 8081 	beq.w	800b0e6 <_strtod_l+0x91e>
 800afe4:	ea02 010b 	and.w	r1, r2, fp
 800afe8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800afec:	dc7b      	bgt.n	800b0e6 <_strtod_l+0x91e>
 800afee:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800aff2:	f77f aea9 	ble.w	800ad48 <_strtod_l+0x580>
 800aff6:	4b4d      	ldr	r3, [pc, #308]	; (800b12c <_strtod_l+0x964>)
 800aff8:	4650      	mov	r0, sl
 800affa:	4659      	mov	r1, fp
 800affc:	2200      	movs	r2, #0
 800affe:	f7f5 fafb 	bl	80005f8 <__aeabi_dmul>
 800b002:	460b      	mov	r3, r1
 800b004:	4303      	orrs	r3, r0
 800b006:	bf08      	it	eq
 800b008:	2322      	moveq	r3, #34	; 0x22
 800b00a:	4682      	mov	sl, r0
 800b00c:	468b      	mov	fp, r1
 800b00e:	bf08      	it	eq
 800b010:	6023      	streq	r3, [r4, #0]
 800b012:	e62b      	b.n	800ac6c <_strtod_l+0x4a4>
 800b014:	f04f 32ff 	mov.w	r2, #4294967295
 800b018:	fa02 f303 	lsl.w	r3, r2, r3
 800b01c:	ea03 0a0a 	and.w	sl, r3, sl
 800b020:	e6e3      	b.n	800adea <_strtod_l+0x622>
 800b022:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800b026:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800b02a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800b02e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800b032:	fa01 f308 	lsl.w	r3, r1, r8
 800b036:	9308      	str	r3, [sp, #32]
 800b038:	910d      	str	r1, [sp, #52]	; 0x34
 800b03a:	e746      	b.n	800aeca <_strtod_l+0x702>
 800b03c:	2300      	movs	r3, #0
 800b03e:	9308      	str	r3, [sp, #32]
 800b040:	2301      	movs	r3, #1
 800b042:	930d      	str	r3, [sp, #52]	; 0x34
 800b044:	e741      	b.n	800aeca <_strtod_l+0x702>
 800b046:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b048:	4642      	mov	r2, r8
 800b04a:	4620      	mov	r0, r4
 800b04c:	f002 f98e 	bl	800d36c <__lshift>
 800b050:	9018      	str	r0, [sp, #96]	; 0x60
 800b052:	2800      	cmp	r0, #0
 800b054:	f47f af6b 	bne.w	800af2e <_strtod_l+0x766>
 800b058:	e5fe      	b.n	800ac58 <_strtod_l+0x490>
 800b05a:	465f      	mov	r7, fp
 800b05c:	d16e      	bne.n	800b13c <_strtod_l+0x974>
 800b05e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b060:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b064:	b342      	cbz	r2, 800b0b8 <_strtod_l+0x8f0>
 800b066:	4a32      	ldr	r2, [pc, #200]	; (800b130 <_strtod_l+0x968>)
 800b068:	4293      	cmp	r3, r2
 800b06a:	d128      	bne.n	800b0be <_strtod_l+0x8f6>
 800b06c:	9b04      	ldr	r3, [sp, #16]
 800b06e:	4651      	mov	r1, sl
 800b070:	b1eb      	cbz	r3, 800b0ae <_strtod_l+0x8e6>
 800b072:	4b2d      	ldr	r3, [pc, #180]	; (800b128 <_strtod_l+0x960>)
 800b074:	403b      	ands	r3, r7
 800b076:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b07a:	f04f 32ff 	mov.w	r2, #4294967295
 800b07e:	d819      	bhi.n	800b0b4 <_strtod_l+0x8ec>
 800b080:	0d1b      	lsrs	r3, r3, #20
 800b082:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b086:	fa02 f303 	lsl.w	r3, r2, r3
 800b08a:	4299      	cmp	r1, r3
 800b08c:	d117      	bne.n	800b0be <_strtod_l+0x8f6>
 800b08e:	4b29      	ldr	r3, [pc, #164]	; (800b134 <_strtod_l+0x96c>)
 800b090:	429f      	cmp	r7, r3
 800b092:	d102      	bne.n	800b09a <_strtod_l+0x8d2>
 800b094:	3101      	adds	r1, #1
 800b096:	f43f addf 	beq.w	800ac58 <_strtod_l+0x490>
 800b09a:	4b23      	ldr	r3, [pc, #140]	; (800b128 <_strtod_l+0x960>)
 800b09c:	403b      	ands	r3, r7
 800b09e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b0a2:	f04f 0a00 	mov.w	sl, #0
 800b0a6:	9b04      	ldr	r3, [sp, #16]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d1a4      	bne.n	800aff6 <_strtod_l+0x82e>
 800b0ac:	e5de      	b.n	800ac6c <_strtod_l+0x4a4>
 800b0ae:	f04f 33ff 	mov.w	r3, #4294967295
 800b0b2:	e7ea      	b.n	800b08a <_strtod_l+0x8c2>
 800b0b4:	4613      	mov	r3, r2
 800b0b6:	e7e8      	b.n	800b08a <_strtod_l+0x8c2>
 800b0b8:	ea53 030a 	orrs.w	r3, r3, sl
 800b0bc:	d08c      	beq.n	800afd8 <_strtod_l+0x810>
 800b0be:	9b08      	ldr	r3, [sp, #32]
 800b0c0:	b1db      	cbz	r3, 800b0fa <_strtod_l+0x932>
 800b0c2:	423b      	tst	r3, r7
 800b0c4:	d0ef      	beq.n	800b0a6 <_strtod_l+0x8de>
 800b0c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0c8:	9a04      	ldr	r2, [sp, #16]
 800b0ca:	4650      	mov	r0, sl
 800b0cc:	4659      	mov	r1, fp
 800b0ce:	b1c3      	cbz	r3, 800b102 <_strtod_l+0x93a>
 800b0d0:	f7ff fb5c 	bl	800a78c <sulp>
 800b0d4:	4602      	mov	r2, r0
 800b0d6:	460b      	mov	r3, r1
 800b0d8:	ec51 0b18 	vmov	r0, r1, d8
 800b0dc:	f7f5 f8d6 	bl	800028c <__adddf3>
 800b0e0:	4682      	mov	sl, r0
 800b0e2:	468b      	mov	fp, r1
 800b0e4:	e7df      	b.n	800b0a6 <_strtod_l+0x8de>
 800b0e6:	4013      	ands	r3, r2
 800b0e8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b0ec:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b0f0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b0f4:	f04f 3aff 	mov.w	sl, #4294967295
 800b0f8:	e7d5      	b.n	800b0a6 <_strtod_l+0x8de>
 800b0fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b0fc:	ea13 0f0a 	tst.w	r3, sl
 800b100:	e7e0      	b.n	800b0c4 <_strtod_l+0x8fc>
 800b102:	f7ff fb43 	bl	800a78c <sulp>
 800b106:	4602      	mov	r2, r0
 800b108:	460b      	mov	r3, r1
 800b10a:	ec51 0b18 	vmov	r0, r1, d8
 800b10e:	f7f5 f8bb 	bl	8000288 <__aeabi_dsub>
 800b112:	2200      	movs	r2, #0
 800b114:	2300      	movs	r3, #0
 800b116:	4682      	mov	sl, r0
 800b118:	468b      	mov	fp, r1
 800b11a:	f7f5 fcd5 	bl	8000ac8 <__aeabi_dcmpeq>
 800b11e:	2800      	cmp	r0, #0
 800b120:	d0c1      	beq.n	800b0a6 <_strtod_l+0x8de>
 800b122:	e611      	b.n	800ad48 <_strtod_l+0x580>
 800b124:	fffffc02 	.word	0xfffffc02
 800b128:	7ff00000 	.word	0x7ff00000
 800b12c:	39500000 	.word	0x39500000
 800b130:	000fffff 	.word	0x000fffff
 800b134:	7fefffff 	.word	0x7fefffff
 800b138:	0800e5e0 	.word	0x0800e5e0
 800b13c:	4631      	mov	r1, r6
 800b13e:	4628      	mov	r0, r5
 800b140:	f002 fb02 	bl	800d748 <__ratio>
 800b144:	ec59 8b10 	vmov	r8, r9, d0
 800b148:	ee10 0a10 	vmov	r0, s0
 800b14c:	2200      	movs	r2, #0
 800b14e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b152:	4649      	mov	r1, r9
 800b154:	f7f5 fccc 	bl	8000af0 <__aeabi_dcmple>
 800b158:	2800      	cmp	r0, #0
 800b15a:	d07a      	beq.n	800b252 <_strtod_l+0xa8a>
 800b15c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d04a      	beq.n	800b1f8 <_strtod_l+0xa30>
 800b162:	4b95      	ldr	r3, [pc, #596]	; (800b3b8 <_strtod_l+0xbf0>)
 800b164:	2200      	movs	r2, #0
 800b166:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b16a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800b3b8 <_strtod_l+0xbf0>
 800b16e:	f04f 0800 	mov.w	r8, #0
 800b172:	4b92      	ldr	r3, [pc, #584]	; (800b3bc <_strtod_l+0xbf4>)
 800b174:	403b      	ands	r3, r7
 800b176:	930d      	str	r3, [sp, #52]	; 0x34
 800b178:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b17a:	4b91      	ldr	r3, [pc, #580]	; (800b3c0 <_strtod_l+0xbf8>)
 800b17c:	429a      	cmp	r2, r3
 800b17e:	f040 80b0 	bne.w	800b2e2 <_strtod_l+0xb1a>
 800b182:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b186:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800b18a:	ec4b ab10 	vmov	d0, sl, fp
 800b18e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b192:	f002 fa01 	bl	800d598 <__ulp>
 800b196:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b19a:	ec53 2b10 	vmov	r2, r3, d0
 800b19e:	f7f5 fa2b 	bl	80005f8 <__aeabi_dmul>
 800b1a2:	4652      	mov	r2, sl
 800b1a4:	465b      	mov	r3, fp
 800b1a6:	f7f5 f871 	bl	800028c <__adddf3>
 800b1aa:	460b      	mov	r3, r1
 800b1ac:	4983      	ldr	r1, [pc, #524]	; (800b3bc <_strtod_l+0xbf4>)
 800b1ae:	4a85      	ldr	r2, [pc, #532]	; (800b3c4 <_strtod_l+0xbfc>)
 800b1b0:	4019      	ands	r1, r3
 800b1b2:	4291      	cmp	r1, r2
 800b1b4:	4682      	mov	sl, r0
 800b1b6:	d960      	bls.n	800b27a <_strtod_l+0xab2>
 800b1b8:	ee18 3a90 	vmov	r3, s17
 800b1bc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b1c0:	4293      	cmp	r3, r2
 800b1c2:	d104      	bne.n	800b1ce <_strtod_l+0xa06>
 800b1c4:	ee18 3a10 	vmov	r3, s16
 800b1c8:	3301      	adds	r3, #1
 800b1ca:	f43f ad45 	beq.w	800ac58 <_strtod_l+0x490>
 800b1ce:	f8df b200 	ldr.w	fp, [pc, #512]	; 800b3d0 <_strtod_l+0xc08>
 800b1d2:	f04f 3aff 	mov.w	sl, #4294967295
 800b1d6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b1d8:	4620      	mov	r0, r4
 800b1da:	f001 feab 	bl	800cf34 <_Bfree>
 800b1de:	9905      	ldr	r1, [sp, #20]
 800b1e0:	4620      	mov	r0, r4
 800b1e2:	f001 fea7 	bl	800cf34 <_Bfree>
 800b1e6:	4631      	mov	r1, r6
 800b1e8:	4620      	mov	r0, r4
 800b1ea:	f001 fea3 	bl	800cf34 <_Bfree>
 800b1ee:	4629      	mov	r1, r5
 800b1f0:	4620      	mov	r0, r4
 800b1f2:	f001 fe9f 	bl	800cf34 <_Bfree>
 800b1f6:	e61a      	b.n	800ae2e <_strtod_l+0x666>
 800b1f8:	f1ba 0f00 	cmp.w	sl, #0
 800b1fc:	d11b      	bne.n	800b236 <_strtod_l+0xa6e>
 800b1fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b202:	b9f3      	cbnz	r3, 800b242 <_strtod_l+0xa7a>
 800b204:	4b6c      	ldr	r3, [pc, #432]	; (800b3b8 <_strtod_l+0xbf0>)
 800b206:	2200      	movs	r2, #0
 800b208:	4640      	mov	r0, r8
 800b20a:	4649      	mov	r1, r9
 800b20c:	f7f5 fc66 	bl	8000adc <__aeabi_dcmplt>
 800b210:	b9d0      	cbnz	r0, 800b248 <_strtod_l+0xa80>
 800b212:	4640      	mov	r0, r8
 800b214:	4649      	mov	r1, r9
 800b216:	4b6c      	ldr	r3, [pc, #432]	; (800b3c8 <_strtod_l+0xc00>)
 800b218:	2200      	movs	r2, #0
 800b21a:	f7f5 f9ed 	bl	80005f8 <__aeabi_dmul>
 800b21e:	4680      	mov	r8, r0
 800b220:	4689      	mov	r9, r1
 800b222:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b226:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800b22a:	9315      	str	r3, [sp, #84]	; 0x54
 800b22c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b230:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b234:	e79d      	b.n	800b172 <_strtod_l+0x9aa>
 800b236:	f1ba 0f01 	cmp.w	sl, #1
 800b23a:	d102      	bne.n	800b242 <_strtod_l+0xa7a>
 800b23c:	2f00      	cmp	r7, #0
 800b23e:	f43f ad83 	beq.w	800ad48 <_strtod_l+0x580>
 800b242:	4b62      	ldr	r3, [pc, #392]	; (800b3cc <_strtod_l+0xc04>)
 800b244:	2200      	movs	r2, #0
 800b246:	e78e      	b.n	800b166 <_strtod_l+0x99e>
 800b248:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800b3c8 <_strtod_l+0xc00>
 800b24c:	f04f 0800 	mov.w	r8, #0
 800b250:	e7e7      	b.n	800b222 <_strtod_l+0xa5a>
 800b252:	4b5d      	ldr	r3, [pc, #372]	; (800b3c8 <_strtod_l+0xc00>)
 800b254:	4640      	mov	r0, r8
 800b256:	4649      	mov	r1, r9
 800b258:	2200      	movs	r2, #0
 800b25a:	f7f5 f9cd 	bl	80005f8 <__aeabi_dmul>
 800b25e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b260:	4680      	mov	r8, r0
 800b262:	4689      	mov	r9, r1
 800b264:	b933      	cbnz	r3, 800b274 <_strtod_l+0xaac>
 800b266:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b26a:	900e      	str	r0, [sp, #56]	; 0x38
 800b26c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b26e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b272:	e7dd      	b.n	800b230 <_strtod_l+0xa68>
 800b274:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800b278:	e7f9      	b.n	800b26e <_strtod_l+0xaa6>
 800b27a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b27e:	9b04      	ldr	r3, [sp, #16]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d1a8      	bne.n	800b1d6 <_strtod_l+0xa0e>
 800b284:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b288:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b28a:	0d1b      	lsrs	r3, r3, #20
 800b28c:	051b      	lsls	r3, r3, #20
 800b28e:	429a      	cmp	r2, r3
 800b290:	d1a1      	bne.n	800b1d6 <_strtod_l+0xa0e>
 800b292:	4640      	mov	r0, r8
 800b294:	4649      	mov	r1, r9
 800b296:	f7f5 fd0f 	bl	8000cb8 <__aeabi_d2lz>
 800b29a:	f7f5 f97f 	bl	800059c <__aeabi_l2d>
 800b29e:	4602      	mov	r2, r0
 800b2a0:	460b      	mov	r3, r1
 800b2a2:	4640      	mov	r0, r8
 800b2a4:	4649      	mov	r1, r9
 800b2a6:	f7f4 ffef 	bl	8000288 <__aeabi_dsub>
 800b2aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b2ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b2b0:	ea43 030a 	orr.w	r3, r3, sl
 800b2b4:	4313      	orrs	r3, r2
 800b2b6:	4680      	mov	r8, r0
 800b2b8:	4689      	mov	r9, r1
 800b2ba:	d055      	beq.n	800b368 <_strtod_l+0xba0>
 800b2bc:	a336      	add	r3, pc, #216	; (adr r3, 800b398 <_strtod_l+0xbd0>)
 800b2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2c2:	f7f5 fc0b 	bl	8000adc <__aeabi_dcmplt>
 800b2c6:	2800      	cmp	r0, #0
 800b2c8:	f47f acd0 	bne.w	800ac6c <_strtod_l+0x4a4>
 800b2cc:	a334      	add	r3, pc, #208	; (adr r3, 800b3a0 <_strtod_l+0xbd8>)
 800b2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2d2:	4640      	mov	r0, r8
 800b2d4:	4649      	mov	r1, r9
 800b2d6:	f7f5 fc1f 	bl	8000b18 <__aeabi_dcmpgt>
 800b2da:	2800      	cmp	r0, #0
 800b2dc:	f43f af7b 	beq.w	800b1d6 <_strtod_l+0xa0e>
 800b2e0:	e4c4      	b.n	800ac6c <_strtod_l+0x4a4>
 800b2e2:	9b04      	ldr	r3, [sp, #16]
 800b2e4:	b333      	cbz	r3, 800b334 <_strtod_l+0xb6c>
 800b2e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b2e8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b2ec:	d822      	bhi.n	800b334 <_strtod_l+0xb6c>
 800b2ee:	a32e      	add	r3, pc, #184	; (adr r3, 800b3a8 <_strtod_l+0xbe0>)
 800b2f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2f4:	4640      	mov	r0, r8
 800b2f6:	4649      	mov	r1, r9
 800b2f8:	f7f5 fbfa 	bl	8000af0 <__aeabi_dcmple>
 800b2fc:	b1a0      	cbz	r0, 800b328 <_strtod_l+0xb60>
 800b2fe:	4649      	mov	r1, r9
 800b300:	4640      	mov	r0, r8
 800b302:	f7f5 fc51 	bl	8000ba8 <__aeabi_d2uiz>
 800b306:	2801      	cmp	r0, #1
 800b308:	bf38      	it	cc
 800b30a:	2001      	movcc	r0, #1
 800b30c:	f7f5 f8fa 	bl	8000504 <__aeabi_ui2d>
 800b310:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b312:	4680      	mov	r8, r0
 800b314:	4689      	mov	r9, r1
 800b316:	bb23      	cbnz	r3, 800b362 <_strtod_l+0xb9a>
 800b318:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b31c:	9010      	str	r0, [sp, #64]	; 0x40
 800b31e:	9311      	str	r3, [sp, #68]	; 0x44
 800b320:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b324:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b328:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b32a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b32c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b330:	1a9b      	subs	r3, r3, r2
 800b332:	9309      	str	r3, [sp, #36]	; 0x24
 800b334:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b338:	eeb0 0a48 	vmov.f32	s0, s16
 800b33c:	eef0 0a68 	vmov.f32	s1, s17
 800b340:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b344:	f002 f928 	bl	800d598 <__ulp>
 800b348:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b34c:	ec53 2b10 	vmov	r2, r3, d0
 800b350:	f7f5 f952 	bl	80005f8 <__aeabi_dmul>
 800b354:	ec53 2b18 	vmov	r2, r3, d8
 800b358:	f7f4 ff98 	bl	800028c <__adddf3>
 800b35c:	4682      	mov	sl, r0
 800b35e:	468b      	mov	fp, r1
 800b360:	e78d      	b.n	800b27e <_strtod_l+0xab6>
 800b362:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800b366:	e7db      	b.n	800b320 <_strtod_l+0xb58>
 800b368:	a311      	add	r3, pc, #68	; (adr r3, 800b3b0 <_strtod_l+0xbe8>)
 800b36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b36e:	f7f5 fbb5 	bl	8000adc <__aeabi_dcmplt>
 800b372:	e7b2      	b.n	800b2da <_strtod_l+0xb12>
 800b374:	2300      	movs	r3, #0
 800b376:	930a      	str	r3, [sp, #40]	; 0x28
 800b378:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b37a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b37c:	6013      	str	r3, [r2, #0]
 800b37e:	f7ff ba6b 	b.w	800a858 <_strtod_l+0x90>
 800b382:	2a65      	cmp	r2, #101	; 0x65
 800b384:	f43f ab5f 	beq.w	800aa46 <_strtod_l+0x27e>
 800b388:	2a45      	cmp	r2, #69	; 0x45
 800b38a:	f43f ab5c 	beq.w	800aa46 <_strtod_l+0x27e>
 800b38e:	2301      	movs	r3, #1
 800b390:	f7ff bb94 	b.w	800aabc <_strtod_l+0x2f4>
 800b394:	f3af 8000 	nop.w
 800b398:	94a03595 	.word	0x94a03595
 800b39c:	3fdfffff 	.word	0x3fdfffff
 800b3a0:	35afe535 	.word	0x35afe535
 800b3a4:	3fe00000 	.word	0x3fe00000
 800b3a8:	ffc00000 	.word	0xffc00000
 800b3ac:	41dfffff 	.word	0x41dfffff
 800b3b0:	94a03595 	.word	0x94a03595
 800b3b4:	3fcfffff 	.word	0x3fcfffff
 800b3b8:	3ff00000 	.word	0x3ff00000
 800b3bc:	7ff00000 	.word	0x7ff00000
 800b3c0:	7fe00000 	.word	0x7fe00000
 800b3c4:	7c9fffff 	.word	0x7c9fffff
 800b3c8:	3fe00000 	.word	0x3fe00000
 800b3cc:	bff00000 	.word	0xbff00000
 800b3d0:	7fefffff 	.word	0x7fefffff

0800b3d4 <_strtod_r>:
 800b3d4:	4b01      	ldr	r3, [pc, #4]	; (800b3dc <_strtod_r+0x8>)
 800b3d6:	f7ff b9f7 	b.w	800a7c8 <_strtod_l>
 800b3da:	bf00      	nop
 800b3dc:	2000010c 	.word	0x2000010c

0800b3e0 <_strtol_l.constprop.0>:
 800b3e0:	2b01      	cmp	r3, #1
 800b3e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3e6:	d001      	beq.n	800b3ec <_strtol_l.constprop.0+0xc>
 800b3e8:	2b24      	cmp	r3, #36	; 0x24
 800b3ea:	d906      	bls.n	800b3fa <_strtol_l.constprop.0+0x1a>
 800b3ec:	f7fe fa60 	bl	80098b0 <__errno>
 800b3f0:	2316      	movs	r3, #22
 800b3f2:	6003      	str	r3, [r0, #0]
 800b3f4:	2000      	movs	r0, #0
 800b3f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3fa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b4e0 <_strtol_l.constprop.0+0x100>
 800b3fe:	460d      	mov	r5, r1
 800b400:	462e      	mov	r6, r5
 800b402:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b406:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b40a:	f017 0708 	ands.w	r7, r7, #8
 800b40e:	d1f7      	bne.n	800b400 <_strtol_l.constprop.0+0x20>
 800b410:	2c2d      	cmp	r4, #45	; 0x2d
 800b412:	d132      	bne.n	800b47a <_strtol_l.constprop.0+0x9a>
 800b414:	782c      	ldrb	r4, [r5, #0]
 800b416:	2701      	movs	r7, #1
 800b418:	1cb5      	adds	r5, r6, #2
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d05b      	beq.n	800b4d6 <_strtol_l.constprop.0+0xf6>
 800b41e:	2b10      	cmp	r3, #16
 800b420:	d109      	bne.n	800b436 <_strtol_l.constprop.0+0x56>
 800b422:	2c30      	cmp	r4, #48	; 0x30
 800b424:	d107      	bne.n	800b436 <_strtol_l.constprop.0+0x56>
 800b426:	782c      	ldrb	r4, [r5, #0]
 800b428:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b42c:	2c58      	cmp	r4, #88	; 0x58
 800b42e:	d14d      	bne.n	800b4cc <_strtol_l.constprop.0+0xec>
 800b430:	786c      	ldrb	r4, [r5, #1]
 800b432:	2310      	movs	r3, #16
 800b434:	3502      	adds	r5, #2
 800b436:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b43a:	f108 38ff 	add.w	r8, r8, #4294967295
 800b43e:	f04f 0c00 	mov.w	ip, #0
 800b442:	fbb8 f9f3 	udiv	r9, r8, r3
 800b446:	4666      	mov	r6, ip
 800b448:	fb03 8a19 	mls	sl, r3, r9, r8
 800b44c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b450:	f1be 0f09 	cmp.w	lr, #9
 800b454:	d816      	bhi.n	800b484 <_strtol_l.constprop.0+0xa4>
 800b456:	4674      	mov	r4, lr
 800b458:	42a3      	cmp	r3, r4
 800b45a:	dd24      	ble.n	800b4a6 <_strtol_l.constprop.0+0xc6>
 800b45c:	f1bc 0f00 	cmp.w	ip, #0
 800b460:	db1e      	blt.n	800b4a0 <_strtol_l.constprop.0+0xc0>
 800b462:	45b1      	cmp	r9, r6
 800b464:	d31c      	bcc.n	800b4a0 <_strtol_l.constprop.0+0xc0>
 800b466:	d101      	bne.n	800b46c <_strtol_l.constprop.0+0x8c>
 800b468:	45a2      	cmp	sl, r4
 800b46a:	db19      	blt.n	800b4a0 <_strtol_l.constprop.0+0xc0>
 800b46c:	fb06 4603 	mla	r6, r6, r3, r4
 800b470:	f04f 0c01 	mov.w	ip, #1
 800b474:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b478:	e7e8      	b.n	800b44c <_strtol_l.constprop.0+0x6c>
 800b47a:	2c2b      	cmp	r4, #43	; 0x2b
 800b47c:	bf04      	itt	eq
 800b47e:	782c      	ldrbeq	r4, [r5, #0]
 800b480:	1cb5      	addeq	r5, r6, #2
 800b482:	e7ca      	b.n	800b41a <_strtol_l.constprop.0+0x3a>
 800b484:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b488:	f1be 0f19 	cmp.w	lr, #25
 800b48c:	d801      	bhi.n	800b492 <_strtol_l.constprop.0+0xb2>
 800b48e:	3c37      	subs	r4, #55	; 0x37
 800b490:	e7e2      	b.n	800b458 <_strtol_l.constprop.0+0x78>
 800b492:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b496:	f1be 0f19 	cmp.w	lr, #25
 800b49a:	d804      	bhi.n	800b4a6 <_strtol_l.constprop.0+0xc6>
 800b49c:	3c57      	subs	r4, #87	; 0x57
 800b49e:	e7db      	b.n	800b458 <_strtol_l.constprop.0+0x78>
 800b4a0:	f04f 3cff 	mov.w	ip, #4294967295
 800b4a4:	e7e6      	b.n	800b474 <_strtol_l.constprop.0+0x94>
 800b4a6:	f1bc 0f00 	cmp.w	ip, #0
 800b4aa:	da05      	bge.n	800b4b8 <_strtol_l.constprop.0+0xd8>
 800b4ac:	2322      	movs	r3, #34	; 0x22
 800b4ae:	6003      	str	r3, [r0, #0]
 800b4b0:	4646      	mov	r6, r8
 800b4b2:	b942      	cbnz	r2, 800b4c6 <_strtol_l.constprop.0+0xe6>
 800b4b4:	4630      	mov	r0, r6
 800b4b6:	e79e      	b.n	800b3f6 <_strtol_l.constprop.0+0x16>
 800b4b8:	b107      	cbz	r7, 800b4bc <_strtol_l.constprop.0+0xdc>
 800b4ba:	4276      	negs	r6, r6
 800b4bc:	2a00      	cmp	r2, #0
 800b4be:	d0f9      	beq.n	800b4b4 <_strtol_l.constprop.0+0xd4>
 800b4c0:	f1bc 0f00 	cmp.w	ip, #0
 800b4c4:	d000      	beq.n	800b4c8 <_strtol_l.constprop.0+0xe8>
 800b4c6:	1e69      	subs	r1, r5, #1
 800b4c8:	6011      	str	r1, [r2, #0]
 800b4ca:	e7f3      	b.n	800b4b4 <_strtol_l.constprop.0+0xd4>
 800b4cc:	2430      	movs	r4, #48	; 0x30
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d1b1      	bne.n	800b436 <_strtol_l.constprop.0+0x56>
 800b4d2:	2308      	movs	r3, #8
 800b4d4:	e7af      	b.n	800b436 <_strtol_l.constprop.0+0x56>
 800b4d6:	2c30      	cmp	r4, #48	; 0x30
 800b4d8:	d0a5      	beq.n	800b426 <_strtol_l.constprop.0+0x46>
 800b4da:	230a      	movs	r3, #10
 800b4dc:	e7ab      	b.n	800b436 <_strtol_l.constprop.0+0x56>
 800b4de:	bf00      	nop
 800b4e0:	0800e609 	.word	0x0800e609

0800b4e4 <_strtol_r>:
 800b4e4:	f7ff bf7c 	b.w	800b3e0 <_strtol_l.constprop.0>

0800b4e8 <__swbuf_r>:
 800b4e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4ea:	460e      	mov	r6, r1
 800b4ec:	4614      	mov	r4, r2
 800b4ee:	4605      	mov	r5, r0
 800b4f0:	b118      	cbz	r0, 800b4fa <__swbuf_r+0x12>
 800b4f2:	6983      	ldr	r3, [r0, #24]
 800b4f4:	b90b      	cbnz	r3, 800b4fa <__swbuf_r+0x12>
 800b4f6:	f001 f84b 	bl	800c590 <__sinit>
 800b4fa:	4b21      	ldr	r3, [pc, #132]	; (800b580 <__swbuf_r+0x98>)
 800b4fc:	429c      	cmp	r4, r3
 800b4fe:	d12b      	bne.n	800b558 <__swbuf_r+0x70>
 800b500:	686c      	ldr	r4, [r5, #4]
 800b502:	69a3      	ldr	r3, [r4, #24]
 800b504:	60a3      	str	r3, [r4, #8]
 800b506:	89a3      	ldrh	r3, [r4, #12]
 800b508:	071a      	lsls	r2, r3, #28
 800b50a:	d52f      	bpl.n	800b56c <__swbuf_r+0x84>
 800b50c:	6923      	ldr	r3, [r4, #16]
 800b50e:	b36b      	cbz	r3, 800b56c <__swbuf_r+0x84>
 800b510:	6923      	ldr	r3, [r4, #16]
 800b512:	6820      	ldr	r0, [r4, #0]
 800b514:	1ac0      	subs	r0, r0, r3
 800b516:	6963      	ldr	r3, [r4, #20]
 800b518:	b2f6      	uxtb	r6, r6
 800b51a:	4283      	cmp	r3, r0
 800b51c:	4637      	mov	r7, r6
 800b51e:	dc04      	bgt.n	800b52a <__swbuf_r+0x42>
 800b520:	4621      	mov	r1, r4
 800b522:	4628      	mov	r0, r5
 800b524:	f000 ffa0 	bl	800c468 <_fflush_r>
 800b528:	bb30      	cbnz	r0, 800b578 <__swbuf_r+0x90>
 800b52a:	68a3      	ldr	r3, [r4, #8]
 800b52c:	3b01      	subs	r3, #1
 800b52e:	60a3      	str	r3, [r4, #8]
 800b530:	6823      	ldr	r3, [r4, #0]
 800b532:	1c5a      	adds	r2, r3, #1
 800b534:	6022      	str	r2, [r4, #0]
 800b536:	701e      	strb	r6, [r3, #0]
 800b538:	6963      	ldr	r3, [r4, #20]
 800b53a:	3001      	adds	r0, #1
 800b53c:	4283      	cmp	r3, r0
 800b53e:	d004      	beq.n	800b54a <__swbuf_r+0x62>
 800b540:	89a3      	ldrh	r3, [r4, #12]
 800b542:	07db      	lsls	r3, r3, #31
 800b544:	d506      	bpl.n	800b554 <__swbuf_r+0x6c>
 800b546:	2e0a      	cmp	r6, #10
 800b548:	d104      	bne.n	800b554 <__swbuf_r+0x6c>
 800b54a:	4621      	mov	r1, r4
 800b54c:	4628      	mov	r0, r5
 800b54e:	f000 ff8b 	bl	800c468 <_fflush_r>
 800b552:	b988      	cbnz	r0, 800b578 <__swbuf_r+0x90>
 800b554:	4638      	mov	r0, r7
 800b556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b558:	4b0a      	ldr	r3, [pc, #40]	; (800b584 <__swbuf_r+0x9c>)
 800b55a:	429c      	cmp	r4, r3
 800b55c:	d101      	bne.n	800b562 <__swbuf_r+0x7a>
 800b55e:	68ac      	ldr	r4, [r5, #8]
 800b560:	e7cf      	b.n	800b502 <__swbuf_r+0x1a>
 800b562:	4b09      	ldr	r3, [pc, #36]	; (800b588 <__swbuf_r+0xa0>)
 800b564:	429c      	cmp	r4, r3
 800b566:	bf08      	it	eq
 800b568:	68ec      	ldreq	r4, [r5, #12]
 800b56a:	e7ca      	b.n	800b502 <__swbuf_r+0x1a>
 800b56c:	4621      	mov	r1, r4
 800b56e:	4628      	mov	r0, r5
 800b570:	f000 f80c 	bl	800b58c <__swsetup_r>
 800b574:	2800      	cmp	r0, #0
 800b576:	d0cb      	beq.n	800b510 <__swbuf_r+0x28>
 800b578:	f04f 37ff 	mov.w	r7, #4294967295
 800b57c:	e7ea      	b.n	800b554 <__swbuf_r+0x6c>
 800b57e:	bf00      	nop
 800b580:	0800e7bc 	.word	0x0800e7bc
 800b584:	0800e7dc 	.word	0x0800e7dc
 800b588:	0800e79c 	.word	0x0800e79c

0800b58c <__swsetup_r>:
 800b58c:	4b32      	ldr	r3, [pc, #200]	; (800b658 <__swsetup_r+0xcc>)
 800b58e:	b570      	push	{r4, r5, r6, lr}
 800b590:	681d      	ldr	r5, [r3, #0]
 800b592:	4606      	mov	r6, r0
 800b594:	460c      	mov	r4, r1
 800b596:	b125      	cbz	r5, 800b5a2 <__swsetup_r+0x16>
 800b598:	69ab      	ldr	r3, [r5, #24]
 800b59a:	b913      	cbnz	r3, 800b5a2 <__swsetup_r+0x16>
 800b59c:	4628      	mov	r0, r5
 800b59e:	f000 fff7 	bl	800c590 <__sinit>
 800b5a2:	4b2e      	ldr	r3, [pc, #184]	; (800b65c <__swsetup_r+0xd0>)
 800b5a4:	429c      	cmp	r4, r3
 800b5a6:	d10f      	bne.n	800b5c8 <__swsetup_r+0x3c>
 800b5a8:	686c      	ldr	r4, [r5, #4]
 800b5aa:	89a3      	ldrh	r3, [r4, #12]
 800b5ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b5b0:	0719      	lsls	r1, r3, #28
 800b5b2:	d42c      	bmi.n	800b60e <__swsetup_r+0x82>
 800b5b4:	06dd      	lsls	r5, r3, #27
 800b5b6:	d411      	bmi.n	800b5dc <__swsetup_r+0x50>
 800b5b8:	2309      	movs	r3, #9
 800b5ba:	6033      	str	r3, [r6, #0]
 800b5bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b5c0:	81a3      	strh	r3, [r4, #12]
 800b5c2:	f04f 30ff 	mov.w	r0, #4294967295
 800b5c6:	e03e      	b.n	800b646 <__swsetup_r+0xba>
 800b5c8:	4b25      	ldr	r3, [pc, #148]	; (800b660 <__swsetup_r+0xd4>)
 800b5ca:	429c      	cmp	r4, r3
 800b5cc:	d101      	bne.n	800b5d2 <__swsetup_r+0x46>
 800b5ce:	68ac      	ldr	r4, [r5, #8]
 800b5d0:	e7eb      	b.n	800b5aa <__swsetup_r+0x1e>
 800b5d2:	4b24      	ldr	r3, [pc, #144]	; (800b664 <__swsetup_r+0xd8>)
 800b5d4:	429c      	cmp	r4, r3
 800b5d6:	bf08      	it	eq
 800b5d8:	68ec      	ldreq	r4, [r5, #12]
 800b5da:	e7e6      	b.n	800b5aa <__swsetup_r+0x1e>
 800b5dc:	0758      	lsls	r0, r3, #29
 800b5de:	d512      	bpl.n	800b606 <__swsetup_r+0x7a>
 800b5e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b5e2:	b141      	cbz	r1, 800b5f6 <__swsetup_r+0x6a>
 800b5e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b5e8:	4299      	cmp	r1, r3
 800b5ea:	d002      	beq.n	800b5f2 <__swsetup_r+0x66>
 800b5ec:	4630      	mov	r0, r6
 800b5ee:	f002 f939 	bl	800d864 <_free_r>
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	6363      	str	r3, [r4, #52]	; 0x34
 800b5f6:	89a3      	ldrh	r3, [r4, #12]
 800b5f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b5fc:	81a3      	strh	r3, [r4, #12]
 800b5fe:	2300      	movs	r3, #0
 800b600:	6063      	str	r3, [r4, #4]
 800b602:	6923      	ldr	r3, [r4, #16]
 800b604:	6023      	str	r3, [r4, #0]
 800b606:	89a3      	ldrh	r3, [r4, #12]
 800b608:	f043 0308 	orr.w	r3, r3, #8
 800b60c:	81a3      	strh	r3, [r4, #12]
 800b60e:	6923      	ldr	r3, [r4, #16]
 800b610:	b94b      	cbnz	r3, 800b626 <__swsetup_r+0x9a>
 800b612:	89a3      	ldrh	r3, [r4, #12]
 800b614:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b618:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b61c:	d003      	beq.n	800b626 <__swsetup_r+0x9a>
 800b61e:	4621      	mov	r1, r4
 800b620:	4630      	mov	r0, r6
 800b622:	f001 fbed 	bl	800ce00 <__smakebuf_r>
 800b626:	89a0      	ldrh	r0, [r4, #12]
 800b628:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b62c:	f010 0301 	ands.w	r3, r0, #1
 800b630:	d00a      	beq.n	800b648 <__swsetup_r+0xbc>
 800b632:	2300      	movs	r3, #0
 800b634:	60a3      	str	r3, [r4, #8]
 800b636:	6963      	ldr	r3, [r4, #20]
 800b638:	425b      	negs	r3, r3
 800b63a:	61a3      	str	r3, [r4, #24]
 800b63c:	6923      	ldr	r3, [r4, #16]
 800b63e:	b943      	cbnz	r3, 800b652 <__swsetup_r+0xc6>
 800b640:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b644:	d1ba      	bne.n	800b5bc <__swsetup_r+0x30>
 800b646:	bd70      	pop	{r4, r5, r6, pc}
 800b648:	0781      	lsls	r1, r0, #30
 800b64a:	bf58      	it	pl
 800b64c:	6963      	ldrpl	r3, [r4, #20]
 800b64e:	60a3      	str	r3, [r4, #8]
 800b650:	e7f4      	b.n	800b63c <__swsetup_r+0xb0>
 800b652:	2000      	movs	r0, #0
 800b654:	e7f7      	b.n	800b646 <__swsetup_r+0xba>
 800b656:	bf00      	nop
 800b658:	200000a4 	.word	0x200000a4
 800b65c:	0800e7bc 	.word	0x0800e7bc
 800b660:	0800e7dc 	.word	0x0800e7dc
 800b664:	0800e79c 	.word	0x0800e79c

0800b668 <quorem>:
 800b668:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b66c:	6903      	ldr	r3, [r0, #16]
 800b66e:	690c      	ldr	r4, [r1, #16]
 800b670:	42a3      	cmp	r3, r4
 800b672:	4607      	mov	r7, r0
 800b674:	f2c0 8081 	blt.w	800b77a <quorem+0x112>
 800b678:	3c01      	subs	r4, #1
 800b67a:	f101 0814 	add.w	r8, r1, #20
 800b67e:	f100 0514 	add.w	r5, r0, #20
 800b682:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b686:	9301      	str	r3, [sp, #4]
 800b688:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b68c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b690:	3301      	adds	r3, #1
 800b692:	429a      	cmp	r2, r3
 800b694:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b698:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b69c:	fbb2 f6f3 	udiv	r6, r2, r3
 800b6a0:	d331      	bcc.n	800b706 <quorem+0x9e>
 800b6a2:	f04f 0e00 	mov.w	lr, #0
 800b6a6:	4640      	mov	r0, r8
 800b6a8:	46ac      	mov	ip, r5
 800b6aa:	46f2      	mov	sl, lr
 800b6ac:	f850 2b04 	ldr.w	r2, [r0], #4
 800b6b0:	b293      	uxth	r3, r2
 800b6b2:	fb06 e303 	mla	r3, r6, r3, lr
 800b6b6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b6ba:	b29b      	uxth	r3, r3
 800b6bc:	ebaa 0303 	sub.w	r3, sl, r3
 800b6c0:	f8dc a000 	ldr.w	sl, [ip]
 800b6c4:	0c12      	lsrs	r2, r2, #16
 800b6c6:	fa13 f38a 	uxtah	r3, r3, sl
 800b6ca:	fb06 e202 	mla	r2, r6, r2, lr
 800b6ce:	9300      	str	r3, [sp, #0]
 800b6d0:	9b00      	ldr	r3, [sp, #0]
 800b6d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b6d6:	b292      	uxth	r2, r2
 800b6d8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b6dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b6e0:	f8bd 3000 	ldrh.w	r3, [sp]
 800b6e4:	4581      	cmp	r9, r0
 800b6e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b6ea:	f84c 3b04 	str.w	r3, [ip], #4
 800b6ee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b6f2:	d2db      	bcs.n	800b6ac <quorem+0x44>
 800b6f4:	f855 300b 	ldr.w	r3, [r5, fp]
 800b6f8:	b92b      	cbnz	r3, 800b706 <quorem+0x9e>
 800b6fa:	9b01      	ldr	r3, [sp, #4]
 800b6fc:	3b04      	subs	r3, #4
 800b6fe:	429d      	cmp	r5, r3
 800b700:	461a      	mov	r2, r3
 800b702:	d32e      	bcc.n	800b762 <quorem+0xfa>
 800b704:	613c      	str	r4, [r7, #16]
 800b706:	4638      	mov	r0, r7
 800b708:	f001 fea0 	bl	800d44c <__mcmp>
 800b70c:	2800      	cmp	r0, #0
 800b70e:	db24      	blt.n	800b75a <quorem+0xf2>
 800b710:	3601      	adds	r6, #1
 800b712:	4628      	mov	r0, r5
 800b714:	f04f 0c00 	mov.w	ip, #0
 800b718:	f858 2b04 	ldr.w	r2, [r8], #4
 800b71c:	f8d0 e000 	ldr.w	lr, [r0]
 800b720:	b293      	uxth	r3, r2
 800b722:	ebac 0303 	sub.w	r3, ip, r3
 800b726:	0c12      	lsrs	r2, r2, #16
 800b728:	fa13 f38e 	uxtah	r3, r3, lr
 800b72c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b730:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b734:	b29b      	uxth	r3, r3
 800b736:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b73a:	45c1      	cmp	r9, r8
 800b73c:	f840 3b04 	str.w	r3, [r0], #4
 800b740:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b744:	d2e8      	bcs.n	800b718 <quorem+0xb0>
 800b746:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b74a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b74e:	b922      	cbnz	r2, 800b75a <quorem+0xf2>
 800b750:	3b04      	subs	r3, #4
 800b752:	429d      	cmp	r5, r3
 800b754:	461a      	mov	r2, r3
 800b756:	d30a      	bcc.n	800b76e <quorem+0x106>
 800b758:	613c      	str	r4, [r7, #16]
 800b75a:	4630      	mov	r0, r6
 800b75c:	b003      	add	sp, #12
 800b75e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b762:	6812      	ldr	r2, [r2, #0]
 800b764:	3b04      	subs	r3, #4
 800b766:	2a00      	cmp	r2, #0
 800b768:	d1cc      	bne.n	800b704 <quorem+0x9c>
 800b76a:	3c01      	subs	r4, #1
 800b76c:	e7c7      	b.n	800b6fe <quorem+0x96>
 800b76e:	6812      	ldr	r2, [r2, #0]
 800b770:	3b04      	subs	r3, #4
 800b772:	2a00      	cmp	r2, #0
 800b774:	d1f0      	bne.n	800b758 <quorem+0xf0>
 800b776:	3c01      	subs	r4, #1
 800b778:	e7eb      	b.n	800b752 <quorem+0xea>
 800b77a:	2000      	movs	r0, #0
 800b77c:	e7ee      	b.n	800b75c <quorem+0xf4>
	...

0800b780 <_dtoa_r>:
 800b780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b784:	ed2d 8b04 	vpush	{d8-d9}
 800b788:	ec57 6b10 	vmov	r6, r7, d0
 800b78c:	b093      	sub	sp, #76	; 0x4c
 800b78e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b790:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b794:	9106      	str	r1, [sp, #24]
 800b796:	ee10 aa10 	vmov	sl, s0
 800b79a:	4604      	mov	r4, r0
 800b79c:	9209      	str	r2, [sp, #36]	; 0x24
 800b79e:	930c      	str	r3, [sp, #48]	; 0x30
 800b7a0:	46bb      	mov	fp, r7
 800b7a2:	b975      	cbnz	r5, 800b7c2 <_dtoa_r+0x42>
 800b7a4:	2010      	movs	r0, #16
 800b7a6:	f001 fb6b 	bl	800ce80 <malloc>
 800b7aa:	4602      	mov	r2, r0
 800b7ac:	6260      	str	r0, [r4, #36]	; 0x24
 800b7ae:	b920      	cbnz	r0, 800b7ba <_dtoa_r+0x3a>
 800b7b0:	4ba7      	ldr	r3, [pc, #668]	; (800ba50 <_dtoa_r+0x2d0>)
 800b7b2:	21ea      	movs	r1, #234	; 0xea
 800b7b4:	48a7      	ldr	r0, [pc, #668]	; (800ba54 <_dtoa_r+0x2d4>)
 800b7b6:	f002 fc79 	bl	800e0ac <__assert_func>
 800b7ba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b7be:	6005      	str	r5, [r0, #0]
 800b7c0:	60c5      	str	r5, [r0, #12]
 800b7c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b7c4:	6819      	ldr	r1, [r3, #0]
 800b7c6:	b151      	cbz	r1, 800b7de <_dtoa_r+0x5e>
 800b7c8:	685a      	ldr	r2, [r3, #4]
 800b7ca:	604a      	str	r2, [r1, #4]
 800b7cc:	2301      	movs	r3, #1
 800b7ce:	4093      	lsls	r3, r2
 800b7d0:	608b      	str	r3, [r1, #8]
 800b7d2:	4620      	mov	r0, r4
 800b7d4:	f001 fbae 	bl	800cf34 <_Bfree>
 800b7d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b7da:	2200      	movs	r2, #0
 800b7dc:	601a      	str	r2, [r3, #0]
 800b7de:	1e3b      	subs	r3, r7, #0
 800b7e0:	bfaa      	itet	ge
 800b7e2:	2300      	movge	r3, #0
 800b7e4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b7e8:	f8c8 3000 	strge.w	r3, [r8]
 800b7ec:	4b9a      	ldr	r3, [pc, #616]	; (800ba58 <_dtoa_r+0x2d8>)
 800b7ee:	bfbc      	itt	lt
 800b7f0:	2201      	movlt	r2, #1
 800b7f2:	f8c8 2000 	strlt.w	r2, [r8]
 800b7f6:	ea33 030b 	bics.w	r3, r3, fp
 800b7fa:	d11b      	bne.n	800b834 <_dtoa_r+0xb4>
 800b7fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b7fe:	f242 730f 	movw	r3, #9999	; 0x270f
 800b802:	6013      	str	r3, [r2, #0]
 800b804:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b808:	4333      	orrs	r3, r6
 800b80a:	f000 8592 	beq.w	800c332 <_dtoa_r+0xbb2>
 800b80e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b810:	b963      	cbnz	r3, 800b82c <_dtoa_r+0xac>
 800b812:	4b92      	ldr	r3, [pc, #584]	; (800ba5c <_dtoa_r+0x2dc>)
 800b814:	e022      	b.n	800b85c <_dtoa_r+0xdc>
 800b816:	4b92      	ldr	r3, [pc, #584]	; (800ba60 <_dtoa_r+0x2e0>)
 800b818:	9301      	str	r3, [sp, #4]
 800b81a:	3308      	adds	r3, #8
 800b81c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b81e:	6013      	str	r3, [r2, #0]
 800b820:	9801      	ldr	r0, [sp, #4]
 800b822:	b013      	add	sp, #76	; 0x4c
 800b824:	ecbd 8b04 	vpop	{d8-d9}
 800b828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b82c:	4b8b      	ldr	r3, [pc, #556]	; (800ba5c <_dtoa_r+0x2dc>)
 800b82e:	9301      	str	r3, [sp, #4]
 800b830:	3303      	adds	r3, #3
 800b832:	e7f3      	b.n	800b81c <_dtoa_r+0x9c>
 800b834:	2200      	movs	r2, #0
 800b836:	2300      	movs	r3, #0
 800b838:	4650      	mov	r0, sl
 800b83a:	4659      	mov	r1, fp
 800b83c:	f7f5 f944 	bl	8000ac8 <__aeabi_dcmpeq>
 800b840:	ec4b ab19 	vmov	d9, sl, fp
 800b844:	4680      	mov	r8, r0
 800b846:	b158      	cbz	r0, 800b860 <_dtoa_r+0xe0>
 800b848:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b84a:	2301      	movs	r3, #1
 800b84c:	6013      	str	r3, [r2, #0]
 800b84e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b850:	2b00      	cmp	r3, #0
 800b852:	f000 856b 	beq.w	800c32c <_dtoa_r+0xbac>
 800b856:	4883      	ldr	r0, [pc, #524]	; (800ba64 <_dtoa_r+0x2e4>)
 800b858:	6018      	str	r0, [r3, #0]
 800b85a:	1e43      	subs	r3, r0, #1
 800b85c:	9301      	str	r3, [sp, #4]
 800b85e:	e7df      	b.n	800b820 <_dtoa_r+0xa0>
 800b860:	ec4b ab10 	vmov	d0, sl, fp
 800b864:	aa10      	add	r2, sp, #64	; 0x40
 800b866:	a911      	add	r1, sp, #68	; 0x44
 800b868:	4620      	mov	r0, r4
 800b86a:	f001 ff11 	bl	800d690 <__d2b>
 800b86e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b872:	ee08 0a10 	vmov	s16, r0
 800b876:	2d00      	cmp	r5, #0
 800b878:	f000 8084 	beq.w	800b984 <_dtoa_r+0x204>
 800b87c:	ee19 3a90 	vmov	r3, s19
 800b880:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b884:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b888:	4656      	mov	r6, sl
 800b88a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b88e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b892:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b896:	4b74      	ldr	r3, [pc, #464]	; (800ba68 <_dtoa_r+0x2e8>)
 800b898:	2200      	movs	r2, #0
 800b89a:	4630      	mov	r0, r6
 800b89c:	4639      	mov	r1, r7
 800b89e:	f7f4 fcf3 	bl	8000288 <__aeabi_dsub>
 800b8a2:	a365      	add	r3, pc, #404	; (adr r3, 800ba38 <_dtoa_r+0x2b8>)
 800b8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8a8:	f7f4 fea6 	bl	80005f8 <__aeabi_dmul>
 800b8ac:	a364      	add	r3, pc, #400	; (adr r3, 800ba40 <_dtoa_r+0x2c0>)
 800b8ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8b2:	f7f4 fceb 	bl	800028c <__adddf3>
 800b8b6:	4606      	mov	r6, r0
 800b8b8:	4628      	mov	r0, r5
 800b8ba:	460f      	mov	r7, r1
 800b8bc:	f7f4 fe32 	bl	8000524 <__aeabi_i2d>
 800b8c0:	a361      	add	r3, pc, #388	; (adr r3, 800ba48 <_dtoa_r+0x2c8>)
 800b8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8c6:	f7f4 fe97 	bl	80005f8 <__aeabi_dmul>
 800b8ca:	4602      	mov	r2, r0
 800b8cc:	460b      	mov	r3, r1
 800b8ce:	4630      	mov	r0, r6
 800b8d0:	4639      	mov	r1, r7
 800b8d2:	f7f4 fcdb 	bl	800028c <__adddf3>
 800b8d6:	4606      	mov	r6, r0
 800b8d8:	460f      	mov	r7, r1
 800b8da:	f7f5 f93d 	bl	8000b58 <__aeabi_d2iz>
 800b8de:	2200      	movs	r2, #0
 800b8e0:	9000      	str	r0, [sp, #0]
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	4630      	mov	r0, r6
 800b8e6:	4639      	mov	r1, r7
 800b8e8:	f7f5 f8f8 	bl	8000adc <__aeabi_dcmplt>
 800b8ec:	b150      	cbz	r0, 800b904 <_dtoa_r+0x184>
 800b8ee:	9800      	ldr	r0, [sp, #0]
 800b8f0:	f7f4 fe18 	bl	8000524 <__aeabi_i2d>
 800b8f4:	4632      	mov	r2, r6
 800b8f6:	463b      	mov	r3, r7
 800b8f8:	f7f5 f8e6 	bl	8000ac8 <__aeabi_dcmpeq>
 800b8fc:	b910      	cbnz	r0, 800b904 <_dtoa_r+0x184>
 800b8fe:	9b00      	ldr	r3, [sp, #0]
 800b900:	3b01      	subs	r3, #1
 800b902:	9300      	str	r3, [sp, #0]
 800b904:	9b00      	ldr	r3, [sp, #0]
 800b906:	2b16      	cmp	r3, #22
 800b908:	d85a      	bhi.n	800b9c0 <_dtoa_r+0x240>
 800b90a:	9a00      	ldr	r2, [sp, #0]
 800b90c:	4b57      	ldr	r3, [pc, #348]	; (800ba6c <_dtoa_r+0x2ec>)
 800b90e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b912:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b916:	ec51 0b19 	vmov	r0, r1, d9
 800b91a:	f7f5 f8df 	bl	8000adc <__aeabi_dcmplt>
 800b91e:	2800      	cmp	r0, #0
 800b920:	d050      	beq.n	800b9c4 <_dtoa_r+0x244>
 800b922:	9b00      	ldr	r3, [sp, #0]
 800b924:	3b01      	subs	r3, #1
 800b926:	9300      	str	r3, [sp, #0]
 800b928:	2300      	movs	r3, #0
 800b92a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b92c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b92e:	1b5d      	subs	r5, r3, r5
 800b930:	1e6b      	subs	r3, r5, #1
 800b932:	9305      	str	r3, [sp, #20]
 800b934:	bf45      	ittet	mi
 800b936:	f1c5 0301 	rsbmi	r3, r5, #1
 800b93a:	9304      	strmi	r3, [sp, #16]
 800b93c:	2300      	movpl	r3, #0
 800b93e:	2300      	movmi	r3, #0
 800b940:	bf4c      	ite	mi
 800b942:	9305      	strmi	r3, [sp, #20]
 800b944:	9304      	strpl	r3, [sp, #16]
 800b946:	9b00      	ldr	r3, [sp, #0]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	db3d      	blt.n	800b9c8 <_dtoa_r+0x248>
 800b94c:	9b05      	ldr	r3, [sp, #20]
 800b94e:	9a00      	ldr	r2, [sp, #0]
 800b950:	920a      	str	r2, [sp, #40]	; 0x28
 800b952:	4413      	add	r3, r2
 800b954:	9305      	str	r3, [sp, #20]
 800b956:	2300      	movs	r3, #0
 800b958:	9307      	str	r3, [sp, #28]
 800b95a:	9b06      	ldr	r3, [sp, #24]
 800b95c:	2b09      	cmp	r3, #9
 800b95e:	f200 8089 	bhi.w	800ba74 <_dtoa_r+0x2f4>
 800b962:	2b05      	cmp	r3, #5
 800b964:	bfc4      	itt	gt
 800b966:	3b04      	subgt	r3, #4
 800b968:	9306      	strgt	r3, [sp, #24]
 800b96a:	9b06      	ldr	r3, [sp, #24]
 800b96c:	f1a3 0302 	sub.w	r3, r3, #2
 800b970:	bfcc      	ite	gt
 800b972:	2500      	movgt	r5, #0
 800b974:	2501      	movle	r5, #1
 800b976:	2b03      	cmp	r3, #3
 800b978:	f200 8087 	bhi.w	800ba8a <_dtoa_r+0x30a>
 800b97c:	e8df f003 	tbb	[pc, r3]
 800b980:	59383a2d 	.word	0x59383a2d
 800b984:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b988:	441d      	add	r5, r3
 800b98a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b98e:	2b20      	cmp	r3, #32
 800b990:	bfc1      	itttt	gt
 800b992:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b996:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b99a:	fa0b f303 	lslgt.w	r3, fp, r3
 800b99e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b9a2:	bfda      	itte	le
 800b9a4:	f1c3 0320 	rsble	r3, r3, #32
 800b9a8:	fa06 f003 	lslle.w	r0, r6, r3
 800b9ac:	4318      	orrgt	r0, r3
 800b9ae:	f7f4 fda9 	bl	8000504 <__aeabi_ui2d>
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	4606      	mov	r6, r0
 800b9b6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b9ba:	3d01      	subs	r5, #1
 800b9bc:	930e      	str	r3, [sp, #56]	; 0x38
 800b9be:	e76a      	b.n	800b896 <_dtoa_r+0x116>
 800b9c0:	2301      	movs	r3, #1
 800b9c2:	e7b2      	b.n	800b92a <_dtoa_r+0x1aa>
 800b9c4:	900b      	str	r0, [sp, #44]	; 0x2c
 800b9c6:	e7b1      	b.n	800b92c <_dtoa_r+0x1ac>
 800b9c8:	9b04      	ldr	r3, [sp, #16]
 800b9ca:	9a00      	ldr	r2, [sp, #0]
 800b9cc:	1a9b      	subs	r3, r3, r2
 800b9ce:	9304      	str	r3, [sp, #16]
 800b9d0:	4253      	negs	r3, r2
 800b9d2:	9307      	str	r3, [sp, #28]
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	930a      	str	r3, [sp, #40]	; 0x28
 800b9d8:	e7bf      	b.n	800b95a <_dtoa_r+0x1da>
 800b9da:	2300      	movs	r3, #0
 800b9dc:	9308      	str	r3, [sp, #32]
 800b9de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	dc55      	bgt.n	800ba90 <_dtoa_r+0x310>
 800b9e4:	2301      	movs	r3, #1
 800b9e6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b9ea:	461a      	mov	r2, r3
 800b9ec:	9209      	str	r2, [sp, #36]	; 0x24
 800b9ee:	e00c      	b.n	800ba0a <_dtoa_r+0x28a>
 800b9f0:	2301      	movs	r3, #1
 800b9f2:	e7f3      	b.n	800b9dc <_dtoa_r+0x25c>
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b9f8:	9308      	str	r3, [sp, #32]
 800b9fa:	9b00      	ldr	r3, [sp, #0]
 800b9fc:	4413      	add	r3, r2
 800b9fe:	9302      	str	r3, [sp, #8]
 800ba00:	3301      	adds	r3, #1
 800ba02:	2b01      	cmp	r3, #1
 800ba04:	9303      	str	r3, [sp, #12]
 800ba06:	bfb8      	it	lt
 800ba08:	2301      	movlt	r3, #1
 800ba0a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	6042      	str	r2, [r0, #4]
 800ba10:	2204      	movs	r2, #4
 800ba12:	f102 0614 	add.w	r6, r2, #20
 800ba16:	429e      	cmp	r6, r3
 800ba18:	6841      	ldr	r1, [r0, #4]
 800ba1a:	d93d      	bls.n	800ba98 <_dtoa_r+0x318>
 800ba1c:	4620      	mov	r0, r4
 800ba1e:	f001 fa49 	bl	800ceb4 <_Balloc>
 800ba22:	9001      	str	r0, [sp, #4]
 800ba24:	2800      	cmp	r0, #0
 800ba26:	d13b      	bne.n	800baa0 <_dtoa_r+0x320>
 800ba28:	4b11      	ldr	r3, [pc, #68]	; (800ba70 <_dtoa_r+0x2f0>)
 800ba2a:	4602      	mov	r2, r0
 800ba2c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ba30:	e6c0      	b.n	800b7b4 <_dtoa_r+0x34>
 800ba32:	2301      	movs	r3, #1
 800ba34:	e7df      	b.n	800b9f6 <_dtoa_r+0x276>
 800ba36:	bf00      	nop
 800ba38:	636f4361 	.word	0x636f4361
 800ba3c:	3fd287a7 	.word	0x3fd287a7
 800ba40:	8b60c8b3 	.word	0x8b60c8b3
 800ba44:	3fc68a28 	.word	0x3fc68a28
 800ba48:	509f79fb 	.word	0x509f79fb
 800ba4c:	3fd34413 	.word	0x3fd34413
 800ba50:	0800e716 	.word	0x0800e716
 800ba54:	0800e72d 	.word	0x0800e72d
 800ba58:	7ff00000 	.word	0x7ff00000
 800ba5c:	0800e712 	.word	0x0800e712
 800ba60:	0800e709 	.word	0x0800e709
 800ba64:	0800e58d 	.word	0x0800e58d
 800ba68:	3ff80000 	.word	0x3ff80000
 800ba6c:	0800e900 	.word	0x0800e900
 800ba70:	0800e788 	.word	0x0800e788
 800ba74:	2501      	movs	r5, #1
 800ba76:	2300      	movs	r3, #0
 800ba78:	9306      	str	r3, [sp, #24]
 800ba7a:	9508      	str	r5, [sp, #32]
 800ba7c:	f04f 33ff 	mov.w	r3, #4294967295
 800ba80:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ba84:	2200      	movs	r2, #0
 800ba86:	2312      	movs	r3, #18
 800ba88:	e7b0      	b.n	800b9ec <_dtoa_r+0x26c>
 800ba8a:	2301      	movs	r3, #1
 800ba8c:	9308      	str	r3, [sp, #32]
 800ba8e:	e7f5      	b.n	800ba7c <_dtoa_r+0x2fc>
 800ba90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba92:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ba96:	e7b8      	b.n	800ba0a <_dtoa_r+0x28a>
 800ba98:	3101      	adds	r1, #1
 800ba9a:	6041      	str	r1, [r0, #4]
 800ba9c:	0052      	lsls	r2, r2, #1
 800ba9e:	e7b8      	b.n	800ba12 <_dtoa_r+0x292>
 800baa0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800baa2:	9a01      	ldr	r2, [sp, #4]
 800baa4:	601a      	str	r2, [r3, #0]
 800baa6:	9b03      	ldr	r3, [sp, #12]
 800baa8:	2b0e      	cmp	r3, #14
 800baaa:	f200 809d 	bhi.w	800bbe8 <_dtoa_r+0x468>
 800baae:	2d00      	cmp	r5, #0
 800bab0:	f000 809a 	beq.w	800bbe8 <_dtoa_r+0x468>
 800bab4:	9b00      	ldr	r3, [sp, #0]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	dd32      	ble.n	800bb20 <_dtoa_r+0x3a0>
 800baba:	4ab7      	ldr	r2, [pc, #732]	; (800bd98 <_dtoa_r+0x618>)
 800babc:	f003 030f 	and.w	r3, r3, #15
 800bac0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bac4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bac8:	9b00      	ldr	r3, [sp, #0]
 800baca:	05d8      	lsls	r0, r3, #23
 800bacc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800bad0:	d516      	bpl.n	800bb00 <_dtoa_r+0x380>
 800bad2:	4bb2      	ldr	r3, [pc, #712]	; (800bd9c <_dtoa_r+0x61c>)
 800bad4:	ec51 0b19 	vmov	r0, r1, d9
 800bad8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800badc:	f7f4 feb6 	bl	800084c <__aeabi_ddiv>
 800bae0:	f007 070f 	and.w	r7, r7, #15
 800bae4:	4682      	mov	sl, r0
 800bae6:	468b      	mov	fp, r1
 800bae8:	2503      	movs	r5, #3
 800baea:	4eac      	ldr	r6, [pc, #688]	; (800bd9c <_dtoa_r+0x61c>)
 800baec:	b957      	cbnz	r7, 800bb04 <_dtoa_r+0x384>
 800baee:	4642      	mov	r2, r8
 800baf0:	464b      	mov	r3, r9
 800baf2:	4650      	mov	r0, sl
 800baf4:	4659      	mov	r1, fp
 800baf6:	f7f4 fea9 	bl	800084c <__aeabi_ddiv>
 800bafa:	4682      	mov	sl, r0
 800bafc:	468b      	mov	fp, r1
 800bafe:	e028      	b.n	800bb52 <_dtoa_r+0x3d2>
 800bb00:	2502      	movs	r5, #2
 800bb02:	e7f2      	b.n	800baea <_dtoa_r+0x36a>
 800bb04:	07f9      	lsls	r1, r7, #31
 800bb06:	d508      	bpl.n	800bb1a <_dtoa_r+0x39a>
 800bb08:	4640      	mov	r0, r8
 800bb0a:	4649      	mov	r1, r9
 800bb0c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bb10:	f7f4 fd72 	bl	80005f8 <__aeabi_dmul>
 800bb14:	3501      	adds	r5, #1
 800bb16:	4680      	mov	r8, r0
 800bb18:	4689      	mov	r9, r1
 800bb1a:	107f      	asrs	r7, r7, #1
 800bb1c:	3608      	adds	r6, #8
 800bb1e:	e7e5      	b.n	800baec <_dtoa_r+0x36c>
 800bb20:	f000 809b 	beq.w	800bc5a <_dtoa_r+0x4da>
 800bb24:	9b00      	ldr	r3, [sp, #0]
 800bb26:	4f9d      	ldr	r7, [pc, #628]	; (800bd9c <_dtoa_r+0x61c>)
 800bb28:	425e      	negs	r6, r3
 800bb2a:	4b9b      	ldr	r3, [pc, #620]	; (800bd98 <_dtoa_r+0x618>)
 800bb2c:	f006 020f 	and.w	r2, r6, #15
 800bb30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb38:	ec51 0b19 	vmov	r0, r1, d9
 800bb3c:	f7f4 fd5c 	bl	80005f8 <__aeabi_dmul>
 800bb40:	1136      	asrs	r6, r6, #4
 800bb42:	4682      	mov	sl, r0
 800bb44:	468b      	mov	fp, r1
 800bb46:	2300      	movs	r3, #0
 800bb48:	2502      	movs	r5, #2
 800bb4a:	2e00      	cmp	r6, #0
 800bb4c:	d17a      	bne.n	800bc44 <_dtoa_r+0x4c4>
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d1d3      	bne.n	800bafa <_dtoa_r+0x37a>
 800bb52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	f000 8082 	beq.w	800bc5e <_dtoa_r+0x4de>
 800bb5a:	4b91      	ldr	r3, [pc, #580]	; (800bda0 <_dtoa_r+0x620>)
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	4650      	mov	r0, sl
 800bb60:	4659      	mov	r1, fp
 800bb62:	f7f4 ffbb 	bl	8000adc <__aeabi_dcmplt>
 800bb66:	2800      	cmp	r0, #0
 800bb68:	d079      	beq.n	800bc5e <_dtoa_r+0x4de>
 800bb6a:	9b03      	ldr	r3, [sp, #12]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d076      	beq.n	800bc5e <_dtoa_r+0x4de>
 800bb70:	9b02      	ldr	r3, [sp, #8]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	dd36      	ble.n	800bbe4 <_dtoa_r+0x464>
 800bb76:	9b00      	ldr	r3, [sp, #0]
 800bb78:	4650      	mov	r0, sl
 800bb7a:	4659      	mov	r1, fp
 800bb7c:	1e5f      	subs	r7, r3, #1
 800bb7e:	2200      	movs	r2, #0
 800bb80:	4b88      	ldr	r3, [pc, #544]	; (800bda4 <_dtoa_r+0x624>)
 800bb82:	f7f4 fd39 	bl	80005f8 <__aeabi_dmul>
 800bb86:	9e02      	ldr	r6, [sp, #8]
 800bb88:	4682      	mov	sl, r0
 800bb8a:	468b      	mov	fp, r1
 800bb8c:	3501      	adds	r5, #1
 800bb8e:	4628      	mov	r0, r5
 800bb90:	f7f4 fcc8 	bl	8000524 <__aeabi_i2d>
 800bb94:	4652      	mov	r2, sl
 800bb96:	465b      	mov	r3, fp
 800bb98:	f7f4 fd2e 	bl	80005f8 <__aeabi_dmul>
 800bb9c:	4b82      	ldr	r3, [pc, #520]	; (800bda8 <_dtoa_r+0x628>)
 800bb9e:	2200      	movs	r2, #0
 800bba0:	f7f4 fb74 	bl	800028c <__adddf3>
 800bba4:	46d0      	mov	r8, sl
 800bba6:	46d9      	mov	r9, fp
 800bba8:	4682      	mov	sl, r0
 800bbaa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800bbae:	2e00      	cmp	r6, #0
 800bbb0:	d158      	bne.n	800bc64 <_dtoa_r+0x4e4>
 800bbb2:	4b7e      	ldr	r3, [pc, #504]	; (800bdac <_dtoa_r+0x62c>)
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	4640      	mov	r0, r8
 800bbb8:	4649      	mov	r1, r9
 800bbba:	f7f4 fb65 	bl	8000288 <__aeabi_dsub>
 800bbbe:	4652      	mov	r2, sl
 800bbc0:	465b      	mov	r3, fp
 800bbc2:	4680      	mov	r8, r0
 800bbc4:	4689      	mov	r9, r1
 800bbc6:	f7f4 ffa7 	bl	8000b18 <__aeabi_dcmpgt>
 800bbca:	2800      	cmp	r0, #0
 800bbcc:	f040 8295 	bne.w	800c0fa <_dtoa_r+0x97a>
 800bbd0:	4652      	mov	r2, sl
 800bbd2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bbd6:	4640      	mov	r0, r8
 800bbd8:	4649      	mov	r1, r9
 800bbda:	f7f4 ff7f 	bl	8000adc <__aeabi_dcmplt>
 800bbde:	2800      	cmp	r0, #0
 800bbe0:	f040 8289 	bne.w	800c0f6 <_dtoa_r+0x976>
 800bbe4:	ec5b ab19 	vmov	sl, fp, d9
 800bbe8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	f2c0 8148 	blt.w	800be80 <_dtoa_r+0x700>
 800bbf0:	9a00      	ldr	r2, [sp, #0]
 800bbf2:	2a0e      	cmp	r2, #14
 800bbf4:	f300 8144 	bgt.w	800be80 <_dtoa_r+0x700>
 800bbf8:	4b67      	ldr	r3, [pc, #412]	; (800bd98 <_dtoa_r+0x618>)
 800bbfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bbfe:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bc02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	f280 80d5 	bge.w	800bdb4 <_dtoa_r+0x634>
 800bc0a:	9b03      	ldr	r3, [sp, #12]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	f300 80d1 	bgt.w	800bdb4 <_dtoa_r+0x634>
 800bc12:	f040 826f 	bne.w	800c0f4 <_dtoa_r+0x974>
 800bc16:	4b65      	ldr	r3, [pc, #404]	; (800bdac <_dtoa_r+0x62c>)
 800bc18:	2200      	movs	r2, #0
 800bc1a:	4640      	mov	r0, r8
 800bc1c:	4649      	mov	r1, r9
 800bc1e:	f7f4 fceb 	bl	80005f8 <__aeabi_dmul>
 800bc22:	4652      	mov	r2, sl
 800bc24:	465b      	mov	r3, fp
 800bc26:	f7f4 ff6d 	bl	8000b04 <__aeabi_dcmpge>
 800bc2a:	9e03      	ldr	r6, [sp, #12]
 800bc2c:	4637      	mov	r7, r6
 800bc2e:	2800      	cmp	r0, #0
 800bc30:	f040 8245 	bne.w	800c0be <_dtoa_r+0x93e>
 800bc34:	9d01      	ldr	r5, [sp, #4]
 800bc36:	2331      	movs	r3, #49	; 0x31
 800bc38:	f805 3b01 	strb.w	r3, [r5], #1
 800bc3c:	9b00      	ldr	r3, [sp, #0]
 800bc3e:	3301      	adds	r3, #1
 800bc40:	9300      	str	r3, [sp, #0]
 800bc42:	e240      	b.n	800c0c6 <_dtoa_r+0x946>
 800bc44:	07f2      	lsls	r2, r6, #31
 800bc46:	d505      	bpl.n	800bc54 <_dtoa_r+0x4d4>
 800bc48:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc4c:	f7f4 fcd4 	bl	80005f8 <__aeabi_dmul>
 800bc50:	3501      	adds	r5, #1
 800bc52:	2301      	movs	r3, #1
 800bc54:	1076      	asrs	r6, r6, #1
 800bc56:	3708      	adds	r7, #8
 800bc58:	e777      	b.n	800bb4a <_dtoa_r+0x3ca>
 800bc5a:	2502      	movs	r5, #2
 800bc5c:	e779      	b.n	800bb52 <_dtoa_r+0x3d2>
 800bc5e:	9f00      	ldr	r7, [sp, #0]
 800bc60:	9e03      	ldr	r6, [sp, #12]
 800bc62:	e794      	b.n	800bb8e <_dtoa_r+0x40e>
 800bc64:	9901      	ldr	r1, [sp, #4]
 800bc66:	4b4c      	ldr	r3, [pc, #304]	; (800bd98 <_dtoa_r+0x618>)
 800bc68:	4431      	add	r1, r6
 800bc6a:	910d      	str	r1, [sp, #52]	; 0x34
 800bc6c:	9908      	ldr	r1, [sp, #32]
 800bc6e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bc72:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bc76:	2900      	cmp	r1, #0
 800bc78:	d043      	beq.n	800bd02 <_dtoa_r+0x582>
 800bc7a:	494d      	ldr	r1, [pc, #308]	; (800bdb0 <_dtoa_r+0x630>)
 800bc7c:	2000      	movs	r0, #0
 800bc7e:	f7f4 fde5 	bl	800084c <__aeabi_ddiv>
 800bc82:	4652      	mov	r2, sl
 800bc84:	465b      	mov	r3, fp
 800bc86:	f7f4 faff 	bl	8000288 <__aeabi_dsub>
 800bc8a:	9d01      	ldr	r5, [sp, #4]
 800bc8c:	4682      	mov	sl, r0
 800bc8e:	468b      	mov	fp, r1
 800bc90:	4649      	mov	r1, r9
 800bc92:	4640      	mov	r0, r8
 800bc94:	f7f4 ff60 	bl	8000b58 <__aeabi_d2iz>
 800bc98:	4606      	mov	r6, r0
 800bc9a:	f7f4 fc43 	bl	8000524 <__aeabi_i2d>
 800bc9e:	4602      	mov	r2, r0
 800bca0:	460b      	mov	r3, r1
 800bca2:	4640      	mov	r0, r8
 800bca4:	4649      	mov	r1, r9
 800bca6:	f7f4 faef 	bl	8000288 <__aeabi_dsub>
 800bcaa:	3630      	adds	r6, #48	; 0x30
 800bcac:	f805 6b01 	strb.w	r6, [r5], #1
 800bcb0:	4652      	mov	r2, sl
 800bcb2:	465b      	mov	r3, fp
 800bcb4:	4680      	mov	r8, r0
 800bcb6:	4689      	mov	r9, r1
 800bcb8:	f7f4 ff10 	bl	8000adc <__aeabi_dcmplt>
 800bcbc:	2800      	cmp	r0, #0
 800bcbe:	d163      	bne.n	800bd88 <_dtoa_r+0x608>
 800bcc0:	4642      	mov	r2, r8
 800bcc2:	464b      	mov	r3, r9
 800bcc4:	4936      	ldr	r1, [pc, #216]	; (800bda0 <_dtoa_r+0x620>)
 800bcc6:	2000      	movs	r0, #0
 800bcc8:	f7f4 fade 	bl	8000288 <__aeabi_dsub>
 800bccc:	4652      	mov	r2, sl
 800bcce:	465b      	mov	r3, fp
 800bcd0:	f7f4 ff04 	bl	8000adc <__aeabi_dcmplt>
 800bcd4:	2800      	cmp	r0, #0
 800bcd6:	f040 80b5 	bne.w	800be44 <_dtoa_r+0x6c4>
 800bcda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bcdc:	429d      	cmp	r5, r3
 800bcde:	d081      	beq.n	800bbe4 <_dtoa_r+0x464>
 800bce0:	4b30      	ldr	r3, [pc, #192]	; (800bda4 <_dtoa_r+0x624>)
 800bce2:	2200      	movs	r2, #0
 800bce4:	4650      	mov	r0, sl
 800bce6:	4659      	mov	r1, fp
 800bce8:	f7f4 fc86 	bl	80005f8 <__aeabi_dmul>
 800bcec:	4b2d      	ldr	r3, [pc, #180]	; (800bda4 <_dtoa_r+0x624>)
 800bcee:	4682      	mov	sl, r0
 800bcf0:	468b      	mov	fp, r1
 800bcf2:	4640      	mov	r0, r8
 800bcf4:	4649      	mov	r1, r9
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	f7f4 fc7e 	bl	80005f8 <__aeabi_dmul>
 800bcfc:	4680      	mov	r8, r0
 800bcfe:	4689      	mov	r9, r1
 800bd00:	e7c6      	b.n	800bc90 <_dtoa_r+0x510>
 800bd02:	4650      	mov	r0, sl
 800bd04:	4659      	mov	r1, fp
 800bd06:	f7f4 fc77 	bl	80005f8 <__aeabi_dmul>
 800bd0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd0c:	9d01      	ldr	r5, [sp, #4]
 800bd0e:	930f      	str	r3, [sp, #60]	; 0x3c
 800bd10:	4682      	mov	sl, r0
 800bd12:	468b      	mov	fp, r1
 800bd14:	4649      	mov	r1, r9
 800bd16:	4640      	mov	r0, r8
 800bd18:	f7f4 ff1e 	bl	8000b58 <__aeabi_d2iz>
 800bd1c:	4606      	mov	r6, r0
 800bd1e:	f7f4 fc01 	bl	8000524 <__aeabi_i2d>
 800bd22:	3630      	adds	r6, #48	; 0x30
 800bd24:	4602      	mov	r2, r0
 800bd26:	460b      	mov	r3, r1
 800bd28:	4640      	mov	r0, r8
 800bd2a:	4649      	mov	r1, r9
 800bd2c:	f7f4 faac 	bl	8000288 <__aeabi_dsub>
 800bd30:	f805 6b01 	strb.w	r6, [r5], #1
 800bd34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd36:	429d      	cmp	r5, r3
 800bd38:	4680      	mov	r8, r0
 800bd3a:	4689      	mov	r9, r1
 800bd3c:	f04f 0200 	mov.w	r2, #0
 800bd40:	d124      	bne.n	800bd8c <_dtoa_r+0x60c>
 800bd42:	4b1b      	ldr	r3, [pc, #108]	; (800bdb0 <_dtoa_r+0x630>)
 800bd44:	4650      	mov	r0, sl
 800bd46:	4659      	mov	r1, fp
 800bd48:	f7f4 faa0 	bl	800028c <__adddf3>
 800bd4c:	4602      	mov	r2, r0
 800bd4e:	460b      	mov	r3, r1
 800bd50:	4640      	mov	r0, r8
 800bd52:	4649      	mov	r1, r9
 800bd54:	f7f4 fee0 	bl	8000b18 <__aeabi_dcmpgt>
 800bd58:	2800      	cmp	r0, #0
 800bd5a:	d173      	bne.n	800be44 <_dtoa_r+0x6c4>
 800bd5c:	4652      	mov	r2, sl
 800bd5e:	465b      	mov	r3, fp
 800bd60:	4913      	ldr	r1, [pc, #76]	; (800bdb0 <_dtoa_r+0x630>)
 800bd62:	2000      	movs	r0, #0
 800bd64:	f7f4 fa90 	bl	8000288 <__aeabi_dsub>
 800bd68:	4602      	mov	r2, r0
 800bd6a:	460b      	mov	r3, r1
 800bd6c:	4640      	mov	r0, r8
 800bd6e:	4649      	mov	r1, r9
 800bd70:	f7f4 feb4 	bl	8000adc <__aeabi_dcmplt>
 800bd74:	2800      	cmp	r0, #0
 800bd76:	f43f af35 	beq.w	800bbe4 <_dtoa_r+0x464>
 800bd7a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bd7c:	1e6b      	subs	r3, r5, #1
 800bd7e:	930f      	str	r3, [sp, #60]	; 0x3c
 800bd80:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bd84:	2b30      	cmp	r3, #48	; 0x30
 800bd86:	d0f8      	beq.n	800bd7a <_dtoa_r+0x5fa>
 800bd88:	9700      	str	r7, [sp, #0]
 800bd8a:	e049      	b.n	800be20 <_dtoa_r+0x6a0>
 800bd8c:	4b05      	ldr	r3, [pc, #20]	; (800bda4 <_dtoa_r+0x624>)
 800bd8e:	f7f4 fc33 	bl	80005f8 <__aeabi_dmul>
 800bd92:	4680      	mov	r8, r0
 800bd94:	4689      	mov	r9, r1
 800bd96:	e7bd      	b.n	800bd14 <_dtoa_r+0x594>
 800bd98:	0800e900 	.word	0x0800e900
 800bd9c:	0800e8d8 	.word	0x0800e8d8
 800bda0:	3ff00000 	.word	0x3ff00000
 800bda4:	40240000 	.word	0x40240000
 800bda8:	401c0000 	.word	0x401c0000
 800bdac:	40140000 	.word	0x40140000
 800bdb0:	3fe00000 	.word	0x3fe00000
 800bdb4:	9d01      	ldr	r5, [sp, #4]
 800bdb6:	4656      	mov	r6, sl
 800bdb8:	465f      	mov	r7, fp
 800bdba:	4642      	mov	r2, r8
 800bdbc:	464b      	mov	r3, r9
 800bdbe:	4630      	mov	r0, r6
 800bdc0:	4639      	mov	r1, r7
 800bdc2:	f7f4 fd43 	bl	800084c <__aeabi_ddiv>
 800bdc6:	f7f4 fec7 	bl	8000b58 <__aeabi_d2iz>
 800bdca:	4682      	mov	sl, r0
 800bdcc:	f7f4 fbaa 	bl	8000524 <__aeabi_i2d>
 800bdd0:	4642      	mov	r2, r8
 800bdd2:	464b      	mov	r3, r9
 800bdd4:	f7f4 fc10 	bl	80005f8 <__aeabi_dmul>
 800bdd8:	4602      	mov	r2, r0
 800bdda:	460b      	mov	r3, r1
 800bddc:	4630      	mov	r0, r6
 800bdde:	4639      	mov	r1, r7
 800bde0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800bde4:	f7f4 fa50 	bl	8000288 <__aeabi_dsub>
 800bde8:	f805 6b01 	strb.w	r6, [r5], #1
 800bdec:	9e01      	ldr	r6, [sp, #4]
 800bdee:	9f03      	ldr	r7, [sp, #12]
 800bdf0:	1bae      	subs	r6, r5, r6
 800bdf2:	42b7      	cmp	r7, r6
 800bdf4:	4602      	mov	r2, r0
 800bdf6:	460b      	mov	r3, r1
 800bdf8:	d135      	bne.n	800be66 <_dtoa_r+0x6e6>
 800bdfa:	f7f4 fa47 	bl	800028c <__adddf3>
 800bdfe:	4642      	mov	r2, r8
 800be00:	464b      	mov	r3, r9
 800be02:	4606      	mov	r6, r0
 800be04:	460f      	mov	r7, r1
 800be06:	f7f4 fe87 	bl	8000b18 <__aeabi_dcmpgt>
 800be0a:	b9d0      	cbnz	r0, 800be42 <_dtoa_r+0x6c2>
 800be0c:	4642      	mov	r2, r8
 800be0e:	464b      	mov	r3, r9
 800be10:	4630      	mov	r0, r6
 800be12:	4639      	mov	r1, r7
 800be14:	f7f4 fe58 	bl	8000ac8 <__aeabi_dcmpeq>
 800be18:	b110      	cbz	r0, 800be20 <_dtoa_r+0x6a0>
 800be1a:	f01a 0f01 	tst.w	sl, #1
 800be1e:	d110      	bne.n	800be42 <_dtoa_r+0x6c2>
 800be20:	4620      	mov	r0, r4
 800be22:	ee18 1a10 	vmov	r1, s16
 800be26:	f001 f885 	bl	800cf34 <_Bfree>
 800be2a:	2300      	movs	r3, #0
 800be2c:	9800      	ldr	r0, [sp, #0]
 800be2e:	702b      	strb	r3, [r5, #0]
 800be30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be32:	3001      	adds	r0, #1
 800be34:	6018      	str	r0, [r3, #0]
 800be36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800be38:	2b00      	cmp	r3, #0
 800be3a:	f43f acf1 	beq.w	800b820 <_dtoa_r+0xa0>
 800be3e:	601d      	str	r5, [r3, #0]
 800be40:	e4ee      	b.n	800b820 <_dtoa_r+0xa0>
 800be42:	9f00      	ldr	r7, [sp, #0]
 800be44:	462b      	mov	r3, r5
 800be46:	461d      	mov	r5, r3
 800be48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800be4c:	2a39      	cmp	r2, #57	; 0x39
 800be4e:	d106      	bne.n	800be5e <_dtoa_r+0x6de>
 800be50:	9a01      	ldr	r2, [sp, #4]
 800be52:	429a      	cmp	r2, r3
 800be54:	d1f7      	bne.n	800be46 <_dtoa_r+0x6c6>
 800be56:	9901      	ldr	r1, [sp, #4]
 800be58:	2230      	movs	r2, #48	; 0x30
 800be5a:	3701      	adds	r7, #1
 800be5c:	700a      	strb	r2, [r1, #0]
 800be5e:	781a      	ldrb	r2, [r3, #0]
 800be60:	3201      	adds	r2, #1
 800be62:	701a      	strb	r2, [r3, #0]
 800be64:	e790      	b.n	800bd88 <_dtoa_r+0x608>
 800be66:	4ba6      	ldr	r3, [pc, #664]	; (800c100 <_dtoa_r+0x980>)
 800be68:	2200      	movs	r2, #0
 800be6a:	f7f4 fbc5 	bl	80005f8 <__aeabi_dmul>
 800be6e:	2200      	movs	r2, #0
 800be70:	2300      	movs	r3, #0
 800be72:	4606      	mov	r6, r0
 800be74:	460f      	mov	r7, r1
 800be76:	f7f4 fe27 	bl	8000ac8 <__aeabi_dcmpeq>
 800be7a:	2800      	cmp	r0, #0
 800be7c:	d09d      	beq.n	800bdba <_dtoa_r+0x63a>
 800be7e:	e7cf      	b.n	800be20 <_dtoa_r+0x6a0>
 800be80:	9a08      	ldr	r2, [sp, #32]
 800be82:	2a00      	cmp	r2, #0
 800be84:	f000 80d7 	beq.w	800c036 <_dtoa_r+0x8b6>
 800be88:	9a06      	ldr	r2, [sp, #24]
 800be8a:	2a01      	cmp	r2, #1
 800be8c:	f300 80ba 	bgt.w	800c004 <_dtoa_r+0x884>
 800be90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800be92:	2a00      	cmp	r2, #0
 800be94:	f000 80b2 	beq.w	800bffc <_dtoa_r+0x87c>
 800be98:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800be9c:	9e07      	ldr	r6, [sp, #28]
 800be9e:	9d04      	ldr	r5, [sp, #16]
 800bea0:	9a04      	ldr	r2, [sp, #16]
 800bea2:	441a      	add	r2, r3
 800bea4:	9204      	str	r2, [sp, #16]
 800bea6:	9a05      	ldr	r2, [sp, #20]
 800bea8:	2101      	movs	r1, #1
 800beaa:	441a      	add	r2, r3
 800beac:	4620      	mov	r0, r4
 800beae:	9205      	str	r2, [sp, #20]
 800beb0:	f001 f942 	bl	800d138 <__i2b>
 800beb4:	4607      	mov	r7, r0
 800beb6:	2d00      	cmp	r5, #0
 800beb8:	dd0c      	ble.n	800bed4 <_dtoa_r+0x754>
 800beba:	9b05      	ldr	r3, [sp, #20]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	dd09      	ble.n	800bed4 <_dtoa_r+0x754>
 800bec0:	42ab      	cmp	r3, r5
 800bec2:	9a04      	ldr	r2, [sp, #16]
 800bec4:	bfa8      	it	ge
 800bec6:	462b      	movge	r3, r5
 800bec8:	1ad2      	subs	r2, r2, r3
 800beca:	9204      	str	r2, [sp, #16]
 800becc:	9a05      	ldr	r2, [sp, #20]
 800bece:	1aed      	subs	r5, r5, r3
 800bed0:	1ad3      	subs	r3, r2, r3
 800bed2:	9305      	str	r3, [sp, #20]
 800bed4:	9b07      	ldr	r3, [sp, #28]
 800bed6:	b31b      	cbz	r3, 800bf20 <_dtoa_r+0x7a0>
 800bed8:	9b08      	ldr	r3, [sp, #32]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	f000 80af 	beq.w	800c03e <_dtoa_r+0x8be>
 800bee0:	2e00      	cmp	r6, #0
 800bee2:	dd13      	ble.n	800bf0c <_dtoa_r+0x78c>
 800bee4:	4639      	mov	r1, r7
 800bee6:	4632      	mov	r2, r6
 800bee8:	4620      	mov	r0, r4
 800beea:	f001 f9e5 	bl	800d2b8 <__pow5mult>
 800beee:	ee18 2a10 	vmov	r2, s16
 800bef2:	4601      	mov	r1, r0
 800bef4:	4607      	mov	r7, r0
 800bef6:	4620      	mov	r0, r4
 800bef8:	f001 f934 	bl	800d164 <__multiply>
 800befc:	ee18 1a10 	vmov	r1, s16
 800bf00:	4680      	mov	r8, r0
 800bf02:	4620      	mov	r0, r4
 800bf04:	f001 f816 	bl	800cf34 <_Bfree>
 800bf08:	ee08 8a10 	vmov	s16, r8
 800bf0c:	9b07      	ldr	r3, [sp, #28]
 800bf0e:	1b9a      	subs	r2, r3, r6
 800bf10:	d006      	beq.n	800bf20 <_dtoa_r+0x7a0>
 800bf12:	ee18 1a10 	vmov	r1, s16
 800bf16:	4620      	mov	r0, r4
 800bf18:	f001 f9ce 	bl	800d2b8 <__pow5mult>
 800bf1c:	ee08 0a10 	vmov	s16, r0
 800bf20:	2101      	movs	r1, #1
 800bf22:	4620      	mov	r0, r4
 800bf24:	f001 f908 	bl	800d138 <__i2b>
 800bf28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	4606      	mov	r6, r0
 800bf2e:	f340 8088 	ble.w	800c042 <_dtoa_r+0x8c2>
 800bf32:	461a      	mov	r2, r3
 800bf34:	4601      	mov	r1, r0
 800bf36:	4620      	mov	r0, r4
 800bf38:	f001 f9be 	bl	800d2b8 <__pow5mult>
 800bf3c:	9b06      	ldr	r3, [sp, #24]
 800bf3e:	2b01      	cmp	r3, #1
 800bf40:	4606      	mov	r6, r0
 800bf42:	f340 8081 	ble.w	800c048 <_dtoa_r+0x8c8>
 800bf46:	f04f 0800 	mov.w	r8, #0
 800bf4a:	6933      	ldr	r3, [r6, #16]
 800bf4c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bf50:	6918      	ldr	r0, [r3, #16]
 800bf52:	f001 f8a1 	bl	800d098 <__hi0bits>
 800bf56:	f1c0 0020 	rsb	r0, r0, #32
 800bf5a:	9b05      	ldr	r3, [sp, #20]
 800bf5c:	4418      	add	r0, r3
 800bf5e:	f010 001f 	ands.w	r0, r0, #31
 800bf62:	f000 8092 	beq.w	800c08a <_dtoa_r+0x90a>
 800bf66:	f1c0 0320 	rsb	r3, r0, #32
 800bf6a:	2b04      	cmp	r3, #4
 800bf6c:	f340 808a 	ble.w	800c084 <_dtoa_r+0x904>
 800bf70:	f1c0 001c 	rsb	r0, r0, #28
 800bf74:	9b04      	ldr	r3, [sp, #16]
 800bf76:	4403      	add	r3, r0
 800bf78:	9304      	str	r3, [sp, #16]
 800bf7a:	9b05      	ldr	r3, [sp, #20]
 800bf7c:	4403      	add	r3, r0
 800bf7e:	4405      	add	r5, r0
 800bf80:	9305      	str	r3, [sp, #20]
 800bf82:	9b04      	ldr	r3, [sp, #16]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	dd07      	ble.n	800bf98 <_dtoa_r+0x818>
 800bf88:	ee18 1a10 	vmov	r1, s16
 800bf8c:	461a      	mov	r2, r3
 800bf8e:	4620      	mov	r0, r4
 800bf90:	f001 f9ec 	bl	800d36c <__lshift>
 800bf94:	ee08 0a10 	vmov	s16, r0
 800bf98:	9b05      	ldr	r3, [sp, #20]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	dd05      	ble.n	800bfaa <_dtoa_r+0x82a>
 800bf9e:	4631      	mov	r1, r6
 800bfa0:	461a      	mov	r2, r3
 800bfa2:	4620      	mov	r0, r4
 800bfa4:	f001 f9e2 	bl	800d36c <__lshift>
 800bfa8:	4606      	mov	r6, r0
 800bfaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d06e      	beq.n	800c08e <_dtoa_r+0x90e>
 800bfb0:	ee18 0a10 	vmov	r0, s16
 800bfb4:	4631      	mov	r1, r6
 800bfb6:	f001 fa49 	bl	800d44c <__mcmp>
 800bfba:	2800      	cmp	r0, #0
 800bfbc:	da67      	bge.n	800c08e <_dtoa_r+0x90e>
 800bfbe:	9b00      	ldr	r3, [sp, #0]
 800bfc0:	3b01      	subs	r3, #1
 800bfc2:	ee18 1a10 	vmov	r1, s16
 800bfc6:	9300      	str	r3, [sp, #0]
 800bfc8:	220a      	movs	r2, #10
 800bfca:	2300      	movs	r3, #0
 800bfcc:	4620      	mov	r0, r4
 800bfce:	f000 ffd3 	bl	800cf78 <__multadd>
 800bfd2:	9b08      	ldr	r3, [sp, #32]
 800bfd4:	ee08 0a10 	vmov	s16, r0
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	f000 81b1 	beq.w	800c340 <_dtoa_r+0xbc0>
 800bfde:	2300      	movs	r3, #0
 800bfe0:	4639      	mov	r1, r7
 800bfe2:	220a      	movs	r2, #10
 800bfe4:	4620      	mov	r0, r4
 800bfe6:	f000 ffc7 	bl	800cf78 <__multadd>
 800bfea:	9b02      	ldr	r3, [sp, #8]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	4607      	mov	r7, r0
 800bff0:	f300 808e 	bgt.w	800c110 <_dtoa_r+0x990>
 800bff4:	9b06      	ldr	r3, [sp, #24]
 800bff6:	2b02      	cmp	r3, #2
 800bff8:	dc51      	bgt.n	800c09e <_dtoa_r+0x91e>
 800bffa:	e089      	b.n	800c110 <_dtoa_r+0x990>
 800bffc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bffe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c002:	e74b      	b.n	800be9c <_dtoa_r+0x71c>
 800c004:	9b03      	ldr	r3, [sp, #12]
 800c006:	1e5e      	subs	r6, r3, #1
 800c008:	9b07      	ldr	r3, [sp, #28]
 800c00a:	42b3      	cmp	r3, r6
 800c00c:	bfbf      	itttt	lt
 800c00e:	9b07      	ldrlt	r3, [sp, #28]
 800c010:	9607      	strlt	r6, [sp, #28]
 800c012:	1af2      	sublt	r2, r6, r3
 800c014:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c016:	bfb6      	itet	lt
 800c018:	189b      	addlt	r3, r3, r2
 800c01a:	1b9e      	subge	r6, r3, r6
 800c01c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c01e:	9b03      	ldr	r3, [sp, #12]
 800c020:	bfb8      	it	lt
 800c022:	2600      	movlt	r6, #0
 800c024:	2b00      	cmp	r3, #0
 800c026:	bfb7      	itett	lt
 800c028:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c02c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c030:	1a9d      	sublt	r5, r3, r2
 800c032:	2300      	movlt	r3, #0
 800c034:	e734      	b.n	800bea0 <_dtoa_r+0x720>
 800c036:	9e07      	ldr	r6, [sp, #28]
 800c038:	9d04      	ldr	r5, [sp, #16]
 800c03a:	9f08      	ldr	r7, [sp, #32]
 800c03c:	e73b      	b.n	800beb6 <_dtoa_r+0x736>
 800c03e:	9a07      	ldr	r2, [sp, #28]
 800c040:	e767      	b.n	800bf12 <_dtoa_r+0x792>
 800c042:	9b06      	ldr	r3, [sp, #24]
 800c044:	2b01      	cmp	r3, #1
 800c046:	dc18      	bgt.n	800c07a <_dtoa_r+0x8fa>
 800c048:	f1ba 0f00 	cmp.w	sl, #0
 800c04c:	d115      	bne.n	800c07a <_dtoa_r+0x8fa>
 800c04e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c052:	b993      	cbnz	r3, 800c07a <_dtoa_r+0x8fa>
 800c054:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c058:	0d1b      	lsrs	r3, r3, #20
 800c05a:	051b      	lsls	r3, r3, #20
 800c05c:	b183      	cbz	r3, 800c080 <_dtoa_r+0x900>
 800c05e:	9b04      	ldr	r3, [sp, #16]
 800c060:	3301      	adds	r3, #1
 800c062:	9304      	str	r3, [sp, #16]
 800c064:	9b05      	ldr	r3, [sp, #20]
 800c066:	3301      	adds	r3, #1
 800c068:	9305      	str	r3, [sp, #20]
 800c06a:	f04f 0801 	mov.w	r8, #1
 800c06e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c070:	2b00      	cmp	r3, #0
 800c072:	f47f af6a 	bne.w	800bf4a <_dtoa_r+0x7ca>
 800c076:	2001      	movs	r0, #1
 800c078:	e76f      	b.n	800bf5a <_dtoa_r+0x7da>
 800c07a:	f04f 0800 	mov.w	r8, #0
 800c07e:	e7f6      	b.n	800c06e <_dtoa_r+0x8ee>
 800c080:	4698      	mov	r8, r3
 800c082:	e7f4      	b.n	800c06e <_dtoa_r+0x8ee>
 800c084:	f43f af7d 	beq.w	800bf82 <_dtoa_r+0x802>
 800c088:	4618      	mov	r0, r3
 800c08a:	301c      	adds	r0, #28
 800c08c:	e772      	b.n	800bf74 <_dtoa_r+0x7f4>
 800c08e:	9b03      	ldr	r3, [sp, #12]
 800c090:	2b00      	cmp	r3, #0
 800c092:	dc37      	bgt.n	800c104 <_dtoa_r+0x984>
 800c094:	9b06      	ldr	r3, [sp, #24]
 800c096:	2b02      	cmp	r3, #2
 800c098:	dd34      	ble.n	800c104 <_dtoa_r+0x984>
 800c09a:	9b03      	ldr	r3, [sp, #12]
 800c09c:	9302      	str	r3, [sp, #8]
 800c09e:	9b02      	ldr	r3, [sp, #8]
 800c0a0:	b96b      	cbnz	r3, 800c0be <_dtoa_r+0x93e>
 800c0a2:	4631      	mov	r1, r6
 800c0a4:	2205      	movs	r2, #5
 800c0a6:	4620      	mov	r0, r4
 800c0a8:	f000 ff66 	bl	800cf78 <__multadd>
 800c0ac:	4601      	mov	r1, r0
 800c0ae:	4606      	mov	r6, r0
 800c0b0:	ee18 0a10 	vmov	r0, s16
 800c0b4:	f001 f9ca 	bl	800d44c <__mcmp>
 800c0b8:	2800      	cmp	r0, #0
 800c0ba:	f73f adbb 	bgt.w	800bc34 <_dtoa_r+0x4b4>
 800c0be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0c0:	9d01      	ldr	r5, [sp, #4]
 800c0c2:	43db      	mvns	r3, r3
 800c0c4:	9300      	str	r3, [sp, #0]
 800c0c6:	f04f 0800 	mov.w	r8, #0
 800c0ca:	4631      	mov	r1, r6
 800c0cc:	4620      	mov	r0, r4
 800c0ce:	f000 ff31 	bl	800cf34 <_Bfree>
 800c0d2:	2f00      	cmp	r7, #0
 800c0d4:	f43f aea4 	beq.w	800be20 <_dtoa_r+0x6a0>
 800c0d8:	f1b8 0f00 	cmp.w	r8, #0
 800c0dc:	d005      	beq.n	800c0ea <_dtoa_r+0x96a>
 800c0de:	45b8      	cmp	r8, r7
 800c0e0:	d003      	beq.n	800c0ea <_dtoa_r+0x96a>
 800c0e2:	4641      	mov	r1, r8
 800c0e4:	4620      	mov	r0, r4
 800c0e6:	f000 ff25 	bl	800cf34 <_Bfree>
 800c0ea:	4639      	mov	r1, r7
 800c0ec:	4620      	mov	r0, r4
 800c0ee:	f000 ff21 	bl	800cf34 <_Bfree>
 800c0f2:	e695      	b.n	800be20 <_dtoa_r+0x6a0>
 800c0f4:	2600      	movs	r6, #0
 800c0f6:	4637      	mov	r7, r6
 800c0f8:	e7e1      	b.n	800c0be <_dtoa_r+0x93e>
 800c0fa:	9700      	str	r7, [sp, #0]
 800c0fc:	4637      	mov	r7, r6
 800c0fe:	e599      	b.n	800bc34 <_dtoa_r+0x4b4>
 800c100:	40240000 	.word	0x40240000
 800c104:	9b08      	ldr	r3, [sp, #32]
 800c106:	2b00      	cmp	r3, #0
 800c108:	f000 80ca 	beq.w	800c2a0 <_dtoa_r+0xb20>
 800c10c:	9b03      	ldr	r3, [sp, #12]
 800c10e:	9302      	str	r3, [sp, #8]
 800c110:	2d00      	cmp	r5, #0
 800c112:	dd05      	ble.n	800c120 <_dtoa_r+0x9a0>
 800c114:	4639      	mov	r1, r7
 800c116:	462a      	mov	r2, r5
 800c118:	4620      	mov	r0, r4
 800c11a:	f001 f927 	bl	800d36c <__lshift>
 800c11e:	4607      	mov	r7, r0
 800c120:	f1b8 0f00 	cmp.w	r8, #0
 800c124:	d05b      	beq.n	800c1de <_dtoa_r+0xa5e>
 800c126:	6879      	ldr	r1, [r7, #4]
 800c128:	4620      	mov	r0, r4
 800c12a:	f000 fec3 	bl	800ceb4 <_Balloc>
 800c12e:	4605      	mov	r5, r0
 800c130:	b928      	cbnz	r0, 800c13e <_dtoa_r+0x9be>
 800c132:	4b87      	ldr	r3, [pc, #540]	; (800c350 <_dtoa_r+0xbd0>)
 800c134:	4602      	mov	r2, r0
 800c136:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c13a:	f7ff bb3b 	b.w	800b7b4 <_dtoa_r+0x34>
 800c13e:	693a      	ldr	r2, [r7, #16]
 800c140:	3202      	adds	r2, #2
 800c142:	0092      	lsls	r2, r2, #2
 800c144:	f107 010c 	add.w	r1, r7, #12
 800c148:	300c      	adds	r0, #12
 800c14a:	f7fd fbdb 	bl	8009904 <memcpy>
 800c14e:	2201      	movs	r2, #1
 800c150:	4629      	mov	r1, r5
 800c152:	4620      	mov	r0, r4
 800c154:	f001 f90a 	bl	800d36c <__lshift>
 800c158:	9b01      	ldr	r3, [sp, #4]
 800c15a:	f103 0901 	add.w	r9, r3, #1
 800c15e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c162:	4413      	add	r3, r2
 800c164:	9305      	str	r3, [sp, #20]
 800c166:	f00a 0301 	and.w	r3, sl, #1
 800c16a:	46b8      	mov	r8, r7
 800c16c:	9304      	str	r3, [sp, #16]
 800c16e:	4607      	mov	r7, r0
 800c170:	4631      	mov	r1, r6
 800c172:	ee18 0a10 	vmov	r0, s16
 800c176:	f7ff fa77 	bl	800b668 <quorem>
 800c17a:	4641      	mov	r1, r8
 800c17c:	9002      	str	r0, [sp, #8]
 800c17e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c182:	ee18 0a10 	vmov	r0, s16
 800c186:	f001 f961 	bl	800d44c <__mcmp>
 800c18a:	463a      	mov	r2, r7
 800c18c:	9003      	str	r0, [sp, #12]
 800c18e:	4631      	mov	r1, r6
 800c190:	4620      	mov	r0, r4
 800c192:	f001 f977 	bl	800d484 <__mdiff>
 800c196:	68c2      	ldr	r2, [r0, #12]
 800c198:	f109 3bff 	add.w	fp, r9, #4294967295
 800c19c:	4605      	mov	r5, r0
 800c19e:	bb02      	cbnz	r2, 800c1e2 <_dtoa_r+0xa62>
 800c1a0:	4601      	mov	r1, r0
 800c1a2:	ee18 0a10 	vmov	r0, s16
 800c1a6:	f001 f951 	bl	800d44c <__mcmp>
 800c1aa:	4602      	mov	r2, r0
 800c1ac:	4629      	mov	r1, r5
 800c1ae:	4620      	mov	r0, r4
 800c1b0:	9207      	str	r2, [sp, #28]
 800c1b2:	f000 febf 	bl	800cf34 <_Bfree>
 800c1b6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c1ba:	ea43 0102 	orr.w	r1, r3, r2
 800c1be:	9b04      	ldr	r3, [sp, #16]
 800c1c0:	430b      	orrs	r3, r1
 800c1c2:	464d      	mov	r5, r9
 800c1c4:	d10f      	bne.n	800c1e6 <_dtoa_r+0xa66>
 800c1c6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c1ca:	d02a      	beq.n	800c222 <_dtoa_r+0xaa2>
 800c1cc:	9b03      	ldr	r3, [sp, #12]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	dd02      	ble.n	800c1d8 <_dtoa_r+0xa58>
 800c1d2:	9b02      	ldr	r3, [sp, #8]
 800c1d4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c1d8:	f88b a000 	strb.w	sl, [fp]
 800c1dc:	e775      	b.n	800c0ca <_dtoa_r+0x94a>
 800c1de:	4638      	mov	r0, r7
 800c1e0:	e7ba      	b.n	800c158 <_dtoa_r+0x9d8>
 800c1e2:	2201      	movs	r2, #1
 800c1e4:	e7e2      	b.n	800c1ac <_dtoa_r+0xa2c>
 800c1e6:	9b03      	ldr	r3, [sp, #12]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	db04      	blt.n	800c1f6 <_dtoa_r+0xa76>
 800c1ec:	9906      	ldr	r1, [sp, #24]
 800c1ee:	430b      	orrs	r3, r1
 800c1f0:	9904      	ldr	r1, [sp, #16]
 800c1f2:	430b      	orrs	r3, r1
 800c1f4:	d122      	bne.n	800c23c <_dtoa_r+0xabc>
 800c1f6:	2a00      	cmp	r2, #0
 800c1f8:	ddee      	ble.n	800c1d8 <_dtoa_r+0xa58>
 800c1fa:	ee18 1a10 	vmov	r1, s16
 800c1fe:	2201      	movs	r2, #1
 800c200:	4620      	mov	r0, r4
 800c202:	f001 f8b3 	bl	800d36c <__lshift>
 800c206:	4631      	mov	r1, r6
 800c208:	ee08 0a10 	vmov	s16, r0
 800c20c:	f001 f91e 	bl	800d44c <__mcmp>
 800c210:	2800      	cmp	r0, #0
 800c212:	dc03      	bgt.n	800c21c <_dtoa_r+0xa9c>
 800c214:	d1e0      	bne.n	800c1d8 <_dtoa_r+0xa58>
 800c216:	f01a 0f01 	tst.w	sl, #1
 800c21a:	d0dd      	beq.n	800c1d8 <_dtoa_r+0xa58>
 800c21c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c220:	d1d7      	bne.n	800c1d2 <_dtoa_r+0xa52>
 800c222:	2339      	movs	r3, #57	; 0x39
 800c224:	f88b 3000 	strb.w	r3, [fp]
 800c228:	462b      	mov	r3, r5
 800c22a:	461d      	mov	r5, r3
 800c22c:	3b01      	subs	r3, #1
 800c22e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c232:	2a39      	cmp	r2, #57	; 0x39
 800c234:	d071      	beq.n	800c31a <_dtoa_r+0xb9a>
 800c236:	3201      	adds	r2, #1
 800c238:	701a      	strb	r2, [r3, #0]
 800c23a:	e746      	b.n	800c0ca <_dtoa_r+0x94a>
 800c23c:	2a00      	cmp	r2, #0
 800c23e:	dd07      	ble.n	800c250 <_dtoa_r+0xad0>
 800c240:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c244:	d0ed      	beq.n	800c222 <_dtoa_r+0xaa2>
 800c246:	f10a 0301 	add.w	r3, sl, #1
 800c24a:	f88b 3000 	strb.w	r3, [fp]
 800c24e:	e73c      	b.n	800c0ca <_dtoa_r+0x94a>
 800c250:	9b05      	ldr	r3, [sp, #20]
 800c252:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c256:	4599      	cmp	r9, r3
 800c258:	d047      	beq.n	800c2ea <_dtoa_r+0xb6a>
 800c25a:	ee18 1a10 	vmov	r1, s16
 800c25e:	2300      	movs	r3, #0
 800c260:	220a      	movs	r2, #10
 800c262:	4620      	mov	r0, r4
 800c264:	f000 fe88 	bl	800cf78 <__multadd>
 800c268:	45b8      	cmp	r8, r7
 800c26a:	ee08 0a10 	vmov	s16, r0
 800c26e:	f04f 0300 	mov.w	r3, #0
 800c272:	f04f 020a 	mov.w	r2, #10
 800c276:	4641      	mov	r1, r8
 800c278:	4620      	mov	r0, r4
 800c27a:	d106      	bne.n	800c28a <_dtoa_r+0xb0a>
 800c27c:	f000 fe7c 	bl	800cf78 <__multadd>
 800c280:	4680      	mov	r8, r0
 800c282:	4607      	mov	r7, r0
 800c284:	f109 0901 	add.w	r9, r9, #1
 800c288:	e772      	b.n	800c170 <_dtoa_r+0x9f0>
 800c28a:	f000 fe75 	bl	800cf78 <__multadd>
 800c28e:	4639      	mov	r1, r7
 800c290:	4680      	mov	r8, r0
 800c292:	2300      	movs	r3, #0
 800c294:	220a      	movs	r2, #10
 800c296:	4620      	mov	r0, r4
 800c298:	f000 fe6e 	bl	800cf78 <__multadd>
 800c29c:	4607      	mov	r7, r0
 800c29e:	e7f1      	b.n	800c284 <_dtoa_r+0xb04>
 800c2a0:	9b03      	ldr	r3, [sp, #12]
 800c2a2:	9302      	str	r3, [sp, #8]
 800c2a4:	9d01      	ldr	r5, [sp, #4]
 800c2a6:	ee18 0a10 	vmov	r0, s16
 800c2aa:	4631      	mov	r1, r6
 800c2ac:	f7ff f9dc 	bl	800b668 <quorem>
 800c2b0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c2b4:	9b01      	ldr	r3, [sp, #4]
 800c2b6:	f805 ab01 	strb.w	sl, [r5], #1
 800c2ba:	1aea      	subs	r2, r5, r3
 800c2bc:	9b02      	ldr	r3, [sp, #8]
 800c2be:	4293      	cmp	r3, r2
 800c2c0:	dd09      	ble.n	800c2d6 <_dtoa_r+0xb56>
 800c2c2:	ee18 1a10 	vmov	r1, s16
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	220a      	movs	r2, #10
 800c2ca:	4620      	mov	r0, r4
 800c2cc:	f000 fe54 	bl	800cf78 <__multadd>
 800c2d0:	ee08 0a10 	vmov	s16, r0
 800c2d4:	e7e7      	b.n	800c2a6 <_dtoa_r+0xb26>
 800c2d6:	9b02      	ldr	r3, [sp, #8]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	bfc8      	it	gt
 800c2dc:	461d      	movgt	r5, r3
 800c2de:	9b01      	ldr	r3, [sp, #4]
 800c2e0:	bfd8      	it	le
 800c2e2:	2501      	movle	r5, #1
 800c2e4:	441d      	add	r5, r3
 800c2e6:	f04f 0800 	mov.w	r8, #0
 800c2ea:	ee18 1a10 	vmov	r1, s16
 800c2ee:	2201      	movs	r2, #1
 800c2f0:	4620      	mov	r0, r4
 800c2f2:	f001 f83b 	bl	800d36c <__lshift>
 800c2f6:	4631      	mov	r1, r6
 800c2f8:	ee08 0a10 	vmov	s16, r0
 800c2fc:	f001 f8a6 	bl	800d44c <__mcmp>
 800c300:	2800      	cmp	r0, #0
 800c302:	dc91      	bgt.n	800c228 <_dtoa_r+0xaa8>
 800c304:	d102      	bne.n	800c30c <_dtoa_r+0xb8c>
 800c306:	f01a 0f01 	tst.w	sl, #1
 800c30a:	d18d      	bne.n	800c228 <_dtoa_r+0xaa8>
 800c30c:	462b      	mov	r3, r5
 800c30e:	461d      	mov	r5, r3
 800c310:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c314:	2a30      	cmp	r2, #48	; 0x30
 800c316:	d0fa      	beq.n	800c30e <_dtoa_r+0xb8e>
 800c318:	e6d7      	b.n	800c0ca <_dtoa_r+0x94a>
 800c31a:	9a01      	ldr	r2, [sp, #4]
 800c31c:	429a      	cmp	r2, r3
 800c31e:	d184      	bne.n	800c22a <_dtoa_r+0xaaa>
 800c320:	9b00      	ldr	r3, [sp, #0]
 800c322:	3301      	adds	r3, #1
 800c324:	9300      	str	r3, [sp, #0]
 800c326:	2331      	movs	r3, #49	; 0x31
 800c328:	7013      	strb	r3, [r2, #0]
 800c32a:	e6ce      	b.n	800c0ca <_dtoa_r+0x94a>
 800c32c:	4b09      	ldr	r3, [pc, #36]	; (800c354 <_dtoa_r+0xbd4>)
 800c32e:	f7ff ba95 	b.w	800b85c <_dtoa_r+0xdc>
 800c332:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c334:	2b00      	cmp	r3, #0
 800c336:	f47f aa6e 	bne.w	800b816 <_dtoa_r+0x96>
 800c33a:	4b07      	ldr	r3, [pc, #28]	; (800c358 <_dtoa_r+0xbd8>)
 800c33c:	f7ff ba8e 	b.w	800b85c <_dtoa_r+0xdc>
 800c340:	9b02      	ldr	r3, [sp, #8]
 800c342:	2b00      	cmp	r3, #0
 800c344:	dcae      	bgt.n	800c2a4 <_dtoa_r+0xb24>
 800c346:	9b06      	ldr	r3, [sp, #24]
 800c348:	2b02      	cmp	r3, #2
 800c34a:	f73f aea8 	bgt.w	800c09e <_dtoa_r+0x91e>
 800c34e:	e7a9      	b.n	800c2a4 <_dtoa_r+0xb24>
 800c350:	0800e788 	.word	0x0800e788
 800c354:	0800e58c 	.word	0x0800e58c
 800c358:	0800e709 	.word	0x0800e709

0800c35c <__sflush_r>:
 800c35c:	898a      	ldrh	r2, [r1, #12]
 800c35e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c362:	4605      	mov	r5, r0
 800c364:	0710      	lsls	r0, r2, #28
 800c366:	460c      	mov	r4, r1
 800c368:	d458      	bmi.n	800c41c <__sflush_r+0xc0>
 800c36a:	684b      	ldr	r3, [r1, #4]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	dc05      	bgt.n	800c37c <__sflush_r+0x20>
 800c370:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c372:	2b00      	cmp	r3, #0
 800c374:	dc02      	bgt.n	800c37c <__sflush_r+0x20>
 800c376:	2000      	movs	r0, #0
 800c378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c37c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c37e:	2e00      	cmp	r6, #0
 800c380:	d0f9      	beq.n	800c376 <__sflush_r+0x1a>
 800c382:	2300      	movs	r3, #0
 800c384:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c388:	682f      	ldr	r7, [r5, #0]
 800c38a:	602b      	str	r3, [r5, #0]
 800c38c:	d032      	beq.n	800c3f4 <__sflush_r+0x98>
 800c38e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c390:	89a3      	ldrh	r3, [r4, #12]
 800c392:	075a      	lsls	r2, r3, #29
 800c394:	d505      	bpl.n	800c3a2 <__sflush_r+0x46>
 800c396:	6863      	ldr	r3, [r4, #4]
 800c398:	1ac0      	subs	r0, r0, r3
 800c39a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c39c:	b10b      	cbz	r3, 800c3a2 <__sflush_r+0x46>
 800c39e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c3a0:	1ac0      	subs	r0, r0, r3
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	4602      	mov	r2, r0
 800c3a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c3a8:	6a21      	ldr	r1, [r4, #32]
 800c3aa:	4628      	mov	r0, r5
 800c3ac:	47b0      	blx	r6
 800c3ae:	1c43      	adds	r3, r0, #1
 800c3b0:	89a3      	ldrh	r3, [r4, #12]
 800c3b2:	d106      	bne.n	800c3c2 <__sflush_r+0x66>
 800c3b4:	6829      	ldr	r1, [r5, #0]
 800c3b6:	291d      	cmp	r1, #29
 800c3b8:	d82c      	bhi.n	800c414 <__sflush_r+0xb8>
 800c3ba:	4a2a      	ldr	r2, [pc, #168]	; (800c464 <__sflush_r+0x108>)
 800c3bc:	40ca      	lsrs	r2, r1
 800c3be:	07d6      	lsls	r6, r2, #31
 800c3c0:	d528      	bpl.n	800c414 <__sflush_r+0xb8>
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	6062      	str	r2, [r4, #4]
 800c3c6:	04d9      	lsls	r1, r3, #19
 800c3c8:	6922      	ldr	r2, [r4, #16]
 800c3ca:	6022      	str	r2, [r4, #0]
 800c3cc:	d504      	bpl.n	800c3d8 <__sflush_r+0x7c>
 800c3ce:	1c42      	adds	r2, r0, #1
 800c3d0:	d101      	bne.n	800c3d6 <__sflush_r+0x7a>
 800c3d2:	682b      	ldr	r3, [r5, #0]
 800c3d4:	b903      	cbnz	r3, 800c3d8 <__sflush_r+0x7c>
 800c3d6:	6560      	str	r0, [r4, #84]	; 0x54
 800c3d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c3da:	602f      	str	r7, [r5, #0]
 800c3dc:	2900      	cmp	r1, #0
 800c3de:	d0ca      	beq.n	800c376 <__sflush_r+0x1a>
 800c3e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c3e4:	4299      	cmp	r1, r3
 800c3e6:	d002      	beq.n	800c3ee <__sflush_r+0x92>
 800c3e8:	4628      	mov	r0, r5
 800c3ea:	f001 fa3b 	bl	800d864 <_free_r>
 800c3ee:	2000      	movs	r0, #0
 800c3f0:	6360      	str	r0, [r4, #52]	; 0x34
 800c3f2:	e7c1      	b.n	800c378 <__sflush_r+0x1c>
 800c3f4:	6a21      	ldr	r1, [r4, #32]
 800c3f6:	2301      	movs	r3, #1
 800c3f8:	4628      	mov	r0, r5
 800c3fa:	47b0      	blx	r6
 800c3fc:	1c41      	adds	r1, r0, #1
 800c3fe:	d1c7      	bne.n	800c390 <__sflush_r+0x34>
 800c400:	682b      	ldr	r3, [r5, #0]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d0c4      	beq.n	800c390 <__sflush_r+0x34>
 800c406:	2b1d      	cmp	r3, #29
 800c408:	d001      	beq.n	800c40e <__sflush_r+0xb2>
 800c40a:	2b16      	cmp	r3, #22
 800c40c:	d101      	bne.n	800c412 <__sflush_r+0xb6>
 800c40e:	602f      	str	r7, [r5, #0]
 800c410:	e7b1      	b.n	800c376 <__sflush_r+0x1a>
 800c412:	89a3      	ldrh	r3, [r4, #12]
 800c414:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c418:	81a3      	strh	r3, [r4, #12]
 800c41a:	e7ad      	b.n	800c378 <__sflush_r+0x1c>
 800c41c:	690f      	ldr	r7, [r1, #16]
 800c41e:	2f00      	cmp	r7, #0
 800c420:	d0a9      	beq.n	800c376 <__sflush_r+0x1a>
 800c422:	0793      	lsls	r3, r2, #30
 800c424:	680e      	ldr	r6, [r1, #0]
 800c426:	bf08      	it	eq
 800c428:	694b      	ldreq	r3, [r1, #20]
 800c42a:	600f      	str	r7, [r1, #0]
 800c42c:	bf18      	it	ne
 800c42e:	2300      	movne	r3, #0
 800c430:	eba6 0807 	sub.w	r8, r6, r7
 800c434:	608b      	str	r3, [r1, #8]
 800c436:	f1b8 0f00 	cmp.w	r8, #0
 800c43a:	dd9c      	ble.n	800c376 <__sflush_r+0x1a>
 800c43c:	6a21      	ldr	r1, [r4, #32]
 800c43e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c440:	4643      	mov	r3, r8
 800c442:	463a      	mov	r2, r7
 800c444:	4628      	mov	r0, r5
 800c446:	47b0      	blx	r6
 800c448:	2800      	cmp	r0, #0
 800c44a:	dc06      	bgt.n	800c45a <__sflush_r+0xfe>
 800c44c:	89a3      	ldrh	r3, [r4, #12]
 800c44e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c452:	81a3      	strh	r3, [r4, #12]
 800c454:	f04f 30ff 	mov.w	r0, #4294967295
 800c458:	e78e      	b.n	800c378 <__sflush_r+0x1c>
 800c45a:	4407      	add	r7, r0
 800c45c:	eba8 0800 	sub.w	r8, r8, r0
 800c460:	e7e9      	b.n	800c436 <__sflush_r+0xda>
 800c462:	bf00      	nop
 800c464:	20400001 	.word	0x20400001

0800c468 <_fflush_r>:
 800c468:	b538      	push	{r3, r4, r5, lr}
 800c46a:	690b      	ldr	r3, [r1, #16]
 800c46c:	4605      	mov	r5, r0
 800c46e:	460c      	mov	r4, r1
 800c470:	b913      	cbnz	r3, 800c478 <_fflush_r+0x10>
 800c472:	2500      	movs	r5, #0
 800c474:	4628      	mov	r0, r5
 800c476:	bd38      	pop	{r3, r4, r5, pc}
 800c478:	b118      	cbz	r0, 800c482 <_fflush_r+0x1a>
 800c47a:	6983      	ldr	r3, [r0, #24]
 800c47c:	b90b      	cbnz	r3, 800c482 <_fflush_r+0x1a>
 800c47e:	f000 f887 	bl	800c590 <__sinit>
 800c482:	4b14      	ldr	r3, [pc, #80]	; (800c4d4 <_fflush_r+0x6c>)
 800c484:	429c      	cmp	r4, r3
 800c486:	d11b      	bne.n	800c4c0 <_fflush_r+0x58>
 800c488:	686c      	ldr	r4, [r5, #4]
 800c48a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d0ef      	beq.n	800c472 <_fflush_r+0xa>
 800c492:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c494:	07d0      	lsls	r0, r2, #31
 800c496:	d404      	bmi.n	800c4a2 <_fflush_r+0x3a>
 800c498:	0599      	lsls	r1, r3, #22
 800c49a:	d402      	bmi.n	800c4a2 <_fflush_r+0x3a>
 800c49c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c49e:	f000 fc88 	bl	800cdb2 <__retarget_lock_acquire_recursive>
 800c4a2:	4628      	mov	r0, r5
 800c4a4:	4621      	mov	r1, r4
 800c4a6:	f7ff ff59 	bl	800c35c <__sflush_r>
 800c4aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c4ac:	07da      	lsls	r2, r3, #31
 800c4ae:	4605      	mov	r5, r0
 800c4b0:	d4e0      	bmi.n	800c474 <_fflush_r+0xc>
 800c4b2:	89a3      	ldrh	r3, [r4, #12]
 800c4b4:	059b      	lsls	r3, r3, #22
 800c4b6:	d4dd      	bmi.n	800c474 <_fflush_r+0xc>
 800c4b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c4ba:	f000 fc7b 	bl	800cdb4 <__retarget_lock_release_recursive>
 800c4be:	e7d9      	b.n	800c474 <_fflush_r+0xc>
 800c4c0:	4b05      	ldr	r3, [pc, #20]	; (800c4d8 <_fflush_r+0x70>)
 800c4c2:	429c      	cmp	r4, r3
 800c4c4:	d101      	bne.n	800c4ca <_fflush_r+0x62>
 800c4c6:	68ac      	ldr	r4, [r5, #8]
 800c4c8:	e7df      	b.n	800c48a <_fflush_r+0x22>
 800c4ca:	4b04      	ldr	r3, [pc, #16]	; (800c4dc <_fflush_r+0x74>)
 800c4cc:	429c      	cmp	r4, r3
 800c4ce:	bf08      	it	eq
 800c4d0:	68ec      	ldreq	r4, [r5, #12]
 800c4d2:	e7da      	b.n	800c48a <_fflush_r+0x22>
 800c4d4:	0800e7bc 	.word	0x0800e7bc
 800c4d8:	0800e7dc 	.word	0x0800e7dc
 800c4dc:	0800e79c 	.word	0x0800e79c

0800c4e0 <std>:
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	b510      	push	{r4, lr}
 800c4e4:	4604      	mov	r4, r0
 800c4e6:	e9c0 3300 	strd	r3, r3, [r0]
 800c4ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c4ee:	6083      	str	r3, [r0, #8]
 800c4f0:	8181      	strh	r1, [r0, #12]
 800c4f2:	6643      	str	r3, [r0, #100]	; 0x64
 800c4f4:	81c2      	strh	r2, [r0, #14]
 800c4f6:	6183      	str	r3, [r0, #24]
 800c4f8:	4619      	mov	r1, r3
 800c4fa:	2208      	movs	r2, #8
 800c4fc:	305c      	adds	r0, #92	; 0x5c
 800c4fe:	f7fd fa0f 	bl	8009920 <memset>
 800c502:	4b05      	ldr	r3, [pc, #20]	; (800c518 <std+0x38>)
 800c504:	6263      	str	r3, [r4, #36]	; 0x24
 800c506:	4b05      	ldr	r3, [pc, #20]	; (800c51c <std+0x3c>)
 800c508:	62a3      	str	r3, [r4, #40]	; 0x28
 800c50a:	4b05      	ldr	r3, [pc, #20]	; (800c520 <std+0x40>)
 800c50c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c50e:	4b05      	ldr	r3, [pc, #20]	; (800c524 <std+0x44>)
 800c510:	6224      	str	r4, [r4, #32]
 800c512:	6323      	str	r3, [r4, #48]	; 0x30
 800c514:	bd10      	pop	{r4, pc}
 800c516:	bf00      	nop
 800c518:	0800dfc1 	.word	0x0800dfc1
 800c51c:	0800dfe3 	.word	0x0800dfe3
 800c520:	0800e01b 	.word	0x0800e01b
 800c524:	0800e03f 	.word	0x0800e03f

0800c528 <_cleanup_r>:
 800c528:	4901      	ldr	r1, [pc, #4]	; (800c530 <_cleanup_r+0x8>)
 800c52a:	f000 b8af 	b.w	800c68c <_fwalk_reent>
 800c52e:	bf00      	nop
 800c530:	0800c469 	.word	0x0800c469

0800c534 <__sfmoreglue>:
 800c534:	b570      	push	{r4, r5, r6, lr}
 800c536:	2268      	movs	r2, #104	; 0x68
 800c538:	1e4d      	subs	r5, r1, #1
 800c53a:	4355      	muls	r5, r2
 800c53c:	460e      	mov	r6, r1
 800c53e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c542:	f001 f9fb 	bl	800d93c <_malloc_r>
 800c546:	4604      	mov	r4, r0
 800c548:	b140      	cbz	r0, 800c55c <__sfmoreglue+0x28>
 800c54a:	2100      	movs	r1, #0
 800c54c:	e9c0 1600 	strd	r1, r6, [r0]
 800c550:	300c      	adds	r0, #12
 800c552:	60a0      	str	r0, [r4, #8]
 800c554:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c558:	f7fd f9e2 	bl	8009920 <memset>
 800c55c:	4620      	mov	r0, r4
 800c55e:	bd70      	pop	{r4, r5, r6, pc}

0800c560 <__sfp_lock_acquire>:
 800c560:	4801      	ldr	r0, [pc, #4]	; (800c568 <__sfp_lock_acquire+0x8>)
 800c562:	f000 bc26 	b.w	800cdb2 <__retarget_lock_acquire_recursive>
 800c566:	bf00      	nop
 800c568:	20000559 	.word	0x20000559

0800c56c <__sfp_lock_release>:
 800c56c:	4801      	ldr	r0, [pc, #4]	; (800c574 <__sfp_lock_release+0x8>)
 800c56e:	f000 bc21 	b.w	800cdb4 <__retarget_lock_release_recursive>
 800c572:	bf00      	nop
 800c574:	20000559 	.word	0x20000559

0800c578 <__sinit_lock_acquire>:
 800c578:	4801      	ldr	r0, [pc, #4]	; (800c580 <__sinit_lock_acquire+0x8>)
 800c57a:	f000 bc1a 	b.w	800cdb2 <__retarget_lock_acquire_recursive>
 800c57e:	bf00      	nop
 800c580:	2000055a 	.word	0x2000055a

0800c584 <__sinit_lock_release>:
 800c584:	4801      	ldr	r0, [pc, #4]	; (800c58c <__sinit_lock_release+0x8>)
 800c586:	f000 bc15 	b.w	800cdb4 <__retarget_lock_release_recursive>
 800c58a:	bf00      	nop
 800c58c:	2000055a 	.word	0x2000055a

0800c590 <__sinit>:
 800c590:	b510      	push	{r4, lr}
 800c592:	4604      	mov	r4, r0
 800c594:	f7ff fff0 	bl	800c578 <__sinit_lock_acquire>
 800c598:	69a3      	ldr	r3, [r4, #24]
 800c59a:	b11b      	cbz	r3, 800c5a4 <__sinit+0x14>
 800c59c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5a0:	f7ff bff0 	b.w	800c584 <__sinit_lock_release>
 800c5a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c5a8:	6523      	str	r3, [r4, #80]	; 0x50
 800c5aa:	4b13      	ldr	r3, [pc, #76]	; (800c5f8 <__sinit+0x68>)
 800c5ac:	4a13      	ldr	r2, [pc, #76]	; (800c5fc <__sinit+0x6c>)
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	62a2      	str	r2, [r4, #40]	; 0x28
 800c5b2:	42a3      	cmp	r3, r4
 800c5b4:	bf04      	itt	eq
 800c5b6:	2301      	moveq	r3, #1
 800c5b8:	61a3      	streq	r3, [r4, #24]
 800c5ba:	4620      	mov	r0, r4
 800c5bc:	f000 f820 	bl	800c600 <__sfp>
 800c5c0:	6060      	str	r0, [r4, #4]
 800c5c2:	4620      	mov	r0, r4
 800c5c4:	f000 f81c 	bl	800c600 <__sfp>
 800c5c8:	60a0      	str	r0, [r4, #8]
 800c5ca:	4620      	mov	r0, r4
 800c5cc:	f000 f818 	bl	800c600 <__sfp>
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	60e0      	str	r0, [r4, #12]
 800c5d4:	2104      	movs	r1, #4
 800c5d6:	6860      	ldr	r0, [r4, #4]
 800c5d8:	f7ff ff82 	bl	800c4e0 <std>
 800c5dc:	68a0      	ldr	r0, [r4, #8]
 800c5de:	2201      	movs	r2, #1
 800c5e0:	2109      	movs	r1, #9
 800c5e2:	f7ff ff7d 	bl	800c4e0 <std>
 800c5e6:	68e0      	ldr	r0, [r4, #12]
 800c5e8:	2202      	movs	r2, #2
 800c5ea:	2112      	movs	r1, #18
 800c5ec:	f7ff ff78 	bl	800c4e0 <std>
 800c5f0:	2301      	movs	r3, #1
 800c5f2:	61a3      	str	r3, [r4, #24]
 800c5f4:	e7d2      	b.n	800c59c <__sinit+0xc>
 800c5f6:	bf00      	nop
 800c5f8:	0800e578 	.word	0x0800e578
 800c5fc:	0800c529 	.word	0x0800c529

0800c600 <__sfp>:
 800c600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c602:	4607      	mov	r7, r0
 800c604:	f7ff ffac 	bl	800c560 <__sfp_lock_acquire>
 800c608:	4b1e      	ldr	r3, [pc, #120]	; (800c684 <__sfp+0x84>)
 800c60a:	681e      	ldr	r6, [r3, #0]
 800c60c:	69b3      	ldr	r3, [r6, #24]
 800c60e:	b913      	cbnz	r3, 800c616 <__sfp+0x16>
 800c610:	4630      	mov	r0, r6
 800c612:	f7ff ffbd 	bl	800c590 <__sinit>
 800c616:	3648      	adds	r6, #72	; 0x48
 800c618:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c61c:	3b01      	subs	r3, #1
 800c61e:	d503      	bpl.n	800c628 <__sfp+0x28>
 800c620:	6833      	ldr	r3, [r6, #0]
 800c622:	b30b      	cbz	r3, 800c668 <__sfp+0x68>
 800c624:	6836      	ldr	r6, [r6, #0]
 800c626:	e7f7      	b.n	800c618 <__sfp+0x18>
 800c628:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c62c:	b9d5      	cbnz	r5, 800c664 <__sfp+0x64>
 800c62e:	4b16      	ldr	r3, [pc, #88]	; (800c688 <__sfp+0x88>)
 800c630:	60e3      	str	r3, [r4, #12]
 800c632:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c636:	6665      	str	r5, [r4, #100]	; 0x64
 800c638:	f000 fbba 	bl	800cdb0 <__retarget_lock_init_recursive>
 800c63c:	f7ff ff96 	bl	800c56c <__sfp_lock_release>
 800c640:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c644:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c648:	6025      	str	r5, [r4, #0]
 800c64a:	61a5      	str	r5, [r4, #24]
 800c64c:	2208      	movs	r2, #8
 800c64e:	4629      	mov	r1, r5
 800c650:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c654:	f7fd f964 	bl	8009920 <memset>
 800c658:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c65c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c660:	4620      	mov	r0, r4
 800c662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c664:	3468      	adds	r4, #104	; 0x68
 800c666:	e7d9      	b.n	800c61c <__sfp+0x1c>
 800c668:	2104      	movs	r1, #4
 800c66a:	4638      	mov	r0, r7
 800c66c:	f7ff ff62 	bl	800c534 <__sfmoreglue>
 800c670:	4604      	mov	r4, r0
 800c672:	6030      	str	r0, [r6, #0]
 800c674:	2800      	cmp	r0, #0
 800c676:	d1d5      	bne.n	800c624 <__sfp+0x24>
 800c678:	f7ff ff78 	bl	800c56c <__sfp_lock_release>
 800c67c:	230c      	movs	r3, #12
 800c67e:	603b      	str	r3, [r7, #0]
 800c680:	e7ee      	b.n	800c660 <__sfp+0x60>
 800c682:	bf00      	nop
 800c684:	0800e578 	.word	0x0800e578
 800c688:	ffff0001 	.word	0xffff0001

0800c68c <_fwalk_reent>:
 800c68c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c690:	4606      	mov	r6, r0
 800c692:	4688      	mov	r8, r1
 800c694:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c698:	2700      	movs	r7, #0
 800c69a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c69e:	f1b9 0901 	subs.w	r9, r9, #1
 800c6a2:	d505      	bpl.n	800c6b0 <_fwalk_reent+0x24>
 800c6a4:	6824      	ldr	r4, [r4, #0]
 800c6a6:	2c00      	cmp	r4, #0
 800c6a8:	d1f7      	bne.n	800c69a <_fwalk_reent+0xe>
 800c6aa:	4638      	mov	r0, r7
 800c6ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6b0:	89ab      	ldrh	r3, [r5, #12]
 800c6b2:	2b01      	cmp	r3, #1
 800c6b4:	d907      	bls.n	800c6c6 <_fwalk_reent+0x3a>
 800c6b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c6ba:	3301      	adds	r3, #1
 800c6bc:	d003      	beq.n	800c6c6 <_fwalk_reent+0x3a>
 800c6be:	4629      	mov	r1, r5
 800c6c0:	4630      	mov	r0, r6
 800c6c2:	47c0      	blx	r8
 800c6c4:	4307      	orrs	r7, r0
 800c6c6:	3568      	adds	r5, #104	; 0x68
 800c6c8:	e7e9      	b.n	800c69e <_fwalk_reent+0x12>

0800c6ca <rshift>:
 800c6ca:	6903      	ldr	r3, [r0, #16]
 800c6cc:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c6d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c6d4:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c6d8:	f100 0414 	add.w	r4, r0, #20
 800c6dc:	dd45      	ble.n	800c76a <rshift+0xa0>
 800c6de:	f011 011f 	ands.w	r1, r1, #31
 800c6e2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c6e6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c6ea:	d10c      	bne.n	800c706 <rshift+0x3c>
 800c6ec:	f100 0710 	add.w	r7, r0, #16
 800c6f0:	4629      	mov	r1, r5
 800c6f2:	42b1      	cmp	r1, r6
 800c6f4:	d334      	bcc.n	800c760 <rshift+0x96>
 800c6f6:	1a9b      	subs	r3, r3, r2
 800c6f8:	009b      	lsls	r3, r3, #2
 800c6fa:	1eea      	subs	r2, r5, #3
 800c6fc:	4296      	cmp	r6, r2
 800c6fe:	bf38      	it	cc
 800c700:	2300      	movcc	r3, #0
 800c702:	4423      	add	r3, r4
 800c704:	e015      	b.n	800c732 <rshift+0x68>
 800c706:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c70a:	f1c1 0820 	rsb	r8, r1, #32
 800c70e:	40cf      	lsrs	r7, r1
 800c710:	f105 0e04 	add.w	lr, r5, #4
 800c714:	46a1      	mov	r9, r4
 800c716:	4576      	cmp	r6, lr
 800c718:	46f4      	mov	ip, lr
 800c71a:	d815      	bhi.n	800c748 <rshift+0x7e>
 800c71c:	1a9a      	subs	r2, r3, r2
 800c71e:	0092      	lsls	r2, r2, #2
 800c720:	3a04      	subs	r2, #4
 800c722:	3501      	adds	r5, #1
 800c724:	42ae      	cmp	r6, r5
 800c726:	bf38      	it	cc
 800c728:	2200      	movcc	r2, #0
 800c72a:	18a3      	adds	r3, r4, r2
 800c72c:	50a7      	str	r7, [r4, r2]
 800c72e:	b107      	cbz	r7, 800c732 <rshift+0x68>
 800c730:	3304      	adds	r3, #4
 800c732:	1b1a      	subs	r2, r3, r4
 800c734:	42a3      	cmp	r3, r4
 800c736:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c73a:	bf08      	it	eq
 800c73c:	2300      	moveq	r3, #0
 800c73e:	6102      	str	r2, [r0, #16]
 800c740:	bf08      	it	eq
 800c742:	6143      	streq	r3, [r0, #20]
 800c744:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c748:	f8dc c000 	ldr.w	ip, [ip]
 800c74c:	fa0c fc08 	lsl.w	ip, ip, r8
 800c750:	ea4c 0707 	orr.w	r7, ip, r7
 800c754:	f849 7b04 	str.w	r7, [r9], #4
 800c758:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c75c:	40cf      	lsrs	r7, r1
 800c75e:	e7da      	b.n	800c716 <rshift+0x4c>
 800c760:	f851 cb04 	ldr.w	ip, [r1], #4
 800c764:	f847 cf04 	str.w	ip, [r7, #4]!
 800c768:	e7c3      	b.n	800c6f2 <rshift+0x28>
 800c76a:	4623      	mov	r3, r4
 800c76c:	e7e1      	b.n	800c732 <rshift+0x68>

0800c76e <__hexdig_fun>:
 800c76e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c772:	2b09      	cmp	r3, #9
 800c774:	d802      	bhi.n	800c77c <__hexdig_fun+0xe>
 800c776:	3820      	subs	r0, #32
 800c778:	b2c0      	uxtb	r0, r0
 800c77a:	4770      	bx	lr
 800c77c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c780:	2b05      	cmp	r3, #5
 800c782:	d801      	bhi.n	800c788 <__hexdig_fun+0x1a>
 800c784:	3847      	subs	r0, #71	; 0x47
 800c786:	e7f7      	b.n	800c778 <__hexdig_fun+0xa>
 800c788:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c78c:	2b05      	cmp	r3, #5
 800c78e:	d801      	bhi.n	800c794 <__hexdig_fun+0x26>
 800c790:	3827      	subs	r0, #39	; 0x27
 800c792:	e7f1      	b.n	800c778 <__hexdig_fun+0xa>
 800c794:	2000      	movs	r0, #0
 800c796:	4770      	bx	lr

0800c798 <__gethex>:
 800c798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c79c:	ed2d 8b02 	vpush	{d8}
 800c7a0:	b089      	sub	sp, #36	; 0x24
 800c7a2:	ee08 0a10 	vmov	s16, r0
 800c7a6:	9304      	str	r3, [sp, #16]
 800c7a8:	4bb4      	ldr	r3, [pc, #720]	; (800ca7c <__gethex+0x2e4>)
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	9301      	str	r3, [sp, #4]
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	468b      	mov	fp, r1
 800c7b2:	4690      	mov	r8, r2
 800c7b4:	f7f3 fd0c 	bl	80001d0 <strlen>
 800c7b8:	9b01      	ldr	r3, [sp, #4]
 800c7ba:	f8db 2000 	ldr.w	r2, [fp]
 800c7be:	4403      	add	r3, r0
 800c7c0:	4682      	mov	sl, r0
 800c7c2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c7c6:	9305      	str	r3, [sp, #20]
 800c7c8:	1c93      	adds	r3, r2, #2
 800c7ca:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c7ce:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c7d2:	32fe      	adds	r2, #254	; 0xfe
 800c7d4:	18d1      	adds	r1, r2, r3
 800c7d6:	461f      	mov	r7, r3
 800c7d8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c7dc:	9100      	str	r1, [sp, #0]
 800c7de:	2830      	cmp	r0, #48	; 0x30
 800c7e0:	d0f8      	beq.n	800c7d4 <__gethex+0x3c>
 800c7e2:	f7ff ffc4 	bl	800c76e <__hexdig_fun>
 800c7e6:	4604      	mov	r4, r0
 800c7e8:	2800      	cmp	r0, #0
 800c7ea:	d13a      	bne.n	800c862 <__gethex+0xca>
 800c7ec:	9901      	ldr	r1, [sp, #4]
 800c7ee:	4652      	mov	r2, sl
 800c7f0:	4638      	mov	r0, r7
 800c7f2:	f001 fc28 	bl	800e046 <strncmp>
 800c7f6:	4605      	mov	r5, r0
 800c7f8:	2800      	cmp	r0, #0
 800c7fa:	d168      	bne.n	800c8ce <__gethex+0x136>
 800c7fc:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c800:	eb07 060a 	add.w	r6, r7, sl
 800c804:	f7ff ffb3 	bl	800c76e <__hexdig_fun>
 800c808:	2800      	cmp	r0, #0
 800c80a:	d062      	beq.n	800c8d2 <__gethex+0x13a>
 800c80c:	4633      	mov	r3, r6
 800c80e:	7818      	ldrb	r0, [r3, #0]
 800c810:	2830      	cmp	r0, #48	; 0x30
 800c812:	461f      	mov	r7, r3
 800c814:	f103 0301 	add.w	r3, r3, #1
 800c818:	d0f9      	beq.n	800c80e <__gethex+0x76>
 800c81a:	f7ff ffa8 	bl	800c76e <__hexdig_fun>
 800c81e:	2301      	movs	r3, #1
 800c820:	fab0 f480 	clz	r4, r0
 800c824:	0964      	lsrs	r4, r4, #5
 800c826:	4635      	mov	r5, r6
 800c828:	9300      	str	r3, [sp, #0]
 800c82a:	463a      	mov	r2, r7
 800c82c:	4616      	mov	r6, r2
 800c82e:	3201      	adds	r2, #1
 800c830:	7830      	ldrb	r0, [r6, #0]
 800c832:	f7ff ff9c 	bl	800c76e <__hexdig_fun>
 800c836:	2800      	cmp	r0, #0
 800c838:	d1f8      	bne.n	800c82c <__gethex+0x94>
 800c83a:	9901      	ldr	r1, [sp, #4]
 800c83c:	4652      	mov	r2, sl
 800c83e:	4630      	mov	r0, r6
 800c840:	f001 fc01 	bl	800e046 <strncmp>
 800c844:	b980      	cbnz	r0, 800c868 <__gethex+0xd0>
 800c846:	b94d      	cbnz	r5, 800c85c <__gethex+0xc4>
 800c848:	eb06 050a 	add.w	r5, r6, sl
 800c84c:	462a      	mov	r2, r5
 800c84e:	4616      	mov	r6, r2
 800c850:	3201      	adds	r2, #1
 800c852:	7830      	ldrb	r0, [r6, #0]
 800c854:	f7ff ff8b 	bl	800c76e <__hexdig_fun>
 800c858:	2800      	cmp	r0, #0
 800c85a:	d1f8      	bne.n	800c84e <__gethex+0xb6>
 800c85c:	1bad      	subs	r5, r5, r6
 800c85e:	00ad      	lsls	r5, r5, #2
 800c860:	e004      	b.n	800c86c <__gethex+0xd4>
 800c862:	2400      	movs	r4, #0
 800c864:	4625      	mov	r5, r4
 800c866:	e7e0      	b.n	800c82a <__gethex+0x92>
 800c868:	2d00      	cmp	r5, #0
 800c86a:	d1f7      	bne.n	800c85c <__gethex+0xc4>
 800c86c:	7833      	ldrb	r3, [r6, #0]
 800c86e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c872:	2b50      	cmp	r3, #80	; 0x50
 800c874:	d13b      	bne.n	800c8ee <__gethex+0x156>
 800c876:	7873      	ldrb	r3, [r6, #1]
 800c878:	2b2b      	cmp	r3, #43	; 0x2b
 800c87a:	d02c      	beq.n	800c8d6 <__gethex+0x13e>
 800c87c:	2b2d      	cmp	r3, #45	; 0x2d
 800c87e:	d02e      	beq.n	800c8de <__gethex+0x146>
 800c880:	1c71      	adds	r1, r6, #1
 800c882:	f04f 0900 	mov.w	r9, #0
 800c886:	7808      	ldrb	r0, [r1, #0]
 800c888:	f7ff ff71 	bl	800c76e <__hexdig_fun>
 800c88c:	1e43      	subs	r3, r0, #1
 800c88e:	b2db      	uxtb	r3, r3
 800c890:	2b18      	cmp	r3, #24
 800c892:	d82c      	bhi.n	800c8ee <__gethex+0x156>
 800c894:	f1a0 0210 	sub.w	r2, r0, #16
 800c898:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c89c:	f7ff ff67 	bl	800c76e <__hexdig_fun>
 800c8a0:	1e43      	subs	r3, r0, #1
 800c8a2:	b2db      	uxtb	r3, r3
 800c8a4:	2b18      	cmp	r3, #24
 800c8a6:	d91d      	bls.n	800c8e4 <__gethex+0x14c>
 800c8a8:	f1b9 0f00 	cmp.w	r9, #0
 800c8ac:	d000      	beq.n	800c8b0 <__gethex+0x118>
 800c8ae:	4252      	negs	r2, r2
 800c8b0:	4415      	add	r5, r2
 800c8b2:	f8cb 1000 	str.w	r1, [fp]
 800c8b6:	b1e4      	cbz	r4, 800c8f2 <__gethex+0x15a>
 800c8b8:	9b00      	ldr	r3, [sp, #0]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	bf14      	ite	ne
 800c8be:	2700      	movne	r7, #0
 800c8c0:	2706      	moveq	r7, #6
 800c8c2:	4638      	mov	r0, r7
 800c8c4:	b009      	add	sp, #36	; 0x24
 800c8c6:	ecbd 8b02 	vpop	{d8}
 800c8ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8ce:	463e      	mov	r6, r7
 800c8d0:	4625      	mov	r5, r4
 800c8d2:	2401      	movs	r4, #1
 800c8d4:	e7ca      	b.n	800c86c <__gethex+0xd4>
 800c8d6:	f04f 0900 	mov.w	r9, #0
 800c8da:	1cb1      	adds	r1, r6, #2
 800c8dc:	e7d3      	b.n	800c886 <__gethex+0xee>
 800c8de:	f04f 0901 	mov.w	r9, #1
 800c8e2:	e7fa      	b.n	800c8da <__gethex+0x142>
 800c8e4:	230a      	movs	r3, #10
 800c8e6:	fb03 0202 	mla	r2, r3, r2, r0
 800c8ea:	3a10      	subs	r2, #16
 800c8ec:	e7d4      	b.n	800c898 <__gethex+0x100>
 800c8ee:	4631      	mov	r1, r6
 800c8f0:	e7df      	b.n	800c8b2 <__gethex+0x11a>
 800c8f2:	1bf3      	subs	r3, r6, r7
 800c8f4:	3b01      	subs	r3, #1
 800c8f6:	4621      	mov	r1, r4
 800c8f8:	2b07      	cmp	r3, #7
 800c8fa:	dc0b      	bgt.n	800c914 <__gethex+0x17c>
 800c8fc:	ee18 0a10 	vmov	r0, s16
 800c900:	f000 fad8 	bl	800ceb4 <_Balloc>
 800c904:	4604      	mov	r4, r0
 800c906:	b940      	cbnz	r0, 800c91a <__gethex+0x182>
 800c908:	4b5d      	ldr	r3, [pc, #372]	; (800ca80 <__gethex+0x2e8>)
 800c90a:	4602      	mov	r2, r0
 800c90c:	21de      	movs	r1, #222	; 0xde
 800c90e:	485d      	ldr	r0, [pc, #372]	; (800ca84 <__gethex+0x2ec>)
 800c910:	f001 fbcc 	bl	800e0ac <__assert_func>
 800c914:	3101      	adds	r1, #1
 800c916:	105b      	asrs	r3, r3, #1
 800c918:	e7ee      	b.n	800c8f8 <__gethex+0x160>
 800c91a:	f100 0914 	add.w	r9, r0, #20
 800c91e:	f04f 0b00 	mov.w	fp, #0
 800c922:	f1ca 0301 	rsb	r3, sl, #1
 800c926:	f8cd 9008 	str.w	r9, [sp, #8]
 800c92a:	f8cd b000 	str.w	fp, [sp]
 800c92e:	9306      	str	r3, [sp, #24]
 800c930:	42b7      	cmp	r7, r6
 800c932:	d340      	bcc.n	800c9b6 <__gethex+0x21e>
 800c934:	9802      	ldr	r0, [sp, #8]
 800c936:	9b00      	ldr	r3, [sp, #0]
 800c938:	f840 3b04 	str.w	r3, [r0], #4
 800c93c:	eba0 0009 	sub.w	r0, r0, r9
 800c940:	1080      	asrs	r0, r0, #2
 800c942:	0146      	lsls	r6, r0, #5
 800c944:	6120      	str	r0, [r4, #16]
 800c946:	4618      	mov	r0, r3
 800c948:	f000 fba6 	bl	800d098 <__hi0bits>
 800c94c:	1a30      	subs	r0, r6, r0
 800c94e:	f8d8 6000 	ldr.w	r6, [r8]
 800c952:	42b0      	cmp	r0, r6
 800c954:	dd63      	ble.n	800ca1e <__gethex+0x286>
 800c956:	1b87      	subs	r7, r0, r6
 800c958:	4639      	mov	r1, r7
 800c95a:	4620      	mov	r0, r4
 800c95c:	f000 ff4a 	bl	800d7f4 <__any_on>
 800c960:	4682      	mov	sl, r0
 800c962:	b1a8      	cbz	r0, 800c990 <__gethex+0x1f8>
 800c964:	1e7b      	subs	r3, r7, #1
 800c966:	1159      	asrs	r1, r3, #5
 800c968:	f003 021f 	and.w	r2, r3, #31
 800c96c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c970:	f04f 0a01 	mov.w	sl, #1
 800c974:	fa0a f202 	lsl.w	r2, sl, r2
 800c978:	420a      	tst	r2, r1
 800c97a:	d009      	beq.n	800c990 <__gethex+0x1f8>
 800c97c:	4553      	cmp	r3, sl
 800c97e:	dd05      	ble.n	800c98c <__gethex+0x1f4>
 800c980:	1eb9      	subs	r1, r7, #2
 800c982:	4620      	mov	r0, r4
 800c984:	f000 ff36 	bl	800d7f4 <__any_on>
 800c988:	2800      	cmp	r0, #0
 800c98a:	d145      	bne.n	800ca18 <__gethex+0x280>
 800c98c:	f04f 0a02 	mov.w	sl, #2
 800c990:	4639      	mov	r1, r7
 800c992:	4620      	mov	r0, r4
 800c994:	f7ff fe99 	bl	800c6ca <rshift>
 800c998:	443d      	add	r5, r7
 800c99a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c99e:	42ab      	cmp	r3, r5
 800c9a0:	da4c      	bge.n	800ca3c <__gethex+0x2a4>
 800c9a2:	ee18 0a10 	vmov	r0, s16
 800c9a6:	4621      	mov	r1, r4
 800c9a8:	f000 fac4 	bl	800cf34 <_Bfree>
 800c9ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	6013      	str	r3, [r2, #0]
 800c9b2:	27a3      	movs	r7, #163	; 0xa3
 800c9b4:	e785      	b.n	800c8c2 <__gethex+0x12a>
 800c9b6:	1e73      	subs	r3, r6, #1
 800c9b8:	9a05      	ldr	r2, [sp, #20]
 800c9ba:	9303      	str	r3, [sp, #12]
 800c9bc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c9c0:	4293      	cmp	r3, r2
 800c9c2:	d019      	beq.n	800c9f8 <__gethex+0x260>
 800c9c4:	f1bb 0f20 	cmp.w	fp, #32
 800c9c8:	d107      	bne.n	800c9da <__gethex+0x242>
 800c9ca:	9b02      	ldr	r3, [sp, #8]
 800c9cc:	9a00      	ldr	r2, [sp, #0]
 800c9ce:	f843 2b04 	str.w	r2, [r3], #4
 800c9d2:	9302      	str	r3, [sp, #8]
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	9300      	str	r3, [sp, #0]
 800c9d8:	469b      	mov	fp, r3
 800c9da:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c9de:	f7ff fec6 	bl	800c76e <__hexdig_fun>
 800c9e2:	9b00      	ldr	r3, [sp, #0]
 800c9e4:	f000 000f 	and.w	r0, r0, #15
 800c9e8:	fa00 f00b 	lsl.w	r0, r0, fp
 800c9ec:	4303      	orrs	r3, r0
 800c9ee:	9300      	str	r3, [sp, #0]
 800c9f0:	f10b 0b04 	add.w	fp, fp, #4
 800c9f4:	9b03      	ldr	r3, [sp, #12]
 800c9f6:	e00d      	b.n	800ca14 <__gethex+0x27c>
 800c9f8:	9b03      	ldr	r3, [sp, #12]
 800c9fa:	9a06      	ldr	r2, [sp, #24]
 800c9fc:	4413      	add	r3, r2
 800c9fe:	42bb      	cmp	r3, r7
 800ca00:	d3e0      	bcc.n	800c9c4 <__gethex+0x22c>
 800ca02:	4618      	mov	r0, r3
 800ca04:	9901      	ldr	r1, [sp, #4]
 800ca06:	9307      	str	r3, [sp, #28]
 800ca08:	4652      	mov	r2, sl
 800ca0a:	f001 fb1c 	bl	800e046 <strncmp>
 800ca0e:	9b07      	ldr	r3, [sp, #28]
 800ca10:	2800      	cmp	r0, #0
 800ca12:	d1d7      	bne.n	800c9c4 <__gethex+0x22c>
 800ca14:	461e      	mov	r6, r3
 800ca16:	e78b      	b.n	800c930 <__gethex+0x198>
 800ca18:	f04f 0a03 	mov.w	sl, #3
 800ca1c:	e7b8      	b.n	800c990 <__gethex+0x1f8>
 800ca1e:	da0a      	bge.n	800ca36 <__gethex+0x29e>
 800ca20:	1a37      	subs	r7, r6, r0
 800ca22:	4621      	mov	r1, r4
 800ca24:	ee18 0a10 	vmov	r0, s16
 800ca28:	463a      	mov	r2, r7
 800ca2a:	f000 fc9f 	bl	800d36c <__lshift>
 800ca2e:	1bed      	subs	r5, r5, r7
 800ca30:	4604      	mov	r4, r0
 800ca32:	f100 0914 	add.w	r9, r0, #20
 800ca36:	f04f 0a00 	mov.w	sl, #0
 800ca3a:	e7ae      	b.n	800c99a <__gethex+0x202>
 800ca3c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ca40:	42a8      	cmp	r0, r5
 800ca42:	dd72      	ble.n	800cb2a <__gethex+0x392>
 800ca44:	1b45      	subs	r5, r0, r5
 800ca46:	42ae      	cmp	r6, r5
 800ca48:	dc36      	bgt.n	800cab8 <__gethex+0x320>
 800ca4a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ca4e:	2b02      	cmp	r3, #2
 800ca50:	d02a      	beq.n	800caa8 <__gethex+0x310>
 800ca52:	2b03      	cmp	r3, #3
 800ca54:	d02c      	beq.n	800cab0 <__gethex+0x318>
 800ca56:	2b01      	cmp	r3, #1
 800ca58:	d11c      	bne.n	800ca94 <__gethex+0x2fc>
 800ca5a:	42ae      	cmp	r6, r5
 800ca5c:	d11a      	bne.n	800ca94 <__gethex+0x2fc>
 800ca5e:	2e01      	cmp	r6, #1
 800ca60:	d112      	bne.n	800ca88 <__gethex+0x2f0>
 800ca62:	9a04      	ldr	r2, [sp, #16]
 800ca64:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ca68:	6013      	str	r3, [r2, #0]
 800ca6a:	2301      	movs	r3, #1
 800ca6c:	6123      	str	r3, [r4, #16]
 800ca6e:	f8c9 3000 	str.w	r3, [r9]
 800ca72:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ca74:	2762      	movs	r7, #98	; 0x62
 800ca76:	601c      	str	r4, [r3, #0]
 800ca78:	e723      	b.n	800c8c2 <__gethex+0x12a>
 800ca7a:	bf00      	nop
 800ca7c:	0800e864 	.word	0x0800e864
 800ca80:	0800e788 	.word	0x0800e788
 800ca84:	0800e7fc 	.word	0x0800e7fc
 800ca88:	1e71      	subs	r1, r6, #1
 800ca8a:	4620      	mov	r0, r4
 800ca8c:	f000 feb2 	bl	800d7f4 <__any_on>
 800ca90:	2800      	cmp	r0, #0
 800ca92:	d1e6      	bne.n	800ca62 <__gethex+0x2ca>
 800ca94:	ee18 0a10 	vmov	r0, s16
 800ca98:	4621      	mov	r1, r4
 800ca9a:	f000 fa4b 	bl	800cf34 <_Bfree>
 800ca9e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800caa0:	2300      	movs	r3, #0
 800caa2:	6013      	str	r3, [r2, #0]
 800caa4:	2750      	movs	r7, #80	; 0x50
 800caa6:	e70c      	b.n	800c8c2 <__gethex+0x12a>
 800caa8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d1f2      	bne.n	800ca94 <__gethex+0x2fc>
 800caae:	e7d8      	b.n	800ca62 <__gethex+0x2ca>
 800cab0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d1d5      	bne.n	800ca62 <__gethex+0x2ca>
 800cab6:	e7ed      	b.n	800ca94 <__gethex+0x2fc>
 800cab8:	1e6f      	subs	r7, r5, #1
 800caba:	f1ba 0f00 	cmp.w	sl, #0
 800cabe:	d131      	bne.n	800cb24 <__gethex+0x38c>
 800cac0:	b127      	cbz	r7, 800cacc <__gethex+0x334>
 800cac2:	4639      	mov	r1, r7
 800cac4:	4620      	mov	r0, r4
 800cac6:	f000 fe95 	bl	800d7f4 <__any_on>
 800caca:	4682      	mov	sl, r0
 800cacc:	117b      	asrs	r3, r7, #5
 800cace:	2101      	movs	r1, #1
 800cad0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800cad4:	f007 071f 	and.w	r7, r7, #31
 800cad8:	fa01 f707 	lsl.w	r7, r1, r7
 800cadc:	421f      	tst	r7, r3
 800cade:	4629      	mov	r1, r5
 800cae0:	4620      	mov	r0, r4
 800cae2:	bf18      	it	ne
 800cae4:	f04a 0a02 	orrne.w	sl, sl, #2
 800cae8:	1b76      	subs	r6, r6, r5
 800caea:	f7ff fdee 	bl	800c6ca <rshift>
 800caee:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800caf2:	2702      	movs	r7, #2
 800caf4:	f1ba 0f00 	cmp.w	sl, #0
 800caf8:	d048      	beq.n	800cb8c <__gethex+0x3f4>
 800cafa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cafe:	2b02      	cmp	r3, #2
 800cb00:	d015      	beq.n	800cb2e <__gethex+0x396>
 800cb02:	2b03      	cmp	r3, #3
 800cb04:	d017      	beq.n	800cb36 <__gethex+0x39e>
 800cb06:	2b01      	cmp	r3, #1
 800cb08:	d109      	bne.n	800cb1e <__gethex+0x386>
 800cb0a:	f01a 0f02 	tst.w	sl, #2
 800cb0e:	d006      	beq.n	800cb1e <__gethex+0x386>
 800cb10:	f8d9 0000 	ldr.w	r0, [r9]
 800cb14:	ea4a 0a00 	orr.w	sl, sl, r0
 800cb18:	f01a 0f01 	tst.w	sl, #1
 800cb1c:	d10e      	bne.n	800cb3c <__gethex+0x3a4>
 800cb1e:	f047 0710 	orr.w	r7, r7, #16
 800cb22:	e033      	b.n	800cb8c <__gethex+0x3f4>
 800cb24:	f04f 0a01 	mov.w	sl, #1
 800cb28:	e7d0      	b.n	800cacc <__gethex+0x334>
 800cb2a:	2701      	movs	r7, #1
 800cb2c:	e7e2      	b.n	800caf4 <__gethex+0x35c>
 800cb2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cb30:	f1c3 0301 	rsb	r3, r3, #1
 800cb34:	9315      	str	r3, [sp, #84]	; 0x54
 800cb36:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d0f0      	beq.n	800cb1e <__gethex+0x386>
 800cb3c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cb40:	f104 0314 	add.w	r3, r4, #20
 800cb44:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800cb48:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800cb4c:	f04f 0c00 	mov.w	ip, #0
 800cb50:	4618      	mov	r0, r3
 800cb52:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb56:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cb5a:	d01c      	beq.n	800cb96 <__gethex+0x3fe>
 800cb5c:	3201      	adds	r2, #1
 800cb5e:	6002      	str	r2, [r0, #0]
 800cb60:	2f02      	cmp	r7, #2
 800cb62:	f104 0314 	add.w	r3, r4, #20
 800cb66:	d13f      	bne.n	800cbe8 <__gethex+0x450>
 800cb68:	f8d8 2000 	ldr.w	r2, [r8]
 800cb6c:	3a01      	subs	r2, #1
 800cb6e:	42b2      	cmp	r2, r6
 800cb70:	d10a      	bne.n	800cb88 <__gethex+0x3f0>
 800cb72:	1171      	asrs	r1, r6, #5
 800cb74:	2201      	movs	r2, #1
 800cb76:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cb7a:	f006 061f 	and.w	r6, r6, #31
 800cb7e:	fa02 f606 	lsl.w	r6, r2, r6
 800cb82:	421e      	tst	r6, r3
 800cb84:	bf18      	it	ne
 800cb86:	4617      	movne	r7, r2
 800cb88:	f047 0720 	orr.w	r7, r7, #32
 800cb8c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cb8e:	601c      	str	r4, [r3, #0]
 800cb90:	9b04      	ldr	r3, [sp, #16]
 800cb92:	601d      	str	r5, [r3, #0]
 800cb94:	e695      	b.n	800c8c2 <__gethex+0x12a>
 800cb96:	4299      	cmp	r1, r3
 800cb98:	f843 cc04 	str.w	ip, [r3, #-4]
 800cb9c:	d8d8      	bhi.n	800cb50 <__gethex+0x3b8>
 800cb9e:	68a3      	ldr	r3, [r4, #8]
 800cba0:	459b      	cmp	fp, r3
 800cba2:	db19      	blt.n	800cbd8 <__gethex+0x440>
 800cba4:	6861      	ldr	r1, [r4, #4]
 800cba6:	ee18 0a10 	vmov	r0, s16
 800cbaa:	3101      	adds	r1, #1
 800cbac:	f000 f982 	bl	800ceb4 <_Balloc>
 800cbb0:	4681      	mov	r9, r0
 800cbb2:	b918      	cbnz	r0, 800cbbc <__gethex+0x424>
 800cbb4:	4b1a      	ldr	r3, [pc, #104]	; (800cc20 <__gethex+0x488>)
 800cbb6:	4602      	mov	r2, r0
 800cbb8:	2184      	movs	r1, #132	; 0x84
 800cbba:	e6a8      	b.n	800c90e <__gethex+0x176>
 800cbbc:	6922      	ldr	r2, [r4, #16]
 800cbbe:	3202      	adds	r2, #2
 800cbc0:	f104 010c 	add.w	r1, r4, #12
 800cbc4:	0092      	lsls	r2, r2, #2
 800cbc6:	300c      	adds	r0, #12
 800cbc8:	f7fc fe9c 	bl	8009904 <memcpy>
 800cbcc:	4621      	mov	r1, r4
 800cbce:	ee18 0a10 	vmov	r0, s16
 800cbd2:	f000 f9af 	bl	800cf34 <_Bfree>
 800cbd6:	464c      	mov	r4, r9
 800cbd8:	6923      	ldr	r3, [r4, #16]
 800cbda:	1c5a      	adds	r2, r3, #1
 800cbdc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cbe0:	6122      	str	r2, [r4, #16]
 800cbe2:	2201      	movs	r2, #1
 800cbe4:	615a      	str	r2, [r3, #20]
 800cbe6:	e7bb      	b.n	800cb60 <__gethex+0x3c8>
 800cbe8:	6922      	ldr	r2, [r4, #16]
 800cbea:	455a      	cmp	r2, fp
 800cbec:	dd0b      	ble.n	800cc06 <__gethex+0x46e>
 800cbee:	2101      	movs	r1, #1
 800cbf0:	4620      	mov	r0, r4
 800cbf2:	f7ff fd6a 	bl	800c6ca <rshift>
 800cbf6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cbfa:	3501      	adds	r5, #1
 800cbfc:	42ab      	cmp	r3, r5
 800cbfe:	f6ff aed0 	blt.w	800c9a2 <__gethex+0x20a>
 800cc02:	2701      	movs	r7, #1
 800cc04:	e7c0      	b.n	800cb88 <__gethex+0x3f0>
 800cc06:	f016 061f 	ands.w	r6, r6, #31
 800cc0a:	d0fa      	beq.n	800cc02 <__gethex+0x46a>
 800cc0c:	4453      	add	r3, sl
 800cc0e:	f1c6 0620 	rsb	r6, r6, #32
 800cc12:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800cc16:	f000 fa3f 	bl	800d098 <__hi0bits>
 800cc1a:	42b0      	cmp	r0, r6
 800cc1c:	dbe7      	blt.n	800cbee <__gethex+0x456>
 800cc1e:	e7f0      	b.n	800cc02 <__gethex+0x46a>
 800cc20:	0800e788 	.word	0x0800e788

0800cc24 <L_shift>:
 800cc24:	f1c2 0208 	rsb	r2, r2, #8
 800cc28:	0092      	lsls	r2, r2, #2
 800cc2a:	b570      	push	{r4, r5, r6, lr}
 800cc2c:	f1c2 0620 	rsb	r6, r2, #32
 800cc30:	6843      	ldr	r3, [r0, #4]
 800cc32:	6804      	ldr	r4, [r0, #0]
 800cc34:	fa03 f506 	lsl.w	r5, r3, r6
 800cc38:	432c      	orrs	r4, r5
 800cc3a:	40d3      	lsrs	r3, r2
 800cc3c:	6004      	str	r4, [r0, #0]
 800cc3e:	f840 3f04 	str.w	r3, [r0, #4]!
 800cc42:	4288      	cmp	r0, r1
 800cc44:	d3f4      	bcc.n	800cc30 <L_shift+0xc>
 800cc46:	bd70      	pop	{r4, r5, r6, pc}

0800cc48 <__match>:
 800cc48:	b530      	push	{r4, r5, lr}
 800cc4a:	6803      	ldr	r3, [r0, #0]
 800cc4c:	3301      	adds	r3, #1
 800cc4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc52:	b914      	cbnz	r4, 800cc5a <__match+0x12>
 800cc54:	6003      	str	r3, [r0, #0]
 800cc56:	2001      	movs	r0, #1
 800cc58:	bd30      	pop	{r4, r5, pc}
 800cc5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc5e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800cc62:	2d19      	cmp	r5, #25
 800cc64:	bf98      	it	ls
 800cc66:	3220      	addls	r2, #32
 800cc68:	42a2      	cmp	r2, r4
 800cc6a:	d0f0      	beq.n	800cc4e <__match+0x6>
 800cc6c:	2000      	movs	r0, #0
 800cc6e:	e7f3      	b.n	800cc58 <__match+0x10>

0800cc70 <__hexnan>:
 800cc70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc74:	680b      	ldr	r3, [r1, #0]
 800cc76:	115e      	asrs	r6, r3, #5
 800cc78:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cc7c:	f013 031f 	ands.w	r3, r3, #31
 800cc80:	b087      	sub	sp, #28
 800cc82:	bf18      	it	ne
 800cc84:	3604      	addne	r6, #4
 800cc86:	2500      	movs	r5, #0
 800cc88:	1f37      	subs	r7, r6, #4
 800cc8a:	4690      	mov	r8, r2
 800cc8c:	6802      	ldr	r2, [r0, #0]
 800cc8e:	9301      	str	r3, [sp, #4]
 800cc90:	4682      	mov	sl, r0
 800cc92:	f846 5c04 	str.w	r5, [r6, #-4]
 800cc96:	46b9      	mov	r9, r7
 800cc98:	463c      	mov	r4, r7
 800cc9a:	9502      	str	r5, [sp, #8]
 800cc9c:	46ab      	mov	fp, r5
 800cc9e:	7851      	ldrb	r1, [r2, #1]
 800cca0:	1c53      	adds	r3, r2, #1
 800cca2:	9303      	str	r3, [sp, #12]
 800cca4:	b341      	cbz	r1, 800ccf8 <__hexnan+0x88>
 800cca6:	4608      	mov	r0, r1
 800cca8:	9205      	str	r2, [sp, #20]
 800ccaa:	9104      	str	r1, [sp, #16]
 800ccac:	f7ff fd5f 	bl	800c76e <__hexdig_fun>
 800ccb0:	2800      	cmp	r0, #0
 800ccb2:	d14f      	bne.n	800cd54 <__hexnan+0xe4>
 800ccb4:	9904      	ldr	r1, [sp, #16]
 800ccb6:	9a05      	ldr	r2, [sp, #20]
 800ccb8:	2920      	cmp	r1, #32
 800ccba:	d818      	bhi.n	800ccee <__hexnan+0x7e>
 800ccbc:	9b02      	ldr	r3, [sp, #8]
 800ccbe:	459b      	cmp	fp, r3
 800ccc0:	dd13      	ble.n	800ccea <__hexnan+0x7a>
 800ccc2:	454c      	cmp	r4, r9
 800ccc4:	d206      	bcs.n	800ccd4 <__hexnan+0x64>
 800ccc6:	2d07      	cmp	r5, #7
 800ccc8:	dc04      	bgt.n	800ccd4 <__hexnan+0x64>
 800ccca:	462a      	mov	r2, r5
 800cccc:	4649      	mov	r1, r9
 800ccce:	4620      	mov	r0, r4
 800ccd0:	f7ff ffa8 	bl	800cc24 <L_shift>
 800ccd4:	4544      	cmp	r4, r8
 800ccd6:	d950      	bls.n	800cd7a <__hexnan+0x10a>
 800ccd8:	2300      	movs	r3, #0
 800ccda:	f1a4 0904 	sub.w	r9, r4, #4
 800ccde:	f844 3c04 	str.w	r3, [r4, #-4]
 800cce2:	f8cd b008 	str.w	fp, [sp, #8]
 800cce6:	464c      	mov	r4, r9
 800cce8:	461d      	mov	r5, r3
 800ccea:	9a03      	ldr	r2, [sp, #12]
 800ccec:	e7d7      	b.n	800cc9e <__hexnan+0x2e>
 800ccee:	2929      	cmp	r1, #41	; 0x29
 800ccf0:	d156      	bne.n	800cda0 <__hexnan+0x130>
 800ccf2:	3202      	adds	r2, #2
 800ccf4:	f8ca 2000 	str.w	r2, [sl]
 800ccf8:	f1bb 0f00 	cmp.w	fp, #0
 800ccfc:	d050      	beq.n	800cda0 <__hexnan+0x130>
 800ccfe:	454c      	cmp	r4, r9
 800cd00:	d206      	bcs.n	800cd10 <__hexnan+0xa0>
 800cd02:	2d07      	cmp	r5, #7
 800cd04:	dc04      	bgt.n	800cd10 <__hexnan+0xa0>
 800cd06:	462a      	mov	r2, r5
 800cd08:	4649      	mov	r1, r9
 800cd0a:	4620      	mov	r0, r4
 800cd0c:	f7ff ff8a 	bl	800cc24 <L_shift>
 800cd10:	4544      	cmp	r4, r8
 800cd12:	d934      	bls.n	800cd7e <__hexnan+0x10e>
 800cd14:	f1a8 0204 	sub.w	r2, r8, #4
 800cd18:	4623      	mov	r3, r4
 800cd1a:	f853 1b04 	ldr.w	r1, [r3], #4
 800cd1e:	f842 1f04 	str.w	r1, [r2, #4]!
 800cd22:	429f      	cmp	r7, r3
 800cd24:	d2f9      	bcs.n	800cd1a <__hexnan+0xaa>
 800cd26:	1b3b      	subs	r3, r7, r4
 800cd28:	f023 0303 	bic.w	r3, r3, #3
 800cd2c:	3304      	adds	r3, #4
 800cd2e:	3401      	adds	r4, #1
 800cd30:	3e03      	subs	r6, #3
 800cd32:	42b4      	cmp	r4, r6
 800cd34:	bf88      	it	hi
 800cd36:	2304      	movhi	r3, #4
 800cd38:	4443      	add	r3, r8
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	f843 2b04 	str.w	r2, [r3], #4
 800cd40:	429f      	cmp	r7, r3
 800cd42:	d2fb      	bcs.n	800cd3c <__hexnan+0xcc>
 800cd44:	683b      	ldr	r3, [r7, #0]
 800cd46:	b91b      	cbnz	r3, 800cd50 <__hexnan+0xe0>
 800cd48:	4547      	cmp	r7, r8
 800cd4a:	d127      	bne.n	800cd9c <__hexnan+0x12c>
 800cd4c:	2301      	movs	r3, #1
 800cd4e:	603b      	str	r3, [r7, #0]
 800cd50:	2005      	movs	r0, #5
 800cd52:	e026      	b.n	800cda2 <__hexnan+0x132>
 800cd54:	3501      	adds	r5, #1
 800cd56:	2d08      	cmp	r5, #8
 800cd58:	f10b 0b01 	add.w	fp, fp, #1
 800cd5c:	dd06      	ble.n	800cd6c <__hexnan+0xfc>
 800cd5e:	4544      	cmp	r4, r8
 800cd60:	d9c3      	bls.n	800ccea <__hexnan+0x7a>
 800cd62:	2300      	movs	r3, #0
 800cd64:	f844 3c04 	str.w	r3, [r4, #-4]
 800cd68:	2501      	movs	r5, #1
 800cd6a:	3c04      	subs	r4, #4
 800cd6c:	6822      	ldr	r2, [r4, #0]
 800cd6e:	f000 000f 	and.w	r0, r0, #15
 800cd72:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800cd76:	6022      	str	r2, [r4, #0]
 800cd78:	e7b7      	b.n	800ccea <__hexnan+0x7a>
 800cd7a:	2508      	movs	r5, #8
 800cd7c:	e7b5      	b.n	800ccea <__hexnan+0x7a>
 800cd7e:	9b01      	ldr	r3, [sp, #4]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d0df      	beq.n	800cd44 <__hexnan+0xd4>
 800cd84:	f04f 32ff 	mov.w	r2, #4294967295
 800cd88:	f1c3 0320 	rsb	r3, r3, #32
 800cd8c:	fa22 f303 	lsr.w	r3, r2, r3
 800cd90:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cd94:	401a      	ands	r2, r3
 800cd96:	f846 2c04 	str.w	r2, [r6, #-4]
 800cd9a:	e7d3      	b.n	800cd44 <__hexnan+0xd4>
 800cd9c:	3f04      	subs	r7, #4
 800cd9e:	e7d1      	b.n	800cd44 <__hexnan+0xd4>
 800cda0:	2004      	movs	r0, #4
 800cda2:	b007      	add	sp, #28
 800cda4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cda8 <_localeconv_r>:
 800cda8:	4800      	ldr	r0, [pc, #0]	; (800cdac <_localeconv_r+0x4>)
 800cdaa:	4770      	bx	lr
 800cdac:	200001fc 	.word	0x200001fc

0800cdb0 <__retarget_lock_init_recursive>:
 800cdb0:	4770      	bx	lr

0800cdb2 <__retarget_lock_acquire_recursive>:
 800cdb2:	4770      	bx	lr

0800cdb4 <__retarget_lock_release_recursive>:
 800cdb4:	4770      	bx	lr

0800cdb6 <__swhatbuf_r>:
 800cdb6:	b570      	push	{r4, r5, r6, lr}
 800cdb8:	460e      	mov	r6, r1
 800cdba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdbe:	2900      	cmp	r1, #0
 800cdc0:	b096      	sub	sp, #88	; 0x58
 800cdc2:	4614      	mov	r4, r2
 800cdc4:	461d      	mov	r5, r3
 800cdc6:	da08      	bge.n	800cdda <__swhatbuf_r+0x24>
 800cdc8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cdcc:	2200      	movs	r2, #0
 800cdce:	602a      	str	r2, [r5, #0]
 800cdd0:	061a      	lsls	r2, r3, #24
 800cdd2:	d410      	bmi.n	800cdf6 <__swhatbuf_r+0x40>
 800cdd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cdd8:	e00e      	b.n	800cdf8 <__swhatbuf_r+0x42>
 800cdda:	466a      	mov	r2, sp
 800cddc:	f001 f9a6 	bl	800e12c <_fstat_r>
 800cde0:	2800      	cmp	r0, #0
 800cde2:	dbf1      	blt.n	800cdc8 <__swhatbuf_r+0x12>
 800cde4:	9a01      	ldr	r2, [sp, #4]
 800cde6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cdea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cdee:	425a      	negs	r2, r3
 800cdf0:	415a      	adcs	r2, r3
 800cdf2:	602a      	str	r2, [r5, #0]
 800cdf4:	e7ee      	b.n	800cdd4 <__swhatbuf_r+0x1e>
 800cdf6:	2340      	movs	r3, #64	; 0x40
 800cdf8:	2000      	movs	r0, #0
 800cdfa:	6023      	str	r3, [r4, #0]
 800cdfc:	b016      	add	sp, #88	; 0x58
 800cdfe:	bd70      	pop	{r4, r5, r6, pc}

0800ce00 <__smakebuf_r>:
 800ce00:	898b      	ldrh	r3, [r1, #12]
 800ce02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ce04:	079d      	lsls	r5, r3, #30
 800ce06:	4606      	mov	r6, r0
 800ce08:	460c      	mov	r4, r1
 800ce0a:	d507      	bpl.n	800ce1c <__smakebuf_r+0x1c>
 800ce0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ce10:	6023      	str	r3, [r4, #0]
 800ce12:	6123      	str	r3, [r4, #16]
 800ce14:	2301      	movs	r3, #1
 800ce16:	6163      	str	r3, [r4, #20]
 800ce18:	b002      	add	sp, #8
 800ce1a:	bd70      	pop	{r4, r5, r6, pc}
 800ce1c:	ab01      	add	r3, sp, #4
 800ce1e:	466a      	mov	r2, sp
 800ce20:	f7ff ffc9 	bl	800cdb6 <__swhatbuf_r>
 800ce24:	9900      	ldr	r1, [sp, #0]
 800ce26:	4605      	mov	r5, r0
 800ce28:	4630      	mov	r0, r6
 800ce2a:	f000 fd87 	bl	800d93c <_malloc_r>
 800ce2e:	b948      	cbnz	r0, 800ce44 <__smakebuf_r+0x44>
 800ce30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce34:	059a      	lsls	r2, r3, #22
 800ce36:	d4ef      	bmi.n	800ce18 <__smakebuf_r+0x18>
 800ce38:	f023 0303 	bic.w	r3, r3, #3
 800ce3c:	f043 0302 	orr.w	r3, r3, #2
 800ce40:	81a3      	strh	r3, [r4, #12]
 800ce42:	e7e3      	b.n	800ce0c <__smakebuf_r+0xc>
 800ce44:	4b0d      	ldr	r3, [pc, #52]	; (800ce7c <__smakebuf_r+0x7c>)
 800ce46:	62b3      	str	r3, [r6, #40]	; 0x28
 800ce48:	89a3      	ldrh	r3, [r4, #12]
 800ce4a:	6020      	str	r0, [r4, #0]
 800ce4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce50:	81a3      	strh	r3, [r4, #12]
 800ce52:	9b00      	ldr	r3, [sp, #0]
 800ce54:	6163      	str	r3, [r4, #20]
 800ce56:	9b01      	ldr	r3, [sp, #4]
 800ce58:	6120      	str	r0, [r4, #16]
 800ce5a:	b15b      	cbz	r3, 800ce74 <__smakebuf_r+0x74>
 800ce5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce60:	4630      	mov	r0, r6
 800ce62:	f001 f975 	bl	800e150 <_isatty_r>
 800ce66:	b128      	cbz	r0, 800ce74 <__smakebuf_r+0x74>
 800ce68:	89a3      	ldrh	r3, [r4, #12]
 800ce6a:	f023 0303 	bic.w	r3, r3, #3
 800ce6e:	f043 0301 	orr.w	r3, r3, #1
 800ce72:	81a3      	strh	r3, [r4, #12]
 800ce74:	89a0      	ldrh	r0, [r4, #12]
 800ce76:	4305      	orrs	r5, r0
 800ce78:	81a5      	strh	r5, [r4, #12]
 800ce7a:	e7cd      	b.n	800ce18 <__smakebuf_r+0x18>
 800ce7c:	0800c529 	.word	0x0800c529

0800ce80 <malloc>:
 800ce80:	4b02      	ldr	r3, [pc, #8]	; (800ce8c <malloc+0xc>)
 800ce82:	4601      	mov	r1, r0
 800ce84:	6818      	ldr	r0, [r3, #0]
 800ce86:	f000 bd59 	b.w	800d93c <_malloc_r>
 800ce8a:	bf00      	nop
 800ce8c:	200000a4 	.word	0x200000a4

0800ce90 <__ascii_mbtowc>:
 800ce90:	b082      	sub	sp, #8
 800ce92:	b901      	cbnz	r1, 800ce96 <__ascii_mbtowc+0x6>
 800ce94:	a901      	add	r1, sp, #4
 800ce96:	b142      	cbz	r2, 800ceaa <__ascii_mbtowc+0x1a>
 800ce98:	b14b      	cbz	r3, 800ceae <__ascii_mbtowc+0x1e>
 800ce9a:	7813      	ldrb	r3, [r2, #0]
 800ce9c:	600b      	str	r3, [r1, #0]
 800ce9e:	7812      	ldrb	r2, [r2, #0]
 800cea0:	1e10      	subs	r0, r2, #0
 800cea2:	bf18      	it	ne
 800cea4:	2001      	movne	r0, #1
 800cea6:	b002      	add	sp, #8
 800cea8:	4770      	bx	lr
 800ceaa:	4610      	mov	r0, r2
 800ceac:	e7fb      	b.n	800cea6 <__ascii_mbtowc+0x16>
 800ceae:	f06f 0001 	mvn.w	r0, #1
 800ceb2:	e7f8      	b.n	800cea6 <__ascii_mbtowc+0x16>

0800ceb4 <_Balloc>:
 800ceb4:	b570      	push	{r4, r5, r6, lr}
 800ceb6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ceb8:	4604      	mov	r4, r0
 800ceba:	460d      	mov	r5, r1
 800cebc:	b976      	cbnz	r6, 800cedc <_Balloc+0x28>
 800cebe:	2010      	movs	r0, #16
 800cec0:	f7ff ffde 	bl	800ce80 <malloc>
 800cec4:	4602      	mov	r2, r0
 800cec6:	6260      	str	r0, [r4, #36]	; 0x24
 800cec8:	b920      	cbnz	r0, 800ced4 <_Balloc+0x20>
 800ceca:	4b18      	ldr	r3, [pc, #96]	; (800cf2c <_Balloc+0x78>)
 800cecc:	4818      	ldr	r0, [pc, #96]	; (800cf30 <_Balloc+0x7c>)
 800cece:	2166      	movs	r1, #102	; 0x66
 800ced0:	f001 f8ec 	bl	800e0ac <__assert_func>
 800ced4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ced8:	6006      	str	r6, [r0, #0]
 800ceda:	60c6      	str	r6, [r0, #12]
 800cedc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cede:	68f3      	ldr	r3, [r6, #12]
 800cee0:	b183      	cbz	r3, 800cf04 <_Balloc+0x50>
 800cee2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cee4:	68db      	ldr	r3, [r3, #12]
 800cee6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ceea:	b9b8      	cbnz	r0, 800cf1c <_Balloc+0x68>
 800ceec:	2101      	movs	r1, #1
 800ceee:	fa01 f605 	lsl.w	r6, r1, r5
 800cef2:	1d72      	adds	r2, r6, #5
 800cef4:	0092      	lsls	r2, r2, #2
 800cef6:	4620      	mov	r0, r4
 800cef8:	f000 fc9d 	bl	800d836 <_calloc_r>
 800cefc:	b160      	cbz	r0, 800cf18 <_Balloc+0x64>
 800cefe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cf02:	e00e      	b.n	800cf22 <_Balloc+0x6e>
 800cf04:	2221      	movs	r2, #33	; 0x21
 800cf06:	2104      	movs	r1, #4
 800cf08:	4620      	mov	r0, r4
 800cf0a:	f000 fc94 	bl	800d836 <_calloc_r>
 800cf0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cf10:	60f0      	str	r0, [r6, #12]
 800cf12:	68db      	ldr	r3, [r3, #12]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d1e4      	bne.n	800cee2 <_Balloc+0x2e>
 800cf18:	2000      	movs	r0, #0
 800cf1a:	bd70      	pop	{r4, r5, r6, pc}
 800cf1c:	6802      	ldr	r2, [r0, #0]
 800cf1e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cf22:	2300      	movs	r3, #0
 800cf24:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cf28:	e7f7      	b.n	800cf1a <_Balloc+0x66>
 800cf2a:	bf00      	nop
 800cf2c:	0800e716 	.word	0x0800e716
 800cf30:	0800e878 	.word	0x0800e878

0800cf34 <_Bfree>:
 800cf34:	b570      	push	{r4, r5, r6, lr}
 800cf36:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cf38:	4605      	mov	r5, r0
 800cf3a:	460c      	mov	r4, r1
 800cf3c:	b976      	cbnz	r6, 800cf5c <_Bfree+0x28>
 800cf3e:	2010      	movs	r0, #16
 800cf40:	f7ff ff9e 	bl	800ce80 <malloc>
 800cf44:	4602      	mov	r2, r0
 800cf46:	6268      	str	r0, [r5, #36]	; 0x24
 800cf48:	b920      	cbnz	r0, 800cf54 <_Bfree+0x20>
 800cf4a:	4b09      	ldr	r3, [pc, #36]	; (800cf70 <_Bfree+0x3c>)
 800cf4c:	4809      	ldr	r0, [pc, #36]	; (800cf74 <_Bfree+0x40>)
 800cf4e:	218a      	movs	r1, #138	; 0x8a
 800cf50:	f001 f8ac 	bl	800e0ac <__assert_func>
 800cf54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cf58:	6006      	str	r6, [r0, #0]
 800cf5a:	60c6      	str	r6, [r0, #12]
 800cf5c:	b13c      	cbz	r4, 800cf6e <_Bfree+0x3a>
 800cf5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cf60:	6862      	ldr	r2, [r4, #4]
 800cf62:	68db      	ldr	r3, [r3, #12]
 800cf64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cf68:	6021      	str	r1, [r4, #0]
 800cf6a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cf6e:	bd70      	pop	{r4, r5, r6, pc}
 800cf70:	0800e716 	.word	0x0800e716
 800cf74:	0800e878 	.word	0x0800e878

0800cf78 <__multadd>:
 800cf78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf7c:	690d      	ldr	r5, [r1, #16]
 800cf7e:	4607      	mov	r7, r0
 800cf80:	460c      	mov	r4, r1
 800cf82:	461e      	mov	r6, r3
 800cf84:	f101 0c14 	add.w	ip, r1, #20
 800cf88:	2000      	movs	r0, #0
 800cf8a:	f8dc 3000 	ldr.w	r3, [ip]
 800cf8e:	b299      	uxth	r1, r3
 800cf90:	fb02 6101 	mla	r1, r2, r1, r6
 800cf94:	0c1e      	lsrs	r6, r3, #16
 800cf96:	0c0b      	lsrs	r3, r1, #16
 800cf98:	fb02 3306 	mla	r3, r2, r6, r3
 800cf9c:	b289      	uxth	r1, r1
 800cf9e:	3001      	adds	r0, #1
 800cfa0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cfa4:	4285      	cmp	r5, r0
 800cfa6:	f84c 1b04 	str.w	r1, [ip], #4
 800cfaa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cfae:	dcec      	bgt.n	800cf8a <__multadd+0x12>
 800cfb0:	b30e      	cbz	r6, 800cff6 <__multadd+0x7e>
 800cfb2:	68a3      	ldr	r3, [r4, #8]
 800cfb4:	42ab      	cmp	r3, r5
 800cfb6:	dc19      	bgt.n	800cfec <__multadd+0x74>
 800cfb8:	6861      	ldr	r1, [r4, #4]
 800cfba:	4638      	mov	r0, r7
 800cfbc:	3101      	adds	r1, #1
 800cfbe:	f7ff ff79 	bl	800ceb4 <_Balloc>
 800cfc2:	4680      	mov	r8, r0
 800cfc4:	b928      	cbnz	r0, 800cfd2 <__multadd+0x5a>
 800cfc6:	4602      	mov	r2, r0
 800cfc8:	4b0c      	ldr	r3, [pc, #48]	; (800cffc <__multadd+0x84>)
 800cfca:	480d      	ldr	r0, [pc, #52]	; (800d000 <__multadd+0x88>)
 800cfcc:	21b5      	movs	r1, #181	; 0xb5
 800cfce:	f001 f86d 	bl	800e0ac <__assert_func>
 800cfd2:	6922      	ldr	r2, [r4, #16]
 800cfd4:	3202      	adds	r2, #2
 800cfd6:	f104 010c 	add.w	r1, r4, #12
 800cfda:	0092      	lsls	r2, r2, #2
 800cfdc:	300c      	adds	r0, #12
 800cfde:	f7fc fc91 	bl	8009904 <memcpy>
 800cfe2:	4621      	mov	r1, r4
 800cfe4:	4638      	mov	r0, r7
 800cfe6:	f7ff ffa5 	bl	800cf34 <_Bfree>
 800cfea:	4644      	mov	r4, r8
 800cfec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cff0:	3501      	adds	r5, #1
 800cff2:	615e      	str	r6, [r3, #20]
 800cff4:	6125      	str	r5, [r4, #16]
 800cff6:	4620      	mov	r0, r4
 800cff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cffc:	0800e788 	.word	0x0800e788
 800d000:	0800e878 	.word	0x0800e878

0800d004 <__s2b>:
 800d004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d008:	460c      	mov	r4, r1
 800d00a:	4615      	mov	r5, r2
 800d00c:	461f      	mov	r7, r3
 800d00e:	2209      	movs	r2, #9
 800d010:	3308      	adds	r3, #8
 800d012:	4606      	mov	r6, r0
 800d014:	fb93 f3f2 	sdiv	r3, r3, r2
 800d018:	2100      	movs	r1, #0
 800d01a:	2201      	movs	r2, #1
 800d01c:	429a      	cmp	r2, r3
 800d01e:	db09      	blt.n	800d034 <__s2b+0x30>
 800d020:	4630      	mov	r0, r6
 800d022:	f7ff ff47 	bl	800ceb4 <_Balloc>
 800d026:	b940      	cbnz	r0, 800d03a <__s2b+0x36>
 800d028:	4602      	mov	r2, r0
 800d02a:	4b19      	ldr	r3, [pc, #100]	; (800d090 <__s2b+0x8c>)
 800d02c:	4819      	ldr	r0, [pc, #100]	; (800d094 <__s2b+0x90>)
 800d02e:	21ce      	movs	r1, #206	; 0xce
 800d030:	f001 f83c 	bl	800e0ac <__assert_func>
 800d034:	0052      	lsls	r2, r2, #1
 800d036:	3101      	adds	r1, #1
 800d038:	e7f0      	b.n	800d01c <__s2b+0x18>
 800d03a:	9b08      	ldr	r3, [sp, #32]
 800d03c:	6143      	str	r3, [r0, #20]
 800d03e:	2d09      	cmp	r5, #9
 800d040:	f04f 0301 	mov.w	r3, #1
 800d044:	6103      	str	r3, [r0, #16]
 800d046:	dd16      	ble.n	800d076 <__s2b+0x72>
 800d048:	f104 0909 	add.w	r9, r4, #9
 800d04c:	46c8      	mov	r8, r9
 800d04e:	442c      	add	r4, r5
 800d050:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d054:	4601      	mov	r1, r0
 800d056:	3b30      	subs	r3, #48	; 0x30
 800d058:	220a      	movs	r2, #10
 800d05a:	4630      	mov	r0, r6
 800d05c:	f7ff ff8c 	bl	800cf78 <__multadd>
 800d060:	45a0      	cmp	r8, r4
 800d062:	d1f5      	bne.n	800d050 <__s2b+0x4c>
 800d064:	f1a5 0408 	sub.w	r4, r5, #8
 800d068:	444c      	add	r4, r9
 800d06a:	1b2d      	subs	r5, r5, r4
 800d06c:	1963      	adds	r3, r4, r5
 800d06e:	42bb      	cmp	r3, r7
 800d070:	db04      	blt.n	800d07c <__s2b+0x78>
 800d072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d076:	340a      	adds	r4, #10
 800d078:	2509      	movs	r5, #9
 800d07a:	e7f6      	b.n	800d06a <__s2b+0x66>
 800d07c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d080:	4601      	mov	r1, r0
 800d082:	3b30      	subs	r3, #48	; 0x30
 800d084:	220a      	movs	r2, #10
 800d086:	4630      	mov	r0, r6
 800d088:	f7ff ff76 	bl	800cf78 <__multadd>
 800d08c:	e7ee      	b.n	800d06c <__s2b+0x68>
 800d08e:	bf00      	nop
 800d090:	0800e788 	.word	0x0800e788
 800d094:	0800e878 	.word	0x0800e878

0800d098 <__hi0bits>:
 800d098:	0c03      	lsrs	r3, r0, #16
 800d09a:	041b      	lsls	r3, r3, #16
 800d09c:	b9d3      	cbnz	r3, 800d0d4 <__hi0bits+0x3c>
 800d09e:	0400      	lsls	r0, r0, #16
 800d0a0:	2310      	movs	r3, #16
 800d0a2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d0a6:	bf04      	itt	eq
 800d0a8:	0200      	lsleq	r0, r0, #8
 800d0aa:	3308      	addeq	r3, #8
 800d0ac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d0b0:	bf04      	itt	eq
 800d0b2:	0100      	lsleq	r0, r0, #4
 800d0b4:	3304      	addeq	r3, #4
 800d0b6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d0ba:	bf04      	itt	eq
 800d0bc:	0080      	lsleq	r0, r0, #2
 800d0be:	3302      	addeq	r3, #2
 800d0c0:	2800      	cmp	r0, #0
 800d0c2:	db05      	blt.n	800d0d0 <__hi0bits+0x38>
 800d0c4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d0c8:	f103 0301 	add.w	r3, r3, #1
 800d0cc:	bf08      	it	eq
 800d0ce:	2320      	moveq	r3, #32
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	4770      	bx	lr
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	e7e4      	b.n	800d0a2 <__hi0bits+0xa>

0800d0d8 <__lo0bits>:
 800d0d8:	6803      	ldr	r3, [r0, #0]
 800d0da:	f013 0207 	ands.w	r2, r3, #7
 800d0de:	4601      	mov	r1, r0
 800d0e0:	d00b      	beq.n	800d0fa <__lo0bits+0x22>
 800d0e2:	07da      	lsls	r2, r3, #31
 800d0e4:	d423      	bmi.n	800d12e <__lo0bits+0x56>
 800d0e6:	0798      	lsls	r0, r3, #30
 800d0e8:	bf49      	itett	mi
 800d0ea:	085b      	lsrmi	r3, r3, #1
 800d0ec:	089b      	lsrpl	r3, r3, #2
 800d0ee:	2001      	movmi	r0, #1
 800d0f0:	600b      	strmi	r3, [r1, #0]
 800d0f2:	bf5c      	itt	pl
 800d0f4:	600b      	strpl	r3, [r1, #0]
 800d0f6:	2002      	movpl	r0, #2
 800d0f8:	4770      	bx	lr
 800d0fa:	b298      	uxth	r0, r3
 800d0fc:	b9a8      	cbnz	r0, 800d12a <__lo0bits+0x52>
 800d0fe:	0c1b      	lsrs	r3, r3, #16
 800d100:	2010      	movs	r0, #16
 800d102:	b2da      	uxtb	r2, r3
 800d104:	b90a      	cbnz	r2, 800d10a <__lo0bits+0x32>
 800d106:	3008      	adds	r0, #8
 800d108:	0a1b      	lsrs	r3, r3, #8
 800d10a:	071a      	lsls	r2, r3, #28
 800d10c:	bf04      	itt	eq
 800d10e:	091b      	lsreq	r3, r3, #4
 800d110:	3004      	addeq	r0, #4
 800d112:	079a      	lsls	r2, r3, #30
 800d114:	bf04      	itt	eq
 800d116:	089b      	lsreq	r3, r3, #2
 800d118:	3002      	addeq	r0, #2
 800d11a:	07da      	lsls	r2, r3, #31
 800d11c:	d403      	bmi.n	800d126 <__lo0bits+0x4e>
 800d11e:	085b      	lsrs	r3, r3, #1
 800d120:	f100 0001 	add.w	r0, r0, #1
 800d124:	d005      	beq.n	800d132 <__lo0bits+0x5a>
 800d126:	600b      	str	r3, [r1, #0]
 800d128:	4770      	bx	lr
 800d12a:	4610      	mov	r0, r2
 800d12c:	e7e9      	b.n	800d102 <__lo0bits+0x2a>
 800d12e:	2000      	movs	r0, #0
 800d130:	4770      	bx	lr
 800d132:	2020      	movs	r0, #32
 800d134:	4770      	bx	lr
	...

0800d138 <__i2b>:
 800d138:	b510      	push	{r4, lr}
 800d13a:	460c      	mov	r4, r1
 800d13c:	2101      	movs	r1, #1
 800d13e:	f7ff feb9 	bl	800ceb4 <_Balloc>
 800d142:	4602      	mov	r2, r0
 800d144:	b928      	cbnz	r0, 800d152 <__i2b+0x1a>
 800d146:	4b05      	ldr	r3, [pc, #20]	; (800d15c <__i2b+0x24>)
 800d148:	4805      	ldr	r0, [pc, #20]	; (800d160 <__i2b+0x28>)
 800d14a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d14e:	f000 ffad 	bl	800e0ac <__assert_func>
 800d152:	2301      	movs	r3, #1
 800d154:	6144      	str	r4, [r0, #20]
 800d156:	6103      	str	r3, [r0, #16]
 800d158:	bd10      	pop	{r4, pc}
 800d15a:	bf00      	nop
 800d15c:	0800e788 	.word	0x0800e788
 800d160:	0800e878 	.word	0x0800e878

0800d164 <__multiply>:
 800d164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d168:	4691      	mov	r9, r2
 800d16a:	690a      	ldr	r2, [r1, #16]
 800d16c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d170:	429a      	cmp	r2, r3
 800d172:	bfb8      	it	lt
 800d174:	460b      	movlt	r3, r1
 800d176:	460c      	mov	r4, r1
 800d178:	bfbc      	itt	lt
 800d17a:	464c      	movlt	r4, r9
 800d17c:	4699      	movlt	r9, r3
 800d17e:	6927      	ldr	r7, [r4, #16]
 800d180:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d184:	68a3      	ldr	r3, [r4, #8]
 800d186:	6861      	ldr	r1, [r4, #4]
 800d188:	eb07 060a 	add.w	r6, r7, sl
 800d18c:	42b3      	cmp	r3, r6
 800d18e:	b085      	sub	sp, #20
 800d190:	bfb8      	it	lt
 800d192:	3101      	addlt	r1, #1
 800d194:	f7ff fe8e 	bl	800ceb4 <_Balloc>
 800d198:	b930      	cbnz	r0, 800d1a8 <__multiply+0x44>
 800d19a:	4602      	mov	r2, r0
 800d19c:	4b44      	ldr	r3, [pc, #272]	; (800d2b0 <__multiply+0x14c>)
 800d19e:	4845      	ldr	r0, [pc, #276]	; (800d2b4 <__multiply+0x150>)
 800d1a0:	f240 115d 	movw	r1, #349	; 0x15d
 800d1a4:	f000 ff82 	bl	800e0ac <__assert_func>
 800d1a8:	f100 0514 	add.w	r5, r0, #20
 800d1ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d1b0:	462b      	mov	r3, r5
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	4543      	cmp	r3, r8
 800d1b6:	d321      	bcc.n	800d1fc <__multiply+0x98>
 800d1b8:	f104 0314 	add.w	r3, r4, #20
 800d1bc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d1c0:	f109 0314 	add.w	r3, r9, #20
 800d1c4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d1c8:	9202      	str	r2, [sp, #8]
 800d1ca:	1b3a      	subs	r2, r7, r4
 800d1cc:	3a15      	subs	r2, #21
 800d1ce:	f022 0203 	bic.w	r2, r2, #3
 800d1d2:	3204      	adds	r2, #4
 800d1d4:	f104 0115 	add.w	r1, r4, #21
 800d1d8:	428f      	cmp	r7, r1
 800d1da:	bf38      	it	cc
 800d1dc:	2204      	movcc	r2, #4
 800d1de:	9201      	str	r2, [sp, #4]
 800d1e0:	9a02      	ldr	r2, [sp, #8]
 800d1e2:	9303      	str	r3, [sp, #12]
 800d1e4:	429a      	cmp	r2, r3
 800d1e6:	d80c      	bhi.n	800d202 <__multiply+0x9e>
 800d1e8:	2e00      	cmp	r6, #0
 800d1ea:	dd03      	ble.n	800d1f4 <__multiply+0x90>
 800d1ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d05a      	beq.n	800d2aa <__multiply+0x146>
 800d1f4:	6106      	str	r6, [r0, #16]
 800d1f6:	b005      	add	sp, #20
 800d1f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1fc:	f843 2b04 	str.w	r2, [r3], #4
 800d200:	e7d8      	b.n	800d1b4 <__multiply+0x50>
 800d202:	f8b3 a000 	ldrh.w	sl, [r3]
 800d206:	f1ba 0f00 	cmp.w	sl, #0
 800d20a:	d024      	beq.n	800d256 <__multiply+0xf2>
 800d20c:	f104 0e14 	add.w	lr, r4, #20
 800d210:	46a9      	mov	r9, r5
 800d212:	f04f 0c00 	mov.w	ip, #0
 800d216:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d21a:	f8d9 1000 	ldr.w	r1, [r9]
 800d21e:	fa1f fb82 	uxth.w	fp, r2
 800d222:	b289      	uxth	r1, r1
 800d224:	fb0a 110b 	mla	r1, sl, fp, r1
 800d228:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d22c:	f8d9 2000 	ldr.w	r2, [r9]
 800d230:	4461      	add	r1, ip
 800d232:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d236:	fb0a c20b 	mla	r2, sl, fp, ip
 800d23a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d23e:	b289      	uxth	r1, r1
 800d240:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d244:	4577      	cmp	r7, lr
 800d246:	f849 1b04 	str.w	r1, [r9], #4
 800d24a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d24e:	d8e2      	bhi.n	800d216 <__multiply+0xb2>
 800d250:	9a01      	ldr	r2, [sp, #4]
 800d252:	f845 c002 	str.w	ip, [r5, r2]
 800d256:	9a03      	ldr	r2, [sp, #12]
 800d258:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d25c:	3304      	adds	r3, #4
 800d25e:	f1b9 0f00 	cmp.w	r9, #0
 800d262:	d020      	beq.n	800d2a6 <__multiply+0x142>
 800d264:	6829      	ldr	r1, [r5, #0]
 800d266:	f104 0c14 	add.w	ip, r4, #20
 800d26a:	46ae      	mov	lr, r5
 800d26c:	f04f 0a00 	mov.w	sl, #0
 800d270:	f8bc b000 	ldrh.w	fp, [ip]
 800d274:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d278:	fb09 220b 	mla	r2, r9, fp, r2
 800d27c:	4492      	add	sl, r2
 800d27e:	b289      	uxth	r1, r1
 800d280:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d284:	f84e 1b04 	str.w	r1, [lr], #4
 800d288:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d28c:	f8be 1000 	ldrh.w	r1, [lr]
 800d290:	0c12      	lsrs	r2, r2, #16
 800d292:	fb09 1102 	mla	r1, r9, r2, r1
 800d296:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d29a:	4567      	cmp	r7, ip
 800d29c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d2a0:	d8e6      	bhi.n	800d270 <__multiply+0x10c>
 800d2a2:	9a01      	ldr	r2, [sp, #4]
 800d2a4:	50a9      	str	r1, [r5, r2]
 800d2a6:	3504      	adds	r5, #4
 800d2a8:	e79a      	b.n	800d1e0 <__multiply+0x7c>
 800d2aa:	3e01      	subs	r6, #1
 800d2ac:	e79c      	b.n	800d1e8 <__multiply+0x84>
 800d2ae:	bf00      	nop
 800d2b0:	0800e788 	.word	0x0800e788
 800d2b4:	0800e878 	.word	0x0800e878

0800d2b8 <__pow5mult>:
 800d2b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2bc:	4615      	mov	r5, r2
 800d2be:	f012 0203 	ands.w	r2, r2, #3
 800d2c2:	4606      	mov	r6, r0
 800d2c4:	460f      	mov	r7, r1
 800d2c6:	d007      	beq.n	800d2d8 <__pow5mult+0x20>
 800d2c8:	4c25      	ldr	r4, [pc, #148]	; (800d360 <__pow5mult+0xa8>)
 800d2ca:	3a01      	subs	r2, #1
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d2d2:	f7ff fe51 	bl	800cf78 <__multadd>
 800d2d6:	4607      	mov	r7, r0
 800d2d8:	10ad      	asrs	r5, r5, #2
 800d2da:	d03d      	beq.n	800d358 <__pow5mult+0xa0>
 800d2dc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d2de:	b97c      	cbnz	r4, 800d300 <__pow5mult+0x48>
 800d2e0:	2010      	movs	r0, #16
 800d2e2:	f7ff fdcd 	bl	800ce80 <malloc>
 800d2e6:	4602      	mov	r2, r0
 800d2e8:	6270      	str	r0, [r6, #36]	; 0x24
 800d2ea:	b928      	cbnz	r0, 800d2f8 <__pow5mult+0x40>
 800d2ec:	4b1d      	ldr	r3, [pc, #116]	; (800d364 <__pow5mult+0xac>)
 800d2ee:	481e      	ldr	r0, [pc, #120]	; (800d368 <__pow5mult+0xb0>)
 800d2f0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d2f4:	f000 feda 	bl	800e0ac <__assert_func>
 800d2f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d2fc:	6004      	str	r4, [r0, #0]
 800d2fe:	60c4      	str	r4, [r0, #12]
 800d300:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d304:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d308:	b94c      	cbnz	r4, 800d31e <__pow5mult+0x66>
 800d30a:	f240 2171 	movw	r1, #625	; 0x271
 800d30e:	4630      	mov	r0, r6
 800d310:	f7ff ff12 	bl	800d138 <__i2b>
 800d314:	2300      	movs	r3, #0
 800d316:	f8c8 0008 	str.w	r0, [r8, #8]
 800d31a:	4604      	mov	r4, r0
 800d31c:	6003      	str	r3, [r0, #0]
 800d31e:	f04f 0900 	mov.w	r9, #0
 800d322:	07eb      	lsls	r3, r5, #31
 800d324:	d50a      	bpl.n	800d33c <__pow5mult+0x84>
 800d326:	4639      	mov	r1, r7
 800d328:	4622      	mov	r2, r4
 800d32a:	4630      	mov	r0, r6
 800d32c:	f7ff ff1a 	bl	800d164 <__multiply>
 800d330:	4639      	mov	r1, r7
 800d332:	4680      	mov	r8, r0
 800d334:	4630      	mov	r0, r6
 800d336:	f7ff fdfd 	bl	800cf34 <_Bfree>
 800d33a:	4647      	mov	r7, r8
 800d33c:	106d      	asrs	r5, r5, #1
 800d33e:	d00b      	beq.n	800d358 <__pow5mult+0xa0>
 800d340:	6820      	ldr	r0, [r4, #0]
 800d342:	b938      	cbnz	r0, 800d354 <__pow5mult+0x9c>
 800d344:	4622      	mov	r2, r4
 800d346:	4621      	mov	r1, r4
 800d348:	4630      	mov	r0, r6
 800d34a:	f7ff ff0b 	bl	800d164 <__multiply>
 800d34e:	6020      	str	r0, [r4, #0]
 800d350:	f8c0 9000 	str.w	r9, [r0]
 800d354:	4604      	mov	r4, r0
 800d356:	e7e4      	b.n	800d322 <__pow5mult+0x6a>
 800d358:	4638      	mov	r0, r7
 800d35a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d35e:	bf00      	nop
 800d360:	0800e9c8 	.word	0x0800e9c8
 800d364:	0800e716 	.word	0x0800e716
 800d368:	0800e878 	.word	0x0800e878

0800d36c <__lshift>:
 800d36c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d370:	460c      	mov	r4, r1
 800d372:	6849      	ldr	r1, [r1, #4]
 800d374:	6923      	ldr	r3, [r4, #16]
 800d376:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d37a:	68a3      	ldr	r3, [r4, #8]
 800d37c:	4607      	mov	r7, r0
 800d37e:	4691      	mov	r9, r2
 800d380:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d384:	f108 0601 	add.w	r6, r8, #1
 800d388:	42b3      	cmp	r3, r6
 800d38a:	db0b      	blt.n	800d3a4 <__lshift+0x38>
 800d38c:	4638      	mov	r0, r7
 800d38e:	f7ff fd91 	bl	800ceb4 <_Balloc>
 800d392:	4605      	mov	r5, r0
 800d394:	b948      	cbnz	r0, 800d3aa <__lshift+0x3e>
 800d396:	4602      	mov	r2, r0
 800d398:	4b2a      	ldr	r3, [pc, #168]	; (800d444 <__lshift+0xd8>)
 800d39a:	482b      	ldr	r0, [pc, #172]	; (800d448 <__lshift+0xdc>)
 800d39c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d3a0:	f000 fe84 	bl	800e0ac <__assert_func>
 800d3a4:	3101      	adds	r1, #1
 800d3a6:	005b      	lsls	r3, r3, #1
 800d3a8:	e7ee      	b.n	800d388 <__lshift+0x1c>
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	f100 0114 	add.w	r1, r0, #20
 800d3b0:	f100 0210 	add.w	r2, r0, #16
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	4553      	cmp	r3, sl
 800d3b8:	db37      	blt.n	800d42a <__lshift+0xbe>
 800d3ba:	6920      	ldr	r0, [r4, #16]
 800d3bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d3c0:	f104 0314 	add.w	r3, r4, #20
 800d3c4:	f019 091f 	ands.w	r9, r9, #31
 800d3c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d3cc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d3d0:	d02f      	beq.n	800d432 <__lshift+0xc6>
 800d3d2:	f1c9 0e20 	rsb	lr, r9, #32
 800d3d6:	468a      	mov	sl, r1
 800d3d8:	f04f 0c00 	mov.w	ip, #0
 800d3dc:	681a      	ldr	r2, [r3, #0]
 800d3de:	fa02 f209 	lsl.w	r2, r2, r9
 800d3e2:	ea42 020c 	orr.w	r2, r2, ip
 800d3e6:	f84a 2b04 	str.w	r2, [sl], #4
 800d3ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3ee:	4298      	cmp	r0, r3
 800d3f0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d3f4:	d8f2      	bhi.n	800d3dc <__lshift+0x70>
 800d3f6:	1b03      	subs	r3, r0, r4
 800d3f8:	3b15      	subs	r3, #21
 800d3fa:	f023 0303 	bic.w	r3, r3, #3
 800d3fe:	3304      	adds	r3, #4
 800d400:	f104 0215 	add.w	r2, r4, #21
 800d404:	4290      	cmp	r0, r2
 800d406:	bf38      	it	cc
 800d408:	2304      	movcc	r3, #4
 800d40a:	f841 c003 	str.w	ip, [r1, r3]
 800d40e:	f1bc 0f00 	cmp.w	ip, #0
 800d412:	d001      	beq.n	800d418 <__lshift+0xac>
 800d414:	f108 0602 	add.w	r6, r8, #2
 800d418:	3e01      	subs	r6, #1
 800d41a:	4638      	mov	r0, r7
 800d41c:	612e      	str	r6, [r5, #16]
 800d41e:	4621      	mov	r1, r4
 800d420:	f7ff fd88 	bl	800cf34 <_Bfree>
 800d424:	4628      	mov	r0, r5
 800d426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d42a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d42e:	3301      	adds	r3, #1
 800d430:	e7c1      	b.n	800d3b6 <__lshift+0x4a>
 800d432:	3904      	subs	r1, #4
 800d434:	f853 2b04 	ldr.w	r2, [r3], #4
 800d438:	f841 2f04 	str.w	r2, [r1, #4]!
 800d43c:	4298      	cmp	r0, r3
 800d43e:	d8f9      	bhi.n	800d434 <__lshift+0xc8>
 800d440:	e7ea      	b.n	800d418 <__lshift+0xac>
 800d442:	bf00      	nop
 800d444:	0800e788 	.word	0x0800e788
 800d448:	0800e878 	.word	0x0800e878

0800d44c <__mcmp>:
 800d44c:	b530      	push	{r4, r5, lr}
 800d44e:	6902      	ldr	r2, [r0, #16]
 800d450:	690c      	ldr	r4, [r1, #16]
 800d452:	1b12      	subs	r2, r2, r4
 800d454:	d10e      	bne.n	800d474 <__mcmp+0x28>
 800d456:	f100 0314 	add.w	r3, r0, #20
 800d45a:	3114      	adds	r1, #20
 800d45c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d460:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d464:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d468:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d46c:	42a5      	cmp	r5, r4
 800d46e:	d003      	beq.n	800d478 <__mcmp+0x2c>
 800d470:	d305      	bcc.n	800d47e <__mcmp+0x32>
 800d472:	2201      	movs	r2, #1
 800d474:	4610      	mov	r0, r2
 800d476:	bd30      	pop	{r4, r5, pc}
 800d478:	4283      	cmp	r3, r0
 800d47a:	d3f3      	bcc.n	800d464 <__mcmp+0x18>
 800d47c:	e7fa      	b.n	800d474 <__mcmp+0x28>
 800d47e:	f04f 32ff 	mov.w	r2, #4294967295
 800d482:	e7f7      	b.n	800d474 <__mcmp+0x28>

0800d484 <__mdiff>:
 800d484:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d488:	460c      	mov	r4, r1
 800d48a:	4606      	mov	r6, r0
 800d48c:	4611      	mov	r1, r2
 800d48e:	4620      	mov	r0, r4
 800d490:	4690      	mov	r8, r2
 800d492:	f7ff ffdb 	bl	800d44c <__mcmp>
 800d496:	1e05      	subs	r5, r0, #0
 800d498:	d110      	bne.n	800d4bc <__mdiff+0x38>
 800d49a:	4629      	mov	r1, r5
 800d49c:	4630      	mov	r0, r6
 800d49e:	f7ff fd09 	bl	800ceb4 <_Balloc>
 800d4a2:	b930      	cbnz	r0, 800d4b2 <__mdiff+0x2e>
 800d4a4:	4b3a      	ldr	r3, [pc, #232]	; (800d590 <__mdiff+0x10c>)
 800d4a6:	4602      	mov	r2, r0
 800d4a8:	f240 2132 	movw	r1, #562	; 0x232
 800d4ac:	4839      	ldr	r0, [pc, #228]	; (800d594 <__mdiff+0x110>)
 800d4ae:	f000 fdfd 	bl	800e0ac <__assert_func>
 800d4b2:	2301      	movs	r3, #1
 800d4b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d4b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4bc:	bfa4      	itt	ge
 800d4be:	4643      	movge	r3, r8
 800d4c0:	46a0      	movge	r8, r4
 800d4c2:	4630      	mov	r0, r6
 800d4c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d4c8:	bfa6      	itte	ge
 800d4ca:	461c      	movge	r4, r3
 800d4cc:	2500      	movge	r5, #0
 800d4ce:	2501      	movlt	r5, #1
 800d4d0:	f7ff fcf0 	bl	800ceb4 <_Balloc>
 800d4d4:	b920      	cbnz	r0, 800d4e0 <__mdiff+0x5c>
 800d4d6:	4b2e      	ldr	r3, [pc, #184]	; (800d590 <__mdiff+0x10c>)
 800d4d8:	4602      	mov	r2, r0
 800d4da:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d4de:	e7e5      	b.n	800d4ac <__mdiff+0x28>
 800d4e0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d4e4:	6926      	ldr	r6, [r4, #16]
 800d4e6:	60c5      	str	r5, [r0, #12]
 800d4e8:	f104 0914 	add.w	r9, r4, #20
 800d4ec:	f108 0514 	add.w	r5, r8, #20
 800d4f0:	f100 0e14 	add.w	lr, r0, #20
 800d4f4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d4f8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d4fc:	f108 0210 	add.w	r2, r8, #16
 800d500:	46f2      	mov	sl, lr
 800d502:	2100      	movs	r1, #0
 800d504:	f859 3b04 	ldr.w	r3, [r9], #4
 800d508:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d50c:	fa1f f883 	uxth.w	r8, r3
 800d510:	fa11 f18b 	uxtah	r1, r1, fp
 800d514:	0c1b      	lsrs	r3, r3, #16
 800d516:	eba1 0808 	sub.w	r8, r1, r8
 800d51a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d51e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d522:	fa1f f888 	uxth.w	r8, r8
 800d526:	1419      	asrs	r1, r3, #16
 800d528:	454e      	cmp	r6, r9
 800d52a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d52e:	f84a 3b04 	str.w	r3, [sl], #4
 800d532:	d8e7      	bhi.n	800d504 <__mdiff+0x80>
 800d534:	1b33      	subs	r3, r6, r4
 800d536:	3b15      	subs	r3, #21
 800d538:	f023 0303 	bic.w	r3, r3, #3
 800d53c:	3304      	adds	r3, #4
 800d53e:	3415      	adds	r4, #21
 800d540:	42a6      	cmp	r6, r4
 800d542:	bf38      	it	cc
 800d544:	2304      	movcc	r3, #4
 800d546:	441d      	add	r5, r3
 800d548:	4473      	add	r3, lr
 800d54a:	469e      	mov	lr, r3
 800d54c:	462e      	mov	r6, r5
 800d54e:	4566      	cmp	r6, ip
 800d550:	d30e      	bcc.n	800d570 <__mdiff+0xec>
 800d552:	f10c 0203 	add.w	r2, ip, #3
 800d556:	1b52      	subs	r2, r2, r5
 800d558:	f022 0203 	bic.w	r2, r2, #3
 800d55c:	3d03      	subs	r5, #3
 800d55e:	45ac      	cmp	ip, r5
 800d560:	bf38      	it	cc
 800d562:	2200      	movcc	r2, #0
 800d564:	441a      	add	r2, r3
 800d566:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d56a:	b17b      	cbz	r3, 800d58c <__mdiff+0x108>
 800d56c:	6107      	str	r7, [r0, #16]
 800d56e:	e7a3      	b.n	800d4b8 <__mdiff+0x34>
 800d570:	f856 8b04 	ldr.w	r8, [r6], #4
 800d574:	fa11 f288 	uxtah	r2, r1, r8
 800d578:	1414      	asrs	r4, r2, #16
 800d57a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d57e:	b292      	uxth	r2, r2
 800d580:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d584:	f84e 2b04 	str.w	r2, [lr], #4
 800d588:	1421      	asrs	r1, r4, #16
 800d58a:	e7e0      	b.n	800d54e <__mdiff+0xca>
 800d58c:	3f01      	subs	r7, #1
 800d58e:	e7ea      	b.n	800d566 <__mdiff+0xe2>
 800d590:	0800e788 	.word	0x0800e788
 800d594:	0800e878 	.word	0x0800e878

0800d598 <__ulp>:
 800d598:	b082      	sub	sp, #8
 800d59a:	ed8d 0b00 	vstr	d0, [sp]
 800d59e:	9b01      	ldr	r3, [sp, #4]
 800d5a0:	4912      	ldr	r1, [pc, #72]	; (800d5ec <__ulp+0x54>)
 800d5a2:	4019      	ands	r1, r3
 800d5a4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800d5a8:	2900      	cmp	r1, #0
 800d5aa:	dd05      	ble.n	800d5b8 <__ulp+0x20>
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	460b      	mov	r3, r1
 800d5b0:	ec43 2b10 	vmov	d0, r2, r3
 800d5b4:	b002      	add	sp, #8
 800d5b6:	4770      	bx	lr
 800d5b8:	4249      	negs	r1, r1
 800d5ba:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800d5be:	ea4f 5021 	mov.w	r0, r1, asr #20
 800d5c2:	f04f 0200 	mov.w	r2, #0
 800d5c6:	f04f 0300 	mov.w	r3, #0
 800d5ca:	da04      	bge.n	800d5d6 <__ulp+0x3e>
 800d5cc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800d5d0:	fa41 f300 	asr.w	r3, r1, r0
 800d5d4:	e7ec      	b.n	800d5b0 <__ulp+0x18>
 800d5d6:	f1a0 0114 	sub.w	r1, r0, #20
 800d5da:	291e      	cmp	r1, #30
 800d5dc:	bfda      	itte	le
 800d5de:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800d5e2:	fa20 f101 	lsrle.w	r1, r0, r1
 800d5e6:	2101      	movgt	r1, #1
 800d5e8:	460a      	mov	r2, r1
 800d5ea:	e7e1      	b.n	800d5b0 <__ulp+0x18>
 800d5ec:	7ff00000 	.word	0x7ff00000

0800d5f0 <__b2d>:
 800d5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5f2:	6905      	ldr	r5, [r0, #16]
 800d5f4:	f100 0714 	add.w	r7, r0, #20
 800d5f8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d5fc:	1f2e      	subs	r6, r5, #4
 800d5fe:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d602:	4620      	mov	r0, r4
 800d604:	f7ff fd48 	bl	800d098 <__hi0bits>
 800d608:	f1c0 0320 	rsb	r3, r0, #32
 800d60c:	280a      	cmp	r0, #10
 800d60e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d68c <__b2d+0x9c>
 800d612:	600b      	str	r3, [r1, #0]
 800d614:	dc14      	bgt.n	800d640 <__b2d+0x50>
 800d616:	f1c0 0e0b 	rsb	lr, r0, #11
 800d61a:	fa24 f10e 	lsr.w	r1, r4, lr
 800d61e:	42b7      	cmp	r7, r6
 800d620:	ea41 030c 	orr.w	r3, r1, ip
 800d624:	bf34      	ite	cc
 800d626:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d62a:	2100      	movcs	r1, #0
 800d62c:	3015      	adds	r0, #21
 800d62e:	fa04 f000 	lsl.w	r0, r4, r0
 800d632:	fa21 f10e 	lsr.w	r1, r1, lr
 800d636:	ea40 0201 	orr.w	r2, r0, r1
 800d63a:	ec43 2b10 	vmov	d0, r2, r3
 800d63e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d640:	42b7      	cmp	r7, r6
 800d642:	bf3a      	itte	cc
 800d644:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d648:	f1a5 0608 	subcc.w	r6, r5, #8
 800d64c:	2100      	movcs	r1, #0
 800d64e:	380b      	subs	r0, #11
 800d650:	d017      	beq.n	800d682 <__b2d+0x92>
 800d652:	f1c0 0c20 	rsb	ip, r0, #32
 800d656:	fa04 f500 	lsl.w	r5, r4, r0
 800d65a:	42be      	cmp	r6, r7
 800d65c:	fa21 f40c 	lsr.w	r4, r1, ip
 800d660:	ea45 0504 	orr.w	r5, r5, r4
 800d664:	bf8c      	ite	hi
 800d666:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d66a:	2400      	movls	r4, #0
 800d66c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800d670:	fa01 f000 	lsl.w	r0, r1, r0
 800d674:	fa24 f40c 	lsr.w	r4, r4, ip
 800d678:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d67c:	ea40 0204 	orr.w	r2, r0, r4
 800d680:	e7db      	b.n	800d63a <__b2d+0x4a>
 800d682:	ea44 030c 	orr.w	r3, r4, ip
 800d686:	460a      	mov	r2, r1
 800d688:	e7d7      	b.n	800d63a <__b2d+0x4a>
 800d68a:	bf00      	nop
 800d68c:	3ff00000 	.word	0x3ff00000

0800d690 <__d2b>:
 800d690:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d694:	4689      	mov	r9, r1
 800d696:	2101      	movs	r1, #1
 800d698:	ec57 6b10 	vmov	r6, r7, d0
 800d69c:	4690      	mov	r8, r2
 800d69e:	f7ff fc09 	bl	800ceb4 <_Balloc>
 800d6a2:	4604      	mov	r4, r0
 800d6a4:	b930      	cbnz	r0, 800d6b4 <__d2b+0x24>
 800d6a6:	4602      	mov	r2, r0
 800d6a8:	4b25      	ldr	r3, [pc, #148]	; (800d740 <__d2b+0xb0>)
 800d6aa:	4826      	ldr	r0, [pc, #152]	; (800d744 <__d2b+0xb4>)
 800d6ac:	f240 310a 	movw	r1, #778	; 0x30a
 800d6b0:	f000 fcfc 	bl	800e0ac <__assert_func>
 800d6b4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d6b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d6bc:	bb35      	cbnz	r5, 800d70c <__d2b+0x7c>
 800d6be:	2e00      	cmp	r6, #0
 800d6c0:	9301      	str	r3, [sp, #4]
 800d6c2:	d028      	beq.n	800d716 <__d2b+0x86>
 800d6c4:	4668      	mov	r0, sp
 800d6c6:	9600      	str	r6, [sp, #0]
 800d6c8:	f7ff fd06 	bl	800d0d8 <__lo0bits>
 800d6cc:	9900      	ldr	r1, [sp, #0]
 800d6ce:	b300      	cbz	r0, 800d712 <__d2b+0x82>
 800d6d0:	9a01      	ldr	r2, [sp, #4]
 800d6d2:	f1c0 0320 	rsb	r3, r0, #32
 800d6d6:	fa02 f303 	lsl.w	r3, r2, r3
 800d6da:	430b      	orrs	r3, r1
 800d6dc:	40c2      	lsrs	r2, r0
 800d6de:	6163      	str	r3, [r4, #20]
 800d6e0:	9201      	str	r2, [sp, #4]
 800d6e2:	9b01      	ldr	r3, [sp, #4]
 800d6e4:	61a3      	str	r3, [r4, #24]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	bf14      	ite	ne
 800d6ea:	2202      	movne	r2, #2
 800d6ec:	2201      	moveq	r2, #1
 800d6ee:	6122      	str	r2, [r4, #16]
 800d6f0:	b1d5      	cbz	r5, 800d728 <__d2b+0x98>
 800d6f2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d6f6:	4405      	add	r5, r0
 800d6f8:	f8c9 5000 	str.w	r5, [r9]
 800d6fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d700:	f8c8 0000 	str.w	r0, [r8]
 800d704:	4620      	mov	r0, r4
 800d706:	b003      	add	sp, #12
 800d708:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d70c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d710:	e7d5      	b.n	800d6be <__d2b+0x2e>
 800d712:	6161      	str	r1, [r4, #20]
 800d714:	e7e5      	b.n	800d6e2 <__d2b+0x52>
 800d716:	a801      	add	r0, sp, #4
 800d718:	f7ff fcde 	bl	800d0d8 <__lo0bits>
 800d71c:	9b01      	ldr	r3, [sp, #4]
 800d71e:	6163      	str	r3, [r4, #20]
 800d720:	2201      	movs	r2, #1
 800d722:	6122      	str	r2, [r4, #16]
 800d724:	3020      	adds	r0, #32
 800d726:	e7e3      	b.n	800d6f0 <__d2b+0x60>
 800d728:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d72c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d730:	f8c9 0000 	str.w	r0, [r9]
 800d734:	6918      	ldr	r0, [r3, #16]
 800d736:	f7ff fcaf 	bl	800d098 <__hi0bits>
 800d73a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d73e:	e7df      	b.n	800d700 <__d2b+0x70>
 800d740:	0800e788 	.word	0x0800e788
 800d744:	0800e878 	.word	0x0800e878

0800d748 <__ratio>:
 800d748:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d74c:	4688      	mov	r8, r1
 800d74e:	4669      	mov	r1, sp
 800d750:	4681      	mov	r9, r0
 800d752:	f7ff ff4d 	bl	800d5f0 <__b2d>
 800d756:	a901      	add	r1, sp, #4
 800d758:	4640      	mov	r0, r8
 800d75a:	ec55 4b10 	vmov	r4, r5, d0
 800d75e:	f7ff ff47 	bl	800d5f0 <__b2d>
 800d762:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d766:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d76a:	eba3 0c02 	sub.w	ip, r3, r2
 800d76e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d772:	1a9b      	subs	r3, r3, r2
 800d774:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d778:	ec51 0b10 	vmov	r0, r1, d0
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	bfd6      	itet	le
 800d780:	460a      	movle	r2, r1
 800d782:	462a      	movgt	r2, r5
 800d784:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d788:	468b      	mov	fp, r1
 800d78a:	462f      	mov	r7, r5
 800d78c:	bfd4      	ite	le
 800d78e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d792:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d796:	4620      	mov	r0, r4
 800d798:	ee10 2a10 	vmov	r2, s0
 800d79c:	465b      	mov	r3, fp
 800d79e:	4639      	mov	r1, r7
 800d7a0:	f7f3 f854 	bl	800084c <__aeabi_ddiv>
 800d7a4:	ec41 0b10 	vmov	d0, r0, r1
 800d7a8:	b003      	add	sp, #12
 800d7aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d7ae <__copybits>:
 800d7ae:	3901      	subs	r1, #1
 800d7b0:	b570      	push	{r4, r5, r6, lr}
 800d7b2:	1149      	asrs	r1, r1, #5
 800d7b4:	6914      	ldr	r4, [r2, #16]
 800d7b6:	3101      	adds	r1, #1
 800d7b8:	f102 0314 	add.w	r3, r2, #20
 800d7bc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d7c0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d7c4:	1f05      	subs	r5, r0, #4
 800d7c6:	42a3      	cmp	r3, r4
 800d7c8:	d30c      	bcc.n	800d7e4 <__copybits+0x36>
 800d7ca:	1aa3      	subs	r3, r4, r2
 800d7cc:	3b11      	subs	r3, #17
 800d7ce:	f023 0303 	bic.w	r3, r3, #3
 800d7d2:	3211      	adds	r2, #17
 800d7d4:	42a2      	cmp	r2, r4
 800d7d6:	bf88      	it	hi
 800d7d8:	2300      	movhi	r3, #0
 800d7da:	4418      	add	r0, r3
 800d7dc:	2300      	movs	r3, #0
 800d7de:	4288      	cmp	r0, r1
 800d7e0:	d305      	bcc.n	800d7ee <__copybits+0x40>
 800d7e2:	bd70      	pop	{r4, r5, r6, pc}
 800d7e4:	f853 6b04 	ldr.w	r6, [r3], #4
 800d7e8:	f845 6f04 	str.w	r6, [r5, #4]!
 800d7ec:	e7eb      	b.n	800d7c6 <__copybits+0x18>
 800d7ee:	f840 3b04 	str.w	r3, [r0], #4
 800d7f2:	e7f4      	b.n	800d7de <__copybits+0x30>

0800d7f4 <__any_on>:
 800d7f4:	f100 0214 	add.w	r2, r0, #20
 800d7f8:	6900      	ldr	r0, [r0, #16]
 800d7fa:	114b      	asrs	r3, r1, #5
 800d7fc:	4298      	cmp	r0, r3
 800d7fe:	b510      	push	{r4, lr}
 800d800:	db11      	blt.n	800d826 <__any_on+0x32>
 800d802:	dd0a      	ble.n	800d81a <__any_on+0x26>
 800d804:	f011 011f 	ands.w	r1, r1, #31
 800d808:	d007      	beq.n	800d81a <__any_on+0x26>
 800d80a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d80e:	fa24 f001 	lsr.w	r0, r4, r1
 800d812:	fa00 f101 	lsl.w	r1, r0, r1
 800d816:	428c      	cmp	r4, r1
 800d818:	d10b      	bne.n	800d832 <__any_on+0x3e>
 800d81a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d81e:	4293      	cmp	r3, r2
 800d820:	d803      	bhi.n	800d82a <__any_on+0x36>
 800d822:	2000      	movs	r0, #0
 800d824:	bd10      	pop	{r4, pc}
 800d826:	4603      	mov	r3, r0
 800d828:	e7f7      	b.n	800d81a <__any_on+0x26>
 800d82a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d82e:	2900      	cmp	r1, #0
 800d830:	d0f5      	beq.n	800d81e <__any_on+0x2a>
 800d832:	2001      	movs	r0, #1
 800d834:	e7f6      	b.n	800d824 <__any_on+0x30>

0800d836 <_calloc_r>:
 800d836:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d838:	fba1 2402 	umull	r2, r4, r1, r2
 800d83c:	b94c      	cbnz	r4, 800d852 <_calloc_r+0x1c>
 800d83e:	4611      	mov	r1, r2
 800d840:	9201      	str	r2, [sp, #4]
 800d842:	f000 f87b 	bl	800d93c <_malloc_r>
 800d846:	9a01      	ldr	r2, [sp, #4]
 800d848:	4605      	mov	r5, r0
 800d84a:	b930      	cbnz	r0, 800d85a <_calloc_r+0x24>
 800d84c:	4628      	mov	r0, r5
 800d84e:	b003      	add	sp, #12
 800d850:	bd30      	pop	{r4, r5, pc}
 800d852:	220c      	movs	r2, #12
 800d854:	6002      	str	r2, [r0, #0]
 800d856:	2500      	movs	r5, #0
 800d858:	e7f8      	b.n	800d84c <_calloc_r+0x16>
 800d85a:	4621      	mov	r1, r4
 800d85c:	f7fc f860 	bl	8009920 <memset>
 800d860:	e7f4      	b.n	800d84c <_calloc_r+0x16>
	...

0800d864 <_free_r>:
 800d864:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d866:	2900      	cmp	r1, #0
 800d868:	d044      	beq.n	800d8f4 <_free_r+0x90>
 800d86a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d86e:	9001      	str	r0, [sp, #4]
 800d870:	2b00      	cmp	r3, #0
 800d872:	f1a1 0404 	sub.w	r4, r1, #4
 800d876:	bfb8      	it	lt
 800d878:	18e4      	addlt	r4, r4, r3
 800d87a:	f000 fca5 	bl	800e1c8 <__malloc_lock>
 800d87e:	4a1e      	ldr	r2, [pc, #120]	; (800d8f8 <_free_r+0x94>)
 800d880:	9801      	ldr	r0, [sp, #4]
 800d882:	6813      	ldr	r3, [r2, #0]
 800d884:	b933      	cbnz	r3, 800d894 <_free_r+0x30>
 800d886:	6063      	str	r3, [r4, #4]
 800d888:	6014      	str	r4, [r2, #0]
 800d88a:	b003      	add	sp, #12
 800d88c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d890:	f000 bca0 	b.w	800e1d4 <__malloc_unlock>
 800d894:	42a3      	cmp	r3, r4
 800d896:	d908      	bls.n	800d8aa <_free_r+0x46>
 800d898:	6825      	ldr	r5, [r4, #0]
 800d89a:	1961      	adds	r1, r4, r5
 800d89c:	428b      	cmp	r3, r1
 800d89e:	bf01      	itttt	eq
 800d8a0:	6819      	ldreq	r1, [r3, #0]
 800d8a2:	685b      	ldreq	r3, [r3, #4]
 800d8a4:	1949      	addeq	r1, r1, r5
 800d8a6:	6021      	streq	r1, [r4, #0]
 800d8a8:	e7ed      	b.n	800d886 <_free_r+0x22>
 800d8aa:	461a      	mov	r2, r3
 800d8ac:	685b      	ldr	r3, [r3, #4]
 800d8ae:	b10b      	cbz	r3, 800d8b4 <_free_r+0x50>
 800d8b0:	42a3      	cmp	r3, r4
 800d8b2:	d9fa      	bls.n	800d8aa <_free_r+0x46>
 800d8b4:	6811      	ldr	r1, [r2, #0]
 800d8b6:	1855      	adds	r5, r2, r1
 800d8b8:	42a5      	cmp	r5, r4
 800d8ba:	d10b      	bne.n	800d8d4 <_free_r+0x70>
 800d8bc:	6824      	ldr	r4, [r4, #0]
 800d8be:	4421      	add	r1, r4
 800d8c0:	1854      	adds	r4, r2, r1
 800d8c2:	42a3      	cmp	r3, r4
 800d8c4:	6011      	str	r1, [r2, #0]
 800d8c6:	d1e0      	bne.n	800d88a <_free_r+0x26>
 800d8c8:	681c      	ldr	r4, [r3, #0]
 800d8ca:	685b      	ldr	r3, [r3, #4]
 800d8cc:	6053      	str	r3, [r2, #4]
 800d8ce:	4421      	add	r1, r4
 800d8d0:	6011      	str	r1, [r2, #0]
 800d8d2:	e7da      	b.n	800d88a <_free_r+0x26>
 800d8d4:	d902      	bls.n	800d8dc <_free_r+0x78>
 800d8d6:	230c      	movs	r3, #12
 800d8d8:	6003      	str	r3, [r0, #0]
 800d8da:	e7d6      	b.n	800d88a <_free_r+0x26>
 800d8dc:	6825      	ldr	r5, [r4, #0]
 800d8de:	1961      	adds	r1, r4, r5
 800d8e0:	428b      	cmp	r3, r1
 800d8e2:	bf04      	itt	eq
 800d8e4:	6819      	ldreq	r1, [r3, #0]
 800d8e6:	685b      	ldreq	r3, [r3, #4]
 800d8e8:	6063      	str	r3, [r4, #4]
 800d8ea:	bf04      	itt	eq
 800d8ec:	1949      	addeq	r1, r1, r5
 800d8ee:	6021      	streq	r1, [r4, #0]
 800d8f0:	6054      	str	r4, [r2, #4]
 800d8f2:	e7ca      	b.n	800d88a <_free_r+0x26>
 800d8f4:	b003      	add	sp, #12
 800d8f6:	bd30      	pop	{r4, r5, pc}
 800d8f8:	2000055c 	.word	0x2000055c

0800d8fc <sbrk_aligned>:
 800d8fc:	b570      	push	{r4, r5, r6, lr}
 800d8fe:	4e0e      	ldr	r6, [pc, #56]	; (800d938 <sbrk_aligned+0x3c>)
 800d900:	460c      	mov	r4, r1
 800d902:	6831      	ldr	r1, [r6, #0]
 800d904:	4605      	mov	r5, r0
 800d906:	b911      	cbnz	r1, 800d90e <sbrk_aligned+0x12>
 800d908:	f000 fb4a 	bl	800dfa0 <_sbrk_r>
 800d90c:	6030      	str	r0, [r6, #0]
 800d90e:	4621      	mov	r1, r4
 800d910:	4628      	mov	r0, r5
 800d912:	f000 fb45 	bl	800dfa0 <_sbrk_r>
 800d916:	1c43      	adds	r3, r0, #1
 800d918:	d00a      	beq.n	800d930 <sbrk_aligned+0x34>
 800d91a:	1cc4      	adds	r4, r0, #3
 800d91c:	f024 0403 	bic.w	r4, r4, #3
 800d920:	42a0      	cmp	r0, r4
 800d922:	d007      	beq.n	800d934 <sbrk_aligned+0x38>
 800d924:	1a21      	subs	r1, r4, r0
 800d926:	4628      	mov	r0, r5
 800d928:	f000 fb3a 	bl	800dfa0 <_sbrk_r>
 800d92c:	3001      	adds	r0, #1
 800d92e:	d101      	bne.n	800d934 <sbrk_aligned+0x38>
 800d930:	f04f 34ff 	mov.w	r4, #4294967295
 800d934:	4620      	mov	r0, r4
 800d936:	bd70      	pop	{r4, r5, r6, pc}
 800d938:	20000560 	.word	0x20000560

0800d93c <_malloc_r>:
 800d93c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d940:	1ccd      	adds	r5, r1, #3
 800d942:	f025 0503 	bic.w	r5, r5, #3
 800d946:	3508      	adds	r5, #8
 800d948:	2d0c      	cmp	r5, #12
 800d94a:	bf38      	it	cc
 800d94c:	250c      	movcc	r5, #12
 800d94e:	2d00      	cmp	r5, #0
 800d950:	4607      	mov	r7, r0
 800d952:	db01      	blt.n	800d958 <_malloc_r+0x1c>
 800d954:	42a9      	cmp	r1, r5
 800d956:	d905      	bls.n	800d964 <_malloc_r+0x28>
 800d958:	230c      	movs	r3, #12
 800d95a:	603b      	str	r3, [r7, #0]
 800d95c:	2600      	movs	r6, #0
 800d95e:	4630      	mov	r0, r6
 800d960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d964:	4e2e      	ldr	r6, [pc, #184]	; (800da20 <_malloc_r+0xe4>)
 800d966:	f000 fc2f 	bl	800e1c8 <__malloc_lock>
 800d96a:	6833      	ldr	r3, [r6, #0]
 800d96c:	461c      	mov	r4, r3
 800d96e:	bb34      	cbnz	r4, 800d9be <_malloc_r+0x82>
 800d970:	4629      	mov	r1, r5
 800d972:	4638      	mov	r0, r7
 800d974:	f7ff ffc2 	bl	800d8fc <sbrk_aligned>
 800d978:	1c43      	adds	r3, r0, #1
 800d97a:	4604      	mov	r4, r0
 800d97c:	d14d      	bne.n	800da1a <_malloc_r+0xde>
 800d97e:	6834      	ldr	r4, [r6, #0]
 800d980:	4626      	mov	r6, r4
 800d982:	2e00      	cmp	r6, #0
 800d984:	d140      	bne.n	800da08 <_malloc_r+0xcc>
 800d986:	6823      	ldr	r3, [r4, #0]
 800d988:	4631      	mov	r1, r6
 800d98a:	4638      	mov	r0, r7
 800d98c:	eb04 0803 	add.w	r8, r4, r3
 800d990:	f000 fb06 	bl	800dfa0 <_sbrk_r>
 800d994:	4580      	cmp	r8, r0
 800d996:	d13a      	bne.n	800da0e <_malloc_r+0xd2>
 800d998:	6821      	ldr	r1, [r4, #0]
 800d99a:	3503      	adds	r5, #3
 800d99c:	1a6d      	subs	r5, r5, r1
 800d99e:	f025 0503 	bic.w	r5, r5, #3
 800d9a2:	3508      	adds	r5, #8
 800d9a4:	2d0c      	cmp	r5, #12
 800d9a6:	bf38      	it	cc
 800d9a8:	250c      	movcc	r5, #12
 800d9aa:	4629      	mov	r1, r5
 800d9ac:	4638      	mov	r0, r7
 800d9ae:	f7ff ffa5 	bl	800d8fc <sbrk_aligned>
 800d9b2:	3001      	adds	r0, #1
 800d9b4:	d02b      	beq.n	800da0e <_malloc_r+0xd2>
 800d9b6:	6823      	ldr	r3, [r4, #0]
 800d9b8:	442b      	add	r3, r5
 800d9ba:	6023      	str	r3, [r4, #0]
 800d9bc:	e00e      	b.n	800d9dc <_malloc_r+0xa0>
 800d9be:	6822      	ldr	r2, [r4, #0]
 800d9c0:	1b52      	subs	r2, r2, r5
 800d9c2:	d41e      	bmi.n	800da02 <_malloc_r+0xc6>
 800d9c4:	2a0b      	cmp	r2, #11
 800d9c6:	d916      	bls.n	800d9f6 <_malloc_r+0xba>
 800d9c8:	1961      	adds	r1, r4, r5
 800d9ca:	42a3      	cmp	r3, r4
 800d9cc:	6025      	str	r5, [r4, #0]
 800d9ce:	bf18      	it	ne
 800d9d0:	6059      	strne	r1, [r3, #4]
 800d9d2:	6863      	ldr	r3, [r4, #4]
 800d9d4:	bf08      	it	eq
 800d9d6:	6031      	streq	r1, [r6, #0]
 800d9d8:	5162      	str	r2, [r4, r5]
 800d9da:	604b      	str	r3, [r1, #4]
 800d9dc:	4638      	mov	r0, r7
 800d9de:	f104 060b 	add.w	r6, r4, #11
 800d9e2:	f000 fbf7 	bl	800e1d4 <__malloc_unlock>
 800d9e6:	f026 0607 	bic.w	r6, r6, #7
 800d9ea:	1d23      	adds	r3, r4, #4
 800d9ec:	1af2      	subs	r2, r6, r3
 800d9ee:	d0b6      	beq.n	800d95e <_malloc_r+0x22>
 800d9f0:	1b9b      	subs	r3, r3, r6
 800d9f2:	50a3      	str	r3, [r4, r2]
 800d9f4:	e7b3      	b.n	800d95e <_malloc_r+0x22>
 800d9f6:	6862      	ldr	r2, [r4, #4]
 800d9f8:	42a3      	cmp	r3, r4
 800d9fa:	bf0c      	ite	eq
 800d9fc:	6032      	streq	r2, [r6, #0]
 800d9fe:	605a      	strne	r2, [r3, #4]
 800da00:	e7ec      	b.n	800d9dc <_malloc_r+0xa0>
 800da02:	4623      	mov	r3, r4
 800da04:	6864      	ldr	r4, [r4, #4]
 800da06:	e7b2      	b.n	800d96e <_malloc_r+0x32>
 800da08:	4634      	mov	r4, r6
 800da0a:	6876      	ldr	r6, [r6, #4]
 800da0c:	e7b9      	b.n	800d982 <_malloc_r+0x46>
 800da0e:	230c      	movs	r3, #12
 800da10:	603b      	str	r3, [r7, #0]
 800da12:	4638      	mov	r0, r7
 800da14:	f000 fbde 	bl	800e1d4 <__malloc_unlock>
 800da18:	e7a1      	b.n	800d95e <_malloc_r+0x22>
 800da1a:	6025      	str	r5, [r4, #0]
 800da1c:	e7de      	b.n	800d9dc <_malloc_r+0xa0>
 800da1e:	bf00      	nop
 800da20:	2000055c 	.word	0x2000055c

0800da24 <__ssputs_r>:
 800da24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da28:	688e      	ldr	r6, [r1, #8]
 800da2a:	429e      	cmp	r6, r3
 800da2c:	4682      	mov	sl, r0
 800da2e:	460c      	mov	r4, r1
 800da30:	4690      	mov	r8, r2
 800da32:	461f      	mov	r7, r3
 800da34:	d838      	bhi.n	800daa8 <__ssputs_r+0x84>
 800da36:	898a      	ldrh	r2, [r1, #12]
 800da38:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800da3c:	d032      	beq.n	800daa4 <__ssputs_r+0x80>
 800da3e:	6825      	ldr	r5, [r4, #0]
 800da40:	6909      	ldr	r1, [r1, #16]
 800da42:	eba5 0901 	sub.w	r9, r5, r1
 800da46:	6965      	ldr	r5, [r4, #20]
 800da48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800da4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800da50:	3301      	adds	r3, #1
 800da52:	444b      	add	r3, r9
 800da54:	106d      	asrs	r5, r5, #1
 800da56:	429d      	cmp	r5, r3
 800da58:	bf38      	it	cc
 800da5a:	461d      	movcc	r5, r3
 800da5c:	0553      	lsls	r3, r2, #21
 800da5e:	d531      	bpl.n	800dac4 <__ssputs_r+0xa0>
 800da60:	4629      	mov	r1, r5
 800da62:	f7ff ff6b 	bl	800d93c <_malloc_r>
 800da66:	4606      	mov	r6, r0
 800da68:	b950      	cbnz	r0, 800da80 <__ssputs_r+0x5c>
 800da6a:	230c      	movs	r3, #12
 800da6c:	f8ca 3000 	str.w	r3, [sl]
 800da70:	89a3      	ldrh	r3, [r4, #12]
 800da72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da76:	81a3      	strh	r3, [r4, #12]
 800da78:	f04f 30ff 	mov.w	r0, #4294967295
 800da7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da80:	6921      	ldr	r1, [r4, #16]
 800da82:	464a      	mov	r2, r9
 800da84:	f7fb ff3e 	bl	8009904 <memcpy>
 800da88:	89a3      	ldrh	r3, [r4, #12]
 800da8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800da8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da92:	81a3      	strh	r3, [r4, #12]
 800da94:	6126      	str	r6, [r4, #16]
 800da96:	6165      	str	r5, [r4, #20]
 800da98:	444e      	add	r6, r9
 800da9a:	eba5 0509 	sub.w	r5, r5, r9
 800da9e:	6026      	str	r6, [r4, #0]
 800daa0:	60a5      	str	r5, [r4, #8]
 800daa2:	463e      	mov	r6, r7
 800daa4:	42be      	cmp	r6, r7
 800daa6:	d900      	bls.n	800daaa <__ssputs_r+0x86>
 800daa8:	463e      	mov	r6, r7
 800daaa:	6820      	ldr	r0, [r4, #0]
 800daac:	4632      	mov	r2, r6
 800daae:	4641      	mov	r1, r8
 800dab0:	f000 fb70 	bl	800e194 <memmove>
 800dab4:	68a3      	ldr	r3, [r4, #8]
 800dab6:	1b9b      	subs	r3, r3, r6
 800dab8:	60a3      	str	r3, [r4, #8]
 800daba:	6823      	ldr	r3, [r4, #0]
 800dabc:	4433      	add	r3, r6
 800dabe:	6023      	str	r3, [r4, #0]
 800dac0:	2000      	movs	r0, #0
 800dac2:	e7db      	b.n	800da7c <__ssputs_r+0x58>
 800dac4:	462a      	mov	r2, r5
 800dac6:	f000 fb8b 	bl	800e1e0 <_realloc_r>
 800daca:	4606      	mov	r6, r0
 800dacc:	2800      	cmp	r0, #0
 800dace:	d1e1      	bne.n	800da94 <__ssputs_r+0x70>
 800dad0:	6921      	ldr	r1, [r4, #16]
 800dad2:	4650      	mov	r0, sl
 800dad4:	f7ff fec6 	bl	800d864 <_free_r>
 800dad8:	e7c7      	b.n	800da6a <__ssputs_r+0x46>
	...

0800dadc <_svfiprintf_r>:
 800dadc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dae0:	4698      	mov	r8, r3
 800dae2:	898b      	ldrh	r3, [r1, #12]
 800dae4:	061b      	lsls	r3, r3, #24
 800dae6:	b09d      	sub	sp, #116	; 0x74
 800dae8:	4607      	mov	r7, r0
 800daea:	460d      	mov	r5, r1
 800daec:	4614      	mov	r4, r2
 800daee:	d50e      	bpl.n	800db0e <_svfiprintf_r+0x32>
 800daf0:	690b      	ldr	r3, [r1, #16]
 800daf2:	b963      	cbnz	r3, 800db0e <_svfiprintf_r+0x32>
 800daf4:	2140      	movs	r1, #64	; 0x40
 800daf6:	f7ff ff21 	bl	800d93c <_malloc_r>
 800dafa:	6028      	str	r0, [r5, #0]
 800dafc:	6128      	str	r0, [r5, #16]
 800dafe:	b920      	cbnz	r0, 800db0a <_svfiprintf_r+0x2e>
 800db00:	230c      	movs	r3, #12
 800db02:	603b      	str	r3, [r7, #0]
 800db04:	f04f 30ff 	mov.w	r0, #4294967295
 800db08:	e0d1      	b.n	800dcae <_svfiprintf_r+0x1d2>
 800db0a:	2340      	movs	r3, #64	; 0x40
 800db0c:	616b      	str	r3, [r5, #20]
 800db0e:	2300      	movs	r3, #0
 800db10:	9309      	str	r3, [sp, #36]	; 0x24
 800db12:	2320      	movs	r3, #32
 800db14:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800db18:	f8cd 800c 	str.w	r8, [sp, #12]
 800db1c:	2330      	movs	r3, #48	; 0x30
 800db1e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800dcc8 <_svfiprintf_r+0x1ec>
 800db22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800db26:	f04f 0901 	mov.w	r9, #1
 800db2a:	4623      	mov	r3, r4
 800db2c:	469a      	mov	sl, r3
 800db2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db32:	b10a      	cbz	r2, 800db38 <_svfiprintf_r+0x5c>
 800db34:	2a25      	cmp	r2, #37	; 0x25
 800db36:	d1f9      	bne.n	800db2c <_svfiprintf_r+0x50>
 800db38:	ebba 0b04 	subs.w	fp, sl, r4
 800db3c:	d00b      	beq.n	800db56 <_svfiprintf_r+0x7a>
 800db3e:	465b      	mov	r3, fp
 800db40:	4622      	mov	r2, r4
 800db42:	4629      	mov	r1, r5
 800db44:	4638      	mov	r0, r7
 800db46:	f7ff ff6d 	bl	800da24 <__ssputs_r>
 800db4a:	3001      	adds	r0, #1
 800db4c:	f000 80aa 	beq.w	800dca4 <_svfiprintf_r+0x1c8>
 800db50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800db52:	445a      	add	r2, fp
 800db54:	9209      	str	r2, [sp, #36]	; 0x24
 800db56:	f89a 3000 	ldrb.w	r3, [sl]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	f000 80a2 	beq.w	800dca4 <_svfiprintf_r+0x1c8>
 800db60:	2300      	movs	r3, #0
 800db62:	f04f 32ff 	mov.w	r2, #4294967295
 800db66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db6a:	f10a 0a01 	add.w	sl, sl, #1
 800db6e:	9304      	str	r3, [sp, #16]
 800db70:	9307      	str	r3, [sp, #28]
 800db72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800db76:	931a      	str	r3, [sp, #104]	; 0x68
 800db78:	4654      	mov	r4, sl
 800db7a:	2205      	movs	r2, #5
 800db7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db80:	4851      	ldr	r0, [pc, #324]	; (800dcc8 <_svfiprintf_r+0x1ec>)
 800db82:	f7f2 fb2d 	bl	80001e0 <memchr>
 800db86:	9a04      	ldr	r2, [sp, #16]
 800db88:	b9d8      	cbnz	r0, 800dbc2 <_svfiprintf_r+0xe6>
 800db8a:	06d0      	lsls	r0, r2, #27
 800db8c:	bf44      	itt	mi
 800db8e:	2320      	movmi	r3, #32
 800db90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db94:	0711      	lsls	r1, r2, #28
 800db96:	bf44      	itt	mi
 800db98:	232b      	movmi	r3, #43	; 0x2b
 800db9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db9e:	f89a 3000 	ldrb.w	r3, [sl]
 800dba2:	2b2a      	cmp	r3, #42	; 0x2a
 800dba4:	d015      	beq.n	800dbd2 <_svfiprintf_r+0xf6>
 800dba6:	9a07      	ldr	r2, [sp, #28]
 800dba8:	4654      	mov	r4, sl
 800dbaa:	2000      	movs	r0, #0
 800dbac:	f04f 0c0a 	mov.w	ip, #10
 800dbb0:	4621      	mov	r1, r4
 800dbb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dbb6:	3b30      	subs	r3, #48	; 0x30
 800dbb8:	2b09      	cmp	r3, #9
 800dbba:	d94e      	bls.n	800dc5a <_svfiprintf_r+0x17e>
 800dbbc:	b1b0      	cbz	r0, 800dbec <_svfiprintf_r+0x110>
 800dbbe:	9207      	str	r2, [sp, #28]
 800dbc0:	e014      	b.n	800dbec <_svfiprintf_r+0x110>
 800dbc2:	eba0 0308 	sub.w	r3, r0, r8
 800dbc6:	fa09 f303 	lsl.w	r3, r9, r3
 800dbca:	4313      	orrs	r3, r2
 800dbcc:	9304      	str	r3, [sp, #16]
 800dbce:	46a2      	mov	sl, r4
 800dbd0:	e7d2      	b.n	800db78 <_svfiprintf_r+0x9c>
 800dbd2:	9b03      	ldr	r3, [sp, #12]
 800dbd4:	1d19      	adds	r1, r3, #4
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	9103      	str	r1, [sp, #12]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	bfbb      	ittet	lt
 800dbde:	425b      	neglt	r3, r3
 800dbe0:	f042 0202 	orrlt.w	r2, r2, #2
 800dbe4:	9307      	strge	r3, [sp, #28]
 800dbe6:	9307      	strlt	r3, [sp, #28]
 800dbe8:	bfb8      	it	lt
 800dbea:	9204      	strlt	r2, [sp, #16]
 800dbec:	7823      	ldrb	r3, [r4, #0]
 800dbee:	2b2e      	cmp	r3, #46	; 0x2e
 800dbf0:	d10c      	bne.n	800dc0c <_svfiprintf_r+0x130>
 800dbf2:	7863      	ldrb	r3, [r4, #1]
 800dbf4:	2b2a      	cmp	r3, #42	; 0x2a
 800dbf6:	d135      	bne.n	800dc64 <_svfiprintf_r+0x188>
 800dbf8:	9b03      	ldr	r3, [sp, #12]
 800dbfa:	1d1a      	adds	r2, r3, #4
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	9203      	str	r2, [sp, #12]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	bfb8      	it	lt
 800dc04:	f04f 33ff 	movlt.w	r3, #4294967295
 800dc08:	3402      	adds	r4, #2
 800dc0a:	9305      	str	r3, [sp, #20]
 800dc0c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800dcd8 <_svfiprintf_r+0x1fc>
 800dc10:	7821      	ldrb	r1, [r4, #0]
 800dc12:	2203      	movs	r2, #3
 800dc14:	4650      	mov	r0, sl
 800dc16:	f7f2 fae3 	bl	80001e0 <memchr>
 800dc1a:	b140      	cbz	r0, 800dc2e <_svfiprintf_r+0x152>
 800dc1c:	2340      	movs	r3, #64	; 0x40
 800dc1e:	eba0 000a 	sub.w	r0, r0, sl
 800dc22:	fa03 f000 	lsl.w	r0, r3, r0
 800dc26:	9b04      	ldr	r3, [sp, #16]
 800dc28:	4303      	orrs	r3, r0
 800dc2a:	3401      	adds	r4, #1
 800dc2c:	9304      	str	r3, [sp, #16]
 800dc2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc32:	4826      	ldr	r0, [pc, #152]	; (800dccc <_svfiprintf_r+0x1f0>)
 800dc34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dc38:	2206      	movs	r2, #6
 800dc3a:	f7f2 fad1 	bl	80001e0 <memchr>
 800dc3e:	2800      	cmp	r0, #0
 800dc40:	d038      	beq.n	800dcb4 <_svfiprintf_r+0x1d8>
 800dc42:	4b23      	ldr	r3, [pc, #140]	; (800dcd0 <_svfiprintf_r+0x1f4>)
 800dc44:	bb1b      	cbnz	r3, 800dc8e <_svfiprintf_r+0x1b2>
 800dc46:	9b03      	ldr	r3, [sp, #12]
 800dc48:	3307      	adds	r3, #7
 800dc4a:	f023 0307 	bic.w	r3, r3, #7
 800dc4e:	3308      	adds	r3, #8
 800dc50:	9303      	str	r3, [sp, #12]
 800dc52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc54:	4433      	add	r3, r6
 800dc56:	9309      	str	r3, [sp, #36]	; 0x24
 800dc58:	e767      	b.n	800db2a <_svfiprintf_r+0x4e>
 800dc5a:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc5e:	460c      	mov	r4, r1
 800dc60:	2001      	movs	r0, #1
 800dc62:	e7a5      	b.n	800dbb0 <_svfiprintf_r+0xd4>
 800dc64:	2300      	movs	r3, #0
 800dc66:	3401      	adds	r4, #1
 800dc68:	9305      	str	r3, [sp, #20]
 800dc6a:	4619      	mov	r1, r3
 800dc6c:	f04f 0c0a 	mov.w	ip, #10
 800dc70:	4620      	mov	r0, r4
 800dc72:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc76:	3a30      	subs	r2, #48	; 0x30
 800dc78:	2a09      	cmp	r2, #9
 800dc7a:	d903      	bls.n	800dc84 <_svfiprintf_r+0x1a8>
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d0c5      	beq.n	800dc0c <_svfiprintf_r+0x130>
 800dc80:	9105      	str	r1, [sp, #20]
 800dc82:	e7c3      	b.n	800dc0c <_svfiprintf_r+0x130>
 800dc84:	fb0c 2101 	mla	r1, ip, r1, r2
 800dc88:	4604      	mov	r4, r0
 800dc8a:	2301      	movs	r3, #1
 800dc8c:	e7f0      	b.n	800dc70 <_svfiprintf_r+0x194>
 800dc8e:	ab03      	add	r3, sp, #12
 800dc90:	9300      	str	r3, [sp, #0]
 800dc92:	462a      	mov	r2, r5
 800dc94:	4b0f      	ldr	r3, [pc, #60]	; (800dcd4 <_svfiprintf_r+0x1f8>)
 800dc96:	a904      	add	r1, sp, #16
 800dc98:	4638      	mov	r0, r7
 800dc9a:	f7fb fee9 	bl	8009a70 <_printf_float>
 800dc9e:	1c42      	adds	r2, r0, #1
 800dca0:	4606      	mov	r6, r0
 800dca2:	d1d6      	bne.n	800dc52 <_svfiprintf_r+0x176>
 800dca4:	89ab      	ldrh	r3, [r5, #12]
 800dca6:	065b      	lsls	r3, r3, #25
 800dca8:	f53f af2c 	bmi.w	800db04 <_svfiprintf_r+0x28>
 800dcac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dcae:	b01d      	add	sp, #116	; 0x74
 800dcb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcb4:	ab03      	add	r3, sp, #12
 800dcb6:	9300      	str	r3, [sp, #0]
 800dcb8:	462a      	mov	r2, r5
 800dcba:	4b06      	ldr	r3, [pc, #24]	; (800dcd4 <_svfiprintf_r+0x1f8>)
 800dcbc:	a904      	add	r1, sp, #16
 800dcbe:	4638      	mov	r0, r7
 800dcc0:	f7fc f97a 	bl	8009fb8 <_printf_i>
 800dcc4:	e7eb      	b.n	800dc9e <_svfiprintf_r+0x1c2>
 800dcc6:	bf00      	nop
 800dcc8:	0800e9d4 	.word	0x0800e9d4
 800dccc:	0800e9de 	.word	0x0800e9de
 800dcd0:	08009a71 	.word	0x08009a71
 800dcd4:	0800da25 	.word	0x0800da25
 800dcd8:	0800e9da 	.word	0x0800e9da

0800dcdc <__sfputc_r>:
 800dcdc:	6893      	ldr	r3, [r2, #8]
 800dcde:	3b01      	subs	r3, #1
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	b410      	push	{r4}
 800dce4:	6093      	str	r3, [r2, #8]
 800dce6:	da08      	bge.n	800dcfa <__sfputc_r+0x1e>
 800dce8:	6994      	ldr	r4, [r2, #24]
 800dcea:	42a3      	cmp	r3, r4
 800dcec:	db01      	blt.n	800dcf2 <__sfputc_r+0x16>
 800dcee:	290a      	cmp	r1, #10
 800dcf0:	d103      	bne.n	800dcfa <__sfputc_r+0x1e>
 800dcf2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dcf6:	f7fd bbf7 	b.w	800b4e8 <__swbuf_r>
 800dcfa:	6813      	ldr	r3, [r2, #0]
 800dcfc:	1c58      	adds	r0, r3, #1
 800dcfe:	6010      	str	r0, [r2, #0]
 800dd00:	7019      	strb	r1, [r3, #0]
 800dd02:	4608      	mov	r0, r1
 800dd04:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd08:	4770      	bx	lr

0800dd0a <__sfputs_r>:
 800dd0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd0c:	4606      	mov	r6, r0
 800dd0e:	460f      	mov	r7, r1
 800dd10:	4614      	mov	r4, r2
 800dd12:	18d5      	adds	r5, r2, r3
 800dd14:	42ac      	cmp	r4, r5
 800dd16:	d101      	bne.n	800dd1c <__sfputs_r+0x12>
 800dd18:	2000      	movs	r0, #0
 800dd1a:	e007      	b.n	800dd2c <__sfputs_r+0x22>
 800dd1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd20:	463a      	mov	r2, r7
 800dd22:	4630      	mov	r0, r6
 800dd24:	f7ff ffda 	bl	800dcdc <__sfputc_r>
 800dd28:	1c43      	adds	r3, r0, #1
 800dd2a:	d1f3      	bne.n	800dd14 <__sfputs_r+0xa>
 800dd2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dd30 <_vfiprintf_r>:
 800dd30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd34:	460d      	mov	r5, r1
 800dd36:	b09d      	sub	sp, #116	; 0x74
 800dd38:	4614      	mov	r4, r2
 800dd3a:	4698      	mov	r8, r3
 800dd3c:	4606      	mov	r6, r0
 800dd3e:	b118      	cbz	r0, 800dd48 <_vfiprintf_r+0x18>
 800dd40:	6983      	ldr	r3, [r0, #24]
 800dd42:	b90b      	cbnz	r3, 800dd48 <_vfiprintf_r+0x18>
 800dd44:	f7fe fc24 	bl	800c590 <__sinit>
 800dd48:	4b89      	ldr	r3, [pc, #548]	; (800df70 <_vfiprintf_r+0x240>)
 800dd4a:	429d      	cmp	r5, r3
 800dd4c:	d11b      	bne.n	800dd86 <_vfiprintf_r+0x56>
 800dd4e:	6875      	ldr	r5, [r6, #4]
 800dd50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dd52:	07d9      	lsls	r1, r3, #31
 800dd54:	d405      	bmi.n	800dd62 <_vfiprintf_r+0x32>
 800dd56:	89ab      	ldrh	r3, [r5, #12]
 800dd58:	059a      	lsls	r2, r3, #22
 800dd5a:	d402      	bmi.n	800dd62 <_vfiprintf_r+0x32>
 800dd5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dd5e:	f7ff f828 	bl	800cdb2 <__retarget_lock_acquire_recursive>
 800dd62:	89ab      	ldrh	r3, [r5, #12]
 800dd64:	071b      	lsls	r3, r3, #28
 800dd66:	d501      	bpl.n	800dd6c <_vfiprintf_r+0x3c>
 800dd68:	692b      	ldr	r3, [r5, #16]
 800dd6a:	b9eb      	cbnz	r3, 800dda8 <_vfiprintf_r+0x78>
 800dd6c:	4629      	mov	r1, r5
 800dd6e:	4630      	mov	r0, r6
 800dd70:	f7fd fc0c 	bl	800b58c <__swsetup_r>
 800dd74:	b1c0      	cbz	r0, 800dda8 <_vfiprintf_r+0x78>
 800dd76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dd78:	07dc      	lsls	r4, r3, #31
 800dd7a:	d50e      	bpl.n	800dd9a <_vfiprintf_r+0x6a>
 800dd7c:	f04f 30ff 	mov.w	r0, #4294967295
 800dd80:	b01d      	add	sp, #116	; 0x74
 800dd82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd86:	4b7b      	ldr	r3, [pc, #492]	; (800df74 <_vfiprintf_r+0x244>)
 800dd88:	429d      	cmp	r5, r3
 800dd8a:	d101      	bne.n	800dd90 <_vfiprintf_r+0x60>
 800dd8c:	68b5      	ldr	r5, [r6, #8]
 800dd8e:	e7df      	b.n	800dd50 <_vfiprintf_r+0x20>
 800dd90:	4b79      	ldr	r3, [pc, #484]	; (800df78 <_vfiprintf_r+0x248>)
 800dd92:	429d      	cmp	r5, r3
 800dd94:	bf08      	it	eq
 800dd96:	68f5      	ldreq	r5, [r6, #12]
 800dd98:	e7da      	b.n	800dd50 <_vfiprintf_r+0x20>
 800dd9a:	89ab      	ldrh	r3, [r5, #12]
 800dd9c:	0598      	lsls	r0, r3, #22
 800dd9e:	d4ed      	bmi.n	800dd7c <_vfiprintf_r+0x4c>
 800dda0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dda2:	f7ff f807 	bl	800cdb4 <__retarget_lock_release_recursive>
 800dda6:	e7e9      	b.n	800dd7c <_vfiprintf_r+0x4c>
 800dda8:	2300      	movs	r3, #0
 800ddaa:	9309      	str	r3, [sp, #36]	; 0x24
 800ddac:	2320      	movs	r3, #32
 800ddae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ddb2:	f8cd 800c 	str.w	r8, [sp, #12]
 800ddb6:	2330      	movs	r3, #48	; 0x30
 800ddb8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800df7c <_vfiprintf_r+0x24c>
 800ddbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ddc0:	f04f 0901 	mov.w	r9, #1
 800ddc4:	4623      	mov	r3, r4
 800ddc6:	469a      	mov	sl, r3
 800ddc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ddcc:	b10a      	cbz	r2, 800ddd2 <_vfiprintf_r+0xa2>
 800ddce:	2a25      	cmp	r2, #37	; 0x25
 800ddd0:	d1f9      	bne.n	800ddc6 <_vfiprintf_r+0x96>
 800ddd2:	ebba 0b04 	subs.w	fp, sl, r4
 800ddd6:	d00b      	beq.n	800ddf0 <_vfiprintf_r+0xc0>
 800ddd8:	465b      	mov	r3, fp
 800ddda:	4622      	mov	r2, r4
 800dddc:	4629      	mov	r1, r5
 800ddde:	4630      	mov	r0, r6
 800dde0:	f7ff ff93 	bl	800dd0a <__sfputs_r>
 800dde4:	3001      	adds	r0, #1
 800dde6:	f000 80aa 	beq.w	800df3e <_vfiprintf_r+0x20e>
 800ddea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ddec:	445a      	add	r2, fp
 800ddee:	9209      	str	r2, [sp, #36]	; 0x24
 800ddf0:	f89a 3000 	ldrb.w	r3, [sl]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	f000 80a2 	beq.w	800df3e <_vfiprintf_r+0x20e>
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	f04f 32ff 	mov.w	r2, #4294967295
 800de00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800de04:	f10a 0a01 	add.w	sl, sl, #1
 800de08:	9304      	str	r3, [sp, #16]
 800de0a:	9307      	str	r3, [sp, #28]
 800de0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800de10:	931a      	str	r3, [sp, #104]	; 0x68
 800de12:	4654      	mov	r4, sl
 800de14:	2205      	movs	r2, #5
 800de16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de1a:	4858      	ldr	r0, [pc, #352]	; (800df7c <_vfiprintf_r+0x24c>)
 800de1c:	f7f2 f9e0 	bl	80001e0 <memchr>
 800de20:	9a04      	ldr	r2, [sp, #16]
 800de22:	b9d8      	cbnz	r0, 800de5c <_vfiprintf_r+0x12c>
 800de24:	06d1      	lsls	r1, r2, #27
 800de26:	bf44      	itt	mi
 800de28:	2320      	movmi	r3, #32
 800de2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de2e:	0713      	lsls	r3, r2, #28
 800de30:	bf44      	itt	mi
 800de32:	232b      	movmi	r3, #43	; 0x2b
 800de34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de38:	f89a 3000 	ldrb.w	r3, [sl]
 800de3c:	2b2a      	cmp	r3, #42	; 0x2a
 800de3e:	d015      	beq.n	800de6c <_vfiprintf_r+0x13c>
 800de40:	9a07      	ldr	r2, [sp, #28]
 800de42:	4654      	mov	r4, sl
 800de44:	2000      	movs	r0, #0
 800de46:	f04f 0c0a 	mov.w	ip, #10
 800de4a:	4621      	mov	r1, r4
 800de4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800de50:	3b30      	subs	r3, #48	; 0x30
 800de52:	2b09      	cmp	r3, #9
 800de54:	d94e      	bls.n	800def4 <_vfiprintf_r+0x1c4>
 800de56:	b1b0      	cbz	r0, 800de86 <_vfiprintf_r+0x156>
 800de58:	9207      	str	r2, [sp, #28]
 800de5a:	e014      	b.n	800de86 <_vfiprintf_r+0x156>
 800de5c:	eba0 0308 	sub.w	r3, r0, r8
 800de60:	fa09 f303 	lsl.w	r3, r9, r3
 800de64:	4313      	orrs	r3, r2
 800de66:	9304      	str	r3, [sp, #16]
 800de68:	46a2      	mov	sl, r4
 800de6a:	e7d2      	b.n	800de12 <_vfiprintf_r+0xe2>
 800de6c:	9b03      	ldr	r3, [sp, #12]
 800de6e:	1d19      	adds	r1, r3, #4
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	9103      	str	r1, [sp, #12]
 800de74:	2b00      	cmp	r3, #0
 800de76:	bfbb      	ittet	lt
 800de78:	425b      	neglt	r3, r3
 800de7a:	f042 0202 	orrlt.w	r2, r2, #2
 800de7e:	9307      	strge	r3, [sp, #28]
 800de80:	9307      	strlt	r3, [sp, #28]
 800de82:	bfb8      	it	lt
 800de84:	9204      	strlt	r2, [sp, #16]
 800de86:	7823      	ldrb	r3, [r4, #0]
 800de88:	2b2e      	cmp	r3, #46	; 0x2e
 800de8a:	d10c      	bne.n	800dea6 <_vfiprintf_r+0x176>
 800de8c:	7863      	ldrb	r3, [r4, #1]
 800de8e:	2b2a      	cmp	r3, #42	; 0x2a
 800de90:	d135      	bne.n	800defe <_vfiprintf_r+0x1ce>
 800de92:	9b03      	ldr	r3, [sp, #12]
 800de94:	1d1a      	adds	r2, r3, #4
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	9203      	str	r2, [sp, #12]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	bfb8      	it	lt
 800de9e:	f04f 33ff 	movlt.w	r3, #4294967295
 800dea2:	3402      	adds	r4, #2
 800dea4:	9305      	str	r3, [sp, #20]
 800dea6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800df8c <_vfiprintf_r+0x25c>
 800deaa:	7821      	ldrb	r1, [r4, #0]
 800deac:	2203      	movs	r2, #3
 800deae:	4650      	mov	r0, sl
 800deb0:	f7f2 f996 	bl	80001e0 <memchr>
 800deb4:	b140      	cbz	r0, 800dec8 <_vfiprintf_r+0x198>
 800deb6:	2340      	movs	r3, #64	; 0x40
 800deb8:	eba0 000a 	sub.w	r0, r0, sl
 800debc:	fa03 f000 	lsl.w	r0, r3, r0
 800dec0:	9b04      	ldr	r3, [sp, #16]
 800dec2:	4303      	orrs	r3, r0
 800dec4:	3401      	adds	r4, #1
 800dec6:	9304      	str	r3, [sp, #16]
 800dec8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800decc:	482c      	ldr	r0, [pc, #176]	; (800df80 <_vfiprintf_r+0x250>)
 800dece:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ded2:	2206      	movs	r2, #6
 800ded4:	f7f2 f984 	bl	80001e0 <memchr>
 800ded8:	2800      	cmp	r0, #0
 800deda:	d03f      	beq.n	800df5c <_vfiprintf_r+0x22c>
 800dedc:	4b29      	ldr	r3, [pc, #164]	; (800df84 <_vfiprintf_r+0x254>)
 800dede:	bb1b      	cbnz	r3, 800df28 <_vfiprintf_r+0x1f8>
 800dee0:	9b03      	ldr	r3, [sp, #12]
 800dee2:	3307      	adds	r3, #7
 800dee4:	f023 0307 	bic.w	r3, r3, #7
 800dee8:	3308      	adds	r3, #8
 800deea:	9303      	str	r3, [sp, #12]
 800deec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800deee:	443b      	add	r3, r7
 800def0:	9309      	str	r3, [sp, #36]	; 0x24
 800def2:	e767      	b.n	800ddc4 <_vfiprintf_r+0x94>
 800def4:	fb0c 3202 	mla	r2, ip, r2, r3
 800def8:	460c      	mov	r4, r1
 800defa:	2001      	movs	r0, #1
 800defc:	e7a5      	b.n	800de4a <_vfiprintf_r+0x11a>
 800defe:	2300      	movs	r3, #0
 800df00:	3401      	adds	r4, #1
 800df02:	9305      	str	r3, [sp, #20]
 800df04:	4619      	mov	r1, r3
 800df06:	f04f 0c0a 	mov.w	ip, #10
 800df0a:	4620      	mov	r0, r4
 800df0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800df10:	3a30      	subs	r2, #48	; 0x30
 800df12:	2a09      	cmp	r2, #9
 800df14:	d903      	bls.n	800df1e <_vfiprintf_r+0x1ee>
 800df16:	2b00      	cmp	r3, #0
 800df18:	d0c5      	beq.n	800dea6 <_vfiprintf_r+0x176>
 800df1a:	9105      	str	r1, [sp, #20]
 800df1c:	e7c3      	b.n	800dea6 <_vfiprintf_r+0x176>
 800df1e:	fb0c 2101 	mla	r1, ip, r1, r2
 800df22:	4604      	mov	r4, r0
 800df24:	2301      	movs	r3, #1
 800df26:	e7f0      	b.n	800df0a <_vfiprintf_r+0x1da>
 800df28:	ab03      	add	r3, sp, #12
 800df2a:	9300      	str	r3, [sp, #0]
 800df2c:	462a      	mov	r2, r5
 800df2e:	4b16      	ldr	r3, [pc, #88]	; (800df88 <_vfiprintf_r+0x258>)
 800df30:	a904      	add	r1, sp, #16
 800df32:	4630      	mov	r0, r6
 800df34:	f7fb fd9c 	bl	8009a70 <_printf_float>
 800df38:	4607      	mov	r7, r0
 800df3a:	1c78      	adds	r0, r7, #1
 800df3c:	d1d6      	bne.n	800deec <_vfiprintf_r+0x1bc>
 800df3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800df40:	07d9      	lsls	r1, r3, #31
 800df42:	d405      	bmi.n	800df50 <_vfiprintf_r+0x220>
 800df44:	89ab      	ldrh	r3, [r5, #12]
 800df46:	059a      	lsls	r2, r3, #22
 800df48:	d402      	bmi.n	800df50 <_vfiprintf_r+0x220>
 800df4a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800df4c:	f7fe ff32 	bl	800cdb4 <__retarget_lock_release_recursive>
 800df50:	89ab      	ldrh	r3, [r5, #12]
 800df52:	065b      	lsls	r3, r3, #25
 800df54:	f53f af12 	bmi.w	800dd7c <_vfiprintf_r+0x4c>
 800df58:	9809      	ldr	r0, [sp, #36]	; 0x24
 800df5a:	e711      	b.n	800dd80 <_vfiprintf_r+0x50>
 800df5c:	ab03      	add	r3, sp, #12
 800df5e:	9300      	str	r3, [sp, #0]
 800df60:	462a      	mov	r2, r5
 800df62:	4b09      	ldr	r3, [pc, #36]	; (800df88 <_vfiprintf_r+0x258>)
 800df64:	a904      	add	r1, sp, #16
 800df66:	4630      	mov	r0, r6
 800df68:	f7fc f826 	bl	8009fb8 <_printf_i>
 800df6c:	e7e4      	b.n	800df38 <_vfiprintf_r+0x208>
 800df6e:	bf00      	nop
 800df70:	0800e7bc 	.word	0x0800e7bc
 800df74:	0800e7dc 	.word	0x0800e7dc
 800df78:	0800e79c 	.word	0x0800e79c
 800df7c:	0800e9d4 	.word	0x0800e9d4
 800df80:	0800e9de 	.word	0x0800e9de
 800df84:	08009a71 	.word	0x08009a71
 800df88:	0800dd0b 	.word	0x0800dd0b
 800df8c:	0800e9da 	.word	0x0800e9da

0800df90 <nan>:
 800df90:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800df98 <nan+0x8>
 800df94:	4770      	bx	lr
 800df96:	bf00      	nop
 800df98:	00000000 	.word	0x00000000
 800df9c:	7ff80000 	.word	0x7ff80000

0800dfa0 <_sbrk_r>:
 800dfa0:	b538      	push	{r3, r4, r5, lr}
 800dfa2:	4d06      	ldr	r5, [pc, #24]	; (800dfbc <_sbrk_r+0x1c>)
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	4604      	mov	r4, r0
 800dfa8:	4608      	mov	r0, r1
 800dfaa:	602b      	str	r3, [r5, #0]
 800dfac:	f7f4 fb5a 	bl	8002664 <_sbrk>
 800dfb0:	1c43      	adds	r3, r0, #1
 800dfb2:	d102      	bne.n	800dfba <_sbrk_r+0x1a>
 800dfb4:	682b      	ldr	r3, [r5, #0]
 800dfb6:	b103      	cbz	r3, 800dfba <_sbrk_r+0x1a>
 800dfb8:	6023      	str	r3, [r4, #0]
 800dfba:	bd38      	pop	{r3, r4, r5, pc}
 800dfbc:	20000564 	.word	0x20000564

0800dfc0 <__sread>:
 800dfc0:	b510      	push	{r4, lr}
 800dfc2:	460c      	mov	r4, r1
 800dfc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dfc8:	f000 f93a 	bl	800e240 <_read_r>
 800dfcc:	2800      	cmp	r0, #0
 800dfce:	bfab      	itete	ge
 800dfd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dfd2:	89a3      	ldrhlt	r3, [r4, #12]
 800dfd4:	181b      	addge	r3, r3, r0
 800dfd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dfda:	bfac      	ite	ge
 800dfdc:	6563      	strge	r3, [r4, #84]	; 0x54
 800dfde:	81a3      	strhlt	r3, [r4, #12]
 800dfe0:	bd10      	pop	{r4, pc}

0800dfe2 <__swrite>:
 800dfe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfe6:	461f      	mov	r7, r3
 800dfe8:	898b      	ldrh	r3, [r1, #12]
 800dfea:	05db      	lsls	r3, r3, #23
 800dfec:	4605      	mov	r5, r0
 800dfee:	460c      	mov	r4, r1
 800dff0:	4616      	mov	r6, r2
 800dff2:	d505      	bpl.n	800e000 <__swrite+0x1e>
 800dff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dff8:	2302      	movs	r3, #2
 800dffa:	2200      	movs	r2, #0
 800dffc:	f000 f8b8 	bl	800e170 <_lseek_r>
 800e000:	89a3      	ldrh	r3, [r4, #12]
 800e002:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e006:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e00a:	81a3      	strh	r3, [r4, #12]
 800e00c:	4632      	mov	r2, r6
 800e00e:	463b      	mov	r3, r7
 800e010:	4628      	mov	r0, r5
 800e012:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e016:	f000 b837 	b.w	800e088 <_write_r>

0800e01a <__sseek>:
 800e01a:	b510      	push	{r4, lr}
 800e01c:	460c      	mov	r4, r1
 800e01e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e022:	f000 f8a5 	bl	800e170 <_lseek_r>
 800e026:	1c43      	adds	r3, r0, #1
 800e028:	89a3      	ldrh	r3, [r4, #12]
 800e02a:	bf15      	itete	ne
 800e02c:	6560      	strne	r0, [r4, #84]	; 0x54
 800e02e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e032:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e036:	81a3      	strheq	r3, [r4, #12]
 800e038:	bf18      	it	ne
 800e03a:	81a3      	strhne	r3, [r4, #12]
 800e03c:	bd10      	pop	{r4, pc}

0800e03e <__sclose>:
 800e03e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e042:	f000 b851 	b.w	800e0e8 <_close_r>

0800e046 <strncmp>:
 800e046:	b510      	push	{r4, lr}
 800e048:	b17a      	cbz	r2, 800e06a <strncmp+0x24>
 800e04a:	4603      	mov	r3, r0
 800e04c:	3901      	subs	r1, #1
 800e04e:	1884      	adds	r4, r0, r2
 800e050:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e054:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e058:	4290      	cmp	r0, r2
 800e05a:	d101      	bne.n	800e060 <strncmp+0x1a>
 800e05c:	42a3      	cmp	r3, r4
 800e05e:	d101      	bne.n	800e064 <strncmp+0x1e>
 800e060:	1a80      	subs	r0, r0, r2
 800e062:	bd10      	pop	{r4, pc}
 800e064:	2800      	cmp	r0, #0
 800e066:	d1f3      	bne.n	800e050 <strncmp+0xa>
 800e068:	e7fa      	b.n	800e060 <strncmp+0x1a>
 800e06a:	4610      	mov	r0, r2
 800e06c:	e7f9      	b.n	800e062 <strncmp+0x1c>

0800e06e <__ascii_wctomb>:
 800e06e:	b149      	cbz	r1, 800e084 <__ascii_wctomb+0x16>
 800e070:	2aff      	cmp	r2, #255	; 0xff
 800e072:	bf85      	ittet	hi
 800e074:	238a      	movhi	r3, #138	; 0x8a
 800e076:	6003      	strhi	r3, [r0, #0]
 800e078:	700a      	strbls	r2, [r1, #0]
 800e07a:	f04f 30ff 	movhi.w	r0, #4294967295
 800e07e:	bf98      	it	ls
 800e080:	2001      	movls	r0, #1
 800e082:	4770      	bx	lr
 800e084:	4608      	mov	r0, r1
 800e086:	4770      	bx	lr

0800e088 <_write_r>:
 800e088:	b538      	push	{r3, r4, r5, lr}
 800e08a:	4d07      	ldr	r5, [pc, #28]	; (800e0a8 <_write_r+0x20>)
 800e08c:	4604      	mov	r4, r0
 800e08e:	4608      	mov	r0, r1
 800e090:	4611      	mov	r1, r2
 800e092:	2200      	movs	r2, #0
 800e094:	602a      	str	r2, [r5, #0]
 800e096:	461a      	mov	r2, r3
 800e098:	f7f2 ffae 	bl	8000ff8 <_write>
 800e09c:	1c43      	adds	r3, r0, #1
 800e09e:	d102      	bne.n	800e0a6 <_write_r+0x1e>
 800e0a0:	682b      	ldr	r3, [r5, #0]
 800e0a2:	b103      	cbz	r3, 800e0a6 <_write_r+0x1e>
 800e0a4:	6023      	str	r3, [r4, #0]
 800e0a6:	bd38      	pop	{r3, r4, r5, pc}
 800e0a8:	20000564 	.word	0x20000564

0800e0ac <__assert_func>:
 800e0ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e0ae:	4614      	mov	r4, r2
 800e0b0:	461a      	mov	r2, r3
 800e0b2:	4b09      	ldr	r3, [pc, #36]	; (800e0d8 <__assert_func+0x2c>)
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	4605      	mov	r5, r0
 800e0b8:	68d8      	ldr	r0, [r3, #12]
 800e0ba:	b14c      	cbz	r4, 800e0d0 <__assert_func+0x24>
 800e0bc:	4b07      	ldr	r3, [pc, #28]	; (800e0dc <__assert_func+0x30>)
 800e0be:	9100      	str	r1, [sp, #0]
 800e0c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e0c4:	4906      	ldr	r1, [pc, #24]	; (800e0e0 <__assert_func+0x34>)
 800e0c6:	462b      	mov	r3, r5
 800e0c8:	f000 f81e 	bl	800e108 <fiprintf>
 800e0cc:	f000 f8ca 	bl	800e264 <abort>
 800e0d0:	4b04      	ldr	r3, [pc, #16]	; (800e0e4 <__assert_func+0x38>)
 800e0d2:	461c      	mov	r4, r3
 800e0d4:	e7f3      	b.n	800e0be <__assert_func+0x12>
 800e0d6:	bf00      	nop
 800e0d8:	200000a4 	.word	0x200000a4
 800e0dc:	0800e9e5 	.word	0x0800e9e5
 800e0e0:	0800e9f2 	.word	0x0800e9f2
 800e0e4:	0800ea20 	.word	0x0800ea20

0800e0e8 <_close_r>:
 800e0e8:	b538      	push	{r3, r4, r5, lr}
 800e0ea:	4d06      	ldr	r5, [pc, #24]	; (800e104 <_close_r+0x1c>)
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	4604      	mov	r4, r0
 800e0f0:	4608      	mov	r0, r1
 800e0f2:	602b      	str	r3, [r5, #0]
 800e0f4:	f7f4 fa81 	bl	80025fa <_close>
 800e0f8:	1c43      	adds	r3, r0, #1
 800e0fa:	d102      	bne.n	800e102 <_close_r+0x1a>
 800e0fc:	682b      	ldr	r3, [r5, #0]
 800e0fe:	b103      	cbz	r3, 800e102 <_close_r+0x1a>
 800e100:	6023      	str	r3, [r4, #0]
 800e102:	bd38      	pop	{r3, r4, r5, pc}
 800e104:	20000564 	.word	0x20000564

0800e108 <fiprintf>:
 800e108:	b40e      	push	{r1, r2, r3}
 800e10a:	b503      	push	{r0, r1, lr}
 800e10c:	4601      	mov	r1, r0
 800e10e:	ab03      	add	r3, sp, #12
 800e110:	4805      	ldr	r0, [pc, #20]	; (800e128 <fiprintf+0x20>)
 800e112:	f853 2b04 	ldr.w	r2, [r3], #4
 800e116:	6800      	ldr	r0, [r0, #0]
 800e118:	9301      	str	r3, [sp, #4]
 800e11a:	f7ff fe09 	bl	800dd30 <_vfiprintf_r>
 800e11e:	b002      	add	sp, #8
 800e120:	f85d eb04 	ldr.w	lr, [sp], #4
 800e124:	b003      	add	sp, #12
 800e126:	4770      	bx	lr
 800e128:	200000a4 	.word	0x200000a4

0800e12c <_fstat_r>:
 800e12c:	b538      	push	{r3, r4, r5, lr}
 800e12e:	4d07      	ldr	r5, [pc, #28]	; (800e14c <_fstat_r+0x20>)
 800e130:	2300      	movs	r3, #0
 800e132:	4604      	mov	r4, r0
 800e134:	4608      	mov	r0, r1
 800e136:	4611      	mov	r1, r2
 800e138:	602b      	str	r3, [r5, #0]
 800e13a:	f7f4 fa6a 	bl	8002612 <_fstat>
 800e13e:	1c43      	adds	r3, r0, #1
 800e140:	d102      	bne.n	800e148 <_fstat_r+0x1c>
 800e142:	682b      	ldr	r3, [r5, #0]
 800e144:	b103      	cbz	r3, 800e148 <_fstat_r+0x1c>
 800e146:	6023      	str	r3, [r4, #0]
 800e148:	bd38      	pop	{r3, r4, r5, pc}
 800e14a:	bf00      	nop
 800e14c:	20000564 	.word	0x20000564

0800e150 <_isatty_r>:
 800e150:	b538      	push	{r3, r4, r5, lr}
 800e152:	4d06      	ldr	r5, [pc, #24]	; (800e16c <_isatty_r+0x1c>)
 800e154:	2300      	movs	r3, #0
 800e156:	4604      	mov	r4, r0
 800e158:	4608      	mov	r0, r1
 800e15a:	602b      	str	r3, [r5, #0]
 800e15c:	f7f4 fa69 	bl	8002632 <_isatty>
 800e160:	1c43      	adds	r3, r0, #1
 800e162:	d102      	bne.n	800e16a <_isatty_r+0x1a>
 800e164:	682b      	ldr	r3, [r5, #0]
 800e166:	b103      	cbz	r3, 800e16a <_isatty_r+0x1a>
 800e168:	6023      	str	r3, [r4, #0]
 800e16a:	bd38      	pop	{r3, r4, r5, pc}
 800e16c:	20000564 	.word	0x20000564

0800e170 <_lseek_r>:
 800e170:	b538      	push	{r3, r4, r5, lr}
 800e172:	4d07      	ldr	r5, [pc, #28]	; (800e190 <_lseek_r+0x20>)
 800e174:	4604      	mov	r4, r0
 800e176:	4608      	mov	r0, r1
 800e178:	4611      	mov	r1, r2
 800e17a:	2200      	movs	r2, #0
 800e17c:	602a      	str	r2, [r5, #0]
 800e17e:	461a      	mov	r2, r3
 800e180:	f7f4 fa62 	bl	8002648 <_lseek>
 800e184:	1c43      	adds	r3, r0, #1
 800e186:	d102      	bne.n	800e18e <_lseek_r+0x1e>
 800e188:	682b      	ldr	r3, [r5, #0]
 800e18a:	b103      	cbz	r3, 800e18e <_lseek_r+0x1e>
 800e18c:	6023      	str	r3, [r4, #0]
 800e18e:	bd38      	pop	{r3, r4, r5, pc}
 800e190:	20000564 	.word	0x20000564

0800e194 <memmove>:
 800e194:	4288      	cmp	r0, r1
 800e196:	b510      	push	{r4, lr}
 800e198:	eb01 0402 	add.w	r4, r1, r2
 800e19c:	d902      	bls.n	800e1a4 <memmove+0x10>
 800e19e:	4284      	cmp	r4, r0
 800e1a0:	4623      	mov	r3, r4
 800e1a2:	d807      	bhi.n	800e1b4 <memmove+0x20>
 800e1a4:	1e43      	subs	r3, r0, #1
 800e1a6:	42a1      	cmp	r1, r4
 800e1a8:	d008      	beq.n	800e1bc <memmove+0x28>
 800e1aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e1ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e1b2:	e7f8      	b.n	800e1a6 <memmove+0x12>
 800e1b4:	4402      	add	r2, r0
 800e1b6:	4601      	mov	r1, r0
 800e1b8:	428a      	cmp	r2, r1
 800e1ba:	d100      	bne.n	800e1be <memmove+0x2a>
 800e1bc:	bd10      	pop	{r4, pc}
 800e1be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e1c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e1c6:	e7f7      	b.n	800e1b8 <memmove+0x24>

0800e1c8 <__malloc_lock>:
 800e1c8:	4801      	ldr	r0, [pc, #4]	; (800e1d0 <__malloc_lock+0x8>)
 800e1ca:	f7fe bdf2 	b.w	800cdb2 <__retarget_lock_acquire_recursive>
 800e1ce:	bf00      	nop
 800e1d0:	20000558 	.word	0x20000558

0800e1d4 <__malloc_unlock>:
 800e1d4:	4801      	ldr	r0, [pc, #4]	; (800e1dc <__malloc_unlock+0x8>)
 800e1d6:	f7fe bded 	b.w	800cdb4 <__retarget_lock_release_recursive>
 800e1da:	bf00      	nop
 800e1dc:	20000558 	.word	0x20000558

0800e1e0 <_realloc_r>:
 800e1e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1e4:	4680      	mov	r8, r0
 800e1e6:	4614      	mov	r4, r2
 800e1e8:	460e      	mov	r6, r1
 800e1ea:	b921      	cbnz	r1, 800e1f6 <_realloc_r+0x16>
 800e1ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e1f0:	4611      	mov	r1, r2
 800e1f2:	f7ff bba3 	b.w	800d93c <_malloc_r>
 800e1f6:	b92a      	cbnz	r2, 800e204 <_realloc_r+0x24>
 800e1f8:	f7ff fb34 	bl	800d864 <_free_r>
 800e1fc:	4625      	mov	r5, r4
 800e1fe:	4628      	mov	r0, r5
 800e200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e204:	f000 f835 	bl	800e272 <_malloc_usable_size_r>
 800e208:	4284      	cmp	r4, r0
 800e20a:	4607      	mov	r7, r0
 800e20c:	d802      	bhi.n	800e214 <_realloc_r+0x34>
 800e20e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e212:	d812      	bhi.n	800e23a <_realloc_r+0x5a>
 800e214:	4621      	mov	r1, r4
 800e216:	4640      	mov	r0, r8
 800e218:	f7ff fb90 	bl	800d93c <_malloc_r>
 800e21c:	4605      	mov	r5, r0
 800e21e:	2800      	cmp	r0, #0
 800e220:	d0ed      	beq.n	800e1fe <_realloc_r+0x1e>
 800e222:	42bc      	cmp	r4, r7
 800e224:	4622      	mov	r2, r4
 800e226:	4631      	mov	r1, r6
 800e228:	bf28      	it	cs
 800e22a:	463a      	movcs	r2, r7
 800e22c:	f7fb fb6a 	bl	8009904 <memcpy>
 800e230:	4631      	mov	r1, r6
 800e232:	4640      	mov	r0, r8
 800e234:	f7ff fb16 	bl	800d864 <_free_r>
 800e238:	e7e1      	b.n	800e1fe <_realloc_r+0x1e>
 800e23a:	4635      	mov	r5, r6
 800e23c:	e7df      	b.n	800e1fe <_realloc_r+0x1e>
	...

0800e240 <_read_r>:
 800e240:	b538      	push	{r3, r4, r5, lr}
 800e242:	4d07      	ldr	r5, [pc, #28]	; (800e260 <_read_r+0x20>)
 800e244:	4604      	mov	r4, r0
 800e246:	4608      	mov	r0, r1
 800e248:	4611      	mov	r1, r2
 800e24a:	2200      	movs	r2, #0
 800e24c:	602a      	str	r2, [r5, #0]
 800e24e:	461a      	mov	r2, r3
 800e250:	f7f4 f9b6 	bl	80025c0 <_read>
 800e254:	1c43      	adds	r3, r0, #1
 800e256:	d102      	bne.n	800e25e <_read_r+0x1e>
 800e258:	682b      	ldr	r3, [r5, #0]
 800e25a:	b103      	cbz	r3, 800e25e <_read_r+0x1e>
 800e25c:	6023      	str	r3, [r4, #0]
 800e25e:	bd38      	pop	{r3, r4, r5, pc}
 800e260:	20000564 	.word	0x20000564

0800e264 <abort>:
 800e264:	b508      	push	{r3, lr}
 800e266:	2006      	movs	r0, #6
 800e268:	f000 f834 	bl	800e2d4 <raise>
 800e26c:	2001      	movs	r0, #1
 800e26e:	f7f4 f99d 	bl	80025ac <_exit>

0800e272 <_malloc_usable_size_r>:
 800e272:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e276:	1f18      	subs	r0, r3, #4
 800e278:	2b00      	cmp	r3, #0
 800e27a:	bfbc      	itt	lt
 800e27c:	580b      	ldrlt	r3, [r1, r0]
 800e27e:	18c0      	addlt	r0, r0, r3
 800e280:	4770      	bx	lr

0800e282 <_raise_r>:
 800e282:	291f      	cmp	r1, #31
 800e284:	b538      	push	{r3, r4, r5, lr}
 800e286:	4604      	mov	r4, r0
 800e288:	460d      	mov	r5, r1
 800e28a:	d904      	bls.n	800e296 <_raise_r+0x14>
 800e28c:	2316      	movs	r3, #22
 800e28e:	6003      	str	r3, [r0, #0]
 800e290:	f04f 30ff 	mov.w	r0, #4294967295
 800e294:	bd38      	pop	{r3, r4, r5, pc}
 800e296:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e298:	b112      	cbz	r2, 800e2a0 <_raise_r+0x1e>
 800e29a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e29e:	b94b      	cbnz	r3, 800e2b4 <_raise_r+0x32>
 800e2a0:	4620      	mov	r0, r4
 800e2a2:	f000 f831 	bl	800e308 <_getpid_r>
 800e2a6:	462a      	mov	r2, r5
 800e2a8:	4601      	mov	r1, r0
 800e2aa:	4620      	mov	r0, r4
 800e2ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e2b0:	f000 b818 	b.w	800e2e4 <_kill_r>
 800e2b4:	2b01      	cmp	r3, #1
 800e2b6:	d00a      	beq.n	800e2ce <_raise_r+0x4c>
 800e2b8:	1c59      	adds	r1, r3, #1
 800e2ba:	d103      	bne.n	800e2c4 <_raise_r+0x42>
 800e2bc:	2316      	movs	r3, #22
 800e2be:	6003      	str	r3, [r0, #0]
 800e2c0:	2001      	movs	r0, #1
 800e2c2:	e7e7      	b.n	800e294 <_raise_r+0x12>
 800e2c4:	2400      	movs	r4, #0
 800e2c6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e2ca:	4628      	mov	r0, r5
 800e2cc:	4798      	blx	r3
 800e2ce:	2000      	movs	r0, #0
 800e2d0:	e7e0      	b.n	800e294 <_raise_r+0x12>
	...

0800e2d4 <raise>:
 800e2d4:	4b02      	ldr	r3, [pc, #8]	; (800e2e0 <raise+0xc>)
 800e2d6:	4601      	mov	r1, r0
 800e2d8:	6818      	ldr	r0, [r3, #0]
 800e2da:	f7ff bfd2 	b.w	800e282 <_raise_r>
 800e2de:	bf00      	nop
 800e2e0:	200000a4 	.word	0x200000a4

0800e2e4 <_kill_r>:
 800e2e4:	b538      	push	{r3, r4, r5, lr}
 800e2e6:	4d07      	ldr	r5, [pc, #28]	; (800e304 <_kill_r+0x20>)
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	4604      	mov	r4, r0
 800e2ec:	4608      	mov	r0, r1
 800e2ee:	4611      	mov	r1, r2
 800e2f0:	602b      	str	r3, [r5, #0]
 800e2f2:	f7f4 f94b 	bl	800258c <_kill>
 800e2f6:	1c43      	adds	r3, r0, #1
 800e2f8:	d102      	bne.n	800e300 <_kill_r+0x1c>
 800e2fa:	682b      	ldr	r3, [r5, #0]
 800e2fc:	b103      	cbz	r3, 800e300 <_kill_r+0x1c>
 800e2fe:	6023      	str	r3, [r4, #0]
 800e300:	bd38      	pop	{r3, r4, r5, pc}
 800e302:	bf00      	nop
 800e304:	20000564 	.word	0x20000564

0800e308 <_getpid_r>:
 800e308:	f7f4 b938 	b.w	800257c <_getpid>

0800e30c <_init>:
 800e30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e30e:	bf00      	nop
 800e310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e312:	bc08      	pop	{r3}
 800e314:	469e      	mov	lr, r3
 800e316:	4770      	bx	lr

0800e318 <_fini>:
 800e318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e31a:	bf00      	nop
 800e31c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e31e:	bc08      	pop	{r3}
 800e320:	469e      	mov	lr, r3
 800e322:	4770      	bx	lr
